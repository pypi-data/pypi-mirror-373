# -*- coding: utf-8 -*-

"""
uexcorpapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from uexcorpapi.api_helper import APIHelper


class Data30(object):

    """Implementation of the 'Data30' model.

    Attributes:
        code (str): The model property of type str.
        date_added (str): The model property of type str.
        id (str): The model property of type str.
        name (str): The model property of type str.
        rating_cost (str): The model property of type str.
        rating_speed (str): The model property of type str.
        rating_yield (str): The model property of type str.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'code',
        "date_added": 'date_added',
        "id": 'id',
        "name": 'name',
        "rating_cost": 'rating_cost',
        "rating_speed": 'rating_speed',
        "rating_yield": 'rating_yield'
    }

    def __init__(self,
                 code=None,
                 date_added=None,
                 id=None,
                 name=None,
                 rating_cost=None,
                 rating_speed=None,
                 rating_yield=None,
                 additional_properties=None):
        """Constructor for the Data30 class"""

        # Initialize members of the class
        self.code = code 
        self.date_added = date_added 
        self.id = id 
        self.name = name 
        self.rating_cost = rating_cost 
        self.rating_speed = rating_speed 
        self.rating_yield = rating_yield 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("code") if dictionary.get("code") else None
        date_added = dictionary.get("date_added") if dictionary.get("date_added") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        rating_cost = dictionary.get("rating_cost") if dictionary.get("rating_cost") else None
        rating_speed = dictionary.get("rating_speed") if dictionary.get("rating_speed") else None
        rating_yield = dictionary.get("rating_yield") if dictionary.get("rating_yield") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(code,
                   date_added,
                   id,
                   name,
                   rating_cost,
                   rating_speed,
                   rating_yield,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!r}, '
                f'date_added={self.date_added!r}, '
                f'id={self.id!r}, '
                f'name={self.name!r}, '
                f'rating_cost={self.rating_cost!r}, '
                f'rating_speed={self.rating_speed!r}, '
                f'rating_yield={self.rating_yield!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!s}, '
                f'date_added={self.date_added!s}, '
                f'id={self.id!s}, '
                f'name={self.name!s}, '
                f'rating_cost={self.rating_cost!s}, '
                f'rating_speed={self.rating_speed!s}, '
                f'rating_yield={self.rating_yield!s}, '
                f'additional_properties={self.additional_properties!s})')
