# -*- coding: utf-8 -*-

"""
uexcorpapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from uexcorpapi.api_helper import APIHelper


class Data43(object):

    """Implementation of the 'Data43' model.

    Attributes:
        date_added (str): The model property of type str.
        date_modified (str): The model property of type str.
        id (str): The model property of type str.
        id_terminal (str): The model property of type str.
        id_vehicle (str): The model property of type str.
        price_rent (str): The model property of type str.
        terminal_name (str): The model property of type str.
        vehicle_name (str): The model property of type str.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date_added": 'date_added',
        "date_modified": 'date_modified',
        "id": 'id',
        "id_terminal": 'id_terminal',
        "id_vehicle": 'id_vehicle',
        "price_rent": 'price_rent',
        "terminal_name": 'terminal_name',
        "vehicle_name": 'vehicle_name'
    }

    def __init__(self,
                 date_added=None,
                 date_modified=None,
                 id=None,
                 id_terminal=None,
                 id_vehicle=None,
                 price_rent=None,
                 terminal_name=None,
                 vehicle_name=None,
                 additional_properties=None):
        """Constructor for the Data43 class"""

        # Initialize members of the class
        self.date_added = date_added 
        self.date_modified = date_modified 
        self.id = id 
        self.id_terminal = id_terminal 
        self.id_vehicle = id_vehicle 
        self.price_rent = price_rent 
        self.terminal_name = terminal_name 
        self.vehicle_name = vehicle_name 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        date_added = dictionary.get("date_added") if dictionary.get("date_added") else None
        date_modified = dictionary.get("date_modified") if dictionary.get("date_modified") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        id_terminal = dictionary.get("id_terminal") if dictionary.get("id_terminal") else None
        id_vehicle = dictionary.get("id_vehicle") if dictionary.get("id_vehicle") else None
        price_rent = dictionary.get("price_rent") if dictionary.get("price_rent") else None
        terminal_name = dictionary.get("terminal_name") if dictionary.get("terminal_name") else None
        vehicle_name = dictionary.get("vehicle_name") if dictionary.get("vehicle_name") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(date_added,
                   date_modified,
                   id,
                   id_terminal,
                   id_vehicle,
                   price_rent,
                   terminal_name,
                   vehicle_name,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'date_added={self.date_added!r}, '
                f'date_modified={self.date_modified!r}, '
                f'id={self.id!r}, '
                f'id_terminal={self.id_terminal!r}, '
                f'id_vehicle={self.id_vehicle!r}, '
                f'price_rent={self.price_rent!r}, '
                f'terminal_name={self.terminal_name!r}, '
                f'vehicle_name={self.vehicle_name!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'date_added={self.date_added!s}, '
                f'date_modified={self.date_modified!s}, '
                f'id={self.id!s}, '
                f'id_terminal={self.id_terminal!s}, '
                f'id_vehicle={self.id_vehicle!s}, '
                f'price_rent={self.price_rent!s}, '
                f'terminal_name={self.terminal_name!s}, '
                f'vehicle_name={self.vehicle_name!s}, '
                f'additional_properties={self.additional_properties!s})')
