# -*- coding: utf-8 -*-

"""
uexcorpapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from uexcorpapi.api_helper import APIHelper


class Data17(object):

    """Implementation of the 'Data17' model.

    Attributes:
        date_added (str): The model property of type str.
        date_modified (str): The model property of type str.
        id (str): The model property of type str.
        id_category (str): The model property of type str.
        id_item (str): The model property of type str.
        id_terminal (str): The model property of type str.
        item_name (str): The model property of type str.
        item_uuid (str): The model property of type str.
        price_buy (str): The model property of type str.
        price_sell (str): The model property of type str.
        terminal_name (str): The model property of type str.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date_added": 'date_added',
        "date_modified": 'date_modified',
        "id": 'id',
        "id_category": 'id_category',
        "id_item": 'id_item',
        "id_terminal": 'id_terminal',
        "item_name": 'item_name',
        "item_uuid": 'item_uuid',
        "price_buy": 'price_buy',
        "price_sell": 'price_sell',
        "terminal_name": 'terminal_name'
    }

    def __init__(self,
                 date_added=None,
                 date_modified=None,
                 id=None,
                 id_category=None,
                 id_item=None,
                 id_terminal=None,
                 item_name=None,
                 item_uuid=None,
                 price_buy=None,
                 price_sell=None,
                 terminal_name=None,
                 additional_properties=None):
        """Constructor for the Data17 class"""

        # Initialize members of the class
        self.date_added = date_added 
        self.date_modified = date_modified 
        self.id = id 
        self.id_category = id_category 
        self.id_item = id_item 
        self.id_terminal = id_terminal 
        self.item_name = item_name 
        self.item_uuid = item_uuid 
        self.price_buy = price_buy 
        self.price_sell = price_sell 
        self.terminal_name = terminal_name 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        date_added = dictionary.get("date_added") if dictionary.get("date_added") else None
        date_modified = dictionary.get("date_modified") if dictionary.get("date_modified") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        id_category = dictionary.get("id_category") if dictionary.get("id_category") else None
        id_item = dictionary.get("id_item") if dictionary.get("id_item") else None
        id_terminal = dictionary.get("id_terminal") if dictionary.get("id_terminal") else None
        item_name = dictionary.get("item_name") if dictionary.get("item_name") else None
        item_uuid = dictionary.get("item_uuid") if dictionary.get("item_uuid") else None
        price_buy = dictionary.get("price_buy") if dictionary.get("price_buy") else None
        price_sell = dictionary.get("price_sell") if dictionary.get("price_sell") else None
        terminal_name = dictionary.get("terminal_name") if dictionary.get("terminal_name") else None
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(date_added,
                   date_modified,
                   id,
                   id_category,
                   id_item,
                   id_terminal,
                   item_name,
                   item_uuid,
                   price_buy,
                   price_sell,
                   terminal_name,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'date_added={self.date_added!r}, '
                f'date_modified={self.date_modified!r}, '
                f'id={self.id!r}, '
                f'id_category={self.id_category!r}, '
                f'id_item={self.id_item!r}, '
                f'id_terminal={self.id_terminal!r}, '
                f'item_name={self.item_name!r}, '
                f'item_uuid={self.item_uuid!r}, '
                f'price_buy={self.price_buy!r}, '
                f'price_sell={self.price_sell!r}, '
                f'terminal_name={self.terminal_name!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'date_added={self.date_added!s}, '
                f'date_modified={self.date_modified!s}, '
                f'id={self.id!s}, '
                f'id_category={self.id_category!s}, '
                f'id_item={self.id_item!s}, '
                f'id_terminal={self.id_terminal!s}, '
                f'item_name={self.item_name!s}, '
                f'item_uuid={self.item_uuid!s}, '
                f'price_buy={self.price_buy!s}, '
                f'price_sell={self.price_sell!s}, '
                f'terminal_name={self.terminal_name!s}, '
                f'additional_properties={self.additional_properties!s})')
