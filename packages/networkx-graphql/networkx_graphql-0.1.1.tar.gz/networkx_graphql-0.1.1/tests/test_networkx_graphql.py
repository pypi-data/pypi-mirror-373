import networkx as nx
import strawberry
from graphinate import GraphType

# Generated by Qodo Gen
from networkx_graphql import schema


# Create schema with default node type extractor using simple undirected graph
def test_create_schema_with_default_extractor():
    # Arrange
    g = nx.Graph(name="test")
    g.add_nodes_from([1, 2, 3])
    g.add_edges_from([(1, 2), (2, 3)])

    # Act
    result: strawberry.Schema = schema(g)

    # Assert
    assert isinstance(result, strawberry.Schema)
    assert result.as_str() is not None


## Generate schema with custom node type extractor function
def test_schema_with_custom_extractor():
    # Arrange
    g = nx.Graph(name="test")
    g.add_nodes_from([1, 2])

    def custom_extractor(node):
        return "CustomType"

    # Act
    result = schema(g, node_type_extractor=custom_extractor)

    # Assert
    assert isinstance(result, strawberry.Schema)
    assert "CustomType".lower() in result.as_str().lower()


## Handle empty graph with no nodes or edges
def test_empty_graph():
    # Arrange
    g = nx.Graph(name="empty")

    # Act
    result = schema(g)

    # Assert
    assert isinstance(result, strawberry.Schema)
    assert "node" in result.as_str()
    assert "edge" in result.as_str()


## Pass None as node_type_extractor
def test_none_type_extractor():
    # Arrange
    g = nx.Graph(name="test")
    g.add_node(1)

    # Act
    result = schema(g, node_type_extractor=None)

    # Assert
    assert isinstance(result, strawberry.Schema)
    assert "node" in result.as_str()


## Pass non-callable object as node_type_extractor
def test_non_callable_extractor():
    # Arrange
    g = nx.Graph(name="test")
    non_callable = "string_extractor"

    # Act
    result = schema(g, node_type_extractor=non_callable)

    # Assert
    assert isinstance(result, strawberry.Schema)
    assert "node" in result.as_str()


## Handle disconnected nodes with no edges
def test_disconnected_nodes():
    # Arrange
    g = nx.Graph(name="test")
    g.add_nodes_from([1, 2, 3])  # No edges between nodes

    # Act
    result = schema(g)

    # Assert
    assert isinstance(result, strawberry.Schema)
    assert "node" in result.as_str()
    assert "edge" in result.as_str()


## Process multigraph with parallel edges
def test_multigraph_parallel_edges():
    # Arrange
    g = nx.MultiGraph(name="test")
    g.add_edges_from([(1, 2), (1, 2)])  # Parallel edges

    # Act
    result = schema(g)

    # Assert
    assert GraphType.of(g) == GraphType.MultiGraph
    assert isinstance(result, strawberry.Schema)


## Verify schema structure matches graph type (directed vs undirected)
def test_directed_graph_schema():
    # Arrange
    g = nx.DiGraph(name="test")
    g.add_edge(1, 2)

    # Act
    result = schema(g)

    # Assert
    assert GraphType.of(g) == GraphType.DiGraph
    assert isinstance(result, strawberry.Schema)


## Create schema with a directed multigraph
def test_multidiraph_schema():
    # Arrange
    g = nx.MultiDiGraph(name="test")
    g.add_edge(1, 2)
    g.add_edge(1, 2)  # Adding a parallel edge to make it a multigraph

    # Act
    result = schema(g)

    # Assert
    assert GraphType.of(g) == GraphType.MultiDiGraph
    assert isinstance(result, strawberry.Schema)
