#define DOCSTRING_MODULE "LFO - Low-Frequency-Oscillators for python\n\nThis class transfers the concept of LFOs from modylar synthesizers to python.\n\nSo what is an LFO?  LFO stands for \"Low Frequency Oscillator\".  It's an\ninfinitely repeating curve that you can pull out values from.  The simplest\nform is probably a sine wave.  Regardless of how often you travel along the\ncircle, you always get consistent and reproducible values out of it.\n\nBut LFOs come in many different shapes.  Here are the ones implemented right\nnow (see further below for descriptions), but I'm open to suggestions to\nextend this list:\n\n    * lfo.sine, lfo.cosine\n    * lfo.triangle\n    * lfo.sawtooth\n    * lfo.square\n    * lfo.one\n    * lfo.zero\n    * lfo.random\n    * lfo.inv_<waveform> - All of the above, but inverted\n\nThe lfo registers the start time of its instantiation.  If no period length -\nthe duration of one single wave - is provided, it defaults to 1 second.\n\nWhenever you now query a value from the lfo, it gives you the proper function\nresult of that wave for this specific point in time.  Also, you can query all\nof these wave forms from the same lfo.  The lfo instance basically just\ndefines the heartbeat for all the waves.\n\nEach waveform can be scaled and offset.  Note, that the inverted waves use the\nsame scale and offset as the normal ones, otherwise they would run out of\nsync.\n\nThere's one important difference to the lfo you might know from your DAW or\nsynth.  Since most programmers will use these to ramp other values by\nmultiplication, this lfo is not centered around the 0 point of the y axis, but\nall waves except sine and cosine variants are positioned so that they return a\nvalue between 0 and 1. There are per-wave parameters to change this."
#define DOCSTRING_LFO "The actual LFO class\n\nThe following settings can be passed to the init and during runtime as\nattributes:\n\n    period: float\n        The duration of one full wave\n\n    frequency: float\n        The frequency of the LFO is `1 / period.\n\n    cycles: int = 0\n        Limit the number of cycles the LFO runs.\n\n        If the number is reached, the LFO will constantly return the proper\n        value for the `lfo.period` time.\n\n        **NOTE**: That means that the random wave will continue, since it's\n        value is not dependent of time.\n\n        If the LFO us used as an iterator, ending the cycle will raise\n        StopIteration.\n\n        lfo.reset() will set the cycle counter back to 0.\n\n    default_wave: lfo.Wave = lfo.Wave.sine\n        Set the default wave form.\n\n        **Note:**  This is not a runtime attribute.  Use\n            lfo.set_default_wave(...) instead.\n\nThese attributes are read-only:\n\n    t: float\n        The current time within the current wave\n\n    normalized: float\n        The current time within the current wave, normalized to 0-1\n\n    cycle: int\n        The number of waves this LFO has completed\n\n    frozen: bool\n        The frozen status of the LFO.  Same as `lfo.is_frozen()`.\n\nWave attributes:\n\n    Every wave attribute `lfo.<wave>` also provides an inverted variant\n    `lfo.<inv_wave>`. All wave attributes have their own attenuverter and\n    offset, `lfo.<wave>_attenuverter` and `lfo.<wave>_offset`\n    respectively.  While `lfo.<wave>` and `lfo.inv_<wave>` are read-only,\n    the attenuverters and offsets can be set in the init and during\n    runtime.\n\n    Waves:\n\n        Sine/Cosine:\n            sine\n            cosine\n            inv_sine\n            inv_cosine\n            sine_attenuverter\n            cosine_attenuverter\n            sine_offset\n            cosine_offset\n\n        Triangle:\n\n            triangle\n            inv_triangle\n            triangle_attenuverter\n            triangle_offset\n\n        Sawtooth:\n            sawtooth\n            inv_sawtooth\n            sawtooth_attenuverter\n            sawtooth_offset\n\n        Square:\n            The square wave has two additional control parameters.  The\n            pulsewidth `pw` is the duration the square wave is up.\n\n            The pw_offset sets the start of the up-phase.  pw_offset is\n            normalized to 0-1, so it wont be necessary to update it every\n            time the wave is attenuverted.\n\n            square\n            inv_square\n            square_attenuverter\n            square_offset\n            pw\n            pw_offset\n\n        Zero/One:\n            one\n            zero\n            inv_one\n            inv_zero\n            one_attenuverter\n            zero_attenuverter\n            one_offset\n            zero_offset\n\n        Random\n            random\n            inv_random\n            random_attenuverter\n            random_offset\n\n\nAdditional methods and features:\n\n    LFO compares properly with int, float and bool objects.\n    LFO can be used as an iterator and is iterable.  The default for these is\n    the sine wave.  Use `lfo.set_default_wave()` to change this.\n\n    If lfo.cycles is not set, the lfo will run infinitely.\n\n    If the LFO object is called as function, it will return the value of\n    the sine wave (or the alternative given by `lfo.set_default_wave`).\n"
#define DOCSTRING_FREEZE "Freeze the LFO\n\nA frozen LFO returns the value at the time it was frozen.\n\nWhen the LFO is unfrozen again, it will adjust its phase so, that the\nwave will not jump."
#define DOCSTRING_UNFREEZE "Unfreeze a frozen the LFO\n\nSee \"freeze\".\n\nUnfreezing an already running LFO does nothing."
#define DOCSTRING_ISFROZEN "Check if the LFO is frozen"
#define DOCSTRING_RESET "Reset the wave so it's starting point is now"
#define DOCSTRING_SETATTENUVERTERS "Set all attenuverters to `value`"
#define DOCSTRING_SETOFFSETS "Set all offsets to `value`"
#define DOCSTRING_DEFAULTWAVE "Set the default wave for lfo(), float(lfo), int(lfo) and bool(lfo)\n\n    `LFO(default_wave=n)`\n    `lfo.set_default_wave(n)`\n\nUse the `Wave` Enum instead of plain numbers.  The fields match the\nwavefunctions.  E.g.\n\n    lfo.set_default_wave(Wave.inv_triangle)\n    wave = LFO(default_wave=Wave.inv_sawtooth)\n"
#define DOCSTRING_REWIND "Rewind the lfo by the by the given fraction in the range of 0-1.\n\nThe actual rewind time will be `passed_time * lfo.period`.  This way, the\nrewind amount doens't need to be corrected when the period is changed.\n"
#define DOCSTRING_SKIP "Skip the lfo by the by the given fraction in the range of 0-1.\n\nThe actual skip time will be `passed_time * lfo.period`.  This way, the skip\namount doens't need to be corrected when the period is changed.\n"
#define DOCSTRING_PERIOD "The duration of one full wave. (rw)"
#define DOCSTRING_FREQUENCY "The frequency of the LFO (rw, 1 / period) (rw)"
#define DOCSTRING_CYCLES "Limit the number of cycles the LFO runs. (rw)"
#define DOCSTRING_CYCLE "The number of waves this LFO has completed. (rw)"
#define DOCSTRING_FROZEN "The frozen status of the LFO.  Same as `lfo.is_frozen()`. (ro)"
#define DOCSTRING_T "The current time within the current wave.  (ro)"
#define DOCSTRING_NORMALIZED "The current time within the current wave, normalized to 0-1.  (ro)"
#define DOCSTRING_SINE "The sine wave"
#define DOCSTRING_COSINE "The cosine wave"
#define DOCSTRING_TRIANGLE "The triangle wave"
#define DOCSTRING_SAWTOOTH "The sawtooth wave"
#define DOCSTRING_SQUARE "The square wave"
#define DOCSTRING_ONE "Constant 1 * attenuverter + offset"
#define DOCSTRING_ZERO "Constant 0 * attenuverter + offset"
#define DOCSTRING_RANDOM "The random wave"
#define DOCSTRING_INV_SINE "The inverted sine wave"
#define DOCSTRING_INV_COSINE "The inverted cosine wave"
#define DOCSTRING_INV_TRIANGLE "The inverted triangle wave"
#define DOCSTRING_INV_SAWTOOTH "The inverted sawtooth wave"
#define DOCSTRING_INV_SQUARE "The inverted square wave"
#define DOCSTRING_INV_ONE "The inverted one wave"
#define DOCSTRING_INV_ZERO "The inverted zero wave"
#define DOCSTRING_INV_RANDOM "The inverted random wave"
#define DOCSTRING_SINE_ATTENUVERTER "The attenuverter for sine"
#define DOCSTRING_COSINE_ATTENUVERTER "The attenuverter for cosine"
#define DOCSTRING_TRIANGLE_ATTENUVERTER "The attenuverter for triangle"
#define DOCSTRING_SAWTOOTH_ATTENUVERTER "The attenuverter for sawtooth"
#define DOCSTRING_SQUARE_ATTENUVERTER "The attenuverter for square"
#define DOCSTRING_ONE_ATTENUVERTER "The attenuverter for one"
#define DOCSTRING_ZERO_ATTENUVERTER "The attenuverter for zero"
#define DOCSTRING_RANDOM_ATTENUVERTER "The attenuverter for random"
#define DOCSTRING_SINE_OFFSET "The offset for sine"
#define DOCSTRING_COSINE_OFFSET "The offset for cosine"
#define DOCSTRING_TRIANGLE_OFFSET "The offset for triangle"
#define DOCSTRING_SAWTOOTH_OFFSET "The offset for sawtooth"
#define DOCSTRING_SQUARE_OFFSET "The offset for square"
#define DOCSTRING_ONE_OFFSET "The offset for one"
#define DOCSTRING_ZERO_OFFSET "The offset for zero"
#define DOCSTRING_RANDOM_OFFSET "The offset for random"
#define DOCSTRING_PW "The pulse width of the square wave"
#define DOCSTRING_PW_OFFSET "The offset of the pulse width of the square wave"
