"""
Molecular integrals over Gaussian basis functions generated by sympleints.
See https://github.com/eljost/sympleints for more information.

sympleints version: 0.1.dev79+g63f1ef8.d20230515
symppy version: 1.10.1

sympleints was executed with the following arguments:
	lmax = 3
	lauxmax = 4
	write = False
	out_dir = devel_ints
	keys = ['2c2e', '3c2e_sph']
	sph = False
	opt_basic = True
	normalize = cgto
"""

import numpy
from pysisyphus.wavefunction.ints.boys import boys


def int3c2e3d_sph_000(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ss|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1, 1), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = cx + x0

    # 1 item(s)
    result[0, 0, 0] = numpy.sum(
        34.98683665524972
        * da
        * db
        * dc
        * x1
        * x2 ** (-0.5)
        * boys(
            0,
            cx
            * x0
            * (
                (-x1 * (ax * A[0] + bx * B[0]) + C[0]) ** 2
                + (-x1 * (ax * A[1] + bx * B[1]) + C[1]) ** 2
                + (-x1 * (ax * A[2] + bx * B[2]) + C[2]) ** 2
            )
            / x2,
        )
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
        / cx
    )
    return result


def int3c2e3d_sph_001(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ss|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1, 3), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0]) + C[0]
    x3 = cx + x0
    x4 = -x1 * (ax * A[1] + bx * B[1]) + C[1]
    x5 = -x1 * (ax * A[2] + bx * B[2]) + C[2]
    x6 = (
        34.98683665524972
        * da
        * db
        * dc
        * x3 ** (-1.5)
        * boys(1, cx * x0 * (x2**2 + x4**2 + x5**2) / x3)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
        / cx
    )

    # 3 item(s)
    result[0, 0, 0] = numpy.sum(-x2 * x6)
    result[0, 0, 1] = numpy.sum(-x4 * x6)
    result[0, 0, 2] = numpy.sum(-x5 * x6)
    return result


def int3c2e3d_sph_002(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ss|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0]) + C[0]
    x3 = x2**2
    x4 = cx + x0
    x5 = -x1 * (ax * A[1] + bx * B[1]) + C[1]
    x6 = x5**2
    x7 = -x1 * (ax * A[2] + bx * B[2]) + C[2]
    x8 = x7**2
    x9 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0
        * x4 ** (-2.5)
        * boys(2, cx * x0 * (x3 + x6 + x8) / x4)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
        / cx
    )
    x10 = 1.154700538379252 * x9
    x11 = 2.0 * x2 * x9

    # 6 item(s)
    result[0, 0, 0] = numpy.sum(x10 * x3)
    result[0, 0, 1] = numpy.sum(x11 * x5)
    result[0, 0, 2] = numpy.sum(x11 * x7)
    result[0, 0, 3] = numpy.sum(x10 * x6)
    result[0, 0, 4] = numpy.sum(2.0 * x5 * x7 * x9)
    result[0, 0, 5] = numpy.sum(x10 * x8)
    return result


def int3c2e3d_sph_003(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ss|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1, 10), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = x1 * (ax * A[0] + bx * B[0]) - C[0]
    x3 = cx + x0
    x4 = x2**2
    x5 = x1 * (ax * A[1] + bx * B[1]) - C[1]
    x6 = x5**2
    x7 = x1 * (ax * A[2] + bx * B[2]) - C[2]
    x8 = x7**2
    x9 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0**2
        * x3 ** (-3.5)
        * boys(3, cx * x0 * (x4 + x6 + x8) / x3)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
        / cx
    )
    x10 = 0.5163977794943223 * x9
    x11 = x5 * x9
    x12 = 1.154700538379252
    x13 = x12 * x4
    x14 = x7 * x9
    x15 = x12 * x6
    x16 = x2 * x9
    x17 = x12 * x8

    # 10 item(s)
    result[0, 0, 0] = numpy.sum(x10 * x2**3)
    result[0, 0, 1] = numpy.sum(x11 * x13)
    result[0, 0, 2] = numpy.sum(x13 * x14)
    result[0, 0, 3] = numpy.sum(x15 * x16)
    result[0, 0, 4] = numpy.sum(2.0 * x11 * x2 * x7)
    result[0, 0, 5] = numpy.sum(x16 * x17)
    result[0, 0, 6] = numpy.sum(x10 * x5**3)
    result[0, 0, 7] = numpy.sum(x14 * x15)
    result[0, 0, 8] = numpy.sum(x11 * x17)
    result[0, 0, 9] = numpy.sum(x10 * x7**3)
    return result


def int3c2e3d_sph_004(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ss|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 1, 15), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = x1 * (ax * A[0] + bx * B[0]) - C[0]
    x3 = cx + x0
    x4 = x2**2
    x5 = x1 * (ax * A[1] + bx * B[1]) - C[1]
    x6 = x5**2
    x7 = x1 * (ax * A[2] + bx * B[2]) - C[2]
    x8 = x7**2
    x9 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0**3
        * x3 ** (-4.5)
        * boys(4, cx * x0 * (x4 + x6 + x8) / x3)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
        / cx
    )
    x10 = 0.1951800145897066 * x9
    x11 = 0.5163977794943223 * x9
    x12 = x11 * x2**3
    x13 = 0.6666666666666667 * x9
    x14 = x13 * x4
    x15 = 1.732050807568877
    x16 = x15 * x7
    x17 = x5**3
    x18 = x11 * x2
    x19 = x13 * x6
    x20 = x7**3

    # 15 item(s)
    result[0, 0, 0] = numpy.sum(x10 * x2**4)
    result[0, 0, 1] = numpy.sum(x12 * x5)
    result[0, 0, 2] = numpy.sum(x12 * x7)
    result[0, 0, 3] = numpy.sum(x14 * x6)
    result[0, 0, 4] = numpy.sum(x14 * x16 * x5)
    result[0, 0, 5] = numpy.sum(x14 * x8)
    result[0, 0, 6] = numpy.sum(x17 * x18)
    result[0, 0, 7] = numpy.sum(x16 * x19 * x2)
    result[0, 0, 8] = numpy.sum(x13 * x15 * x2 * x5 * x8)
    result[0, 0, 9] = numpy.sum(x18 * x20)
    result[0, 0, 10] = numpy.sum(x10 * x5**4)
    result[0, 0, 11] = numpy.sum(x11 * x17 * x7)
    result[0, 0, 12] = numpy.sum(x19 * x8)
    result[0, 0, 13] = numpy.sum(x11 * x20 * x5)
    result[0, 0, 14] = numpy.sum(x10 * x7**4)
    return result


def int3c2e3d_sph_010(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sp|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 3, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = cx + x1
    x3 = x2 ** (-1.0)
    x4 = x1 ** (-1.0)
    x5 = -x4 * (ax * A[0] + bx * B[0])
    x6 = x5 + C[0]
    x7 = -x4 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x4 * (ax * A[2] + bx * B[2])
    x10 = x9 + C[2]
    x11 = cx * x1 * x3 * (x10**2 + x6**2 + x8**2)
    x12 = boys(0, x11) / cx
    x13 = x3 * boys(1, x11)
    x14 = A[1] - B[1]
    x15 = A[2] - B[2]
    x16 = (
        34.98683665524972
        * da
        * db
        * dc
        * x2 ** (-0.5)
        * x4
        * numpy.exp(-ax * bx * x4 * (x0**2 + x14**2 + x15**2))
    )

    # 3 item(s)
    result[0, 0, 0] = numpy.sum(x16 * (x0 * x12 - x12 * (x5 + A[0]) + x13 * x6))
    result[0, 1, 0] = numpy.sum(x16 * (x12 * x14 - x12 * (x7 + A[1]) + x13 * x8))
    result[0, 2, 0] = numpy.sum(x16 * (x10 * x13 + x12 * x15 - x12 * (x9 + A[2])))
    return result


def int3c2e3d_sph_011(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sp|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 3, 3), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.0)
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = x6 + C[1]
    x8 = -x1 * (ax * A[2] + bx * B[2])
    x9 = x8 + C[2]
    x10 = cx * x0 * x5 * (x3**2 + x7**2 + x9**2)
    x11 = x5 * boys(2, x10)
    x12 = cx ** (-1.0)
    x13 = boys(1, x10)
    x14 = x11 * x3 - x12 * x13 * (x2 + A[0])
    x15 = 2.0 * x3
    x16 = x12 * x13
    x17 = x1 * x16
    x18 = A[0] - B[0]
    x19 = x16 * x18
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = (
        17.49341832762486
        * da
        * db
        * dc
        * x4 ** (-1.5)
        * numpy.exp(-ax * bx * x1 * (x18**2 + x20**2 + x21**2))
    )
    x23 = 2.0 * x7
    x24 = -x22 * (x14 + x19)
    x25 = 2.0 * x9
    x26 = x16 * x20
    x27 = x11 * x7 - x12 * x13 * (x6 + A[1])
    x28 = -x22 * (x26 + x27)
    x29 = x16 * x21
    x30 = x11 * x9 - x12 * x13 * (x8 + A[2])
    x31 = -x22 * (x29 + x30)

    # 9 item(s)
    result[0, 0, 0] = numpy.sum(x22 * (-x14 * x15 - x15 * x19 + x17))
    result[0, 0, 1] = numpy.sum(x23 * x24)
    result[0, 0, 2] = numpy.sum(x24 * x25)
    result[0, 1, 0] = numpy.sum(x15 * x28)
    result[0, 1, 1] = numpy.sum(x22 * (x17 - x23 * x26 - x23 * x27))
    result[0, 1, 2] = numpy.sum(x25 * x28)
    result[0, 2, 0] = numpy.sum(x15 * x31)
    result[0, 2, 1] = numpy.sum(x23 * x31)
    result[0, 2, 2] = numpy.sum(x22 * (x17 - x25 * x29 - x25 * x30))
    return result


def int3c2e3d_sph_012(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sp|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 3, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = -x3
    x5 = cx + x0
    x6 = x5 ** (-1.0)
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x0 * x6
    x14 = x13 * (x12**2 + x4**2 + x9**2)
    x15 = boys(3, x14)
    x16 = x15 * x6
    x17 = cx ** (-1.0)
    x18 = x17 * boys(2, x14)
    x19 = -x18 * (x2 + A[0])
    x20 = x3 * (x16 * x4 - x19)
    x21 = x3**2
    x22 = x8**2
    x23 = x11**2
    x24 = boys(2, x13 * (x21 + x22 + x23))
    x25 = x17 * x24
    x26 = x1 * x25
    x27 = A[0] - B[0]
    x28 = A[1] - B[1]
    x29 = A[2] - B[2]
    x30 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0
        * x5 ** (-2.5)
        * numpy.exp(-ax * bx * x1 * (x27**2 + x28**2 + x29**2))
    )
    x31 = x3 * x30
    x32 = 1.154700538379252
    x33 = x30 * (2.0 * x17 * x24 * x27 * x3 - 2.0 * x20 - x26)
    x34 = x15 * x4 * x6 - x19 - x25 * x27
    x35 = x30 * x32
    x36 = x34 * x35
    x37 = x11 * x30
    x38 = 2.0 * x8
    x39 = x25 * x28
    x40 = -x18 * (x7 + A[1])
    x41 = x15 * x6 * x9 - x39 - x40
    x42 = x35 * x41
    x43 = x8 * (x16 * x9 - x40)
    x44 = x26 - 2.0 * x39 * x8 + 2.0 * x43
    x45 = x30 * x8
    x46 = x25 * x29
    x47 = -x18 * (x10 + A[2])
    x48 = x12 * x15 * x6 - x46 - x47
    x49 = x35 * x48
    x50 = x11 * (x12 * x16 - x47)
    x51 = -2.0 * x11 * x46 + x26 + 2.0 * x50

    # 18 item(s)
    result[0, 0, 0] = numpy.sum(x31 * x32 * (x17 * x24 * x27 * x3 - x20 - x26))
    result[0, 0, 1] = numpy.sum(x33 * x8)
    result[0, 0, 2] = numpy.sum(x11 * x33)
    result[0, 0, 3] = numpy.sum(-x22 * x36)
    result[0, 0, 4] = numpy.sum(-x34 * x37 * x38)
    result[0, 0, 5] = numpy.sum(-x23 * x36)
    result[0, 1, 0] = numpy.sum(-x21 * x42)
    result[0, 1, 1] = numpy.sum(-x31 * x44)
    result[0, 1, 2] = numpy.sum(-2.0 * x11 * x31 * x41)
    result[0, 1, 3] = numpy.sum(x32 * x45 * (x17 * x24 * x28 * x8 - x26 - x43))
    result[0, 1, 4] = numpy.sum(-x37 * x44)
    result[0, 1, 5] = numpy.sum(-x23 * x42)
    result[0, 2, 0] = numpy.sum(-x21 * x49)
    result[0, 2, 1] = numpy.sum(-x31 * x38 * x48)
    result[0, 2, 2] = numpy.sum(-x31 * x51)
    result[0, 2, 3] = numpy.sum(-x22 * x49)
    result[0, 2, 4] = numpy.sum(-x45 * x51)
    result[0, 2, 5] = numpy.sum(x32 * x37 * (x11 * x17 * x24 * x29 - x26 - x50))
    return result


def int3c2e3d_sph_013(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sp|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 3, 10), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.5)
    x6 = x3 * x5
    x7 = x3**2
    x8 = -x1 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x1 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = x0 / x4
    x15 = cx * x14 * (x10 + x13 + x7)
    x16 = 17.49341832762486
    x17 = A[0] - B[0]
    x18 = A[1] - B[1]
    x19 = A[2] - B[2]
    x20 = numpy.exp(-ax * bx * x1 * (x17**2 + x18**2 + x19**2))
    x21 = 2.0 * x16 * x20
    x22 = x1 * x21
    x23 = x22 * boys(4, x15)
    x24 = cx ** (-1.0)
    x25 = x4 ** (-0.5)
    x26 = boys(3, x15)
    x27 = -2.0 * x1 * x16 * x20 * x24 * x25 * x26 * (x2 + A[0]) - x23 * x6
    x28 = x27 * x3
    x29 = 0.5 / (ax + bx)
    x30 = x24 * x26
    x31 = x22 * x25 * x29 * x30
    x32 = x14 * x3
    x33 = x21 * x30
    x34 = x29 * x33
    x35 = x0 * x34 * x4 ** (-2.5)
    x36 = x3**3
    x37 = x0**2
    x38 = x33 * x37 * x4 ** (-3.5)
    x39 = x17 * x38
    x40 = da * db * dc
    x41 = 0.2581988897471611 * x40
    x42 = x14 * x9
    x43 = x34 * x5
    x44 = x43 * x9
    x45 = x3 * x9
    x46 = x7 * x9
    x47 = 0.5773502691896258 * x40
    x48 = x12 * x14
    x49 = x12 * x43
    x50 = x12 * x35
    x51 = x12 * x7
    x52 = x37 / x4**2
    x53 = x28 * x52
    x54 = x10 * x35
    x55 = x10 * x3
    x56 = x52 * x9
    x57 = x50 * x9
    x58 = x12 * x45
    x59 = x13 * x35
    x60 = x13 * x3
    x61 = x9**3
    x62 = x0**3 / x4**3
    x63 = x27 * x62
    x64 = x10 * x12
    x65 = x13 * x9
    x66 = x12**3
    x67 = x23 * x5
    x68 = -2.0 * x1 * x16 * x20 * x24 * x25 * x26 * (x8 + A[1]) - x67 * x9
    x69 = x62 * x68
    x70 = x18 * x38
    x71 = x68 * x9
    x72 = x31 + x71
    x73 = x62 * x7
    x74 = x42 * x72 + x44
    x75 = x3 * x52
    x76 = x48 * x71 + x49
    x77 = -2.0 * x1 * x16 * x20 * x24 * x25 * x26 * (x11 + A[2]) - x12 * x67
    x78 = x62 * x77
    x79 = x19 * x38
    x80 = x12 * x77 + x31
    x81 = x62 * x80
    x82 = x48 * x80 + x49

    # 30 item(s)
    result[0, 0, 0] = numpy.sum(
        x41 * (x14 * (x32 * (x32 * (x28 + x31) + x34 * x6) + x35 * x7) + x36 * x39)
    )
    result[0, 0, 1] = numpy.sum(
        x47 * (x14 * (x32 * (x28 * x42 + x44) + x35 * x45) + x39 * x46)
    )
    result[0, 0, 2] = numpy.sum(
        x47 * (x14 * (x3 * x50 + x32 * (x28 * x48 + x49)) + x39 * x51)
    )
    result[0, 0, 3] = numpy.sum(x47 * (x14 * (x10 * x53 + x54) + x39 * x55))
    result[0, 0, 4] = numpy.sum(x40 * (x14 * (x12 * x28 * x56 + x57) + x39 * x58))
    result[0, 0, 5] = numpy.sum(x47 * (x14 * (x13 * x53 + x59) + x39 * x60))
    result[0, 0, 6] = numpy.sum(x41 * x61 * (x39 + x63))
    result[0, 0, 7] = numpy.sum(x47 * x64 * (x39 + x63))
    result[0, 0, 8] = numpy.sum(x47 * x65 * (x39 + x63))
    result[0, 0, 9] = numpy.sum(x41 * x66 * (x39 + x63))
    result[0, 1, 0] = numpy.sum(x36 * x41 * (x69 + x70))
    result[0, 1, 1] = numpy.sum(x47 * (x46 * x70 + x72 * x73))
    result[0, 1, 2] = numpy.sum(x47 * x51 * (x69 + x70))
    result[0, 1, 3] = numpy.sum(x47 * (x55 * x70 + x74 * x75))
    result[0, 1, 4] = numpy.sum(x40 * (x58 * x70 + x75 * x76))
    result[0, 1, 5] = numpy.sum(x47 * x60 * (x69 + x70))
    result[0, 1, 6] = numpy.sum(x41 * (x14 * (x42 * x74 + x54) + x61 * x70))
    result[0, 1, 7] = numpy.sum(x47 * (x14 * (x42 * x76 + x57) + x64 * x70))
    result[0, 1, 8] = numpy.sum(x47 * (x14 * (x13 * x52 * x71 + x59) + x65 * x70))
    result[0, 1, 9] = numpy.sum(x41 * x66 * (x69 + x70))
    result[0, 2, 0] = numpy.sum(x36 * x41 * (x78 + x79))
    result[0, 2, 1] = numpy.sum(x47 * (x46 * x79 + x73 * x77 * x9))
    result[0, 2, 2] = numpy.sum(x47 * (x51 * x79 + x73 * x80))
    result[0, 2, 3] = numpy.sum(x47 * x55 * (x78 + x79))
    result[0, 2, 4] = numpy.sum(x40 * (x45 * x81 + x58 * x79))
    result[0, 2, 5] = numpy.sum(x47 * (x60 * x79 + x75 * x82))
    result[0, 2, 6] = numpy.sum(x41 * x61 * (x78 + x79))
    result[0, 2, 7] = numpy.sum(x47 * (x10 * x81 + x64 * x79))
    result[0, 2, 8] = numpy.sum(x47 * (x56 * x82 + x65 * x79))
    result[0, 2, 9] = numpy.sum(x41 * (x14 * (x48 * x82 + x59) + x66 * x79))
    return result


def int3c2e3d_sph_014(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sp|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 3, 15), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.5)
    x6 = x3 * x5
    x7 = x3**2
    x8 = -x1 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x1 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = x0 / x4
    x15 = cx * x14 * (x10 + x13 + x7)
    x16 = 17.49341832762486
    x17 = A[0] - B[0]
    x18 = A[1] - B[1]
    x19 = A[2] - B[2]
    x20 = numpy.exp(-ax * bx * x1 * (x17**2 + x18**2 + x19**2))
    x21 = 2.0 * x16 * x20
    x22 = x1 * x21
    x23 = x22 * boys(5, x15)
    x24 = cx ** (-1.0)
    x25 = x4 ** (-0.5)
    x26 = boys(4, x15)
    x27 = -2.0 * x1 * x16 * x20 * x24 * x25 * x26 * (x2 + A[0]) - x23 * x6
    x28 = x27 * x3
    x29 = 0.5 / (ax + bx)
    x30 = x24 * x26
    x31 = x22 * x25 * x29 * x30
    x32 = x14 * x3
    x33 = x21 * x30
    x34 = x29 * x33
    x35 = x34 * x7
    x36 = x0 * x4 ** (-2.5)
    x37 = x3**3
    x38 = x0**2
    x39 = x38 * x4 ** (-3.5)
    x40 = x34 * x39
    x41 = x3**4
    x42 = x0**3
    x43 = x33 * x4 ** (-4.5) * x42
    x44 = x17 * x43
    x45 = da * db * dc
    x46 = 0.09759000729485332 * x45
    x47 = x14 * x9
    x48 = x34 * x5
    x49 = x48 * x9
    x50 = x3 * x9
    x51 = x34 * x36
    x52 = x7 * x9
    x53 = x37 * x9
    x54 = 0.2581988897471611 * x45
    x55 = x12 * x14
    x56 = x12 * x48
    x57 = x12 * x51
    x58 = x12 * x37
    x59 = x38 / x4**2
    x60 = x28 * x59
    x61 = x10 * x51
    x62 = x10 * x3
    x63 = x10 * x7
    x64 = 0.3333333333333333 * x45
    x65 = x59 * x9
    x66 = x57 * x9
    x67 = x12 * x44
    x68 = 1.732050807568877 * x64
    x69 = x13 * x51
    x70 = x13 * x7
    x71 = x9**3
    x72 = x42 / x4**3
    x73 = x28 * x72
    x74 = x40 * x71
    x75 = x3 * x71
    x76 = x10 * x12
    x77 = x40 * x76
    x78 = x13 * x9
    x79 = x40 * x78
    x80 = x13 * x50
    x81 = x12**3
    x82 = x40 * x81
    x83 = x3 * x81
    x84 = x9**4
    x85 = x0**4 / x4**4
    x86 = x27 * x85
    x87 = x12 * x71
    x88 = x10 * x13
    x89 = x81 * x9
    x90 = x12**4
    x91 = x23 * x5
    x92 = -2.0 * x1 * x16 * x20 * x24 * x25 * x26 * (x8 + A[1]) - x9 * x91
    x93 = x85 * x92
    x94 = x18 * x43
    x95 = x9 * x92
    x96 = x31 + x95
    x97 = x37 * x85
    x98 = x47 * x96 + x49
    x99 = x7 * x72
    x100 = x55 * x95 + x56
    x101 = x12 * x94
    x102 = x47 * x98 + x61
    x103 = x3 * x59
    x104 = x100 * x47 + x66
    x105 = x13 * x59 * x95 + x69
    x106 = -2.0 * x1 * x16 * x20 * x24 * x25 * x26 * (x11 + A[2]) - x12 * x91
    x107 = x106 * x85
    x108 = x19 * x43
    x109 = x106 * x12 + x31
    x110 = x109 * x85
    x111 = x108 * x12
    x112 = x109 * x55 + x56
    x113 = x112 * x72
    x114 = x112 * x55 + x69

    # 45 item(s)
    result[0, 0, 0] = numpy.sum(
        x46
        * (
            x14 * (x32 * (x32 * (x32 * (x28 + x31) + x34 * x6) + x35 * x36) + x37 * x40)
            + x41 * x44
        )
    )
    result[0, 0, 1] = numpy.sum(
        x54
        * (x14 * (x32 * (x32 * (x28 * x47 + x49) + x50 * x51) + x40 * x52) + x44 * x53)
    )
    result[0, 0, 2] = numpy.sum(
        x54
        * (
            x14 * (x12 * x35 * x39 + x32 * (x3 * x57 + x32 * (x28 * x55 + x56)))
            + x44 * x58
        )
    )
    result[0, 0, 3] = numpy.sum(
        x64 * (x14 * (x32 * (x10 * x60 + x61) + x40 * x62) + x44 * x63)
    )
    result[0, 0, 4] = numpy.sum(
        x68 * (x14 * (x12 * x40 * x50 + x32 * (x12 * x28 * x65 + x66)) + x52 * x67)
    )
    result[0, 0, 5] = numpy.sum(
        x64 * (x14 * (x13 * x3 * x40 + x32 * (x13 * x60 + x69)) + x44 * x70)
    )
    result[0, 0, 6] = numpy.sum(x54 * (x14 * (x71 * x73 + x74) + x44 * x75))
    result[0, 0, 7] = numpy.sum(x68 * (x14 * (x73 * x76 + x77) + x62 * x67))
    result[0, 0, 8] = numpy.sum(x68 * (x14 * (x73 * x78 + x79) + x44 * x80))
    result[0, 0, 9] = numpy.sum(x54 * (x14 * (x73 * x81 + x82) + x44 * x83))
    result[0, 0, 10] = numpy.sum(x46 * x84 * (x44 + x86))
    result[0, 0, 11] = numpy.sum(x54 * x87 * (x44 + x86))
    result[0, 0, 12] = numpy.sum(x64 * x88 * (x44 + x86))
    result[0, 0, 13] = numpy.sum(x54 * x89 * (x44 + x86))
    result[0, 0, 14] = numpy.sum(x46 * x90 * (x44 + x86))
    result[0, 1, 0] = numpy.sum(x41 * x46 * (x93 + x94))
    result[0, 1, 1] = numpy.sum(x54 * (x53 * x94 + x96 * x97))
    result[0, 1, 2] = numpy.sum(x54 * x58 * (x93 + x94))
    result[0, 1, 3] = numpy.sum(x64 * (x63 * x94 + x98 * x99))
    result[0, 1, 4] = numpy.sum(x68 * (x100 * x99 + x101 * x52))
    result[0, 1, 5] = numpy.sum(x64 * x70 * (x93 + x94))
    result[0, 1, 6] = numpy.sum(x54 * (x102 * x103 + x75 * x94))
    result[0, 1, 7] = numpy.sum(x68 * (x101 * x62 + x103 * x104))
    result[0, 1, 8] = numpy.sum(x68 * (x103 * x105 + x80 * x94))
    result[0, 1, 9] = numpy.sum(x54 * x83 * (x93 + x94))
    result[0, 1, 10] = numpy.sum(x46 * (x14 * (x102 * x47 + x74) + x84 * x94))
    result[0, 1, 11] = numpy.sum(x54 * (x14 * (x104 * x47 + x77) + x87 * x94))
    result[0, 1, 12] = numpy.sum(x64 * (x14 * (x105 * x47 + x79) + x88 * x94))
    result[0, 1, 13] = numpy.sum(x54 * (x14 * (x72 * x81 * x95 + x82) + x89 * x94))
    result[0, 1, 14] = numpy.sum(x46 * x90 * (x93 + x94))
    result[0, 2, 0] = numpy.sum(x41 * x46 * (x107 + x108))
    result[0, 2, 1] = numpy.sum(x54 * (x106 * x9 * x97 + x108 * x53))
    result[0, 2, 2] = numpy.sum(x54 * (x108 * x58 + x109 * x97))
    result[0, 2, 3] = numpy.sum(x63 * x64 * (x107 + x108))
    result[0, 2, 4] = numpy.sum(x52 * x68 * (x110 + x111))
    result[0, 2, 5] = numpy.sum(x64 * (x108 * x70 + x112 * x99))
    result[0, 2, 6] = numpy.sum(x54 * x75 * (x107 + x108))
    result[0, 2, 7] = numpy.sum(x62 * x68 * (x110 + x111))
    result[0, 2, 8] = numpy.sum(x68 * (x108 * x80 + x113 * x50))
    result[0, 2, 9] = numpy.sum(x54 * (x103 * x114 + x108 * x83))
    result[0, 2, 10] = numpy.sum(x46 * x84 * (x107 + x108))
    result[0, 2, 11] = numpy.sum(x54 * (x108 * x87 + x110 * x71))
    result[0, 2, 12] = numpy.sum(x64 * (x10 * x113 + x108 * x88))
    result[0, 2, 13] = numpy.sum(x54 * (x108 * x89 + x114 * x65))
    result[0, 2, 14] = numpy.sum(x46 * (x108 * x90 + x14 * (x114 * x55 + x82)))
    return result


def int3c2e3d_sph_020(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sd|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 6, 1), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = cx + x0
    x3 = x2 ** (-1.0)
    x4 = -x1 * (ax * A[0] + bx * B[0])
    x5 = x4 + C[0]
    x6 = -x5
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x3
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x6**2 + x9**2)
    x16 = boys(1, x15)
    x17 = x16 * x3
    x18 = cx ** (-1.0)
    x19 = x18 * boys(0, x15)
    x20 = x1 * (x17 - x19)
    x21 = A[0] - B[0]
    x22 = x14 * (x11**2 + x5**2 + x8**2)
    x23 = x18 * boys(0, x22)
    x24 = x3 * boys(1, x22)
    x25 = x4 + A[0]
    x26 = 2.0 * x21
    x27 = -x25
    x28 = x17 * x6 - x19 * x27
    x29 = x3 * boys(2, x15)
    x30 = x16 * x18
    x31 = x13 * x5
    x32 = A[1] - B[1]
    x33 = A[2] - B[2]
    x34 = (
        17.49341832762486
        * da
        * db
        * dc
        * x1
        * x2 ** (-0.5)
        * numpy.exp(-ax * bx * x1 * (x21**2 + x32**2 + x33**2))
    )
    x35 = 0.5773502691896258 * x34
    x36 = x7 + A[1]
    x37 = x23 * x32 - x23 * x36 + x24 * x8
    x38 = -x36
    x39 = x17 * x9 - x19 * x38
    x40 = x29 * x9 - x30 * x38
    x41 = 2.0 * x34
    x42 = x10 + A[2]
    x43 = x11 * x24 + x23 * x33 - x23 * x42
    x44 = -x42
    x45 = x12 * x17 - x19 * x44
    x46 = x12 * x29 - x30 * x44
    x47 = 2.0 * x32
    x48 = x13 * x8
    x49 = 2.0 * x33

    # 6 item(s)
    result[0, 0, 0] = numpy.sum(
        x35
        * (
            -x20
            + 2.0 * x25 * x28
            - x26 * x28
            + x26 * (x21 * x23 - x23 * x25 + x24 * x5)
            + 2.0 * x31 * (x27 * x30 - x29 * x6)
        )
    )
    result[0, 1, 0] = numpy.sum(x41 * (x21 * x37 + x25 * x39 - x28 * x32 - x31 * x40))
    result[0, 2, 0] = numpy.sum(x41 * (x21 * x43 + x25 * x45 - x28 * x33 - x31 * x46))
    result[0, 3, 0] = numpy.sum(
        x35 * (-x20 + 2.0 * x36 * x39 + x37 * x47 - x39 * x47 - 2.0 * x40 * x48)
    )
    result[0, 4, 0] = numpy.sum(x41 * (x32 * x43 - x33 * x39 + x36 * x45 - x46 * x48))
    result[0, 5, 0] = numpy.sum(
        x35 * (-2.0 * x11 * x13 * x46 - x20 + 2.0 * x42 * x45 + x43 * x49 - x45 * x49)
    )
    return result


def int3c2e3d_sph_021(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sd|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 6, 3), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = x3 + C[0]
    x5 = cx + x1
    x6 = x5 ** (-1.0)
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = x9 + C[2]
    x11 = cx * x6
    x12 = x1 * x11
    x13 = x12 * (x10**2 + x4**2 + x8**2)
    x14 = x6 * boys(2, x13)
    x15 = cx ** (-1.0)
    x16 = x3 + A[0]
    x17 = boys(1, x13)
    x18 = x14 * x4 - x15 * x16 * x17
    x19 = -x18
    x20 = 2.0 * x19
    x21 = x15 * x17
    x22 = x2 * x21
    x23 = x20 * x4 + x22
    x24 = x0 * x21
    x25 = 2.0 * x4
    x26 = -x4
    x27 = -x8
    x28 = -x10
    x29 = x12 * (x26**2 + x27**2 + x28**2)
    x30 = boys(2, x29)
    x31 = x30 * x6
    x32 = x15 * boys(1, x29)
    x33 = x2 * (x31 - x32)
    x34 = -x16
    x35 = 2.0 * x26 * x31 - 2.0 * x32 * x34
    x36 = x6 * boys(3, x29)
    x37 = x15 * x30
    x38 = x11 * x4
    x39 = -x16 * x35 + x33 + 2.0 * x38 * (x26 * x36 - x34 * x37)
    x40 = A[1] - B[1]
    x41 = A[2] - B[2]
    x42 = (
        17.49341832762486
        * da
        * db
        * dc
        * x5 ** (-1.5)
        * numpy.exp(-ax * bx * x2 * (x0**2 + x40**2 + x41**2))
    )
    x43 = 0.5773502691896258 * x42
    x44 = x43 * (x0 * x20 - 2.0 * x0 * (x18 + x24) + x39)
    x45 = x7 + A[1]
    x46 = x14 * x8 - x15 * x17 * x45
    x47 = -x46
    x48 = -x2 * x47
    x49 = -x45
    x50 = x27 * x31 - x32 * x49
    x51 = x27 * x36 - x37 * x49
    x52 = -x16 * x50 + x38 * x51
    x53 = 2.0 * x52
    x54 = x21 * x40
    x55 = -x46 - x54
    x56 = x0 * x55
    x57 = 2.0 * x8
    x58 = 2.0 * x47
    x59 = x22 + x58 * x8
    x60 = -x54 * x57 + x59
    x61 = -x19 * x2
    x62 = x19 * x40
    x63 = 2.0 * x10
    x64 = x9 + A[2]
    x65 = x10 * x14 - x15 * x17 * x64
    x66 = -x65
    x67 = -x2 * x66
    x68 = -x64
    x69 = x28 * x31 - x32 * x68
    x70 = x28 * x36 - x37 * x68
    x71 = -x16 * x69 + x38 * x70
    x72 = 2.0 * x71
    x73 = x21 * x41
    x74 = -x65 - x73
    x75 = x0 * x74
    x76 = x19 * x41
    x77 = x22 + x63 * x66
    x78 = -x63 * x73 + x77
    x79 = 2.0 * x50
    x80 = x11 * x51 * x57 + x33 - x45 * x79
    x81 = x43 * (2.0 * x40 * x55 + x40 * x58 + x80)
    x82 = x40 * x74
    x83 = x41 * x47
    x84 = x11 * x70
    x85 = -x45 * x69 + x8 * x84
    x86 = 2.0 * x41
    x87 = 2.0 * x69
    x88 = x33 + x63 * x84 - x64 * x87
    x89 = x43 * (x66 * x86 + x74 * x86 + x88)

    # 18 item(s)
    result[0, 0, 0] = numpy.sum(
        x43 * (x0 * x23 + x0 * (x23 - x24 * x25) - x2 * x35 + x39 * x4)
    )
    result[0, 0, 1] = numpy.sum(x44 * x8)
    result[0, 0, 2] = numpy.sum(x10 * x44)
    result[0, 1, 0] = numpy.sum(x42 * (x23 * x40 + x25 * x56 + x4 * x53 + x48))
    result[0, 1, 1] = numpy.sum(x42 * (x0 * x60 + x53 * x8 + x57 * x62 + x61))
    result[0, 1, 2] = numpy.sum(x42 * x63 * (x52 + x56 + x62))
    result[0, 2, 0] = numpy.sum(x42 * (x23 * x41 + x25 * x75 + x4 * x72 + x67))
    result[0, 2, 1] = numpy.sum(x42 * x57 * (x71 + x75 + x76))
    result[0, 2, 2] = numpy.sum(x42 * (x0 * x78 + x10 * x72 + x61 + x63 * x76))
    result[0, 3, 0] = numpy.sum(x4 * x81)
    result[0, 3, 1] = numpy.sum(x43 * (-x2 * x79 + x40 * x59 + x40 * x60 + x8 * x80))
    result[0, 3, 2] = numpy.sum(x10 * x81)
    result[0, 4, 0] = numpy.sum(x25 * x42 * (x82 + x83 + x85))
    result[0, 4, 1] = numpy.sum(x42 * (x41 * x59 + x57 * x82 + x57 * x85 + x67))
    result[0, 4, 2] = numpy.sum(x42 * (x40 * x78 + x48 + x63 * x83 + x63 * x85))
    result[0, 5, 0] = numpy.sum(x4 * x89)
    result[0, 5, 1] = numpy.sum(x8 * x89)
    result[0, 5, 2] = numpy.sum(x43 * (x10 * x88 - x2 * x87 + x41 * x77 + x41 * x78))
    return result


def int3c2e3d_sph_022(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sd|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 6, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = -x3
    x5 = cx + x0
    x6 = x5 ** (-1.0)
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x6
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x4**2 + x9**2)
    x16 = boys(3, x15)
    x17 = x16 * x6
    x18 = x2 + A[0]
    x19 = -x18
    x20 = cx ** (-1.0)
    x21 = x20 * boys(2, x15)
    x22 = x19 * x21
    x23 = x17 * x4 - x22
    x24 = x23 * x3
    x25 = x3**2
    x26 = x8**2
    x27 = x11**2
    x28 = x14 * (x25 + x26 + x27)
    x29 = boys(2, x28)
    x30 = x20 * x29
    x31 = x1 * x30
    x32 = 2.0 * x24 + x31
    x33 = x1 * (x17 - x21)
    x34 = x6 * boys(4, x15)
    x35 = -2.0 * x13 * x3 * (x16 * x19 * x20 - x34 * x4) - 2.0 * x18 * x23 + x33
    x36 = x1 * x23
    x37 = x24 + x31
    x38 = A[0] - B[0]
    x39 = 2.0 * x38
    x40 = x3 * x39
    x41 = A[1] - B[1]
    x42 = A[2] - B[2]
    x43 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0
        * x5 ** (-2.5)
        * numpy.exp(-ax * bx * x1 * (x38**2 + x41**2 + x42**2))
    )
    x44 = 0.3333333333333333 * x43
    x45 = x6 * boys(3, x28)
    x46 = x18 * x20 * x29 - x3 * x45
    x47 = 1.732050807568877
    x48 = x44 * x47
    x49 = x48 * (
        2.0 * x1 * x46 - x3 * x35 - x32 * x38 + x38 * (2.0 * x20 * x29 * x3 * x38 - x32)
    )
    x50 = 2.0 * x46
    x51 = x44 * (x35 + x38 * x50 - x39 * (-x16 * x4 * x6 + x22 + x30 * x38))
    x52 = x11 * x47
    x53 = x17 * x9
    x54 = x7 + A[1]
    x55 = -x54
    x56 = x21 * x55
    x57 = x53 - x56
    x58 = -x16 * x20 * x55 + x34 * x9
    x59 = x13 * x4
    x60 = x19 * x57 - x58 * x59
    x61 = x3 * x60
    x62 = x1 * x57
    x63 = -x62
    x64 = x30 * x41
    x65 = -x53 + x56 + x64
    x66 = -x65
    x67 = x3 * x38
    x68 = x3 * x43
    x69 = 0.6666666666666667 * x47
    x70 = x68 * x69
    x71 = -x36
    x72 = x60 * x8
    x73 = 2.0 * x72
    x74 = x57 * x8
    x75 = x31 + 2.0 * x74
    x76 = x1 * x75
    x77 = -2.0 * x64 * x8 + x75
    x78 = x32 * x41
    x79 = x11 * x43
    x80 = x31 + x74
    x81 = x20 * x29 * x41 * x8 - x80
    x82 = x41 * x8
    x83 = x43 * x8
    x84 = x69 * x83
    x85 = -x77
    x86 = x43 * x69
    x87 = x12 * x17
    x88 = x10 + A[2]
    x89 = -x88
    x90 = x21 * x89
    x91 = x87 - x90
    x92 = -x91
    x93 = x12 * x34 - x16 * x20 * x89
    x94 = -x93
    x95 = -x19 * x92 + x59 * x94
    x96 = x3 * x95
    x97 = x1 * x91
    x98 = -x97
    x99 = x30 * x42
    x100 = -x87 + x90 + x99
    x101 = -x100
    x102 = x32 * x42
    x103 = x11 * x95
    x104 = x11 * x91
    x105 = 2.0 * x104 + x31
    x106 = x1 * x105
    x107 = -0.5 * x106
    x108 = 2.0 * x11
    x109 = x105 - x108 * x99
    x110 = -x109
    x111 = x104 + x31
    x112 = x11 * x20 * x29 * x42 - x111
    x113 = x11 * x42
    x114 = x69 * x79
    x115 = x20 * x29 * x54 - x45 * x8
    x116 = 2.0 * x41
    x117 = 2.0 * x8
    x118 = x117 * x13 * x58 + x33 - 2.0 * x54 * x57
    x119 = x44 * (x115 * x116 + x116 * x66 + x118)
    x120 = x41 * x85
    x121 = x41 * x75
    x122 = -x118 * x8 + 2.0 * x62
    x123 = x3 * x48
    x124 = 2.0 * x82
    x125 = x100 * x41
    x126 = x13 * x9 * x94 - x55 * x92
    x127 = x11 * x126
    x128 = 2.0 * x42
    x129 = x108 * x13 * x93 + x33 - 2.0 * x88 * x91
    x130 = x44 * (x101 * x128 - x128 * (x11 * x45 - x20 * x29 * x88) + x129)
    x131 = -x11 * x129 + 2.0 * x97
    x132 = x105 * x42 - x110 * x42 - x131
    x133 = 2.0 * x113

    # 36 item(s)
    result[0, 0, 0] = numpy.sum(
        x44
        * (
            x1 * x32
            - x3 * (x3 * x35 - 2.0 * x36)
            - x37 * x40
            + x40 * (x20 * x29 * x3 * x38 - x37)
        )
    )
    result[0, 0, 1] = numpy.sum(x49 * x8)
    result[0, 0, 2] = numpy.sum(x11 * x49)
    result[0, 0, 3] = numpy.sum(-x26 * x51)
    result[0, 0, 4] = numpy.sum(-x51 * x52 * x8)
    result[0, 0, 5] = numpy.sum(-x27 * x51)
    result[0, 1, 0] = numpy.sum(-x70 * (x37 * x41 + x61 + x63 + x66 * x67))
    result[0, 1, 1] = numpy.sum(
        -0.5 * x43 * (2.0 * x3 * (x71 + x73) + 2.0 * x67 * x77 - x76 + 2.0 * x78 * x8)
    )
    result[0, 1, 2] = numpy.sum(-x79 * (x40 * x66 + 2.0 * x61 + x63 + x78))
    result[0, 1, 3] = numpy.sum(x84 * (x36 + x38 * x81 - x46 * x82 - x72))
    result[0, 1, 4] = numpy.sum(x79 * (x36 + x38 * x85 - x50 * x82 - x73))
    result[0, 1, 5] = numpy.sum(x27 * x86 * (-x23 * x41 + x38 * x65 - x60))
    result[0, 2, 0] = numpy.sum(-x70 * (x101 * x67 + x37 * x42 + x96 + x98))
    result[0, 2, 1] = numpy.sum(-x83 * (x101 * x40 + x102 + 2.0 * x96 + x98))
    result[0, 2, 2] = numpy.sum(
        -x43 * (x102 * x11 + x107 + x109 * x67 + x3 * (2.0 * x103 + x71))
    )
    result[0, 2, 3] = numpy.sum(x26 * x86 * (x100 * x38 - x23 * x42 - x95))
    result[0, 2, 4] = numpy.sum(
        x83 * (-2.0 * x11 * x23 * x42 - 2.0 * x11 * x95 + x110 * x38 + x36)
    )
    result[0, 2, 5] = numpy.sum(x114 * (-x103 + x112 * x38 - x113 * x46 + x36))
    result[0, 3, 0] = numpy.sum(-x119 * x25)
    result[0, 3, 1] = numpy.sum(x123 * (x120 - x121 + x122))
    result[0, 3, 2] = numpy.sum(-x119 * x3 * x52)
    result[0, 3, 3] = numpy.sum(x44 * (x122 * x8 - x124 * x80 + x124 * x81 + x76))
    result[0, 3, 4] = numpy.sum(x11 * x48 * (2.0 * x1 * x115 - x118 * x8 + x120 - x121))
    result[0, 3, 5] = numpy.sum(-x119 * x27)
    result[0, 4, 0] = numpy.sum(x25 * x86 * (x125 - x126 - x42 * x57))
    result[0, 4, 1] = numpy.sum(x68 * (x117 * x125 - 2.0 * x126 * x8 - x42 * x75 + x97))
    result[0, 4, 2] = numpy.sum(
        x68 * (-2.0 * x11 * x126 - 2.0 * x11 * x42 * x57 + x110 * x41 + x62)
    )
    result[0, 4, 3] = numpy.sum(-x84 * (x101 * x82 + x126 * x8 + x42 * x80 + x98))
    result[0, 4, 4] = numpy.sum(
        -x43 * (x107 + x109 * x82 + x11 * x42 * x75 + x8 * (2.0 * x127 + x63))
    )
    result[0, 4, 5] = numpy.sum(x114 * (x112 * x41 - x113 * x115 - x127 + x62))
    result[0, 5, 0] = numpy.sum(-x130 * x25)
    result[0, 5, 1] = numpy.sum(-x130 * x3 * x47 * x8)
    result[0, 5, 2] = numpy.sum(-x123 * x132)
    result[0, 5, 3] = numpy.sum(-x130 * x26)
    result[0, 5, 4] = numpy.sum(-x132 * x48 * x8)
    result[0, 5, 5] = numpy.sum(x44 * (x106 + x11 * x131 - x111 * x133 + x112 * x133))
    return result


def int3c2e3d_sph_023(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sd|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 6, 10), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = x4**2
    x6 = -x2 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = x7**2
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = x10**2
    x12 = cx + x1
    x13 = x12 ** (-1.0)
    x14 = x1 * x13
    x15 = cx * x14 * (x11 + x5 + x8)
    x16 = boys(4, x15)
    x17 = x12 ** (-1.5)
    x18 = 17.49341832762486
    x19 = A[1] - B[1]
    x20 = A[2] - B[2]
    x21 = numpy.exp(-ax * bx * x2 * (x0**2 + x19**2 + x20**2))
    x22 = 2.0 * x18 * x21
    x23 = x2 * x22
    x24 = x17 * x23
    x25 = x16 * x24
    x26 = cx ** (-1.0)
    x27 = x12 ** (-0.5)
    x28 = -x3 - A[0]
    x29 = boys(3, x15)
    x30 = 2.0 * x18 * x2 * x21 * x26 * x27 * x28 * x29 - x25 * x4
    x31 = x30 * x4
    x32 = 0.5 / (ax + bx)
    x33 = x26 * x29
    x34 = x23 * x27 * x32 * x33
    x35 = x31 + x34
    x36 = x14 * x4
    x37 = x22 * x33
    x38 = x32 * x37
    x39 = x17 * x38
    x40 = x35 * x36 + x39 * x4
    x41 = x1 * x12 ** (-2.5) * x38
    x42 = x14 * (x36 * x40 + x41 * x5)
    x43 = x4**3
    x44 = x1**2
    x45 = x12 ** (-3.5) * x37 * x44
    x46 = x0 * x45
    x47 = x32 * (2.0 * x18 * x2 * x21 * x26 * x27 * x29 - x25)
    x48 = x24 * boys(5, x15)
    x49 = cx * x13
    x50 = x4 * x49
    x51 = (
        x28 * x30 + x47 - x50 * (2.0 * x16 * x18 * x2 * x21 * x26 * x27 * x28 - x4 * x48)
    )
    x52 = x4 * x51
    x53 = x30 * x32
    x54 = 2.0 * x53
    x55 = x14 * x32
    x56 = 2.0 * x55
    x57 = da * db * dc
    x58 = 0.06666666666666667 * x57
    x59 = 2.23606797749979 * x58
    x60 = x14 * x7
    x61 = x39 * x7
    x62 = x31 * x60 + x61
    x63 = x4 * x7
    x64 = x14 * (x36 * x62 + x41 * x63)
    x65 = x46 * x5
    x66 = 0.3333333333333333 * x57
    x67 = x10 * x14
    x68 = x10 * x39
    x69 = x31 * x67 + x68
    x70 = x10 * x41
    x71 = x14 * (x36 * x69 + x4 * x70)
    x72 = x44 / x12**2
    x73 = x72 * x8
    x74 = x41 * x8
    x75 = x14 * (x31 * x73 + x74)
    x76 = x4 * x46
    x77 = x7 * x72
    x78 = x10 * x77
    x79 = x7 * x70
    x80 = x14 * (x31 * x78 + x79)
    x81 = x10 * x63
    x82 = 1.732050807568877 * x66
    x83 = x11 * x72
    x84 = x11 * x41
    x85 = x14 * (x31 * x83 + x84)
    x86 = x7**3
    x87 = x1**3 / x12**3
    x88 = x86 * x87
    x89 = x30 * x88
    x90 = x8 * x87
    x91 = x10 * x90
    x92 = x30 * x91
    x93 = x10 * x8
    x94 = x11 * x87
    x95 = x7 * x94
    x96 = x30 * x95
    x97 = x11 * x7
    x98 = x10**3
    x99 = x87 * x98
    x100 = x30 * x99
    x101 = -x6 - A[1]
    x102 = 2.0 * x101 * x18 * x2 * x21 * x26 * x27 * x29 - x25 * x7
    x103 = x43 * x87
    x104 = x102 * x103
    x105 = x19 * x45
    x106 = x104 + x105 * x43
    x107 = x102 * x32
    x108 = 2.0 * x101 * x16 * x18 * x2 * x21 * x26 * x27 - x48 * x7
    x109 = x102 * x28 - x108 * x50
    x110 = x109 * x4
    x111 = x5 * x72
    x112 = 3.872983346207417 * x58
    x113 = x102 * x7
    x114 = x113 + x34
    x115 = x5 * x87
    x116 = x114 * x115
    x117 = x105 * x5
    x118 = x116 + x117 * x7
    x119 = x114 * x14
    x120 = x119 * x32
    x121 = x109 * x7
    x122 = x121 + x53
    x123 = x4 * x72
    x124 = x123 * x32
    x125 = x10 * x115
    x126 = x102 * x125
    x127 = x10 * x117 + x126
    x128 = x107 * x67
    x129 = x119 * x7 + x61
    x130 = x123 * x129
    x131 = x105 * x4
    x132 = x130 + x131 * x8
    x133 = x129 * x55
    x134 = x60 * (x122 + x53)
    x135 = x113 * x67 + x68
    x136 = x123 * x135
    x137 = x105 * x81 + x136
    x138 = x135 * x55
    x139 = x53 * x67
    x140 = x121 * x67 + x139
    x141 = x4 * x94
    x142 = x102 * x141
    x143 = x11 * x131 + x142
    x144 = x107 * x83
    x145 = x14 * (x129 * x60 + x74)
    x146 = x105 * x86 + x145
    x147 = x14 * (x135 * x60 + x79)
    x148 = x105 * x93 + x147
    x149 = x14 * (x113 * x83 + x84)
    x150 = x105 * x97 + x149
    x151 = x53 * x83
    x152 = x102 * x99
    x153 = x105 * x98 + x152
    x154 = -x9 - A[2]
    x155 = -x10 * x25 + 2.0 * x154 * x18 * x2 * x21 * x26 * x27 * x29
    x156 = x103 * x155
    x157 = x20 * x45
    x158 = x156 + x157 * x43
    x159 = x155 * x32
    x160 = -x10 * x48 + 2.0 * x154 * x16 * x18 * x2 * x21 * x26 * x27
    x161 = x155 * x28 - x160 * x50
    x162 = x161 * x4
    x163 = x115 * x7
    x164 = x155 * x163
    x165 = x157 * x5
    x166 = x164 + x165 * x7
    x167 = x159 * x60
    x168 = x123 * x7
    x169 = x10 * x155 + x34
    x170 = x115 * x169
    x171 = x10 * x165 + x170
    x172 = x169 * x55
    x173 = x10 * x161 + x53
    x174 = x4 * x90
    x175 = x155 * x174
    x176 = x157 * x4
    x177 = x175 + x176 * x8
    x178 = x159 * x73
    x179 = x63 * x87
    x180 = x169 * x179
    x181 = x157 * x81 + x180
    x182 = x169 * x32 * x77
    x183 = x169 * x67 + x68
    x184 = x123 * x183
    x185 = x11 * x176 + x184
    x186 = x183 * x55
    x187 = x139 + x173 * x67
    x188 = x155 * x88
    x189 = x157 * x86 + x188
    x190 = x169 * x90
    x191 = x157 * x93 + x190
    x192 = x183 * x77
    x193 = x157 * x97 + x192
    x194 = x14 * (x183 * x67 + x84)
    x195 = x157 * x98 + x194
    x196 = x49 * x7
    x197 = x101 * x102 - x108 * x196 + x47
    x198 = x197 * x7
    x199 = 2.0 * x107
    x200 = x198 + x199
    x201 = 2.0 * x120 + x200 * x60
    x202 = x67 * (x198 + x199)
    x203 = x101 * x155 - x160 * x196
    x204 = x159 + x203 * x7
    x205 = x10 * x203 + x107
    x206 = x167 + x204 * x60
    x207 = x172 + x205 * x60
    x208 = x128 + x205 * x67
    x209 = -x10 * x160 * x49 + x154 * x155 + x47
    x210 = x10 * x209 + 2.0 * x159
    x211 = 2.0 * x172 + x210 * x67

    # 60 item(s)
    result[0, 0, 0] = numpy.sum(
        x59
        * (
            x0 * x42
            + x0 * (x42 + x43 * x46)
            + x14 * (x36 * (x35 * x56 + x36 * (x52 + x54)) + x40 * x56)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x66
        * (x0 * x64 + x0 * (x64 + x65 * x7) + x14 * (x36 * x60 * (x52 + x54) + x56 * x62))
    )
    result[0, 0, 2] = numpy.sum(
        x66
        * (
            x0 * x71
            + x0 * (x10 * x65 + x71)
            + x14 * (x36 * x67 * (x52 + x54) + x56 * x69)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x66 * (x0 * x75 + x0 * (x75 + x76 * x8) + x14 * x73 * (x52 + x54))
    )
    result[0, 0, 4] = numpy.sum(
        x82 * (x0 * x80 + x0 * (x46 * x81 + x80) + x14 * x78 * (x52 + x54))
    )
    result[0, 0, 5] = numpy.sum(
        x66 * (x0 * x85 + x0 * (x11 * x76 + x85) + x14 * x83 * (x52 + x54))
    )
    result[0, 0, 6] = numpy.sum(x59 * (x0 * x89 + x0 * (x46 * x86 + x89) + x51 * x88))
    result[0, 0, 7] = numpy.sum(x66 * (x0 * x92 + x0 * (x46 * x93 + x92) + x51 * x91))
    result[0, 0, 8] = numpy.sum(x66 * (x0 * x96 + x0 * (x46 * x97 + x96) + x51 * x95))
    result[0, 0, 9] = numpy.sum(x59 * (x0 * x100 + x0 * (x100 + x46 * x98) + x51 * x99))
    result[0, 1, 0] = numpy.sum(
        x112
        * (x0 * x106 + x14 * (x107 * x111 + x36**2 * (2.0 * x107 + x110)) + x19 * x42)
    )
    result[0, 1, 1] = numpy.sum(
        x82 * (x0 * x118 + x14 * (x114 * x124 + x36 * (x120 + x122 * x36)) + x19 * x64)
    )
    result[0, 1, 2] = numpy.sum(
        x82
        * (x0 * x127 + x14 * (x10 * x107 * x123 + x36 * (x110 * x67 + x128)) + x19 * x71)
    )
    result[0, 1, 3] = numpy.sum(x82 * (x0 * x132 + x14 * (x133 + x134 * x36) + x19 * x75))
    result[0, 1, 4] = numpy.sum(x57 * (x0 * x137 + x14 * (x138 + x140 * x36) + x19 * x80))
    result[0, 1, 5] = numpy.sum(x82 * (x0 * x143 + x14 * (x110 * x83 + x144) + x19 * x85))
    result[0, 1, 6] = numpy.sum(
        x112 * (x0 * x146 + x14 * (x134 * x60 + x53 * x73) + x19 * x89)
    )
    result[0, 1, 7] = numpy.sum(
        x82 * (x0 * x148 + x14 * (x140 * x60 + x53 * x78) + x19 * x92)
    )
    result[0, 1, 8] = numpy.sum(x82 * (x0 * x150 + x14 * (x121 * x83 + x151) + x19 * x96))
    result[0, 1, 9] = numpy.sum(x112 * (x0 * x153 + x100 * x19 + x109 * x99))
    result[0, 2, 0] = numpy.sum(
        x112
        * (x0 * x158 + x14 * (x111 * x159 + x36**2 * (2.0 * x159 + x162)) + x20 * x42)
    )
    result[0, 2, 1] = numpy.sum(
        x82 * (x0 * x166 + x14 * (x159 * x168 + x36 * (x162 * x60 + x167)) + x20 * x64)
    )
    result[0, 2, 2] = numpy.sum(
        x82 * (x0 * x171 + x14 * (x124 * x169 + x36 * (x172 + x173 * x36)) + x20 * x71)
    )
    result[0, 2, 3] = numpy.sum(x82 * (x0 * x177 + x14 * (x162 * x73 + x178) + x20 * x75))
    result[0, 2, 4] = numpy.sum(
        x57 * (x0 * x181 + x14 * (x168 * x173 + x182) + x20 * x80)
    )
    result[0, 2, 5] = numpy.sum(x82 * (x0 * x185 + x14 * (x186 + x187 * x36) + x20 * x85))
    result[0, 2, 6] = numpy.sum(x112 * (x0 * x189 + x161 * x88 + x20 * x89))
    result[0, 2, 7] = numpy.sum(x82 * (x0 * x191 + x173 * x90 + x20 * x92))
    result[0, 2, 8] = numpy.sum(x82 * (x0 * x193 + x187 * x77 + x20 * x96))
    result[0, 2, 9] = numpy.sum(
        x112 * (x0 * x195 + x100 * x20 + x14 * (x151 + x187 * x67))
    )
    result[0, 3, 0] = numpy.sum(x59 * (x103 * x197 + x104 * x19 + x106 * x19))
    result[0, 3, 1] = numpy.sum(x66 * (x115 * x200 + x116 * x19 + x118 * x19))
    result[0, 3, 2] = numpy.sum(x66 * (x125 * x197 + x126 * x19 + x127 * x19))
    result[0, 3, 3] = numpy.sum(x66 * (x123 * x201 + x130 * x19 + x132 * x19))
    result[0, 3, 4] = numpy.sum(x82 * (x123 * x202 + x136 * x19 + x137 * x19))
    result[0, 3, 5] = numpy.sum(x66 * (x141 * x197 + x142 * x19 + x143 * x19))
    result[0, 3, 6] = numpy.sum(
        x59 * (x14 * (2.0 * x133 + x201 * x60) + x145 * x19 + x146 * x19)
    )
    result[0, 3, 7] = numpy.sum(
        x66 * (x14 * (2.0 * x138 + x202 * x60) + x147 * x19 + x148 * x19)
    )
    result[0, 3, 8] = numpy.sum(
        x66 * (x14 * x83 * (x198 + x199) + x149 * x19 + x150 * x19)
    )
    result[0, 3, 9] = numpy.sum(x59 * (x152 * x19 + x153 * x19 + x197 * x99))
    result[0, 4, 0] = numpy.sum(x112 * (x103 * x203 + x104 * x20 + x158 * x19))
    result[0, 4, 1] = numpy.sum(x82 * (x115 * x204 + x116 * x20 + x166 * x19))
    result[0, 4, 2] = numpy.sum(x82 * (x115 * x205 + x126 * x20 + x171 * x19))
    result[0, 4, 3] = numpy.sum(x82 * (x123 * x206 + x130 * x20 + x177 * x19))
    result[0, 4, 4] = numpy.sum(x57 * (x123 * x207 + x136 * x20 + x181 * x19))
    result[0, 4, 5] = numpy.sum(x82 * (x123 * x208 + x142 * x20 + x185 * x19))
    result[0, 4, 6] = numpy.sum(
        x112 * (x14 * (x178 + x206 * x60) + x145 * x20 + x189 * x19)
    )
    result[0, 4, 7] = numpy.sum(
        x82 * (x14 * (x182 + x207 * x60) + x147 * x20 + x19 * x191)
    )
    result[0, 4, 8] = numpy.sum(
        x82 * (x14 * (x186 + x208 * x60) + x149 * x20 + x19 * x193)
    )
    result[0, 4, 9] = numpy.sum(
        x112 * (x14 * (x144 + x208 * x67) + x152 * x20 + x19 * x195)
    )
    result[0, 5, 0] = numpy.sum(x59 * (x103 * x209 + x156 * x20 + x158 * x20))
    result[0, 5, 1] = numpy.sum(x66 * (x163 * x209 + x164 * x20 + x166 * x20))
    result[0, 5, 2] = numpy.sum(x66 * (x115 * x210 + x170 * x20 + x171 * x20))
    result[0, 5, 3] = numpy.sum(x66 * (x174 * x209 + x175 * x20 + x177 * x20))
    result[0, 5, 4] = numpy.sum(x82 * (x179 * x210 + x180 * x20 + x181 * x20))
    result[0, 5, 5] = numpy.sum(x66 * (x123 * x211 + x184 * x20 + x185 * x20))
    result[0, 5, 6] = numpy.sum(x59 * (x188 * x20 + x189 * x20 + x209 * x88))
    result[0, 5, 7] = numpy.sum(x66 * (x190 * x20 + x191 * x20 + x210 * x90))
    result[0, 5, 8] = numpy.sum(x66 * (x192 * x20 + x193 * x20 + x211 * x77))
    result[0, 5, 9] = numpy.sum(
        x59 * (x14 * (2.0 * x186 + x211 * x67) + x194 * x20 + x195 * x20)
    )
    return result


def int3c2e3d_sph_024(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sd|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 6, 15), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = x4**2
    x6 = -x2 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = x7**2
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = x10**2
    x12 = cx + x1
    x13 = x12 ** (-1.0)
    x14 = x1 * x13
    x15 = cx * x14 * (x11 + x5 + x8)
    x16 = boys(5, x15)
    x17 = x12 ** (-1.5)
    x18 = 17.49341832762486
    x19 = A[1] - B[1]
    x20 = A[2] - B[2]
    x21 = numpy.exp(-ax * bx * x2 * (x0**2 + x19**2 + x20**2))
    x22 = 2.0 * x18 * x21
    x23 = x2 * x22
    x24 = x17 * x23
    x25 = x16 * x24
    x26 = cx ** (-1.0)
    x27 = x12 ** (-0.5)
    x28 = -x3 - A[0]
    x29 = boys(4, x15)
    x30 = 2.0 * x18 * x2 * x21 * x26 * x27 * x28 * x29 - x25 * x4
    x31 = x30 * x4
    x32 = 0.5 / (ax + bx)
    x33 = x26 * x29
    x34 = x23 * x27 * x32 * x33
    x35 = x31 + x34
    x36 = x14 * x4
    x37 = x22 * x33
    x38 = x32 * x37
    x39 = x17 * x38
    x40 = x35 * x36 + x39 * x4
    x41 = x38 * x5
    x42 = x1 * x12 ** (-2.5)
    x43 = x36 * x40 + x41 * x42
    x44 = x4**3
    x45 = x1**2
    x46 = x12 ** (-3.5) * x45
    x47 = x38 * x46
    x48 = x14 * (x36 * x43 + x44 * x47)
    x49 = x4**4
    x50 = x1**3
    x51 = x12 ** (-4.5) * x37 * x50
    x52 = x0 * x51
    x53 = x32 * (2.0 * x18 * x2 * x21 * x26 * x27 * x29 - x25)
    x54 = x24 * boys(6, x15)
    x55 = cx * x13
    x56 = x4 * x55
    x57 = (
        x28 * x30 + x53 - x56 * (2.0 * x16 * x18 * x2 * x21 * x26 * x27 * x28 - x4 * x54)
    )
    x58 = x4 * x57
    x59 = x30 * x32
    x60 = 2.0 * x59
    x61 = x14 * x32
    x62 = 2.0 * x61
    x63 = da * db * dc
    x64 = 0.009523809523809524 * x63
    x65 = 5.916079783099616 * x64
    x66 = x14 * x7
    x67 = x39 * x7
    x68 = x31 * x66 + x67
    x69 = x38 * x42
    x70 = x4 * x69
    x71 = x36 * x68 + x7 * x70
    x72 = x41 * x46
    x73 = x14 * (x36 * x71 + x7 * x72)
    x74 = x44 * x52
    x75 = 0.06666666666666667 * x63
    x76 = 2.23606797749979 * x75
    x77 = x10 * x14
    x78 = x10 * x39
    x79 = x31 * x77 + x78
    x80 = x10 * x70 + x36 * x79
    x81 = x14 * (x10 * x72 + x36 * x80)
    x82 = x45 / x12**2
    x83 = x8 * x82
    x84 = x69 * x8
    x85 = x31 * x83 + x84
    x86 = x4 * x8
    x87 = x14 * (x36 * x85 + x47 * x86)
    x88 = x5 * x8
    x89 = 1.732050807568877
    x90 = 0.1111111111111111 * x63 * x89
    x91 = x7 * x82
    x92 = x10 * x91
    x93 = x10 * x7
    x94 = x69 * x93
    x95 = x31 * x92 + x94
    x96 = x14 * (x36 * x95 + x4 * x47 * x93)
    x97 = x5 * x93
    x98 = 0.3333333333333333 * x63
    x99 = x11 * x82
    x100 = x11 * x69
    x101 = x100 + x31 * x99
    x102 = x11 * x4
    x103 = x14 * (x101 * x36 + x102 * x47)
    x104 = x11 * x5
    x105 = x7**3
    x106 = x50 / x12**3
    x107 = x105 * x106
    x108 = x105 * x47
    x109 = x14 * (x107 * x31 + x108)
    x110 = x105 * x52
    x111 = x106 * x8
    x112 = x10 * x111
    x113 = x10 * x47 * x8
    x114 = x14 * (x112 * x31 + x113)
    x115 = x10 * x86
    x116 = x106 * x7
    x117 = x11 * x116
    x118 = x11 * x47 * x7
    x119 = x14 * (x117 * x31 + x118)
    x120 = x102 * x7
    x121 = x10**3
    x122 = x106 * x121
    x123 = x121 * x47
    x124 = x14 * (x122 * x31 + x123)
    x125 = x121 * x4
    x126 = x7**4
    x127 = x1**4 / x12**4
    x128 = x126 * x127
    x129 = x128 * x30
    x130 = x105 * x127
    x131 = x10 * x130
    x132 = x131 * x30
    x133 = x127 * x30
    x134 = x11 * x8
    x135 = x133 * x134
    x136 = x127 * x57
    x137 = x121 * x7
    x138 = x133 * x137
    x139 = x10**4
    x140 = x127 * x139
    x141 = x140 * x30
    x142 = -x6 - A[1]
    x143 = 2.0 * x142 * x18 * x2 * x21 * x26 * x27 * x29 - x25 * x7
    x144 = x127 * x49
    x145 = x143 * x144
    x146 = x19 * x51
    x147 = x145 + x146 * x49
    x148 = x143 * x32
    x149 = 2.0 * x142 * x16 * x18 * x2 * x21 * x26 * x27 - x54 * x7
    x150 = x143 * x28 - x149 * x56
    x151 = x150 * x4
    x152 = x5 * x82
    x153 = x106 * x44
    x154 = 10.2469507659596 * x64
    x155 = x143 * x7
    x156 = x155 + x34
    x157 = x127 * x44
    x158 = x156 * x157
    x159 = x146 * x44
    x160 = x158 + x159 * x7
    x161 = x14 * x156
    x162 = x161 * x32
    x163 = x150 * x7
    x164 = x163 + x59
    x165 = x4 * x82
    x166 = x156 * x32
    x167 = x106 * x5
    x168 = 3.872983346207417 * x75
    x169 = x10 * x157
    x170 = x143 * x169
    x171 = x10 * x159 + x170
    x172 = x148 * x77
    x173 = x10 * x148
    x174 = x161 * x7 + x67
    x175 = x167 * x174
    x176 = x146 * x88 + x175
    x177 = x174 * x61
    x178 = x66 * (x164 + x59)
    x179 = x165 * x32
    x180 = x155 * x77 + x78
    x181 = x167 * x180
    x182 = x146 * x97 + x181
    x183 = x180 * x61
    x184 = x59 * x77
    x185 = x163 * x77 + x184
    x186 = x89 * x98
    x187 = x127 * x143
    x188 = x104 * x187
    x189 = x104 * x146 + x188
    x190 = x148 * x99
    x191 = x174 * x66 + x84
    x192 = x165 * x191
    x193 = x105 * x146
    x194 = x192 + x193 * x4
    x195 = x191 * x61
    x196 = x178 * x66 + x59 * x83
    x197 = x180 * x66 + x94
    x198 = x165 * x197
    x199 = x115 * x146 + x198
    x200 = x197 * x61
    x201 = x185 * x66 + x59 * x92
    x202 = x100 + x155 * x99
    x203 = x165 * x202
    x204 = x120 * x146 + x203
    x205 = x202 * x61
    x206 = x59 * x99
    x207 = x163 * x99 + x206
    x208 = x125 * x187
    x209 = x125 * x146 + x208
    x210 = x122 * x148
    x211 = x14 * (x108 + x191 * x66)
    x212 = x126 * x146 + x211
    x213 = x14 * (x113 + x197 * x66)
    x214 = x10 * x193 + x213
    x215 = x14 * (x118 + x202 * x66)
    x216 = x134 * x146 + x215
    x217 = x14 * (x122 * x155 + x123)
    x218 = x137 * x146 + x217
    x219 = x122 * x59
    x220 = x140 * x143
    x221 = x139 * x146 + x220
    x222 = -x9 - A[2]
    x223 = -x10 * x25 + 2.0 * x18 * x2 * x21 * x222 * x26 * x27 * x29
    x224 = x144 * x223
    x225 = x20 * x51
    x226 = x224 + x225 * x49
    x227 = x223 * x32
    x228 = -x10 * x54 + 2.0 * x16 * x18 * x2 * x21 * x222 * x26 * x27
    x229 = x223 * x28 - x228 * x56
    x230 = x229 * x4
    x231 = x157 * x7
    x232 = x223 * x231
    x233 = x225 * x44
    x234 = x232 + x233 * x7
    x235 = x227 * x66
    x236 = x165 * x7
    x237 = x10 * x223 + x34
    x238 = x157 * x237
    x239 = x10 * x233 + x238
    x240 = x237 * x61
    x241 = x10 * x229 + x59
    x242 = x237 * x32
    x243 = x127 * x5
    x244 = x243 * x8
    x245 = x223 * x244
    x246 = x225 * x88 + x245
    x247 = x227 * x83
    x248 = x111 * x4
    x249 = x243 * x7
    x250 = x237 * x249
    x251 = x225 * x97 + x250
    x252 = x242 * x91
    x253 = x116 * x4
    x254 = x237 * x77 + x78
    x255 = x167 * x254
    x256 = x104 * x225 + x255
    x257 = x254 * x61
    x258 = x184 + x241 * x77
    x259 = x130 * x4
    x260 = x223 * x259
    x261 = x105 * x225
    x262 = x260 + x261 * x4
    x263 = x107 * x227
    x264 = x127 * x86
    x265 = x237 * x264
    x266 = x115 * x225 + x265
    x267 = x111 * x242
    x268 = x253 * x254
    x269 = x120 * x225 + x268
    x270 = x254 * x32 * x91
    x271 = x100 + x254 * x77
    x272 = x165 * x271
    x273 = x125 * x225 + x272
    x274 = x271 * x61
    x275 = x206 + x258 * x77
    x276 = x128 * x223
    x277 = x126 * x225 + x276
    x278 = x130 * x237
    x279 = x10 * x261 + x278
    x280 = x111 * x254
    x281 = x134 * x225 + x280
    x282 = x271 * x91
    x283 = x137 * x225 + x282
    x284 = x14 * (x123 + x271 * x77)
    x285 = x139 * x225 + x284
    x286 = x55 * x7
    x287 = x142 * x143 - x149 * x286 + x53
    x288 = x287 * x7
    x289 = 2.0 * x148
    x290 = x288 + x289
    x291 = 2.0 * x162 + x290 * x66
    x292 = x77 * (x288 + x289)
    x293 = x127 * x287
    x294 = 2.0 * x177 + x291 * x66
    x295 = 2.0 * x183 + x292 * x66
    x296 = x99 * (x288 + x289)
    x297 = x142 * x223 - x228 * x286
    x298 = x227 + x297 * x7
    x299 = x10 * x297 + x148
    x300 = x235 + x298 * x66
    x301 = x240 + x299 * x66
    x302 = x172 + x299 * x77
    x303 = x247 + x300 * x66
    x304 = x252 + x301 * x66
    x305 = x257 + x302 * x66
    x306 = x190 + x302 * x77
    x307 = -x10 * x228 * x55 + x222 * x223 + x53
    x308 = x10 * x307 + 2.0 * x227
    x309 = 2.0 * x240 + x308 * x77
    x310 = 2.0 * x257 + x309 * x77

    # 90 item(s)
    result[0, 0, 0] = numpy.sum(
        x65
        * (
            x0 * x48
            + x0 * (x48 + x49 * x52)
            + x14
            * (x36 * (x36 * (x35 * x62 + x36 * (x58 + x60)) + x40 * x62) + x43 * x62)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x76
        * (
            x0 * x73
            + x0 * (x7 * x74 + x73)
            + x14 * (x36 * (x36 * x66 * (x58 + x60) + x62 * x68) + x62 * x71)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x76
        * (
            x0 * x81
            + x0 * (x10 * x74 + x81)
            + x14 * (x36 * (x36 * x77 * (x58 + x60) + x62 * x79) + x62 * x80)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x90
        * (
            x0 * x87
            + x0 * (x52 * x88 + x87)
            + x14 * (x36 * x83 * (x58 + x60) + x62 * x85)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x98
        * (
            x0 * x96
            + x0 * (x52 * x97 + x96)
            + x14 * (x36 * x92 * (x58 + x60) + x62 * x95)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x90
        * (
            x0 * x103
            + x0 * (x103 + x104 * x52)
            + x14 * (x101 * x62 + x36 * x99 * (x58 + x60))
        )
    )
    result[0, 0, 6] = numpy.sum(
        x76 * (x0 * x109 + x0 * (x109 + x110 * x4) + x107 * x14 * (x58 + x60))
    )
    result[0, 0, 7] = numpy.sum(
        x98 * (x0 * x114 + x0 * (x114 + x115 * x52) + x112 * x14 * (x58 + x60))
    )
    result[0, 0, 8] = numpy.sum(
        x98 * (x0 * x119 + x0 * (x119 + x120 * x52) + x117 * x14 * (x58 + x60))
    )
    result[0, 0, 9] = numpy.sum(
        x76 * (x0 * x124 + x0 * (x124 + x125 * x52) + x122 * x14 * (x58 + x60))
    )
    result[0, 0, 10] = numpy.sum(
        x65 * (x0 * x129 + x0 * (x126 * x52 + x129) + x128 * x57)
    )
    result[0, 0, 11] = numpy.sum(
        x76 * (x0 * x132 + x0 * (x10 * x110 + x132) + x131 * x57)
    )
    result[0, 0, 12] = numpy.sum(
        x90 * (x0 * x135 + x0 * (x134 * x52 + x135) + x134 * x136)
    )
    result[0, 0, 13] = numpy.sum(
        x76 * (x0 * x138 + x0 * (x137 * x52 + x138) + x136 * x137)
    )
    result[0, 0, 14] = numpy.sum(
        x65 * (x0 * x141 + x0 * (x139 * x52 + x141) + x140 * x57)
    )
    result[0, 1, 0] = numpy.sum(
        x154
        * (
            x0 * x147
            + x14 * (x148 * x153 + x36 * (x148 * x152 + x36**2 * (2.0 * x148 + x151)))
            + x19 * x48
        )
    )
    result[0, 1, 1] = numpy.sum(
        x168
        * (
            x0 * x160
            + x14 * (x166 * x167 + x36 * (x165 * x166 + x36 * (x162 + x164 * x36)))
            + x19 * x73
        )
    )
    result[0, 1, 2] = numpy.sum(
        x168
        * (
            x0 * x171
            + x14 * (x167 * x173 + x36 * (x165 * x173 + x36 * (x151 * x77 + x172)))
            + x19 * x81
        )
    )
    result[0, 1, 3] = numpy.sum(
        x98 * (x0 * x176 + x14 * (x174 * x179 + x36 * (x177 + x178 * x36)) + x19 * x87)
    )
    result[0, 1, 4] = numpy.sum(
        x186 * (x0 * x182 + x14 * (x179 * x180 + x36 * (x183 + x185 * x36)) + x19 * x96)
    )
    result[0, 1, 5] = numpy.sum(
        x98
        * (
            x0 * x189
            + x103 * x19
            + x14 * (x102 * x106 * x148 + x36 * (x151 * x99 + x190))
        )
    )
    result[0, 1, 6] = numpy.sum(
        x168 * (x0 * x194 + x109 * x19 + x14 * (x195 + x196 * x36))
    )
    result[0, 1, 7] = numpy.sum(
        x186 * (x0 * x199 + x114 * x19 + x14 * (x200 + x201 * x36))
    )
    result[0, 1, 8] = numpy.sum(
        x186 * (x0 * x204 + x119 * x19 + x14 * (x205 + x207 * x36))
    )
    result[0, 1, 9] = numpy.sum(
        x168 * (x0 * x209 + x124 * x19 + x14 * (x122 * x151 + x210))
    )
    result[0, 1, 10] = numpy.sum(
        x154 * (x0 * x212 + x129 * x19 + x14 * (x107 * x59 + x196 * x66))
    )
    result[0, 1, 11] = numpy.sum(
        x168 * (x0 * x214 + x132 * x19 + x14 * (x112 * x59 + x201 * x66))
    )
    result[0, 1, 12] = numpy.sum(
        x98 * (x0 * x216 + x135 * x19 + x14 * (x117 * x59 + x207 * x66))
    )
    result[0, 1, 13] = numpy.sum(
        x168 * (x0 * x218 + x138 * x19 + x14 * (x122 * x163 + x219))
    )
    result[0, 1, 14] = numpy.sum(x154 * (x0 * x221 + x140 * x150 + x141 * x19))
    result[0, 2, 0] = numpy.sum(
        x154
        * (
            x0 * x226
            + x14 * (x153 * x227 + x36 * (x152 * x227 + x36**2 * (2.0 * x227 + x230)))
            + x20 * x48
        )
    )
    result[0, 2, 1] = numpy.sum(
        x168
        * (
            x0 * x234
            + x14 * (x167 * x227 * x7 + x36 * (x227 * x236 + x36 * (x230 * x66 + x235)))
            + x20 * x73
        )
    )
    result[0, 2, 2] = numpy.sum(
        x168
        * (
            x0 * x239
            + x14 * (x167 * x242 + x36 * (x179 * x237 + x36 * (x240 + x241 * x36)))
            + x20 * x81
        )
    )
    result[0, 2, 3] = numpy.sum(
        x98 * (x0 * x246 + x14 * (x227 * x248 + x36 * (x230 * x83 + x247)) + x20 * x87)
    )
    result[0, 2, 4] = numpy.sum(
        x186 * (x0 * x251 + x14 * (x242 * x253 + x36 * (x236 * x241 + x252)) + x20 * x96)
    )
    result[0, 2, 5] = numpy.sum(
        x98 * (x0 * x256 + x103 * x20 + x14 * (x179 * x254 + x36 * (x257 + x258 * x36)))
    )
    result[0, 2, 6] = numpy.sum(
        x168 * (x0 * x262 + x109 * x20 + x14 * (x107 * x230 + x263))
    )
    result[0, 2, 7] = numpy.sum(
        x186 * (x0 * x266 + x114 * x20 + x14 * (x241 * x248 + x267))
    )
    result[0, 2, 8] = numpy.sum(
        x186 * (x0 * x269 + x119 * x20 + x14 * (x236 * x258 + x270))
    )
    result[0, 2, 9] = numpy.sum(
        x168 * (x0 * x273 + x124 * x20 + x14 * (x274 + x275 * x36))
    )
    result[0, 2, 10] = numpy.sum(x154 * (x0 * x277 + x128 * x229 + x129 * x20))
    result[0, 2, 11] = numpy.sum(x168 * (x0 * x279 + x130 * x241 + x132 * x20))
    result[0, 2, 12] = numpy.sum(x98 * (x0 * x281 + x111 * x258 + x135 * x20))
    result[0, 2, 13] = numpy.sum(x168 * (x0 * x283 + x138 * x20 + x275 * x91))
    result[0, 2, 14] = numpy.sum(
        x154 * (x0 * x285 + x14 * (x219 + x275 * x77) + x141 * x20)
    )
    result[0, 3, 0] = numpy.sum(x65 * (x144 * x287 + x145 * x19 + x147 * x19))
    result[0, 3, 1] = numpy.sum(x76 * (x157 * x290 + x158 * x19 + x160 * x19))
    result[0, 3, 2] = numpy.sum(x76 * (x169 * x287 + x170 * x19 + x171 * x19))
    result[0, 3, 3] = numpy.sum(x90 * (x167 * x291 + x175 * x19 + x176 * x19))
    result[0, 3, 4] = numpy.sum(x98 * (x167 * x292 + x181 * x19 + x182 * x19))
    result[0, 3, 5] = numpy.sum(x90 * (x104 * x293 + x188 * x19 + x189 * x19))
    result[0, 3, 6] = numpy.sum(x76 * (x165 * x294 + x19 * x192 + x19 * x194))
    result[0, 3, 7] = numpy.sum(x98 * (x165 * x295 + x19 * x198 + x19 * x199))
    result[0, 3, 8] = numpy.sum(x98 * (x165 * x296 + x19 * x203 + x19 * x204))
    result[0, 3, 9] = numpy.sum(x76 * (x125 * x293 + x19 * x208 + x19 * x209))
    result[0, 3, 10] = numpy.sum(
        x65 * (x14 * (2.0 * x195 + x294 * x66) + x19 * x211 + x19 * x212)
    )
    result[0, 3, 11] = numpy.sum(
        x76 * (x14 * (2.0 * x200 + x295 * x66) + x19 * x213 + x19 * x214)
    )
    result[0, 3, 12] = numpy.sum(
        x90 * (x14 * (2.0 * x205 + x296 * x66) + x19 * x215 + x19 * x216)
    )
    result[0, 3, 13] = numpy.sum(
        x76 * (x122 * x14 * (x288 + x289) + x19 * x217 + x19 * x218)
    )
    result[0, 3, 14] = numpy.sum(x65 * (x140 * x287 + x19 * x220 + x19 * x221))
    result[0, 4, 0] = numpy.sum(x154 * (x144 * x297 + x145 * x20 + x19 * x226))
    result[0, 4, 1] = numpy.sum(x168 * (x157 * x298 + x158 * x20 + x19 * x234))
    result[0, 4, 2] = numpy.sum(x168 * (x157 * x299 + x170 * x20 + x19 * x239))
    result[0, 4, 3] = numpy.sum(x98 * (x167 * x300 + x175 * x20 + x19 * x246))
    result[0, 4, 4] = numpy.sum(x186 * (x167 * x301 + x181 * x20 + x19 * x251))
    result[0, 4, 5] = numpy.sum(x98 * (x167 * x302 + x188 * x20 + x19 * x256))
    result[0, 4, 6] = numpy.sum(x168 * (x165 * x303 + x19 * x262 + x192 * x20))
    result[0, 4, 7] = numpy.sum(x186 * (x165 * x304 + x19 * x266 + x198 * x20))
    result[0, 4, 8] = numpy.sum(x186 * (x165 * x305 + x19 * x269 + x20 * x203))
    result[0, 4, 9] = numpy.sum(x168 * (x165 * x306 + x19 * x273 + x20 * x208))
    result[0, 4, 10] = numpy.sum(
        x154 * (x14 * (x263 + x303 * x66) + x19 * x277 + x20 * x211)
    )
    result[0, 4, 11] = numpy.sum(
        x168 * (x14 * (x267 + x304 * x66) + x19 * x279 + x20 * x213)
    )
    result[0, 4, 12] = numpy.sum(
        x98 * (x14 * (x270 + x305 * x66) + x19 * x281 + x20 * x215)
    )
    result[0, 4, 13] = numpy.sum(
        x168 * (x14 * (x274 + x306 * x66) + x19 * x283 + x20 * x217)
    )
    result[0, 4, 14] = numpy.sum(
        x154 * (x14 * (x210 + x306 * x77) + x19 * x285 + x20 * x220)
    )
    result[0, 5, 0] = numpy.sum(x65 * (x144 * x307 + x20 * x224 + x20 * x226))
    result[0, 5, 1] = numpy.sum(x76 * (x20 * x232 + x20 * x234 + x231 * x307))
    result[0, 5, 2] = numpy.sum(x76 * (x157 * x308 + x20 * x238 + x20 * x239))
    result[0, 5, 3] = numpy.sum(x90 * (x20 * x245 + x20 * x246 + x244 * x307))
    result[0, 5, 4] = numpy.sum(x98 * (x20 * x250 + x20 * x251 + x249 * x308))
    result[0, 5, 5] = numpy.sum(x90 * (x167 * x309 + x20 * x255 + x20 * x256))
    result[0, 5, 6] = numpy.sum(x76 * (x20 * x260 + x20 * x262 + x259 * x307))
    result[0, 5, 7] = numpy.sum(x98 * (x20 * x265 + x20 * x266 + x264 * x308))
    result[0, 5, 8] = numpy.sum(x98 * (x20 * x268 + x20 * x269 + x253 * x309))
    result[0, 5, 9] = numpy.sum(x76 * (x165 * x310 + x20 * x272 + x20 * x273))
    result[0, 5, 10] = numpy.sum(x65 * (x128 * x307 + x20 * x276 + x20 * x277))
    result[0, 5, 11] = numpy.sum(x76 * (x130 * x308 + x20 * x278 + x20 * x279))
    result[0, 5, 12] = numpy.sum(x90 * (x111 * x309 + x20 * x280 + x20 * x281))
    result[0, 5, 13] = numpy.sum(x76 * (x20 * x282 + x20 * x283 + x310 * x91))
    result[0, 5, 14] = numpy.sum(
        x65 * (x14 * (2.0 * x274 + x310 * x77) + x20 * x284 + x20 * x285)
    )
    return result


def int3c2e3d_sph_030(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sf|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 10, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = 0.5 / (ax + bx)
    x2 = ax + bx
    x3 = x2 ** (-1.0)
    x4 = -x3 * (ax * A[0] + bx * B[0])
    x5 = -x4 - C[0]
    x6 = -x3 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = -x3 * (ax * A[2] + bx * B[2])
    x9 = -x8 - C[2]
    x10 = cx + x2
    x11 = cx / x10
    x12 = x11 * x2 * (x5**2 + x7**2 + x9**2)
    x13 = boys(1, x12)
    x14 = 17.49341832762486
    x15 = A[1] - B[1]
    x16 = A[2] - B[2]
    x17 = numpy.exp(-ax * bx * x3 * (x0**2 + x15**2 + x16**2))
    x18 = 2.0 * x14 * x17 * x3
    x19 = x10 ** (-1.5) * x18
    x20 = x13 * x19
    x21 = cx ** (-1.0)
    x22 = x10 ** (-0.5)
    x23 = boys(0, x12)
    x24 = x1 * (2.0 * x14 * x17 * x21 * x22 * x23 * x3 - x20)
    x25 = -x4 - A[0]
    x26 = x20 * x5
    x27 = -2.0 * x14 * x17 * x21 * x22 * x23 * x25 * x3 + x26
    x28 = -x27
    x29 = boys(2, x12)
    x30 = x19 * x29
    x31 = 2.0 * x13 * x14 * x17 * x21 * x22 * x25 * x3 - x30 * x5
    x32 = x11 * x31
    x33 = x24 + x25 * x28 - x32 * x5
    x34 = x0 * x28 + x33
    x35 = x18 * x21 * x22 * x23
    x36 = x1 * (2.0 * x13 * x14 * x17 * x21 * x22 * x3 - x30)
    x37 = x19 * boys(3, x12)
    x38 = x11 * x5
    x39 = da * db * dc
    x40 = 0.2581988897471611 * x39
    x41 = -x6 - A[1]
    x42 = 2.0 * x13 * x14 * x17 * x21 * x22 * x3 * x41 - x30 * x7
    x43 = x11 * x42
    x44 = x20 * x7
    x45 = -2.0 * x14 * x17 * x21 * x22 * x23 * x3 * x41 + x44
    x46 = -x1 * (x43 + x45)
    x47 = -x45
    x48 = x43 * x5
    x49 = x15 * x28 + x25 * x47 - x48
    x50 = x15 * x35 + x35 * x41 - x44
    x51 = x25 * x47 - x48
    x52 = 2.0 * x14 * x17 * x21 * x22 * x29 * x3 * x41 - x37 * x7
    x53 = 0.5773502691896258 * x39
    x54 = -x8 - A[2]
    x55 = 2.0 * x13 * x14 * x17 * x21 * x22 * x3 * x54 - x30 * x9
    x56 = x11 * x55
    x57 = x20 * x9
    x58 = -2.0 * x14 * x17 * x21 * x22 * x23 * x3 * x54 + x57
    x59 = -x1 * (x56 + x58)
    x60 = -x58
    x61 = x5 * x56
    x62 = x16 * x28 + x25 * x60 - x61
    x63 = x16 * x35 + x35 * x54 - x57
    x64 = x25 * x60 - x61
    x65 = 2.0 * x14 * x17 * x21 * x22 * x29 * x3 * x54 - x37 * x9
    x66 = x24 + x41 * x47 - x43 * x7
    x67 = x15 * x47 + x66
    x68 = x15 * x50 + x67
    x69 = x11 * x7
    x70 = x36 + x41 * x42 - x52 * x69
    x71 = x56 * x7
    x72 = x16 * x47 + x41 * x60 - x71
    x73 = x15 * x63 + x72
    x74 = x41 * x60 - x71
    x75 = x41 * x55 - x65 * x69
    x76 = x24 + x54 * x60 - x56 * x9
    x77 = x16 * x60 + x76
    x78 = x16 * x63 + x77
    x79 = x11 * x9
    x80 = x36 + x54 * x55 - x65 * x79

    # 10 item(s)
    result[0, 0, 0] = numpy.sum(
        x40
        * (
            x0 * x33
            + x0 * x34
            + x0 * (x0 * (x0 * x35 + x25 * x35 - x26) + x34)
            - 2.0 * x1 * (x27 + x32)
            + x25 * x33
            - x38
            * (
                x25 * x31
                + x36
                - x38 * (2.0 * x14 * x17 * x21 * x22 * x25 * x29 * x3 - x37 * x5)
            )
        )
    )
    result[0, 1, 0] = numpy.sum(
        x53
        * (
            x0 * x49
            + x0 * (x0 * x50 + x49)
            + x15 * x33
            + x25 * x51
            - x38 * (x25 * x42 - x38 * x52)
            + x46
        )
    )
    result[0, 2, 0] = numpy.sum(
        x53
        * (
            x0 * x62
            + x0 * (x0 * x63 + x62)
            + x16 * x33
            + x25 * x64
            - x38 * (x25 * x55 - x38 * x65)
            + x59
        )
    )
    result[0, 3, 0] = numpy.sum(
        x53 * (x0 * x68 + x15 * x49 + x15 * x51 + x25 * x66 - x38 * x70)
    )
    result[0, 4, 0] = numpy.sum(
        x39 * (x0 * x73 + x15 * x62 + x16 * x51 + x25 * x74 - x38 * x75)
    )
    result[0, 5, 0] = numpy.sum(
        x53 * (x0 * x78 + x16 * x62 + x16 * x64 + x25 * x76 - x38 * x80)
    )
    result[0, 6, 0] = numpy.sum(
        x40 * (x15 * x66 + x15 * x67 + x15 * x68 + x41 * x66 + 2.0 * x46 - x69 * x70)
    )
    result[0, 7, 0] = numpy.sum(
        x53 * (x15 * x72 + x15 * x73 + x16 * x66 + x41 * x74 + x59 - x69 * x75)
    )
    result[0, 8, 0] = numpy.sum(
        x53 * (x15 * x78 + x16 * x72 + x16 * x74 + x41 * x76 - x69 * x80)
    )
    result[0, 9, 0] = numpy.sum(
        x40 * (x16 * x76 + x16 * x77 + x16 * x78 + x54 * x76 + 2.0 * x59 - x79 * x80)
    )
    return result


def int3c2e3d_sph_031(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sf|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 10, 3), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = 0.5 / (ax + bx)
    x6 = -x2 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = -x2 * (ax * A[2] + bx * B[2])
    x9 = -x8 - C[2]
    x10 = cx + x1
    x11 = x10 ** (-1.0)
    x12 = x1 * x11
    x13 = cx * x12 * (x4**2 + x7**2 + x9**2)
    x14 = boys(2, x13)
    x15 = x10 ** (-1.5)
    x16 = 17.49341832762486
    x17 = A[1] - B[1]
    x18 = A[2] - B[2]
    x19 = numpy.exp(-ax * bx * x2 * (x0**2 + x17**2 + x18**2))
    x20 = x16 * x19 * x2
    x21 = 2.0 * x15 * x20
    x22 = x14 * x21
    x23 = cx ** (-1.0)
    x24 = x10 ** (-0.5)
    x25 = boys(1, x13)
    x26 = x5 * (2.0 * x16 * x19 * x2 * x23 * x24 * x25 - x22)
    x27 = -x3 - A[0]
    x28 = -2.0 * x16 * x19 * x2 * x23 * x24 * x25 * x27 + x22 * x4
    x29 = -x28
    x30 = boys(3, x13)
    x31 = x21 * x30
    x32 = 2.0 * x14 * x16 * x19 * x2 * x23 * x24 * x27 - x31 * x4
    x33 = cx * x11
    x34 = x32 * x33
    x35 = x26 + x27 * x29 - x34 * x4
    x36 = x29 * x5
    x37 = x12 * (x35 * x4 + 2.0 * x36)
    x38 = 2.0 * x5
    x39 = x23 * x25
    x40 = x20 * x24 * x38 * x39
    x41 = x12 * (x29 * x4 + x40)
    x42 = x0 * x41 + x37
    x43 = 2.0 * x15 * x16 * x19 * x39
    x44 = x0 * x43
    x45 = x5 * (2.0 * x14 * x16 * x19 * x2 * x23 * x24 - x31)
    x46 = x21 * boys(4, x13)
    x47 = x33 * x4
    x48 = (
        x27 * x35
        - x38 * (x28 + x34)
        - x47
        * (
            x27 * x32
            + x45
            - x47 * (2.0 * x16 * x19 * x2 * x23 * x24 * x27 * x30 - x4 * x46)
        )
    )
    x49 = x35 * x5
    x50 = da * db * dc
    x51 = 0.2581988897471611 * x50
    x52 = x12 * x7
    x53 = x35 * x52
    x54 = x29 * x52
    x55 = x0 * x54 + x53
    x56 = x12 * x9
    x57 = x35 * x56
    x58 = x29 * x56
    x59 = x0 * x58 + x57
    x60 = -x6 - A[1]
    x61 = -2.0 * x16 * x19 * x2 * x23 * x24 * x25 * x60 + x22 * x7
    x62 = -x61
    x63 = x5 * x62
    x64 = 2.0 * x14 * x16 * x19 * x2 * x23 * x24 * x60 - x31 * x7
    x65 = x33 * x64
    x66 = x27 * x62 - x4 * x65
    x67 = x12 * (x4 * x66 + x63)
    x68 = x17 * x41 + x67
    x69 = x12 * x4
    x70 = x62 * x69
    x71 = x17 * x43
    x72 = x4 * x71 + x70
    x73 = -x5 * (x61 + x65)
    x74 = 2.0 * x16 * x19 * x2 * x23 * x24 * x30 * x60 - x46 * x7
    x75 = x27 * x66 - x47 * (x27 * x64 - x47 * x74) + x73
    x76 = x5 * x66
    x77 = 2.0 * x76
    x78 = 0.5773502691896258 * x50
    x79 = x12 * (x36 + x66 * x7)
    x80 = x17 * x54 + x79
    x81 = x12 * (x40 + x62 * x7)
    x82 = x7 * x71 + x81
    x83 = x56 * x66
    x84 = x17 * x58 + x83
    x85 = x56 * x62
    x86 = x71 * x9 + x85
    x87 = -x8 - A[2]
    x88 = -2.0 * x16 * x19 * x2 * x23 * x24 * x25 * x87 + x22 * x9
    x89 = -x88
    x90 = x5 * x89
    x91 = 2.0 * x14 * x16 * x19 * x2 * x23 * x24 * x87 - x31 * x9
    x92 = x33 * x91
    x93 = x27 * x89 - x4 * x92
    x94 = x12 * (x4 * x93 + x90)
    x95 = x18 * x41 + x94
    x96 = x69 * x89
    x97 = x18 * x43
    x98 = x4 * x97 + x96
    x99 = -x5 * (x88 + x92)
    x100 = 2.0 * x16 * x19 * x2 * x23 * x24 * x30 * x87 - x46 * x9
    x101 = x27 * x93 + x47 * (x100 * x47 - x27 * x91) + x99
    x102 = x5 * x93
    x103 = 2.0 * x102
    x104 = x52 * x93
    x105 = x104 + x18 * x54
    x106 = x52 * x89
    x107 = x106 + x7 * x97
    x108 = x12 * (x36 + x9 * x93)
    x109 = x108 + x18 * x58
    x110 = x12 * (x40 + x89 * x9)
    x111 = x110 + x9 * x97
    x112 = x26 + x60 * x62 - x65 * x7
    x113 = x112 * x69
    x114 = x113 + x17 * x70
    x115 = x114 + x17 * x72
    x116 = x112 * x5
    x117 = x33 * x7
    x118 = -x117 * x74 + x45 + x60 * x64
    x119 = x112 * x27 - x118 * x47
    x120 = x12 * (x112 * x7 + 2.0 * x63)
    x121 = x120 + x17 * x81
    x122 = x121 + x17 * x82
    x123 = x112 * x56
    x124 = x123 + x17 * x85
    x125 = x124 + x17 * x86
    x126 = x60 * x89 - x7 * x92
    x127 = x126 * x69
    x128 = x127 + x18 * x70
    x129 = x128 + x17 * x98
    x130 = x126 * x5
    x131 = -x100 * x117 + x60 * x91
    x132 = x126 * x27 - x131 * x47
    x133 = x12 * (x126 * x7 + x90)
    x134 = x133 + x18 * x81
    x135 = x107 * x17 + x134
    x136 = x12 * (x126 * x9 + x63)
    x137 = x136 + x18 * x85
    x138 = x111 * x17 + x137
    x139 = x26 + x87 * x89 - x9 * x92
    x140 = x139 * x69
    x141 = x140 + x18 * x96
    x142 = x141 + x18 * x98
    x143 = x139 * x5
    x144 = x33 * x9
    x145 = -x100 * x144 + x45 + x87 * x91
    x146 = x139 * x27 - x145 * x47
    x147 = x139 * x52
    x148 = x106 * x18 + x147
    x149 = x107 * x18 + x148
    x150 = x12 * (x139 * x9 + 2.0 * x90)
    x151 = x110 * x18 + x150
    x152 = x111 * x18 + x151
    x153 = x112 * x60 - x117 * x118 + 2.0 * x73
    x154 = -x117 * x131 + x126 * x60 + x99
    x155 = 2.0 * x130
    x156 = -x117 * x145 + x139 * x60
    x157 = x139 * x87 - x144 * x145 + 2.0 * x99

    # 30 item(s)
    result[0, 0, 0] = numpy.sum(
        x51
        * (
            x0 * x37
            + x0 * x42
            + x0 * (x0 * (x4 * x44 + x41) + x42)
            + x12 * (x4 * x48 + 3.0 * x49)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x51 * (x0 * x53 + x0 * x55 + x0 * (x0 * (x44 * x7 + x54) + x55) + x48 * x52)
    )
    result[0, 0, 2] = numpy.sum(
        x51 * (x0 * x57 + x0 * x59 + x0 * (x0 * (x44 * x9 + x58) + x59) + x48 * x56)
    )
    result[0, 1, 0] = numpy.sum(
        x78 * (x0 * x68 + x0 * (x0 * x72 + x68) + x12 * (x4 * x75 + x77) + x17 * x37)
    )
    result[0, 1, 1] = numpy.sum(
        x78 * (x0 * x80 + x0 * (x0 * x82 + x80) + x12 * (x49 + x7 * x75) + x17 * x53)
    )
    result[0, 1, 2] = numpy.sum(
        x78 * (x0 * x84 + x0 * (x0 * x86 + x84) + x17 * x57 + x56 * x75)
    )
    result[0, 2, 0] = numpy.sum(
        x78 * (x0 * x95 + x0 * (x0 * x98 + x95) + x12 * (x101 * x4 + x103) + x18 * x37)
    )
    result[0, 2, 1] = numpy.sum(
        x78 * (x0 * x105 + x0 * (x0 * x107 + x105) + x101 * x52 + x18 * x53)
    )
    result[0, 2, 2] = numpy.sum(
        x78 * (x0 * x109 + x0 * (x0 * x111 + x109) + x12 * (x101 * x9 + x49) + x18 * x57)
    )
    result[0, 3, 0] = numpy.sum(
        x78 * (x0 * x115 + x12 * (x116 + x119 * x4) + x17 * x67 + x17 * x68)
    )
    result[0, 3, 1] = numpy.sum(
        x78 * (x0 * x122 + x12 * (x119 * x7 + x77) + x17 * x79 + x17 * x80)
    )
    result[0, 3, 2] = numpy.sum(x78 * (x0 * x125 + x119 * x56 + x17 * x83 + x17 * x84))
    result[0, 4, 0] = numpy.sum(
        x50 * (x0 * x129 + x12 * (x130 + x132 * x4) + x17 * x95 + x18 * x67)
    )
    result[0, 4, 1] = numpy.sum(
        x50 * (x0 * x135 + x105 * x17 + x12 * (x102 + x132 * x7) + x18 * x79)
    )
    result[0, 4, 2] = numpy.sum(
        x50 * (x0 * x138 + x109 * x17 + x12 * (x132 * x9 + x76) + x18 * x83)
    )
    result[0, 5, 0] = numpy.sum(
        x78 * (x0 * x142 + x12 * (x143 + x146 * x4) + x18 * x94 + x18 * x95)
    )
    result[0, 5, 1] = numpy.sum(x78 * (x0 * x149 + x104 * x18 + x105 * x18 + x146 * x52))
    result[0, 5, 2] = numpy.sum(
        x78 * (x0 * x152 + x108 * x18 + x109 * x18 + x12 * (x103 + x146 * x9))
    )
    result[0, 6, 0] = numpy.sum(x51 * (x113 * x17 + x114 * x17 + x115 * x17 + x153 * x69))
    result[0, 6, 1] = numpy.sum(
        x51 * (x12 * (3.0 * x116 + x153 * x7) + x120 * x17 + x121 * x17 + x122 * x17)
    )
    result[0, 6, 2] = numpy.sum(x51 * (x123 * x17 + x124 * x17 + x125 * x17 + x153 * x56))
    result[0, 7, 0] = numpy.sum(x78 * (x113 * x18 + x128 * x17 + x129 * x17 + x154 * x69))
    result[0, 7, 1] = numpy.sum(
        x78 * (x12 * (x154 * x7 + x155) + x120 * x18 + x134 * x17 + x135 * x17)
    )
    result[0, 7, 2] = numpy.sum(
        x78 * (x12 * (x116 + x154 * x9) + x123 * x18 + x137 * x17 + x138 * x17)
    )
    result[0, 8, 0] = numpy.sum(x78 * (x127 * x18 + x128 * x18 + x142 * x17 + x156 * x69))
    result[0, 8, 1] = numpy.sum(
        x78 * (x12 * (x143 + x156 * x7) + x133 * x18 + x134 * x18 + x149 * x17)
    )
    result[0, 8, 2] = numpy.sum(
        x78 * (x12 * (x155 + x156 * x9) + x136 * x18 + x137 * x18 + x152 * x17)
    )
    result[0, 9, 0] = numpy.sum(x51 * (x140 * x18 + x141 * x18 + x142 * x18 + x157 * x69))
    result[0, 9, 1] = numpy.sum(x51 * (x147 * x18 + x148 * x18 + x149 * x18 + x157 * x52))
    result[0, 9, 2] = numpy.sum(
        x51 * (x12 * (3.0 * x143 + x157 * x9) + x150 * x18 + x151 * x18 + x152 * x18)
    )
    return result


def int3c2e3d_sph_032(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sf|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 10, 6), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = 0.5 / (ax + bx)
    x6 = x4**2
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x2 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x1
    x14 = x13 ** (-1.0)
    x15 = x1 * x14
    x16 = cx * x15 * (x12 + x6 + x9)
    x17 = boys(3, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = x19 * x2 * x22
    x24 = 2.0 * x18 * x23
    x25 = x17 * x24
    x26 = cx ** (-1.0)
    x27 = x13 ** (-0.5)
    x28 = boys(2, x16)
    x29 = x5 * (2.0 * x19 * x2 * x22 * x26 * x27 * x28 - x25)
    x30 = -x3 - A[0]
    x31 = -2.0 * x19 * x2 * x22 * x26 * x27 * x28 * x30 + x25 * x4
    x32 = -x31
    x33 = boys(4, x16)
    x34 = x24 * x33
    x35 = 2.0 * x17 * x19 * x2 * x22 * x26 * x27 * x30 - x34 * x4
    x36 = cx * x14
    x37 = x35 * x36
    x38 = x29 + x30 * x32 - x37 * x4
    x39 = x38 * x4
    x40 = x32 * x5
    x41 = 2.0 * x40
    x42 = x39 + x41
    x43 = x15 * x4
    x44 = x32 * x4
    x45 = 2.0 * x5
    x46 = x26 * x28
    x47 = x45 * x46
    x48 = x23 * x27 * x47
    x49 = x44 + x48
    x50 = x15 * x45
    x51 = x15 * (x42 * x43 + x49 * x50)
    x52 = x19 * x22
    x53 = x4 * x52
    x54 = x18 * x47
    x55 = x15 * (x43 * x49 + x53 * x54)
    x56 = x0 * x55 + x51
    x57 = 2.0 * x1 * x13 ** (-2.5) * x46
    x58 = x52 * x57
    x59 = x0 * x58
    x60 = x5 * (2.0 * x17 * x19 * x2 * x22 * x26 * x27 - x34)
    x61 = x24 * boys(5, x16)
    x62 = x36 * x4
    x63 = (
        x30 * x38
        - x45 * (x31 + x37)
        - x62
        * (
            x30 * x35
            + x60
            - x62 * (2.0 * x19 * x2 * x22 * x26 * x27 * x30 * x33 - x4 * x61)
        )
    )
    x64 = x4 * x63
    x65 = x38 * x5
    x66 = 3.0 * x65
    x67 = x15 * x5
    x68 = da * db * dc
    x69 = 0.06666666666666667 * x68
    x70 = 2.23606797749979 * x69
    x71 = x15 * x8
    x72 = x15 * x71 * (x39 + x41)
    x73 = x52 * x54
    x74 = x73 * x8
    x75 = x15 * (x44 * x71 + x74)
    x76 = x0 * x75 + x72
    x77 = x53 * x57
    x78 = x0 * x77
    x79 = 3.872983346207417 * x69
    x80 = x11 * x15
    x81 = x15 * x80 * (x39 + x41)
    x82 = x11 * x73
    x83 = x15 * (x44 * x80 + x82)
    x84 = x0 * x83 + x81
    x85 = x1**2 / x13**2
    x86 = x85 * x9
    x87 = x38 * x86
    x88 = x32 * x86
    x89 = x0 * x88 + x87
    x90 = x8 * x85
    x91 = x11 * x90
    x92 = x38 * x91
    x93 = x32 * x91
    x94 = x0 * x93 + x92
    x95 = x11 * x8
    x96 = x12 * x85
    x97 = x38 * x96
    x98 = x32 * x96
    x99 = x0 * x98 + x97
    x100 = -x7 - A[1]
    x101 = -2.0 * x100 * x19 * x2 * x22 * x26 * x27 * x28 + x25 * x8
    x102 = -x101
    x103 = x102 * x5
    x104 = 2.0 * x100 * x17 * x19 * x2 * x22 * x26 * x27 - x34 * x8
    x105 = x104 * x36
    x106 = x102 * x30 - x105 * x4
    x107 = x106 * x4
    x108 = x103 + x107
    x109 = x15 * x43 * (x103 + x108)
    x110 = x109 + x20 * x55
    x111 = x6 * x85
    x112 = x102 * x111
    x113 = x20 * x58
    x114 = x112 + x113 * x6
    x115 = -x5 * (x101 + x105)
    x116 = 2.0 * x100 * x19 * x2 * x22 * x26 * x27 * x33 - x61 * x8
    x117 = x106 * x30 + x115 - x62 * (x104 * x30 - x116 * x62)
    x118 = x117 * x4
    x119 = x106 * x5
    x120 = 2.0 * x119
    x121 = 0.3333333333333333 * x68
    x122 = x102 * x8
    x123 = x122 + x48
    x124 = x123 * x15
    x125 = x106 * x8
    x126 = x125 + x40
    x127 = x15 * (x124 * x5 + x126 * x43)
    x128 = x127 + x20 * x75
    x129 = x4 * x85
    x130 = x123 * x129
    x131 = x20 * x77
    x132 = x130 + x131 * x8
    x133 = x117 * x8
    x134 = x133 + x65
    x135 = x126 * x50
    x136 = 1.732050807568877 * x121
    x137 = x103 * x80
    x138 = x15 * (x107 * x80 + x137)
    x139 = x138 + x20 * x83
    x140 = x11 * x129
    x141 = x102 * x140
    x142 = x11 * x131 + x141
    x143 = x120 * x80
    x144 = x15 * x71 * (x126 + x40)
    x145 = x144 + x20 * x88
    x146 = x15 * (x124 * x8 + x74)
    x147 = x113 * x9 + x146
    x148 = x40 * x80
    x149 = x15 * (x125 * x80 + x148)
    x150 = x149 + x20 * x93
    x151 = x15 * (x122 * x80 + x82)
    x152 = x113 * x95 + x151
    x153 = x65 * x80
    x154 = x106 * x96
    x155 = x154 + x20 * x98
    x156 = x102 * x96
    x157 = x113 * x12 + x156
    x158 = -x10 - A[2]
    x159 = x11 * x25 - 2.0 * x158 * x19 * x2 * x22 * x26 * x27 * x28
    x160 = -x159
    x161 = x160 * x5
    x162 = -x11 * x34 + 2.0 * x158 * x17 * x19 * x2 * x22 * x26 * x27
    x163 = x162 * x36
    x164 = x160 * x30 - x163 * x4
    x165 = x164 * x4
    x166 = x161 + x165
    x167 = x15 * x43 * (x161 + x166)
    x168 = x167 + x21 * x55
    x169 = x111 * x160
    x170 = x21 * x58
    x171 = x169 + x170 * x6
    x172 = -x5 * (x159 + x163)
    x173 = -x11 * x61 + 2.0 * x158 * x19 * x2 * x22 * x26 * x27 * x33
    x174 = x164 * x30 + x172 - x62 * (x162 * x30 - x173 * x62)
    x175 = x174 * x4
    x176 = x164 * x5
    x177 = 2.0 * x176
    x178 = x161 * x71
    x179 = x15 * (x165 * x71 + x178)
    x180 = x179 + x21 * x75
    x181 = x129 * x8
    x182 = x160 * x181
    x183 = x21 * x77
    x184 = x182 + x183 * x8
    x185 = x11 * x160 + x48
    x186 = x15 * x185
    x187 = x186 * x5
    x188 = x11 * x164 + x40
    x189 = x15 * (x187 + x188 * x43)
    x190 = x189 + x21 * x83
    x191 = x129 * x185
    x192 = x11 * x183 + x191
    x193 = x11 * x174 + x65
    x194 = x188 * x50
    x195 = x164 * x86
    x196 = x195 + x21 * x88
    x197 = x160 * x86
    x198 = x170 * x9 + x197
    x199 = x188 * x90
    x200 = x199 + x21 * x93
    x201 = x185 * x90
    x202 = x170 * x95 + x201
    x203 = x15 * (x148 + x188 * x80)
    x204 = x203 + x21 * x98
    x205 = x15 * (x11 * x186 + x82)
    x206 = x12 * x170 + x205
    x207 = x100 * x102 - x105 * x8 + x29
    x208 = x111 * x207
    x209 = x112 * x20 + x208
    x210 = x114 * x20 + x209
    x211 = x207 * x5
    x212 = x36 * x8
    x213 = x100 * x104 - x116 * x212 + x60
    x214 = x207 * x30 - x213 * x62
    x215 = x214 * x4
    x216 = x207 * x8
    x217 = 2.0 * x103
    x218 = x216 + x217
    x219 = x129 * x218
    x220 = x130 * x20 + x219
    x221 = x132 * x20 + x220
    x222 = x218 * x67
    x223 = x214 * x8
    x224 = x120 + x223
    x225 = x140 * x207
    x226 = x141 * x20 + x225
    x227 = x142 * x20 + x226
    x228 = x211 * x80
    x229 = x15 * (x124 * x45 + x218 * x71)
    x230 = x146 * x20 + x229
    x231 = x147 * x20 + x230
    x232 = x15 * x80 * (x216 + x217)
    x233 = x151 * x20 + x232
    x234 = x152 * x20 + x233
    x235 = x207 * x96
    x236 = x156 * x20 + x235
    x237 = x157 * x20 + x236
    x238 = x100 * x160 - x163 * x8
    x239 = x111 * x238
    x240 = x112 * x21 + x239
    x241 = x171 * x20 + x240
    x242 = x238 * x5
    x243 = x100 * x162 - x173 * x212
    x244 = x238 * x30 - x243 * x62
    x245 = x161 + x238 * x8
    x246 = x129 * x245
    x247 = x130 * x21 + x246
    x248 = x184 * x20 + x247
    x249 = x176 + x244 * x8
    x250 = x103 + x11 * x238
    x251 = x129 * x250
    x252 = x141 * x21 + x251
    x253 = x192 * x20 + x252
    x254 = x11 * x244 + x119
    x255 = x15 * (x178 + x245 * x71)
    x256 = x146 * x21 + x255
    x257 = x198 * x20 + x256
    x258 = x15 * (x187 + x250 * x71)
    x259 = x151 * x21 + x258
    x260 = x20 * x202 + x259
    x261 = x15 * (x137 + x250 * x80)
    x262 = x156 * x21 + x261
    x263 = x20 * x206 + x262
    x264 = -x11 * x163 + x158 * x160 + x29
    x265 = x111 * x264
    x266 = x169 * x21 + x265
    x267 = x171 * x21 + x266
    x268 = x264 * x5
    x269 = x11 * x36
    x270 = x158 * x162 - x173 * x269 + x60
    x271 = x264 * x30 - x270 * x62
    x272 = x271 * x4
    x273 = x181 * x264
    x274 = x182 * x21 + x273
    x275 = x184 * x21 + x274
    x276 = x268 * x71
    x277 = x11 * x264 + 2.0 * x161
    x278 = x129 * x277
    x279 = x191 * x21 + x278
    x280 = x192 * x21 + x279
    x281 = x277 * x67
    x282 = x11 * x271 + x177
    x283 = x264 * x86
    x284 = x197 * x21 + x283
    x285 = x198 * x21 + x284
    x286 = x277 * x90
    x287 = x201 * x21 + x286
    x288 = x202 * x21 + x287
    x289 = x15 * (x186 * x45 + x277 * x80)
    x290 = x205 * x21 + x289
    x291 = x206 * x21 + x290
    x292 = x100 * x207 + 2.0 * x115 - x212 * x213
    x293 = x292 * x8
    x294 = 3.0 * x211
    x295 = x293 + x294
    x296 = x100 * x238 + x172 - x212 * x243
    x297 = 2.0 * x242
    x298 = x296 * x8 + x297
    x299 = x11 * x296 + x211
    x300 = x250 * x50
    x301 = x100 * x264 - x212 * x270
    x302 = x268 + x301 * x8
    x303 = x11 * x301 + x297
    x304 = x158 * x264 + 2.0 * x172 - x269 * x270
    x305 = x11 * x304 + 3.0 * x268

    # 60 item(s)
    result[0, 0, 0] = numpy.sum(
        x70
        * (
            x0 * x51
            + x0 * x56
            + x0 * (x0 * (x55 + x59 * x6) + x56)
            + x15 * (3.0 * x42 * x67 + x43 * (x64 + x66))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x79
        * (
            x0 * x72
            + x0 * x76
            + x0 * (x0 * (x75 + x78 * x8) + x76)
            + x15 * x71 * (x64 + x66)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x79
        * (
            x0 * x81
            + x0 * x84
            + x0 * (x0 * (x11 * x78 + x83) + x84)
            + x15 * x80 * (x64 + x66)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x70 * (x0 * x87 + x0 * x89 + x0 * (x0 * (x59 * x9 + x88) + x89) + x63 * x86)
    )
    result[0, 0, 4] = numpy.sum(
        x79 * (x0 * x92 + x0 * x94 + x0 * (x0 * (x59 * x95 + x93) + x94) + x63 * x91)
    )
    result[0, 0, 5] = numpy.sum(
        x70 * (x0 * x97 + x0 * x99 + x0 * (x0 * (x12 * x59 + x98) + x99) + x63 * x96)
    )
    result[0, 1, 0] = numpy.sum(
        x121
        * (
            x0 * x110
            + x0 * (x0 * x114 + x110)
            + x15 * (x108 * x50 + x43 * (x118 + x120))
            + x20 * x51
        )
    )
    result[0, 1, 1] = numpy.sum(
        x136
        * (x0 * x128 + x0 * (x0 * x132 + x128) + x15 * (x134 * x43 + x135) + x20 * x72)
    )
    result[0, 1, 2] = numpy.sum(
        x136
        * (x0 * x139 + x0 * (x0 * x142 + x139) + x15 * (x118 * x80 + x143) + x20 * x81)
    )
    result[0, 1, 3] = numpy.sum(
        x121
        * (x0 * x145 + x0 * (x0 * x147 + x145) + x15 * x71 * (x134 + x65) + x20 * x87)
    )
    result[0, 1, 4] = numpy.sum(
        x136
        * (x0 * x150 + x0 * (x0 * x152 + x150) + x15 * (x133 * x80 + x153) + x20 * x92)
    )
    result[0, 1, 5] = numpy.sum(
        x121 * (x0 * x155 + x0 * (x0 * x157 + x155) + x117 * x96 + x20 * x97)
    )
    result[0, 2, 0] = numpy.sum(
        x121
        * (
            x0 * x168
            + x0 * (x0 * x171 + x168)
            + x15 * (x166 * x50 + x43 * (x175 + x177))
            + x21 * x51
        )
    )
    result[0, 2, 1] = numpy.sum(
        x136
        * (x0 * x180 + x0 * (x0 * x184 + x180) + x15 * x71 * (x175 + x177) + x21 * x72)
    )
    result[0, 2, 2] = numpy.sum(
        x136
        * (x0 * x190 + x0 * (x0 * x192 + x190) + x15 * (x193 * x43 + x194) + x21 * x81)
    )
    result[0, 2, 3] = numpy.sum(
        x121 * (x0 * x196 + x0 * (x0 * x198 + x196) + x174 * x86 + x21 * x87)
    )
    result[0, 2, 4] = numpy.sum(
        x136 * (x0 * x200 + x0 * (x0 * x202 + x200) + x193 * x90 + x21 * x92)
    )
    result[0, 2, 5] = numpy.sum(
        x121
        * (x0 * x204 + x0 * (x0 * x206 + x204) + x15 * (x153 + x193 * x80) + x21 * x97)
    )
    result[0, 3, 0] = numpy.sum(
        x121 * (x0 * x210 + x109 * x20 + x110 * x20 + x15 * x43 * (2.0 * x211 + x215))
    )
    result[0, 3, 1] = numpy.sum(
        x136 * (x0 * x221 + x127 * x20 + x128 * x20 + x15 * (x222 + x224 * x43))
    )
    result[0, 3, 2] = numpy.sum(
        x136 * (x0 * x227 + x138 * x20 + x139 * x20 + x15 * (x215 * x80 + x228))
    )
    result[0, 3, 3] = numpy.sum(
        x121 * (x0 * x231 + x144 * x20 + x145 * x20 + x15 * (x135 + x224 * x71))
    )
    result[0, 3, 4] = numpy.sum(
        x136 * (x0 * x234 + x149 * x20 + x15 * (x143 + x223 * x80) + x150 * x20)
    )
    result[0, 3, 5] = numpy.sum(x121 * (x0 * x237 + x154 * x20 + x155 * x20 + x214 * x96))
    result[0, 4, 0] = numpy.sum(
        x136
        * (x0 * x241 + x109 * x21 + x15 * x43 * (2.0 * x242 + x244 * x4) + x168 * x20)
    )
    result[0, 4, 1] = numpy.sum(
        x68 * (x0 * x248 + x127 * x21 + x15 * (x245 * x67 + x249 * x43) + x180 * x20)
    )
    result[0, 4, 2] = numpy.sum(
        x68 * (x0 * x253 + x138 * x21 + x15 * (x250 * x67 + x254 * x43) + x190 * x20)
    )
    result[0, 4, 3] = numpy.sum(
        x136 * (x0 * x257 + x144 * x21 + x15 * x71 * (x176 + x249) + x196 * x20)
    )
    result[0, 4, 4] = numpy.sum(
        x68 * (x0 * x260 + x149 * x21 + x15 * (x188 * x67 + x254 * x71) + x20 * x200)
    )
    result[0, 4, 5] = numpy.sum(
        x136 * (x0 * x263 + x15 * x80 * (x119 + x254) + x154 * x21 + x20 * x204)
    )
    result[0, 5, 0] = numpy.sum(
        x121 * (x0 * x267 + x15 * x43 * (2.0 * x268 + x272) + x167 * x21 + x168 * x21)
    )
    result[0, 5, 1] = numpy.sum(
        x136 * (x0 * x275 + x15 * (x272 * x71 + x276) + x179 * x21 + x180 * x21)
    )
    result[0, 5, 2] = numpy.sum(
        x136 * (x0 * x280 + x15 * (x281 + x282 * x43) + x189 * x21 + x190 * x21)
    )
    result[0, 5, 3] = numpy.sum(x121 * (x0 * x285 + x195 * x21 + x196 * x21 + x271 * x86))
    result[0, 5, 4] = numpy.sum(x136 * (x0 * x288 + x199 * x21 + x200 * x21 + x282 * x90))
    result[0, 5, 5] = numpy.sum(
        x121 * (x0 * x291 + x15 * (x194 + x282 * x80) + x203 * x21 + x204 * x21)
    )
    result[0, 6, 0] = numpy.sum(
        x70 * (x111 * x292 + x20 * x208 + x20 * x209 + x20 * x210)
    )
    result[0, 6, 1] = numpy.sum(
        x79 * (x129 * x295 + x20 * x219 + x20 * x220 + x20 * x221)
    )
    result[0, 6, 2] = numpy.sum(
        x79 * (x140 * x292 + x20 * x225 + x20 * x226 + x20 * x227)
    )
    result[0, 6, 3] = numpy.sum(
        x70 * (x15 * (3.0 * x222 + x295 * x71) + x20 * x229 + x20 * x230 + x20 * x231)
    )
    result[0, 6, 4] = numpy.sum(
        x79 * (x15 * x80 * (x293 + x294) + x20 * x232 + x20 * x233 + x20 * x234)
    )
    result[0, 6, 5] = numpy.sum(x70 * (x20 * x235 + x20 * x236 + x20 * x237 + x292 * x96))
    result[0, 7, 0] = numpy.sum(
        x121 * (x111 * x296 + x20 * x240 + x20 * x241 + x208 * x21)
    )
    result[0, 7, 1] = numpy.sum(
        x136 * (x129 * x298 + x20 * x247 + x20 * x248 + x21 * x219)
    )
    result[0, 7, 2] = numpy.sum(
        x136 * (x129 * x299 + x20 * x252 + x20 * x253 + x21 * x225)
    )
    result[0, 7, 3] = numpy.sum(
        x121 * (x15 * (x245 * x50 + x298 * x71) + x20 * x256 + x20 * x257 + x21 * x229)
    )
    result[0, 7, 4] = numpy.sum(
        x136 * (x15 * (x299 * x71 + x300) + x20 * x259 + x20 * x260 + x21 * x232)
    )
    result[0, 7, 5] = numpy.sum(
        x121 * (x15 * (x228 + x299 * x80) + x20 * x262 + x20 * x263 + x21 * x235)
    )
    result[0, 8, 0] = numpy.sum(
        x121 * (x111 * x301 + x20 * x267 + x21 * x239 + x21 * x240)
    )
    result[0, 8, 1] = numpy.sum(
        x136 * (x129 * x302 + x20 * x275 + x21 * x246 + x21 * x247)
    )
    result[0, 8, 2] = numpy.sum(
        x136 * (x129 * x303 + x20 * x280 + x21 * x251 + x21 * x252)
    )
    result[0, 8, 3] = numpy.sum(
        x121 * (x15 * (x276 + x302 * x71) + x20 * x285 + x21 * x255 + x21 * x256)
    )
    result[0, 8, 4] = numpy.sum(
        x136 * (x15 * (x281 + x303 * x71) + x20 * x288 + x21 * x258 + x21 * x259)
    )
    result[0, 8, 5] = numpy.sum(
        x121 * (x15 * (x300 + x303 * x80) + x20 * x291 + x21 * x261 + x21 * x262)
    )
    result[0, 9, 0] = numpy.sum(
        x70 * (x111 * x304 + x21 * x265 + x21 * x266 + x21 * x267)
    )
    result[0, 9, 1] = numpy.sum(
        x79 * (x181 * x304 + x21 * x273 + x21 * x274 + x21 * x275)
    )
    result[0, 9, 2] = numpy.sum(
        x79 * (x129 * x305 + x21 * x278 + x21 * x279 + x21 * x280)
    )
    result[0, 9, 3] = numpy.sum(x70 * (x21 * x283 + x21 * x284 + x21 * x285 + x304 * x86))
    result[0, 9, 4] = numpy.sum(x79 * (x21 * x286 + x21 * x287 + x21 * x288 + x305 * x90))
    result[0, 9, 5] = numpy.sum(
        x70 * (x15 * (3.0 * x281 + x305 * x80) + x21 * x289 + x21 * x290 + x21 * x291)
    )
    return result


def int3c2e3d_sph_033(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sf|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 10, 10), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = 0.5 / (ax + bx)
    x6 = x4**2
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x2 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x1
    x14 = x13 ** (-1.0)
    x15 = x1 * x14
    x16 = cx * x15 * (x12 + x6 + x9)
    x17 = boys(4, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = x19 * x22
    x24 = x2 * x23
    x25 = 2.0 * x18 * x24
    x26 = x17 * x25
    x27 = cx ** (-1.0)
    x28 = x13 ** (-0.5)
    x29 = boys(3, x16)
    x30 = x5 * (2.0 * x19 * x2 * x22 * x27 * x28 * x29 - x26)
    x31 = -x3 - A[0]
    x32 = -2.0 * x19 * x2 * x22 * x27 * x28 * x29 * x31 + x26 * x4
    x33 = -x32
    x34 = boys(5, x16)
    x35 = x25 * x34
    x36 = 2.0 * x17 * x19 * x2 * x22 * x27 * x28 * x31 - x35 * x4
    x37 = cx * x14
    x38 = x36 * x37
    x39 = x30 + x31 * x33 - x38 * x4
    x40 = x39 * x4
    x41 = x33 * x5
    x42 = 2.0 * x41
    x43 = x40 + x42
    x44 = x15 * x4
    x45 = x33 * x4
    x46 = 2.0 * x5
    x47 = x27 * x29
    x48 = x46 * x47
    x49 = x24 * x28 * x48
    x50 = x45 + x49
    x51 = x15 * x46
    x52 = x43 * x44 + x50 * x51
    x53 = x23 * x48
    x54 = x18 * x53
    x55 = x4 * x54 + x44 * x50
    x56 = x15 * (x44 * x52 + x51 * x55)
    x57 = x1 * x13 ** (-2.5) * x53
    x58 = x15 * (x44 * x55 + x57 * x6)
    x59 = x0 * x58 + x56
    x60 = x4**3
    x61 = x1**2
    x62 = 2.0 * x13 ** (-3.5) * x23 * x47 * x61
    x63 = x0 * x62
    x64 = x5 * (2.0 * x17 * x19 * x2 * x22 * x27 * x28 - x35)
    x65 = x25 * boys(6, x16)
    x66 = x37 * x4
    x67 = (
        x31 * x39
        - x46 * (x32 + x38)
        - x66
        * (
            x31 * x36
            + x64
            - x66 * (2.0 * x19 * x2 * x22 * x27 * x28 * x31 * x34 - x4 * x65)
        )
    )
    x68 = x4 * x67
    x69 = x39 * x5
    x70 = 3.0 * x69
    x71 = x15 * x5
    x72 = 3.0 * x71
    x73 = da * db * dc
    x74 = 0.06666666666666667 * x73
    x75 = x15 * x8
    x76 = x75 * (x40 + x42)
    x77 = x54 * x8
    x78 = x45 * x75 + x77
    x79 = x15 * (x44 * x76 + x51 * x78)
    x80 = x4 * x8
    x81 = x15 * (x44 * x78 + x57 * x80)
    x82 = x0 * x81 + x79
    x83 = x6 * x63
    x84 = 2.23606797749979 * x74
    x85 = x11 * x15
    x86 = x85 * (x40 + x42)
    x87 = x11 * x54
    x88 = x45 * x85 + x87
    x89 = x15 * (x44 * x86 + x51 * x88)
    x90 = x11 * x57
    x91 = x15 * (x4 * x90 + x44 * x88)
    x92 = x0 * x91 + x89
    x93 = x61 / x13**2
    x94 = x9 * x93
    x95 = x15 * x94 * (x40 + x42)
    x96 = x57 * x9
    x97 = x15 * (x45 * x94 + x96)
    x98 = x0 * x97 + x95
    x99 = x4 * x63
    x100 = x8 * x93
    x101 = x100 * x11
    x102 = x101 * x15 * (x40 + x42)
    x103 = x8 * x90
    x104 = x15 * (x101 * x45 + x103)
    x105 = x0 * x104 + x102
    x106 = x11 * x80
    x107 = 3.872983346207417 * x74
    x108 = x12 * x93
    x109 = x108 * x15 * (x40 + x42)
    x110 = x12 * x57
    x111 = x15 * (x108 * x45 + x110)
    x112 = x0 * x111 + x109
    x113 = x8**3
    x114 = x1**3 / x13**3
    x115 = x113 * x114
    x116 = x115 * x39
    x117 = x115 * x33
    x118 = x0 * x117 + x116
    x119 = x114 * x9
    x120 = x11 * x119
    x121 = x120 * x39
    x122 = x120 * x33
    x123 = x0 * x122 + x121
    x124 = x11 * x9
    x125 = x114 * x12
    x126 = x125 * x8
    x127 = x126 * x39
    x128 = x126 * x33
    x129 = x0 * x128 + x127
    x130 = x12 * x8
    x131 = x11**3
    x132 = x114 * x131
    x133 = x132 * x39
    x134 = x132 * x33
    x135 = x0 * x134 + x133
    x136 = -x7 - A[1]
    x137 = -2.0 * x136 * x19 * x2 * x22 * x27 * x28 * x29 + x26 * x8
    x138 = -x137
    x139 = x138 * x5
    x140 = 2.0 * x136 * x17 * x19 * x2 * x22 * x27 * x28 - x35 * x8
    x141 = x140 * x37
    x142 = x138 * x31 - x141 * x4
    x143 = x142 * x4
    x144 = x139 + x143
    x145 = x44 * (x139 + x144)
    x146 = x6 * x93
    x147 = x15 * (x139 * x146 + x145 * x44)
    x148 = x147 + x20 * x58
    x149 = x114 * x60
    x150 = x138 * x149
    x151 = x20 * x62
    x152 = x150 + x151 * x60
    x153 = -x5 * (x137 + x141)
    x154 = 2.0 * x136 * x19 * x2 * x22 * x27 * x28 * x34 - x65 * x8
    x155 = x142 * x31 + x153 - x66 * (x140 * x31 - x154 * x66)
    x156 = x155 * x4
    x157 = x142 * x5
    x158 = 2.0 * x157
    x159 = x138 * x8
    x160 = x159 + x49
    x161 = x15 * x160
    x162 = x142 * x8
    x163 = x162 + x41
    x164 = x161 * x5 + x163 * x44
    x165 = x4 * x93
    x166 = x165 * x5
    x167 = x15 * (x160 * x166 + x164 * x44)
    x168 = x167 + x20 * x81
    x169 = x114 * x6
    x170 = x160 * x169
    x171 = x151 * x6
    x172 = x170 + x171 * x8
    x173 = x155 * x8
    x174 = x173 + x69
    x175 = x163 * x51
    x176 = 0.3333333333333333 * x73
    x177 = x139 * x85
    x178 = x143 * x85 + x177
    x179 = x11 * x165
    x180 = x15 * (x139 * x179 + x178 * x44)
    x181 = x180 + x20 * x91
    x182 = x11 * x169
    x183 = x138 * x182
    x184 = x11 * x171 + x183
    x185 = x158 * x85
    x186 = x161 * x8 + x77
    x187 = x75 * (x163 + x41)
    x188 = x15 * (x186 * x71 + x187 * x44)
    x189 = x188 + x20 * x97
    x190 = x165 * x186
    x191 = x151 * x4
    x192 = x190 + x191 * x9
    x193 = x75 * (x174 + x69)
    x194 = x187 * x51
    x195 = x159 * x85 + x87
    x196 = x41 * x85
    x197 = x162 * x85 + x196
    x198 = x15 * (x195 * x71 + x197 * x44)
    x199 = x104 * x20 + x198
    x200 = x165 * x195
    x201 = x106 * x151 + x200
    x202 = x69 * x85
    x203 = x173 * x85 + x202
    x204 = x197 * x51
    x205 = 1.732050807568877 * x176
    x206 = x108 * x139
    x207 = x15 * (x108 * x143 + x206)
    x208 = x111 * x20 + x207
    x209 = x125 * x4
    x210 = x138 * x209
    x211 = x12 * x191 + x210
    x212 = x108 * x158
    x213 = x15 * (x187 * x75 + x41 * x94)
    x214 = x117 * x20 + x213
    x215 = x15 * (x186 * x75 + x96)
    x216 = x113 * x151 + x215
    x217 = x15 * (x101 * x41 + x197 * x75)
    x218 = x122 * x20 + x217
    x219 = x15 * (x103 + x195 * x75)
    x220 = x124 * x151 + x219
    x221 = x108 * x41
    x222 = x15 * (x108 * x162 + x221)
    x223 = x128 * x20 + x222
    x224 = x15 * (x108 * x159 + x110)
    x225 = x130 * x151 + x224
    x226 = x108 * x69
    x227 = x132 * x142
    x228 = x134 * x20 + x227
    x229 = x132 * x138
    x230 = x131 * x151 + x229
    x231 = -x10 - A[2]
    x232 = x11 * x26 - 2.0 * x19 * x2 * x22 * x231 * x27 * x28 * x29
    x233 = -x232
    x234 = x233 * x5
    x235 = -x11 * x35 + 2.0 * x17 * x19 * x2 * x22 * x231 * x27 * x28
    x236 = x235 * x37
    x237 = x233 * x31 - x236 * x4
    x238 = x237 * x4
    x239 = x234 + x238
    x240 = x44 * (x234 + x239)
    x241 = x15 * (x146 * x234 + x240 * x44)
    x242 = x21 * x58 + x241
    x243 = x149 * x233
    x244 = x21 * x62
    x245 = x243 + x244 * x60
    x246 = -x5 * (x232 + x236)
    x247 = -x11 * x65 + 2.0 * x19 * x2 * x22 * x231 * x27 * x28 * x34
    x248 = x237 * x31 + x246 - x66 * (x235 * x31 - x247 * x66)
    x249 = x248 * x4
    x250 = x237 * x5
    x251 = 2.0 * x250
    x252 = x234 * x75
    x253 = x238 * x75 + x252
    x254 = x165 * x8
    x255 = x15 * (x234 * x254 + x253 * x44)
    x256 = x21 * x81 + x255
    x257 = x169 * x8
    x258 = x233 * x257
    x259 = x244 * x6
    x260 = x258 + x259 * x8
    x261 = x11 * x233 + x49
    x262 = x261 * x71
    x263 = x11 * x237 + x41
    x264 = x262 + x263 * x44
    x265 = x15 * (x166 * x261 + x264 * x44)
    x266 = x21 * x91 + x265
    x267 = x169 * x261
    x268 = x11 * x259 + x267
    x269 = x11 * x248 + x69
    x270 = x263 * x51
    x271 = x234 * x94
    x272 = x15 * (x238 * x94 + x271)
    x273 = x21 * x97 + x272
    x274 = x119 * x4
    x275 = x233 * x274
    x276 = x244 * x4
    x277 = x275 + x276 * x9
    x278 = x100 * x5
    x279 = x261 * x278
    x280 = x15 * (x254 * x263 + x279)
    x281 = x104 * x21 + x280
    x282 = x114 * x80
    x283 = x261 * x282
    x284 = x106 * x244 + x283
    x285 = x261 * x85 + x87
    x286 = x285 * x71
    x287 = x196 + x263 * x85
    x288 = x15 * (x286 + x287 * x44)
    x289 = x111 * x21 + x288
    x290 = x165 * x285
    x291 = x12 * x276 + x290
    x292 = x202 + x269 * x85
    x293 = x287 * x51
    x294 = x115 * x237
    x295 = x117 * x21 + x294
    x296 = x115 * x233
    x297 = x113 * x244 + x296
    x298 = x119 * x263
    x299 = x122 * x21 + x298
    x300 = x119 * x261
    x301 = x124 * x244 + x300
    x302 = x100 * x287
    x303 = x128 * x21 + x302
    x304 = x100 * x285
    x305 = x130 * x244 + x304
    x306 = x15 * (x221 + x287 * x85)
    x307 = x134 * x21 + x306
    x308 = x15 * (x110 + x285 * x85)
    x309 = x131 * x244 + x308
    x310 = x136 * x138 - x141 * x8 + x30
    x311 = x149 * x310
    x312 = x150 * x20 + x311
    x313 = x152 * x20 + x312
    x314 = x310 * x5
    x315 = x37 * x8
    x316 = x136 * x140 - x154 * x315 + x64
    x317 = x31 * x310 - x316 * x66
    x318 = x317 * x4
    x319 = x310 * x8
    x320 = 2.0 * x139
    x321 = x319 + x320
    x322 = x169 * x321
    x323 = x170 * x20 + x322
    x324 = x172 * x20 + x323
    x325 = x321 * x71
    x326 = x317 * x8
    x327 = x158 + x326
    x328 = x182 * x310
    x329 = x183 * x20 + x328
    x330 = x184 * x20 + x329
    x331 = x314 * x85
    x332 = x161 * x46 + x321 * x75
    x333 = x165 * x332
    x334 = x190 * x20 + x333
    x335 = x192 * x20 + x334
    x336 = x332 * x71
    x337 = x175 + x327 * x75
    x338 = x85 * (x319 + x320)
    x339 = x165 * x338
    x340 = x20 * x200 + x339
    x341 = x20 * x201 + x340
    x342 = x338 * x71
    x343 = x185 + x326 * x85
    x344 = x209 * x310
    x345 = x20 * x210 + x344
    x346 = x20 * x211 + x345
    x347 = x108 * x314
    x348 = x15 * (x186 * x51 + x332 * x75)
    x349 = x20 * x215 + x348
    x350 = x20 * x216 + x349
    x351 = x15 * (x195 * x51 + x338 * x75)
    x352 = x20 * x219 + x351
    x353 = x20 * x220 + x352
    x354 = x108 * x15 * (x319 + x320)
    x355 = x20 * x224 + x354
    x356 = x20 * x225 + x355
    x357 = x132 * x310
    x358 = x20 * x229 + x357
    x359 = x20 * x230 + x358
    x360 = x136 * x233 - x236 * x8
    x361 = x149 * x360
    x362 = x150 * x21 + x361
    x363 = x20 * x245 + x362
    x364 = x360 * x5
    x365 = x136 * x235 - x247 * x315
    x366 = x31 * x360 - x365 * x66
    x367 = x234 + x360 * x8
    x368 = x169 * x367
    x369 = x170 * x21 + x368
    x370 = x20 * x260 + x369
    x371 = x250 + x366 * x8
    x372 = x11 * x360 + x139
    x373 = x169 * x372
    x374 = x183 * x21 + x373
    x375 = x20 * x268 + x374
    x376 = x11 * x366 + x157
    x377 = x252 + x367 * x75
    x378 = x165 * x377
    x379 = x190 * x21 + x378
    x380 = x20 * x277 + x379
    x381 = x75 * (x250 + x371)
    x382 = x262 + x372 * x75
    x383 = x165 * x382
    x384 = x200 * x21 + x383
    x385 = x20 * x284 + x384
    x386 = x263 * x71 + x376 * x75
    x387 = x177 + x372 * x85
    x388 = x165 * x387
    x389 = x21 * x210 + x388
    x390 = x20 * x291 + x389
    x391 = x85 * (x157 + x376)
    x392 = x15 * (x271 + x377 * x75)
    x393 = x21 * x215 + x392
    x394 = x20 * x297 + x393
    x395 = x15 * (x279 + x382 * x75)
    x396 = x21 * x219 + x395
    x397 = x20 * x301 + x396
    x398 = x15 * (x286 + x387 * x75)
    x399 = x21 * x224 + x398
    x400 = x20 * x305 + x399
    x401 = x15 * (x206 + x387 * x85)
    x402 = x21 * x229 + x401
    x403 = x20 * x309 + x402
    x404 = -x11 * x236 + x231 * x233 + x30
    x405 = x149 * x404
    x406 = x21 * x243 + x405
    x407 = x21 * x245 + x406
    x408 = x404 * x5
    x409 = x11 * x37
    x410 = x231 * x235 - x247 * x409 + x64
    x411 = x31 * x404 - x410 * x66
    x412 = x4 * x411
    x413 = x257 * x404
    x414 = x21 * x258 + x413
    x415 = x21 * x260 + x414
    x416 = x408 * x75
    x417 = x11 * x404 + 2.0 * x234
    x418 = x169 * x417
    x419 = x21 * x267 + x418
    x420 = x21 * x268 + x419
    x421 = x417 * x71
    x422 = x11 * x411 + x251
    x423 = x274 * x404
    x424 = x21 * x275 + x423
    x425 = x21 * x277 + x424
    x426 = x408 * x94
    x427 = x282 * x417
    x428 = x21 * x283 + x427
    x429 = x21 * x284 + x428
    x430 = x278 * x417
    x431 = x261 * x51 + x417 * x85
    x432 = x165 * x431
    x433 = x21 * x290 + x432
    x434 = x21 * x291 + x433
    x435 = x431 * x71
    x436 = x270 + x422 * x85
    x437 = x115 * x404
    x438 = x21 * x296 + x437
    x439 = x21 * x297 + x438
    x440 = x119 * x417
    x441 = x21 * x300 + x440
    x442 = x21 * x301 + x441
    x443 = x100 * x431
    x444 = x21 * x304 + x443
    x445 = x21 * x305 + x444
    x446 = x15 * (x285 * x51 + x431 * x85)
    x447 = x21 * x308 + x446
    x448 = x21 * x309 + x447
    x449 = x136 * x310 + 2.0 * x153 - x315 * x316
    x450 = x449 * x8
    x451 = 3.0 * x314
    x452 = x450 + x451
    x453 = 3.0 * x325 + x452 * x75
    x454 = x85 * (x450 + x451)
    x455 = x136 * x360 + x246 - x315 * x365
    x456 = 2.0 * x364
    x457 = x455 * x8 + x456
    x458 = x11 * x455 + x314
    x459 = x367 * x51 + x457 * x75
    x460 = x372 * x51
    x461 = x458 * x75 + x460
    x462 = x331 + x458 * x85
    x463 = x387 * x51
    x464 = x136 * x404 - x315 * x410
    x465 = x408 + x464 * x8
    x466 = x11 * x464 + x456
    x467 = x416 + x465 * x75
    x468 = x421 + x466 * x75
    x469 = x460 + x466 * x85
    x470 = x231 * x404 + 2.0 * x246 - x409 * x410
    x471 = x11 * x470 + 3.0 * x408
    x472 = 3.0 * x421 + x471 * x85

    # 100 item(s)
    result[0, 0, 0] = numpy.sum(
        x74
        * (
            x0 * x56
            + x0 * x59
            + x0 * (x0 * (x58 + x60 * x63) + x59)
            + x15 * (x44 * (x43 * x72 + x44 * (x68 + x70)) + x52 * x72)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x84
        * (
            x0 * x79
            + x0 * x82
            + x0 * (x0 * (x8 * x83 + x81) + x82)
            + x15 * (x44 * x75 * (x68 + x70) + x72 * x76)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x84
        * (
            x0 * x89
            + x0 * x92
            + x0 * (x0 * (x11 * x83 + x91) + x92)
            + x15 * (x44 * x85 * (x68 + x70) + x72 * x86)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x84
        * (
            x0 * x95
            + x0 * x98
            + x0 * (x0 * (x9 * x99 + x97) + x98)
            + x15 * x94 * (x68 + x70)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x107
        * (
            x0 * x102
            + x0 * x105
            + x0 * (x0 * (x104 + x106 * x63) + x105)
            + x101 * x15 * (x68 + x70)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x84
        * (
            x0 * x109
            + x0 * x112
            + x0 * (x0 * (x111 + x12 * x99) + x112)
            + x108 * x15 * (x68 + x70)
        )
    )
    result[0, 0, 6] = numpy.sum(
        x74
        * (x0 * x116 + x0 * x118 + x0 * (x0 * (x113 * x63 + x117) + x118) + x115 * x67)
    )
    result[0, 0, 7] = numpy.sum(
        x84
        * (x0 * x121 + x0 * x123 + x0 * (x0 * (x122 + x124 * x63) + x123) + x120 * x67)
    )
    result[0, 0, 8] = numpy.sum(
        x84
        * (x0 * x127 + x0 * x129 + x0 * (x0 * (x128 + x130 * x63) + x129) + x126 * x67)
    )
    result[0, 0, 9] = numpy.sum(
        x74
        * (x0 * x133 + x0 * x135 + x0 * (x0 * (x131 * x63 + x134) + x135) + x132 * x67)
    )
    result[0, 1, 0] = numpy.sum(
        x84
        * (
            x0 * x148
            + x0 * (x0 * x152 + x148)
            + x15 * (x145 * x51 + x44 * (x144 * x51 + x44 * (x156 + x158)))
            + x20 * x56
        )
    )
    result[0, 1, 1] = numpy.sum(
        x176
        * (
            x0 * x168
            + x0 * (x0 * x172 + x168)
            + x15 * (x164 * x51 + x44 * (x174 * x44 + x175))
            + x20 * x79
        )
    )
    result[0, 1, 2] = numpy.sum(
        x176
        * (
            x0 * x181
            + x0 * (x0 * x184 + x181)
            + x15 * (x178 * x51 + x44 * (x156 * x85 + x185))
            + x20 * x89
        )
    )
    result[0, 1, 3] = numpy.sum(
        x176
        * (x0 * x189 + x0 * (x0 * x192 + x189) + x15 * (x193 * x44 + x194) + x20 * x95)
    )
    result[0, 1, 4] = numpy.sum(
        x205
        * (x0 * x199 + x0 * (x0 * x201 + x199) + x102 * x20 + x15 * (x203 * x44 + x204))
    )
    result[0, 1, 5] = numpy.sum(
        x176
        * (x0 * x208 + x0 * (x0 * x211 + x208) + x109 * x20 + x15 * (x108 * x156 + x212))
    )
    result[0, 1, 6] = numpy.sum(
        x84
        * (
            x0 * x214
            + x0 * (x0 * x216 + x214)
            + x116 * x20
            + x15 * (x193 * x75 + x69 * x94)
        )
    )
    result[0, 1, 7] = numpy.sum(
        x176
        * (
            x0 * x218
            + x0 * (x0 * x220 + x218)
            + x121 * x20
            + x15 * (x101 * x69 + x203 * x75)
        )
    )
    result[0, 1, 8] = numpy.sum(
        x176
        * (x0 * x223 + x0 * (x0 * x225 + x223) + x127 * x20 + x15 * (x108 * x173 + x226))
    )
    result[0, 1, 9] = numpy.sum(
        x84 * (x0 * x228 + x0 * (x0 * x230 + x228) + x132 * x155 + x133 * x20)
    )
    result[0, 2, 0] = numpy.sum(
        x84
        * (
            x0 * x242
            + x0 * (x0 * x245 + x242)
            + x15 * (x240 * x51 + x44 * (x239 * x51 + x44 * (x249 + x251)))
            + x21 * x56
        )
    )
    result[0, 2, 1] = numpy.sum(
        x176
        * (
            x0 * x256
            + x0 * (x0 * x260 + x256)
            + x15 * (x253 * x51 + x44 * x75 * (x249 + x251))
            + x21 * x79
        )
    )
    result[0, 2, 2] = numpy.sum(
        x176
        * (
            x0 * x266
            + x0 * (x0 * x268 + x266)
            + x15 * (x264 * x51 + x44 * (x269 * x44 + x270))
            + x21 * x89
        )
    )
    result[0, 2, 3] = numpy.sum(
        x176
        * (x0 * x273 + x0 * (x0 * x277 + x273) + x15 * x94 * (x249 + x251) + x21 * x95)
    )
    result[0, 2, 4] = numpy.sum(
        x205
        * (
            x0 * x281
            + x0 * (x0 * x284 + x281)
            + x102 * x21
            + x15 * (x100 * x263 * x46 + x254 * x269)
        )
    )
    result[0, 2, 5] = numpy.sum(
        x176
        * (x0 * x289 + x0 * (x0 * x291 + x289) + x109 * x21 + x15 * (x292 * x44 + x293))
    )
    result[0, 2, 6] = numpy.sum(
        x84 * (x0 * x295 + x0 * (x0 * x297 + x295) + x115 * x248 + x116 * x21)
    )
    result[0, 2, 7] = numpy.sum(
        x176 * (x0 * x299 + x0 * (x0 * x301 + x299) + x119 * x269 + x121 * x21)
    )
    result[0, 2, 8] = numpy.sum(
        x176 * (x0 * x303 + x0 * (x0 * x305 + x303) + x100 * x292 + x127 * x21)
    )
    result[0, 2, 9] = numpy.sum(
        x84
        * (x0 * x307 + x0 * (x0 * x309 + x307) + x133 * x21 + x15 * (x226 + x292 * x85))
    )
    result[0, 3, 0] = numpy.sum(
        x84
        * (
            x0 * x313
            + x147 * x20
            + x148 * x20
            + x15 * (x146 * x314 + x44**2 * (2.0 * x314 + x318))
        )
    )
    result[0, 3, 1] = numpy.sum(
        x176
        * (
            x0 * x324
            + x15 * (x166 * x321 + x44 * (x325 + x327 * x44))
            + x167 * x20
            + x168 * x20
        )
    )
    result[0, 3, 2] = numpy.sum(
        x176
        * (
            x0 * x330
            + x15 * (x179 * x314 + x44 * (x318 * x85 + x331))
            + x180 * x20
            + x181 * x20
        )
    )
    result[0, 3, 3] = numpy.sum(
        x176 * (x0 * x335 + x15 * (x336 + x337 * x44) + x188 * x20 + x189 * x20)
    )
    result[0, 3, 4] = numpy.sum(
        x205 * (x0 * x341 + x15 * (x342 + x343 * x44) + x198 * x20 + x199 * x20)
    )
    result[0, 3, 5] = numpy.sum(
        x176 * (x0 * x346 + x15 * (x108 * x318 + x347) + x20 * x207 + x20 * x208)
    )
    result[0, 3, 6] = numpy.sum(
        x84 * (x0 * x350 + x15 * (x194 + x337 * x75) + x20 * x213 + x20 * x214)
    )
    result[0, 3, 7] = numpy.sum(
        x176 * (x0 * x353 + x15 * (x204 + x343 * x75) + x20 * x217 + x20 * x218)
    )
    result[0, 3, 8] = numpy.sum(
        x176 * (x0 * x356 + x15 * (x108 * x326 + x212) + x20 * x222 + x20 * x223)
    )
    result[0, 3, 9] = numpy.sum(x84 * (x0 * x359 + x132 * x317 + x20 * x227 + x20 * x228))
    result[0, 4, 0] = numpy.sum(
        x107
        * (
            x0 * x363
            + x147 * x21
            + x15 * (x146 * x364 + x44**2 * (2.0 * x364 + x366 * x4))
            + x20 * x242
        )
    )
    result[0, 4, 1] = numpy.sum(
        x205
        * (
            x0 * x370
            + x15 * (x166 * x367 + x44 * (x367 * x71 + x371 * x44))
            + x167 * x21
            + x20 * x256
        )
    )
    result[0, 4, 2] = numpy.sum(
        x205
        * (
            x0 * x375
            + x15 * (x166 * x372 + x44 * (x372 * x71 + x376 * x44))
            + x180 * x21
            + x20 * x266
        )
    )
    result[0, 4, 3] = numpy.sum(
        x205 * (x0 * x380 + x15 * (x377 * x71 + x381 * x44) + x188 * x21 + x20 * x273)
    )
    result[0, 4, 4] = numpy.sum(
        x73 * (x0 * x385 + x15 * (x382 * x71 + x386 * x44) + x198 * x21 + x20 * x281)
    )
    result[0, 4, 5] = numpy.sum(
        x205 * (x0 * x390 + x15 * (x387 * x71 + x391 * x44) + x20 * x289 + x207 * x21)
    )
    result[0, 4, 6] = numpy.sum(
        x107 * (x0 * x394 + x15 * (x250 * x94 + x381 * x75) + x20 * x295 + x21 * x213)
    )
    result[0, 4, 7] = numpy.sum(
        x205 * (x0 * x397 + x15 * (x263 * x278 + x386 * x75) + x20 * x299 + x21 * x217)
    )
    result[0, 4, 8] = numpy.sum(
        x205 * (x0 * x400 + x15 * (x287 * x71 + x391 * x75) + x20 * x303 + x21 * x222)
    )
    result[0, 4, 9] = numpy.sum(
        x107 * (x0 * x403 + x15 * (x108 * x157 + x391 * x85) + x20 * x307 + x21 * x227)
    )
    result[0, 5, 0] = numpy.sum(
        x84
        * (
            x0 * x407
            + x15 * (x146 * x408 + x44**2 * (2.0 * x408 + x412))
            + x21 * x241
            + x21 * x242
        )
    )
    result[0, 5, 1] = numpy.sum(
        x176
        * (
            x0 * x415
            + x15 * (x254 * x408 + x44 * (x412 * x75 + x416))
            + x21 * x255
            + x21 * x256
        )
    )
    result[0, 5, 2] = numpy.sum(
        x176
        * (
            x0 * x420
            + x15 * (x166 * x417 + x44 * (x421 + x422 * x44))
            + x21 * x265
            + x21 * x266
        )
    )
    result[0, 5, 3] = numpy.sum(
        x176 * (x0 * x425 + x15 * (x412 * x94 + x426) + x21 * x272 + x21 * x273)
    )
    result[0, 5, 4] = numpy.sum(
        x205 * (x0 * x429 + x15 * (x254 * x422 + x430) + x21 * x280 + x21 * x281)
    )
    result[0, 5, 5] = numpy.sum(
        x176 * (x0 * x434 + x15 * (x435 + x436 * x44) + x21 * x288 + x21 * x289)
    )
    result[0, 5, 6] = numpy.sum(x84 * (x0 * x439 + x115 * x411 + x21 * x294 + x21 * x295))
    result[0, 5, 7] = numpy.sum(
        x176 * (x0 * x442 + x119 * x422 + x21 * x298 + x21 * x299)
    )
    result[0, 5, 8] = numpy.sum(
        x176 * (x0 * x445 + x100 * x436 + x21 * x302 + x21 * x303)
    )
    result[0, 5, 9] = numpy.sum(
        x84 * (x0 * x448 + x15 * (x293 + x436 * x85) + x21 * x306 + x21 * x307)
    )
    result[0, 6, 0] = numpy.sum(
        x74 * (x149 * x449 + x20 * x311 + x20 * x312 + x20 * x313)
    )
    result[0, 6, 1] = numpy.sum(
        x84 * (x169 * x452 + x20 * x322 + x20 * x323 + x20 * x324)
    )
    result[0, 6, 2] = numpy.sum(
        x84 * (x182 * x449 + x20 * x328 + x20 * x329 + x20 * x330)
    )
    result[0, 6, 3] = numpy.sum(
        x84 * (x165 * x453 + x20 * x333 + x20 * x334 + x20 * x335)
    )
    result[0, 6, 4] = numpy.sum(
        x107 * (x165 * x454 + x20 * x339 + x20 * x340 + x20 * x341)
    )
    result[0, 6, 5] = numpy.sum(
        x84 * (x20 * x344 + x20 * x345 + x20 * x346 + x209 * x449)
    )
    result[0, 6, 6] = numpy.sum(
        x74 * (x15 * (3.0 * x336 + x453 * x75) + x20 * x348 + x20 * x349 + x20 * x350)
    )
    result[0, 6, 7] = numpy.sum(
        x84 * (x15 * (3.0 * x342 + x454 * x75) + x20 * x351 + x20 * x352 + x20 * x353)
    )
    result[0, 6, 8] = numpy.sum(
        x84 * (x108 * x15 * (x450 + x451) + x20 * x354 + x20 * x355 + x20 * x356)
    )
    result[0, 6, 9] = numpy.sum(
        x74 * (x132 * x449 + x20 * x357 + x20 * x358 + x20 * x359)
    )
    result[0, 7, 0] = numpy.sum(
        x84 * (x149 * x455 + x20 * x362 + x20 * x363 + x21 * x311)
    )
    result[0, 7, 1] = numpy.sum(
        x176 * (x169 * x457 + x20 * x369 + x20 * x370 + x21 * x322)
    )
    result[0, 7, 2] = numpy.sum(
        x176 * (x169 * x458 + x20 * x374 + x20 * x375 + x21 * x328)
    )
    result[0, 7, 3] = numpy.sum(
        x176 * (x165 * x459 + x20 * x379 + x20 * x380 + x21 * x333)
    )
    result[0, 7, 4] = numpy.sum(
        x205 * (x165 * x461 + x20 * x384 + x20 * x385 + x21 * x339)
    )
    result[0, 7, 5] = numpy.sum(
        x176 * (x165 * x462 + x20 * x389 + x20 * x390 + x21 * x344)
    )
    result[0, 7, 6] = numpy.sum(
        x84 * (x15 * (x377 * x51 + x459 * x75) + x20 * x393 + x20 * x394 + x21 * x348)
    )
    result[0, 7, 7] = numpy.sum(
        x176 * (x15 * (x382 * x51 + x461 * x75) + x20 * x396 + x20 * x397 + x21 * x351)
    )
    result[0, 7, 8] = numpy.sum(
        x176 * (x15 * (x462 * x75 + x463) + x20 * x399 + x20 * x400 + x21 * x354)
    )
    result[0, 7, 9] = numpy.sum(
        x84 * (x15 * (x347 + x462 * x85) + x20 * x402 + x20 * x403 + x21 * x357)
    )
    result[0, 8, 0] = numpy.sum(
        x84 * (x149 * x464 + x20 * x407 + x21 * x361 + x21 * x362)
    )
    result[0, 8, 1] = numpy.sum(
        x176 * (x169 * x465 + x20 * x415 + x21 * x368 + x21 * x369)
    )
    result[0, 8, 2] = numpy.sum(
        x176 * (x169 * x466 + x20 * x420 + x21 * x373 + x21 * x374)
    )
    result[0, 8, 3] = numpy.sum(
        x176 * (x165 * x467 + x20 * x425 + x21 * x378 + x21 * x379)
    )
    result[0, 8, 4] = numpy.sum(
        x205 * (x165 * x468 + x20 * x429 + x21 * x383 + x21 * x384)
    )
    result[0, 8, 5] = numpy.sum(
        x176 * (x165 * x469 + x20 * x434 + x21 * x388 + x21 * x389)
    )
    result[0, 8, 6] = numpy.sum(
        x84 * (x15 * (x426 + x467 * x75) + x20 * x439 + x21 * x392 + x21 * x393)
    )
    result[0, 8, 7] = numpy.sum(
        x176 * (x15 * (x430 + x468 * x75) + x20 * x442 + x21 * x395 + x21 * x396)
    )
    result[0, 8, 8] = numpy.sum(
        x176 * (x15 * (x435 + x469 * x75) + x20 * x445 + x21 * x398 + x21 * x399)
    )
    result[0, 8, 9] = numpy.sum(
        x84 * (x15 * (x463 + x469 * x85) + x20 * x448 + x21 * x401 + x21 * x402)
    )
    result[0, 9, 0] = numpy.sum(
        x74 * (x149 * x470 + x21 * x405 + x21 * x406 + x21 * x407)
    )
    result[0, 9, 1] = numpy.sum(
        x84 * (x21 * x413 + x21 * x414 + x21 * x415 + x257 * x470)
    )
    result[0, 9, 2] = numpy.sum(
        x84 * (x169 * x471 + x21 * x418 + x21 * x419 + x21 * x420)
    )
    result[0, 9, 3] = numpy.sum(
        x84 * (x21 * x423 + x21 * x424 + x21 * x425 + x274 * x470)
    )
    result[0, 9, 4] = numpy.sum(
        x107 * (x21 * x427 + x21 * x428 + x21 * x429 + x282 * x471)
    )
    result[0, 9, 5] = numpy.sum(
        x84 * (x165 * x472 + x21 * x432 + x21 * x433 + x21 * x434)
    )
    result[0, 9, 6] = numpy.sum(
        x74 * (x115 * x470 + x21 * x437 + x21 * x438 + x21 * x439)
    )
    result[0, 9, 7] = numpy.sum(
        x84 * (x119 * x471 + x21 * x440 + x21 * x441 + x21 * x442)
    )
    result[0, 9, 8] = numpy.sum(
        x84 * (x100 * x472 + x21 * x443 + x21 * x444 + x21 * x445)
    )
    result[0, 9, 9] = numpy.sum(
        x74 * (x15 * (3.0 * x435 + x472 * x85) + x21 * x446 + x21 * x447 + x21 * x448)
    )
    return result


def int3c2e3d_sph_034(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (sf|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((1, 10, 15), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = 0.5 / (ax + bx)
    x6 = x4**2
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x2 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x1
    x14 = x13 ** (-1.0)
    x15 = x1 * x14
    x16 = cx * x15 * (x12 + x6 + x9)
    x17 = boys(5, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = x19 * x22
    x24 = x2 * x23
    x25 = 2.0 * x18 * x24
    x26 = x17 * x25
    x27 = cx ** (-1.0)
    x28 = x13 ** (-0.5)
    x29 = boys(4, x16)
    x30 = x5 * (2.0 * x19 * x2 * x22 * x27 * x28 * x29 - x26)
    x31 = -x3 - A[0]
    x32 = -2.0 * x19 * x2 * x22 * x27 * x28 * x29 * x31 + x26 * x4
    x33 = -x32
    x34 = boys(6, x16)
    x35 = x25 * x34
    x36 = 2.0 * x17 * x19 * x2 * x22 * x27 * x28 * x31 - x35 * x4
    x37 = cx * x14
    x38 = x36 * x37
    x39 = x30 + x31 * x33 - x38 * x4
    x40 = x39 * x4
    x41 = x33 * x5
    x42 = 2.0 * x41
    x43 = x40 + x42
    x44 = x15 * x4
    x45 = x33 * x4
    x46 = 2.0 * x5
    x47 = x27 * x29
    x48 = x46 * x47
    x49 = x24 * x28 * x48
    x50 = x45 + x49
    x51 = x15 * x46
    x52 = x43 * x44 + x50 * x51
    x53 = x23 * x48
    x54 = x18 * x53
    x55 = x4 * x54 + x44 * x50
    x56 = x44 * x52 + x51 * x55
    x57 = x53 * x6
    x58 = x1 * x13 ** (-2.5)
    x59 = x44 * x55 + x57 * x58
    x60 = x15 * (x44 * x56 + x51 * x59)
    x61 = x4**3
    x62 = x1**2
    x63 = x13 ** (-3.5) * x62
    x64 = x53 * x63
    x65 = x15 * (x44 * x59 + x61 * x64)
    x66 = x0 * x65 + x60
    x67 = x4**4
    x68 = x1**3
    x69 = 2.0 * x13 ** (-4.5) * x23 * x47 * x68
    x70 = x0 * x69
    x71 = x5 * (2.0 * x17 * x19 * x2 * x22 * x27 * x28 - x35)
    x72 = x25 * boys(7, x16)
    x73 = x37 * x4
    x74 = (
        x31 * x39
        - x46 * (x32 + x38)
        - x73
        * (
            x31 * x36
            + x71
            - x73 * (2.0 * x19 * x2 * x22 * x27 * x28 * x31 * x34 - x4 * x72)
        )
    )
    x75 = x4 * x74
    x76 = x39 * x5
    x77 = 3.0 * x76
    x78 = x15 * x5
    x79 = 3.0 * x78
    x80 = da * db * dc
    x81 = 0.009523809523809524 * x80
    x82 = 2.645751311064591 * x81
    x83 = x15 * x8
    x84 = x83 * (x40 + x42)
    x85 = x54 * x8
    x86 = x45 * x83 + x85
    x87 = x44 * x84 + x51 * x86
    x88 = x53 * x58
    x89 = x4 * x88
    x90 = x44 * x86 + x8 * x89
    x91 = x15 * (x44 * x87 + x51 * x90)
    x92 = x57 * x63
    x93 = x15 * (x44 * x90 + x8 * x92)
    x94 = x0 * x93 + x91
    x95 = x61 * x70
    x96 = 0.06666666666666667 * x80
    x97 = x11 * x15
    x98 = x97 * (x40 + x42)
    x99 = x11 * x54
    x100 = x45 * x97 + x99
    x101 = x100 * x51 + x44 * x98
    x102 = x100 * x44 + x11 * x89
    x103 = x15 * (x101 * x44 + x102 * x51)
    x104 = x15 * (x102 * x44 + x11 * x92)
    x105 = x0 * x104 + x103
    x106 = x62 / x13**2
    x107 = x106 * x9
    x108 = x107 * (x40 + x42)
    x109 = x88 * x9
    x110 = x107 * x45 + x109
    x111 = x15 * (x108 * x44 + x110 * x51)
    x112 = x4 * x9
    x113 = x15 * (x110 * x44 + x112 * x64)
    x114 = x0 * x113 + x111
    x115 = x6 * x9
    x116 = 3.872983346207417
    x117 = 0.02222222222222222 * x116 * x80
    x118 = x106 * x8
    x119 = x11 * x118
    x120 = x119 * (x40 + x42)
    x121 = x11 * x8
    x122 = x121 * x88
    x123 = x119 * x45 + x122
    x124 = x15 * (x120 * x44 + x123 * x51)
    x125 = x15 * (x121 * x4 * x64 + x123 * x44)
    x126 = x0 * x125 + x124
    x127 = x121 * x6
    x128 = 2.23606797749979 * x96
    x129 = x106 * x12
    x130 = x129 * (x40 + x42)
    x131 = x12 * x88
    x132 = x129 * x45 + x131
    x133 = x15 * (x130 * x44 + x132 * x51)
    x134 = x12 * x4
    x135 = x15 * (x132 * x44 + x134 * x64)
    x136 = x0 * x135 + x133
    x137 = x12 * x6
    x138 = x8**3
    x139 = x68 / x13**3
    x140 = x138 * x139
    x141 = x140 * x15 * (x40 + x42)
    x142 = x138 * x64
    x143 = x15 * (x140 * x45 + x142)
    x144 = x0 * x143 + x141
    x145 = x138 * x70
    x146 = x139 * x9
    x147 = x11 * x146
    x148 = x147 * x15 * (x40 + x42)
    x149 = x11 * x64 * x9
    x150 = x15 * (x147 * x45 + x149)
    x151 = x0 * x150 + x148
    x152 = x11 * x112
    x153 = x139 * x8
    x154 = x12 * x153
    x155 = x15 * x154 * (x40 + x42)
    x156 = x12 * x64 * x8
    x157 = x15 * (x154 * x45 + x156)
    x158 = x0 * x157 + x155
    x159 = x134 * x8
    x160 = x11**3
    x161 = x139 * x160
    x162 = x15 * x161 * (x40 + x42)
    x163 = x160 * x64
    x164 = x15 * (x161 * x45 + x163)
    x165 = x0 * x164 + x162
    x166 = x160 * x4
    x167 = x8**4
    x168 = x1**4 / x13**4
    x169 = x167 * x168
    x170 = x169 * x39
    x171 = x169 * x33
    x172 = x0 * x171 + x170
    x173 = x138 * x168
    x174 = x11 * x173
    x175 = x174 * x39
    x176 = x174 * x33
    x177 = x0 * x176 + x175
    x178 = x168 * x39
    x179 = x12 * x9
    x180 = x178 * x179
    x181 = x168 * x179
    x182 = x181 * x33
    x183 = x0 * x182 + x180
    x184 = x160 * x8
    x185 = x178 * x184
    x186 = x168 * x184
    x187 = x186 * x33
    x188 = x0 * x187 + x185
    x189 = x11**4
    x190 = x168 * x189
    x191 = x190 * x39
    x192 = x190 * x33
    x193 = x0 * x192 + x191
    x194 = -x7 - A[1]
    x195 = -2.0 * x19 * x194 * x2 * x22 * x27 * x28 * x29 + x26 * x8
    x196 = -x195
    x197 = x196 * x5
    x198 = 2.0 * x17 * x19 * x194 * x2 * x22 * x27 * x28 - x35 * x8
    x199 = x198 * x37
    x200 = x196 * x31 - x199 * x4
    x201 = x200 * x4
    x202 = x197 + x201
    x203 = x44 * (x197 + x202)
    x204 = x106 * x6
    x205 = x197 * x204 + x203 * x44
    x206 = x139 * x61
    x207 = x15 * (x197 * x206 + x205 * x44)
    x208 = x20 * x65 + x207
    x209 = x168 * x67
    x210 = x196 * x209
    x211 = x20 * x69
    x212 = x210 + x211 * x67
    x213 = -x5 * (x195 + x199)
    x214 = 2.0 * x19 * x194 * x2 * x22 * x27 * x28 * x34 - x72 * x8
    x215 = x200 * x31 + x213 - x73 * (x198 * x31 - x214 * x73)
    x216 = x215 * x4
    x217 = x200 * x5
    x218 = 2.0 * x217
    x219 = 5.916079783099616 * x81
    x220 = x196 * x8
    x221 = x220 + x49
    x222 = x15 * x221
    x223 = x200 * x8
    x224 = x223 + x41
    x225 = x222 * x5 + x224 * x44
    x226 = x106 * x4
    x227 = x221 * x5
    x228 = x225 * x44 + x226 * x227
    x229 = x139 * x6
    x230 = x15 * (x227 * x229 + x228 * x44)
    x231 = x20 * x93 + x230
    x232 = x168 * x61
    x233 = x221 * x232
    x234 = x211 * x61
    x235 = x233 + x234 * x8
    x236 = x215 * x8
    x237 = x236 + x76
    x238 = x224 * x51
    x239 = x197 * x97
    x240 = x201 * x97 + x239
    x241 = x11 * x197
    x242 = x226 * x241 + x240 * x44
    x243 = x15 * (x229 * x241 + x242 * x44)
    x244 = x104 * x20 + x243
    x245 = x11 * x232
    x246 = x196 * x245
    x247 = x11 * x234 + x246
    x248 = x218 * x97
    x249 = x222 * x8 + x85
    x250 = x83 * (x224 + x41)
    x251 = x249 * x78 + x250 * x44
    x252 = x226 * x5
    x253 = x15 * (x249 * x252 + x251 * x44)
    x254 = x113 * x20 + x253
    x255 = x229 * x249
    x256 = x115 * x211 + x255
    x257 = x83 * (x237 + x76)
    x258 = x250 * x51
    x259 = 1.732050807568877
    x260 = 0.1111111111111111 * x259 * x80
    x261 = x220 * x97 + x99
    x262 = x41 * x97
    x263 = x223 * x97 + x262
    x264 = x261 * x78 + x263 * x44
    x265 = x15 * (x252 * x261 + x264 * x44)
    x266 = x125 * x20 + x265
    x267 = x229 * x261
    x268 = x127 * x211 + x267
    x269 = x76 * x97
    x270 = x236 * x97 + x269
    x271 = x263 * x51
    x272 = 0.3333333333333333 * x80
    x273 = x129 * x197
    x274 = x129 * x201 + x273
    x275 = x134 * x139
    x276 = x15 * (x197 * x275 + x274 * x44)
    x277 = x135 * x20 + x276
    x278 = x168 * x196
    x279 = x137 * x278
    x280 = x137 * x211 + x279
    x281 = x129 * x218
    x282 = x109 + x249 * x83
    x283 = x107 * x41 + x250 * x83
    x284 = x15 * (x282 * x78 + x283 * x44)
    x285 = x143 * x20 + x284
    x286 = x226 * x282
    x287 = x138 * x211
    x288 = x286 + x287 * x4
    x289 = x107 * x76 + x257 * x83
    x290 = x283 * x51
    x291 = x122 + x261 * x83
    x292 = x119 * x41 + x263 * x83
    x293 = x15 * (x291 * x78 + x292 * x44)
    x294 = x150 * x20 + x293
    x295 = x226 * x291
    x296 = x152 * x211 + x295
    x297 = x119 * x76 + x270 * x83
    x298 = x292 * x51
    x299 = x129 * x220 + x131
    x300 = x129 * x41
    x301 = x129 * x223 + x300
    x302 = x15 * (x299 * x78 + x301 * x44)
    x303 = x157 * x20 + x302
    x304 = x226 * x299
    x305 = x159 * x211 + x304
    x306 = x129 * x76
    x307 = x129 * x236 + x306
    x308 = x301 * x51
    x309 = x161 * x197
    x310 = x15 * (x161 * x201 + x309)
    x311 = x164 * x20 + x310
    x312 = x166 * x278
    x313 = x166 * x211 + x312
    x314 = x161 * x218
    x315 = x15 * (x140 * x41 + x283 * x83)
    x316 = x171 * x20 + x315
    x317 = x15 * (x142 + x282 * x83)
    x318 = x167 * x211 + x317
    x319 = x15 * (x147 * x41 + x292 * x83)
    x320 = x176 * x20 + x319
    x321 = x15 * (x149 + x291 * x83)
    x322 = x11 * x287 + x321
    x323 = x15 * (x154 * x41 + x301 * x83)
    x324 = x182 * x20 + x323
    x325 = x15 * (x156 + x299 * x83)
    x326 = x179 * x211 + x325
    x327 = x161 * x41
    x328 = x15 * (x161 * x223 + x327)
    x329 = x187 * x20 + x328
    x330 = x15 * (x161 * x220 + x163)
    x331 = x184 * x211 + x330
    x332 = x161 * x76
    x333 = x190 * x200
    x334 = x192 * x20 + x333
    x335 = x190 * x196
    x336 = x189 * x211 + x335
    x337 = -x10 - A[2]
    x338 = x11 * x26 - 2.0 * x19 * x2 * x22 * x27 * x28 * x29 * x337
    x339 = -x338
    x340 = x339 * x5
    x341 = -x11 * x35 + 2.0 * x17 * x19 * x2 * x22 * x27 * x28 * x337
    x342 = x341 * x37
    x343 = x31 * x339 - x342 * x4
    x344 = x343 * x4
    x345 = x340 + x344
    x346 = x44 * (x340 + x345)
    x347 = x204 * x340 + x346 * x44
    x348 = x15 * (x206 * x340 + x347 * x44)
    x349 = x21 * x65 + x348
    x350 = x209 * x339
    x351 = x21 * x69
    x352 = x350 + x351 * x67
    x353 = -x5 * (x338 + x342)
    x354 = -x11 * x72 + 2.0 * x19 * x2 * x22 * x27 * x28 * x337 * x34
    x355 = x31 * x343 + x353 - x73 * (x31 * x341 - x354 * x73)
    x356 = x355 * x4
    x357 = x343 * x5
    x358 = 2.0 * x357
    x359 = x340 * x83
    x360 = x344 * x83 + x359
    x361 = x226 * x8
    x362 = x340 * x361 + x360 * x44
    x363 = x229 * x8
    x364 = x15 * (x340 * x363 + x362 * x44)
    x365 = x21 * x93 + x364
    x366 = x232 * x8
    x367 = x339 * x366
    x368 = x351 * x61
    x369 = x367 + x368 * x8
    x370 = x11 * x339 + x49
    x371 = x370 * x78
    x372 = x11 * x343 + x41
    x373 = x371 + x372 * x44
    x374 = x252 * x370 + x373 * x44
    x375 = x370 * x5
    x376 = x15 * (x229 * x375 + x374 * x44)
    x377 = x104 * x21 + x376
    x378 = x232 * x370
    x379 = x11 * x368 + x378
    x380 = x11 * x355 + x76
    x381 = x372 * x51
    x382 = x107 * x340
    x383 = x107 * x344 + x382
    x384 = x146 * x4
    x385 = x15 * (x340 * x384 + x383 * x44)
    x386 = x113 * x21 + x385
    x387 = x168 * x6
    x388 = x387 * x9
    x389 = x339 * x388
    x390 = x115 * x351 + x389
    x391 = x118 * x375
    x392 = x361 * x372 + x391
    x393 = x153 * x4
    x394 = x15 * (x375 * x393 + x392 * x44)
    x395 = x125 * x21 + x394
    x396 = x387 * x8
    x397 = x370 * x396
    x398 = x127 * x351 + x397
    x399 = x372 * x46
    x400 = x370 * x97 + x99
    x401 = x400 * x78
    x402 = x262 + x372 * x97
    x403 = x401 + x402 * x44
    x404 = x15 * (x252 * x400 + x403 * x44)
    x405 = x135 * x21 + x404
    x406 = x229 * x400
    x407 = x137 * x351 + x406
    x408 = x269 + x380 * x97
    x409 = x402 * x51
    x410 = x140 * x340
    x411 = x15 * (x140 * x344 + x410)
    x412 = x143 * x21 + x411
    x413 = x173 * x4
    x414 = x339 * x413
    x415 = x138 * x351
    x416 = x4 * x415 + x414
    x417 = x146 * x375
    x418 = x15 * (x372 * x384 + x417)
    x419 = x150 * x21 + x418
    x420 = x112 * x168
    x421 = x370 * x420
    x422 = x152 * x351 + x421
    x423 = x118 * x5
    x424 = x400 * x423
    x425 = x15 * (x361 * x402 + x424)
    x426 = x157 * x21 + x425
    x427 = x393 * x400
    x428 = x159 * x351 + x427
    x429 = x131 + x400 * x97
    x430 = x429 * x78
    x431 = x300 + x402 * x97
    x432 = x15 * (x430 + x431 * x44)
    x433 = x164 * x21 + x432
    x434 = x226 * x429
    x435 = x166 * x351 + x434
    x436 = x306 + x408 * x97
    x437 = x431 * x51
    x438 = x169 * x343
    x439 = x171 * x21 + x438
    x440 = x169 * x339
    x441 = x167 * x351 + x440
    x442 = x173 * x372
    x443 = x176 * x21 + x442
    x444 = x173 * x370
    x445 = x11 * x415 + x444
    x446 = x146 * x402
    x447 = x182 * x21 + x446
    x448 = x146 * x400
    x449 = x179 * x351 + x448
    x450 = x118 * x431
    x451 = x187 * x21 + x450
    x452 = x118 * x429
    x453 = x184 * x351 + x452
    x454 = x15 * (x327 + x431 * x97)
    x455 = x192 * x21 + x454
    x456 = x15 * (x163 + x429 * x97)
    x457 = x189 * x351 + x456
    x458 = x194 * x196 - x199 * x8 + x30
    x459 = x209 * x458
    x460 = x20 * x210 + x459
    x461 = x20 * x212 + x460
    x462 = x458 * x5
    x463 = x37 * x8
    x464 = x194 * x198 - x214 * x463 + x71
    x465 = x31 * x458 - x464 * x73
    x466 = x4 * x465
    x467 = x458 * x8
    x468 = 2.0 * x197
    x469 = x467 + x468
    x470 = x232 * x469
    x471 = x20 * x233 + x470
    x472 = x20 * x235 + x471
    x473 = x469 * x78
    x474 = x465 * x8
    x475 = x218 + x474
    x476 = x229 * x5
    x477 = x245 * x458
    x478 = x20 * x246 + x477
    x479 = x20 * x247 + x478
    x480 = x462 * x97
    x481 = x11 * x462
    x482 = x222 * x46 + x469 * x83
    x483 = x229 * x482
    x484 = x20 * x255 + x483
    x485 = x20 * x256 + x484
    x486 = x482 * x78
    x487 = x238 + x475 * x83
    x488 = x97 * (x467 + x468)
    x489 = x229 * x488
    x490 = x20 * x267 + x489
    x491 = x20 * x268 + x490
    x492 = x488 * x78
    x493 = x248 + x474 * x97
    x494 = x168 * x458
    x495 = x137 * x494
    x496 = x20 * x279 + x495
    x497 = x20 * x280 + x496
    x498 = x129 * x462
    x499 = x249 * x51 + x482 * x83
    x500 = x226 * x499
    x501 = x20 * x286 + x500
    x502 = x20 * x288 + x501
    x503 = x499 * x78
    x504 = x258 + x487 * x83
    x505 = x261 * x51 + x488 * x83
    x506 = x226 * x505
    x507 = x20 * x295 + x506
    x508 = x20 * x296 + x507
    x509 = x505 * x78
    x510 = x271 + x493 * x83
    x511 = x129 * (x467 + x468)
    x512 = x226 * x511
    x513 = x20 * x304 + x512
    x514 = x20 * x305 + x513
    x515 = x511 * x78
    x516 = x129 * x474 + x281
    x517 = x166 * x494
    x518 = x20 * x312 + x517
    x519 = x20 * x313 + x518
    x520 = x161 * x462
    x521 = x15 * (x282 * x51 + x499 * x83)
    x522 = x20 * x317 + x521
    x523 = x20 * x318 + x522
    x524 = x15 * (x291 * x51 + x505 * x83)
    x525 = x20 * x321 + x524
    x526 = x20 * x322 + x525
    x527 = x15 * (x299 * x51 + x511 * x83)
    x528 = x20 * x325 + x527
    x529 = x20 * x326 + x528
    x530 = x15 * x161 * (x467 + x468)
    x531 = x20 * x330 + x530
    x532 = x20 * x331 + x531
    x533 = x190 * x458
    x534 = x20 * x335 + x533
    x535 = x20 * x336 + x534
    x536 = x194 * x339 - x342 * x8
    x537 = x209 * x536
    x538 = x21 * x210 + x537
    x539 = x20 * x352 + x538
    x540 = x5 * x536
    x541 = x194 * x341 - x354 * x463
    x542 = x31 * x536 - x541 * x73
    x543 = 10.2469507659596 * x81
    x544 = x340 + x536 * x8
    x545 = x232 * x544
    x546 = x21 * x233 + x545
    x547 = x20 * x369 + x546
    x548 = x357 + x542 * x8
    x549 = x116 * x96
    x550 = x11 * x536 + x197
    x551 = x232 * x550
    x552 = x21 * x246 + x551
    x553 = x20 * x379 + x552
    x554 = x11 * x542 + x217
    x555 = x359 + x544 * x83
    x556 = x229 * x555
    x557 = x21 * x255 + x556
    x558 = x20 * x390 + x557
    x559 = x83 * (x357 + x548)
    x560 = x371 + x550 * x83
    x561 = x229 * x560
    x562 = x21 * x267 + x561
    x563 = x20 * x398 + x562
    x564 = x372 * x78 + x554 * x83
    x565 = x259 * x272
    x566 = x239 + x550 * x97
    x567 = x229 * x566
    x568 = x21 * x279 + x567
    x569 = x20 * x407 + x568
    x570 = x97 * (x217 + x554)
    x571 = x382 + x555 * x83
    x572 = x226 * x571
    x573 = x21 * x286 + x572
    x574 = x20 * x416 + x573
    x575 = x107 * x357 + x559 * x83
    x576 = x391 + x560 * x83
    x577 = x226 * x576
    x578 = x21 * x295 + x577
    x579 = x20 * x422 + x578
    x580 = x372 * x423 + x564 * x83
    x581 = x401 + x566 * x83
    x582 = x226 * x581
    x583 = x21 * x304 + x582
    x584 = x20 * x428 + x583
    x585 = x402 * x78 + x570 * x83
    x586 = x273 + x566 * x97
    x587 = x226 * x586
    x588 = x21 * x312 + x587
    x589 = x20 * x435 + x588
    x590 = x129 * x217 + x570 * x97
    x591 = x15 * (x410 + x571 * x83)
    x592 = x21 * x317 + x591
    x593 = x20 * x441 + x592
    x594 = x15 * (x417 + x576 * x83)
    x595 = x21 * x321 + x594
    x596 = x20 * x445 + x595
    x597 = x146 * x5
    x598 = x15 * (x424 + x581 * x83)
    x599 = x21 * x325 + x598
    x600 = x20 * x449 + x599
    x601 = x15 * (x430 + x586 * x83)
    x602 = x21 * x330 + x601
    x603 = x20 * x453 + x602
    x604 = x15 * (x309 + x586 * x97)
    x605 = x21 * x335 + x604
    x606 = x20 * x457 + x605
    x607 = -x11 * x342 + x30 + x337 * x339
    x608 = x209 * x607
    x609 = x21 * x350 + x608
    x610 = x21 * x352 + x609
    x611 = x5 * x607
    x612 = x11 * x37
    x613 = x337 * x341 - x354 * x612 + x71
    x614 = x31 * x607 - x613 * x73
    x615 = x4 * x614
    x616 = x366 * x607
    x617 = x21 * x367 + x616
    x618 = x21 * x369 + x617
    x619 = x611 * x83
    x620 = x11 * x607 + 2.0 * x340
    x621 = x232 * x620
    x622 = x21 * x378 + x621
    x623 = x21 * x379 + x622
    x624 = x620 * x78
    x625 = x11 * x614 + x358
    x626 = x388 * x607
    x627 = x21 * x389 + x626
    x628 = x21 * x390 + x627
    x629 = x107 * x611
    x630 = x396 * x620
    x631 = x21 * x397 + x630
    x632 = x21 * x398 + x631
    x633 = x423 * x620
    x634 = x370 * x51 + x620 * x97
    x635 = x229 * x634
    x636 = x21 * x406 + x635
    x637 = x21 * x407 + x636
    x638 = x634 * x78
    x639 = x381 + x625 * x97
    x640 = x413 * x607
    x641 = x21 * x414 + x640
    x642 = x21 * x416 + x641
    x643 = x140 * x611
    x644 = x420 * x620
    x645 = x21 * x421 + x644
    x646 = x21 * x422 + x645
    x647 = x597 * x620
    x648 = x393 * x634
    x649 = x21 * x427 + x648
    x650 = x21 * x428 + x649
    x651 = x423 * x634
    x652 = x400 * x51 + x634 * x97
    x653 = x226 * x652
    x654 = x21 * x434 + x653
    x655 = x21 * x435 + x654
    x656 = x652 * x78
    x657 = x409 + x639 * x97
    x658 = x169 * x607
    x659 = x21 * x440 + x658
    x660 = x21 * x441 + x659
    x661 = x173 * x620
    x662 = x21 * x444 + x661
    x663 = x21 * x445 + x662
    x664 = x146 * x634
    x665 = x21 * x448 + x664
    x666 = x21 * x449 + x665
    x667 = x118 * x652
    x668 = x21 * x452 + x667
    x669 = x21 * x453 + x668
    x670 = x15 * (x429 * x51 + x652 * x97)
    x671 = x21 * x456 + x670
    x672 = x21 * x457 + x671
    x673 = x194 * x458 + 2.0 * x213 - x463 * x464
    x674 = x673 * x8
    x675 = 3.0 * x462
    x676 = x674 + x675
    x677 = 3.0 * x473 + x676 * x83
    x678 = x97 * (x674 + x675)
    x679 = x168 * x673
    x680 = 3.0 * x486 + x677 * x83
    x681 = 3.0 * x492 + x678 * x83
    x682 = x129 * (x674 + x675)
    x683 = x194 * x536 + x353 - x463 * x541
    x684 = 2.0 * x540
    x685 = x683 * x8 + x684
    x686 = x11 * x683 + x462
    x687 = x51 * x544 + x685 * x83
    x688 = x51 * x550
    x689 = x686 * x83 + x688
    x690 = x480 + x686 * x97
    x691 = x51 * x555 + x687 * x83
    x692 = x51 * x560 + x689 * x83
    x693 = x51 * x566
    x694 = x690 * x83 + x693
    x695 = x498 + x690 * x97
    x696 = x51 * x586
    x697 = x194 * x607 - x463 * x613
    x698 = x611 + x697 * x8
    x699 = x11 * x697 + x684
    x700 = x619 + x698 * x83
    x701 = x624 + x699 * x83
    x702 = x688 + x699 * x97
    x703 = x629 + x700 * x83
    x704 = x633 + x701 * x83
    x705 = x638 + x702 * x83
    x706 = x693 + x702 * x97
    x707 = x337 * x607 + 2.0 * x353 - x612 * x613
    x708 = x11 * x707 + 3.0 * x611
    x709 = 3.0 * x624 + x708 * x97
    x710 = 3.0 * x638 + x709 * x97

    # 150 item(s)
    result[0, 0, 0] = numpy.sum(
        x82
        * (
            x0 * x60
            + x0 * x66
            + x0 * (x0 * (x65 + x67 * x70) + x66)
            + x15
            * (x44 * (x44 * (x43 * x79 + x44 * (x75 + x77)) + x52 * x79) + x56 * x79)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x96
        * (
            x0 * x91
            + x0 * x94
            + x0 * (x0 * (x8 * x95 + x93) + x94)
            + x15 * (x44 * (x44 * x83 * (x75 + x77) + x79 * x84) + x79 * x87)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x96
        * (
            x0 * x103
            + x0 * x105
            + x0 * (x0 * (x104 + x11 * x95) + x105)
            + x15 * (x101 * x79 + x44 * (x44 * x97 * (x75 + x77) + x79 * x98))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x117
        * (
            x0 * x111
            + x0 * x114
            + x0 * (x0 * (x113 + x115 * x70) + x114)
            + x15 * (x107 * x44 * (x75 + x77) + x108 * x79)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x128
        * (
            x0 * x124
            + x0 * x126
            + x0 * (x0 * (x125 + x127 * x70) + x126)
            + x15 * (x119 * x44 * (x75 + x77) + x120 * x79)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x117
        * (
            x0 * x133
            + x0 * x136
            + x0 * (x0 * (x135 + x137 * x70) + x136)
            + x15 * (x129 * x44 * (x75 + x77) + x130 * x79)
        )
    )
    result[0, 0, 6] = numpy.sum(
        x96
        * (
            x0 * x141
            + x0 * x144
            + x0 * (x0 * (x143 + x145 * x4) + x144)
            + x140 * x15 * (x75 + x77)
        )
    )
    result[0, 0, 7] = numpy.sum(
        x128
        * (
            x0 * x148
            + x0 * x151
            + x0 * (x0 * (x150 + x152 * x70) + x151)
            + x147 * x15 * (x75 + x77)
        )
    )
    result[0, 0, 8] = numpy.sum(
        x128
        * (
            x0 * x155
            + x0 * x158
            + x0 * (x0 * (x157 + x159 * x70) + x158)
            + x15 * x154 * (x75 + x77)
        )
    )
    result[0, 0, 9] = numpy.sum(
        x96
        * (
            x0 * x162
            + x0 * x165
            + x0 * (x0 * (x164 + x166 * x70) + x165)
            + x15 * x161 * (x75 + x77)
        )
    )
    result[0, 0, 10] = numpy.sum(
        x82
        * (x0 * x170 + x0 * x172 + x0 * (x0 * (x167 * x70 + x171) + x172) + x169 * x74)
    )
    result[0, 0, 11] = numpy.sum(
        x96
        * (x0 * x175 + x0 * x177 + x0 * (x0 * (x11 * x145 + x176) + x177) + x174 * x74)
    )
    result[0, 0, 12] = numpy.sum(
        x117
        * (x0 * x180 + x0 * x183 + x0 * (x0 * (x179 * x70 + x182) + x183) + x181 * x74)
    )
    result[0, 0, 13] = numpy.sum(
        x96
        * (x0 * x185 + x0 * x188 + x0 * (x0 * (x184 * x70 + x187) + x188) + x186 * x74)
    )
    result[0, 0, 14] = numpy.sum(
        x82
        * (x0 * x191 + x0 * x193 + x0 * (x0 * (x189 * x70 + x192) + x193) + x190 * x74)
    )
    result[0, 1, 0] = numpy.sum(
        x219
        * (
            x0 * x208
            + x0 * (x0 * x212 + x208)
            + x15
            * (x205 * x51 + x44 * (x203 * x51 + x44 * (x202 * x51 + x44 * (x216 + x218))))
            + x20 * x60
        )
    )
    result[0, 1, 1] = numpy.sum(
        x128
        * (
            x0 * x231
            + x0 * (x0 * x235 + x231)
            + x15 * (x228 * x51 + x44 * (x225 * x51 + x44 * (x237 * x44 + x238)))
            + x20 * x91
        )
    )
    result[0, 1, 2] = numpy.sum(
        x128
        * (
            x0 * x244
            + x0 * (x0 * x247 + x244)
            + x103 * x20
            + x15 * (x242 * x51 + x44 * (x240 * x51 + x44 * (x216 * x97 + x248)))
        )
    )
    result[0, 1, 3] = numpy.sum(
        x260
        * (
            x0 * x254
            + x0 * (x0 * x256 + x254)
            + x111 * x20
            + x15 * (x251 * x51 + x44 * (x257 * x44 + x258))
        )
    )
    result[0, 1, 4] = numpy.sum(
        x272
        * (
            x0 * x266
            + x0 * (x0 * x268 + x266)
            + x124 * x20
            + x15 * (x264 * x51 + x44 * (x270 * x44 + x271))
        )
    )
    result[0, 1, 5] = numpy.sum(
        x260
        * (
            x0 * x277
            + x0 * (x0 * x280 + x277)
            + x133 * x20
            + x15 * (x274 * x51 + x44 * (x129 * x216 + x281))
        )
    )
    result[0, 1, 6] = numpy.sum(
        x128
        * (x0 * x285 + x0 * (x0 * x288 + x285) + x141 * x20 + x15 * (x289 * x44 + x290))
    )
    result[0, 1, 7] = numpy.sum(
        x272
        * (x0 * x294 + x0 * (x0 * x296 + x294) + x148 * x20 + x15 * (x297 * x44 + x298))
    )
    result[0, 1, 8] = numpy.sum(
        x272
        * (x0 * x303 + x0 * (x0 * x305 + x303) + x15 * (x307 * x44 + x308) + x155 * x20)
    )
    result[0, 1, 9] = numpy.sum(
        x128
        * (x0 * x311 + x0 * (x0 * x313 + x311) + x15 * (x161 * x216 + x314) + x162 * x20)
    )
    result[0, 1, 10] = numpy.sum(
        x219
        * (
            x0 * x316
            + x0 * (x0 * x318 + x316)
            + x15 * (x140 * x76 + x289 * x83)
            + x170 * x20
        )
    )
    result[0, 1, 11] = numpy.sum(
        x128
        * (
            x0 * x320
            + x0 * (x0 * x322 + x320)
            + x15 * (x147 * x76 + x297 * x83)
            + x175 * x20
        )
    )
    result[0, 1, 12] = numpy.sum(
        x260
        * (
            x0 * x324
            + x0 * (x0 * x326 + x324)
            + x15 * (x154 * x76 + x307 * x83)
            + x180 * x20
        )
    )
    result[0, 1, 13] = numpy.sum(
        x128
        * (x0 * x329 + x0 * (x0 * x331 + x329) + x15 * (x161 * x236 + x332) + x185 * x20)
    )
    result[0, 1, 14] = numpy.sum(
        x219 * (x0 * x334 + x0 * (x0 * x336 + x334) + x190 * x215 + x191 * x20)
    )
    result[0, 2, 0] = numpy.sum(
        x219
        * (
            x0 * x349
            + x0 * (x0 * x352 + x349)
            + x15
            * (x347 * x51 + x44 * (x346 * x51 + x44 * (x345 * x51 + x44 * (x356 + x358))))
            + x21 * x60
        )
    )
    result[0, 2, 1] = numpy.sum(
        x128
        * (
            x0 * x365
            + x0 * (x0 * x369 + x365)
            + x15 * (x362 * x51 + x44 * (x360 * x51 + x44 * x83 * (x356 + x358)))
            + x21 * x91
        )
    )
    result[0, 2, 2] = numpy.sum(
        x128
        * (
            x0 * x377
            + x0 * (x0 * x379 + x377)
            + x103 * x21
            + x15 * (x374 * x51 + x44 * (x373 * x51 + x44 * (x380 * x44 + x381)))
        )
    )
    result[0, 2, 3] = numpy.sum(
        x260
        * (
            x0 * x386
            + x0 * (x0 * x390 + x386)
            + x111 * x21
            + x15 * (x107 * x44 * (x356 + x358) + x383 * x51)
        )
    )
    result[0, 2, 4] = numpy.sum(
        x272
        * (
            x0 * x395
            + x0 * (x0 * x398 + x395)
            + x124 * x21
            + x15 * (x392 * x51 + x44 * (x118 * x399 + x361 * x380))
        )
    )
    result[0, 2, 5] = numpy.sum(
        x260
        * (
            x0 * x405
            + x0 * (x0 * x407 + x405)
            + x133 * x21
            + x15 * (x403 * x51 + x44 * (x408 * x44 + x409))
        )
    )
    result[0, 2, 6] = numpy.sum(
        x128
        * (x0 * x412 + x0 * (x0 * x416 + x412) + x140 * x15 * (x356 + x358) + x141 * x21)
    )
    result[0, 2, 7] = numpy.sum(
        x272
        * (
            x0 * x419
            + x0 * (x0 * x422 + x419)
            + x148 * x21
            + x15 * (x146 * x399 + x380 * x384)
        )
    )
    result[0, 2, 8] = numpy.sum(
        x272
        * (
            x0 * x426
            + x0 * (x0 * x428 + x426)
            + x15 * (x118 * x402 * x46 + x361 * x408)
            + x155 * x21
        )
    )
    result[0, 2, 9] = numpy.sum(
        x128
        * (x0 * x433 + x0 * (x0 * x435 + x433) + x15 * (x436 * x44 + x437) + x162 * x21)
    )
    result[0, 2, 10] = numpy.sum(
        x219 * (x0 * x439 + x0 * (x0 * x441 + x439) + x169 * x355 + x170 * x21)
    )
    result[0, 2, 11] = numpy.sum(
        x128 * (x0 * x443 + x0 * (x0 * x445 + x443) + x173 * x380 + x175 * x21)
    )
    result[0, 2, 12] = numpy.sum(
        x260 * (x0 * x447 + x0 * (x0 * x449 + x447) + x146 * x408 + x180 * x21)
    )
    result[0, 2, 13] = numpy.sum(
        x128 * (x0 * x451 + x0 * (x0 * x453 + x451) + x118 * x436 + x185 * x21)
    )
    result[0, 2, 14] = numpy.sum(
        x219
        * (x0 * x455 + x0 * (x0 * x457 + x455) + x15 * (x332 + x436 * x97) + x191 * x21)
    )
    result[0, 3, 0] = numpy.sum(
        x219
        * (
            x0 * x461
            + x15 * (x206 * x462 + x44 * (x204 * x462 + x44**2 * (2.0 * x462 + x466)))
            + x20 * x207
            + x20 * x208
        )
    )
    result[0, 3, 1] = numpy.sum(
        x128
        * (
            x0 * x472
            + x15 * (x44 * (x252 * x469 + x44 * (x44 * x475 + x473)) + x469 * x476)
            + x20 * x230
            + x20 * x231
        )
    )
    result[0, 3, 2] = numpy.sum(
        x128
        * (
            x0 * x479
            + x15 * (x229 * x481 + x44 * (x226 * x481 + x44 * (x466 * x97 + x480)))
            + x20 * x243
            + x20 * x244
        )
    )
    result[0, 3, 3] = numpy.sum(
        x260
        * (
            x0 * x485
            + x15 * (x252 * x482 + x44 * (x44 * x487 + x486))
            + x20 * x253
            + x20 * x254
        )
    )
    result[0, 3, 4] = numpy.sum(
        x272
        * (
            x0 * x491
            + x15 * (x252 * x488 + x44 * (x44 * x493 + x492))
            + x20 * x265
            + x20 * x266
        )
    )
    result[0, 3, 5] = numpy.sum(
        x260
        * (
            x0 * x497
            + x15 * (x275 * x462 + x44 * (x129 * x466 + x498))
            + x20 * x276
            + x20 * x277
        )
    )
    result[0, 3, 6] = numpy.sum(
        x128 * (x0 * x502 + x15 * (x44 * x504 + x503) + x20 * x284 + x20 * x285)
    )
    result[0, 3, 7] = numpy.sum(
        x272 * (x0 * x508 + x15 * (x44 * x510 + x509) + x20 * x293 + x20 * x294)
    )
    result[0, 3, 8] = numpy.sum(
        x272 * (x0 * x514 + x15 * (x44 * x516 + x515) + x20 * x302 + x20 * x303)
    )
    result[0, 3, 9] = numpy.sum(
        x128 * (x0 * x519 + x15 * (x161 * x466 + x520) + x20 * x310 + x20 * x311)
    )
    result[0, 3, 10] = numpy.sum(
        x219 * (x0 * x523 + x15 * (x290 + x504 * x83) + x20 * x315 + x20 * x316)
    )
    result[0, 3, 11] = numpy.sum(
        x128 * (x0 * x526 + x15 * (x298 + x510 * x83) + x20 * x319 + x20 * x320)
    )
    result[0, 3, 12] = numpy.sum(
        x260 * (x0 * x529 + x15 * (x308 + x516 * x83) + x20 * x323 + x20 * x324)
    )
    result[0, 3, 13] = numpy.sum(
        x128 * (x0 * x532 + x15 * (x161 * x474 + x314) + x20 * x328 + x20 * x329)
    )
    result[0, 3, 14] = numpy.sum(
        x219 * (x0 * x535 + x190 * x465 + x20 * x333 + x20 * x334)
    )
    result[0, 4, 0] = numpy.sum(
        x543
        * (
            x0 * x539
            + x15
            * (x206 * x540 + x44 * (x204 * x540 + x44**2 * (x4 * x542 + 2.0 * x540)))
            + x20 * x349
            + x207 * x21
        )
    )
    result[0, 4, 1] = numpy.sum(
        x549
        * (
            x0 * x547
            + x15 * (x44 * (x252 * x544 + x44 * (x44 * x548 + x544 * x78)) + x476 * x544)
            + x20 * x365
            + x21 * x230
        )
    )
    result[0, 4, 2] = numpy.sum(
        x549
        * (
            x0 * x553
            + x15 * (x44 * (x252 * x550 + x44 * (x44 * x554 + x550 * x78)) + x476 * x550)
            + x20 * x377
            + x21 * x243
        )
    )
    result[0, 4, 3] = numpy.sum(
        x272
        * (
            x0 * x558
            + x15 * (x252 * x555 + x44 * (x44 * x559 + x555 * x78))
            + x20 * x386
            + x21 * x253
        )
    )
    result[0, 4, 4] = numpy.sum(
        x565
        * (
            x0 * x563
            + x15 * (x252 * x560 + x44 * (x44 * x564 + x560 * x78))
            + x20 * x395
            + x21 * x265
        )
    )
    result[0, 4, 5] = numpy.sum(
        x272
        * (
            x0 * x569
            + x15 * (x252 * x566 + x44 * (x44 * x570 + x566 * x78))
            + x20 * x405
            + x21 * x276
        )
    )
    result[0, 4, 6] = numpy.sum(
        x549 * (x0 * x574 + x15 * (x44 * x575 + x571 * x78) + x20 * x412 + x21 * x284)
    )
    result[0, 4, 7] = numpy.sum(
        x565 * (x0 * x579 + x15 * (x44 * x580 + x576 * x78) + x20 * x419 + x21 * x293)
    )
    result[0, 4, 8] = numpy.sum(
        x565 * (x0 * x584 + x15 * (x44 * x585 + x581 * x78) + x20 * x426 + x21 * x302)
    )
    result[0, 4, 9] = numpy.sum(
        x549 * (x0 * x589 + x15 * (x44 * x590 + x586 * x78) + x20 * x433 + x21 * x310)
    )
    result[0, 4, 10] = numpy.sum(
        x543 * (x0 * x593 + x15 * (x140 * x357 + x575 * x83) + x20 * x439 + x21 * x315)
    )
    result[0, 4, 11] = numpy.sum(
        x549 * (x0 * x596 + x15 * (x372 * x597 + x580 * x83) + x20 * x443 + x21 * x319)
    )
    result[0, 4, 12] = numpy.sum(
        x272 * (x0 * x600 + x15 * (x402 * x423 + x585 * x83) + x20 * x447 + x21 * x323)
    )
    result[0, 4, 13] = numpy.sum(
        x549 * (x0 * x603 + x15 * (x431 * x78 + x590 * x83) + x20 * x451 + x21 * x328)
    )
    result[0, 4, 14] = numpy.sum(
        x543 * (x0 * x606 + x15 * (x161 * x217 + x590 * x97) + x20 * x455 + x21 * x333)
    )
    result[0, 5, 0] = numpy.sum(
        x219
        * (
            x0 * x610
            + x15 * (x206 * x611 + x44 * (x204 * x611 + x44**2 * (2.0 * x611 + x615)))
            + x21 * x348
            + x21 * x349
        )
    )
    result[0, 5, 1] = numpy.sum(
        x128
        * (
            x0 * x618
            + x15 * (x363 * x611 + x44 * (x361 * x611 + x44 * (x615 * x83 + x619)))
            + x21 * x364
            + x21 * x365
        )
    )
    result[0, 5, 2] = numpy.sum(
        x128
        * (
            x0 * x623
            + x15 * (x44 * (x252 * x620 + x44 * (x44 * x625 + x624)) + x476 * x620)
            + x21 * x376
            + x21 * x377
        )
    )
    result[0, 5, 3] = numpy.sum(
        x260
        * (
            x0 * x628
            + x15 * (x384 * x611 + x44 * (x107 * x615 + x629))
            + x21 * x385
            + x21 * x386
        )
    )
    result[0, 5, 4] = numpy.sum(
        x272
        * (
            x0 * x632
            + x15 * (x393 * x5 * x620 + x44 * (x361 * x625 + x633))
            + x21 * x394
            + x21 * x395
        )
    )
    result[0, 5, 5] = numpy.sum(
        x260
        * (
            x0 * x637
            + x15 * (x252 * x634 + x44 * (x44 * x639 + x638))
            + x21 * x404
            + x21 * x405
        )
    )
    result[0, 5, 6] = numpy.sum(
        x128 * (x0 * x642 + x15 * (x140 * x615 + x643) + x21 * x411 + x21 * x412)
    )
    result[0, 5, 7] = numpy.sum(
        x272 * (x0 * x646 + x15 * (x384 * x625 + x647) + x21 * x418 + x21 * x419)
    )
    result[0, 5, 8] = numpy.sum(
        x272 * (x0 * x650 + x15 * (x361 * x639 + x651) + x21 * x425 + x21 * x426)
    )
    result[0, 5, 9] = numpy.sum(
        x128 * (x0 * x655 + x15 * (x44 * x657 + x656) + x21 * x432 + x21 * x433)
    )
    result[0, 5, 10] = numpy.sum(
        x219 * (x0 * x660 + x169 * x614 + x21 * x438 + x21 * x439)
    )
    result[0, 5, 11] = numpy.sum(
        x128 * (x0 * x663 + x173 * x625 + x21 * x442 + x21 * x443)
    )
    result[0, 5, 12] = numpy.sum(
        x260 * (x0 * x666 + x146 * x639 + x21 * x446 + x21 * x447)
    )
    result[0, 5, 13] = numpy.sum(
        x128 * (x0 * x669 + x118 * x657 + x21 * x450 + x21 * x451)
    )
    result[0, 5, 14] = numpy.sum(
        x219 * (x0 * x672 + x15 * (x437 + x657 * x97) + x21 * x454 + x21 * x455)
    )
    result[0, 6, 0] = numpy.sum(
        x82 * (x20 * x459 + x20 * x460 + x20 * x461 + x209 * x673)
    )
    result[0, 6, 1] = numpy.sum(
        x96 * (x20 * x470 + x20 * x471 + x20 * x472 + x232 * x676)
    )
    result[0, 6, 2] = numpy.sum(
        x96 * (x20 * x477 + x20 * x478 + x20 * x479 + x245 * x673)
    )
    result[0, 6, 3] = numpy.sum(
        x117 * (x20 * x483 + x20 * x484 + x20 * x485 + x229 * x677)
    )
    result[0, 6, 4] = numpy.sum(
        x128 * (x20 * x489 + x20 * x490 + x20 * x491 + x229 * x678)
    )
    result[0, 6, 5] = numpy.sum(
        x117 * (x137 * x679 + x20 * x495 + x20 * x496 + x20 * x497)
    )
    result[0, 6, 6] = numpy.sum(
        x96 * (x20 * x500 + x20 * x501 + x20 * x502 + x226 * x680)
    )
    result[0, 6, 7] = numpy.sum(
        x128 * (x20 * x506 + x20 * x507 + x20 * x508 + x226 * x681)
    )
    result[0, 6, 8] = numpy.sum(
        x128 * (x20 * x512 + x20 * x513 + x20 * x514 + x226 * x682)
    )
    result[0, 6, 9] = numpy.sum(
        x96 * (x166 * x679 + x20 * x517 + x20 * x518 + x20 * x519)
    )
    result[0, 6, 10] = numpy.sum(
        x82 * (x15 * (3.0 * x503 + x680 * x83) + x20 * x521 + x20 * x522 + x20 * x523)
    )
    result[0, 6, 11] = numpy.sum(
        x96 * (x15 * (3.0 * x509 + x681 * x83) + x20 * x524 + x20 * x525 + x20 * x526)
    )
    result[0, 6, 12] = numpy.sum(
        x117 * (x15 * (3.0 * x515 + x682 * x83) + x20 * x527 + x20 * x528 + x20 * x529)
    )
    result[0, 6, 13] = numpy.sum(
        x96 * (x15 * x161 * (x674 + x675) + x20 * x530 + x20 * x531 + x20 * x532)
    )
    result[0, 6, 14] = numpy.sum(
        x82 * (x190 * x673 + x20 * x533 + x20 * x534 + x20 * x535)
    )
    result[0, 7, 0] = numpy.sum(
        x219 * (x20 * x538 + x20 * x539 + x209 * x683 + x21 * x459)
    )
    result[0, 7, 1] = numpy.sum(
        x128 * (x20 * x546 + x20 * x547 + x21 * x470 + x232 * x685)
    )
    result[0, 7, 2] = numpy.sum(
        x128 * (x20 * x552 + x20 * x553 + x21 * x477 + x232 * x686)
    )
    result[0, 7, 3] = numpy.sum(
        x260 * (x20 * x557 + x20 * x558 + x21 * x483 + x229 * x687)
    )
    result[0, 7, 4] = numpy.sum(
        x272 * (x20 * x562 + x20 * x563 + x21 * x489 + x229 * x689)
    )
    result[0, 7, 5] = numpy.sum(
        x260 * (x20 * x568 + x20 * x569 + x21 * x495 + x229 * x690)
    )
    result[0, 7, 6] = numpy.sum(
        x128 * (x20 * x573 + x20 * x574 + x21 * x500 + x226 * x691)
    )
    result[0, 7, 7] = numpy.sum(
        x272 * (x20 * x578 + x20 * x579 + x21 * x506 + x226 * x692)
    )
    result[0, 7, 8] = numpy.sum(
        x272 * (x20 * x583 + x20 * x584 + x21 * x512 + x226 * x694)
    )
    result[0, 7, 9] = numpy.sum(
        x128 * (x20 * x588 + x20 * x589 + x21 * x517 + x226 * x695)
    )
    result[0, 7, 10] = numpy.sum(
        x219 * (x15 * (x51 * x571 + x691 * x83) + x20 * x592 + x20 * x593 + x21 * x521)
    )
    result[0, 7, 11] = numpy.sum(
        x128 * (x15 * (x51 * x576 + x692 * x83) + x20 * x595 + x20 * x596 + x21 * x524)
    )
    result[0, 7, 12] = numpy.sum(
        x260 * (x15 * (x51 * x581 + x694 * x83) + x20 * x599 + x20 * x600 + x21 * x527)
    )
    result[0, 7, 13] = numpy.sum(
        x128 * (x15 * (x695 * x83 + x696) + x20 * x602 + x20 * x603 + x21 * x530)
    )
    result[0, 7, 14] = numpy.sum(
        x219 * (x15 * (x520 + x695 * x97) + x20 * x605 + x20 * x606 + x21 * x533)
    )
    result[0, 8, 0] = numpy.sum(
        x219 * (x20 * x610 + x209 * x697 + x21 * x537 + x21 * x538)
    )
    result[0, 8, 1] = numpy.sum(
        x128 * (x20 * x618 + x21 * x545 + x21 * x546 + x232 * x698)
    )
    result[0, 8, 2] = numpy.sum(
        x128 * (x20 * x623 + x21 * x551 + x21 * x552 + x232 * x699)
    )
    result[0, 8, 3] = numpy.sum(
        x260 * (x20 * x628 + x21 * x556 + x21 * x557 + x229 * x700)
    )
    result[0, 8, 4] = numpy.sum(
        x272 * (x20 * x632 + x21 * x561 + x21 * x562 + x229 * x701)
    )
    result[0, 8, 5] = numpy.sum(
        x260 * (x20 * x637 + x21 * x567 + x21 * x568 + x229 * x702)
    )
    result[0, 8, 6] = numpy.sum(
        x128 * (x20 * x642 + x21 * x572 + x21 * x573 + x226 * x703)
    )
    result[0, 8, 7] = numpy.sum(
        x272 * (x20 * x646 + x21 * x577 + x21 * x578 + x226 * x704)
    )
    result[0, 8, 8] = numpy.sum(
        x272 * (x20 * x650 + x21 * x582 + x21 * x583 + x226 * x705)
    )
    result[0, 8, 9] = numpy.sum(
        x128 * (x20 * x655 + x21 * x587 + x21 * x588 + x226 * x706)
    )
    result[0, 8, 10] = numpy.sum(
        x219 * (x15 * (x643 + x703 * x83) + x20 * x660 + x21 * x591 + x21 * x592)
    )
    result[0, 8, 11] = numpy.sum(
        x128 * (x15 * (x647 + x704 * x83) + x20 * x663 + x21 * x594 + x21 * x595)
    )
    result[0, 8, 12] = numpy.sum(
        x260 * (x15 * (x651 + x705 * x83) + x20 * x666 + x21 * x598 + x21 * x599)
    )
    result[0, 8, 13] = numpy.sum(
        x128 * (x15 * (x656 + x706 * x83) + x20 * x669 + x21 * x601 + x21 * x602)
    )
    result[0, 8, 14] = numpy.sum(
        x219 * (x15 * (x696 + x706 * x97) + x20 * x672 + x21 * x604 + x21 * x605)
    )
    result[0, 9, 0] = numpy.sum(
        x82 * (x209 * x707 + x21 * x608 + x21 * x609 + x21 * x610)
    )
    result[0, 9, 1] = numpy.sum(
        x96 * (x21 * x616 + x21 * x617 + x21 * x618 + x366 * x707)
    )
    result[0, 9, 2] = numpy.sum(
        x96 * (x21 * x621 + x21 * x622 + x21 * x623 + x232 * x708)
    )
    result[0, 9, 3] = numpy.sum(
        x117 * (x21 * x626 + x21 * x627 + x21 * x628 + x388 * x707)
    )
    result[0, 9, 4] = numpy.sum(
        x128 * (x21 * x630 + x21 * x631 + x21 * x632 + x396 * x708)
    )
    result[0, 9, 5] = numpy.sum(
        x117 * (x21 * x635 + x21 * x636 + x21 * x637 + x229 * x709)
    )
    result[0, 9, 6] = numpy.sum(
        x96 * (x21 * x640 + x21 * x641 + x21 * x642 + x413 * x707)
    )
    result[0, 9, 7] = numpy.sum(
        x128 * (x21 * x644 + x21 * x645 + x21 * x646 + x420 * x708)
    )
    result[0, 9, 8] = numpy.sum(
        x128 * (x21 * x648 + x21 * x649 + x21 * x650 + x393 * x709)
    )
    result[0, 9, 9] = numpy.sum(
        x96 * (x21 * x653 + x21 * x654 + x21 * x655 + x226 * x710)
    )
    result[0, 9, 10] = numpy.sum(
        x82 * (x169 * x707 + x21 * x658 + x21 * x659 + x21 * x660)
    )
    result[0, 9, 11] = numpy.sum(
        x96 * (x173 * x708 + x21 * x661 + x21 * x662 + x21 * x663)
    )
    result[0, 9, 12] = numpy.sum(
        x117 * (x146 * x709 + x21 * x664 + x21 * x665 + x21 * x666)
    )
    result[0, 9, 13] = numpy.sum(
        x96 * (x118 * x710 + x21 * x667 + x21 * x668 + x21 * x669)
    )
    result[0, 9, 14] = numpy.sum(
        x82 * (x15 * (3.0 * x656 + x710 * x97) + x21 * x670 + x21 * x671 + x21 * x672)
    )
    return result


def int3c2e3d_sph_100(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ps|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 1, 1), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.0)
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = x6 + C[1]
    x8 = -x1 * (ax * A[2] + bx * B[2])
    x9 = x8 + C[2]
    x10 = cx * x0 * x5 * (x3**2 + x7**2 + x9**2)
    x11 = x5 * boys(1, x10)
    x12 = cx ** (-1.0)
    x13 = boys(0, x10)
    x14 = (
        34.98683665524972
        * da
        * db
        * dc
        * x1
        * x4 ** (-0.5)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
    )

    # 3 item(s)
    result[0, 0, 0] = numpy.sum(x14 * (x11 * x3 - x12 * x13 * (x2 + A[0])))
    result[1, 0, 0] = numpy.sum(x14 * (x11 * x7 - x12 * x13 * (x6 + A[1])))
    result[2, 0, 0] = numpy.sum(x14 * (x11 * x9 - x12 * x13 * (x8 + A[2])))
    return result


def int3c2e3d_sph_101(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ps|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 1, 3), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.0)
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = x6 + C[1]
    x8 = -x1 * (ax * A[2] + bx * B[2])
    x9 = x8 + C[2]
    x10 = cx * x0 * x5 * (x3**2 + x7**2 + x9**2)
    x11 = x5 * boys(2, x10)
    x12 = cx ** (-1.0)
    x13 = boys(1, x10)
    x14 = -2.0 * x11 * x3 + 2.0 * x12 * x13 * (x2 + A[0])
    x15 = x1 * x12 * x13
    x16 = (
        17.49341832762486
        * da
        * db
        * dc
        * x4 ** (-1.5)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
    )
    x17 = x14 * x16
    x18 = -2.0 * x11 * x7 + 2.0 * x12 * x13 * (x6 + A[1])
    x19 = x16 * x18
    x20 = -2.0 * x11 * x9 + 2.0 * x12 * x13 * (x8 + A[2])
    x21 = x16 * x20

    # 9 item(s)
    result[0, 0, 0] = numpy.sum(x16 * (x14 * x3 + x15))
    result[0, 0, 1] = numpy.sum(x17 * x7)
    result[0, 0, 2] = numpy.sum(x17 * x9)
    result[1, 0, 0] = numpy.sum(x19 * x3)
    result[1, 0, 1] = numpy.sum(x16 * (x15 + x18 * x7))
    result[1, 0, 2] = numpy.sum(x19 * x9)
    result[2, 0, 0] = numpy.sum(x21 * x3)
    result[2, 0, 1] = numpy.sum(x21 * x7)
    result[2, 0, 2] = numpy.sum(x16 * (x15 + x20 * x9))
    return result


def int3c2e3d_sph_102(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ps|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 1, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = -x3
    x5 = cx + x0
    x6 = x5 ** (-1.0)
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x0 * x6
    x14 = x13 * (x12**2 + x4**2 + x9**2)
    x15 = x6 * boys(3, x14)
    x16 = x2 + A[0]
    x17 = cx ** (-1.0)
    x18 = x17 * boys(2, x14)
    x19 = 2.0 * x3
    x20 = x19 * (x15 * x4 + x16 * x18)
    x21 = x3**2
    x22 = x8**2
    x23 = x11**2
    x24 = x13 * (x21 + x22 + x23)
    x25 = boys(2, x24)
    x26 = x1 * x17 * x25
    x27 = 2.0 * x26
    x28 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0
        * x5 ** (-2.5)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
    )
    x29 = x28 * x3
    x30 = 1.732050807568877
    x31 = 0.3333333333333333 * x30
    x32 = x28 * (x20 + x26)
    x33 = x6 * boys(3, x24)
    x34 = x16 * x17 * x25 - x3 * x33
    x35 = 0.6666666666666667 * x28 * x30
    x36 = x34 * x35
    x37 = 2.0 * x8
    x38 = x11 * x28
    x39 = x7 + A[1]
    x40 = x17 * x25 * x39 - x33 * x8
    x41 = x35 * x40
    x42 = x37 * (x15 * x9 + x18 * x39)
    x43 = x28 * x8
    x44 = x10 + A[2]
    x45 = -x11 * x33 + x17 * x25 * x44
    x46 = x35 * x45
    x47 = 2.0 * x11
    x48 = x26 + x45 * x47

    # 18 item(s)
    result[0, 0, 0] = numpy.sum(-x29 * x31 * (x20 + x27))
    result[0, 0, 1] = numpy.sum(-x32 * x8)
    result[0, 0, 2] = numpy.sum(-x11 * x32)
    result[0, 0, 3] = numpy.sum(-x22 * x36)
    result[0, 0, 4] = numpy.sum(-x34 * x37 * x38)
    result[0, 0, 5] = numpy.sum(-x23 * x36)
    result[1, 0, 0] = numpy.sum(-x21 * x41)
    result[1, 0, 1] = numpy.sum(-x29 * (x26 + x37 * x40))
    result[1, 0, 2] = numpy.sum(-x19 * x38 * x40)
    result[1, 0, 3] = numpy.sum(-x31 * x43 * (x27 + x42))
    result[1, 0, 4] = numpy.sum(-x38 * (x26 + x42))
    result[1, 0, 5] = numpy.sum(-x23 * x41)
    result[2, 0, 0] = numpy.sum(-x21 * x46)
    result[2, 0, 1] = numpy.sum(-x19 * x43 * x45)
    result[2, 0, 2] = numpy.sum(-x29 * x48)
    result[2, 0, 3] = numpy.sum(-x22 * x46)
    result[2, 0, 4] = numpy.sum(-x43 * x48)
    result[2, 0, 5] = numpy.sum(-x31 * x38 * (x27 + x47 * (x12 * x15 + x18 * x44)))
    return result


def int3c2e3d_sph_103(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ps|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 1, 10), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.5)
    x6 = x3 * x5
    x7 = x3**2
    x8 = -x1 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x1 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = x0 / x4
    x15 = cx * x14 * (x10 + x13 + x7)
    x16 = 17.49341832762486
    x17 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x18 = 2.0 * x16 * x17
    x19 = x1 * x18
    x20 = x19 * boys(4, x15)
    x21 = cx ** (-1.0)
    x22 = x4 ** (-0.5)
    x23 = boys(3, x15)
    x24 = -2.0 * x1 * x16 * x17 * x21 * x22 * x23 * (x2 + A[0]) - x20 * x6
    x25 = x24 * x3
    x26 = 0.5 / (ax + bx)
    x27 = x21 * x23
    x28 = x19 * x22 * x26 * x27
    x29 = x14 * x3
    x30 = x18 * x26 * x27
    x31 = x0 * x30 * x4 ** (-2.5)
    x32 = da * db * dc
    x33 = x14 * x32
    x34 = 0.2581988897471611
    x35 = x33 * x34
    x36 = x14 * x9
    x37 = x30 * x5
    x38 = x37 * x9
    x39 = x3 * x31
    x40 = 0.5773502691896258
    x41 = x33 * x40
    x42 = x12 * x14
    x43 = x12 * x37
    x44 = x0**2 / x4**2
    x45 = x25 * x44
    x46 = x10 * x31
    x47 = x12 * x9
    x48 = x31 * x47
    x49 = x13 * x31
    x50 = x9**3
    x51 = x0**3 / x4**3
    x52 = x32 * x51
    x53 = x34 * x52
    x54 = x24 * x53
    x55 = x10 * x40
    x56 = x24 * x52
    x57 = x40 * x9
    x58 = x12**3
    x59 = x3**3
    x60 = x20 * x5
    x61 = -2.0 * x1 * x16 * x17 * x21 * x22 * x23 * (x8 + A[1]) - x60 * x9
    x62 = x53 * x61
    x63 = x61 * x9
    x64 = x28 + x63
    x65 = x40 * x7
    x66 = x52 * x65
    x67 = x36 * x64 + x38
    x68 = x3 * x32
    x69 = x44 * x68
    x70 = x40 * x69
    x71 = x42 * x63 + x43
    x72 = x51 * x68
    x73 = -2.0 * x1 * x16 * x17 * x21 * x22 * x23 * (x11 + A[2]) - x12 * x60
    x74 = x53 * x73
    x75 = x12 * x73 + x28
    x76 = x51 * x75
    x77 = x32 * x76
    x78 = x42 * x75 + x43

    # 30 item(s)
    result[0, 0, 0] = numpy.sum(x35 * (x29 * (x29 * (x25 + x28) + x30 * x6) + x31 * x7))
    result[0, 0, 1] = numpy.sum(x41 * (x29 * (x25 * x36 + x38) + x39 * x9))
    result[0, 0, 2] = numpy.sum(x41 * (x12 * x39 + x29 * (x25 * x42 + x43)))
    result[0, 0, 3] = numpy.sum(x41 * (x10 * x45 + x46))
    result[0, 0, 4] = numpy.sum(x33 * (x45 * x47 + x48))
    result[0, 0, 5] = numpy.sum(x41 * (x13 * x45 + x49))
    result[0, 0, 6] = numpy.sum(x50 * x54)
    result[0, 0, 7] = numpy.sum(x12 * x55 * x56)
    result[0, 0, 8] = numpy.sum(x13 * x56 * x57)
    result[0, 0, 9] = numpy.sum(x54 * x58)
    result[1, 0, 0] = numpy.sum(x59 * x62)
    result[1, 0, 1] = numpy.sum(x64 * x66)
    result[1, 0, 2] = numpy.sum(x12 * x61 * x66)
    result[1, 0, 3] = numpy.sum(x67 * x70)
    result[1, 0, 4] = numpy.sum(x69 * x71)
    result[1, 0, 5] = numpy.sum(x13 * x40 * x61 * x72)
    result[1, 0, 6] = numpy.sum(x35 * (x36 * x67 + x46))
    result[1, 0, 7] = numpy.sum(x41 * (x36 * x71 + x48))
    result[1, 0, 8] = numpy.sum(x41 * (x13 * x44 * x63 + x49))
    result[1, 0, 9] = numpy.sum(x58 * x62)
    result[2, 0, 0] = numpy.sum(x59 * x74)
    result[2, 0, 1] = numpy.sum(x66 * x73 * x9)
    result[2, 0, 2] = numpy.sum(x65 * x77)
    result[2, 0, 3] = numpy.sum(x55 * x72 * x73)
    result[2, 0, 4] = numpy.sum(x68 * x76 * x9)
    result[2, 0, 5] = numpy.sum(x70 * x78)
    result[2, 0, 6] = numpy.sum(x50 * x74)
    result[2, 0, 7] = numpy.sum(x55 * x77)
    result[2, 0, 8] = numpy.sum(x32 * x44 * x57 * x78)
    result[2, 0, 9] = numpy.sum(x35 * (x42 * x78 + x49))
    return result


def int3c2e3d_sph_104(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ps|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 1, 15), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.5)
    x6 = x3 * x5
    x7 = x3**2
    x8 = -x1 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x1 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = x0 / x4
    x15 = cx * x14 * (x10 + x13 + x7)
    x16 = 17.49341832762486
    x17 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x18 = 2.0 * x16 * x17
    x19 = x1 * x18
    x20 = x19 * boys(5, x15)
    x21 = cx ** (-1.0)
    x22 = x4 ** (-0.5)
    x23 = boys(4, x15)
    x24 = -2.0 * x1 * x16 * x17 * x21 * x22 * x23 * (x2 + A[0]) - x20 * x6
    x25 = x24 * x3
    x26 = 0.5 / (ax + bx)
    x27 = x21 * x23
    x28 = x19 * x22 * x26 * x27
    x29 = x14 * x3
    x30 = x18 * x26 * x27
    x31 = x30 * x7
    x32 = x0 * x4 ** (-2.5)
    x33 = x3**3
    x34 = x0**2
    x35 = x34 * x4 ** (-3.5)
    x36 = x30 * x35
    x37 = da * db * dc
    x38 = x14 * x37
    x39 = 0.09759000729485332
    x40 = x38 * x39
    x41 = x14 * x9
    x42 = x30 * x5
    x43 = x42 * x9
    x44 = x30 * x32
    x45 = x3 * x44
    x46 = x31 * x35
    x47 = 0.2581988897471611
    x48 = x38 * x47
    x49 = x12 * x14
    x50 = x12 * x42
    x51 = x34 / x4**2
    x52 = x10 * x25
    x53 = x10 * x44
    x54 = x3 * x36
    x55 = 0.3333333333333333 * x38
    x56 = x51 * x9
    x57 = x12 * x9
    x58 = x44 * x57
    x59 = 1.732050807568877
    x60 = x55 * x59
    x61 = x13 * x51
    x62 = x13 * x44
    x63 = x9**3
    x64 = x0**3 / x4**3
    x65 = x25 * x64
    x66 = x36 * x63
    x67 = x10 * x12 * x36
    x68 = x13 * x9
    x69 = x36 * x68
    x70 = x12**3
    x71 = x36 * x70
    x72 = x9**4
    x73 = x0**4 / x4**4
    x74 = x24 * x73
    x75 = x37 * x39
    x76 = x74 * x75
    x77 = x37 * x47
    x78 = x74 * x77
    x79 = 0.3333333333333333 * x37
    x80 = x13 * x79
    x81 = x12**4
    x82 = x3**4
    x83 = x20 * x5
    x84 = -2.0 * x1 * x16 * x17 * x21 * x22 * x23 * (x8 + A[1]) - x83 * x9
    x85 = x73 * x84
    x86 = x75 * x85
    x87 = x84 * x9
    x88 = x28 + x87
    x89 = x73 * x77
    x90 = x33 * x89
    x91 = x77 * x85
    x92 = x41 * x88 + x43
    x93 = x64 * x79
    x94 = x7 * x93
    x95 = x49 * x87 + x50
    x96 = x41 * x92 + x53
    x97 = x3 * x51
    x98 = x77 * x97
    x99 = x41 * x95 + x58
    x100 = x59 * x79
    x101 = x100 * x97
    x102 = x61 * x87 + x62
    x103 = -2.0 * x1 * x16 * x17 * x21 * x22 * x23 * (x11 + A[2]) - x12 * x83
    x104 = x103 * x73
    x105 = x104 * x75
    x106 = x103 * x12 + x28
    x107 = x100 * x106 * x73
    x108 = x106 * x49 + x50
    x109 = x63 * x89
    x110 = x108 * x93
    x111 = x108 * x49 + x62

    # 45 item(s)
    result[0, 0, 0] = numpy.sum(
        x40 * (x29 * (x29 * (x29 * (x25 + x28) + x30 * x6) + x31 * x32) + x33 * x36)
    )
    result[0, 0, 1] = numpy.sum(
        x48 * (x29 * (x29 * (x25 * x41 + x43) + x45 * x9) + x46 * x9)
    )
    result[0, 0, 2] = numpy.sum(
        x48 * (x12 * x46 + x29 * (x12 * x45 + x29 * (x25 * x49 + x50)))
    )
    result[0, 0, 3] = numpy.sum(x55 * (x10 * x54 + x29 * (x51 * x52 + x53)))
    result[0, 0, 4] = numpy.sum(x60 * (x29 * (x12 * x25 * x56 + x58) + x54 * x57))
    result[0, 0, 5] = numpy.sum(x55 * (x13 * x54 + x29 * (x25 * x61 + x62)))
    result[0, 0, 6] = numpy.sum(x48 * (x63 * x65 + x66))
    result[0, 0, 7] = numpy.sum(x60 * (x12 * x52 * x64 + x67))
    result[0, 0, 8] = numpy.sum(x60 * (x65 * x68 + x69))
    result[0, 0, 9] = numpy.sum(x48 * (x65 * x70 + x71))
    result[0, 0, 10] = numpy.sum(x72 * x76)
    result[0, 0, 11] = numpy.sum(x12 * x63 * x78)
    result[0, 0, 12] = numpy.sum(x10 * x74 * x80)
    result[0, 0, 13] = numpy.sum(x70 * x78 * x9)
    result[0, 0, 14] = numpy.sum(x76 * x81)
    result[1, 0, 0] = numpy.sum(x82 * x86)
    result[1, 0, 1] = numpy.sum(x88 * x90)
    result[1, 0, 2] = numpy.sum(x12 * x33 * x91)
    result[1, 0, 3] = numpy.sum(x92 * x94)
    result[1, 0, 4] = numpy.sum(x59 * x94 * x95)
    result[1, 0, 5] = numpy.sum(x7 * x80 * x85)
    result[1, 0, 6] = numpy.sum(x96 * x98)
    result[1, 0, 7] = numpy.sum(x101 * x99)
    result[1, 0, 8] = numpy.sum(x101 * x102)
    result[1, 0, 9] = numpy.sum(x3 * x70 * x91)
    result[1, 0, 10] = numpy.sum(x40 * (x41 * x96 + x66))
    result[1, 0, 11] = numpy.sum(x48 * (x41 * x99 + x67))
    result[1, 0, 12] = numpy.sum(x55 * (x102 * x41 + x69))
    result[1, 0, 13] = numpy.sum(x48 * (x64 * x70 * x87 + x71))
    result[1, 0, 14] = numpy.sum(x81 * x86)
    result[2, 0, 0] = numpy.sum(x105 * x82)
    result[2, 0, 1] = numpy.sum(x103 * x9 * x90)
    result[2, 0, 2] = numpy.sum(x106 * x90)
    result[2, 0, 3] = numpy.sum(x10 * x104 * x7 * x79)
    result[2, 0, 4] = numpy.sum(x107 * x7 * x9)
    result[2, 0, 5] = numpy.sum(x108 * x94)
    result[2, 0, 6] = numpy.sum(x103 * x109 * x3)
    result[2, 0, 7] = numpy.sum(x10 * x107 * x3)
    result[2, 0, 8] = numpy.sum(x110 * x3 * x59 * x9)
    result[2, 0, 9] = numpy.sum(x111 * x98)
    result[2, 0, 10] = numpy.sum(x105 * x72)
    result[2, 0, 11] = numpy.sum(x106 * x109)
    result[2, 0, 12] = numpy.sum(x10 * x110)
    result[2, 0, 13] = numpy.sum(x111 * x56 * x77)
    result[2, 0, 14] = numpy.sum(x40 * (x111 * x49 + x71))
    return result


def int3c2e3d_sph_110(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pp|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3, 1), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = cx + x0
    x3 = x2 ** (-1.0)
    x4 = -x1 * (ax * A[0] + bx * B[0])
    x5 = x4 + C[0]
    x6 = -x5
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x3
    x14 = x0 * x13 * (x12**2 + x6**2 + x9**2)
    x15 = boys(1, x14)
    x16 = x15 * x3
    x17 = cx ** (-1.0)
    x18 = x17 * boys(0, x14)
    x19 = x1 * (x16 - x18)
    x20 = x4 + A[0]
    x21 = -x20
    x22 = x16 * x6 - x18 * x21
    x23 = 2.0 * x22
    x24 = A[0] - B[0]
    x25 = x3 * boys(2, x14)
    x26 = x15 * x17
    x27 = x13 * x5
    x28 = A[1] - B[1]
    x29 = A[2] - B[2]
    x30 = (
        17.49341832762486
        * da
        * db
        * dc
        * x1
        * x2 ** (-0.5)
        * numpy.exp(-ax * bx * x1 * (x24**2 + x28**2 + x29**2))
    )
    x31 = x7 + A[1]
    x32 = -x31
    x33 = x16 * x9 - x18 * x32
    x34 = x25 * x9 - x26 * x32
    x35 = -x20 * x33 + x27 * x34
    x36 = 2.0 * x30
    x37 = x10 + A[2]
    x38 = -x37
    x39 = x12 * x16 - x18 * x38
    x40 = x12 * x25 - x26 * x38
    x41 = -x20 * x39 + x27 * x40
    x42 = 2.0 * x33
    x43 = x13 * x8
    x44 = -x31 * x39 + x40 * x43
    x45 = 2.0 * x39

    # 9 item(s)
    result[0, 0, 0] = numpy.sum(
        -x30 * (x19 - x20 * x23 + x23 * x24 - 2.0 * x27 * (x21 * x26 - x25 * x6))
    )
    result[0, 1, 0] = numpy.sum(-x36 * (x22 * x28 + x35))
    result[0, 2, 0] = numpy.sum(-x36 * (x22 * x29 + x41))
    result[1, 0, 0] = numpy.sum(-x36 * (x24 * x33 + x35))
    result[1, 1, 0] = numpy.sum(x30 * (-x19 - x28 * x42 + x31 * x42 - 2.0 * x34 * x43))
    result[1, 2, 0] = numpy.sum(-x36 * (x29 * x33 + x44))
    result[2, 0, 0] = numpy.sum(-x36 * (x24 * x39 + x41))
    result[2, 1, 0] = numpy.sum(-x36 * (x28 * x39 + x44))
    result[2, 2, 0] = numpy.sum(
        x30 * (-2.0 * x11 * x13 * x40 - x19 - x29 * x45 + x37 * x45)
    )
    return result


def int3c2e3d_sph_111(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pp|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3, 3), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.0)
    x6 = -x3
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x5
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x6**2 + x9**2)
    x16 = boys(2, x15)
    x17 = x16 * x5
    x18 = cx ** (-1.0)
    x19 = x18 * boys(1, x15)
    x20 = x1 * (x17 - x19)
    x21 = x2 + A[0]
    x22 = -x21
    x23 = 2.0 * x17 * x6 - 2.0 * x19 * x22
    x24 = x5 * boys(3, x15)
    x25 = x16 * x18
    x26 = x13 * x3
    x27 = x20 - x21 * x23 - 2.0 * x26 * (x22 * x25 - x24 * x6)
    x28 = A[0] - B[0]
    x29 = x14 * (x11**2 + x3**2 + x8**2)
    x30 = x5 * boys(2, x29)
    x31 = boys(1, x29)
    x32 = x18 * x21 * x31 - x3 * x30
    x33 = 2.0 * x32
    x34 = x1 * x18 * x31
    x35 = x3 * x33 + x34
    x36 = A[1] - B[1]
    x37 = A[2] - B[2]
    x38 = (
        17.49341832762486
        * da
        * db
        * dc
        * x4 ** (-1.5)
        * numpy.exp(-ax * bx * x1 * (x28**2 + x36**2 + x37**2))
    )
    x39 = x38 * (x27 + x28 * x33)
    x40 = x7 + A[1]
    x41 = x18 * x31 * x40 - x30 * x8
    x42 = -x1 * x41
    x43 = -x40
    x44 = x17 * x9 - x19 * x43
    x45 = x24 * x9 - x25 * x43
    x46 = -x21 * x44 + x26 * x45
    x47 = 2.0 * x46
    x48 = x3 * x47 + x42
    x49 = x32 * x36
    x50 = 2.0 * x8
    x51 = -x1 * x32
    x52 = x47 * x8 + x51
    x53 = 2.0 * x11
    x54 = x38 * x53
    x55 = x10 + A[2]
    x56 = -x11 * x30 + x18 * x31 * x55
    x57 = -x1 * x56
    x58 = -x55
    x59 = x12 * x17 - x19 * x58
    x60 = x12 * x24 - x25 * x58
    x61 = -x21 * x59 + x26 * x60
    x62 = 2.0 * x61
    x63 = x3 * x62 + x57
    x64 = x32 * x37
    x65 = x38 * x50
    x66 = x11 * x62 + x51
    x67 = x28 * x41
    x68 = 2.0 * x3
    x69 = 2.0 * x41
    x70 = x34 + x69 * x8
    x71 = 2.0 * x44
    x72 = x13 * x45 * x50 + x20 - x40 * x71
    x73 = x38 * (x36 * x69 + x72)
    x74 = x37 * x41
    x75 = x13 * x60
    x76 = -x40 * x59 + x75 * x8
    x77 = x38 * x68
    x78 = 2.0 * x76
    x79 = x57 + x78 * x8
    x80 = x11 * x78 + x42
    x81 = x28 * x56
    x82 = 2.0 * x56
    x83 = x11 * x82 + x34
    x84 = x36 * x56
    x85 = 2.0 * x59
    x86 = x20 + x53 * x75 - x55 * x85
    x87 = x38 * (x37 * x82 + x86)

    # 27 item(s)
    result[0, 0, 0] = numpy.sum(x38 * (-x1 * x23 + x27 * x3 + x28 * x35))
    result[0, 0, 1] = numpy.sum(x39 * x8)
    result[0, 0, 2] = numpy.sum(x11 * x39)
    result[0, 1, 0] = numpy.sum(x38 * (x35 * x36 + x48))
    result[0, 1, 1] = numpy.sum(x38 * (x49 * x50 + x52))
    result[0, 1, 2] = numpy.sum(x54 * (x46 + x49))
    result[0, 2, 0] = numpy.sum(x38 * (x35 * x37 + x63))
    result[0, 2, 1] = numpy.sum(x65 * (x61 + x64))
    result[0, 2, 2] = numpy.sum(x38 * (x53 * x64 + x66))
    result[1, 0, 0] = numpy.sum(x38 * (x48 + x67 * x68))
    result[1, 0, 1] = numpy.sum(x38 * (x28 * x70 + x52))
    result[1, 0, 2] = numpy.sum(x54 * (x46 + x67))
    result[1, 1, 0] = numpy.sum(x3 * x73)
    result[1, 1, 1] = numpy.sum(x38 * (-x1 * x71 + x36 * x70 + x72 * x8))
    result[1, 1, 2] = numpy.sum(x11 * x73)
    result[1, 2, 0] = numpy.sum(x77 * (x74 + x76))
    result[1, 2, 1] = numpy.sum(x38 * (x37 * x70 + x79))
    result[1, 2, 2] = numpy.sum(x38 * (x53 * x74 + x80))
    result[2, 0, 0] = numpy.sum(x38 * (x63 + x68 * x81))
    result[2, 0, 1] = numpy.sum(x65 * (x61 + x81))
    result[2, 0, 2] = numpy.sum(x38 * (x28 * x83 + x66))
    result[2, 1, 0] = numpy.sum(x77 * (x76 + x84))
    result[2, 1, 1] = numpy.sum(x38 * (x50 * x84 + x79))
    result[2, 1, 2] = numpy.sum(x38 * (x36 * x83 + x80))
    result[2, 2, 0] = numpy.sum(x3 * x87)
    result[2, 2, 1] = numpy.sum(x8 * x87)
    result[2, 2, 2] = numpy.sum(x38 * (-x1 * x85 + x11 * x86 + x37 * x83))
    return result


def int3c2e3d_sph_112(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pp|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = -x3
    x5 = cx + x0
    x6 = x5 ** (-1.0)
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x6
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x4**2 + x9**2)
    x16 = boys(3, x15)
    x17 = x16 * x6
    x18 = x2 + A[0]
    x19 = -x18
    x20 = cx ** (-1.0)
    x21 = boys(2, x15)
    x22 = x20 * x21
    x23 = x17 * x4 - x19 * x22
    x24 = x23 * x3
    x25 = x3**2
    x26 = x8**2
    x27 = x11**2
    x28 = x14 * (x25 + x26 + x27)
    x29 = boys(2, x28)
    x30 = x1 * x20 * x29
    x31 = 2.0 * x24 + x30
    x32 = x1 * (x17 - x22)
    x33 = 2.0 * x23
    x34 = x6 * boys(4, x15)
    x35 = 2.0 * x3
    x36 = -x13 * x35 * (x16 * x19 * x20 - x34 * x4) - x18 * x33 + x32
    x37 = x1 * x23
    x38 = A[0] - B[0]
    x39 = x24 + x30
    x40 = 1.732050807568877
    x41 = A[1] - B[1]
    x42 = A[2] - B[2]
    x43 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0
        * x5 ** (-2.5)
        * numpy.exp(-ax * bx * x1 * (x38**2 + x41**2 + x42**2))
    )
    x44 = x40 * x43
    x45 = 0.3333333333333333 * x44
    x46 = x6 * boys(3, x28)
    x47 = -x43 * (-2.0 * x1 * (x18 * x20 * x29 - x3 * x46) + x3 * x36 + x31 * x38)
    x48 = x33 * x38 + x36
    x49 = x45 * x48
    x50 = x11 * x43
    x51 = x7 + A[1]
    x52 = -x51
    x53 = x17 * x9 - x20 * x21 * x52
    x54 = x1 * x53
    x55 = -x54
    x56 = -x16 * x20 * x52 + x34 * x9
    x57 = x13 * x4
    x58 = x19 * x53 - x56 * x57
    x59 = x3 * x58
    x60 = x55 + x59
    x61 = x3 * x43
    x62 = 0.6666666666666667 * x40
    x63 = x61 * x62
    x64 = x31 * x41
    x65 = -x37
    x66 = x58 * x8
    x67 = x65 + 2.0 * x66
    x68 = x53 * x8
    x69 = x30 + 2.0 * x68
    x70 = x1 * x69
    x71 = x3 * x67 - 0.5 * x70
    x72 = x55 + 2.0 * x59
    x73 = x23 * x41
    x74 = x73 * x8
    x75 = x65 + x66
    x76 = x43 * x8
    x77 = x62 * x76
    x78 = 0.6666666666666667 * x44
    x79 = x27 * x78
    x80 = x10 + A[2]
    x81 = -x80
    x82 = x12 * x17 - x20 * x21 * x81
    x83 = -x82
    x84 = x12 * x34 - x16 * x20 * x81
    x85 = -x84
    x86 = -x19 * x83 + x57 * x85
    x87 = x3 * x86
    x88 = x1 * x82
    x89 = -x88
    x90 = x87 + x89
    x91 = x31 * x42
    x92 = 2.0 * x87 + x89
    x93 = x11 * x86
    x94 = x65 + 2.0 * x93
    x95 = x11 * x82
    x96 = x30 + 2.0 * x95
    x97 = x1 * x96
    x98 = -0.5 * x97
    x99 = x3 * x94 + x98
    x100 = x23 * x42
    x101 = x26 * x78
    x102 = x100 * x11
    x103 = x65 + x93
    x104 = x50 * x62
    x105 = x38 * x53
    x106 = x105 * x3
    x107 = x38 * x69
    x108 = x30 + x68
    x109 = 2.0 * x53
    x110 = 2.0 * x8
    x111 = -x109 * x51 + x110 * x13 * x56 + x32
    x112 = x109 * x41 + x111
    x113 = x112 * x45
    x114 = x41 * x69
    x115 = -x111 * x8 + 2.0 * x54
    x116 = x42 * x53
    x117 = x13 * x85 * x9 - x52 * x83
    x118 = x25 * x78
    x119 = x42 * x69
    x120 = x117 * x8
    x121 = 2.0 * x120 + x89
    x122 = x11 * x116
    x123 = x11 * x117
    x124 = 2.0 * x123 + x55
    x125 = x120 + x89
    x126 = x124 * x8 + x98
    x127 = x123 + x55
    x128 = x38 * x82
    x129 = x128 * x3
    x130 = x38 * x96
    x131 = x30 + x95
    x132 = x41 * x82
    x133 = x132 * x8
    x134 = x41 * x96
    x135 = 2.0 * x82
    x136 = 2.0 * x11
    x137 = x13 * x136 * x84 - x135 * x80 + x32
    x138 = x135 * x42 + x137
    x139 = x138 * x45
    x140 = -x11 * x137 + 2.0 * x88
    x141 = -x140 + x42 * x96

    # 54 item(s)
    result[0, 0, 0] = numpy.sum(
        -x45 * (-x1 * x31 + x3 * (x3 * x36 - 2.0 * x37) + x35 * x38 * x39)
    )
    result[0, 0, 1] = numpy.sum(x47 * x8)
    result[0, 0, 2] = numpy.sum(x11 * x47)
    result[0, 0, 3] = numpy.sum(-x26 * x49)
    result[0, 0, 4] = numpy.sum(-x48 * x50 * x8)
    result[0, 0, 5] = numpy.sum(-x27 * x49)
    result[0, 1, 0] = numpy.sum(-x63 * (x39 * x41 + x60))
    result[0, 1, 1] = numpy.sum(-x43 * (x64 * x8 + x71))
    result[0, 1, 2] = numpy.sum(-x50 * (x64 + x72))
    result[0, 1, 3] = numpy.sum(-x77 * (x74 + x75))
    result[0, 1, 4] = numpy.sum(-x50 * (x67 + 2.0 * x74))
    result[0, 1, 5] = numpy.sum(-x79 * (x58 + x73))
    result[0, 2, 0] = numpy.sum(-x63 * (x39 * x42 + x90))
    result[0, 2, 1] = numpy.sum(-x76 * (x91 + x92))
    result[0, 2, 2] = numpy.sum(-x43 * (x11 * x91 + x99))
    result[0, 2, 3] = numpy.sum(-x101 * (x100 + x86))
    result[0, 2, 4] = numpy.sum(-x76 * (2.0 * x102 + x94))
    result[0, 2, 5] = numpy.sum(-x104 * (x102 + x103))
    result[1, 0, 0] = numpy.sum(-x63 * (x106 + x60))
    result[1, 0, 1] = numpy.sum(-x43 * (x107 * x3 + x71))
    result[1, 0, 2] = numpy.sum(-x50 * (2.0 * x106 + x72))
    result[1, 0, 3] = numpy.sum(-x77 * (x108 * x38 + x75))
    result[1, 0, 4] = numpy.sum(-x50 * (x107 + x67))
    result[1, 0, 5] = numpy.sum(-x79 * (x105 + x58))
    result[1, 1, 0] = numpy.sum(-x113 * x25)
    result[1, 1, 1] = numpy.sum(x61 * (-x114 + x115))
    result[1, 1, 2] = numpy.sum(-x112 * x3 * x50)
    result[1, 1, 3] = numpy.sum(x45 * (-x108 * x110 * x41 + x115 * x8 + x70))
    result[1, 1, 4] = numpy.sum(
        -x50 * (-2.0 * x1 * (x20 * x29 * x51 - x46 * x8) + x111 * x8 + x114)
    )
    result[1, 1, 5] = numpy.sum(-x113 * x27)
    result[1, 2, 0] = numpy.sum(-x118 * (x116 + x117))
    result[1, 2, 1] = numpy.sum(-x61 * (x119 + x121))
    result[1, 2, 2] = numpy.sum(-x61 * (2.0 * x122 + x124))
    result[1, 2, 3] = numpy.sum(-x77 * (x108 * x42 + x125))
    result[1, 2, 4] = numpy.sum(-x43 * (x11 * x119 + x126))
    result[1, 2, 5] = numpy.sum(-x104 * (x122 + x127))
    result[2, 0, 0] = numpy.sum(-x63 * (x129 + x90))
    result[2, 0, 1] = numpy.sum(-x76 * (2.0 * x129 + x92))
    result[2, 0, 2] = numpy.sum(-x43 * (x130 * x3 + x99))
    result[2, 0, 3] = numpy.sum(-x101 * (x128 + x86))
    result[2, 0, 4] = numpy.sum(-x76 * (x130 + x94))
    result[2, 0, 5] = numpy.sum(-x104 * (x103 + x131 * x38))
    result[2, 1, 0] = numpy.sum(-x118 * (x117 + x132))
    result[2, 1, 1] = numpy.sum(-x61 * (x121 + 2.0 * x133))
    result[2, 1, 2] = numpy.sum(-x61 * (x124 + x134))
    result[2, 1, 3] = numpy.sum(-x77 * (x125 + x133))
    result[2, 1, 4] = numpy.sum(-x43 * (x126 + x134 * x8))
    result[2, 1, 5] = numpy.sum(-x104 * (x127 + x131 * x41))
    result[2, 2, 0] = numpy.sum(-x139 * x25)
    result[2, 2, 1] = numpy.sum(-x138 * x3 * x76)
    result[2, 2, 2] = numpy.sum(-x141 * x61)
    result[2, 2, 3] = numpy.sum(-x139 * x26)
    result[2, 2, 4] = numpy.sum(-x141 * x76)
    result[2, 2, 5] = numpy.sum(x45 * (x11 * x140 - x131 * x136 * x42 + x97))
    return result


def int3c2e3d_sph_113(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pp|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3, 10), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = 0.5 / (ax + bx)
    x5 = x3**2
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = x7**2
    x9 = -x1 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = x10**2
    x12 = cx + x0
    x13 = x12 ** (-1.0)
    x14 = x0 * x13
    x15 = cx * x14 * (x11 + x5 + x8)
    x16 = boys(4, x15)
    x17 = x12 ** (-1.5)
    x18 = 17.49341832762486
    x19 = A[0] - B[0]
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x1 * (x19**2 + x20**2 + x21**2))
    x23 = 2.0 * x18 * x22
    x24 = x1 * x23
    x25 = x17 * x24
    x26 = x16 * x25
    x27 = cx ** (-1.0)
    x28 = x12 ** (-0.5)
    x29 = boys(3, x15)
    x30 = x4 * (2.0 * x1 * x18 * x22 * x27 * x28 * x29 - x26)
    x31 = -x2 - A[0]
    x32 = 2.0 * x1 * x18 * x22 * x27 * x28 * x29 * x31 - x26 * x3
    x33 = x25 * boys(5, x15)
    x34 = cx * x13
    x35 = x3 * x34
    x36 = (
        x30 + x31 * x32 - x35 * (2.0 * x1 * x16 * x18 * x22 * x27 * x28 * x31 - x3 * x33)
    )
    x37 = x3 * x36
    x38 = x32 * x4
    x39 = 2.0 * x38
    x40 = x14 * x3
    x41 = x3 * x32
    x42 = x27 * x29
    x43 = x24 * x28 * x4 * x42
    x44 = x41 + x43
    x45 = x14 * x4
    x46 = 2.0 * x45
    x47 = x23 * x4 * x42
    x48 = x17 * x47
    x49 = x3 * x48 + x40 * x44
    x50 = x0 * x12 ** (-2.5) * x47
    x51 = x40 * x49 + x5 * x50
    x52 = x14 * x19
    x53 = da * db * dc
    x54 = 0.2581988897471611 * x53
    x55 = x14 * x7
    x56 = x48 * x7
    x57 = x41 * x55 + x56
    x58 = x3 * x50
    x59 = x40 * x57 + x58 * x7
    x60 = 0.5773502691896258 * x53
    x61 = x10 * x14
    x62 = x10 * x48
    x63 = x41 * x61 + x62
    x64 = x10 * x58 + x40 * x63
    x65 = x0**2 / x12**2
    x66 = x65 * x8
    x67 = x50 * x8
    x68 = x41 * x66 + x67
    x69 = x65 * x7
    x70 = x10 * x69
    x71 = x10 * x50 * x7
    x72 = x41 * x70 + x71
    x73 = x11 * x65
    x74 = x11 * x50
    x75 = x41 * x73 + x74
    x76 = x7**3
    x77 = x0**3 / x12**3
    x78 = x36 * x77
    x79 = x76 * x77
    x80 = x19 * x32
    x81 = x77 * x8
    x82 = x10 * x81
    x83 = x11 * x7
    x84 = x77 * x83
    x85 = x10**3
    x86 = x77 * x85
    x87 = -x6 - A[1]
    x88 = 2.0 * x1 * x18 * x22 * x27 * x28 * x29 * x87 - x26 * x7
    x89 = x4 * x88
    x90 = 2.0 * x1 * x16 * x18 * x22 * x27 * x28 * x87 - x33 * x7
    x91 = x31 * x88 - x35 * x90
    x92 = x3 * x91
    x93 = x5 * x65
    x94 = x14 * (x40**2 * (2.0 * x89 + x92) + x89 * x93)
    x95 = x14 * x20
    x96 = x7 * x88
    x97 = x43 + x96
    x98 = x14 * x97
    x99 = x4 * x98
    x100 = x7 * x91
    x101 = x100 + x38
    x102 = x3 * x65
    x103 = x102 * x4
    x104 = x14 * (x103 * x97 + x40 * (x101 * x40 + x99))
    x105 = x61 * x89
    x106 = x14 * (x10 * x102 * x89 + x40 * (x105 + x61 * x92))
    x107 = x56 + x7 * x98
    x108 = x107 * x45
    x109 = x55 * (x101 + x38)
    x110 = x14 * (x108 + x109 * x40)
    x111 = x61 * x96 + x62
    x112 = x111 * x45
    x113 = x38 * x61
    x114 = x100 * x61 + x113
    x115 = x14 * (x112 + x114 * x40)
    x116 = x73 * x89
    x117 = x14 * (x116 + x73 * x92)
    x118 = x14 * (x109 * x55 + x38 * x66)
    x119 = x20 * x32
    x120 = x14 * (x114 * x55 + x38 * x70)
    x121 = x38 * x73
    x122 = x14 * (x100 * x73 + x121)
    x123 = x86 * x91
    x124 = -x9 - A[2]
    x125 = 2.0 * x1 * x124 * x18 * x22 * x27 * x28 * x29 - x10 * x26
    x126 = x125 * x4
    x127 = 2.0 * x1 * x124 * x16 * x18 * x22 * x27 * x28 - x10 * x33
    x128 = x125 * x31 - x127 * x35
    x129 = x128 * x3
    x130 = x14 * (x126 * x93 + x40**2 * (2.0 * x126 + x129))
    x131 = x14 * x21
    x132 = x126 * x55
    x133 = x3 * x69
    x134 = x14 * (x126 * x133 + x40 * (x129 * x55 + x132))
    x135 = x10 * x125 + x43
    x136 = x135 * x45
    x137 = x10 * x128 + x38
    x138 = x14 * (x103 * x135 + x40 * (x136 + x137 * x40))
    x139 = x126 * x66
    x140 = x14 * (x129 * x66 + x139)
    x141 = x135 * x4 * x69
    x142 = x14 * (x133 * x137 + x141)
    x143 = x135 * x61 + x62
    x144 = x143 * x45
    x145 = x113 + x137 * x61
    x146 = x14 * (x144 + x145 * x40)
    x147 = x128 * x79
    x148 = x21 * x32
    x149 = x137 * x81
    x150 = x145 * x69
    x151 = x14 * (x121 + x145 * x61)
    x152 = x3**3 * x77
    x153 = x19 * x88
    x154 = x5 * x77
    x155 = x154 * x97
    x156 = x10 * x154
    x157 = x102 * x19
    x158 = x3 * x77
    x159 = x11 * x158
    x160 = x107 * x55 + x67
    x161 = x111 * x55 + x71
    x162 = x73 * x96 + x74
    x163 = x34 * x7
    x164 = -x163 * x90 + x30 + x87 * x88
    x165 = x20 * x88
    x166 = x164 * x7
    x167 = 2.0 * x89
    x168 = x166 + x167
    x169 = x168 * x55 + 2.0 * x99
    x170 = x102 * x20
    x171 = x61 * (x166 + x167)
    x172 = x125 * x87 - x127 * x163
    x173 = x152 * x172
    x174 = x21 * x88
    x175 = x126 + x172 * x7
    x176 = x154 * x175
    x177 = x10 * x172 + x89
    x178 = x154 * x177
    x179 = x132 + x175 * x55
    x180 = x102 * x179
    x181 = x102 * x21
    x182 = x136 + x177 * x55
    x183 = x102 * x182
    x184 = x105 + x177 * x61
    x185 = x102 * x184
    x186 = x14 * (x139 + x179 * x55)
    x187 = x14 * (x141 + x182 * x55)
    x188 = x14 * (x144 + x184 * x55)
    x189 = x14 * (x116 + x184 * x61)
    x190 = x125 * x19
    x191 = x154 * x7
    x192 = x135 * x19
    x193 = x3 * x81
    x194 = x158 * x7
    x195 = x143 * x69
    x196 = x143 * x61 + x74
    x197 = x125 * x20
    x198 = x135 * x20
    x199 = -x10 * x127 * x34 + x124 * x125 + x30
    x200 = x125 * x21
    x201 = x10 * x199 + 2.0 * x126
    x202 = x135 * x21
    x203 = 2.0 * x136 + x201 * x61

    # 90 item(s)
    result[0, 0, 0] = numpy.sum(
        x54 * (x14 * (x40 * (x40 * (x37 + x39) + x44 * x46) + x46 * x49) + x51 * x52)
    )
    result[0, 0, 1] = numpy.sum(
        x60 * (x14 * (x40 * x55 * (x37 + x39) + x46 * x57) + x52 * x59)
    )
    result[0, 0, 2] = numpy.sum(
        x60 * (x14 * (x40 * x61 * (x37 + x39) + x46 * x63) + x52 * x64)
    )
    result[0, 0, 3] = numpy.sum(x60 * (x14 * x66 * (x37 + x39) + x52 * x68))
    result[0, 0, 4] = numpy.sum(x53 * (x14 * x70 * (x37 + x39) + x52 * x72))
    result[0, 0, 5] = numpy.sum(x60 * (x14 * x73 * (x37 + x39) + x52 * x75))
    result[0, 0, 6] = numpy.sum(x54 * (x76 * x78 + x79 * x80))
    result[0, 0, 7] = numpy.sum(x60 * (x10 * x78 * x8 + x80 * x82))
    result[0, 0, 8] = numpy.sum(x60 * (x78 * x83 + x80 * x84))
    result[0, 0, 9] = numpy.sum(x54 * (x78 * x85 + x80 * x86))
    result[0, 1, 0] = numpy.sum(x54 * (x51 * x95 + x94))
    result[0, 1, 1] = numpy.sum(x60 * (x104 + x59 * x95))
    result[0, 1, 2] = numpy.sum(x60 * (x106 + x64 * x95))
    result[0, 1, 3] = numpy.sum(x60 * (x110 + x68 * x95))
    result[0, 1, 4] = numpy.sum(x53 * (x115 + x72 * x95))
    result[0, 1, 5] = numpy.sum(x60 * (x117 + x75 * x95))
    result[0, 1, 6] = numpy.sum(x54 * (x118 + x119 * x79))
    result[0, 1, 7] = numpy.sum(x60 * (x119 * x82 + x120))
    result[0, 1, 8] = numpy.sum(x60 * (x119 * x84 + x122))
    result[0, 1, 9] = numpy.sum(x54 * (x119 * x86 + x123))
    result[0, 2, 0] = numpy.sum(x54 * (x130 + x131 * x51))
    result[0, 2, 1] = numpy.sum(x60 * (x131 * x59 + x134))
    result[0, 2, 2] = numpy.sum(x60 * (x131 * x64 + x138))
    result[0, 2, 3] = numpy.sum(x60 * (x131 * x68 + x140))
    result[0, 2, 4] = numpy.sum(x53 * (x131 * x72 + x142))
    result[0, 2, 5] = numpy.sum(x60 * (x131 * x75 + x146))
    result[0, 2, 6] = numpy.sum(x54 * (x147 + x148 * x79))
    result[0, 2, 7] = numpy.sum(x60 * (x148 * x82 + x149))
    result[0, 2, 8] = numpy.sum(x60 * (x148 * x84 + x150))
    result[0, 2, 9] = numpy.sum(x54 * (x148 * x86 + x151))
    result[1, 0, 0] = numpy.sum(x54 * (x152 * x153 + x94))
    result[1, 0, 1] = numpy.sum(x60 * (x104 + x155 * x19))
    result[1, 0, 2] = numpy.sum(x60 * (x106 + x153 * x156))
    result[1, 0, 3] = numpy.sum(x60 * (x107 * x157 + x110))
    result[1, 0, 4] = numpy.sum(x53 * (x111 * x157 + x115))
    result[1, 0, 5] = numpy.sum(x60 * (x117 + x153 * x159))
    result[1, 0, 6] = numpy.sum(x54 * (x118 + x160 * x52))
    result[1, 0, 7] = numpy.sum(x60 * (x120 + x161 * x52))
    result[1, 0, 8] = numpy.sum(x60 * (x122 + x162 * x52))
    result[1, 0, 9] = numpy.sum(x54 * (x123 + x153 * x86))
    result[1, 1, 0] = numpy.sum(x152 * x54 * (x164 + x165))
    result[1, 1, 1] = numpy.sum(x60 * (x154 * x168 + x155 * x20))
    result[1, 1, 2] = numpy.sum(x156 * x60 * (x164 + x165))
    result[1, 1, 3] = numpy.sum(x60 * (x102 * x169 + x107 * x170))
    result[1, 1, 4] = numpy.sum(x53 * (x102 * x171 + x111 * x170))
    result[1, 1, 5] = numpy.sum(x159 * x60 * (x164 + x165))
    result[1, 1, 6] = numpy.sum(x54 * (x14 * (2.0 * x108 + x169 * x55) + x160 * x95))
    result[1, 1, 7] = numpy.sum(x60 * (x14 * (2.0 * x112 + x171 * x55) + x161 * x95))
    result[1, 1, 8] = numpy.sum(x60 * (x14 * x73 * (x166 + x167) + x162 * x95))
    result[1, 1, 9] = numpy.sum(x54 * x86 * (x164 + x165))
    result[1, 2, 0] = numpy.sum(x54 * (x152 * x174 + x173))
    result[1, 2, 1] = numpy.sum(x60 * (x155 * x21 + x176))
    result[1, 2, 2] = numpy.sum(x60 * (x156 * x174 + x178))
    result[1, 2, 3] = numpy.sum(x60 * (x107 * x181 + x180))
    result[1, 2, 4] = numpy.sum(x53 * (x111 * x181 + x183))
    result[1, 2, 5] = numpy.sum(x60 * (x159 * x174 + x185))
    result[1, 2, 6] = numpy.sum(x54 * (x131 * x160 + x186))
    result[1, 2, 7] = numpy.sum(x60 * (x131 * x161 + x187))
    result[1, 2, 8] = numpy.sum(x60 * (x131 * x162 + x188))
    result[1, 2, 9] = numpy.sum(x54 * (x174 * x86 + x189))
    result[2, 0, 0] = numpy.sum(x54 * (x130 + x152 * x190))
    result[2, 0, 1] = numpy.sum(x60 * (x134 + x190 * x191))
    result[2, 0, 2] = numpy.sum(x60 * (x138 + x154 * x192))
    result[2, 0, 3] = numpy.sum(x60 * (x140 + x190 * x193))
    result[2, 0, 4] = numpy.sum(x53 * (x142 + x192 * x194))
    result[2, 0, 5] = numpy.sum(x60 * (x143 * x157 + x146))
    result[2, 0, 6] = numpy.sum(x54 * (x147 + x190 * x79))
    result[2, 0, 7] = numpy.sum(x60 * (x149 + x192 * x81))
    result[2, 0, 8] = numpy.sum(x60 * (x150 + x19 * x195))
    result[2, 0, 9] = numpy.sum(x54 * (x151 + x196 * x52))
    result[2, 1, 0] = numpy.sum(x54 * (x152 * x197 + x173))
    result[2, 1, 1] = numpy.sum(x60 * (x176 + x191 * x197))
    result[2, 1, 2] = numpy.sum(x60 * (x154 * x198 + x178))
    result[2, 1, 3] = numpy.sum(x60 * (x180 + x193 * x197))
    result[2, 1, 4] = numpy.sum(x53 * (x183 + x194 * x198))
    result[2, 1, 5] = numpy.sum(x60 * (x143 * x170 + x185))
    result[2, 1, 6] = numpy.sum(x54 * (x186 + x197 * x79))
    result[2, 1, 7] = numpy.sum(x60 * (x187 + x198 * x81))
    result[2, 1, 8] = numpy.sum(x60 * (x188 + x195 * x20))
    result[2, 1, 9] = numpy.sum(x54 * (x189 + x196 * x95))
    result[2, 2, 0] = numpy.sum(x152 * x54 * (x199 + x200))
    result[2, 2, 1] = numpy.sum(x191 * x60 * (x199 + x200))
    result[2, 2, 2] = numpy.sum(x154 * x60 * (x201 + x202))
    result[2, 2, 3] = numpy.sum(x193 * x60 * (x199 + x200))
    result[2, 2, 4] = numpy.sum(x194 * x53 * (x201 + x202))
    result[2, 2, 5] = numpy.sum(x60 * (x102 * x203 + x143 * x181))
    result[2, 2, 6] = numpy.sum(x54 * x79 * (x199 + x200))
    result[2, 2, 7] = numpy.sum(x60 * x81 * (x201 + x202))
    result[2, 2, 8] = numpy.sum(x60 * (x195 * x21 + x203 * x69))
    result[2, 2, 9] = numpy.sum(x54 * (x131 * x196 + x14 * (2.0 * x144 + x203 * x61)))
    return result


def int3c2e3d_sph_114(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pp|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 3, 15), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = 0.5 / (ax + bx)
    x5 = x3**2
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = x7**2
    x9 = -x1 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = x10**2
    x12 = cx + x0
    x13 = x12 ** (-1.0)
    x14 = x0 * x13
    x15 = cx * x14 * (x11 + x5 + x8)
    x16 = boys(5, x15)
    x17 = x12 ** (-1.5)
    x18 = 17.49341832762486
    x19 = A[0] - B[0]
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x1 * (x19**2 + x20**2 + x21**2))
    x23 = 2.0 * x18 * x22
    x24 = x1 * x23
    x25 = x17 * x24
    x26 = x16 * x25
    x27 = cx ** (-1.0)
    x28 = x12 ** (-0.5)
    x29 = boys(4, x15)
    x30 = x4 * (2.0 * x1 * x18 * x22 * x27 * x28 * x29 - x26)
    x31 = -x2 - A[0]
    x32 = 2.0 * x1 * x18 * x22 * x27 * x28 * x29 * x31 - x26 * x3
    x33 = x25 * boys(6, x15)
    x34 = cx * x13
    x35 = x3 * x34
    x36 = (
        x30 + x31 * x32 - x35 * (2.0 * x1 * x16 * x18 * x22 * x27 * x28 * x31 - x3 * x33)
    )
    x37 = x3 * x36
    x38 = x32 * x4
    x39 = 2.0 * x38
    x40 = x14 * x3
    x41 = x3 * x32
    x42 = x27 * x29
    x43 = x24 * x28 * x4 * x42
    x44 = x41 + x43
    x45 = x14 * x4
    x46 = 2.0 * x45
    x47 = x23 * x4 * x42
    x48 = x17 * x47
    x49 = x3 * x48 + x40 * x44
    x50 = x47 * x5
    x51 = x0 * x12 ** (-2.5)
    x52 = x40 * x49 + x50 * x51
    x53 = x3**3
    x54 = x0**2
    x55 = x12 ** (-3.5) * x54
    x56 = x47 * x55
    x57 = x40 * x52 + x53 * x56
    x58 = x14 * x19
    x59 = da * db * dc
    x60 = 0.09759000729485332 * x59
    x61 = x14 * x7
    x62 = x48 * x7
    x63 = x41 * x61 + x62
    x64 = x47 * x51
    x65 = x3 * x64
    x66 = x40 * x63 + x65 * x7
    x67 = x50 * x55
    x68 = x40 * x66 + x67 * x7
    x69 = 0.2581988897471611 * x59
    x70 = x10 * x14
    x71 = x10 * x48
    x72 = x41 * x70 + x71
    x73 = x10 * x65 + x40 * x72
    x74 = x10 * x67 + x40 * x73
    x75 = x54 / x12**2
    x76 = x75 * x8
    x77 = x64 * x8
    x78 = x41 * x76 + x77
    x79 = x3 * x8
    x80 = x40 * x78 + x56 * x79
    x81 = 0.3333333333333333 * x59
    x82 = x7 * x75
    x83 = x10 * x82
    x84 = x10 * x7
    x85 = x64 * x84
    x86 = x41 * x83 + x85
    x87 = x3 * x56 * x84 + x40 * x86
    x88 = 1.732050807568877 * x81
    x89 = x11 * x75
    x90 = x11 * x64
    x91 = x41 * x89 + x90
    x92 = x11 * x3
    x93 = x40 * x91 + x56 * x92
    x94 = x7**3
    x95 = x0**3 / x12**3
    x96 = x94 * x95
    x97 = x56 * x94
    x98 = x41 * x96 + x97
    x99 = x8 * x95
    x100 = x10 * x99
    x101 = x10 * x56 * x8
    x102 = x100 * x41 + x101
    x103 = x7 * x95
    x104 = x103 * x11
    x105 = x11 * x56 * x7
    x106 = x104 * x41 + x105
    x107 = x10**3
    x108 = x107 * x95
    x109 = x107 * x56
    x110 = x108 * x41 + x109
    x111 = x7**4
    x112 = x0**4 / x12**4
    x113 = x112 * x36
    x114 = x111 * x112
    x115 = x19 * x32
    x116 = x112 * x94
    x117 = x10 * x116
    x118 = x11 * x8
    x119 = x112 * x115
    x120 = x107 * x7
    x121 = x10**4
    x122 = x112 * x121
    x123 = -x6 - A[1]
    x124 = 2.0 * x1 * x123 * x18 * x22 * x27 * x28 * x29 - x26 * x7
    x125 = x124 * x4
    x126 = 2.0 * x1 * x123 * x16 * x18 * x22 * x27 * x28 - x33 * x7
    x127 = x124 * x31 - x126 * x35
    x128 = x127 * x3
    x129 = x5 * x75
    x130 = x53 * x95
    x131 = x14 * (x125 * x130 + x40 * (x125 * x129 + x40**2 * (2.0 * x125 + x128)))
    x132 = x14 * x20
    x133 = x124 * x7
    x134 = x133 + x43
    x135 = x134 * x14
    x136 = x135 * x4
    x137 = x127 * x7
    x138 = x137 + x38
    x139 = x3 * x75
    x140 = x134 * x4
    x141 = x5 * x95
    x142 = x14 * (x140 * x141 + x40 * (x139 * x140 + x40 * (x136 + x138 * x40)))
    x143 = x125 * x70
    x144 = x10 * x125
    x145 = x14 * (x141 * x144 + x40 * (x139 * x144 + x40 * (x128 * x70 + x143)))
    x146 = x135 * x7 + x62
    x147 = x146 * x45
    x148 = x61 * (x138 + x38)
    x149 = x139 * x4
    x150 = x14 * (x146 * x149 + x40 * (x147 + x148 * x40))
    x151 = x133 * x70 + x71
    x152 = x151 * x45
    x153 = x38 * x70
    x154 = x137 * x70 + x153
    x155 = x14 * (x149 * x151 + x40 * (x152 + x154 * x40))
    x156 = x125 * x89
    x157 = x14 * (x125 * x92 * x95 + x40 * (x128 * x89 + x156))
    x158 = x146 * x61 + x77
    x159 = x158 * x45
    x160 = x148 * x61 + x38 * x76
    x161 = x14 * (x159 + x160 * x40)
    x162 = x151 * x61 + x85
    x163 = x162 * x45
    x164 = x154 * x61 + x38 * x83
    x165 = x14 * (x163 + x164 * x40)
    x166 = x133 * x89 + x90
    x167 = x166 * x45
    x168 = x38 * x89
    x169 = x137 * x89 + x168
    x170 = x14 * (x167 + x169 * x40)
    x171 = x108 * x125
    x172 = x14 * (x108 * x128 + x171)
    x173 = x14 * (x160 * x61 + x38 * x96)
    x174 = x20 * x32
    x175 = x14 * (x100 * x38 + x164 * x61)
    x176 = x14 * (x104 * x38 + x169 * x61)
    x177 = x112 * x174
    x178 = x108 * x38
    x179 = x14 * (x108 * x137 + x178)
    x180 = x122 * x127
    x181 = -x9 - A[2]
    x182 = 2.0 * x1 * x18 * x181 * x22 * x27 * x28 * x29 - x10 * x26
    x183 = x182 * x4
    x184 = 2.0 * x1 * x16 * x18 * x181 * x22 * x27 * x28 - x10 * x33
    x185 = x182 * x31 - x184 * x35
    x186 = x185 * x3
    x187 = x14 * (x130 * x183 + x40 * (x129 * x183 + x40**2 * (2.0 * x183 + x186)))
    x188 = x14 * x21
    x189 = x183 * x61
    x190 = x3 * x82
    x191 = x14 * (x141 * x183 * x7 + x40 * (x183 * x190 + x40 * (x186 * x61 + x189)))
    x192 = x10 * x182 + x43
    x193 = x192 * x45
    x194 = x10 * x185 + x38
    x195 = x192 * x4
    x196 = x14 * (x141 * x195 + x40 * (x149 * x192 + x40 * (x193 + x194 * x40)))
    x197 = x183 * x76
    x198 = x14 * (x183 * x3 * x99 + x40 * (x186 * x76 + x197))
    x199 = x195 * x82
    x200 = x194 * x3
    x201 = x103 * x3
    x202 = x14 * (x195 * x201 + x40 * (x199 + x200 * x82))
    x203 = x192 * x70 + x71
    x204 = x203 * x45
    x205 = x153 + x194 * x70
    x206 = x14 * (x149 * x203 + x40 * (x204 + x205 * x40))
    x207 = x183 * x96
    x208 = x14 * (x186 * x96 + x207)
    x209 = x195 * x99
    x210 = x14 * (x200 * x99 + x209)
    x211 = x203 * x4 * x82
    x212 = x14 * (x190 * x205 + x211)
    x213 = x203 * x70 + x90
    x214 = x213 * x45
    x215 = x168 + x205 * x70
    x216 = x14 * (x214 + x215 * x40)
    x217 = x114 * x185
    x218 = x21 * x32
    x219 = x116 * x194
    x220 = x205 * x99
    x221 = x112 * x218
    x222 = x215 * x82
    x223 = x14 * (x178 + x215 * x70)
    x224 = x112 * x3**4
    x225 = x124 * x19
    x226 = x112 * x53
    x227 = x134 * x226
    x228 = x10 * x226
    x229 = x141 * x19
    x230 = x11 * x5
    x231 = x112 * x225
    x232 = x139 * x19
    x233 = x107 * x3
    x234 = x158 * x61 + x97
    x235 = x101 + x162 * x61
    x236 = x105 + x166 * x61
    x237 = x108 * x133 + x109
    x238 = x34 * x7
    x239 = x123 * x124 - x126 * x238 + x30
    x240 = x124 * x20
    x241 = x239 * x7
    x242 = 2.0 * x125
    x243 = x241 + x242
    x244 = 2.0 * x136 + x243 * x61
    x245 = x141 * x20
    x246 = x70 * (x241 + x242)
    x247 = x112 * x239
    x248 = x112 * x240
    x249 = 2.0 * x147 + x244 * x61
    x250 = x139 * x20
    x251 = 2.0 * x152 + x246 * x61
    x252 = x89 * (x241 + x242)
    x253 = x123 * x182 - x184 * x238
    x254 = x224 * x253
    x255 = x124 * x21
    x256 = x183 + x253 * x7
    x257 = x226 * x256
    x258 = x10 * x253 + x125
    x259 = x226 * x258
    x260 = x189 + x256 * x61
    x261 = x141 * x260
    x262 = x141 * x21
    x263 = x193 + x258 * x61
    x264 = x141 * x263
    x265 = x143 + x258 * x70
    x266 = x141 * x265
    x267 = x112 * x255
    x268 = x197 + x260 * x61
    x269 = x139 * x268
    x270 = x139 * x21
    x271 = x199 + x263 * x61
    x272 = x139 * x271
    x273 = x204 + x265 * x61
    x274 = x139 * x273
    x275 = x156 + x265 * x70
    x276 = x139 * x275
    x277 = x14 * (x207 + x268 * x61)
    x278 = x14 * (x209 + x271 * x61)
    x279 = x14 * (x211 + x273 * x61)
    x280 = x14 * (x214 + x275 * x61)
    x281 = x14 * (x171 + x275 * x70)
    x282 = x182 * x19
    x283 = x226 * x7
    x284 = x19 * x192
    x285 = x112 * x5
    x286 = x285 * x8
    x287 = x285 * x7
    x288 = x116 * x3
    x289 = x112 * x79
    x290 = x201 * x203
    x291 = x203 * x99
    x292 = x213 * x82
    x293 = x109 + x213 * x70
    x294 = x182 * x20
    x295 = x192 * x20
    x296 = -x10 * x184 * x34 + x181 * x182 + x30
    x297 = x182 * x21
    x298 = x10 * x296 + 2.0 * x183
    x299 = x192 * x21
    x300 = 2.0 * x193 + x298 * x70
    x301 = 2.0 * x204 + x300 * x70

    # 135 item(s)
    result[0, 0, 0] = numpy.sum(
        x60
        * (
            x14 * (x40 * (x40 * (x40 * (x37 + x39) + x44 * x46) + x46 * x49) + x46 * x52)
            + x57 * x58
        )
    )
    result[0, 0, 1] = numpy.sum(
        x69
        * (x14 * (x40 * (x40 * x61 * (x37 + x39) + x46 * x63) + x46 * x66) + x58 * x68)
    )
    result[0, 0, 2] = numpy.sum(
        x69
        * (x14 * (x40 * (x40 * x70 * (x37 + x39) + x46 * x72) + x46 * x73) + x58 * x74)
    )
    result[0, 0, 3] = numpy.sum(
        x81 * (x14 * (x40 * x76 * (x37 + x39) + x46 * x78) + x58 * x80)
    )
    result[0, 0, 4] = numpy.sum(
        x88 * (x14 * (x40 * x83 * (x37 + x39) + x46 * x86) + x58 * x87)
    )
    result[0, 0, 5] = numpy.sum(
        x81 * (x14 * (x40 * x89 * (x37 + x39) + x46 * x91) + x58 * x93)
    )
    result[0, 0, 6] = numpy.sum(x69 * (x14 * x96 * (x37 + x39) + x58 * x98))
    result[0, 0, 7] = numpy.sum(x88 * (x100 * x14 * (x37 + x39) + x102 * x58))
    result[0, 0, 8] = numpy.sum(x88 * (x104 * x14 * (x37 + x39) + x106 * x58))
    result[0, 0, 9] = numpy.sum(x69 * (x108 * x14 * (x37 + x39) + x110 * x58))
    result[0, 0, 10] = numpy.sum(x60 * (x111 * x113 + x114 * x115))
    result[0, 0, 11] = numpy.sum(x69 * (x10 * x113 * x94 + x115 * x117))
    result[0, 0, 12] = numpy.sum(x118 * x81 * (x113 + x119))
    result[0, 0, 13] = numpy.sum(x120 * x69 * (x113 + x119))
    result[0, 0, 14] = numpy.sum(x60 * (x113 * x121 + x115 * x122))
    result[0, 1, 0] = numpy.sum(x60 * (x131 + x132 * x57))
    result[0, 1, 1] = numpy.sum(x69 * (x132 * x68 + x142))
    result[0, 1, 2] = numpy.sum(x69 * (x132 * x74 + x145))
    result[0, 1, 3] = numpy.sum(x81 * (x132 * x80 + x150))
    result[0, 1, 4] = numpy.sum(x88 * (x132 * x87 + x155))
    result[0, 1, 5] = numpy.sum(x81 * (x132 * x93 + x157))
    result[0, 1, 6] = numpy.sum(x69 * (x132 * x98 + x161))
    result[0, 1, 7] = numpy.sum(x88 * (x102 * x132 + x165))
    result[0, 1, 8] = numpy.sum(x88 * (x106 * x132 + x170))
    result[0, 1, 9] = numpy.sum(x69 * (x110 * x132 + x172))
    result[0, 1, 10] = numpy.sum(x60 * (x114 * x174 + x173))
    result[0, 1, 11] = numpy.sum(x69 * (x117 * x174 + x175))
    result[0, 1, 12] = numpy.sum(x81 * (x118 * x177 + x176))
    result[0, 1, 13] = numpy.sum(x69 * (x120 * x177 + x179))
    result[0, 1, 14] = numpy.sum(x60 * (x122 * x174 + x180))
    result[0, 2, 0] = numpy.sum(x60 * (x187 + x188 * x57))
    result[0, 2, 1] = numpy.sum(x69 * (x188 * x68 + x191))
    result[0, 2, 2] = numpy.sum(x69 * (x188 * x74 + x196))
    result[0, 2, 3] = numpy.sum(x81 * (x188 * x80 + x198))
    result[0, 2, 4] = numpy.sum(x88 * (x188 * x87 + x202))
    result[0, 2, 5] = numpy.sum(x81 * (x188 * x93 + x206))
    result[0, 2, 6] = numpy.sum(x69 * (x188 * x98 + x208))
    result[0, 2, 7] = numpy.sum(x88 * (x102 * x188 + x210))
    result[0, 2, 8] = numpy.sum(x88 * (x106 * x188 + x212))
    result[0, 2, 9] = numpy.sum(x69 * (x110 * x188 + x216))
    result[0, 2, 10] = numpy.sum(x60 * (x114 * x218 + x217))
    result[0, 2, 11] = numpy.sum(x69 * (x117 * x218 + x219))
    result[0, 2, 12] = numpy.sum(x81 * (x118 * x221 + x220))
    result[0, 2, 13] = numpy.sum(x69 * (x120 * x221 + x222))
    result[0, 2, 14] = numpy.sum(x60 * (x122 * x218 + x223))
    result[1, 0, 0] = numpy.sum(x60 * (x131 + x224 * x225))
    result[1, 0, 1] = numpy.sum(x69 * (x142 + x19 * x227))
    result[1, 0, 2] = numpy.sum(x69 * (x145 + x225 * x228))
    result[1, 0, 3] = numpy.sum(x81 * (x146 * x229 + x150))
    result[1, 0, 4] = numpy.sum(x88 * (x151 * x229 + x155))
    result[1, 0, 5] = numpy.sum(x81 * (x157 + x230 * x231))
    result[1, 0, 6] = numpy.sum(x69 * (x158 * x232 + x161))
    result[1, 0, 7] = numpy.sum(x88 * (x162 * x232 + x165))
    result[1, 0, 8] = numpy.sum(x88 * (x166 * x232 + x170))
    result[1, 0, 9] = numpy.sum(x69 * (x172 + x231 * x233))
    result[1, 0, 10] = numpy.sum(x60 * (x173 + x234 * x58))
    result[1, 0, 11] = numpy.sum(x69 * (x175 + x235 * x58))
    result[1, 0, 12] = numpy.sum(x81 * (x176 + x236 * x58))
    result[1, 0, 13] = numpy.sum(x69 * (x179 + x237 * x58))
    result[1, 0, 14] = numpy.sum(x60 * (x122 * x225 + x180))
    result[1, 1, 0] = numpy.sum(x224 * x60 * (x239 + x240))
    result[1, 1, 1] = numpy.sum(x69 * (x20 * x227 + x226 * x243))
    result[1, 1, 2] = numpy.sum(x228 * x69 * (x239 + x240))
    result[1, 1, 3] = numpy.sum(x81 * (x141 * x244 + x146 * x245))
    result[1, 1, 4] = numpy.sum(x88 * (x141 * x246 + x151 * x245))
    result[1, 1, 5] = numpy.sum(x230 * x81 * (x247 + x248))
    result[1, 1, 6] = numpy.sum(x69 * (x139 * x249 + x158 * x250))
    result[1, 1, 7] = numpy.sum(x88 * (x139 * x251 + x162 * x250))
    result[1, 1, 8] = numpy.sum(x88 * (x139 * x252 + x166 * x250))
    result[1, 1, 9] = numpy.sum(x233 * x69 * (x247 + x248))
    result[1, 1, 10] = numpy.sum(x60 * (x132 * x234 + x14 * (2.0 * x159 + x249 * x61)))
    result[1, 1, 11] = numpy.sum(x69 * (x132 * x235 + x14 * (2.0 * x163 + x251 * x61)))
    result[1, 1, 12] = numpy.sum(x81 * (x132 * x236 + x14 * (2.0 * x167 + x252 * x61)))
    result[1, 1, 13] = numpy.sum(x69 * (x108 * x14 * (x241 + x242) + x132 * x237))
    result[1, 1, 14] = numpy.sum(x122 * x60 * (x239 + x240))
    result[1, 2, 0] = numpy.sum(x60 * (x224 * x255 + x254))
    result[1, 2, 1] = numpy.sum(x69 * (x21 * x227 + x257))
    result[1, 2, 2] = numpy.sum(x69 * (x228 * x255 + x259))
    result[1, 2, 3] = numpy.sum(x81 * (x146 * x262 + x261))
    result[1, 2, 4] = numpy.sum(x88 * (x151 * x262 + x264))
    result[1, 2, 5] = numpy.sum(x81 * (x230 * x267 + x266))
    result[1, 2, 6] = numpy.sum(x69 * (x158 * x270 + x269))
    result[1, 2, 7] = numpy.sum(x88 * (x162 * x270 + x272))
    result[1, 2, 8] = numpy.sum(x88 * (x166 * x270 + x274))
    result[1, 2, 9] = numpy.sum(x69 * (x233 * x267 + x276))
    result[1, 2, 10] = numpy.sum(x60 * (x188 * x234 + x277))
    result[1, 2, 11] = numpy.sum(x69 * (x188 * x235 + x278))
    result[1, 2, 12] = numpy.sum(x81 * (x188 * x236 + x279))
    result[1, 2, 13] = numpy.sum(x69 * (x188 * x237 + x280))
    result[1, 2, 14] = numpy.sum(x60 * (x122 * x255 + x281))
    result[2, 0, 0] = numpy.sum(x60 * (x187 + x224 * x282))
    result[2, 0, 1] = numpy.sum(x69 * (x191 + x282 * x283))
    result[2, 0, 2] = numpy.sum(x69 * (x196 + x226 * x284))
    result[2, 0, 3] = numpy.sum(x81 * (x198 + x282 * x286))
    result[2, 0, 4] = numpy.sum(x88 * (x202 + x284 * x287))
    result[2, 0, 5] = numpy.sum(x81 * (x203 * x229 + x206))
    result[2, 0, 6] = numpy.sum(x69 * (x208 + x282 * x288))
    result[2, 0, 7] = numpy.sum(x88 * (x210 + x284 * x289))
    result[2, 0, 8] = numpy.sum(x88 * (x19 * x290 + x212))
    result[2, 0, 9] = numpy.sum(x69 * (x213 * x232 + x216))
    result[2, 0, 10] = numpy.sum(x60 * (x114 * x282 + x217))
    result[2, 0, 11] = numpy.sum(x69 * (x116 * x284 + x219))
    result[2, 0, 12] = numpy.sum(x81 * (x19 * x291 + x220))
    result[2, 0, 13] = numpy.sum(x69 * (x19 * x292 + x222))
    result[2, 0, 14] = numpy.sum(x60 * (x223 + x293 * x58))
    result[2, 1, 0] = numpy.sum(x60 * (x224 * x294 + x254))
    result[2, 1, 1] = numpy.sum(x69 * (x257 + x283 * x294))
    result[2, 1, 2] = numpy.sum(x69 * (x226 * x295 + x259))
    result[2, 1, 3] = numpy.sum(x81 * (x261 + x286 * x294))
    result[2, 1, 4] = numpy.sum(x88 * (x264 + x287 * x295))
    result[2, 1, 5] = numpy.sum(x81 * (x203 * x245 + x266))
    result[2, 1, 6] = numpy.sum(x69 * (x269 + x288 * x294))
    result[2, 1, 7] = numpy.sum(x88 * (x272 + x289 * x295))
    result[2, 1, 8] = numpy.sum(x88 * (x20 * x290 + x274))
    result[2, 1, 9] = numpy.sum(x69 * (x213 * x250 + x276))
    result[2, 1, 10] = numpy.sum(x60 * (x114 * x294 + x277))
    result[2, 1, 11] = numpy.sum(x69 * (x116 * x295 + x278))
    result[2, 1, 12] = numpy.sum(x81 * (x20 * x291 + x279))
    result[2, 1, 13] = numpy.sum(x69 * (x20 * x292 + x280))
    result[2, 1, 14] = numpy.sum(x60 * (x132 * x293 + x281))
    result[2, 2, 0] = numpy.sum(x224 * x60 * (x296 + x297))
    result[2, 2, 1] = numpy.sum(x283 * x69 * (x296 + x297))
    result[2, 2, 2] = numpy.sum(x226 * x69 * (x298 + x299))
    result[2, 2, 3] = numpy.sum(x286 * x81 * (x296 + x297))
    result[2, 2, 4] = numpy.sum(x287 * x88 * (x298 + x299))
    result[2, 2, 5] = numpy.sum(x81 * (x141 * x300 + x203 * x262))
    result[2, 2, 6] = numpy.sum(x288 * x69 * (x296 + x297))
    result[2, 2, 7] = numpy.sum(x289 * x88 * (x298 + x299))
    result[2, 2, 8] = numpy.sum(x88 * (x201 * x300 + x21 * x290))
    result[2, 2, 9] = numpy.sum(x69 * (x139 * x301 + x213 * x270))
    result[2, 2, 10] = numpy.sum(x114 * x60 * (x296 + x297))
    result[2, 2, 11] = numpy.sum(x116 * x69 * (x298 + x299))
    result[2, 2, 12] = numpy.sum(x81 * (x21 * x291 + x300 * x99))
    result[2, 2, 13] = numpy.sum(x69 * (x21 * x292 + x301 * x82))
    result[2, 2, 14] = numpy.sum(x60 * (x14 * (2.0 * x214 + x301 * x70) + x188 * x293))
    return result


def int3c2e3d_sph_120(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pd|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 6, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = cx + x1
    x4 = x3 ** (-1.0)
    x5 = -x2 * (ax * A[0] + bx * B[0])
    x6 = x5 + C[0]
    x7 = -x6
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = x8 + C[1]
    x10 = -x9
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = x11 + C[2]
    x13 = -x12
    x14 = cx * x4
    x15 = x1 * x14
    x16 = x15 * (x10**2 + x13**2 + x7**2)
    x17 = boys(1, x16)
    x18 = x17 * x4
    x19 = cx ** (-1.0)
    x20 = x19 * boys(0, x16)
    x21 = x2 * (x18 - x20)
    x22 = x5 + A[0]
    x23 = -x22
    x24 = x18 * x7 - x20 * x23
    x25 = 2.0 * x24
    x26 = boys(2, x16)
    x27 = x26 * x4
    x28 = x17 * x19
    x29 = -x23 * x28 + x27 * x7
    x30 = x14 * x29
    x31 = x21 - x22 * x25 + 2.0 * x30 * x6
    x32 = x15 * (x12**2 + x6**2 + x9**2)
    x33 = x4 * boys(1, x32)
    x34 = boys(0, x32)
    x35 = 2.0 * x2
    x36 = x2 * (x27 - x28)
    x37 = 2.0 * x22
    x38 = x4 * boys(3, x16)
    x39 = x19 * x26
    x40 = x14 * x6
    x41 = 2.0 * x40
    x42 = A[1] - B[1]
    x43 = A[2] - B[2]
    x44 = (
        17.49341832762486
        * da
        * db
        * dc
        * x3 ** (-0.5)
        * numpy.exp(-ax * bx * x2 * (x0**2 + x42**2 + x43**2))
    )
    x45 = x2 * x44
    x46 = 0.5773502691896258 * x45
    x47 = x8 + A[1]
    x48 = -x47
    x49 = x10 * x27 - x28 * x48
    x50 = x14 * x49
    x51 = x2 * (x19 * x34 * x47 - x33 * x9 - x50)
    x52 = x10 * x18 - x20 * x48
    x53 = -x22 * x52 + x50 * x6
    x54 = x24 * x42 + x53
    x55 = 2.0 * x0
    x56 = x10 * x38 - x39 * x48
    x57 = x11 + A[2]
    x58 = -x57
    x59 = x13 * x27 - x28 * x58
    x60 = x14 * x59
    x61 = x2 * (-x12 * x33 + x19 * x34 * x57 - x60)
    x62 = x13 * x18 - x20 * x58
    x63 = -x22 * x62 + x6 * x60
    x64 = x24 * x43 + x63
    x65 = x13 * x38 - x39 * x58
    x66 = 2.0 * x42
    x67 = 2.0 * x47
    x68 = x21 + 2.0 * x50 * x9 - x52 * x67
    x69 = x14 * x9
    x70 = 2.0 * x69
    x71 = x36 - x49 * x67 + x56 * x70
    x72 = -x22 * x68 + x40 * x71 + x53 * x66
    x73 = -x49
    x74 = x14 * x73
    x75 = x23 * x52 + x7 * x74
    x76 = -x62
    x77 = -x59
    x78 = x14 * x77
    x79 = x10 * x78 - x48 * x76
    x80 = -x14 * x65
    x81 = x10 * x80 - x48 * x77
    x82 = -x22 * x79 + x40 * x81
    x83 = x43 * x75 + x82
    x84 = x35 * x44
    x85 = 2.0 * x43
    x86 = 2.0 * x57
    x87 = 2.0 * x12 * x60 + x21 - x62 * x86
    x88 = x12 * x14
    x89 = x36 - x59 * x86 + 2.0 * x65 * x88
    x90 = -x22 * x87 + x40 * x89 + x63 * x85
    x91 = x52 * x66 + x68
    x92 = -x47 * x62 + x60 * x9
    x93 = x43 * x52 + x92
    x94 = -x47 * x87 + x69 * x89 + x85 * x92
    x95 = x2 * (x62 + x78)
    x96 = -x23 * x76 + x7 * x78
    x97 = -x42 * x62 - x92
    x98 = x62 * x85 + x87

    # 18 item(s)
    result[0, 0, 0] = numpy.sum(
        x46
        * (
            -x0 * x31
            - x0 * (x0 * x25 + x31)
            + x22 * x31
            + x35 * (-x19 * x22 * x34 + x30 + x33 * x6)
            + x40 * (x29 * x37 - x36 + x41 * (x23 * x39 - x38 * x7))
        )
    )
    result[0, 1, 0] = numpy.sum(
        -x45
        * (-2.0 * x22 * x53 + x31 * x42 - x41 * (x22 * x49 - x40 * x56) + x51 + x54 * x55)
    )
    result[0, 2, 0] = numpy.sum(
        -x45
        * (-2.0 * x22 * x63 + x31 * x43 - x41 * (x22 * x59 - x40 * x65) + x55 * x64 + x61)
    )
    result[0, 3, 0] = numpy.sum(-x46 * (x54 * x66 + x72))
    result[0, 4, 0] = numpy.sum(-x84 * (x42 * x64 + x83))
    result[0, 5, 0] = numpy.sum(-x46 * (x64 * x85 + x90))
    result[1, 0, 0] = numpy.sum(
        -x46
        * (
            x2 * (x52 + x74)
            - x37 * x75
            - x41 * (x14 * x56 * x7 + x23 * x73)
            + x55 * x75
            + x55 * (x0 * x52 + x53)
        )
    )
    result[1, 1, 0] = numpy.sum(-x45 * (x0 * x91 + x72))
    result[1, 2, 0] = numpy.sum(-x84 * (x0 * x93 + x83))
    result[1, 3, 0] = numpy.sum(
        x46 * (-x42 * x68 - x42 * x91 + x47 * x68 - 2.0 * x51 - x69 * x71)
    )
    result[1, 4, 0] = numpy.sum(
        -x45
        * (x43 * x68 - 2.0 * x47 * x92 + x61 + x66 * x93 - x70 * (x47 * x59 - x65 * x69))
    )
    result[1, 5, 0] = numpy.sum(-x46 * (x85 * x93 + x94))
    result[2, 0, 0] = numpy.sum(
        -x46
        * (
            -x37 * x96
            - x41 * (x23 * x77 - x7 * x80)
            + x55 * x96
            + x55 * (x0 * x62 + x63)
            + x95
        )
    )
    result[2, 1, 0] = numpy.sum(x84 * (x0 * x97 - x42 * x96 - x82))
    result[2, 2, 0] = numpy.sum(-x45 * (x0 * x98 + x90))
    result[2, 3, 0] = numpy.sum(
        x46 * (-x66 * x79 + x66 * x97 + x67 * x79 - x70 * x81 - x95)
    )
    result[2, 4, 0] = numpy.sum(-x45 * (x42 * x98 + x94))
    result[2, 5, 0] = numpy.sum(
        x46 * (-x43 * x87 - x43 * x98 + x57 * x87 - 2.0 * x61 - x88 * x89)
    )
    return result


def int3c2e3d_sph_121(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pd|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 6, 3), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = x3 + C[0]
    x5 = cx + x1
    x6 = x5 ** (-1.0)
    x7 = -x4
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = x8 + C[1]
    x10 = -x9
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = x11 + C[2]
    x13 = -x12
    x14 = cx * x6
    x15 = x1 * x14
    x16 = x15 * (x10**2 + x13**2 + x7**2)
    x17 = boys(2, x16)
    x18 = x17 * x6
    x19 = cx ** (-1.0)
    x20 = x19 * boys(1, x16)
    x21 = x2 * (x18 - x20)
    x22 = x3 + A[0]
    x23 = -x22
    x24 = x18 * x7 - x20 * x23
    x25 = 2.0 * x24
    x26 = boys(3, x16)
    x27 = x26 * x6
    x28 = x17 * x19
    x29 = -x23 * x28 + x27 * x7
    x30 = 2.0 * x4
    x31 = x14 * x30
    x32 = x21 - x22 * x25 + x29 * x31
    x33 = -x32
    x34 = x2 * x25 + x33 * x4
    x35 = 2.0 * x2
    x36 = x2 * (x27 - x28)
    x37 = x6 * boys(4, x16)
    x38 = (
        -cx * x4 * x6 * (2.0 * x22 * x29 + x31 * (x19 * x23 * x26 - x37 * x7) - x36)
        + x22 * x33
        - x35 * (x14 * x29 - x24)
    )
    x39 = x15 * (x12**2 + x4**2 + x9**2)
    x40 = x6 * boys(2, x39)
    x41 = boys(1, x39)
    x42 = x19 * x22 * x41 - x4 * x40
    x43 = x19 * x2 * x41
    x44 = x30 * x42 + x43
    x45 = A[1] - B[1]
    x46 = A[2] - B[2]
    x47 = (
        17.49341832762486
        * da
        * db
        * dc
        * x5 ** (-1.5)
        * numpy.exp(-ax * bx * x2 * (x0**2 + x45**2 + x46**2))
    )
    x48 = 0.5773502691896258
    x49 = x47 * x48
    x50 = x47 * x9
    x51 = -x48 * (-x0 * x33 + x0 * (x0 * x25 + x32) + x38)
    x52 = x12 * x47
    x53 = x8 + A[1]
    x54 = -x53
    x55 = x10 * x27 - x28 * x54
    x56 = -x55
    x57 = x14 * x56
    x58 = x10 * x18 - x20 * x54
    x59 = x2 * (x57 + x58)
    x60 = x23 * x58 + x57 * x7
    x61 = 2.0 * x22
    x62 = x10 * x37 - x19 * x26 * x54
    x63 = x14 * x7
    x64 = -x31 * (x23 * x56 + x62 * x63) + x59 - x60 * x61
    x65 = -x64
    x66 = x4 * x65
    x67 = x19 * x41 * x53 - x40 * x9
    x68 = -x2 * x67
    x69 = x14 * x4
    x70 = -x22 * x58 + x55 * x69
    x71 = x30 * x70 + x68
    x72 = x44 * x45 + x71
    x73 = x35 * x60
    x74 = x42 * x45
    x75 = 2.0 * x9
    x76 = -x2 * x42
    x77 = 2.0 * x70
    x78 = x76 + x77 * x9
    x79 = x74 * x75 + x78
    x80 = x45 * x9
    x81 = 0.5 * x2 * x33
    x82 = -x65 * x9 + x81
    x83 = 2.0 * x0
    x84 = x11 + A[2]
    x85 = -x84
    x86 = x13 * x27 - x28 * x85
    x87 = -x86
    x88 = x14 * x87
    x89 = x13 * x18 - x20 * x85
    x90 = x2 * (x88 + x89)
    x91 = -x89
    x92 = -x23 * x91 + x7 * x88
    x93 = x13 * x37 - x19 * x26 * x85
    x94 = -x93
    x95 = -x31 * (x23 * x87 - x63 * x94) - x61 * x92 + x90
    x96 = -x95
    x97 = x4 * x96
    x98 = -x12 * x40 + x19 * x41 * x84
    x99 = -x2 * x98
    x100 = -x22 * x89 + x69 * x86
    x101 = x100 * x30 + x99
    x102 = x101 + x44 * x46
    x103 = x35 * x92
    x104 = x42 * x46
    x105 = 2.0 * x12
    x106 = x100 * x105 + x76
    x107 = x104 * x105 + x106
    x108 = x12 * x46
    x109 = -x12 * x96 + x81
    x110 = 2.0 * x53
    x111 = x14 * x75
    x112 = -x110 * x58 + x111 * x55 + x21
    x113 = -x112
    x114 = -x111 * x62 - x36 + 2.0 * x53 * x55
    x115 = x114 * x69
    x116 = x113 * x22 - x115
    x117 = 0.5 * x2
    x118 = -x112 * x117 + x116 * x4 + x45 * x71
    x119 = x2 * x70
    x120 = x116 * x9 - 2.0 * x119 + x45 * x78
    x121 = 2.0 * x45
    x122 = x113 * x22 - x115 + x45 * x77
    x123 = x48 * x52
    x124 = x14 * x9
    x125 = x124 * x86 - x53 * x89
    x126 = x125 * x2
    x127 = x10 * x88 - x54 * x91
    x128 = x10 * x14 * x94 - x54 * x87
    x129 = -x127 * x22 + x128 * x69
    x130 = -x126 + x129 * x30
    x131 = x130 + x46 * x71
    x132 = x100 + x104
    x133 = 2.0 * x80
    x134 = x100 * x2
    x135 = x129 * x75 - x134
    x136 = x135 + x46 * x78
    x137 = x105 * x129 - x119
    x138 = x108 * x77 + x137
    x139 = x105 * x14
    x140 = x139 * x86 + x21 - 2.0 * x84 * x89
    x141 = -x140
    x142 = -x139 * x93 - x36 + 2.0 * x84 * x86
    x143 = x142 * x69
    x144 = x141 * x22 - x143
    x145 = -x117 * x140
    x146 = x101 * x46 + x144 * x4 + x145
    x147 = 2.0 * x46
    x148 = x100 * x147 + x141 * x22 - x143
    x149 = x48 * x50
    x150 = x106 * x46 + x12 * x144 - 2.0 * x134
    x151 = x0 * x67
    x152 = x43 + x67 * x75
    x153 = x0 * (x112 + x121 * x67)
    x154 = x113 * x9 + x35 * x58
    x155 = x152 * x45 - x154
    x156 = x46 * x67
    x157 = x125 + x156
    x158 = x0 * x30
    x159 = x125 * x75 + x99
    x160 = x152 * x46 + x159
    x161 = x105 * x125 + x68
    x162 = x105 * x156 + x161
    x163 = -cx * x114 * x6 * x9 + x113 * x53 + 2.0 * x59
    x164 = x113 * x45 - x163 - x45 * (x112 + x121 * x58)
    x165 = x4 * x47
    x166 = x165 * x48
    x167 = -x110 * x127 + x111 * x128 + x90
    x168 = -x167
    x169 = x168 * x9
    x170 = x127 * x35
    x171 = x113 * x117 - x12 * x168
    x172 = x124 * x142
    x173 = x125 * x147 + x141 * x53 - x172
    x174 = x141 * x53 - x172
    x175 = x145 + x159 * x46 + x174 * x9
    x176 = x12 * x174 - 2.0 * x126 + x161 * x46
    x177 = x0 * x98
    x178 = x105 * x98 + x43
    x179 = x45 * x98
    x180 = x125 + x179
    x181 = x159 + x179 * x75
    x182 = x161 + x178 * x45
    x183 = x140 + x147 * x98
    x184 = x0 * x183
    x185 = x12 * x141 + x35 * x89
    x186 = x178 * x46 - x185
    x187 = x183 * x45
    x188 = -cx * x12 * x142 * x6 + x141 * x84 + 2.0 * x90
    x189 = x141 * x46 - x188 - x46 * (x140 + x147 * x89)

    # 54 item(s)
    result[0, 0, 0] = numpy.sum(
        0.5
        * x49
        * (2.0 * x0**2 * x44 - 4.0 * x0 * x34 + 3.0 * x2 * x33 + 2.0 * x38 * x4)
    )
    result[0, 0, 1] = numpy.sum(-x50 * x51)
    result[0, 0, 2] = numpy.sum(-x51 * x52)
    result[0, 1, 0] = numpy.sum(x47 * (x0 * x72 - x34 * x45 - x66 - x73))
    result[0, 1, 1] = numpy.sum(x47 * (x0 * x79 + x32 * x80 + x82))
    result[0, 1, 2] = numpy.sum(x52 * (-x33 * x45 + x64 + x83 * (x24 * x45 + x60)))
    result[0, 2, 0] = numpy.sum(x47 * (x0 * x102 - x103 - x34 * x46 - x97))
    result[0, 2, 1] = numpy.sum(x50 * (-x33 * x46 + x83 * (x24 * x46 + x92) + x95))
    result[0, 2, 2] = numpy.sum(x47 * (x0 * x107 + x108 * x32 + x109))
    result[0, 3, 0] = numpy.sum(x49 * (x118 + x45 * x72))
    result[0, 3, 1] = numpy.sum(x49 * (x120 + x45 * x79))
    result[0, 3, 2] = numpy.sum(x123 * (x121 * (x70 + x74) + x122))
    result[0, 4, 0] = numpy.sum(x47 * (x102 * x45 + x131))
    result[0, 4, 1] = numpy.sum(x47 * (x132 * x133 + x136))
    result[0, 4, 2] = numpy.sum(x47 * (x107 * x45 + x138))
    result[0, 5, 0] = numpy.sum(x49 * (x102 * x46 + x146))
    result[0, 5, 1] = numpy.sum(x149 * (x132 * x147 + x148))
    result[0, 5, 2] = numpy.sum(x49 * (x107 * x46 + x150))
    result[1, 0, 0] = numpy.sum(x49 * (x0 * x71 + x0 * (x151 * x30 + x71) - x66 - x73))
    result[1, 0, 1] = numpy.sum(x49 * (x0 * x78 + x0 * (x0 * x152 + x78) + x82))
    result[1, 0, 2] = numpy.sum(x123 * (x0 * x77 + x64 + x83 * (x151 + x70)))
    result[1, 1, 0] = numpy.sum(x47 * (x118 + x153 * x4))
    result[1, 1, 1] = numpy.sum(x47 * (x0 * x155 + x120))
    result[1, 1, 2] = numpy.sum(x52 * (x122 + x153))
    result[1, 2, 0] = numpy.sum(x47 * (x131 + x157 * x158))
    result[1, 2, 1] = numpy.sum(x47 * (x0 * x160 + x136))
    result[1, 2, 2] = numpy.sum(x47 * (x0 * x162 + x138))
    result[1, 3, 0] = numpy.sum(-x164 * x166)
    result[1, 3, 1] = numpy.sum(
        0.5
        * x49
        * (3.0 * x113 * x2 - 2.0 * x154 * x45 + 2.0 * x155 * x45 + 2.0 * x163 * x9)
    )
    result[1, 3, 2] = numpy.sum(-x123 * x164)
    result[1, 4, 0] = numpy.sum(x165 * (-x113 * x46 + x121 * (x127 + x46 * x58) + x167))
    result[1, 4, 1] = numpy.sum(x47 * (-x154 * x46 + x160 * x45 - x169 - x170))
    result[1, 4, 2] = numpy.sum(x47 * (x108 * x112 + x162 * x45 + x171))
    result[1, 5, 0] = numpy.sum(x166 * (x147 * x157 + x173))
    result[1, 5, 1] = numpy.sum(x49 * (x160 * x46 + x175))
    result[1, 5, 2] = numpy.sum(x49 * (x162 * x46 + x176))
    result[2, 0, 0] = numpy.sum(x49 * (x0 * x101 + x0 * (x101 + x177 * x30) - x103 - x97))
    result[2, 0, 1] = numpy.sum(x149 * (x100 * x83 + x83 * (x100 + x177) + x95))
    result[2, 0, 2] = numpy.sum(x49 * (x0 * x106 + x0 * (x0 * x178 + x106) + x109))
    result[2, 1, 0] = numpy.sum(x47 * (x101 * x45 + x130 + x158 * x180))
    result[2, 1, 1] = numpy.sum(x47 * (x0 * x181 + x100 * x133 + x135))
    result[2, 1, 2] = numpy.sum(x47 * (x0 * x182 + x106 * x45 + x137))
    result[2, 2, 0] = numpy.sum(x47 * (x146 + x184 * x4))
    result[2, 2, 1] = numpy.sum(x50 * (x148 + x184))
    result[2, 2, 2] = numpy.sum(x47 * (x0 * x186 + x150))
    result[2, 3, 0] = numpy.sum(x166 * (x121 * x125 + x121 * x180 + x167))
    result[2, 3, 1] = numpy.sum(x49 * (x159 * x45 - x169 - x170 + x181 * x45))
    result[2, 3, 2] = numpy.sum(x49 * (x161 * x45 + x171 + x182 * x45))
    result[2, 4, 0] = numpy.sum(x165 * (x173 + x187))
    result[2, 4, 1] = numpy.sum(x47 * (x175 + x187 * x9))
    result[2, 4, 2] = numpy.sum(x47 * (x176 + x186 * x45))
    result[2, 5, 0] = numpy.sum(-x166 * x189)
    result[2, 5, 1] = numpy.sum(-x149 * x189)
    result[2, 5, 2] = numpy.sum(
        0.5
        * x49
        * (2.0 * x12 * x188 + 3.0 * x141 * x2 - 2.0 * x185 * x46 + 2.0 * x186 * x46)
    )
    return result


def int3c2e3d_sph_122(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pd|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 6, 6), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = x3 + C[0]
    x5 = -x4
    x6 = cx + x1
    x7 = x6 ** (-1.0)
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = x8 + C[1]
    x10 = -x9
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = x11 + C[2]
    x13 = -x12
    x14 = cx * x7
    x15 = x1 * x14
    x16 = x15 * (x10**2 + x13**2 + x5**2)
    x17 = boys(3, x16)
    x18 = x17 * x7
    x19 = x3 + A[0]
    x20 = -x19
    x21 = cx ** (-1.0)
    x22 = x21 * boys(2, x16)
    x23 = x18 * x5 - x20 * x22
    x24 = x23 * x4
    x25 = x4**2
    x26 = x9**2
    x27 = x12**2
    x28 = x15 * (x25 + x26 + x27)
    x29 = boys(2, x28)
    x30 = x2 * x21 * x29
    x31 = 2.0 * x24 + x30
    x32 = x18 - x22
    x33 = x2 * x32
    x34 = 2.0 * x19
    x35 = boys(4, x16)
    x36 = x35 * x7
    x37 = x17 * x21
    x38 = -x20 * x37 + x36 * x5
    x39 = 2.0 * x4
    x40 = x14 * x39
    x41 = -x23 * x34 + x33 + x38 * x40
    x42 = -x41
    x43 = x2 * x23
    x44 = x4 * x42 + 2.0 * x43
    x45 = x2 * x31 + x4 * x44
    x46 = x24 + x30
    x47 = x0 * x39
    x48 = 1.5 * x2
    x49 = x36 - x37
    x50 = x2 * x49
    x51 = x7 * boys(5, x16)
    x52 = x14 * x4
    x53 = (
        x19 * x42
        - 2.0 * x2 * (x14 * x38 - x23)
        - x52 * (2.0 * x19 * x38 + x40 * (x20 * x21 * x35 - x5 * x51) - x50)
    )
    x54 = 0.5 * x4
    x55 = A[1] - B[1]
    x56 = A[2] - B[2]
    x57 = (
        17.49341832762486
        * da
        * db
        * dc
        * x1
        * x6 ** (-2.5)
        * numpy.exp(-ax * bx * x2 * (x0**2 + x55**2 + x56**2))
    )
    x58 = 0.3333333333333333 * x57
    x59 = x7 * boys(3, x28)
    x60 = x19 * x21 * x29 - x4 * x59
    x61 = -2.0 * x2 * x60 + x4 * x41
    x62 = -x61
    x63 = 1.732050807568877
    x64 = x58 * x63
    x65 = x64 * (x0 * x62 - x0 * (x0 * x31 + x61) - x4 * x53 + x41 * x48)
    x66 = 2.0 * x0
    x67 = x58 * (x0 * x41 + x0 * (x23 * x66 + x41) + x53)
    x68 = x8 + A[1]
    x69 = -x68
    x70 = x10 * x18 - x22 * x69
    x71 = x2 * x70
    x72 = -x71
    x73 = -x70
    x74 = x10 * x36 - x17 * x21 * x69
    x75 = -x74
    x76 = x14 * x75
    x77 = -x20 * x73 + x5 * x76
    x78 = x4 * x77
    x79 = x72 + 2.0 * x78
    x80 = x2 * (x70 + x76)
    x81 = x10 * x51 - x21 * x35 * x69
    x82 = -x81
    x83 = x14 * x5
    x84 = -x34 * x77 - x40 * (x20 * x75 - x82 * x83) + x80
    x85 = -x84
    x86 = x2 * x77
    x87 = 2.0 * x86
    x88 = x4 * x85 + x87
    x89 = x72 + x78
    x90 = x46 * x55 + x89
    x91 = x31 * x55
    x92 = 2.0 * x9
    x93 = x70 * x9
    x94 = x30 + 2.0 * x93
    x95 = x2 * x94
    x96 = -x43
    x97 = x77 * x9
    x98 = x96 + 2.0 * x97
    x99 = x39 * x98 - x95
    x100 = x91 * x92 + x99
    x101 = 0.5 * x0
    x102 = -x2 * x42
    x103 = x85 * x9
    x104 = x2 * x98
    x105 = -x104
    x106 = x105 - x54 * (x102 + 2.0 * x103)
    x107 = x79 + x91
    x108 = -x19 * x70 + x52 * x74
    x109 = -2.0 * x108 * x2 + x4 * x84
    x110 = x12 * x57
    x111 = x23 * x55
    x112 = x111 * x9
    x113 = x96 + x97
    x114 = x112 + x113
    x115 = x41 * x55
    x116 = x115 * x9
    x117 = x2 * x42
    x118 = -x103 + x117
    x119 = x64 * x9
    x120 = 2.0 * x112 + x98
    x121 = -0.5 * x2 * x41 + x84 * x9
    x122 = x111 + x77
    x123 = x27 * x64
    x124 = x11 + A[2]
    x125 = -x124
    x126 = -x125 * x22 + x13 * x18
    x127 = x126 * x2
    x128 = -x127
    x129 = -x126
    x130 = -x125 * x17 * x21 + x13 * x36
    x131 = -x130
    x132 = x131 * x14
    x133 = -x129 * x20 + x132 * x5
    x134 = x133 * x4
    x135 = x128 + 2.0 * x134
    x136 = x2 * (x126 + x132)
    x137 = -x125 * x21 * x35 + x13 * x51
    x138 = -x137
    x139 = -x133 * x34 + x136 - x40 * (x131 * x20 - x138 * x83)
    x140 = -x139
    x141 = x133 * x2
    x142 = 2.0 * x141
    x143 = x140 * x4 + x142
    x144 = x128 + x134
    x145 = x144 + x46 * x56
    x146 = x31 * x56
    x147 = x135 + x146
    x148 = -x126 * x19 + x130 * x52
    x149 = x139 * x4 - 2.0 * x148 * x2
    x150 = x57 * x9
    x151 = 2.0 * x12
    x152 = x12 * x126
    x153 = 2.0 * x152 + x30
    x154 = x153 * x2
    x155 = -x154
    x156 = x12 * x133
    x157 = 2.0 * x156 + x96
    x158 = x155 + x157 * x39
    x159 = x146 * x151 + x158
    x160 = x12 * x140
    x161 = x157 * x2
    x162 = -x161
    x163 = x162 - x54 * (x102 + 2.0 * x160)
    x164 = x41 * x56
    x165 = x23 * x56
    x166 = x133 + x165
    x167 = x26 * x64
    x168 = x12 * x165
    x169 = x157 + 2.0 * x168
    x170 = 0.5 * x117
    x171 = -x160
    x172 = x12 * x164 + x171
    x173 = x156 + x96
    x174 = x168 + x173
    x175 = x12 * x64
    x176 = 2.0 * x55
    x177 = 2.0 * x70
    x178 = x14 * x92
    x179 = -x177 * x68 + x178 * x74 + x33
    x180 = -x179
    x181 = x180 * x2
    x182 = -x2 * x32
    x183 = 2.0 * x69
    x184 = -x2 * x49
    x185 = x10 * x14
    x186 = -x20 * (-2.0 * x10 * x76 + x182 + x183 * x73) + x83 * (
        x183 * x75 + x184 - 2.0 * x185 * x82
    )
    x187 = x186 * x4
    x188 = x176 * x89 + x181 + x187
    x189 = x4 * x58
    x190 = 0.5 * x55
    x191 = x186 * x9
    x192 = x191 - x87
    x193 = x180 * x9 + 2.0 * x71
    x194 = 0.5 * x2
    x195 = x190 * x99 + x192 * x4 + x193 * x194
    x196 = 0.5 * x181
    x197 = x187 + x196 + x55 * x79
    x198 = x192 * x9
    x199 = x176 * x9
    x200 = x113 * x199
    x201 = x55 * x98
    x202 = x176 * x77 + x186
    x203 = x27 * x58
    x204 = x10 * x132 - x129 * x69
    x205 = -x131 * x69 + x138 * x185
    x206 = x20 * x204 - x205 * x83
    x207 = x2 * x204
    x208 = x206 * x4 - x207
    x209 = x208 + x56 * x89
    x210 = x4 * x57
    x211 = 0.6666666666666667 * x63
    x212 = x210 * x211
    x213 = x55 * x9
    x214 = 0.5 * x56
    x215 = -x141
    x216 = x206 * x9
    x217 = x204 * x9
    x218 = x128 + 2.0 * x217
    x219 = x2 * x218
    x220 = -0.5 * x219 + x4 * (x215 + 2.0 * x216)
    x221 = x214 * x99 + x220
    x222 = x12 * x56
    x223 = -x86
    x224 = x12 * x206
    x225 = x223 + 2.0 * x224
    x226 = x12 * x204
    x227 = 2.0 * x226 + x72
    x228 = x2 * x227
    x229 = x225 * x4 - 0.5 * x228
    x230 = x222 * x79 + x229
    x231 = x215 + x216
    x232 = x113 * x56 + x231
    x233 = x150 * x211
    x234 = -0.5 * x161 + x225 * x9
    x235 = x222 * x98 + x234
    x236 = x223 + x224
    x237 = x108 * x222 + x236
    x238 = x110 * x211
    x239 = 2.0 * x56
    x240 = 2.0 * x126
    x241 = x14 * x151
    x242 = -x124 * x240 + x130 * x241 + x33
    x243 = -x242
    x244 = x2 * x243
    x245 = 2.0 * x125
    x246 = 2.0 * x13
    x247 = x129 * x245 - x132 * x246 + x182
    x248 = x131 * x245 - x138 * x14 * x246 + x184
    x249 = -x20 * x247 + x248 * x83
    x250 = x249 * x4
    x251 = x144 * x239 + x244 + x250
    x252 = 0.5 * x244
    x253 = x135 * x56 + x250 + x252
    x254 = x12 * x249 - x142
    x255 = x12 * x243 + 2.0 * x127
    x256 = x194 * x255
    x257 = x158 * x214 + x254 * x4 + x256
    x258 = x133 * x239 + x249
    x259 = x26 * x58
    x260 = x12 * x254
    x261 = 2.0 * x222
    x262 = x173 * x261
    x263 = x0 * x70
    x264 = x0 * x94
    x265 = x30 + x93
    x266 = x58 * x9
    x267 = x177 * x55 + x179
    x268 = x0 * x4
    x269 = x267 * x268
    x270 = x4 * x64
    x271 = x55 * x94
    x272 = x193 - x271
    x273 = x193 * x9 + x95
    x274 = -x199 * x265 + x273
    x275 = x179 * x9 - 2.0 * x2 * (x21 * x29 * x68 - x59 * x9)
    x276 = -x271 - x275
    x277 = x56 * x70
    x278 = x204 + x277
    x279 = x56 * x94
    x280 = x218 + x279
    x281 = x12 * x277
    x282 = x227 + 2.0 * x281
    x283 = x128 + x217
    x284 = x265 * x56 + x283
    x285 = x155 + x227 * x92
    x286 = x151 * x279 + x285
    x287 = x226 + x72
    x288 = x281 + x287
    x289 = x14 * x9
    x290 = x180 * x68 + x289 * (x178 * x81 + x50 - 2.0 * x68 * x74) + 2.0 * x80
    x291 = x179 * x55 + x267 * x55 + x290
    x292 = x25 * x58
    x293 = -x290 * x9
    x294 = 0.5 * x9
    x295 = -x275
    x296 = x179 * x56
    x297 = x136 + x178 * x205 - 2.0 * x204 * x68
    x298 = x25 * x64
    x299 = -x297
    x300 = x299 * x9
    x301 = 2.0 * x207
    x302 = x300 + x301
    x303 = x12 * x299
    x304 = -x303
    x305 = x12 * x296 + x304
    x306 = -x228
    x307 = x294 * (x180 * x2 - 2.0 * x303) + x306
    x308 = x185 * x248 - x247 * x69
    x309 = x204 * x239 + x308
    x310 = x308 * x9
    x311 = x218 * x56 + x252 + x310
    x312 = -x301
    x313 = x12 * x308 + x312
    x314 = x239 * x283 + x244 + x310
    x315 = x214 * x285 + x256 + x313 * x9
    x316 = x12 * x313
    x317 = x261 * x287
    x318 = x0 * x126
    x319 = x0 * x153
    x320 = x152 + x30
    x321 = x12 * x58
    x322 = x126 * x55
    x323 = x204 + x322
    x324 = x218 + x322 * x92
    x325 = x153 * x55
    x326 = x227 + x325
    x327 = x283 + x322 * x9
    x328 = x285 + x325 * x92
    x329 = x287 + x320 * x55
    x330 = x240 * x56 + x242
    x331 = x268 * x330
    x332 = -x153 * x56 + x255
    x333 = -x332
    x334 = -x330
    x335 = x12 * x255 + x154
    x336 = -x261 * x320 + x335
    x337 = x334 * x55
    x338 = x12 * x14 * (-2.0 * x124 * x130 + x137 * x241 + x50) + x124 * x243 + 2.0 * x136
    x339 = x242 * x56 + x330 * x56 + x338
    x340 = -x12 * x338
    x341 = 1.5 * x2 * x243 - x255 * x56 - x332 * x56 - x340

    # 108 item(s)
    result[0, 0, 0] = numpy.sum(
        x58
        * (
            x0 * x45
            + x0 * (x45 - x46 * x47)
            - x44 * x48
            - x54 * (3.0 * x2 * x42 + x39 * x53)
        )
    )
    result[0, 0, 1] = numpy.sum(x65 * x9)
    result[0, 0, 2] = numpy.sum(x12 * x65)
    result[0, 0, 3] = numpy.sum(-x26 * x67)
    result[0, 0, 4] = numpy.sum(-x12 * x63 * x67 * x9)
    result[0, 0, 5] = numpy.sum(-x27 * x67)
    result[0, 1, 0] = numpy.sum(x64 * (x2 * x79 + x4 * x88 + x45 * x55 - x47 * x90))
    result[0, 1, 1] = numpy.sum(x57 * (-x100 * x101 - x106 + x55 * x62 * x9))
    result[0, 1, 2] = numpy.sum(x110 * (-x0 * x107 - x109 + x55 * x62))
    result[0, 1, 3] = numpy.sum(-x119 * (x114 * x66 + x116 + x118))
    result[0, 1, 4] = numpy.sum(-x110 * (x0 * x120 + x116 + x121))
    result[0, 1, 5] = numpy.sum(-x123 * (x115 + x122 * x66 + x84))
    result[0, 2, 0] = numpy.sum(x64 * (x135 * x2 + x143 * x4 - x145 * x47 + x45 * x56))
    result[0, 2, 1] = numpy.sum(x150 * (-x0 * x147 - x149 + x56 * x62))
    result[0, 2, 2] = numpy.sum(x57 * (-x101 * x159 + x12 * x56 * x62 - x163))
    result[0, 2, 3] = numpy.sum(-x167 * (x139 + x164 + x166 * x66))
    result[0, 2, 4] = numpy.sum(-x150 * (x0 * x169 + x170 + x172))
    result[0, 2, 5] = numpy.sum(-x175 * (x117 + x172 + x174 * x66))
    result[0, 3, 0] = numpy.sum(-x189 * (x176 * x90 + x188))
    result[0, 3, 1] = numpy.sum(-x64 * (x100 * x190 + x195))
    result[0, 3, 2] = numpy.sum(-x175 * (x107 * x55 + x197))
    result[0, 3, 3] = numpy.sum(-x58 * (x105 + x114 * x199 + x198 + x200))
    result[0, 3, 4] = numpy.sum(-x175 * (x120 * x55 + x192 + x201))
    result[0, 3, 5] = numpy.sum(-x203 * (x122 * x176 + x202))
    result[0, 4, 0] = numpy.sum(-x212 * (x145 * x55 + x209))
    result[0, 4, 1] = numpy.sum(-x57 * (x147 * x213 + x221))
    result[0, 4, 2] = numpy.sum(-x57 * (x159 * x190 + x230))
    result[0, 4, 3] = numpy.sum(-x233 * (x166 * x213 + x232))
    result[0, 4, 4] = numpy.sum(-x57 * (x169 * x213 + x235))
    result[0, 4, 5] = numpy.sum(-x238 * (x174 * x55 + x237))
    result[0, 5, 0] = numpy.sum(-x189 * (x145 * x239 + x251))
    result[0, 5, 1] = numpy.sum(-x119 * (x147 * x56 + x253))
    result[0, 5, 2] = numpy.sum(-x64 * (x159 * x214 + x257))
    result[0, 5, 3] = numpy.sum(-x259 * (x166 * x239 + x258))
    result[0, 5, 4] = numpy.sum(-x119 * (x157 * x56 + x169 * x56 + x254))
    result[0, 5, 5] = numpy.sum(-x58 * (x162 + x174 * x261 + x260 + x262))
    result[1, 0, 0] = numpy.sum(
        x58 * (x2 * x79 + x4 * x88 - x47 * x89 - x47 * (x263 * x4 + x89))
    )
    result[1, 0, 1] = numpy.sum(-x64 * (x101 * x99 + x101 * (x264 * x39 + x99) + x106))
    result[1, 0, 2] = numpy.sum(-x175 * (x0 * x79 + x0 * (x263 * x39 + x79) + x109))
    result[1, 0, 3] = numpy.sum(-x266 * (x113 * x66 + x118 + x66 * (x0 * x265 + x113)))
    result[1, 0, 4] = numpy.sum(-x175 * (x0 * x98 + x0 * (x264 + x98) + x121))
    result[1, 0, 5] = numpy.sum(-x203 * (x108 * x66 + x66 * (x263 + x77) + x84))
    result[1, 1, 0] = numpy.sum(-x270 * (x188 + x269))
    result[1, 1, 1] = numpy.sum(x57 * (-x195 + x268 * x272))
    result[1, 1, 2] = numpy.sum(-x110 * (x197 + x269))
    result[1, 1, 3] = numpy.sum(x64 * (x0 * x274 + x104 - x198 - x200))
    result[1, 1, 4] = numpy.sum(x110 * (x0 * x276 - x191 - x201 + x87))
    result[1, 1, 5] = numpy.sum(-x123 * (x0 * x267 + x202))
    result[1, 2, 0] = numpy.sum(-x212 * (x209 + x268 * x278))
    result[1, 2, 1] = numpy.sum(-x57 * (x221 + x268 * x280))
    result[1, 2, 2] = numpy.sum(-x57 * (x230 + x268 * x282))
    result[1, 2, 3] = numpy.sum(-x233 * (x0 * x284 + x232))
    result[1, 2, 4] = numpy.sum(-x57 * (x101 * x286 + x235))
    result[1, 2, 5] = numpy.sum(-x238 * (x0 * x288 + x237))
    result[1, 3, 0] = numpy.sum(-x291 * x292)
    result[1, 3, 1] = numpy.sum(
        0.5 * x270 * (-3.0 * x180 * x2 + 2.0 * x193 * x55 + 2.0 * x272 * x55 + 2.0 * x293)
    )
    result[1, 3, 2] = numpy.sum(-x175 * x291 * x4)
    result[1, 3, 3] = numpy.sum(
        -x58
        * (x193 * x48 - x273 * x55 - x274 * x55 + x294 * (3.0 * x180 * x2 - 2.0 * x293))
    )
    result[1, 3, 4] = numpy.sum(x175 * (x179 * x48 + x276 * x55 - x290 * x9 + x295 * x55))
    result[1, 3, 5] = numpy.sum(-x203 * x291)
    result[1, 4, 0] = numpy.sum(-x298 * (x176 * x278 + x296 + x297))
    result[1, 4, 1] = numpy.sum(x210 * (x193 * x56 - x280 * x55 + x302))
    result[1, 4, 2] = numpy.sum(-x210 * (x196 + x282 * x55 + x305))
    result[1, 4, 3] = numpy.sum(x64 * (-x199 * x284 + x219 + x273 * x56 + x302 * x9))
    result[1, 4, 4] = numpy.sum(x57 * (x12 * x295 * x56 - x190 * x286 - x307))
    result[1, 4, 5] = numpy.sum(-x175 * (x176 * x288 + x181 + x305))
    result[1, 5, 0] = numpy.sum(-x292 * (x239 * x278 + x309))
    result[1, 5, 1] = numpy.sum(-x270 * (x280 * x56 + x311))
    result[1, 5, 2] = numpy.sum(-x270 * (x227 * x56 + x282 * x56 + x313))
    result[1, 5, 3] = numpy.sum(-x266 * (x239 * x284 + x314))
    result[1, 5, 4] = numpy.sum(-x64 * (x214 * x286 + x315))
    result[1, 5, 5] = numpy.sum(-x58 * (x261 * x288 + x306 + x316 + x317))
    result[2, 0, 0] = numpy.sum(
        x58 * (x135 * x2 + x143 * x4 - x144 * x47 - x47 * (x144 + x318 * x4))
    )
    result[2, 0, 1] = numpy.sum(-x119 * (x0 * x135 + x0 * (x135 + x318 * x39) + x149))
    result[2, 0, 2] = numpy.sum(-x64 * (x101 * x158 + x101 * (x158 + x319 * x39) + x163))
    result[2, 0, 3] = numpy.sum(-x259 * (x139 + x148 * x66 + x66 * (x133 + x318)))
    result[2, 0, 4] = numpy.sum(-x119 * (x0 * x157 + x0 * (x157 + x319) + x170 + x171))
    result[2, 0, 5] = numpy.sum(
        -x321 * (x117 + x171 + x173 * x66 + x66 * (x0 * x320 + x173))
    )
    result[2, 1, 0] = numpy.sum(-x212 * (x144 * x55 + x208 + x268 * x323))
    result[2, 1, 1] = numpy.sum(-x57 * (x135 * x213 + x220 + x268 * x324))
    result[2, 1, 2] = numpy.sum(-x57 * (x158 * x190 + x229 + x268 * x326))
    result[2, 1, 3] = numpy.sum(-x233 * (x0 * x327 + x148 * x213 + x231))
    result[2, 1, 4] = numpy.sum(
        -x57 * (x101 * x328 + x213 * (x148 * x151 - x2 * x60) + x234)
    )
    result[2, 1, 5] = numpy.sum(-x238 * (x0 * x329 + x173 * x55 + x236))
    result[2, 2, 0] = numpy.sum(-x270 * (x251 + x331))
    result[2, 2, 1] = numpy.sum(-x150 * (x253 + x331))
    result[2, 2, 2] = numpy.sum(-x57 * (x257 + x268 * x333))
    result[2, 2, 3] = numpy.sum(x167 * (x0 * x334 - x258))
    result[2, 2, 4] = numpy.sum(x150 * (x0 * x332 - x12 * x249 + x142 - x157 * x56))
    result[2, 2, 5] = numpy.sum(x64 * (x0 * x336 + x161 - x260 - x262))
    result[2, 3, 0] = numpy.sum(
        -x292 * (x176 * x323 - x176 * (x126 * x68 - x130 * x289) + x297)
    )
    result[2, 3, 1] = numpy.sum(x270 * (-x218 * x55 + x300 - x312 - x324 * x55))
    result[2, 3, 2] = numpy.sum(-x270 * (x196 + x227 * x55 + x304 + x326 * x55))
    result[2, 3, 3] = numpy.sum(
        x58 * (-x199 * x283 - x199 * x327 + x2 * x218 + x302 * x9)
    )
    result[2, 3, 4] = numpy.sum(-x64 * (x190 * x285 + x190 * x328 + x307))
    result[2, 3, 5] = numpy.sum(-x321 * (x176 * x287 + x176 * x329 + x181 + x304))
    result[2, 4, 0] = numpy.sum(x298 * (-x309 + x337))
    result[2, 4, 1] = numpy.sum(x210 * (-x311 + x337 * x9))
    result[2, 4, 2] = numpy.sum(x210 * (-x12 * x308 - x227 * x56 + x301 + x332 * x55))
    result[2, 4, 3] = numpy.sum(-x119 * (x213 * x330 + x314))
    result[2, 4, 4] = numpy.sum(-x57 * (x213 * x333 + x315))
    result[2, 4, 5] = numpy.sum(x64 * (x228 - x316 - x317 + x336 * x55))
    result[2, 5, 0] = numpy.sum(-x292 * x339)
    result[2, 5, 1] = numpy.sum(-x119 * x339 * x4)
    result[2, 5, 2] = numpy.sum(-x270 * x341)
    result[2, 5, 3] = numpy.sum(-x259 * x339)
    result[2, 5, 4] = numpy.sum(-x119 * x341)
    result[2, 5, 5] = numpy.sum(
        -0.5
        * x58
        * (
            x12 * (3.0 * x2 * x243 - 2.0 * x340)
            + 2.0 * x255 * x48
            - 2.0 * x335 * x56
            - 2.0 * x336 * x56
        )
    )
    return result


def int3c2e3d_sph_123(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pd|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 6, 10), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = 0.5 / (ax + bx)
    x6 = x4**2
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x2 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x1
    x14 = x13 ** (-1.0)
    x15 = x1 * x14
    x16 = cx * x15 * (x12 + x6 + x9)
    x17 = boys(4, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = x19 * x22
    x24 = x2 * x23
    x25 = 2.0 * x18 * x24
    x26 = x17 * x25
    x27 = cx ** (-1.0)
    x28 = x13 ** (-0.5)
    x29 = boys(3, x16)
    x30 = x5 * (2.0 * x19 * x2 * x22 * x27 * x28 * x29 - x26)
    x31 = -x3 - A[0]
    x32 = -2.0 * x19 * x2 * x22 * x27 * x28 * x29 * x31 + x26 * x4
    x33 = -x32
    x34 = boys(5, x16)
    x35 = x25 * x34
    x36 = 2.0 * x17 * x19 * x2 * x22 * x27 * x28 * x31 - x35 * x4
    x37 = cx * x14
    x38 = x36 * x37
    x39 = x30 + x31 * x33 - x38 * x4
    x40 = x39 * x4
    x41 = x33 * x5
    x42 = 2.0 * x41
    x43 = x40 + x42
    x44 = x15 * x4
    x45 = x33 * x4
    x46 = 2.0 * x5
    x47 = x27 * x29 * x46
    x48 = x24 * x28 * x47
    x49 = x45 + x48
    x50 = x15 * x46
    x51 = x43 * x44 + x49 * x50
    x52 = x23 * x47
    x53 = x18 * x52
    x54 = x4 * x53 + x44 * x49
    x55 = x15 * (x44 * x51 + x50 * x54)
    x56 = x1 * x13 ** (-2.5) * x52
    x57 = x44 * x54 + x56 * x6
    x58 = x0 * x15
    x59 = x5 * (2.0 * x17 * x19 * x2 * x22 * x27 * x28 - x35)
    x60 = x25 * boys(6, x16)
    x61 = x37 * x4
    x62 = (
        x31 * x39
        - x46 * (x32 + x38)
        - x61
        * (
            x31 * x36
            + x59
            - x61 * (2.0 * x19 * x2 * x22 * x27 * x28 * x31 * x34 - x4 * x60)
        )
    )
    x63 = x4 * x62
    x64 = x39 * x5
    x65 = 3.0 * x64
    x66 = x15 * x5
    x67 = 3.0 * x66
    x68 = da * db * dc
    x69 = 0.06666666666666667 * x68
    x70 = 2.23606797749979 * x69
    x71 = x15 * x8
    x72 = x71 * (x40 + x42)
    x73 = x53 * x8
    x74 = x45 * x71 + x73
    x75 = x15 * (x44 * x72 + x50 * x74)
    x76 = x4 * x8
    x77 = x44 * x74 + x56 * x76
    x78 = 0.3333333333333333 * x68
    x79 = x11 * x15
    x80 = x79 * (x40 + x42)
    x81 = x11 * x53
    x82 = x45 * x79 + x81
    x83 = x15 * (x44 * x80 + x50 * x82)
    x84 = x11 * x56
    x85 = x4 * x84 + x44 * x82
    x86 = x1**2 / x13**2
    x87 = x86 * x9
    x88 = x15 * x87 * (x40 + x42)
    x89 = x56 * x9
    x90 = x45 * x87 + x89
    x91 = x8 * x86
    x92 = x11 * x91
    x93 = x15 * x92 * (x40 + x42)
    x94 = x8 * x84
    x95 = x45 * x92 + x94
    x96 = 1.732050807568877 * x78
    x97 = x12 * x86
    x98 = x15 * x97 * (x40 + x42)
    x99 = x12 * x56
    x100 = x45 * x97 + x99
    x101 = x1**3 / x13**3
    x102 = x101 * x8**3
    x103 = x102 * x39
    x104 = x0 * x33
    x105 = x101 * x9
    x106 = x105 * x11
    x107 = x106 * x39
    x108 = x101 * x12
    x109 = x108 * x8
    x110 = x109 * x39
    x111 = x101 * x11**3
    x112 = x111 * x39
    x113 = -x7 - A[1]
    x114 = -2.0 * x113 * x19 * x2 * x22 * x27 * x28 * x29 + x26 * x8
    x115 = -x114
    x116 = x115 * x5
    x117 = 2.0 * x113 * x17 * x19 * x2 * x22 * x27 * x28 - x35 * x8
    x118 = x117 * x37
    x119 = x115 * x31 - x118 * x4
    x120 = x119 * x4
    x121 = x116 + x120
    x122 = x44 * (x116 + x121)
    x123 = x6 * x86
    x124 = x15 * (x116 * x123 + x122 * x44)
    x125 = x15 * x20
    x126 = x124 + x125 * x57
    x127 = -x5 * (x114 + x118)
    x128 = 2.0 * x113 * x19 * x2 * x22 * x27 * x28 * x34 - x60 * x8
    x129 = x119 * x31 + x127 - x61 * (x117 * x31 - x128 * x61)
    x130 = x129 * x4
    x131 = x119 * x5
    x132 = 2.0 * x131
    x133 = x15 * (x122 * x50 + x44 * (x121 * x50 + x44 * (x130 + x132)))
    x134 = 3.872983346207417 * x69
    x135 = x115 * x8
    x136 = x135 + x48
    x137 = x136 * x15
    x138 = x119 * x8
    x139 = x138 + x41
    x140 = x137 * x5 + x139 * x44
    x141 = x4 * x86
    x142 = x141 * x5
    x143 = x15 * (x136 * x142 + x140 * x44)
    x144 = x125 * x77 + x143
    x145 = x129 * x8
    x146 = x145 + x64
    x147 = x139 * x50
    x148 = x15 * (x140 * x50 + x44 * (x146 * x44 + x147))
    x149 = x116 * x79
    x150 = x120 * x79 + x149
    x151 = x11 * x141
    x152 = x15 * (x116 * x151 + x150 * x44)
    x153 = x125 * x85 + x152
    x154 = x132 * x79
    x155 = x15 * (x150 * x50 + x44 * (x130 * x79 + x154))
    x156 = x137 * x8 + x73
    x157 = x71 * (x139 + x41)
    x158 = x15 * (x156 * x66 + x157 * x44)
    x159 = x125 * x90 + x158
    x160 = x71 * (x146 + x64)
    x161 = x157 * x50
    x162 = x15 * (x160 * x44 + x161)
    x163 = x135 * x79 + x81
    x164 = x41 * x79
    x165 = x138 * x79 + x164
    x166 = x15 * (x163 * x66 + x165 * x44)
    x167 = x125 * x95 + x166
    x168 = x64 * x79
    x169 = x145 * x79 + x168
    x170 = x165 * x50
    x171 = x15 * (x169 * x44 + x170)
    x172 = x116 * x97
    x173 = x15 * (x120 * x97 + x172)
    x174 = x100 * x125 + x173
    x175 = x132 * x97
    x176 = x15 * (x130 * x97 + x175)
    x177 = x15 * (x157 * x71 + x41 * x87)
    x178 = x20 * x33
    x179 = x102 * x178 + x177
    x180 = x15 * (x160 * x71 + x64 * x87)
    x181 = x15 * (x165 * x71 + x41 * x92)
    x182 = x106 * x178 + x181
    x183 = x15 * (x169 * x71 + x64 * x92)
    x184 = x41 * x97
    x185 = x15 * (x138 * x97 + x184)
    x186 = x109 * x178 + x185
    x187 = x64 * x97
    x188 = x15 * (x145 * x97 + x187)
    x189 = x111 * x119
    x190 = x111 * x178 + x189
    x191 = x111 * x129
    x192 = -x10 - A[2]
    x193 = x11 * x26 - 2.0 * x19 * x192 * x2 * x22 * x27 * x28 * x29
    x194 = -x193
    x195 = x194 * x5
    x196 = -x11 * x35 + 2.0 * x17 * x19 * x192 * x2 * x22 * x27 * x28
    x197 = x196 * x37
    x198 = x194 * x31 - x197 * x4
    x199 = x198 * x4
    x200 = x195 + x199
    x201 = x44 * (x195 + x200)
    x202 = x15 * (x123 * x195 + x201 * x44)
    x203 = x15 * x21
    x204 = x202 + x203 * x57
    x205 = -x5 * (x193 + x197)
    x206 = -x11 * x60 + 2.0 * x19 * x192 * x2 * x22 * x27 * x28 * x34
    x207 = x198 * x31 + x205 - x61 * (x196 * x31 - x206 * x61)
    x208 = x207 * x4
    x209 = x198 * x5
    x210 = 2.0 * x209
    x211 = x15 * (x201 * x50 + x44 * (x200 * x50 + x44 * (x208 + x210)))
    x212 = x195 * x71
    x213 = x199 * x71 + x212
    x214 = x4 * x91
    x215 = x15 * (x195 * x214 + x213 * x44)
    x216 = x203 * x77 + x215
    x217 = x15 * (x213 * x50 + x44 * x71 * (x208 + x210))
    x218 = x11 * x194 + x48
    x219 = x218 * x66
    x220 = x11 * x198 + x41
    x221 = x219 + x220 * x44
    x222 = x15 * (x142 * x218 + x221 * x44)
    x223 = x203 * x85 + x222
    x224 = x11 * x207 + x64
    x225 = x220 * x50
    x226 = x15 * (x221 * x50 + x44 * (x224 * x44 + x225))
    x227 = x195 * x87
    x228 = x15 * (x199 * x87 + x227)
    x229 = x203 * x90 + x228
    x230 = x15 * x87 * (x208 + x210)
    x231 = x5 * x91
    x232 = x218 * x231
    x233 = x15 * (x214 * x220 + x232)
    x234 = x203 * x95 + x233
    x235 = x15 * (x214 * x224 + x220 * x46 * x91)
    x236 = x218 * x79 + x81
    x237 = x236 * x66
    x238 = x164 + x220 * x79
    x239 = x15 * (x237 + x238 * x44)
    x240 = x100 * x203 + x239
    x241 = x168 + x224 * x79
    x242 = x238 * x50
    x243 = x15 * (x241 * x44 + x242)
    x244 = x102 * x198
    x245 = x21 * x33
    x246 = x102 * x245 + x244
    x247 = x102 * x207
    x248 = x105 * x220
    x249 = x106 * x245 + x248
    x250 = x105 * x224
    x251 = x238 * x91
    x252 = x109 * x245 + x251
    x253 = x241 * x91
    x254 = x15 * (x184 + x238 * x79)
    x255 = x111 * x245 + x254
    x256 = x15 * (x187 + x241 * x79)
    x257 = x113 * x115 - x118 * x8 + x30
    x258 = x257 * x5
    x259 = x37 * x8
    x260 = x113 * x117 - x128 * x259 + x59
    x261 = x257 * x31 - x260 * x61
    x262 = x261 * x4
    x263 = x124 * x20 + x15 * (x123 * x258 + x44**2 * (2.0 * x258 + x262))
    x264 = x257 * x8
    x265 = 2.0 * x116
    x266 = x264 + x265
    x267 = x266 * x66
    x268 = x261 * x8
    x269 = x132 + x268
    x270 = x143 * x20 + x15 * (x142 * x266 + x44 * (x267 + x269 * x44))
    x271 = x258 * x79
    x272 = x15 * (x151 * x258 + x44 * (x262 * x79 + x271)) + x152 * x20
    x273 = x137 * x46 + x266 * x71
    x274 = x273 * x66
    x275 = x147 + x269 * x71
    x276 = x15 * (x274 + x275 * x44) + x158 * x20
    x277 = x79 * (x264 + x265)
    x278 = x277 * x66
    x279 = x154 + x268 * x79
    x280 = x15 * (x278 + x279 * x44) + x166 * x20
    x281 = x258 * x97
    x282 = x15 * (x262 * x97 + x281) + x173 * x20
    x283 = x15 * (x161 + x275 * x71) + x177 * x20
    x284 = x15 * (x170 + x279 * x71) + x181 * x20
    x285 = x15 * (x175 + x268 * x97) + x185 * x20
    x286 = x111 * x261 + x189 * x20
    x287 = x113 * x194 - x197 * x8
    x288 = x287 * x5
    x289 = x113 * x196 - x206 * x259
    x290 = x287 * x31 - x289 * x61
    x291 = x15 * (x123 * x288 + x44**2 * (2.0 * x288 + x290 * x4))
    x292 = x124 * x21 + x291
    x293 = x195 + x287 * x8
    x294 = x209 + x290 * x8
    x295 = x15 * (x142 * x293 + x44 * (x293 * x66 + x294 * x44))
    x296 = x143 * x21 + x295
    x297 = x11 * x287 + x116
    x298 = x11 * x290 + x131
    x299 = x15 * (x142 * x297 + x44 * (x297 * x66 + x298 * x44))
    x300 = x152 * x21 + x299
    x301 = x212 + x293 * x71
    x302 = x71 * (x209 + x294)
    x303 = x15 * (x301 * x66 + x302 * x44)
    x304 = x158 * x21 + x303
    x305 = x219 + x297 * x71
    x306 = x220 * x66 + x298 * x71
    x307 = x15 * (x305 * x66 + x306 * x44)
    x308 = x166 * x21 + x307
    x309 = x149 + x297 * x79
    x310 = x79 * (x131 + x298)
    x311 = x15 * (x309 * x66 + x310 * x44)
    x312 = x173 * x21 + x311
    x313 = x15 * (x209 * x87 + x302 * x71)
    x314 = x177 * x21 + x313
    x315 = x15 * (x220 * x231 + x306 * x71)
    x316 = x181 * x21 + x315
    x317 = x15 * (x238 * x66 + x310 * x71)
    x318 = x185 * x21 + x317
    x319 = x15 * (x131 * x97 + x310 * x79)
    x320 = x189 * x21 + x319
    x321 = -x11 * x197 + x192 * x194 + x30
    x322 = x321 * x5
    x323 = x11 * x37
    x324 = x192 * x196 - x206 * x323 + x59
    x325 = x31 * x321 - x324 * x61
    x326 = x325 * x4
    x327 = x15 * (x123 * x322 + x44**2 * (2.0 * x322 + x326)) + x202 * x21
    x328 = x322 * x71
    x329 = x15 * (x214 * x322 + x44 * (x326 * x71 + x328)) + x21 * x215
    x330 = x11 * x321 + 2.0 * x195
    x331 = x330 * x66
    x332 = x11 * x325 + x210
    x333 = x15 * (x142 * x330 + x44 * (x331 + x332 * x44)) + x21 * x222
    x334 = x322 * x87
    x335 = x15 * (x326 * x87 + x334) + x21 * x228
    x336 = x231 * x330
    x337 = x15 * (x214 * x332 + x336) + x21 * x233
    x338 = x218 * x50 + x330 * x79
    x339 = x338 * x66
    x340 = x225 + x332 * x79
    x341 = x15 * (x339 + x340 * x44) + x21 * x239
    x342 = x102 * x325 + x21 * x244
    x343 = x105 * x332 + x21 * x248
    x344 = x21 * x251 + x340 * x91
    x345 = x15 * (x242 + x340 * x79) + x21 * x254
    x346 = x101 * x4**3
    x347 = x0 * x115
    x348 = x101 * x6
    x349 = x136 * x348
    x350 = x11 * x348
    x351 = x0 * x141
    x352 = x108 * x4
    x353 = x156 * x71 + x89
    x354 = x163 * x71 + x94
    x355 = x135 * x97 + x99
    x356 = x257 * x346
    x357 = x115 * x20
    x358 = x346 * x357 + x356
    x359 = x266 * x348
    x360 = x20 * x349 + x359
    x361 = x257 * x350
    x362 = x350 * x357 + x361
    x363 = x141 * x273
    x364 = x141 * x20
    x365 = x156 * x364 + x363
    x366 = x141 * x277
    x367 = x163 * x364 + x366
    x368 = x257 * x352
    x369 = x352 * x357 + x368
    x370 = x15 * (x156 * x50 + x273 * x71)
    x371 = x125 * x353 + x370
    x372 = x15 * (x163 * x50 + x277 * x71)
    x373 = x125 * x354 + x372
    x374 = x15 * x97 * (x264 + x265)
    x375 = x125 * x355 + x374
    x376 = x111 * x257
    x377 = x111 * x357 + x376
    x378 = x287 * x346
    x379 = x115 * x21
    x380 = x346 * x379 + x378
    x381 = x293 * x348
    x382 = x21 * x349 + x381
    x383 = x297 * x348
    x384 = x350 * x379 + x383
    x385 = x141 * x301
    x386 = x141 * x21
    x387 = x156 * x386 + x385
    x388 = x141 * x305
    x389 = x163 * x386 + x388
    x390 = x141 * x309
    x391 = x352 * x379 + x390
    x392 = x15 * (x227 + x301 * x71)
    x393 = x203 * x353 + x392
    x394 = x15 * (x232 + x305 * x71)
    x395 = x203 * x354 + x394
    x396 = x15 * (x237 + x309 * x71)
    x397 = x203 * x355 + x396
    x398 = x15 * (x172 + x309 * x79)
    x399 = x111 * x379 + x398
    x400 = x113 * x257 + 2.0 * x127 - x259 * x260
    x401 = x400 * x8
    x402 = 3.0 * x258
    x403 = x401 + x402
    x404 = 3.0 * x267 + x403 * x71
    x405 = x79 * (x401 + x402)
    x406 = x113 * x287 + x205 - x259 * x289
    x407 = x346 * x406
    x408 = 2.0 * x288
    x409 = x406 * x8 + x408
    x410 = x348 * x409
    x411 = x11 * x406 + x258
    x412 = x348 * x411
    x413 = x293 * x50 + x409 * x71
    x414 = x141 * x413
    x415 = x297 * x50
    x416 = x411 * x71 + x415
    x417 = x141 * x416
    x418 = x271 + x411 * x79
    x419 = x141 * x418
    x420 = x15 * (x301 * x50 + x413 * x71)
    x421 = x15 * (x305 * x50 + x416 * x71)
    x422 = x309 * x50
    x423 = x15 * (x418 * x71 + x422)
    x424 = x15 * (x281 + x418 * x79)
    x425 = x113 * x321 - x259 * x324
    x426 = x21 * x378 + x346 * x425
    x427 = x322 + x425 * x8
    x428 = x21 * x381 + x348 * x427
    x429 = x11 * x425 + x408
    x430 = x21 * x383 + x348 * x429
    x431 = x328 + x427 * x71
    x432 = x141 * x431 + x21 * x385
    x433 = x331 + x429 * x71
    x434 = x141 * x433 + x21 * x388
    x435 = x415 + x429 * x79
    x436 = x141 * x435 + x21 * x390
    x437 = x15 * (x334 + x431 * x71) + x21 * x392
    x438 = x15 * (x336 + x433 * x71) + x21 * x394
    x439 = x15 * (x339 + x435 * x71) + x21 * x396
    x440 = x15 * (x422 + x435 * x79) + x21 * x398
    x441 = x0 * x194
    x442 = x348 * x8
    x443 = x0 * x218
    x444 = x105 * x4
    x445 = x101 * x76
    x446 = x236 * x91
    x447 = x236 * x79 + x99
    x448 = x194 * x20
    x449 = x346 * x448 + x378
    x450 = x381 + x442 * x448
    x451 = x20 * x218
    x452 = x348 * x451 + x383
    x453 = x385 + x444 * x448
    x454 = x388 + x445 * x451
    x455 = x236 * x364 + x390
    x456 = x102 * x448 + x392
    x457 = x105 * x451 + x394
    x458 = x20 * x446 + x396
    x459 = x125 * x447 + x398
    x460 = x321 * x346
    x461 = x194 * x21
    x462 = x346 * x461 + x460
    x463 = x321 * x442
    x464 = x442 * x461 + x463
    x465 = x330 * x348
    x466 = x21 * x218
    x467 = x348 * x466 + x465
    x468 = x321 * x444
    x469 = x444 * x461 + x468
    x470 = x330 * x445
    x471 = x445 * x466 + x470
    x472 = x141 * x338
    x473 = x236 * x386 + x472
    x474 = x102 * x321
    x475 = x102 * x461 + x474
    x476 = x105 * x330
    x477 = x105 * x466 + x476
    x478 = x338 * x91
    x479 = x21 * x446 + x478
    x480 = x15 * (x236 * x50 + x338 * x79)
    x481 = x203 * x447 + x480
    x482 = x192 * x321 + 2.0 * x205 - x323 * x324
    x483 = x11 * x482 + 3.0 * x322
    x484 = 3.0 * x331 + x483 * x79

    # 180 item(s)
    result[0, 0, 0] = numpy.sum(
        x70
        * (
            x0 * x55
            + x0 * (x55 + x57 * x58)
            + x15 * (x44 * (x43 * x67 + x44 * (x63 + x65)) + x51 * x67)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x78
        * (
            x0 * x75
            + x0 * (x58 * x77 + x75)
            + x15 * (x44 * x71 * (x63 + x65) + x67 * x72)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x78
        * (
            x0 * x83
            + x0 * (x58 * x85 + x83)
            + x15 * (x44 * x79 * (x63 + x65) + x67 * x80)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x78 * (x0 * x88 + x0 * (x58 * x90 + x88) + x15 * x87 * (x63 + x65))
    )
    result[0, 0, 4] = numpy.sum(
        x96 * (x0 * x93 + x0 * (x58 * x95 + x93) + x15 * x92 * (x63 + x65))
    )
    result[0, 0, 5] = numpy.sum(
        x78 * (x0 * x98 + x0 * (x100 * x58 + x98) + x15 * x97 * (x63 + x65))
    )
    result[0, 0, 6] = numpy.sum(
        x70 * (x0 * x103 + x0 * (x102 * x104 + x103) + x102 * x62)
    )
    result[0, 0, 7] = numpy.sum(
        x78 * (x0 * x107 + x0 * (x104 * x106 + x107) + x106 * x62)
    )
    result[0, 0, 8] = numpy.sum(
        x78 * (x0 * x110 + x0 * (x104 * x109 + x110) + x109 * x62)
    )
    result[0, 0, 9] = numpy.sum(
        x70 * (x0 * x112 + x0 * (x104 * x111 + x112) + x111 * x62)
    )
    result[0, 1, 0] = numpy.sum(x134 * (x0 * x126 + x133 + x20 * x55))
    result[0, 1, 1] = numpy.sum(x96 * (x0 * x144 + x148 + x20 * x75))
    result[0, 1, 2] = numpy.sum(x96 * (x0 * x153 + x155 + x20 * x83))
    result[0, 1, 3] = numpy.sum(x96 * (x0 * x159 + x162 + x20 * x88))
    result[0, 1, 4] = numpy.sum(x68 * (x0 * x167 + x171 + x20 * x93))
    result[0, 1, 5] = numpy.sum(x96 * (x0 * x174 + x176 + x20 * x98))
    result[0, 1, 6] = numpy.sum(x134 * (x0 * x179 + x103 * x20 + x180))
    result[0, 1, 7] = numpy.sum(x96 * (x0 * x182 + x107 * x20 + x183))
    result[0, 1, 8] = numpy.sum(x96 * (x0 * x186 + x110 * x20 + x188))
    result[0, 1, 9] = numpy.sum(x134 * (x0 * x190 + x112 * x20 + x191))
    result[0, 2, 0] = numpy.sum(x134 * (x0 * x204 + x21 * x55 + x211))
    result[0, 2, 1] = numpy.sum(x96 * (x0 * x216 + x21 * x75 + x217))
    result[0, 2, 2] = numpy.sum(x96 * (x0 * x223 + x21 * x83 + x226))
    result[0, 2, 3] = numpy.sum(x96 * (x0 * x229 + x21 * x88 + x230))
    result[0, 2, 4] = numpy.sum(x68 * (x0 * x234 + x21 * x93 + x235))
    result[0, 2, 5] = numpy.sum(x96 * (x0 * x240 + x21 * x98 + x243))
    result[0, 2, 6] = numpy.sum(x134 * (x0 * x246 + x103 * x21 + x247))
    result[0, 2, 7] = numpy.sum(x96 * (x0 * x249 + x107 * x21 + x250))
    result[0, 2, 8] = numpy.sum(x96 * (x0 * x252 + x110 * x21 + x253))
    result[0, 2, 9] = numpy.sum(x134 * (x0 * x255 + x112 * x21 + x256))
    result[0, 3, 0] = numpy.sum(x70 * (x126 * x20 + x263))
    result[0, 3, 1] = numpy.sum(x78 * (x144 * x20 + x270))
    result[0, 3, 2] = numpy.sum(x78 * (x153 * x20 + x272))
    result[0, 3, 3] = numpy.sum(x78 * (x159 * x20 + x276))
    result[0, 3, 4] = numpy.sum(x96 * (x167 * x20 + x280))
    result[0, 3, 5] = numpy.sum(x78 * (x174 * x20 + x282))
    result[0, 3, 6] = numpy.sum(x70 * (x179 * x20 + x283))
    result[0, 3, 7] = numpy.sum(x78 * (x182 * x20 + x284))
    result[0, 3, 8] = numpy.sum(x78 * (x186 * x20 + x285))
    result[0, 3, 9] = numpy.sum(x70 * (x190 * x20 + x286))
    result[0, 4, 0] = numpy.sum(x134 * (x20 * x204 + x292))
    result[0, 4, 1] = numpy.sum(x96 * (x20 * x216 + x296))
    result[0, 4, 2] = numpy.sum(x96 * (x20 * x223 + x300))
    result[0, 4, 3] = numpy.sum(x96 * (x20 * x229 + x304))
    result[0, 4, 4] = numpy.sum(x68 * (x20 * x234 + x308))
    result[0, 4, 5] = numpy.sum(x96 * (x20 * x240 + x312))
    result[0, 4, 6] = numpy.sum(x134 * (x20 * x246 + x314))
    result[0, 4, 7] = numpy.sum(x96 * (x20 * x249 + x316))
    result[0, 4, 8] = numpy.sum(x96 * (x20 * x252 + x318))
    result[0, 4, 9] = numpy.sum(x134 * (x20 * x255 + x320))
    result[0, 5, 0] = numpy.sum(x70 * (x204 * x21 + x327))
    result[0, 5, 1] = numpy.sum(x78 * (x21 * x216 + x329))
    result[0, 5, 2] = numpy.sum(x78 * (x21 * x223 + x333))
    result[0, 5, 3] = numpy.sum(x78 * (x21 * x229 + x335))
    result[0, 5, 4] = numpy.sum(x96 * (x21 * x234 + x337))
    result[0, 5, 5] = numpy.sum(x78 * (x21 * x240 + x341))
    result[0, 5, 6] = numpy.sum(x70 * (x21 * x246 + x342))
    result[0, 5, 7] = numpy.sum(x78 * (x21 * x249 + x343))
    result[0, 5, 8] = numpy.sum(x78 * (x21 * x252 + x344))
    result[0, 5, 9] = numpy.sum(x70 * (x21 * x255 + x345))
    result[1, 0, 0] = numpy.sum(x70 * (x0 * x124 + x0 * (x124 + x346 * x347) + x133))
    result[1, 0, 1] = numpy.sum(x78 * (x0 * x143 + x0 * (x0 * x349 + x143) + x148))
    result[1, 0, 2] = numpy.sum(x78 * (x0 * x152 + x0 * (x152 + x347 * x350) + x155))
    result[1, 0, 3] = numpy.sum(x78 * (x0 * x158 + x0 * (x156 * x351 + x158) + x162))
    result[1, 0, 4] = numpy.sum(x96 * (x0 * x166 + x0 * (x163 * x351 + x166) + x171))
    result[1, 0, 5] = numpy.sum(x78 * (x0 * x173 + x0 * (x173 + x347 * x352) + x176))
    result[1, 0, 6] = numpy.sum(x70 * (x0 * x177 + x0 * (x177 + x353 * x58) + x180))
    result[1, 0, 7] = numpy.sum(x78 * (x0 * x181 + x0 * (x181 + x354 * x58) + x183))
    result[1, 0, 8] = numpy.sum(x78 * (x0 * x185 + x0 * (x185 + x355 * x58) + x188))
    result[1, 0, 9] = numpy.sum(x70 * (x0 * x189 + x0 * (x111 * x347 + x189) + x191))
    result[1, 1, 0] = numpy.sum(x134 * (x0 * x358 + x263))
    result[1, 1, 1] = numpy.sum(x96 * (x0 * x360 + x270))
    result[1, 1, 2] = numpy.sum(x96 * (x0 * x362 + x272))
    result[1, 1, 3] = numpy.sum(x96 * (x0 * x365 + x276))
    result[1, 1, 4] = numpy.sum(x68 * (x0 * x367 + x280))
    result[1, 1, 5] = numpy.sum(x96 * (x0 * x369 + x282))
    result[1, 1, 6] = numpy.sum(x134 * (x0 * x371 + x283))
    result[1, 1, 7] = numpy.sum(x96 * (x0 * x373 + x284))
    result[1, 1, 8] = numpy.sum(x96 * (x0 * x375 + x285))
    result[1, 1, 9] = numpy.sum(x134 * (x0 * x377 + x286))
    result[1, 2, 0] = numpy.sum(x134 * (x0 * x380 + x292))
    result[1, 2, 1] = numpy.sum(x96 * (x0 * x382 + x296))
    result[1, 2, 2] = numpy.sum(x96 * (x0 * x384 + x300))
    result[1, 2, 3] = numpy.sum(x96 * (x0 * x387 + x304))
    result[1, 2, 4] = numpy.sum(x68 * (x0 * x389 + x308))
    result[1, 2, 5] = numpy.sum(x96 * (x0 * x391 + x312))
    result[1, 2, 6] = numpy.sum(x134 * (x0 * x393 + x314))
    result[1, 2, 7] = numpy.sum(x96 * (x0 * x395 + x316))
    result[1, 2, 8] = numpy.sum(x96 * (x0 * x397 + x318))
    result[1, 2, 9] = numpy.sum(x134 * (x0 * x399 + x320))
    result[1, 3, 0] = numpy.sum(x70 * (x20 * x356 + x20 * x358 + x346 * x400))
    result[1, 3, 1] = numpy.sum(x78 * (x20 * x359 + x20 * x360 + x348 * x403))
    result[1, 3, 2] = numpy.sum(x78 * (x20 * x361 + x20 * x362 + x350 * x400))
    result[1, 3, 3] = numpy.sum(x78 * (x141 * x404 + x20 * x363 + x20 * x365))
    result[1, 3, 4] = numpy.sum(x96 * (x141 * x405 + x20 * x366 + x20 * x367))
    result[1, 3, 5] = numpy.sum(x78 * (x20 * x368 + x20 * x369 + x352 * x400))
    result[1, 3, 6] = numpy.sum(
        x70 * (x15 * (3.0 * x274 + x404 * x71) + x20 * x370 + x20 * x371)
    )
    result[1, 3, 7] = numpy.sum(
        x78 * (x15 * (3.0 * x278 + x405 * x71) + x20 * x372 + x20 * x373)
    )
    result[1, 3, 8] = numpy.sum(
        x78 * (x15 * x97 * (x401 + x402) + x20 * x374 + x20 * x375)
    )
    result[1, 3, 9] = numpy.sum(x70 * (x111 * x400 + x20 * x376 + x20 * x377))
    result[1, 4, 0] = numpy.sum(x134 * (x20 * x380 + x21 * x356 + x407))
    result[1, 4, 1] = numpy.sum(x96 * (x20 * x382 + x21 * x359 + x410))
    result[1, 4, 2] = numpy.sum(x96 * (x20 * x384 + x21 * x361 + x412))
    result[1, 4, 3] = numpy.sum(x96 * (x20 * x387 + x21 * x363 + x414))
    result[1, 4, 4] = numpy.sum(x68 * (x20 * x389 + x21 * x366 + x417))
    result[1, 4, 5] = numpy.sum(x96 * (x20 * x391 + x21 * x368 + x419))
    result[1, 4, 6] = numpy.sum(x134 * (x20 * x393 + x21 * x370 + x420))
    result[1, 4, 7] = numpy.sum(x96 * (x20 * x395 + x21 * x372 + x421))
    result[1, 4, 8] = numpy.sum(x96 * (x20 * x397 + x21 * x374 + x423))
    result[1, 4, 9] = numpy.sum(x134 * (x20 * x399 + x21 * x376 + x424))
    result[1, 5, 0] = numpy.sum(x70 * (x21 * x380 + x426))
    result[1, 5, 1] = numpy.sum(x78 * (x21 * x382 + x428))
    result[1, 5, 2] = numpy.sum(x78 * (x21 * x384 + x430))
    result[1, 5, 3] = numpy.sum(x78 * (x21 * x387 + x432))
    result[1, 5, 4] = numpy.sum(x96 * (x21 * x389 + x434))
    result[1, 5, 5] = numpy.sum(x78 * (x21 * x391 + x436))
    result[1, 5, 6] = numpy.sum(x70 * (x21 * x393 + x437))
    result[1, 5, 7] = numpy.sum(x78 * (x21 * x395 + x438))
    result[1, 5, 8] = numpy.sum(x78 * (x21 * x397 + x439))
    result[1, 5, 9] = numpy.sum(x70 * (x21 * x399 + x440))
    result[2, 0, 0] = numpy.sum(x70 * (x0 * x202 + x0 * (x202 + x346 * x441) + x211))
    result[2, 0, 1] = numpy.sum(x78 * (x0 * x215 + x0 * (x215 + x441 * x442) + x217))
    result[2, 0, 2] = numpy.sum(x78 * (x0 * x222 + x0 * (x222 + x348 * x443) + x226))
    result[2, 0, 3] = numpy.sum(x78 * (x0 * x228 + x0 * (x228 + x441 * x444) + x230))
    result[2, 0, 4] = numpy.sum(x96 * (x0 * x233 + x0 * (x233 + x443 * x445) + x235))
    result[2, 0, 5] = numpy.sum(x78 * (x0 * x239 + x0 * (x236 * x351 + x239) + x243))
    result[2, 0, 6] = numpy.sum(x70 * (x0 * x244 + x0 * (x102 * x441 + x244) + x247))
    result[2, 0, 7] = numpy.sum(x78 * (x0 * x248 + x0 * (x105 * x443 + x248) + x250))
    result[2, 0, 8] = numpy.sum(x78 * (x0 * x251 + x0 * (x0 * x446 + x251) + x253))
    result[2, 0, 9] = numpy.sum(x70 * (x0 * x254 + x0 * (x254 + x447 * x58) + x256))
    result[2, 1, 0] = numpy.sum(x134 * (x0 * x449 + x20 * x202 + x291))
    result[2, 1, 1] = numpy.sum(x96 * (x0 * x450 + x20 * x215 + x295))
    result[2, 1, 2] = numpy.sum(x96 * (x0 * x452 + x20 * x222 + x299))
    result[2, 1, 3] = numpy.sum(x96 * (x0 * x453 + x20 * x228 + x303))
    result[2, 1, 4] = numpy.sum(x68 * (x0 * x454 + x20 * x233 + x307))
    result[2, 1, 5] = numpy.sum(x96 * (x0 * x455 + x20 * x239 + x311))
    result[2, 1, 6] = numpy.sum(x134 * (x0 * x456 + x20 * x244 + x313))
    result[2, 1, 7] = numpy.sum(x96 * (x0 * x457 + x20 * x248 + x315))
    result[2, 1, 8] = numpy.sum(x96 * (x0 * x458 + x20 * x251 + x317))
    result[2, 1, 9] = numpy.sum(x134 * (x0 * x459 + x20 * x254 + x319))
    result[2, 2, 0] = numpy.sum(x134 * (x0 * x462 + x327))
    result[2, 2, 1] = numpy.sum(x96 * (x0 * x464 + x329))
    result[2, 2, 2] = numpy.sum(x96 * (x0 * x467 + x333))
    result[2, 2, 3] = numpy.sum(x96 * (x0 * x469 + x335))
    result[2, 2, 4] = numpy.sum(x68 * (x0 * x471 + x337))
    result[2, 2, 5] = numpy.sum(x96 * (x0 * x473 + x341))
    result[2, 2, 6] = numpy.sum(x134 * (x0 * x475 + x342))
    result[2, 2, 7] = numpy.sum(x96 * (x0 * x477 + x343))
    result[2, 2, 8] = numpy.sum(x96 * (x0 * x479 + x344))
    result[2, 2, 9] = numpy.sum(x134 * (x0 * x481 + x345))
    result[2, 3, 0] = numpy.sum(x70 * (x20 * x378 + x20 * x449 + x407))
    result[2, 3, 1] = numpy.sum(x78 * (x20 * x381 + x20 * x450 + x410))
    result[2, 3, 2] = numpy.sum(x78 * (x20 * x383 + x20 * x452 + x412))
    result[2, 3, 3] = numpy.sum(x78 * (x20 * x385 + x20 * x453 + x414))
    result[2, 3, 4] = numpy.sum(x96 * (x20 * x388 + x20 * x454 + x417))
    result[2, 3, 5] = numpy.sum(x78 * (x20 * x390 + x20 * x455 + x419))
    result[2, 3, 6] = numpy.sum(x70 * (x20 * x392 + x20 * x456 + x420))
    result[2, 3, 7] = numpy.sum(x78 * (x20 * x394 + x20 * x457 + x421))
    result[2, 3, 8] = numpy.sum(x78 * (x20 * x396 + x20 * x458 + x423))
    result[2, 3, 9] = numpy.sum(x70 * (x20 * x398 + x20 * x459 + x424))
    result[2, 4, 0] = numpy.sum(x134 * (x20 * x462 + x426))
    result[2, 4, 1] = numpy.sum(x96 * (x20 * x464 + x428))
    result[2, 4, 2] = numpy.sum(x96 * (x20 * x467 + x430))
    result[2, 4, 3] = numpy.sum(x96 * (x20 * x469 + x432))
    result[2, 4, 4] = numpy.sum(x68 * (x20 * x471 + x434))
    result[2, 4, 5] = numpy.sum(x96 * (x20 * x473 + x436))
    result[2, 4, 6] = numpy.sum(x134 * (x20 * x475 + x437))
    result[2, 4, 7] = numpy.sum(x96 * (x20 * x477 + x438))
    result[2, 4, 8] = numpy.sum(x96 * (x20 * x479 + x439))
    result[2, 4, 9] = numpy.sum(x134 * (x20 * x481 + x440))
    result[2, 5, 0] = numpy.sum(x70 * (x21 * x460 + x21 * x462 + x346 * x482))
    result[2, 5, 1] = numpy.sum(x78 * (x21 * x463 + x21 * x464 + x442 * x482))
    result[2, 5, 2] = numpy.sum(x78 * (x21 * x465 + x21 * x467 + x348 * x483))
    result[2, 5, 3] = numpy.sum(x78 * (x21 * x468 + x21 * x469 + x444 * x482))
    result[2, 5, 4] = numpy.sum(x96 * (x21 * x470 + x21 * x471 + x445 * x483))
    result[2, 5, 5] = numpy.sum(x78 * (x141 * x484 + x21 * x472 + x21 * x473))
    result[2, 5, 6] = numpy.sum(x70 * (x102 * x482 + x21 * x474 + x21 * x475))
    result[2, 5, 7] = numpy.sum(x78 * (x105 * x483 + x21 * x476 + x21 * x477))
    result[2, 5, 8] = numpy.sum(x78 * (x21 * x478 + x21 * x479 + x484 * x91))
    result[2, 5, 9] = numpy.sum(
        x70 * (x15 * (3.0 * x339 + x484 * x79) + x21 * x480 + x21 * x481)
    )
    return result


def int3c2e3d_sph_124(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pd|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 6, 15), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = 0.5 / (ax + bx)
    x6 = x4**2
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x2 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x1
    x14 = x13 ** (-1.0)
    x15 = x1 * x14
    x16 = cx * x15 * (x12 + x6 + x9)
    x17 = boys(5, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = x19 * x22
    x24 = x2 * x23
    x25 = 2.0 * x18 * x24
    x26 = x17 * x25
    x27 = cx ** (-1.0)
    x28 = x13 ** (-0.5)
    x29 = boys(4, x16)
    x30 = x5 * (2.0 * x19 * x2 * x22 * x27 * x28 * x29 - x26)
    x31 = -x3 - A[0]
    x32 = -2.0 * x19 * x2 * x22 * x27 * x28 * x29 * x31 + x26 * x4
    x33 = -x32
    x34 = boys(6, x16)
    x35 = x25 * x34
    x36 = 2.0 * x17 * x19 * x2 * x22 * x27 * x28 * x31 - x35 * x4
    x37 = cx * x14
    x38 = x36 * x37
    x39 = x30 + x31 * x33 - x38 * x4
    x40 = x39 * x4
    x41 = x33 * x5
    x42 = 2.0 * x41
    x43 = x40 + x42
    x44 = x15 * x4
    x45 = x33 * x4
    x46 = 2.0 * x5
    x47 = x27 * x29 * x46
    x48 = x24 * x28 * x47
    x49 = x45 + x48
    x50 = x15 * x46
    x51 = x43 * x44 + x49 * x50
    x52 = x23 * x47
    x53 = x18 * x52
    x54 = x4 * x53 + x44 * x49
    x55 = x44 * x51 + x50 * x54
    x56 = x52 * x6
    x57 = x1 * x13 ** (-2.5)
    x58 = x44 * x54 + x56 * x57
    x59 = x15 * (x44 * x55 + x50 * x58)
    x60 = x4**3
    x61 = x1**2
    x62 = x13 ** (-3.5) * x61
    x63 = x52 * x62
    x64 = x44 * x58 + x60 * x63
    x65 = x0 * x15
    x66 = x5 * (2.0 * x17 * x19 * x2 * x22 * x27 * x28 - x35)
    x67 = x25 * boys(7, x16)
    x68 = x37 * x4
    x69 = (
        x31 * x39
        - x46 * (x32 + x38)
        - x68
        * (
            x31 * x36
            + x66
            - x68 * (2.0 * x19 * x2 * x22 * x27 * x28 * x31 * x34 - x4 * x67)
        )
    )
    x70 = x4 * x69
    x71 = x39 * x5
    x72 = 3.0 * x71
    x73 = x15 * x5
    x74 = 3.0 * x73
    x75 = da * db * dc
    x76 = 0.009523809523809524 * x75
    x77 = 5.916079783099616 * x76
    x78 = x15 * x8
    x79 = x78 * (x40 + x42)
    x80 = x53 * x8
    x81 = x45 * x78 + x80
    x82 = x44 * x79 + x50 * x81
    x83 = x52 * x57
    x84 = x4 * x83
    x85 = x44 * x81 + x8 * x84
    x86 = x15 * (x44 * x82 + x50 * x85)
    x87 = x56 * x62
    x88 = x44 * x85 + x8 * x87
    x89 = 0.06666666666666667 * x75
    x90 = 2.23606797749979 * x89
    x91 = x11 * x15
    x92 = x91 * (x40 + x42)
    x93 = x11 * x53
    x94 = x45 * x91 + x93
    x95 = x44 * x92 + x50 * x94
    x96 = x11 * x84 + x44 * x94
    x97 = x15 * (x44 * x95 + x50 * x96)
    x98 = x11 * x87 + x44 * x96
    x99 = x61 / x13**2
    x100 = x9 * x99
    x101 = x100 * (x40 + x42)
    x102 = x83 * x9
    x103 = x100 * x45 + x102
    x104 = x15 * (x101 * x44 + x103 * x50)
    x105 = x63 * x9
    x106 = x103 * x44 + x105 * x4
    x107 = 1.732050807568877
    x108 = 0.1111111111111111 * x107 * x75
    x109 = x8 * x99
    x110 = x109 * x11
    x111 = x110 * (x40 + x42)
    x112 = x11 * x8
    x113 = x112 * x83
    x114 = x110 * x45 + x113
    x115 = x15 * (x111 * x44 + x114 * x50)
    x116 = x112 * x4 * x63 + x114 * x44
    x117 = 0.3333333333333333 * x75
    x118 = x12 * x99
    x119 = x118 * (x40 + x42)
    x120 = x12 * x83
    x121 = x118 * x45 + x120
    x122 = x15 * (x119 * x44 + x121 * x50)
    x123 = x12 * x4
    x124 = x121 * x44 + x123 * x63
    x125 = x8**3
    x126 = x1**3 / x13**3
    x127 = x125 * x126
    x128 = x127 * x15 * (x40 + x42)
    x129 = x125 * x63
    x130 = x127 * x45 + x129
    x131 = x126 * x9
    x132 = x11 * x131
    x133 = x132 * x15 * (x40 + x42)
    x134 = x105 * x11
    x135 = x132 * x45 + x134
    x136 = x126 * x8
    x137 = x12 * x136
    x138 = x137 * x15 * (x40 + x42)
    x139 = x12 * x63 * x8
    x140 = x137 * x45 + x139
    x141 = x11**3
    x142 = x126 * x141
    x143 = x142 * x15 * (x40 + x42)
    x144 = x141 * x63
    x145 = x142 * x45 + x144
    x146 = x1**4 / x13**4
    x147 = x146 * x8**4
    x148 = x147 * x39
    x149 = x0 * x33
    x150 = x125 * x146
    x151 = x11 * x150
    x152 = x151 * x39
    x153 = x146 * x39
    x154 = x12 * x9
    x155 = x153 * x154
    x156 = x146 * x149
    x157 = x146 * x69
    x158 = x141 * x8
    x159 = x153 * x158
    x160 = x11**4 * x146
    x161 = x160 * x39
    x162 = -x7 - A[1]
    x163 = -2.0 * x162 * x19 * x2 * x22 * x27 * x28 * x29 + x26 * x8
    x164 = -x163
    x165 = x164 * x5
    x166 = 2.0 * x162 * x17 * x19 * x2 * x22 * x27 * x28 - x35 * x8
    x167 = x166 * x37
    x168 = x164 * x31 - x167 * x4
    x169 = x168 * x4
    x170 = x165 + x169
    x171 = x44 * (x165 + x170)
    x172 = x6 * x99
    x173 = x165 * x172 + x171 * x44
    x174 = x126 * x60
    x175 = x15 * (x165 * x174 + x173 * x44)
    x176 = x15 * x20
    x177 = x175 + x176 * x64
    x178 = -x5 * (x163 + x167)
    x179 = 2.0 * x162 * x19 * x2 * x22 * x27 * x28 * x34 - x67 * x8
    x180 = x168 * x31 + x178 - x68 * (x166 * x31 - x179 * x68)
    x181 = x180 * x4
    x182 = x168 * x5
    x183 = 2.0 * x182
    x184 = x15 * (
        x173 * x50 + x44 * (x171 * x50 + x44 * (x170 * x50 + x44 * (x181 + x183)))
    )
    x185 = 10.2469507659596 * x76
    x186 = x164 * x8
    x187 = x186 + x48
    x188 = x15 * x187
    x189 = x168 * x8
    x190 = x189 + x41
    x191 = x188 * x5 + x190 * x44
    x192 = x4 * x99
    x193 = x187 * x5
    x194 = x191 * x44 + x192 * x193
    x195 = x126 * x6
    x196 = x15 * (x193 * x195 + x194 * x44)
    x197 = x176 * x88 + x196
    x198 = x180 * x8
    x199 = x198 + x71
    x200 = x190 * x50
    x201 = x15 * (x194 * x50 + x44 * (x191 * x50 + x44 * (x199 * x44 + x200)))
    x202 = 3.872983346207417 * x89
    x203 = x165 * x91
    x204 = x169 * x91 + x203
    x205 = x11 * x165
    x206 = x192 * x205 + x204 * x44
    x207 = x15 * (x195 * x205 + x206 * x44)
    x208 = x176 * x98 + x207
    x209 = x183 * x91
    x210 = x15 * (x206 * x50 + x44 * (x204 * x50 + x44 * (x181 * x91 + x209)))
    x211 = x188 * x8 + x80
    x212 = x78 * (x190 + x41)
    x213 = x211 * x73 + x212 * x44
    x214 = x192 * x5
    x215 = x15 * (x211 * x214 + x213 * x44)
    x216 = x106 * x176 + x215
    x217 = x78 * (x199 + x71)
    x218 = x212 * x50
    x219 = x15 * (x213 * x50 + x44 * (x217 * x44 + x218))
    x220 = x186 * x91 + x93
    x221 = x41 * x91
    x222 = x189 * x91 + x221
    x223 = x220 * x73 + x222 * x44
    x224 = x15 * (x214 * x220 + x223 * x44)
    x225 = x116 * x176 + x224
    x226 = x71 * x91
    x227 = x198 * x91 + x226
    x228 = x222 * x50
    x229 = x15 * (x223 * x50 + x44 * (x227 * x44 + x228))
    x230 = x107 * x117
    x231 = x118 * x165
    x232 = x118 * x169 + x231
    x233 = x123 * x126
    x234 = x15 * (x165 * x233 + x232 * x44)
    x235 = x124 * x176 + x234
    x236 = x118 * x183
    x237 = x15 * (x232 * x50 + x44 * (x118 * x181 + x236))
    x238 = x102 + x211 * x78
    x239 = x100 * x41 + x212 * x78
    x240 = x15 * (x238 * x73 + x239 * x44)
    x241 = x130 * x176 + x240
    x242 = x100 * x71 + x217 * x78
    x243 = x239 * x50
    x244 = x15 * (x242 * x44 + x243)
    x245 = x113 + x220 * x78
    x246 = x110 * x41 + x222 * x78
    x247 = x15 * (x245 * x73 + x246 * x44)
    x248 = x135 * x176 + x247
    x249 = x110 * x71 + x227 * x78
    x250 = x246 * x50
    x251 = x15 * (x249 * x44 + x250)
    x252 = x118 * x186 + x120
    x253 = x118 * x41
    x254 = x118 * x189 + x253
    x255 = x15 * (x252 * x73 + x254 * x44)
    x256 = x140 * x176 + x255
    x257 = x118 * x71
    x258 = x118 * x198 + x257
    x259 = x254 * x50
    x260 = x15 * (x258 * x44 + x259)
    x261 = x142 * x165
    x262 = x15 * (x142 * x169 + x261)
    x263 = x145 * x176 + x262
    x264 = x142 * x183
    x265 = x15 * (x142 * x181 + x264)
    x266 = x15 * (x127 * x41 + x239 * x78)
    x267 = x20 * x33
    x268 = x147 * x267 + x266
    x269 = x15 * (x127 * x71 + x242 * x78)
    x270 = x15 * (x132 * x41 + x246 * x78)
    x271 = x151 * x267 + x270
    x272 = x15 * (x132 * x71 + x249 * x78)
    x273 = x15 * (x137 * x41 + x254 * x78)
    x274 = x146 * x267
    x275 = x154 * x274 + x273
    x276 = x15 * (x137 * x71 + x258 * x78)
    x277 = x142 * x41
    x278 = x15 * (x142 * x189 + x277)
    x279 = x158 * x274 + x278
    x280 = x142 * x71
    x281 = x15 * (x142 * x198 + x280)
    x282 = x160 * x168
    x283 = x160 * x267 + x282
    x284 = x160 * x180
    x285 = -x10 - A[2]
    x286 = x11 * x26 - 2.0 * x19 * x2 * x22 * x27 * x28 * x285 * x29
    x287 = -x286
    x288 = x287 * x5
    x289 = -x11 * x35 + 2.0 * x17 * x19 * x2 * x22 * x27 * x28 * x285
    x290 = x289 * x37
    x291 = x287 * x31 - x290 * x4
    x292 = x291 * x4
    x293 = x288 + x292
    x294 = x44 * (x288 + x293)
    x295 = x172 * x288 + x294 * x44
    x296 = x15 * (x174 * x288 + x295 * x44)
    x297 = x15 * x21
    x298 = x296 + x297 * x64
    x299 = -x5 * (x286 + x290)
    x300 = -x11 * x67 + 2.0 * x19 * x2 * x22 * x27 * x28 * x285 * x34
    x301 = x291 * x31 + x299 - x68 * (x289 * x31 - x300 * x68)
    x302 = x301 * x4
    x303 = x291 * x5
    x304 = 2.0 * x303
    x305 = x15 * (
        x295 * x50 + x44 * (x294 * x50 + x44 * (x293 * x50 + x44 * (x302 + x304)))
    )
    x306 = x288 * x78
    x307 = x292 * x78 + x306
    x308 = x109 * x4
    x309 = x288 * x308 + x307 * x44
    x310 = x195 * x8
    x311 = x15 * (x288 * x310 + x309 * x44)
    x312 = x297 * x88 + x311
    x313 = x15 * (x309 * x50 + x44 * (x307 * x50 + x44 * x78 * (x302 + x304)))
    x314 = x11 * x287 + x48
    x315 = x314 * x73
    x316 = x11 * x291 + x41
    x317 = x315 + x316 * x44
    x318 = x214 * x314 + x317 * x44
    x319 = x314 * x5
    x320 = x15 * (x195 * x319 + x318 * x44)
    x321 = x297 * x98 + x320
    x322 = x11 * x301 + x71
    x323 = x316 * x50
    x324 = x15 * (x318 * x50 + x44 * (x317 * x50 + x44 * (x322 * x44 + x323)))
    x325 = x100 * x288
    x326 = x100 * x292 + x325
    x327 = x131 * x4
    x328 = x15 * (x288 * x327 + x326 * x44)
    x329 = x106 * x297 + x328
    x330 = x15 * (x100 * x44 * (x302 + x304) + x326 * x50)
    x331 = x109 * x319
    x332 = x308 * x316 + x331
    x333 = x136 * x4
    x334 = x15 * (x319 * x333 + x332 * x44)
    x335 = x116 * x297 + x334
    x336 = x316 * x46
    x337 = x15 * (x332 * x50 + x44 * (x109 * x336 + x308 * x322))
    x338 = x314 * x91 + x93
    x339 = x338 * x73
    x340 = x221 + x316 * x91
    x341 = x339 + x340 * x44
    x342 = x15 * (x214 * x338 + x341 * x44)
    x343 = x124 * x297 + x342
    x344 = x226 + x322 * x91
    x345 = x340 * x50
    x346 = x15 * (x341 * x50 + x44 * (x344 * x44 + x345))
    x347 = x127 * x288
    x348 = x15 * (x127 * x292 + x347)
    x349 = x130 * x297 + x348
    x350 = x127 * x15 * (x302 + x304)
    x351 = x131 * x319
    x352 = x15 * (x316 * x327 + x351)
    x353 = x135 * x297 + x352
    x354 = x15 * (x131 * x336 + x322 * x327)
    x355 = x109 * x5
    x356 = x338 * x355
    x357 = x15 * (x308 * x340 + x356)
    x358 = x140 * x297 + x357
    x359 = x15 * (x109 * x340 * x46 + x308 * x344)
    x360 = x120 + x338 * x91
    x361 = x360 * x73
    x362 = x253 + x340 * x91
    x363 = x15 * (x361 + x362 * x44)
    x364 = x145 * x297 + x363
    x365 = x257 + x344 * x91
    x366 = x362 * x50
    x367 = x15 * (x365 * x44 + x366)
    x368 = x147 * x291
    x369 = x21 * x33
    x370 = x147 * x369 + x368
    x371 = x147 * x301
    x372 = x150 * x316
    x373 = x151 * x369 + x372
    x374 = x150 * x322
    x375 = x131 * x340
    x376 = x146 * x369
    x377 = x154 * x376 + x375
    x378 = x131 * x344
    x379 = x109 * x362
    x380 = x158 * x376 + x379
    x381 = x109 * x365
    x382 = x15 * (x277 + x362 * x91)
    x383 = x160 * x369 + x382
    x384 = x15 * (x280 + x365 * x91)
    x385 = x162 * x164 - x167 * x8 + x30
    x386 = x385 * x5
    x387 = x37 * x8
    x388 = x162 * x166 - x179 * x387 + x66
    x389 = x31 * x385 - x388 * x68
    x390 = x389 * x4
    x391 = (
        x15 * (x174 * x386 + x44 * (x172 * x386 + x44**2 * (2.0 * x386 + x390)))
        + x175 * x20
    )
    x392 = x385 * x8
    x393 = 2.0 * x165
    x394 = x392 + x393
    x395 = x394 * x73
    x396 = x389 * x8
    x397 = x183 + x396
    x398 = x195 * x5
    x399 = (
        x15 * (x394 * x398 + x44 * (x214 * x394 + x44 * (x395 + x397 * x44))) + x196 * x20
    )
    x400 = x386 * x91
    x401 = x11 * x386
    x402 = (
        x15 * (x195 * x401 + x44 * (x192 * x401 + x44 * (x390 * x91 + x400))) + x20 * x207
    )
    x403 = x188 * x46 + x394 * x78
    x404 = x403 * x73
    x405 = x200 + x397 * x78
    x406 = x15 * (x214 * x403 + x44 * (x404 + x405 * x44)) + x20 * x215
    x407 = x91 * (x392 + x393)
    x408 = x407 * x73
    x409 = x209 + x396 * x91
    x410 = x15 * (x214 * x407 + x44 * (x408 + x409 * x44)) + x20 * x224
    x411 = x118 * x386
    x412 = x15 * (x233 * x386 + x44 * (x118 * x390 + x411)) + x20 * x234
    x413 = x211 * x50 + x403 * x78
    x414 = x413 * x73
    x415 = x218 + x405 * x78
    x416 = x15 * (x414 + x415 * x44) + x20 * x240
    x417 = x220 * x50 + x407 * x78
    x418 = x417 * x73
    x419 = x228 + x409 * x78
    x420 = x15 * (x418 + x419 * x44) + x20 * x247
    x421 = x118 * (x392 + x393)
    x422 = x421 * x73
    x423 = x118 * x396 + x236
    x424 = x15 * (x422 + x423 * x44) + x20 * x255
    x425 = x142 * x386
    x426 = x15 * (x142 * x390 + x425) + x20 * x262
    x427 = x15 * (x243 + x415 * x78) + x20 * x266
    x428 = x15 * (x250 + x419 * x78) + x20 * x270
    x429 = x15 * (x259 + x423 * x78) + x20 * x273
    x430 = x15 * (x142 * x396 + x264) + x20 * x278
    x431 = x160 * x389 + x20 * x282
    x432 = x162 * x287 - x290 * x8
    x433 = x432 * x5
    x434 = x162 * x289 - x300 * x387
    x435 = x31 * x432 - x434 * x68
    x436 = x15 * (x174 * x433 + x44 * (x172 * x433 + x44**2 * (x4 * x435 + 2.0 * x433)))
    x437 = x175 * x21 + x436
    x438 = x288 + x432 * x8
    x439 = x303 + x435 * x8
    x440 = x15 * (x398 * x438 + x44 * (x214 * x438 + x44 * (x438 * x73 + x439 * x44)))
    x441 = x196 * x21 + x440
    x442 = x11 * x432 + x165
    x443 = x11 * x435 + x182
    x444 = x15 * (x398 * x442 + x44 * (x214 * x442 + x44 * (x44 * x443 + x442 * x73)))
    x445 = x207 * x21 + x444
    x446 = x306 + x438 * x78
    x447 = x78 * (x303 + x439)
    x448 = x15 * (x214 * x446 + x44 * (x44 * x447 + x446 * x73))
    x449 = x21 * x215 + x448
    x450 = x315 + x442 * x78
    x451 = x316 * x73 + x443 * x78
    x452 = x15 * (x214 * x450 + x44 * (x44 * x451 + x450 * x73))
    x453 = x21 * x224 + x452
    x454 = x203 + x442 * x91
    x455 = x91 * (x182 + x443)
    x456 = x15 * (x214 * x454 + x44 * (x44 * x455 + x454 * x73))
    x457 = x21 * x234 + x456
    x458 = x325 + x446 * x78
    x459 = x100 * x303 + x447 * x78
    x460 = x15 * (x44 * x459 + x458 * x73)
    x461 = x21 * x240 + x460
    x462 = x331 + x450 * x78
    x463 = x316 * x355 + x451 * x78
    x464 = x15 * (x44 * x463 + x462 * x73)
    x465 = x21 * x247 + x464
    x466 = x339 + x454 * x78
    x467 = x340 * x73 + x455 * x78
    x468 = x15 * (x44 * x467 + x466 * x73)
    x469 = x21 * x255 + x468
    x470 = x231 + x454 * x91
    x471 = x118 * x182 + x455 * x91
    x472 = x15 * (x44 * x471 + x470 * x73)
    x473 = x21 * x262 + x472
    x474 = x15 * (x127 * x303 + x459 * x78)
    x475 = x21 * x266 + x474
    x476 = x131 * x5
    x477 = x15 * (x316 * x476 + x463 * x78)
    x478 = x21 * x270 + x477
    x479 = x15 * (x340 * x355 + x467 * x78)
    x480 = x21 * x273 + x479
    x481 = x15 * (x362 * x73 + x471 * x78)
    x482 = x21 * x278 + x481
    x483 = x15 * (x142 * x182 + x471 * x91)
    x484 = x21 * x282 + x483
    x485 = -x11 * x290 + x285 * x287 + x30
    x486 = x485 * x5
    x487 = x11 * x37
    x488 = x285 * x289 - x300 * x487 + x66
    x489 = x31 * x485 - x488 * x68
    x490 = x4 * x489
    x491 = (
        x15 * (x174 * x486 + x44 * (x172 * x486 + x44**2 * (2.0 * x486 + x490)))
        + x21 * x296
    )
    x492 = x486 * x78
    x493 = (
        x15 * (x310 * x486 + x44 * (x308 * x486 + x44 * (x490 * x78 + x492))) + x21 * x311
    )
    x494 = x11 * x485 + 2.0 * x288
    x495 = x494 * x73
    x496 = x11 * x489 + x304
    x497 = (
        x15 * (x398 * x494 + x44 * (x214 * x494 + x44 * (x44 * x496 + x495))) + x21 * x320
    )
    x498 = x100 * x486
    x499 = x15 * (x327 * x486 + x44 * (x100 * x490 + x498)) + x21 * x328
    x500 = x355 * x494
    x501 = x4 * x494
    x502 = x15 * (x136 * x5 * x501 + x44 * (x308 * x496 + x500)) + x21 * x334
    x503 = x314 * x50 + x494 * x91
    x504 = x503 * x73
    x505 = x323 + x496 * x91
    x506 = x15 * (x214 * x503 + x44 * (x44 * x505 + x504)) + x21 * x342
    x507 = x127 * x486
    x508 = x15 * (x127 * x490 + x507) + x21 * x348
    x509 = x476 * x494
    x510 = x15 * (x327 * x496 + x509) + x21 * x352
    x511 = x355 * x503
    x512 = x15 * (x308 * x505 + x511) + x21 * x357
    x513 = x338 * x50 + x503 * x91
    x514 = x513 * x73
    x515 = x345 + x505 * x91
    x516 = x15 * (x44 * x515 + x514) + x21 * x363
    x517 = x147 * x489 + x21 * x368
    x518 = x150 * x496 + x21 * x372
    x519 = x131 * x505 + x21 * x375
    x520 = x109 * x515 + x21 * x379
    x521 = x15 * (x366 + x515 * x91) + x21 * x382
    x522 = x146 * x4**4
    x523 = x0 * x164
    x524 = x146 * x60
    x525 = x187 * x524
    x526 = x11 * x524
    x527 = x0 * x195
    x528 = x12 * x6
    x529 = x146 * x523
    x530 = x0 * x192
    x531 = x141 * x4
    x532 = x129 + x238 * x78
    x533 = x134 + x245 * x78
    x534 = x139 + x252 * x78
    x535 = x142 * x186 + x144
    x536 = x385 * x522
    x537 = x164 * x20
    x538 = x522 * x537 + x536
    x539 = x394 * x524
    x540 = x20 * x525 + x539
    x541 = x385 * x526
    x542 = x526 * x537 + x541
    x543 = x195 * x403
    x544 = x195 * x20
    x545 = x211 * x544 + x543
    x546 = x195 * x407
    x547 = x220 * x544 + x546
    x548 = x146 * x385
    x549 = x528 * x548
    x550 = x146 * x537
    x551 = x528 * x550 + x549
    x552 = x192 * x413
    x553 = x192 * x20
    x554 = x238 * x553 + x552
    x555 = x192 * x417
    x556 = x245 * x553 + x555
    x557 = x192 * x421
    x558 = x252 * x553 + x557
    x559 = x531 * x548
    x560 = x531 * x550 + x559
    x561 = x15 * (x238 * x50 + x413 * x78)
    x562 = x176 * x532 + x561
    x563 = x15 * (x245 * x50 + x417 * x78)
    x564 = x176 * x533 + x563
    x565 = x15 * (x252 * x50 + x421 * x78)
    x566 = x176 * x534 + x565
    x567 = x142 * x15 * (x392 + x393)
    x568 = x176 * x535 + x567
    x569 = x160 * x385
    x570 = x160 * x537 + x569
    x571 = x432 * x522
    x572 = x164 * x21
    x573 = x522 * x572 + x571
    x574 = x438 * x524
    x575 = x21 * x525 + x574
    x576 = x442 * x524
    x577 = x526 * x572 + x576
    x578 = x195 * x446
    x579 = x195 * x21
    x580 = x211 * x579 + x578
    x581 = x195 * x450
    x582 = x220 * x579 + x581
    x583 = x195 * x454
    x584 = x146 * x572
    x585 = x528 * x584 + x583
    x586 = x192 * x458
    x587 = x192 * x21
    x588 = x238 * x587 + x586
    x589 = x192 * x462
    x590 = x245 * x587 + x589
    x591 = x192 * x466
    x592 = x252 * x587 + x591
    x593 = x192 * x470
    x594 = x531 * x584 + x593
    x595 = x15 * (x347 + x458 * x78)
    x596 = x297 * x532 + x595
    x597 = x15 * (x351 + x462 * x78)
    x598 = x297 * x533 + x597
    x599 = x15 * (x356 + x466 * x78)
    x600 = x297 * x534 + x599
    x601 = x15 * (x361 + x470 * x78)
    x602 = x297 * x535 + x601
    x603 = x15 * (x261 + x470 * x91)
    x604 = x160 * x572 + x603
    x605 = x162 * x385 + 2.0 * x178 - x387 * x388
    x606 = x605 * x8
    x607 = 3.0 * x386
    x608 = x606 + x607
    x609 = 3.0 * x395 + x608 * x78
    x610 = x91 * (x606 + x607)
    x611 = x146 * x605
    x612 = 3.0 * x404 + x609 * x78
    x613 = 3.0 * x408 + x610 * x78
    x614 = x118 * (x606 + x607)
    x615 = x162 * x432 + x299 - x387 * x434
    x616 = x522 * x615
    x617 = 2.0 * x433
    x618 = x615 * x8 + x617
    x619 = x524 * x618
    x620 = x11 * x615 + x386
    x621 = x524 * x620
    x622 = x438 * x50 + x618 * x78
    x623 = x195 * x622
    x624 = x442 * x50
    x625 = x620 * x78 + x624
    x626 = x195 * x625
    x627 = x400 + x620 * x91
    x628 = x195 * x627
    x629 = x446 * x50 + x622 * x78
    x630 = x192 * x629
    x631 = x450 * x50 + x625 * x78
    x632 = x192 * x631
    x633 = x454 * x50
    x634 = x627 * x78 + x633
    x635 = x192 * x634
    x636 = x411 + x627 * x91
    x637 = x192 * x636
    x638 = x15 * (x458 * x50 + x629 * x78)
    x639 = x15 * (x462 * x50 + x631 * x78)
    x640 = x15 * (x466 * x50 + x634 * x78)
    x641 = x470 * x50
    x642 = x15 * (x636 * x78 + x641)
    x643 = x15 * (x425 + x636 * x91)
    x644 = x162 * x485 - x387 * x488
    x645 = x21 * x571 + x522 * x644
    x646 = x486 + x644 * x8
    x647 = x21 * x574 + x524 * x646
    x648 = x11 * x644 + x617
    x649 = x21 * x576 + x524 * x648
    x650 = x492 + x646 * x78
    x651 = x195 * x650 + x21 * x578
    x652 = x495 + x648 * x78
    x653 = x195 * x652 + x21 * x581
    x654 = x624 + x648 * x91
    x655 = x195 * x654 + x21 * x583
    x656 = x498 + x650 * x78
    x657 = x192 * x656 + x21 * x586
    x658 = x500 + x652 * x78
    x659 = x192 * x658 + x21 * x589
    x660 = x504 + x654 * x78
    x661 = x192 * x660 + x21 * x591
    x662 = x633 + x654 * x91
    x663 = x192 * x662 + x21 * x593
    x664 = x15 * (x507 + x656 * x78) + x21 * x595
    x665 = x15 * (x509 + x658 * x78) + x21 * x597
    x666 = x15 * (x511 + x660 * x78) + x21 * x599
    x667 = x15 * (x514 + x662 * x78) + x21 * x601
    x668 = x15 * (x641 + x662 * x91) + x21 * x603
    x669 = x0 * x287
    x670 = x524 * x8
    x671 = x0 * x314
    x672 = x146 * x6
    x673 = x672 * x9
    x674 = x672 * x8
    x675 = x150 * x4
    x676 = x146 * x9
    x677 = x4 * x676
    x678 = x333 * x338
    x679 = x131 * x338
    x680 = x109 * x360
    x681 = x144 + x360 * x91
    x682 = x20 * x287
    x683 = x522 * x682 + x571
    x684 = x574 + x670 * x682
    x685 = x20 * x314
    x686 = x524 * x685 + x576
    x687 = x578 + x673 * x682
    x688 = x581 + x674 * x685
    x689 = x338 * x544 + x583
    x690 = x586 + x675 * x682
    x691 = x589 + x677 * x685
    x692 = x20 * x678 + x591
    x693 = x360 * x553 + x593
    x694 = x147 * x682 + x595
    x695 = x150 * x685 + x597
    x696 = x20 * x679 + x599
    x697 = x20 * x680 + x601
    x698 = x176 * x681 + x603
    x699 = x485 * x522
    x700 = x21 * x287
    x701 = x522 * x700 + x699
    x702 = x485 * x670
    x703 = x670 * x700 + x702
    x704 = x494 * x524
    x705 = x21 * x314
    x706 = x524 * x705 + x704
    x707 = x485 * x673
    x708 = x673 * x700 + x707
    x709 = x494 * x674
    x710 = x674 * x705 + x709
    x711 = x195 * x503
    x712 = x338 * x579 + x711
    x713 = x485 * x675
    x714 = x675 * x700 + x713
    x715 = x501 * x676
    x716 = x677 * x705 + x715
    x717 = x333 * x503
    x718 = x21 * x678 + x717
    x719 = x192 * x513
    x720 = x360 * x587 + x719
    x721 = x147 * x485
    x722 = x147 * x700 + x721
    x723 = x150 * x494
    x724 = x150 * x705 + x723
    x725 = x131 * x503
    x726 = x21 * x679 + x725
    x727 = x109 * x513
    x728 = x21 * x680 + x727
    x729 = x15 * (x360 * x50 + x513 * x91)
    x730 = x297 * x681 + x729
    x731 = x285 * x485 + 2.0 * x299 - x487 * x488
    x732 = x11 * x731 + 3.0 * x486
    x733 = 3.0 * x495 + x732 * x91
    x734 = 3.0 * x504 + x733 * x91

    # 270 item(s)
    result[0, 0, 0] = numpy.sum(
        x77
        * (
            x0 * x59
            + x0 * (x59 + x64 * x65)
            + x15
            * (x44 * (x44 * (x43 * x74 + x44 * (x70 + x72)) + x51 * x74) + x55 * x74)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x90
        * (
            x0 * x86
            + x0 * (x65 * x88 + x86)
            + x15 * (x44 * (x44 * x78 * (x70 + x72) + x74 * x79) + x74 * x82)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x90
        * (
            x0 * x97
            + x0 * (x65 * x98 + x97)
            + x15 * (x44 * (x44 * x91 * (x70 + x72) + x74 * x92) + x74 * x95)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x108
        * (
            x0 * x104
            + x0 * (x104 + x106 * x65)
            + x15 * (x100 * x44 * (x70 + x72) + x101 * x74)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x117
        * (
            x0 * x115
            + x0 * (x115 + x116 * x65)
            + x15 * (x110 * x44 * (x70 + x72) + x111 * x74)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x108
        * (
            x0 * x122
            + x0 * (x122 + x124 * x65)
            + x15 * (x118 * x44 * (x70 + x72) + x119 * x74)
        )
    )
    result[0, 0, 6] = numpy.sum(
        x90 * (x0 * x128 + x0 * (x128 + x130 * x65) + x127 * x15 * (x70 + x72))
    )
    result[0, 0, 7] = numpy.sum(
        x117 * (x0 * x133 + x0 * (x133 + x135 * x65) + x132 * x15 * (x70 + x72))
    )
    result[0, 0, 8] = numpy.sum(
        x117 * (x0 * x138 + x0 * (x138 + x140 * x65) + x137 * x15 * (x70 + x72))
    )
    result[0, 0, 9] = numpy.sum(
        x90 * (x0 * x143 + x0 * (x143 + x145 * x65) + x142 * x15 * (x70 + x72))
    )
    result[0, 0, 10] = numpy.sum(
        x77 * (x0 * x148 + x0 * (x147 * x149 + x148) + x147 * x69)
    )
    result[0, 0, 11] = numpy.sum(
        x90 * (x0 * x152 + x0 * (x149 * x151 + x152) + x151 * x69)
    )
    result[0, 0, 12] = numpy.sum(
        x108 * (x0 * x155 + x0 * (x154 * x156 + x155) + x154 * x157)
    )
    result[0, 0, 13] = numpy.sum(
        x90 * (x0 * x159 + x0 * (x156 * x158 + x159) + x157 * x158)
    )
    result[0, 0, 14] = numpy.sum(
        x77 * (x0 * x161 + x0 * (x149 * x160 + x161) + x160 * x69)
    )
    result[0, 1, 0] = numpy.sum(x185 * (x0 * x177 + x184 + x20 * x59))
    result[0, 1, 1] = numpy.sum(x202 * (x0 * x197 + x20 * x86 + x201))
    result[0, 1, 2] = numpy.sum(x202 * (x0 * x208 + x20 * x97 + x210))
    result[0, 1, 3] = numpy.sum(x117 * (x0 * x216 + x104 * x20 + x219))
    result[0, 1, 4] = numpy.sum(x230 * (x0 * x225 + x115 * x20 + x229))
    result[0, 1, 5] = numpy.sum(x117 * (x0 * x235 + x122 * x20 + x237))
    result[0, 1, 6] = numpy.sum(x202 * (x0 * x241 + x128 * x20 + x244))
    result[0, 1, 7] = numpy.sum(x230 * (x0 * x248 + x133 * x20 + x251))
    result[0, 1, 8] = numpy.sum(x230 * (x0 * x256 + x138 * x20 + x260))
    result[0, 1, 9] = numpy.sum(x202 * (x0 * x263 + x143 * x20 + x265))
    result[0, 1, 10] = numpy.sum(x185 * (x0 * x268 + x148 * x20 + x269))
    result[0, 1, 11] = numpy.sum(x202 * (x0 * x271 + x152 * x20 + x272))
    result[0, 1, 12] = numpy.sum(x117 * (x0 * x275 + x155 * x20 + x276))
    result[0, 1, 13] = numpy.sum(x202 * (x0 * x279 + x159 * x20 + x281))
    result[0, 1, 14] = numpy.sum(x185 * (x0 * x283 + x161 * x20 + x284))
    result[0, 2, 0] = numpy.sum(x185 * (x0 * x298 + x21 * x59 + x305))
    result[0, 2, 1] = numpy.sum(x202 * (x0 * x312 + x21 * x86 + x313))
    result[0, 2, 2] = numpy.sum(x202 * (x0 * x321 + x21 * x97 + x324))
    result[0, 2, 3] = numpy.sum(x117 * (x0 * x329 + x104 * x21 + x330))
    result[0, 2, 4] = numpy.sum(x230 * (x0 * x335 + x115 * x21 + x337))
    result[0, 2, 5] = numpy.sum(x117 * (x0 * x343 + x122 * x21 + x346))
    result[0, 2, 6] = numpy.sum(x202 * (x0 * x349 + x128 * x21 + x350))
    result[0, 2, 7] = numpy.sum(x230 * (x0 * x353 + x133 * x21 + x354))
    result[0, 2, 8] = numpy.sum(x230 * (x0 * x358 + x138 * x21 + x359))
    result[0, 2, 9] = numpy.sum(x202 * (x0 * x364 + x143 * x21 + x367))
    result[0, 2, 10] = numpy.sum(x185 * (x0 * x370 + x148 * x21 + x371))
    result[0, 2, 11] = numpy.sum(x202 * (x0 * x373 + x152 * x21 + x374))
    result[0, 2, 12] = numpy.sum(x117 * (x0 * x377 + x155 * x21 + x378))
    result[0, 2, 13] = numpy.sum(x202 * (x0 * x380 + x159 * x21 + x381))
    result[0, 2, 14] = numpy.sum(x185 * (x0 * x383 + x161 * x21 + x384))
    result[0, 3, 0] = numpy.sum(x77 * (x177 * x20 + x391))
    result[0, 3, 1] = numpy.sum(x90 * (x197 * x20 + x399))
    result[0, 3, 2] = numpy.sum(x90 * (x20 * x208 + x402))
    result[0, 3, 3] = numpy.sum(x108 * (x20 * x216 + x406))
    result[0, 3, 4] = numpy.sum(x117 * (x20 * x225 + x410))
    result[0, 3, 5] = numpy.sum(x108 * (x20 * x235 + x412))
    result[0, 3, 6] = numpy.sum(x90 * (x20 * x241 + x416))
    result[0, 3, 7] = numpy.sum(x117 * (x20 * x248 + x420))
    result[0, 3, 8] = numpy.sum(x117 * (x20 * x256 + x424))
    result[0, 3, 9] = numpy.sum(x90 * (x20 * x263 + x426))
    result[0, 3, 10] = numpy.sum(x77 * (x20 * x268 + x427))
    result[0, 3, 11] = numpy.sum(x90 * (x20 * x271 + x428))
    result[0, 3, 12] = numpy.sum(x108 * (x20 * x275 + x429))
    result[0, 3, 13] = numpy.sum(x90 * (x20 * x279 + x430))
    result[0, 3, 14] = numpy.sum(x77 * (x20 * x283 + x431))
    result[0, 4, 0] = numpy.sum(x185 * (x20 * x298 + x437))
    result[0, 4, 1] = numpy.sum(x202 * (x20 * x312 + x441))
    result[0, 4, 2] = numpy.sum(x202 * (x20 * x321 + x445))
    result[0, 4, 3] = numpy.sum(x117 * (x20 * x329 + x449))
    result[0, 4, 4] = numpy.sum(x230 * (x20 * x335 + x453))
    result[0, 4, 5] = numpy.sum(x117 * (x20 * x343 + x457))
    result[0, 4, 6] = numpy.sum(x202 * (x20 * x349 + x461))
    result[0, 4, 7] = numpy.sum(x230 * (x20 * x353 + x465))
    result[0, 4, 8] = numpy.sum(x230 * (x20 * x358 + x469))
    result[0, 4, 9] = numpy.sum(x202 * (x20 * x364 + x473))
    result[0, 4, 10] = numpy.sum(x185 * (x20 * x370 + x475))
    result[0, 4, 11] = numpy.sum(x202 * (x20 * x373 + x478))
    result[0, 4, 12] = numpy.sum(x117 * (x20 * x377 + x480))
    result[0, 4, 13] = numpy.sum(x202 * (x20 * x380 + x482))
    result[0, 4, 14] = numpy.sum(x185 * (x20 * x383 + x484))
    result[0, 5, 0] = numpy.sum(x77 * (x21 * x298 + x491))
    result[0, 5, 1] = numpy.sum(x90 * (x21 * x312 + x493))
    result[0, 5, 2] = numpy.sum(x90 * (x21 * x321 + x497))
    result[0, 5, 3] = numpy.sum(x108 * (x21 * x329 + x499))
    result[0, 5, 4] = numpy.sum(x117 * (x21 * x335 + x502))
    result[0, 5, 5] = numpy.sum(x108 * (x21 * x343 + x506))
    result[0, 5, 6] = numpy.sum(x90 * (x21 * x349 + x508))
    result[0, 5, 7] = numpy.sum(x117 * (x21 * x353 + x510))
    result[0, 5, 8] = numpy.sum(x117 * (x21 * x358 + x512))
    result[0, 5, 9] = numpy.sum(x90 * (x21 * x364 + x516))
    result[0, 5, 10] = numpy.sum(x77 * (x21 * x370 + x517))
    result[0, 5, 11] = numpy.sum(x90 * (x21 * x373 + x518))
    result[0, 5, 12] = numpy.sum(x108 * (x21 * x377 + x519))
    result[0, 5, 13] = numpy.sum(x90 * (x21 * x380 + x520))
    result[0, 5, 14] = numpy.sum(x77 * (x21 * x383 + x521))
    result[1, 0, 0] = numpy.sum(x77 * (x0 * x175 + x0 * (x175 + x522 * x523) + x184))
    result[1, 0, 1] = numpy.sum(x90 * (x0 * x196 + x0 * (x0 * x525 + x196) + x201))
    result[1, 0, 2] = numpy.sum(x90 * (x0 * x207 + x0 * (x207 + x523 * x526) + x210))
    result[1, 0, 3] = numpy.sum(x108 * (x0 * x215 + x0 * (x211 * x527 + x215) + x219))
    result[1, 0, 4] = numpy.sum(x117 * (x0 * x224 + x0 * (x220 * x527 + x224) + x229))
    result[1, 0, 5] = numpy.sum(x108 * (x0 * x234 + x0 * (x234 + x528 * x529) + x237))
    result[1, 0, 6] = numpy.sum(x90 * (x0 * x240 + x0 * (x238 * x530 + x240) + x244))
    result[1, 0, 7] = numpy.sum(x117 * (x0 * x247 + x0 * (x245 * x530 + x247) + x251))
    result[1, 0, 8] = numpy.sum(x117 * (x0 * x255 + x0 * (x252 * x530 + x255) + x260))
    result[1, 0, 9] = numpy.sum(x90 * (x0 * x262 + x0 * (x262 + x529 * x531) + x265))
    result[1, 0, 10] = numpy.sum(x77 * (x0 * x266 + x0 * (x266 + x532 * x65) + x269))
    result[1, 0, 11] = numpy.sum(x90 * (x0 * x270 + x0 * (x270 + x533 * x65) + x272))
    result[1, 0, 12] = numpy.sum(x108 * (x0 * x273 + x0 * (x273 + x534 * x65) + x276))
    result[1, 0, 13] = numpy.sum(x90 * (x0 * x278 + x0 * (x278 + x535 * x65) + x281))
    result[1, 0, 14] = numpy.sum(x77 * (x0 * x282 + x0 * (x160 * x523 + x282) + x284))
    result[1, 1, 0] = numpy.sum(x185 * (x0 * x538 + x391))
    result[1, 1, 1] = numpy.sum(x202 * (x0 * x540 + x399))
    result[1, 1, 2] = numpy.sum(x202 * (x0 * x542 + x402))
    result[1, 1, 3] = numpy.sum(x117 * (x0 * x545 + x406))
    result[1, 1, 4] = numpy.sum(x230 * (x0 * x547 + x410))
    result[1, 1, 5] = numpy.sum(x117 * (x0 * x551 + x412))
    result[1, 1, 6] = numpy.sum(x202 * (x0 * x554 + x416))
    result[1, 1, 7] = numpy.sum(x230 * (x0 * x556 + x420))
    result[1, 1, 8] = numpy.sum(x230 * (x0 * x558 + x424))
    result[1, 1, 9] = numpy.sum(x202 * (x0 * x560 + x426))
    result[1, 1, 10] = numpy.sum(x185 * (x0 * x562 + x427))
    result[1, 1, 11] = numpy.sum(x202 * (x0 * x564 + x428))
    result[1, 1, 12] = numpy.sum(x117 * (x0 * x566 + x429))
    result[1, 1, 13] = numpy.sum(x202 * (x0 * x568 + x430))
    result[1, 1, 14] = numpy.sum(x185 * (x0 * x570 + x431))
    result[1, 2, 0] = numpy.sum(x185 * (x0 * x573 + x437))
    result[1, 2, 1] = numpy.sum(x202 * (x0 * x575 + x441))
    result[1, 2, 2] = numpy.sum(x202 * (x0 * x577 + x445))
    result[1, 2, 3] = numpy.sum(x117 * (x0 * x580 + x449))
    result[1, 2, 4] = numpy.sum(x230 * (x0 * x582 + x453))
    result[1, 2, 5] = numpy.sum(x117 * (x0 * x585 + x457))
    result[1, 2, 6] = numpy.sum(x202 * (x0 * x588 + x461))
    result[1, 2, 7] = numpy.sum(x230 * (x0 * x590 + x465))
    result[1, 2, 8] = numpy.sum(x230 * (x0 * x592 + x469))
    result[1, 2, 9] = numpy.sum(x202 * (x0 * x594 + x473))
    result[1, 2, 10] = numpy.sum(x185 * (x0 * x596 + x475))
    result[1, 2, 11] = numpy.sum(x202 * (x0 * x598 + x478))
    result[1, 2, 12] = numpy.sum(x117 * (x0 * x600 + x480))
    result[1, 2, 13] = numpy.sum(x202 * (x0 * x602 + x482))
    result[1, 2, 14] = numpy.sum(x185 * (x0 * x604 + x484))
    result[1, 3, 0] = numpy.sum(x77 * (x20 * x536 + x20 * x538 + x522 * x605))
    result[1, 3, 1] = numpy.sum(x90 * (x20 * x539 + x20 * x540 + x524 * x608))
    result[1, 3, 2] = numpy.sum(x90 * (x20 * x541 + x20 * x542 + x526 * x605))
    result[1, 3, 3] = numpy.sum(x108 * (x195 * x609 + x20 * x543 + x20 * x545))
    result[1, 3, 4] = numpy.sum(x117 * (x195 * x610 + x20 * x546 + x20 * x547))
    result[1, 3, 5] = numpy.sum(x108 * (x20 * x549 + x20 * x551 + x528 * x611))
    result[1, 3, 6] = numpy.sum(x90 * (x192 * x612 + x20 * x552 + x20 * x554))
    result[1, 3, 7] = numpy.sum(x117 * (x192 * x613 + x20 * x555 + x20 * x556))
    result[1, 3, 8] = numpy.sum(x117 * (x192 * x614 + x20 * x557 + x20 * x558))
    result[1, 3, 9] = numpy.sum(x90 * (x20 * x559 + x20 * x560 + x531 * x611))
    result[1, 3, 10] = numpy.sum(
        x77 * (x15 * (3.0 * x414 + x612 * x78) + x20 * x561 + x20 * x562)
    )
    result[1, 3, 11] = numpy.sum(
        x90 * (x15 * (3.0 * x418 + x613 * x78) + x20 * x563 + x20 * x564)
    )
    result[1, 3, 12] = numpy.sum(
        x108 * (x15 * (3.0 * x422 + x614 * x78) + x20 * x565 + x20 * x566)
    )
    result[1, 3, 13] = numpy.sum(
        x90 * (x142 * x15 * (x606 + x607) + x20 * x567 + x20 * x568)
    )
    result[1, 3, 14] = numpy.sum(x77 * (x160 * x605 + x20 * x569 + x20 * x570))
    result[1, 4, 0] = numpy.sum(x185 * (x20 * x573 + x21 * x536 + x616))
    result[1, 4, 1] = numpy.sum(x202 * (x20 * x575 + x21 * x539 + x619))
    result[1, 4, 2] = numpy.sum(x202 * (x20 * x577 + x21 * x541 + x621))
    result[1, 4, 3] = numpy.sum(x117 * (x20 * x580 + x21 * x543 + x623))
    result[1, 4, 4] = numpy.sum(x230 * (x20 * x582 + x21 * x546 + x626))
    result[1, 4, 5] = numpy.sum(x117 * (x20 * x585 + x21 * x549 + x628))
    result[1, 4, 6] = numpy.sum(x202 * (x20 * x588 + x21 * x552 + x630))
    result[1, 4, 7] = numpy.sum(x230 * (x20 * x590 + x21 * x555 + x632))
    result[1, 4, 8] = numpy.sum(x230 * (x20 * x592 + x21 * x557 + x635))
    result[1, 4, 9] = numpy.sum(x202 * (x20 * x594 + x21 * x559 + x637))
    result[1, 4, 10] = numpy.sum(x185 * (x20 * x596 + x21 * x561 + x638))
    result[1, 4, 11] = numpy.sum(x202 * (x20 * x598 + x21 * x563 + x639))
    result[1, 4, 12] = numpy.sum(x117 * (x20 * x600 + x21 * x565 + x640))
    result[1, 4, 13] = numpy.sum(x202 * (x20 * x602 + x21 * x567 + x642))
    result[1, 4, 14] = numpy.sum(x185 * (x20 * x604 + x21 * x569 + x643))
    result[1, 5, 0] = numpy.sum(x77 * (x21 * x573 + x645))
    result[1, 5, 1] = numpy.sum(x90 * (x21 * x575 + x647))
    result[1, 5, 2] = numpy.sum(x90 * (x21 * x577 + x649))
    result[1, 5, 3] = numpy.sum(x108 * (x21 * x580 + x651))
    result[1, 5, 4] = numpy.sum(x117 * (x21 * x582 + x653))
    result[1, 5, 5] = numpy.sum(x108 * (x21 * x585 + x655))
    result[1, 5, 6] = numpy.sum(x90 * (x21 * x588 + x657))
    result[1, 5, 7] = numpy.sum(x117 * (x21 * x590 + x659))
    result[1, 5, 8] = numpy.sum(x117 * (x21 * x592 + x661))
    result[1, 5, 9] = numpy.sum(x90 * (x21 * x594 + x663))
    result[1, 5, 10] = numpy.sum(x77 * (x21 * x596 + x664))
    result[1, 5, 11] = numpy.sum(x90 * (x21 * x598 + x665))
    result[1, 5, 12] = numpy.sum(x108 * (x21 * x600 + x666))
    result[1, 5, 13] = numpy.sum(x90 * (x21 * x602 + x667))
    result[1, 5, 14] = numpy.sum(x77 * (x21 * x604 + x668))
    result[2, 0, 0] = numpy.sum(x77 * (x0 * x296 + x0 * (x296 + x522 * x669) + x305))
    result[2, 0, 1] = numpy.sum(x90 * (x0 * x311 + x0 * (x311 + x669 * x670) + x313))
    result[2, 0, 2] = numpy.sum(x90 * (x0 * x320 + x0 * (x320 + x524 * x671) + x324))
    result[2, 0, 3] = numpy.sum(x108 * (x0 * x328 + x0 * (x328 + x669 * x673) + x330))
    result[2, 0, 4] = numpy.sum(x117 * (x0 * x334 + x0 * (x334 + x671 * x674) + x337))
    result[2, 0, 5] = numpy.sum(x108 * (x0 * x342 + x0 * (x338 * x527 + x342) + x346))
    result[2, 0, 6] = numpy.sum(x90 * (x0 * x348 + x0 * (x348 + x669 * x675) + x350))
    result[2, 0, 7] = numpy.sum(x117 * (x0 * x352 + x0 * (x352 + x671 * x677) + x354))
    result[2, 0, 8] = numpy.sum(x117 * (x0 * x357 + x0 * (x0 * x678 + x357) + x359))
    result[2, 0, 9] = numpy.sum(x90 * (x0 * x363 + x0 * (x360 * x530 + x363) + x367))
    result[2, 0, 10] = numpy.sum(x77 * (x0 * x368 + x0 * (x147 * x669 + x368) + x371))
    result[2, 0, 11] = numpy.sum(x90 * (x0 * x372 + x0 * (x150 * x671 + x372) + x374))
    result[2, 0, 12] = numpy.sum(x108 * (x0 * x375 + x0 * (x0 * x679 + x375) + x378))
    result[2, 0, 13] = numpy.sum(x90 * (x0 * x379 + x0 * (x0 * x680 + x379) + x381))
    result[2, 0, 14] = numpy.sum(x77 * (x0 * x382 + x0 * (x382 + x65 * x681) + x384))
    result[2, 1, 0] = numpy.sum(x185 * (x0 * x683 + x20 * x296 + x436))
    result[2, 1, 1] = numpy.sum(x202 * (x0 * x684 + x20 * x311 + x440))
    result[2, 1, 2] = numpy.sum(x202 * (x0 * x686 + x20 * x320 + x444))
    result[2, 1, 3] = numpy.sum(x117 * (x0 * x687 + x20 * x328 + x448))
    result[2, 1, 4] = numpy.sum(x230 * (x0 * x688 + x20 * x334 + x452))
    result[2, 1, 5] = numpy.sum(x117 * (x0 * x689 + x20 * x342 + x456))
    result[2, 1, 6] = numpy.sum(x202 * (x0 * x690 + x20 * x348 + x460))
    result[2, 1, 7] = numpy.sum(x230 * (x0 * x691 + x20 * x352 + x464))
    result[2, 1, 8] = numpy.sum(x230 * (x0 * x692 + x20 * x357 + x468))
    result[2, 1, 9] = numpy.sum(x202 * (x0 * x693 + x20 * x363 + x472))
    result[2, 1, 10] = numpy.sum(x185 * (x0 * x694 + x20 * x368 + x474))
    result[2, 1, 11] = numpy.sum(x202 * (x0 * x695 + x20 * x372 + x477))
    result[2, 1, 12] = numpy.sum(x117 * (x0 * x696 + x20 * x375 + x479))
    result[2, 1, 13] = numpy.sum(x202 * (x0 * x697 + x20 * x379 + x481))
    result[2, 1, 14] = numpy.sum(x185 * (x0 * x698 + x20 * x382 + x483))
    result[2, 2, 0] = numpy.sum(x185 * (x0 * x701 + x491))
    result[2, 2, 1] = numpy.sum(x202 * (x0 * x703 + x493))
    result[2, 2, 2] = numpy.sum(x202 * (x0 * x706 + x497))
    result[2, 2, 3] = numpy.sum(x117 * (x0 * x708 + x499))
    result[2, 2, 4] = numpy.sum(x230 * (x0 * x710 + x502))
    result[2, 2, 5] = numpy.sum(x117 * (x0 * x712 + x506))
    result[2, 2, 6] = numpy.sum(x202 * (x0 * x714 + x508))
    result[2, 2, 7] = numpy.sum(x230 * (x0 * x716 + x510))
    result[2, 2, 8] = numpy.sum(x230 * (x0 * x718 + x512))
    result[2, 2, 9] = numpy.sum(x202 * (x0 * x720 + x516))
    result[2, 2, 10] = numpy.sum(x185 * (x0 * x722 + x517))
    result[2, 2, 11] = numpy.sum(x202 * (x0 * x724 + x518))
    result[2, 2, 12] = numpy.sum(x117 * (x0 * x726 + x519))
    result[2, 2, 13] = numpy.sum(x202 * (x0 * x728 + x520))
    result[2, 2, 14] = numpy.sum(x185 * (x0 * x730 + x521))
    result[2, 3, 0] = numpy.sum(x77 * (x20 * x571 + x20 * x683 + x616))
    result[2, 3, 1] = numpy.sum(x90 * (x20 * x574 + x20 * x684 + x619))
    result[2, 3, 2] = numpy.sum(x90 * (x20 * x576 + x20 * x686 + x621))
    result[2, 3, 3] = numpy.sum(x108 * (x20 * x578 + x20 * x687 + x623))
    result[2, 3, 4] = numpy.sum(x117 * (x20 * x581 + x20 * x688 + x626))
    result[2, 3, 5] = numpy.sum(x108 * (x20 * x583 + x20 * x689 + x628))
    result[2, 3, 6] = numpy.sum(x90 * (x20 * x586 + x20 * x690 + x630))
    result[2, 3, 7] = numpy.sum(x117 * (x20 * x589 + x20 * x691 + x632))
    result[2, 3, 8] = numpy.sum(x117 * (x20 * x591 + x20 * x692 + x635))
    result[2, 3, 9] = numpy.sum(x90 * (x20 * x593 + x20 * x693 + x637))
    result[2, 3, 10] = numpy.sum(x77 * (x20 * x595 + x20 * x694 + x638))
    result[2, 3, 11] = numpy.sum(x90 * (x20 * x597 + x20 * x695 + x639))
    result[2, 3, 12] = numpy.sum(x108 * (x20 * x599 + x20 * x696 + x640))
    result[2, 3, 13] = numpy.sum(x90 * (x20 * x601 + x20 * x697 + x642))
    result[2, 3, 14] = numpy.sum(x77 * (x20 * x603 + x20 * x698 + x643))
    result[2, 4, 0] = numpy.sum(x185 * (x20 * x701 + x645))
    result[2, 4, 1] = numpy.sum(x202 * (x20 * x703 + x647))
    result[2, 4, 2] = numpy.sum(x202 * (x20 * x706 + x649))
    result[2, 4, 3] = numpy.sum(x117 * (x20 * x708 + x651))
    result[2, 4, 4] = numpy.sum(x230 * (x20 * x710 + x653))
    result[2, 4, 5] = numpy.sum(x117 * (x20 * x712 + x655))
    result[2, 4, 6] = numpy.sum(x202 * (x20 * x714 + x657))
    result[2, 4, 7] = numpy.sum(x230 * (x20 * x716 + x659))
    result[2, 4, 8] = numpy.sum(x230 * (x20 * x718 + x661))
    result[2, 4, 9] = numpy.sum(x202 * (x20 * x720 + x663))
    result[2, 4, 10] = numpy.sum(x185 * (x20 * x722 + x664))
    result[2, 4, 11] = numpy.sum(x202 * (x20 * x724 + x665))
    result[2, 4, 12] = numpy.sum(x117 * (x20 * x726 + x666))
    result[2, 4, 13] = numpy.sum(x202 * (x20 * x728 + x667))
    result[2, 4, 14] = numpy.sum(x185 * (x20 * x730 + x668))
    result[2, 5, 0] = numpy.sum(x77 * (x21 * x699 + x21 * x701 + x522 * x731))
    result[2, 5, 1] = numpy.sum(x90 * (x21 * x702 + x21 * x703 + x670 * x731))
    result[2, 5, 2] = numpy.sum(x90 * (x21 * x704 + x21 * x706 + x524 * x732))
    result[2, 5, 3] = numpy.sum(x108 * (x21 * x707 + x21 * x708 + x673 * x731))
    result[2, 5, 4] = numpy.sum(x117 * (x21 * x709 + x21 * x710 + x674 * x732))
    result[2, 5, 5] = numpy.sum(x108 * (x195 * x733 + x21 * x711 + x21 * x712))
    result[2, 5, 6] = numpy.sum(x90 * (x21 * x713 + x21 * x714 + x675 * x731))
    result[2, 5, 7] = numpy.sum(x117 * (x21 * x715 + x21 * x716 + x677 * x732))
    result[2, 5, 8] = numpy.sum(x117 * (x21 * x717 + x21 * x718 + x333 * x733))
    result[2, 5, 9] = numpy.sum(x90 * (x192 * x734 + x21 * x719 + x21 * x720))
    result[2, 5, 10] = numpy.sum(x77 * (x147 * x731 + x21 * x721 + x21 * x722))
    result[2, 5, 11] = numpy.sum(x90 * (x150 * x732 + x21 * x723 + x21 * x724))
    result[2, 5, 12] = numpy.sum(x108 * (x131 * x733 + x21 * x725 + x21 * x726))
    result[2, 5, 13] = numpy.sum(x90 * (x109 * x734 + x21 * x727 + x21 * x728))
    result[2, 5, 14] = numpy.sum(
        x77 * (x15 * (3.0 * x514 + x734 * x91) + x21 * x729 + x21 * x730)
    )
    return result


def int3c2e3d_sph_130(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pf|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 10, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = -x3 - C[0]
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = cx / x11
    x13 = x1 * x12 * (x10**2 + x6**2 + x8**2)
    x14 = boys(1, x13)
    x15 = 17.49341832762486
    x16 = A[1] - B[1]
    x17 = A[2] - B[2]
    x18 = numpy.exp(-ax * bx * x2 * (x0**2 + x16**2 + x17**2))
    x19 = 2.0 * x11 ** (-1.5) * x15 * x18 * x2
    x20 = x14 * x19
    x21 = cx ** (-1.0)
    x22 = x11 ** (-0.5)
    x23 = boys(0, x13)
    x24 = 2.0 * x15 * x18 * x2 * x21 * x22 * x23 - x20
    x25 = x24 * x5
    x26 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x4 + x20 * x6
    x27 = -x26
    x28 = boys(2, x13)
    x29 = x19 * x28
    x30 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x4 + x29 * x6
    x31 = -x30
    x32 = x12 * x31
    x33 = x32 * x6
    x34 = x25 + x27 * x4 - x33
    x35 = 2.0 * x5
    x36 = x5 * (2.0 * x14 * x15 * x18 * x2 * x21 * x22 - x29)
    x37 = boys(3, x13)
    x38 = x19 * x37
    x39 = 2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x4 - x38 * x6
    x40 = x12 * x39
    x41 = x31 * x4 + x36 - x40 * x6
    x42 = x12 * x41
    x43 = x34 * x4 - x35 * (x26 + x32) - x42 * x6
    x44 = x0 * x34 + x43
    x45 = -x24 * x5
    x46 = x5 * (2.0 * x15 * x18 * x2 * x21 * x22 * x28 - x38)
    x47 = x19 * boys(4, x13)
    x48 = x12 * x6
    x49 = da * db * dc
    x50 = 0.2581988897471611 * x49
    x51 = -x7 - A[1]
    x52 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x51 + x29 * x8
    x53 = -x52
    x54 = x12 * x53
    x55 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x51 + x20 * x8
    x56 = -x5 * (x54 + x55)
    x57 = -x55
    x58 = x54 * x6
    x59 = -x4 * x57 + x58
    x60 = -x59
    x61 = 2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x51 - x38 * x8
    x62 = x12 * x61
    x63 = x4 * x53 - x6 * x62
    x64 = x12 * x63
    x65 = x4 * x60 + x56 - x6 * x64
    x66 = x16 * x34 + x65
    x67 = x4 * x57 - x58
    x68 = x16 * x27 + x67
    x69 = -x5 * (x52 + x62)
    x70 = 2.0 * x15 * x18 * x2 * x21 * x22 * x37 * x51 - x47 * x8
    x71 = (
        -x35 * (x59 + x64)
        + x4 * x65
        - x48 * (x4 * x63 - x48 * (x4 * x61 - x48 * x70) + x69)
    )
    x72 = 0.5773502691896258 * x49
    x73 = -x9 - A[2]
    x74 = x10 * x29 - 2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x73
    x75 = -x74
    x76 = x12 * x75
    x77 = x10 * x20 - 2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x73
    x78 = -x5 * (x76 + x77)
    x79 = -x77
    x80 = x6 * x76
    x81 = -x4 * x79 + x80
    x82 = -x81
    x83 = -x10 * x38 + 2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x73
    x84 = x12 * x83
    x85 = x4 * x75 - x6 * x84
    x86 = x12 * x85
    x87 = x4 * x82 - x6 * x86 + x78
    x88 = x17 * x34 + x87
    x89 = x4 * x79 - x80
    x90 = x17 * x27 + x89
    x91 = -x5 * (x74 + x84)
    x92 = -x10 * x47 + 2.0 * x15 * x18 * x2 * x21 * x22 * x37 * x73
    x93 = (
        -x35 * (x81 + x86)
        + x4 * x87
        - x48 * (x4 * x85 - x48 * (x4 * x83 - x48 * x92) + x91)
    )
    x94 = x54 * x8
    x95 = x25 + x51 * x57 - x94
    x96 = x36 + x51 * x53 - x62 * x8
    x97 = x12 * x96
    x98 = x6 * x97
    x99 = x16 * x60 + x4 * x95 - x98
    x100 = x16 * x68 + x99
    x101 = x5 * (-x45 + x51 * x57 - x94 - x97)
    x102 = x4 * x95 - x98
    x103 = x12 * x8
    x104 = -x103 * x70 + x46 + x51 * x61
    x105 = x101 + x102 * x4 + x16 * x65 + x48 * (x104 * x48 - x4 * x96)
    x106 = x76 * x8
    x107 = x106 - x51 * x79
    x108 = -x107
    x109 = x51 * x75 - x8 * x84
    x110 = x109 * x12
    x111 = x110 * x6
    x112 = x108 * x4 - x111
    x113 = x112 + x17 * x60
    x114 = x113 + x16 * x90
    x115 = -x5 * (x107 + x110)
    x116 = x108 * x4 - x111
    x117 = -x103 * x92 + x51 * x83
    x118 = x115 + x116 * x4 - x48 * (x109 * x4 - x117 * x48)
    x119 = x118 + x17 * x65
    x120 = x10 * x76
    x121 = -x120 + x25 + x73 * x79
    x122 = -x10 * x84 + x36 + x73 * x75
    x123 = x12 * x122
    x124 = x123 * x6
    x125 = x121 * x4 - x124 + x17 * x82
    x126 = x125 + x17 * x90
    x127 = x5 * (-x120 - x123 - x45 + x73 * x79)
    x128 = x121 * x4 - x124
    x129 = x10 * x12
    x130 = -x129 * x92 + x46 + x73 * x83
    x131 = x127 + x128 * x4 + x17 * x87 - x48 * (x122 * x4 - x130 * x48)
    x132 = x51 * x95 + 2.0 * x56 - x8 * x97
    x133 = -x103 * x104 + x51 * x96 + 2.0 * x69
    x134 = x102 * x16 + x132 * x4 - x133 * x48 + x16 * x99
    x135 = x108 * x51 - x110 * x8 + x78
    x136 = -x103 * x117 + x109 * x51 + x91
    x137 = x135 * x4 - x136 * x48
    x138 = x102 * x17 + x113 * x16 + x137
    x139 = x123 * x8
    x140 = x121 * x51 - x139
    x141 = -x103 * x130 + x122 * x51
    x142 = x116 * x17 + x140 * x4 - x141 * x48
    x143 = x113 * x17 + x142
    x144 = -x10 * x123 + x121 * x73 + 2.0 * x78
    x145 = x122 * x73 - x129 * x130 + 2.0 * x91
    x146 = x125 * x17 + x128 * x17 + x144 * x4 - x145 * x48
    x147 = x0 * x60 + x65
    x148 = x16 * x57 + x95
    x149 = -x106 + x51 * x79
    x150 = x149 + x17 * x57
    x151 = x132 + x16 * x95
    x152 = x148 * x16 + x151
    x153 = x135 + x17 * x95
    x154 = x150 * x16 + x153
    x155 = x108 * x17 + x121 * x51 - x139
    x156 = x150 * x17 + x155
    x157 = -x103 * x136 + 2.0 * x115 + x135 * x51
    x158 = -x103 * x141 + x127 + x135 * x17 + x140 * x51
    x159 = -x103 * x145 + x140 * x17 + x144 * x51 + x155 * x17
    x160 = x0 * x82 + x87
    x161 = x112 + x16 * x82
    x162 = x149 + x16 * x79
    x163 = x121 + x17 * x79
    x164 = x108 * x16 + x135
    x165 = x16 * x162 + x164
    x166 = x155 + x16 * x163
    x167 = x121 * x17 + x144
    x168 = x163 * x17 + x167

    # 30 item(s)
    result[0, 0, 0] = numpy.sum(
        x50
        * (
            x0 * x43
            + x0 * x44
            + x0 * (x0 * (x0 * x27 + x34) + x44)
            + x4 * x43
            + x48
            * (
                x35 * (x30 + x40)
                - x4 * x41
                + x48
                * (
                    x39 * x4
                    + x46
                    - x48 * (2.0 * x15 * x18 * x2 * x21 * x22 * x37 * x4 - x47 * x6)
                )
            )
            - 3.0 * x5 * (-x27 * x4 + x33 + x42 + x45)
        )
    )
    result[0, 1, 0] = numpy.sum(
        x72 * (x0 * x66 + x0 * (x0 * x68 + x66) + x16 * x43 + x71)
    )
    result[0, 2, 0] = numpy.sum(
        x72 * (x0 * x88 + x0 * (x0 * x90 + x88) + x17 * x43 + x93)
    )
    result[0, 3, 0] = numpy.sum(x72 * (x0 * x100 + x105 + x16 * x66))
    result[0, 4, 0] = numpy.sum(x49 * (x0 * x114 + x119 + x16 * x88))
    result[0, 5, 0] = numpy.sum(x72 * (x0 * x126 + x131 + x17 * x88))
    result[0, 6, 0] = numpy.sum(x50 * (x100 * x16 + x134))
    result[0, 7, 0] = numpy.sum(x72 * (x114 * x16 + x138))
    result[0, 8, 0] = numpy.sum(x72 * (x126 * x16 + x143))
    result[0, 9, 0] = numpy.sum(x50 * (x126 * x17 + x146))
    result[1, 0, 0] = numpy.sum(
        x50 * (x0 * x147 + x0 * x65 + x0 * (x0 * (x0 * x57 + x67) + x147) + x71)
    )
    result[1, 1, 0] = numpy.sum(x72 * (x0 * x99 + x0 * (x0 * x148 + x99) + x105))
    result[1, 2, 0] = numpy.sum(x72 * (x0 * x113 + x0 * (x0 * x150 + x113) + x119))
    result[1, 3, 0] = numpy.sum(x72 * (x0 * x152 + x134))
    result[1, 4, 0] = numpy.sum(x49 * (x0 * x154 + x138))
    result[1, 5, 0] = numpy.sum(x72 * (x0 * x156 + x143))
    result[1, 6, 0] = numpy.sum(
        x50
        * (3.0 * x101 - x103 * x133 + x132 * x16 + x132 * x51 + x151 * x16 + x152 * x16)
    )
    result[1, 7, 0] = numpy.sum(x72 * (x132 * x17 + x153 * x16 + x154 * x16 + x157))
    result[1, 8, 0] = numpy.sum(x72 * (x153 * x17 + x156 * x16 + x158))
    result[1, 9, 0] = numpy.sum(x50 * (x156 * x17 + x159))
    result[2, 0, 0] = numpy.sum(
        x50 * (x0 * x160 + x0 * x87 + x0 * (x0 * (x0 * x79 + x89) + x160) + x93)
    )
    result[2, 1, 0] = numpy.sum(
        x72 * (x0 * x161 + x0 * (x0 * x162 + x161) + x118 + x16 * x87)
    )
    result[2, 2, 0] = numpy.sum(x72 * (x0 * x125 + x0 * (x0 * x163 + x125) + x131))
    result[2, 3, 0] = numpy.sum(x72 * (x0 * x165 + x116 * x16 + x137 + x16 * x161))
    result[2, 4, 0] = numpy.sum(x49 * (x0 * x166 + x125 * x16 + x142))
    result[2, 5, 0] = numpy.sum(x72 * (x0 * x168 + x146))
    result[2, 6, 0] = numpy.sum(x50 * (x135 * x16 + x157 + x16 * x164 + x16 * x165))
    result[2, 7, 0] = numpy.sum(x72 * (x155 * x16 + x158 + x16 * x166))
    result[2, 8, 0] = numpy.sum(x72 * (x159 + x16 * x168))
    result[2, 9, 0] = numpy.sum(
        x50
        * (3.0 * x127 - x129 * x145 + x144 * x17 + x144 * x73 + x167 * x17 + x168 * x17)
    )
    return result


def int3c2e3d_sph_131(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pf|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 10, 3), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = x11 ** (-1.0)
    x13 = cx * x12
    x14 = x1 * x13 * (x10**2 + x4**2 + x8**2)
    x15 = boys(2, x14)
    x16 = 17.49341832762486
    x17 = A[1] - B[1]
    x18 = A[2] - B[2]
    x19 = numpy.exp(-ax * bx * x2 * (x0**2 + x17**2 + x18**2))
    x20 = x16 * x19 * x2
    x21 = 2.0 * x11 ** (-1.5) * x20
    x22 = x15 * x21
    x23 = cx ** (-1.0)
    x24 = x11 ** (-0.5)
    x25 = boys(1, x14)
    x26 = 2.0 * x16 * x19 * x2 * x23 * x24 * x25 - x22
    x27 = x26 * x6
    x28 = -2.0 * x16 * x19 * x2 * x23 * x24 * x25 * x5 + x22 * x4
    x29 = -x28
    x30 = boys(3, x14)
    x31 = x21 * x30
    x32 = -2.0 * x15 * x16 * x19 * x2 * x23 * x24 * x5 + x31 * x4
    x33 = -x32
    x34 = x13 * x33
    x35 = x34 * x4
    x36 = x27 + x29 * x5 - x35
    x37 = 2.0 * x6
    x38 = x6 * (2.0 * x15 * x16 * x19 * x2 * x23 * x24 - x31)
    x39 = boys(4, x14)
    x40 = x21 * x39
    x41 = 2.0 * x16 * x19 * x2 * x23 * x24 * x30 * x5 - x4 * x40
    x42 = x13 * x41
    x43 = x33 * x5 + x38 - x4 * x42
    x44 = x13 * x43
    x45 = x36 * x5 - x37 * (x28 + x34) - x4 * x44
    x46 = x36 * x6
    x47 = x1 * x12
    x48 = x47 * (x4 * x45 + 3.0 * x46)
    x49 = x29 * x6
    x50 = x47 * (x36 * x4 + 2.0 * x49)
    x51 = x0 * x50 + x48
    x52 = x20 * x23 * x24 * x25 * x37
    x53 = x47 * (x29 * x4 + x52)
    x54 = -x26 * x6
    x55 = x6 * (2.0 * x16 * x19 * x2 * x23 * x24 * x30 - x40)
    x56 = x21 * boys(5, x14)
    x57 = x13 * x4
    x58 = (
        x45 * x5
        + x57
        * (
            x37 * (x32 + x42)
            - x43 * x5
            + x57
            * (
                x41 * x5
                + x55
                - x57 * (2.0 * x16 * x19 * x2 * x23 * x24 * x39 * x5 - x4 * x56)
            )
        )
        - 3.0 * x6 * (-x29 * x5 + x35 + x44 + x54)
    )
    x59 = x45 * x6
    x60 = da * db * dc
    x61 = 0.2581988897471611 * x60
    x62 = x47 * x8
    x63 = x45 * x62
    x64 = x36 * x62
    x65 = x0 * x64 + x63
    x66 = x0 * x29
    x67 = x10 * x47
    x68 = x45 * x67
    x69 = x36 * x67
    x70 = x0 * x69 + x68
    x71 = -x7 - A[1]
    x72 = -2.0 * x15 * x16 * x19 * x2 * x23 * x24 * x71 + x31 * x8
    x73 = -x72
    x74 = x13 * x73
    x75 = -2.0 * x16 * x19 * x2 * x23 * x24 * x25 * x71 + x22 * x8
    x76 = -x6 * (x74 + x75)
    x77 = -x75
    x78 = x4 * x74 - x5 * x77
    x79 = -x78
    x80 = 2.0 * x16 * x19 * x2 * x23 * x24 * x30 * x71 - x40 * x8
    x81 = x13 * x80
    x82 = -x4 * x81 + x5 * x73
    x83 = x13 * x82
    x84 = -x4 * x83 + x5 * x79 + x76
    x85 = x6 * x79
    x86 = 2.0 * x85
    x87 = x47 * (x4 * x84 + x86)
    x88 = x17 * x50 + x87
    x89 = x6 * x77
    x90 = x47 * (x4 * x79 + x89)
    x91 = x17 * x53 + x90
    x92 = -x6 * (x72 + x81)
    x93 = 2.0 * x16 * x19 * x2 * x23 * x24 * x39 * x71 - x56 * x8
    x94 = (
        -x37 * (x78 + x83)
        + x5 * x84
        - x57 * (x5 * x82 - x57 * (x5 * x80 - x57 * x93) + x92)
    )
    x95 = x6 * x84
    x96 = x47 * (x4 * x94 + 3.0 * x95)
    x97 = 0.5773502691896258 * x60
    x98 = x47 * (x46 + x8 * x84)
    x99 = x17 * x64 + x98
    x100 = x47 * (x49 + x79 * x8)
    x101 = x17 * x29
    x102 = x100 + x101 * x62
    x103 = x47 * (x59 + x8 * x94)
    x104 = x67 * x84
    x105 = x104 + x17 * x69
    x106 = x67 * x79
    x107 = x101 * x67 + x106
    x108 = x67 * x94
    x109 = -x9 - A[2]
    x110 = x10 * x31 - 2.0 * x109 * x15 * x16 * x19 * x2 * x23 * x24
    x111 = -x110
    x112 = x111 * x13
    x113 = x10 * x22 - 2.0 * x109 * x16 * x19 * x2 * x23 * x24 * x25
    x114 = -x6 * (x112 + x113)
    x115 = -x113
    x116 = x112 * x4 - x115 * x5
    x117 = -x116
    x118 = -x10 * x40 + 2.0 * x109 * x16 * x19 * x2 * x23 * x24 * x30
    x119 = x118 * x13
    x120 = x111 * x5 - x119 * x4
    x121 = x120 * x13
    x122 = x114 + x117 * x5 - x121 * x4
    x123 = x117 * x6
    x124 = 2.0 * x123
    x125 = x47 * (x122 * x4 + x124)
    x126 = x125 + x18 * x50
    x127 = x115 * x6
    x128 = x47 * (x117 * x4 + x127)
    x129 = x128 + x18 * x53
    x130 = -x6 * (x110 + x119)
    x131 = -x10 * x56 + 2.0 * x109 * x16 * x19 * x2 * x23 * x24 * x39
    x132 = (
        x122 * x5
        - x37 * (x116 + x121)
        - x57 * (x120 * x5 + x130 - x57 * (x118 * x5 - x131 * x57))
    )
    x133 = x122 * x6
    x134 = x47 * (x132 * x4 + 3.0 * x133)
    x135 = x122 * x62
    x136 = x135 + x18 * x64
    x137 = x117 * x62
    x138 = x18 * x29
    x139 = x137 + x138 * x62
    x140 = x132 * x62
    x141 = x47 * (x10 * x122 + x46)
    x142 = x141 + x18 * x69
    x143 = x47 * (x10 * x117 + x49)
    x144 = x138 * x67 + x143
    x145 = x47 * (x10 * x132 + x59)
    x146 = x74 * x8
    x147 = -x146 + x27 + x71 * x77
    x148 = x147 * x6
    x149 = x38 + x71 * x73 - x8 * x81
    x150 = x13 * x149
    x151 = x147 * x5 - x150 * x4
    x152 = x47 * (x148 + x151 * x4)
    x153 = x152 + x17 * x90
    x154 = x153 + x17 * x91
    x155 = x6 * (-x146 - x150 - x54 + x71 * x77)
    x156 = x13 * x8
    x157 = -x156 * x93 + x55 + x71 * x80
    x158 = x151 * x5 + x155 - x57 * (x149 * x5 - x157 * x57)
    x159 = x151 * x6
    x160 = x17 * x87 + x47 * (x158 * x4 + 2.0 * x159)
    x161 = x47 * (x151 * x8 + x86)
    x162 = x100 * x17 + x161
    x163 = x102 * x17 + x162
    x164 = x17 * x98 + x47 * (x158 * x8 + 2.0 * x95)
    x165 = x151 * x67
    x166 = x106 * x17 + x165
    x167 = x107 * x17 + x166
    x168 = x104 * x17 + x158 * x67
    x169 = x112 * x8 - x115 * x71
    x170 = -x169
    x171 = x170 * x6
    x172 = x111 * x71 - x119 * x8
    x173 = x13 * x172
    x174 = x170 * x5 - x173 * x4
    x175 = x47 * (x171 + x174 * x4)
    x176 = x175 + x18 * x90
    x177 = x129 * x17 + x176
    x178 = -x6 * (x169 + x173)
    x179 = x118 * x71 - x131 * x156
    x180 = x174 * x5 + x178 - x57 * (x172 * x5 - x179 * x57)
    x181 = x174 * x37
    x182 = x47 * (x180 * x4 + x181)
    x183 = x18 * x87 + x182
    x184 = x47 * (x123 + x174 * x8)
    x185 = x100 * x18 + x184
    x186 = x139 * x17 + x185
    x187 = x47 * (x133 + x180 * x8)
    x188 = x18 * x98 + x187
    x189 = x47 * (x10 * x174 + x85)
    x190 = x106 * x18 + x189
    x191 = x144 * x17 + x190
    x192 = x47 * (x10 * x180 + x95)
    x193 = x104 * x18 + x192
    x194 = x10 * x112
    x195 = x109 * x115 - x194 + x27
    x196 = x195 * x6
    x197 = -x10 * x119 + x109 * x111 + x38
    x198 = x13 * x197
    x199 = x195 * x5 - x198 * x4
    x200 = x47 * (x196 + x199 * x4)
    x201 = x128 * x18 + x200
    x202 = x129 * x18 + x201
    x203 = x6 * (x109 * x115 - x194 - x198 - x54)
    x204 = x10 * x13
    x205 = x109 * x118 - x131 * x204 + x55
    x206 = x199 * x5 + x203 - x57 * (x197 * x5 - x205 * x57)
    x207 = x199 * x6
    x208 = x125 * x18 + x47 * (x206 * x4 + 2.0 * x207)
    x209 = x199 * x62
    x210 = x137 * x18 + x209
    x211 = x139 * x18 + x210
    x212 = x135 * x18 + x206 * x62
    x213 = x47 * (x10 * x199 + x124)
    x214 = x143 * x18 + x213
    x215 = x144 * x18 + x214
    x216 = x141 * x18 + x47 * (x10 * x206 + 2.0 * x133)
    x217 = x147 * x71 - x150 * x8 + 2.0 * x76
    x218 = x217 * x6
    x219 = x149 * x71 - x156 * x157 + 2.0 * x92
    x220 = x217 * x5 - x219 * x57
    x221 = x152 * x17 + x153 * x17 + x47 * (x218 + x220 * x4)
    x222 = x161 * x17 + x162 * x17 + x47 * (3.0 * x159 + x220 * x8)
    x223 = x165 * x17 + x166 * x17 + x220 * x67
    x224 = x114 + x170 * x71 - x173 * x8
    x225 = x224 * x6
    x226 = x130 - x156 * x179 + x172 * x71
    x227 = x224 * x5 - x226 * x57
    x228 = x47 * (x225 + x227 * x4)
    x229 = x152 * x18 + x17 * x176 + x228
    x230 = x47 * (x181 + x227 * x8)
    x231 = x161 * x18 + x17 * x185 + x230
    x232 = x47 * (x10 * x227 + x159)
    x233 = x165 * x18 + x17 * x190 + x232
    x234 = x195 * x71 - x198 * x8
    x235 = x234 * x6
    x236 = -x156 * x205 + x197 * x71
    x237 = x234 * x5 - x236 * x57
    x238 = x175 * x18 + x47 * (x235 + x237 * x4)
    x239 = x176 * x18 + x238
    x240 = x18 * x184 + x47 * (x207 + x237 * x8)
    x241 = x18 * x185 + x240
    x242 = x18 * x189 + x47 * (x10 * x237 + x181)
    x243 = x18 * x190 + x242
    x244 = -x10 * x198 + x109 * x195 + 2.0 * x114
    x245 = x244 * x6
    x246 = x109 * x197 + 2.0 * x130 - x204 * x205
    x247 = x244 * x5 - x246 * x57
    x248 = x18 * x200 + x18 * x201 + x47 * (x245 + x247 * x4)
    x249 = x18 * x209 + x18 * x210 + x247 * x62
    x250 = x18 * x213 + x18 * x214 + x47 * (x10 * x247 + 3.0 * x207)
    x251 = x0 * x90 + x87
    x252 = x4 * x47
    x253 = x0 * x77
    x254 = x0 * x100 + x98
    x255 = x47 * (x52 + x77 * x8)
    x256 = x0 * x106 + x104
    x257 = x147 * x252
    x258 = x17 * x77
    x259 = x252 * x258 + x257
    x260 = x47 * (x147 * x8 + 2.0 * x89)
    x261 = x17 * x255 + x260
    x262 = x147 * x67
    x263 = x258 * x67 + x262
    x264 = x170 * x252
    x265 = x18 * x77
    x266 = x252 * x265 + x264
    x267 = x47 * (x127 + x170 * x8)
    x268 = x18 * x255 + x267
    x269 = x47 * (x10 * x170 + x89)
    x270 = x265 * x67 + x269
    x271 = x217 * x252
    x272 = x17 * x257 + x271
    x273 = x17 * x259 + x272
    x274 = x47 * (3.0 * x148 + x217 * x8)
    x275 = x17 * x260 + x274
    x276 = x17 * x261 + x275
    x277 = x217 * x67
    x278 = x17 * x262 + x277
    x279 = x17 * x263 + x278
    x280 = x224 * x252
    x281 = x18 * x257 + x280
    x282 = x17 * x266 + x281
    x283 = 2.0 * x171
    x284 = x47 * (x224 * x8 + x283)
    x285 = x18 * x260 + x284
    x286 = x17 * x268 + x285
    x287 = x47 * (x10 * x224 + x148)
    x288 = x18 * x262 + x287
    x289 = x17 * x270 + x288
    x290 = x234 * x252
    x291 = x18 * x264 + x290
    x292 = x18 * x266 + x291
    x293 = x47 * (x196 + x234 * x8)
    x294 = x18 * x267 + x293
    x295 = x18 * x268 + x294
    x296 = x47 * (x10 * x234 + x283)
    x297 = x18 * x269 + x296
    x298 = x18 * x270 + x297
    x299 = 3.0 * x155 - x156 * x219 + x217 * x71
    x300 = -x156 * x226 + 2.0 * x178 + x224 * x71
    x301 = x252 * x300
    x302 = x47 * (3.0 * x225 + x300 * x8)
    x303 = x47 * (x10 * x300 + x218)
    x304 = -x156 * x236 + x203 + x234 * x71
    x305 = x18 * x280 + x252 * x304
    x306 = x18 * x284 + x47 * (2.0 * x235 + x304 * x8)
    x307 = x18 * x287 + x47 * (x10 * x304 + 2.0 * x225)
    x308 = -x156 * x246 + x244 * x71
    x309 = x18 * x290 + x18 * x291 + x252 * x308
    x310 = x18 * x293 + x18 * x294 + x47 * (x245 + x308 * x8)
    x311 = x18 * x296 + x18 * x297 + x47 * (x10 * x308 + 3.0 * x235)
    x312 = x0 * x128 + x125
    x313 = x0 * x115
    x314 = x0 * x137 + x135
    x315 = x0 * x143 + x141
    x316 = x47 * (x10 * x115 + x52)
    x317 = x128 * x17 + x175
    x318 = x115 * x17
    x319 = x252 * x318 + x264
    x320 = x137 * x17 + x184
    x321 = x267 + x318 * x62
    x322 = x143 * x17 + x189
    x323 = x17 * x316 + x269
    x324 = x195 * x252
    x325 = x115 * x18
    x326 = x252 * x325 + x324
    x327 = x195 * x62
    x328 = x325 * x62 + x327
    x329 = x47 * (x10 * x195 + 2.0 * x127)
    x330 = x18 * x316 + x329
    x331 = x17 * x264 + x280
    x332 = x17 * x319 + x331
    x333 = x17 * x267 + x284
    x334 = x17 * x321 + x333
    x335 = x17 * x269 + x287
    x336 = x17 * x323 + x335
    x337 = x17 * x326 + x291
    x338 = x17 * x328 + x294
    x339 = x17 * x330 + x297
    x340 = x244 * x252
    x341 = x18 * x324 + x340
    x342 = x18 * x326 + x341
    x343 = x244 * x62
    x344 = x18 * x327 + x343
    x345 = x18 * x328 + x344
    x346 = x47 * (x10 * x244 + 3.0 * x196)
    x347 = x18 * x329 + x346
    x348 = x18 * x330 + x347
    x349 = x109 * x244 + 3.0 * x203 - x204 * x246

    # 90 item(s)
    result[0, 0, 0] = numpy.sum(
        x61
        * (
            x0 * x48
            + x0 * x51
            + x0 * (x0 * (x0 * x53 + x50) + x51)
            + x47 * (x4 * x58 + 4.0 * x59)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x61 * (x0 * x63 + x0 * x65 + x0 * (x0 * (x62 * x66 + x64) + x65) + x58 * x62)
    )
    result[0, 0, 2] = numpy.sum(
        x61 * (x0 * x68 + x0 * x70 + x0 * (x0 * (x66 * x67 + x69) + x70) + x58 * x67)
    )
    result[0, 1, 0] = numpy.sum(
        x97 * (x0 * x88 + x0 * (x0 * x91 + x88) + x17 * x48 + x96)
    )
    result[0, 1, 1] = numpy.sum(
        x97 * (x0 * x99 + x0 * (x0 * x102 + x99) + x103 + x17 * x63)
    )
    result[0, 1, 2] = numpy.sum(
        x97 * (x0 * x105 + x0 * (x0 * x107 + x105) + x108 + x17 * x68)
    )
    result[0, 2, 0] = numpy.sum(
        x97 * (x0 * x126 + x0 * (x0 * x129 + x126) + x134 + x18 * x48)
    )
    result[0, 2, 1] = numpy.sum(
        x97 * (x0 * x136 + x0 * (x0 * x139 + x136) + x140 + x18 * x63)
    )
    result[0, 2, 2] = numpy.sum(
        x97 * (x0 * x142 + x0 * (x0 * x144 + x142) + x145 + x18 * x68)
    )
    result[0, 3, 0] = numpy.sum(x97 * (x0 * x154 + x160 + x17 * x88))
    result[0, 3, 1] = numpy.sum(x97 * (x0 * x163 + x164 + x17 * x99))
    result[0, 3, 2] = numpy.sum(x97 * (x0 * x167 + x105 * x17 + x168))
    result[0, 4, 0] = numpy.sum(x60 * (x0 * x177 + x126 * x17 + x183))
    result[0, 4, 1] = numpy.sum(x60 * (x0 * x186 + x136 * x17 + x188))
    result[0, 4, 2] = numpy.sum(x60 * (x0 * x191 + x142 * x17 + x193))
    result[0, 5, 0] = numpy.sum(x97 * (x0 * x202 + x126 * x18 + x208))
    result[0, 5, 1] = numpy.sum(x97 * (x0 * x211 + x136 * x18 + x212))
    result[0, 5, 2] = numpy.sum(x97 * (x0 * x215 + x142 * x18 + x216))
    result[0, 6, 0] = numpy.sum(x61 * (x154 * x17 + x221))
    result[0, 6, 1] = numpy.sum(x61 * (x163 * x17 + x222))
    result[0, 6, 2] = numpy.sum(x61 * (x167 * x17 + x223))
    result[0, 7, 0] = numpy.sum(x97 * (x17 * x177 + x229))
    result[0, 7, 1] = numpy.sum(x97 * (x17 * x186 + x231))
    result[0, 7, 2] = numpy.sum(x97 * (x17 * x191 + x233))
    result[0, 8, 0] = numpy.sum(x97 * (x17 * x202 + x239))
    result[0, 8, 1] = numpy.sum(x97 * (x17 * x211 + x241))
    result[0, 8, 2] = numpy.sum(x97 * (x17 * x215 + x243))
    result[0, 9, 0] = numpy.sum(x61 * (x18 * x202 + x248))
    result[0, 9, 1] = numpy.sum(x61 * (x18 * x211 + x249))
    result[0, 9, 2] = numpy.sum(x61 * (x18 * x215 + x250))
    result[1, 0, 0] = numpy.sum(
        x61 * (x0 * x251 + x0 * x87 + x0 * (x0 * (x252 * x253 + x90) + x251) + x96)
    )
    result[1, 0, 1] = numpy.sum(
        x61 * (x0 * x254 + x0 * x98 + x0 * (x0 * (x0 * x255 + x100) + x254) + x103)
    )
    result[1, 0, 2] = numpy.sum(
        x61 * (x0 * x104 + x0 * x256 + x0 * (x0 * (x106 + x253 * x67) + x256) + x108)
    )
    result[1, 1, 0] = numpy.sum(x97 * (x0 * x153 + x0 * (x0 * x259 + x153) + x160))
    result[1, 1, 1] = numpy.sum(x97 * (x0 * x162 + x0 * (x0 * x261 + x162) + x164))
    result[1, 1, 2] = numpy.sum(x97 * (x0 * x166 + x0 * (x0 * x263 + x166) + x168))
    result[1, 2, 0] = numpy.sum(x97 * (x0 * x176 + x0 * (x0 * x266 + x176) + x183))
    result[1, 2, 1] = numpy.sum(x97 * (x0 * x185 + x0 * (x0 * x268 + x185) + x188))
    result[1, 2, 2] = numpy.sum(x97 * (x0 * x190 + x0 * (x0 * x270 + x190) + x193))
    result[1, 3, 0] = numpy.sum(x97 * (x0 * x273 + x221))
    result[1, 3, 1] = numpy.sum(x97 * (x0 * x276 + x222))
    result[1, 3, 2] = numpy.sum(x97 * (x0 * x279 + x223))
    result[1, 4, 0] = numpy.sum(x60 * (x0 * x282 + x229))
    result[1, 4, 1] = numpy.sum(x60 * (x0 * x286 + x231))
    result[1, 4, 2] = numpy.sum(x60 * (x0 * x289 + x233))
    result[1, 5, 0] = numpy.sum(x97 * (x0 * x292 + x239))
    result[1, 5, 1] = numpy.sum(x97 * (x0 * x295 + x241))
    result[1, 5, 2] = numpy.sum(x97 * (x0 * x298 + x243))
    result[1, 6, 0] = numpy.sum(
        x61 * (x17 * x271 + x17 * x272 + x17 * x273 + x252 * x299)
    )
    result[1, 6, 1] = numpy.sum(
        x61 * (x17 * x274 + x17 * x275 + x17 * x276 + x47 * (4.0 * x218 + x299 * x8))
    )
    result[1, 6, 2] = numpy.sum(x61 * (x17 * x277 + x17 * x278 + x17 * x279 + x299 * x67))
    result[1, 7, 0] = numpy.sum(x97 * (x17 * x281 + x17 * x282 + x18 * x271 + x301))
    result[1, 7, 1] = numpy.sum(x97 * (x17 * x285 + x17 * x286 + x18 * x274 + x302))
    result[1, 7, 2] = numpy.sum(x97 * (x17 * x288 + x17 * x289 + x18 * x277 + x303))
    result[1, 8, 0] = numpy.sum(x97 * (x17 * x292 + x18 * x281 + x305))
    result[1, 8, 1] = numpy.sum(x97 * (x17 * x295 + x18 * x285 + x306))
    result[1, 8, 2] = numpy.sum(x97 * (x17 * x298 + x18 * x288 + x307))
    result[1, 9, 0] = numpy.sum(x61 * (x18 * x292 + x309))
    result[1, 9, 1] = numpy.sum(x61 * (x18 * x295 + x310))
    result[1, 9, 2] = numpy.sum(x61 * (x18 * x298 + x311))
    result[2, 0, 0] = numpy.sum(
        x61 * (x0 * x125 + x0 * x312 + x0 * (x0 * (x128 + x252 * x313) + x312) + x134)
    )
    result[2, 0, 1] = numpy.sum(
        x61 * (x0 * x135 + x0 * x314 + x0 * (x0 * (x137 + x313 * x62) + x314) + x140)
    )
    result[2, 0, 2] = numpy.sum(
        x61 * (x0 * x141 + x0 * x315 + x0 * (x0 * (x0 * x316 + x143) + x315) + x145)
    )
    result[2, 1, 0] = numpy.sum(
        x97 * (x0 * x317 + x0 * (x0 * x319 + x317) + x125 * x17 + x182)
    )
    result[2, 1, 1] = numpy.sum(
        x97 * (x0 * x320 + x0 * (x0 * x321 + x320) + x135 * x17 + x187)
    )
    result[2, 1, 2] = numpy.sum(
        x97 * (x0 * x322 + x0 * (x0 * x323 + x322) + x141 * x17 + x192)
    )
    result[2, 2, 0] = numpy.sum(x97 * (x0 * x201 + x0 * (x0 * x326 + x201) + x208))
    result[2, 2, 1] = numpy.sum(x97 * (x0 * x210 + x0 * (x0 * x328 + x210) + x212))
    result[2, 2, 2] = numpy.sum(x97 * (x0 * x214 + x0 * (x0 * x330 + x214) + x216))
    result[2, 3, 0] = numpy.sum(x97 * (x0 * x332 + x17 * x175 + x17 * x317 + x228))
    result[2, 3, 1] = numpy.sum(x97 * (x0 * x334 + x17 * x184 + x17 * x320 + x230))
    result[2, 3, 2] = numpy.sum(x97 * (x0 * x336 + x17 * x189 + x17 * x322 + x232))
    result[2, 4, 0] = numpy.sum(x60 * (x0 * x337 + x17 * x201 + x238))
    result[2, 4, 1] = numpy.sum(x60 * (x0 * x338 + x17 * x210 + x240))
    result[2, 4, 2] = numpy.sum(x60 * (x0 * x339 + x17 * x214 + x242))
    result[2, 5, 0] = numpy.sum(x97 * (x0 * x342 + x248))
    result[2, 5, 1] = numpy.sum(x97 * (x0 * x345 + x249))
    result[2, 5, 2] = numpy.sum(x97 * (x0 * x348 + x250))
    result[2, 6, 0] = numpy.sum(x61 * (x17 * x280 + x17 * x331 + x17 * x332 + x301))
    result[2, 6, 1] = numpy.sum(x61 * (x17 * x284 + x17 * x333 + x17 * x334 + x302))
    result[2, 6, 2] = numpy.sum(x61 * (x17 * x287 + x17 * x335 + x17 * x336 + x303))
    result[2, 7, 0] = numpy.sum(x97 * (x17 * x291 + x17 * x337 + x305))
    result[2, 7, 1] = numpy.sum(x97 * (x17 * x294 + x17 * x338 + x306))
    result[2, 7, 2] = numpy.sum(x97 * (x17 * x297 + x17 * x339 + x307))
    result[2, 8, 0] = numpy.sum(x97 * (x17 * x342 + x309))
    result[2, 8, 1] = numpy.sum(x97 * (x17 * x345 + x310))
    result[2, 8, 2] = numpy.sum(x97 * (x17 * x348 + x311))
    result[2, 9, 0] = numpy.sum(
        x61 * (x18 * x340 + x18 * x341 + x18 * x342 + x252 * x349)
    )
    result[2, 9, 1] = numpy.sum(x61 * (x18 * x343 + x18 * x344 + x18 * x345 + x349 * x62))
    result[2, 9, 2] = numpy.sum(
        x61 * (x18 * x346 + x18 * x347 + x18 * x348 + x47 * (x10 * x349 + 4.0 * x245))
    )
    return result


def int3c2e3d_sph_132(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pf|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 10, 6), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(3, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x2 * x20 * x23
    x25 = 2.0 * x19 * x24
    x26 = x18 * x25
    x27 = cx ** (-1.0)
    x28 = x14 ** (-0.5)
    x29 = boys(2, x17)
    x30 = 2.0 * x2 * x20 * x23 * x27 * x28 * x29 - x26
    x31 = x30 * x6
    x32 = -2.0 * x2 * x20 * x23 * x27 * x28 * x29 * x5 + x26 * x4
    x33 = -x32
    x34 = boys(4, x17)
    x35 = x25 * x34
    x36 = -2.0 * x18 * x2 * x20 * x23 * x27 * x28 * x5 + x35 * x4
    x37 = -x36
    x38 = x16 * x37
    x39 = x38 * x4
    x40 = x31 + x33 * x5 - x39
    x41 = 2.0 * x6
    x42 = x6 * (2.0 * x18 * x2 * x20 * x23 * x27 * x28 - x35)
    x43 = boys(5, x17)
    x44 = x25 * x43
    x45 = 2.0 * x2 * x20 * x23 * x27 * x28 * x34 * x5 - x4 * x44
    x46 = x16 * x45
    x47 = x37 * x5 - x4 * x46 + x42
    x48 = x16 * x47
    x49 = -x4 * x48 + x40 * x5 - x41 * (x32 + x38)
    x50 = x4 * x49
    x51 = x40 * x6
    x52 = 3.0 * x51
    x53 = x50 + x52
    x54 = x1 * x15
    x55 = x4 * x54
    x56 = x4 * x40
    x57 = x33 * x6
    x58 = 2.0 * x57
    x59 = x56 + x58
    x60 = 3.0 * x6
    x61 = x54 * x60
    x62 = x54 * (x53 * x55 + x59 * x61)
    x63 = x33 * x4
    x64 = x27 * x29 * x41
    x65 = x24 * x28 * x64
    x66 = x63 + x65
    x67 = x41 * x54
    x68 = x54 * (x55 * x59 + x66 * x67)
    x69 = x0 * x68 + x62
    x70 = x19 * x20 * x23 * x64
    x71 = x4 * x70 + x55 * x66
    x72 = x0 * x54
    x73 = -x30 * x6
    x74 = x6 * (2.0 * x2 * x20 * x23 * x27 * x28 * x34 - x44)
    x75 = x25 * boys(6, x17)
    x76 = x16 * x4
    x77 = (
        x49 * x5
        - x60 * (-x33 * x5 + x39 + x48 + x73)
        + x76
        * (
            x41 * (x36 + x46)
            - x47 * x5
            + x76
            * (
                x45 * x5
                + x74
                - x76 * (2.0 * x2 * x20 * x23 * x27 * x28 * x43 * x5 - x4 * x75)
            )
        )
    )
    x78 = x4 * x77
    x79 = x49 * x6
    x80 = 4.0 * x79
    x81 = x54 * x6
    x82 = da * db * dc
    x83 = 0.06666666666666667 * x82
    x84 = 2.23606797749979 * x83
    x85 = x54 * x9
    x86 = x54 * x85 * (x50 + x52)
    x87 = x54 * x85 * (x56 + x58)
    x88 = x0 * x87 + x86
    x89 = x70 * x9
    x90 = x63 * x85 + x89
    x91 = 3.872983346207417 * x83
    x92 = x12 * x54
    x93 = x54 * x92 * (x50 + x52)
    x94 = x54 * x92 * (x56 + x58)
    x95 = x0 * x94 + x93
    x96 = x12 * x70
    x97 = x63 * x92 + x96
    x98 = x1**2 / x14**2
    x99 = x10 * x98
    x100 = x49 * x99
    x101 = x40 * x99
    x102 = x0 * x101 + x100
    x103 = x0 * x33
    x104 = x9 * x98
    x105 = x104 * x12
    x106 = x105 * x49
    x107 = x105 * x40
    x108 = x0 * x107 + x106
    x109 = x13 * x98
    x110 = x109 * x49
    x111 = x109 * x40
    x112 = x0 * x111 + x110
    x113 = -x8 - A[1]
    x114 = -2.0 * x113 * x18 * x2 * x20 * x23 * x27 * x28 + x35 * x9
    x115 = -x114
    x116 = x115 * x16
    x117 = -2.0 * x113 * x2 * x20 * x23 * x27 * x28 * x29 + x26 * x9
    x118 = -x6 * (x116 + x117)
    x119 = -x117
    x120 = x116 * x4 - x119 * x5
    x121 = -x120
    x122 = 2.0 * x113 * x2 * x20 * x23 * x27 * x28 * x34 - x44 * x9
    x123 = x122 * x16
    x124 = x115 * x5 - x123 * x4
    x125 = x124 * x16
    x126 = x118 + x121 * x5 - x125 * x4
    x127 = x126 * x4
    x128 = x121 * x6
    x129 = 2.0 * x128
    x130 = x127 + x129
    x131 = x119 * x6
    x132 = x121 * x4
    x133 = x131 + x132
    x134 = x54 * (x130 * x55 + x133 * x67)
    x135 = x134 + x21 * x68
    x136 = x54 * x55 * (x131 + x133)
    x137 = x21 * x54
    x138 = x136 + x137 * x71
    x139 = -x6 * (x114 + x123)
    x140 = 2.0 * x113 * x2 * x20 * x23 * x27 * x28 * x43 - x75 * x9
    x141 = (
        x126 * x5
        - x41 * (x120 + x125)
        - x76 * (x124 * x5 + x139 - x76 * (x122 * x5 - x140 * x76))
    )
    x142 = x141 * x4
    x143 = x126 * x6
    x144 = 3.0 * x143
    x145 = x54 * (x130 * x61 + x55 * (x142 + x144))
    x146 = 0.3333333333333333 * x82
    x147 = x126 * x9
    x148 = x147 + x51
    x149 = x121 * x9
    x150 = x149 + x57
    x151 = x150 * x67
    x152 = x54 * (x148 * x55 + x151)
    x153 = x152 + x21 * x87
    x154 = x119 * x9
    x155 = x154 + x65
    x156 = x54 * (x150 * x55 + x155 * x81)
    x157 = x137 * x90 + x156
    x158 = x141 * x9
    x159 = x158 + x79
    x160 = x54 * (x148 * x61 + x159 * x55)
    x161 = 1.732050807568877 * x146
    x162 = x129 * x92
    x163 = x54 * (x127 * x92 + x162)
    x164 = x163 + x21 * x94
    x165 = x131 * x92
    x166 = x54 * (x132 * x92 + x165)
    x167 = x137 * x97 + x166
    x168 = x54 * x92 * (x142 + x144)
    x169 = x54 * x85 * (x148 + x51)
    x170 = x101 * x21 + x169
    x171 = x54 * x85 * (x150 + x57)
    x172 = x21 * x33
    x173 = x171 + x172 * x99
    x174 = x54 * x85 * (x159 + x79)
    x175 = x51 * x92
    x176 = x54 * (x147 * x92 + x175)
    x177 = x107 * x21 + x176
    x178 = x57 * x92
    x179 = x54 * (x149 * x92 + x178)
    x180 = x105 * x172 + x179
    x181 = x79 * x92
    x182 = x54 * (x158 * x92 + x181)
    x183 = x109 * x126
    x184 = x111 * x21 + x183
    x185 = x109 * x121
    x186 = x109 * x172 + x185
    x187 = x109 * x141
    x188 = -x11 - A[2]
    x189 = x12 * x35 - 2.0 * x18 * x188 * x2 * x20 * x23 * x27 * x28
    x190 = -x189
    x191 = x16 * x190
    x192 = x12 * x26 - 2.0 * x188 * x2 * x20 * x23 * x27 * x28 * x29
    x193 = -x6 * (x191 + x192)
    x194 = -x192
    x195 = x191 * x4 - x194 * x5
    x196 = -x195
    x197 = -x12 * x44 + 2.0 * x188 * x2 * x20 * x23 * x27 * x28 * x34
    x198 = x16 * x197
    x199 = x190 * x5 - x198 * x4
    x200 = x16 * x199
    x201 = x193 + x196 * x5 - x200 * x4
    x202 = x201 * x4
    x203 = x196 * x6
    x204 = 2.0 * x203
    x205 = x202 + x204
    x206 = x194 * x6
    x207 = x196 * x4
    x208 = x206 + x207
    x209 = x54 * (x205 * x55 + x208 * x67)
    x210 = x209 + x22 * x68
    x211 = x54 * x55 * (x206 + x208)
    x212 = x22 * x54
    x213 = x211 + x212 * x71
    x214 = -x6 * (x189 + x198)
    x215 = -x12 * x75 + 2.0 * x188 * x2 * x20 * x23 * x27 * x28 * x43
    x216 = (
        x201 * x5
        - x41 * (x195 + x200)
        - x76 * (x199 * x5 + x214 - x76 * (x197 * x5 - x215 * x76))
    )
    x217 = x216 * x4
    x218 = x201 * x6
    x219 = 3.0 * x218
    x220 = x54 * (x205 * x61 + x55 * (x217 + x219))
    x221 = x54 * x85 * (x202 + x204)
    x222 = x22 * x87 + x221
    x223 = x206 * x85
    x224 = x54 * (x207 * x85 + x223)
    x225 = x212 * x90 + x224
    x226 = x54 * x85 * (x217 + x219)
    x227 = x12 * x201 + x51
    x228 = x12 * x196 + x57
    x229 = x228 * x67
    x230 = x54 * (x227 * x55 + x229)
    x231 = x22 * x94 + x230
    x232 = x12 * x194 + x65
    x233 = x232 * x81
    x234 = x54 * (x228 * x55 + x233)
    x235 = x212 * x97 + x234
    x236 = x12 * x216 + x79
    x237 = x54 * (x227 * x61 + x236 * x55)
    x238 = x201 * x99
    x239 = x101 * x22 + x238
    x240 = x196 * x99
    x241 = x22 * x33
    x242 = x240 + x241 * x99
    x243 = x216 * x99
    x244 = x104 * x227
    x245 = x107 * x22 + x244
    x246 = x104 * x228
    x247 = x105 * x241 + x246
    x248 = x104 * x236
    x249 = x54 * (x175 + x227 * x92)
    x250 = x111 * x22 + x249
    x251 = x54 * (x178 + x228 * x92)
    x252 = x109 * x241 + x251
    x253 = x54 * (x181 + x236 * x92)
    x254 = x116 * x9
    x255 = x113 * x119 - x254 + x31
    x256 = x255 * x6
    x257 = x113 * x115 - x123 * x9 + x42
    x258 = x16 * x257
    x259 = x255 * x5 - x258 * x4
    x260 = x259 * x4
    x261 = x256 + x260
    x262 = x54 * x55 * (x256 + x261)
    x263 = x136 * x21 + x262
    x264 = x138 * x21 + x263
    x265 = x6 * (x113 * x119 - x254 - x258 - x73)
    x266 = x16 * x9
    x267 = x113 * x122 - x140 * x266 + x74
    x268 = x259 * x5 + x265 - x76 * (x257 * x5 - x267 * x76)
    x269 = x268 * x4
    x270 = x259 * x6
    x271 = 2.0 * x270
    x272 = x134 * x21 + x54 * (x261 * x67 + x55 * (x269 + x271))
    x273 = x255 * x9
    x274 = 2.0 * x131
    x275 = x273 + x274
    x276 = x259 * x9
    x277 = x129 + x276
    x278 = x54 * (x275 * x81 + x277 * x55)
    x279 = x156 * x21 + x278
    x280 = x157 * x21 + x279
    x281 = x268 * x9
    x282 = 2.0 * x143
    x283 = x281 + x282
    x284 = x152 * x21 + x54 * (x277 * x67 + x283 * x55)
    x285 = x256 * x92
    x286 = x54 * (x260 * x92 + x285)
    x287 = x166 * x21 + x286
    x288 = x167 * x21 + x287
    x289 = x163 * x21 + x54 * x92 * (x269 + x271)
    x290 = x54 * (x151 + x277 * x85)
    x291 = x171 * x21 + x290
    x292 = x173 * x21 + x291
    x293 = x169 * x21 + x54 * (x148 * x67 + x283 * x85)
    x294 = x54 * (x162 + x276 * x92)
    x295 = x179 * x21 + x294
    x296 = x180 * x21 + x295
    x297 = x176 * x21 + x54 * x92 * (x281 + x282)
    x298 = x109 * x259
    x299 = x185 * x21 + x298
    x300 = x186 * x21 + x299
    x301 = x109 * x268 + x183 * x21
    x302 = -x113 * x194 + x191 * x9
    x303 = -x302
    x304 = x303 * x6
    x305 = x113 * x190 - x198 * x9
    x306 = x16 * x305
    x307 = x303 * x5 - x306 * x4
    x308 = x304 + x307 * x4
    x309 = x54 * x55 * (x304 + x308)
    x310 = x136 * x22 + x309
    x311 = x21 * x213 + x310
    x312 = -x6 * (x302 + x306)
    x313 = x113 * x197 - x215 * x266
    x314 = x307 * x5 + x312 - x76 * (x305 * x5 - x313 * x76)
    x315 = x307 * x41
    x316 = x54 * (x308 * x67 + x55 * (x314 * x4 + x315))
    x317 = x134 * x22 + x316
    x318 = x206 + x303 * x9
    x319 = x203 + x307 * x9
    x320 = x54 * (x318 * x81 + x319 * x55)
    x321 = x156 * x22 + x320
    x322 = x21 * x225 + x321
    x323 = x218 + x314 * x9
    x324 = x319 * x67
    x325 = x54 * (x323 * x55 + x324)
    x326 = x152 * x22 + x325
    x327 = x12 * x303 + x131
    x328 = x12 * x307 + x128
    x329 = x54 * (x327 * x81 + x328 * x55)
    x330 = x166 * x22 + x329
    x331 = x21 * x235 + x330
    x332 = x12 * x314 + x143
    x333 = x328 * x67
    x334 = x54 * (x332 * x55 + x333)
    x335 = x163 * x22 + x334
    x336 = x54 * x85 * (x203 + x319)
    x337 = x171 * x22 + x336
    x338 = x21 * x242 + x337
    x339 = x54 * x85 * (x218 + x323)
    x340 = x169 * x22 + x339
    x341 = x54 * (x228 * x81 + x328 * x85)
    x342 = x179 * x22 + x341
    x343 = x21 * x247 + x342
    x344 = x54 * (x227 * x81 + x332 * x85)
    x345 = x176 * x22 + x344
    x346 = x54 * x92 * (x128 + x328)
    x347 = x185 * x22 + x346
    x348 = x21 * x252 + x347
    x349 = x54 * x92 * (x143 + x332)
    x350 = x183 * x22 + x349
    x351 = x12 * x191
    x352 = x188 * x194 + x31 - x351
    x353 = x352 * x6
    x354 = -x12 * x198 + x188 * x190 + x42
    x355 = x16 * x354
    x356 = x352 * x5 - x355 * x4
    x357 = x356 * x4
    x358 = x353 + x357
    x359 = x54 * x55 * (x353 + x358)
    x360 = x211 * x22 + x359
    x361 = x213 * x22 + x360
    x362 = x6 * (x188 * x194 - x351 - x355 - x73)
    x363 = x12 * x16
    x364 = x188 * x197 - x215 * x363 + x74
    x365 = x356 * x5 + x362 - x76 * (x354 * x5 - x364 * x76)
    x366 = x365 * x4
    x367 = x356 * x6
    x368 = 2.0 * x367
    x369 = x209 * x22 + x54 * (x358 * x67 + x55 * (x366 + x368))
    x370 = x353 * x85
    x371 = x54 * (x357 * x85 + x370)
    x372 = x22 * x224 + x371
    x373 = x22 * x225 + x372
    x374 = x22 * x221 + x54 * x85 * (x366 + x368)
    x375 = x12 * x352 + 2.0 * x206
    x376 = x375 * x81
    x377 = x12 * x356 + x204
    x378 = x54 * (x376 + x377 * x55)
    x379 = x22 * x234 + x378
    x380 = x22 * x235 + x379
    x381 = x12 * x365 + 2.0 * x218
    x382 = x22 * x230 + x54 * (x377 * x67 + x381 * x55)
    x383 = x356 * x99
    x384 = x22 * x240 + x383
    x385 = x22 * x242 + x384
    x386 = x22 * x238 + x365 * x99
    x387 = x104 * x377
    x388 = x22 * x246 + x387
    x389 = x22 * x247 + x388
    x390 = x104 * x381 + x22 * x244
    x391 = x54 * (x229 + x377 * x92)
    x392 = x22 * x251 + x391
    x393 = x22 * x252 + x392
    x394 = x22 * x249 + x54 * (x227 * x67 + x381 * x92)
    x395 = x113 * x255 + 2.0 * x118 - x258 * x9
    x396 = x395 * x6
    x397 = x113 * x257 + 2.0 * x139 - x266 * x267
    x398 = x395 * x5 - x397 * x76
    x399 = x398 * x4
    x400 = x21 * x262 + x21 * x263 + x54 * x55 * (2.0 * x396 + x399)
    x401 = x395 * x9
    x402 = 3.0 * x256
    x403 = x401 + x402
    x404 = x403 * x81
    x405 = x398 * x9
    x406 = 3.0 * x270
    x407 = x405 + x406
    x408 = x21 * x278 + x21 * x279 + x54 * (x404 + x407 * x55)
    x409 = x396 * x92
    x410 = x21 * x286 + x21 * x287 + x54 * (x399 * x92 + x409)
    x411 = x21 * x290 + x21 * x291 + x54 * (x277 * x61 + x407 * x85)
    x412 = x21 * x294 + x21 * x295 + x54 * x92 * (x405 + x406)
    x413 = x109 * x398 + x21 * x298 + x21 * x299
    x414 = x113 * x303 + x193 - x306 * x9
    x415 = x414 * x6
    x416 = x113 * x305 + x214 - x266 * x313
    x417 = x414 * x5 - x416 * x76
    x418 = x54 * x55 * (x4 * x417 + 2.0 * x415)
    x419 = x21 * x310 + x22 * x262 + x418
    x420 = 2.0 * x304
    x421 = x414 * x9 + x420
    x422 = x315 + x417 * x9
    x423 = x54 * (x421 * x81 + x422 * x55)
    x424 = x21 * x321 + x22 * x278 + x423
    x425 = x12 * x414 + x256
    x426 = x12 * x417 + x270
    x427 = x54 * (x425 * x81 + x426 * x55)
    x428 = x21 * x330 + x22 * x286 + x427
    x429 = x54 * (x324 + x422 * x85)
    x430 = x21 * x337 + x22 * x290 + x429
    x431 = x54 * (x333 + x426 * x85)
    x432 = x21 * x342 + x22 * x294 + x431
    x433 = x54 * x92 * (x270 + x426)
    x434 = x21 * x347 + x22 * x298 + x433
    x435 = x113 * x352 - x355 * x9
    x436 = x435 * x6
    x437 = x113 * x354 - x266 * x364
    x438 = x435 * x5 - x437 * x76
    x439 = x22 * x309 + x54 * x55 * (x4 * x438 + 2.0 * x436)
    x440 = x22 * x310 + x439
    x441 = x353 + x435 * x9
    x442 = x367 + x438 * x9
    x443 = x22 * x320 + x54 * (x441 * x81 + x442 * x55)
    x444 = x22 * x321 + x443
    x445 = x12 * x435 + x420
    x446 = x12 * x438 + x315
    x447 = x22 * x329 + x54 * (x445 * x81 + x446 * x55)
    x448 = x22 * x330 + x447
    x449 = x22 * x336 + x54 * x85 * (x367 + x442)
    x450 = x22 * x337 + x449
    x451 = x22 * x341 + x54 * (x377 * x81 + x446 * x85)
    x452 = x22 * x342 + x451
    x453 = x22 * x346 + x54 * (x333 + x446 * x92)
    x454 = x22 * x347 + x453
    x455 = -x12 * x355 + x188 * x352 + 2.0 * x193
    x456 = x455 * x6
    x457 = x188 * x354 + 2.0 * x214 - x363 * x364
    x458 = x455 * x5 - x457 * x76
    x459 = x4 * x458
    x460 = x22 * x359 + x22 * x360 + x54 * x55 * (2.0 * x456 + x459)
    x461 = x456 * x85
    x462 = x22 * x371 + x22 * x372 + x54 * (x459 * x85 + x461)
    x463 = x12 * x455 + 3.0 * x353
    x464 = x463 * x81
    x465 = x12 * x458 + 3.0 * x367
    x466 = x22 * x378 + x22 * x379 + x54 * (x464 + x465 * x55)
    x467 = x22 * x383 + x22 * x384 + x458 * x99
    x468 = x104 * x465 + x22 * x387 + x22 * x388
    x469 = x22 * x391 + x22 * x392 + x54 * (x377 * x61 + x465 * x92)
    x470 = x0 * x136 + x134
    x471 = x7 * x98
    x472 = x0 * x119
    x473 = x0 * x156 + x152
    x474 = x4 * x98
    x475 = x155 * x474
    x476 = x0 * x166 + x163
    x477 = x12 * x474
    x478 = x0 * x171 + x169
    x479 = x155 * x85 + x89
    x480 = x0 * x179 + x176
    x481 = x154 * x92 + x96
    x482 = x0 * x185 + x183
    x483 = x255 * x471
    x484 = x119 * x21
    x485 = x471 * x484 + x483
    x486 = x275 * x474
    x487 = x21 * x475 + x486
    x488 = x255 * x477
    x489 = x477 * x484 + x488
    x490 = x54 * (x155 * x67 + x275 * x85)
    x491 = x137 * x479 + x490
    x492 = x54 * x92 * (x273 + x274)
    x493 = x137 * x481 + x492
    x494 = x109 * x255
    x495 = x109 * x484 + x494
    x496 = x303 * x471
    x497 = x119 * x22
    x498 = x471 * x497 + x496
    x499 = x318 * x474
    x500 = x22 * x475 + x499
    x501 = x327 * x474
    x502 = x477 * x497 + x501
    x503 = x54 * (x223 + x318 * x85)
    x504 = x212 * x479 + x503
    x505 = x54 * (x233 + x327 * x85)
    x506 = x212 * x481 + x505
    x507 = x54 * (x165 + x327 * x92)
    x508 = x109 * x497 + x507
    x509 = x395 * x471
    x510 = x21 * x483 + x509
    x511 = x21 * x485 + x510
    x512 = x403 * x474
    x513 = x21 * x486 + x512
    x514 = x21 * x487 + x513
    x515 = x395 * x477
    x516 = x21 * x488 + x515
    x517 = x21 * x489 + x516
    x518 = x54 * (x275 * x61 + x403 * x85)
    x519 = x21 * x490 + x518
    x520 = x21 * x491 + x519
    x521 = x54 * x92 * (x401 + x402)
    x522 = x21 * x492 + x521
    x523 = x21 * x493 + x522
    x524 = x109 * x395
    x525 = x21 * x494 + x524
    x526 = x21 * x495 + x525
    x527 = x414 * x471
    x528 = x22 * x483 + x527
    x529 = x21 * x498 + x528
    x530 = x421 * x474
    x531 = x22 * x486 + x530
    x532 = x21 * x500 + x531
    x533 = x425 * x474
    x534 = x22 * x488 + x533
    x535 = x21 * x502 + x534
    x536 = x54 * (x318 * x67 + x421 * x85)
    x537 = x22 * x490 + x536
    x538 = x21 * x504 + x537
    x539 = x327 * x67
    x540 = x54 * (x425 * x85 + x539)
    x541 = x22 * x492 + x540
    x542 = x21 * x506 + x541
    x543 = x54 * (x285 + x425 * x92)
    x544 = x22 * x494 + x543
    x545 = x21 * x508 + x544
    x546 = x435 * x471
    x547 = x22 * x496 + x546
    x548 = x22 * x498 + x547
    x549 = x441 * x474
    x550 = x22 * x499 + x549
    x551 = x22 * x500 + x550
    x552 = x445 * x474
    x553 = x22 * x501 + x552
    x554 = x22 * x502 + x553
    x555 = x54 * (x370 + x441 * x85)
    x556 = x22 * x503 + x555
    x557 = x22 * x504 + x556
    x558 = x54 * (x376 + x445 * x85)
    x559 = x22 * x505 + x558
    x560 = x22 * x506 + x559
    x561 = x54 * (x445 * x92 + x539)
    x562 = x22 * x507 + x561
    x563 = x22 * x508 + x562
    x564 = x113 * x395 + 3.0 * x265 - x266 * x397
    x565 = x564 * x9
    x566 = 4.0 * x396
    x567 = x565 + x566
    x568 = x113 * x414 - x266 * x416 + 2.0 * x312
    x569 = x471 * x568
    x570 = 3.0 * x415 + x568 * x9
    x571 = x474 * x570
    x572 = x12 * x568 + x396
    x573 = x474 * x572
    x574 = x54 * (x421 * x61 + x570 * x85)
    x575 = x54 * (x425 * x61 + x572 * x85)
    x576 = x54 * (x409 + x572 * x92)
    x577 = x113 * x435 - x266 * x437 + x362
    x578 = x22 * x527 + x471 * x577
    x579 = 2.0 * x436 + x577 * x9
    x580 = x22 * x530 + x474 * x579
    x581 = x12 * x577 + 2.0 * x415
    x582 = x22 * x533 + x474 * x581
    x583 = x22 * x536 + x54 * (x441 * x67 + x579 * x85)
    x584 = x22 * x540 + x54 * (x445 * x67 + x581 * x85)
    x585 = x22 * x543 + x54 * (x425 * x67 + x581 * x92)
    x586 = x113 * x455 - x266 * x457
    x587 = x22 * x546 + x22 * x547 + x471 * x586
    x588 = x456 + x586 * x9
    x589 = x22 * x549 + x22 * x550 + x474 * x588
    x590 = x12 * x586 + 3.0 * x436
    x591 = x22 * x552 + x22 * x553 + x474 * x590
    x592 = x22 * x555 + x22 * x556 + x54 * (x461 + x588 * x85)
    x593 = x22 * x558 + x22 * x559 + x54 * (x464 + x590 * x85)
    x594 = x22 * x561 + x22 * x562 + x54 * (x445 * x61 + x590 * x92)
    x595 = x0 * x211 + x209
    x596 = x0 * x194
    x597 = x0 * x224 + x221
    x598 = x104 * x4
    x599 = x0 * x234 + x230
    x600 = x0 * x232
    x601 = x0 * x240 + x238
    x602 = x0 * x246 + x244
    x603 = x0 * x251 + x249
    x604 = x232 * x92 + x96
    x605 = x21 * x211 + x309
    x606 = x194 * x21
    x607 = x471 * x606 + x496
    x608 = x21 * x224 + x320
    x609 = x499 + x598 * x606
    x610 = x21 * x234 + x329
    x611 = x21 * x232
    x612 = x474 * x611 + x501
    x613 = x21 * x240 + x336
    x614 = x503 + x606 * x99
    x615 = x21 * x246 + x341
    x616 = x104 * x611 + x505
    x617 = x21 * x251 + x346
    x618 = x137 * x604 + x507
    x619 = x352 * x471
    x620 = x194 * x22
    x621 = x471 * x620 + x619
    x622 = x352 * x598
    x623 = x598 * x620 + x622
    x624 = x375 * x474
    x625 = x22 * x232
    x626 = x474 * x625 + x624
    x627 = x352 * x99
    x628 = x620 * x99 + x627
    x629 = x104 * x375
    x630 = x104 * x625 + x629
    x631 = x54 * (x232 * x67 + x375 * x92)
    x632 = x212 * x604 + x631
    x633 = x21 * x496 + x527
    x634 = x21 * x607 + x633
    x635 = x21 * x499 + x530
    x636 = x21 * x609 + x635
    x637 = x21 * x501 + x533
    x638 = x21 * x612 + x637
    x639 = x21 * x503 + x536
    x640 = x21 * x614 + x639
    x641 = x21 * x505 + x540
    x642 = x21 * x616 + x641
    x643 = x21 * x507 + x543
    x644 = x21 * x618 + x643
    x645 = x21 * x621 + x547
    x646 = x21 * x623 + x550
    x647 = x21 * x626 + x553
    x648 = x21 * x628 + x556
    x649 = x21 * x630 + x559
    x650 = x21 * x632 + x562
    x651 = x455 * x471
    x652 = x22 * x619 + x651
    x653 = x22 * x621 + x652
    x654 = x455 * x598
    x655 = x22 * x622 + x654
    x656 = x22 * x623 + x655
    x657 = x463 * x474
    x658 = x22 * x624 + x657
    x659 = x22 * x626 + x658
    x660 = x455 * x99
    x661 = x22 * x627 + x660
    x662 = x22 * x628 + x661
    x663 = x104 * x463
    x664 = x22 * x629 + x663
    x665 = x22 * x630 + x664
    x666 = x54 * (x375 * x61 + x463 * x92)
    x667 = x22 * x631 + x666
    x668 = x22 * x632 + x667
    x669 = x188 * x455 + 3.0 * x362 - x363 * x457
    x670 = x12 * x669 + 4.0 * x456

    # 180 item(s)
    result[0, 0, 0] = numpy.sum(
        x84
        * (
            x0 * x62
            + x0 * x69
            + x0 * (x0 * (x68 + x71 * x72) + x69)
            + x54 * (4.0 * x53 * x81 + x55 * (x78 + x80))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x91
        * (
            x0 * x86
            + x0 * x88
            + x0 * (x0 * (x72 * x90 + x87) + x88)
            + x54 * x85 * (x78 + x80)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x91
        * (
            x0 * x93
            + x0 * x95
            + x0 * (x0 * (x72 * x97 + x94) + x95)
            + x54 * x92 * (x78 + x80)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x84 * (x0 * x100 + x0 * x102 + x0 * (x0 * (x101 + x103 * x99) + x102) + x77 * x99)
    )
    result[0, 0, 4] = numpy.sum(
        x91
        * (x0 * x106 + x0 * x108 + x0 * (x0 * (x103 * x105 + x107) + x108) + x105 * x77)
    )
    result[0, 0, 5] = numpy.sum(
        x84
        * (x0 * x110 + x0 * x112 + x0 * (x0 * (x103 * x109 + x111) + x112) + x109 * x77)
    )
    result[0, 1, 0] = numpy.sum(
        x146 * (x0 * x135 + x0 * (x0 * x138 + x135) + x145 + x21 * x62)
    )
    result[0, 1, 1] = numpy.sum(
        x161 * (x0 * x153 + x0 * (x0 * x157 + x153) + x160 + x21 * x86)
    )
    result[0, 1, 2] = numpy.sum(
        x161 * (x0 * x164 + x0 * (x0 * x167 + x164) + x168 + x21 * x93)
    )
    result[0, 1, 3] = numpy.sum(
        x146 * (x0 * x170 + x0 * (x0 * x173 + x170) + x100 * x21 + x174)
    )
    result[0, 1, 4] = numpy.sum(
        x161 * (x0 * x177 + x0 * (x0 * x180 + x177) + x106 * x21 + x182)
    )
    result[0, 1, 5] = numpy.sum(
        x146 * (x0 * x184 + x0 * (x0 * x186 + x184) + x110 * x21 + x187)
    )
    result[0, 2, 0] = numpy.sum(
        x146 * (x0 * x210 + x0 * (x0 * x213 + x210) + x22 * x62 + x220)
    )
    result[0, 2, 1] = numpy.sum(
        x161 * (x0 * x222 + x0 * (x0 * x225 + x222) + x22 * x86 + x226)
    )
    result[0, 2, 2] = numpy.sum(
        x161 * (x0 * x231 + x0 * (x0 * x235 + x231) + x22 * x93 + x237)
    )
    result[0, 2, 3] = numpy.sum(
        x146 * (x0 * x239 + x0 * (x0 * x242 + x239) + x100 * x22 + x243)
    )
    result[0, 2, 4] = numpy.sum(
        x161 * (x0 * x245 + x0 * (x0 * x247 + x245) + x106 * x22 + x248)
    )
    result[0, 2, 5] = numpy.sum(
        x146 * (x0 * x250 + x0 * (x0 * x252 + x250) + x110 * x22 + x253)
    )
    result[0, 3, 0] = numpy.sum(x146 * (x0 * x264 + x135 * x21 + x272))
    result[0, 3, 1] = numpy.sum(x161 * (x0 * x280 + x153 * x21 + x284))
    result[0, 3, 2] = numpy.sum(x161 * (x0 * x288 + x164 * x21 + x289))
    result[0, 3, 3] = numpy.sum(x146 * (x0 * x292 + x170 * x21 + x293))
    result[0, 3, 4] = numpy.sum(x161 * (x0 * x296 + x177 * x21 + x297))
    result[0, 3, 5] = numpy.sum(x146 * (x0 * x300 + x184 * x21 + x301))
    result[0, 4, 0] = numpy.sum(x161 * (x0 * x311 + x21 * x210 + x317))
    result[0, 4, 1] = numpy.sum(x82 * (x0 * x322 + x21 * x222 + x326))
    result[0, 4, 2] = numpy.sum(x82 * (x0 * x331 + x21 * x231 + x335))
    result[0, 4, 3] = numpy.sum(x161 * (x0 * x338 + x21 * x239 + x340))
    result[0, 4, 4] = numpy.sum(x82 * (x0 * x343 + x21 * x245 + x345))
    result[0, 4, 5] = numpy.sum(x161 * (x0 * x348 + x21 * x250 + x350))
    result[0, 5, 0] = numpy.sum(x146 * (x0 * x361 + x210 * x22 + x369))
    result[0, 5, 1] = numpy.sum(x161 * (x0 * x373 + x22 * x222 + x374))
    result[0, 5, 2] = numpy.sum(x161 * (x0 * x380 + x22 * x231 + x382))
    result[0, 5, 3] = numpy.sum(x146 * (x0 * x385 + x22 * x239 + x386))
    result[0, 5, 4] = numpy.sum(x161 * (x0 * x389 + x22 * x245 + x390))
    result[0, 5, 5] = numpy.sum(x146 * (x0 * x393 + x22 * x250 + x394))
    result[0, 6, 0] = numpy.sum(x84 * (x21 * x264 + x400))
    result[0, 6, 1] = numpy.sum(x91 * (x21 * x280 + x408))
    result[0, 6, 2] = numpy.sum(x91 * (x21 * x288 + x410))
    result[0, 6, 3] = numpy.sum(x84 * (x21 * x292 + x411))
    result[0, 6, 4] = numpy.sum(x91 * (x21 * x296 + x412))
    result[0, 6, 5] = numpy.sum(x84 * (x21 * x300 + x413))
    result[0, 7, 0] = numpy.sum(x146 * (x21 * x311 + x419))
    result[0, 7, 1] = numpy.sum(x161 * (x21 * x322 + x424))
    result[0, 7, 2] = numpy.sum(x161 * (x21 * x331 + x428))
    result[0, 7, 3] = numpy.sum(x146 * (x21 * x338 + x430))
    result[0, 7, 4] = numpy.sum(x161 * (x21 * x343 + x432))
    result[0, 7, 5] = numpy.sum(x146 * (x21 * x348 + x434))
    result[0, 8, 0] = numpy.sum(x146 * (x21 * x361 + x440))
    result[0, 8, 1] = numpy.sum(x161 * (x21 * x373 + x444))
    result[0, 8, 2] = numpy.sum(x161 * (x21 * x380 + x448))
    result[0, 8, 3] = numpy.sum(x146 * (x21 * x385 + x450))
    result[0, 8, 4] = numpy.sum(x161 * (x21 * x389 + x452))
    result[0, 8, 5] = numpy.sum(x146 * (x21 * x393 + x454))
    result[0, 9, 0] = numpy.sum(x84 * (x22 * x361 + x460))
    result[0, 9, 1] = numpy.sum(x91 * (x22 * x373 + x462))
    result[0, 9, 2] = numpy.sum(x91 * (x22 * x380 + x466))
    result[0, 9, 3] = numpy.sum(x84 * (x22 * x385 + x467))
    result[0, 9, 4] = numpy.sum(x91 * (x22 * x389 + x468))
    result[0, 9, 5] = numpy.sum(x84 * (x22 * x393 + x469))
    result[1, 0, 0] = numpy.sum(
        x84 * (x0 * x134 + x0 * x470 + x0 * (x0 * (x136 + x471 * x472) + x470) + x145)
    )
    result[1, 0, 1] = numpy.sum(
        x91 * (x0 * x152 + x0 * x473 + x0 * (x0 * (x0 * x475 + x156) + x473) + x160)
    )
    result[1, 0, 2] = numpy.sum(
        x91 * (x0 * x163 + x0 * x476 + x0 * (x0 * (x166 + x472 * x477) + x476) + x168)
    )
    result[1, 0, 3] = numpy.sum(
        x84 * (x0 * x169 + x0 * x478 + x0 * (x0 * (x171 + x479 * x72) + x478) + x174)
    )
    result[1, 0, 4] = numpy.sum(
        x91 * (x0 * x176 + x0 * x480 + x0 * (x0 * (x179 + x481 * x72) + x480) + x182)
    )
    result[1, 0, 5] = numpy.sum(
        x84 * (x0 * x183 + x0 * x482 + x0 * (x0 * (x109 * x472 + x185) + x482) + x187)
    )
    result[1, 1, 0] = numpy.sum(x146 * (x0 * x263 + x0 * (x0 * x485 + x263) + x272))
    result[1, 1, 1] = numpy.sum(x161 * (x0 * x279 + x0 * (x0 * x487 + x279) + x284))
    result[1, 1, 2] = numpy.sum(x161 * (x0 * x287 + x0 * (x0 * x489 + x287) + x289))
    result[1, 1, 3] = numpy.sum(x146 * (x0 * x291 + x0 * (x0 * x491 + x291) + x293))
    result[1, 1, 4] = numpy.sum(x161 * (x0 * x295 + x0 * (x0 * x493 + x295) + x297))
    result[1, 1, 5] = numpy.sum(x146 * (x0 * x299 + x0 * (x0 * x495 + x299) + x301))
    result[1, 2, 0] = numpy.sum(x146 * (x0 * x310 + x0 * (x0 * x498 + x310) + x317))
    result[1, 2, 1] = numpy.sum(x161 * (x0 * x321 + x0 * (x0 * x500 + x321) + x326))
    result[1, 2, 2] = numpy.sum(x161 * (x0 * x330 + x0 * (x0 * x502 + x330) + x335))
    result[1, 2, 3] = numpy.sum(x146 * (x0 * x337 + x0 * (x0 * x504 + x337) + x340))
    result[1, 2, 4] = numpy.sum(x161 * (x0 * x342 + x0 * (x0 * x506 + x342) + x345))
    result[1, 2, 5] = numpy.sum(x146 * (x0 * x347 + x0 * (x0 * x508 + x347) + x350))
    result[1, 3, 0] = numpy.sum(x146 * (x0 * x511 + x400))
    result[1, 3, 1] = numpy.sum(x161 * (x0 * x514 + x408))
    result[1, 3, 2] = numpy.sum(x161 * (x0 * x517 + x410))
    result[1, 3, 3] = numpy.sum(x146 * (x0 * x520 + x411))
    result[1, 3, 4] = numpy.sum(x161 * (x0 * x523 + x412))
    result[1, 3, 5] = numpy.sum(x146 * (x0 * x526 + x413))
    result[1, 4, 0] = numpy.sum(x161 * (x0 * x529 + x419))
    result[1, 4, 1] = numpy.sum(x82 * (x0 * x532 + x424))
    result[1, 4, 2] = numpy.sum(x82 * (x0 * x535 + x428))
    result[1, 4, 3] = numpy.sum(x161 * (x0 * x538 + x430))
    result[1, 4, 4] = numpy.sum(x82 * (x0 * x542 + x432))
    result[1, 4, 5] = numpy.sum(x161 * (x0 * x545 + x434))
    result[1, 5, 0] = numpy.sum(x146 * (x0 * x548 + x440))
    result[1, 5, 1] = numpy.sum(x161 * (x0 * x551 + x444))
    result[1, 5, 2] = numpy.sum(x161 * (x0 * x554 + x448))
    result[1, 5, 3] = numpy.sum(x146 * (x0 * x557 + x450))
    result[1, 5, 4] = numpy.sum(x161 * (x0 * x560 + x452))
    result[1, 5, 5] = numpy.sum(x146 * (x0 * x563 + x454))
    result[1, 6, 0] = numpy.sum(
        x84 * (x21 * x509 + x21 * x510 + x21 * x511 + x471 * x564)
    )
    result[1, 6, 1] = numpy.sum(
        x91 * (x21 * x512 + x21 * x513 + x21 * x514 + x474 * x567)
    )
    result[1, 6, 2] = numpy.sum(
        x91 * (x21 * x515 + x21 * x516 + x21 * x517 + x477 * x564)
    )
    result[1, 6, 3] = numpy.sum(
        x84 * (x21 * x518 + x21 * x519 + x21 * x520 + x54 * (4.0 * x404 + x567 * x85))
    )
    result[1, 6, 4] = numpy.sum(
        x91 * (x21 * x521 + x21 * x522 + x21 * x523 + x54 * x92 * (x565 + x566))
    )
    result[1, 6, 5] = numpy.sum(
        x84 * (x109 * x564 + x21 * x524 + x21 * x525 + x21 * x526)
    )
    result[1, 7, 0] = numpy.sum(x146 * (x21 * x528 + x21 * x529 + x22 * x509 + x569))
    result[1, 7, 1] = numpy.sum(x161 * (x21 * x531 + x21 * x532 + x22 * x512 + x571))
    result[1, 7, 2] = numpy.sum(x161 * (x21 * x534 + x21 * x535 + x22 * x515 + x573))
    result[1, 7, 3] = numpy.sum(x146 * (x21 * x537 + x21 * x538 + x22 * x518 + x574))
    result[1, 7, 4] = numpy.sum(x161 * (x21 * x541 + x21 * x542 + x22 * x521 + x575))
    result[1, 7, 5] = numpy.sum(x146 * (x21 * x544 + x21 * x545 + x22 * x524 + x576))
    result[1, 8, 0] = numpy.sum(x146 * (x21 * x548 + x22 * x528 + x578))
    result[1, 8, 1] = numpy.sum(x161 * (x21 * x551 + x22 * x531 + x580))
    result[1, 8, 2] = numpy.sum(x161 * (x21 * x554 + x22 * x534 + x582))
    result[1, 8, 3] = numpy.sum(x146 * (x21 * x557 + x22 * x537 + x583))
    result[1, 8, 4] = numpy.sum(x161 * (x21 * x560 + x22 * x541 + x584))
    result[1, 8, 5] = numpy.sum(x146 * (x21 * x563 + x22 * x544 + x585))
    result[1, 9, 0] = numpy.sum(x84 * (x22 * x548 + x587))
    result[1, 9, 1] = numpy.sum(x91 * (x22 * x551 + x589))
    result[1, 9, 2] = numpy.sum(x91 * (x22 * x554 + x591))
    result[1, 9, 3] = numpy.sum(x84 * (x22 * x557 + x592))
    result[1, 9, 4] = numpy.sum(x91 * (x22 * x560 + x593))
    result[1, 9, 5] = numpy.sum(x84 * (x22 * x563 + x594))
    result[2, 0, 0] = numpy.sum(
        x84 * (x0 * x209 + x0 * x595 + x0 * (x0 * (x211 + x471 * x596) + x595) + x220)
    )
    result[2, 0, 1] = numpy.sum(
        x91 * (x0 * x221 + x0 * x597 + x0 * (x0 * (x224 + x596 * x598) + x597) + x226)
    )
    result[2, 0, 2] = numpy.sum(
        x91 * (x0 * x230 + x0 * x599 + x0 * (x0 * (x234 + x474 * x600) + x599) + x237)
    )
    result[2, 0, 3] = numpy.sum(
        x84 * (x0 * x238 + x0 * x601 + x0 * (x0 * (x240 + x596 * x99) + x601) + x243)
    )
    result[2, 0, 4] = numpy.sum(
        x91 * (x0 * x244 + x0 * x602 + x0 * (x0 * (x104 * x600 + x246) + x602) + x248)
    )
    result[2, 0, 5] = numpy.sum(
        x84 * (x0 * x249 + x0 * x603 + x0 * (x0 * (x251 + x604 * x72) + x603) + x253)
    )
    result[2, 1, 0] = numpy.sum(
        x146 * (x0 * x605 + x0 * (x0 * x607 + x605) + x209 * x21 + x316)
    )
    result[2, 1, 1] = numpy.sum(
        x161 * (x0 * x608 + x0 * (x0 * x609 + x608) + x21 * x221 + x325)
    )
    result[2, 1, 2] = numpy.sum(
        x161 * (x0 * x610 + x0 * (x0 * x612 + x610) + x21 * x230 + x334)
    )
    result[2, 1, 3] = numpy.sum(
        x146 * (x0 * x613 + x0 * (x0 * x614 + x613) + x21 * x238 + x339)
    )
    result[2, 1, 4] = numpy.sum(
        x161 * (x0 * x615 + x0 * (x0 * x616 + x615) + x21 * x244 + x344)
    )
    result[2, 1, 5] = numpy.sum(
        x146 * (x0 * x617 + x0 * (x0 * x618 + x617) + x21 * x249 + x349)
    )
    result[2, 2, 0] = numpy.sum(x146 * (x0 * x360 + x0 * (x0 * x621 + x360) + x369))
    result[2, 2, 1] = numpy.sum(x161 * (x0 * x372 + x0 * (x0 * x623 + x372) + x374))
    result[2, 2, 2] = numpy.sum(x161 * (x0 * x379 + x0 * (x0 * x626 + x379) + x382))
    result[2, 2, 3] = numpy.sum(x146 * (x0 * x384 + x0 * (x0 * x628 + x384) + x386))
    result[2, 2, 4] = numpy.sum(x161 * (x0 * x388 + x0 * (x0 * x630 + x388) + x390))
    result[2, 2, 5] = numpy.sum(x146 * (x0 * x392 + x0 * (x0 * x632 + x392) + x394))
    result[2, 3, 0] = numpy.sum(x146 * (x0 * x634 + x21 * x309 + x21 * x605 + x418))
    result[2, 3, 1] = numpy.sum(x161 * (x0 * x636 + x21 * x320 + x21 * x608 + x423))
    result[2, 3, 2] = numpy.sum(x161 * (x0 * x638 + x21 * x329 + x21 * x610 + x427))
    result[2, 3, 3] = numpy.sum(x146 * (x0 * x640 + x21 * x336 + x21 * x613 + x429))
    result[2, 3, 4] = numpy.sum(x161 * (x0 * x642 + x21 * x341 + x21 * x615 + x431))
    result[2, 3, 5] = numpy.sum(x146 * (x0 * x644 + x21 * x346 + x21 * x617 + x433))
    result[2, 4, 0] = numpy.sum(x161 * (x0 * x645 + x21 * x360 + x439))
    result[2, 4, 1] = numpy.sum(x82 * (x0 * x646 + x21 * x372 + x443))
    result[2, 4, 2] = numpy.sum(x82 * (x0 * x647 + x21 * x379 + x447))
    result[2, 4, 3] = numpy.sum(x161 * (x0 * x648 + x21 * x384 + x449))
    result[2, 4, 4] = numpy.sum(x82 * (x0 * x649 + x21 * x388 + x451))
    result[2, 4, 5] = numpy.sum(x161 * (x0 * x650 + x21 * x392 + x453))
    result[2, 5, 0] = numpy.sum(x146 * (x0 * x653 + x460))
    result[2, 5, 1] = numpy.sum(x161 * (x0 * x656 + x462))
    result[2, 5, 2] = numpy.sum(x161 * (x0 * x659 + x466))
    result[2, 5, 3] = numpy.sum(x146 * (x0 * x662 + x467))
    result[2, 5, 4] = numpy.sum(x161 * (x0 * x665 + x468))
    result[2, 5, 5] = numpy.sum(x146 * (x0 * x668 + x469))
    result[2, 6, 0] = numpy.sum(x84 * (x21 * x527 + x21 * x633 + x21 * x634 + x569))
    result[2, 6, 1] = numpy.sum(x91 * (x21 * x530 + x21 * x635 + x21 * x636 + x571))
    result[2, 6, 2] = numpy.sum(x91 * (x21 * x533 + x21 * x637 + x21 * x638 + x573))
    result[2, 6, 3] = numpy.sum(x84 * (x21 * x536 + x21 * x639 + x21 * x640 + x574))
    result[2, 6, 4] = numpy.sum(x91 * (x21 * x540 + x21 * x641 + x21 * x642 + x575))
    result[2, 6, 5] = numpy.sum(x84 * (x21 * x543 + x21 * x643 + x21 * x644 + x576))
    result[2, 7, 0] = numpy.sum(x146 * (x21 * x547 + x21 * x645 + x578))
    result[2, 7, 1] = numpy.sum(x161 * (x21 * x550 + x21 * x646 + x580))
    result[2, 7, 2] = numpy.sum(x161 * (x21 * x553 + x21 * x647 + x582))
    result[2, 7, 3] = numpy.sum(x146 * (x21 * x556 + x21 * x648 + x583))
    result[2, 7, 4] = numpy.sum(x161 * (x21 * x559 + x21 * x649 + x584))
    result[2, 7, 5] = numpy.sum(x146 * (x21 * x562 + x21 * x650 + x585))
    result[2, 8, 0] = numpy.sum(x146 * (x21 * x653 + x587))
    result[2, 8, 1] = numpy.sum(x161 * (x21 * x656 + x589))
    result[2, 8, 2] = numpy.sum(x161 * (x21 * x659 + x591))
    result[2, 8, 3] = numpy.sum(x146 * (x21 * x662 + x592))
    result[2, 8, 4] = numpy.sum(x161 * (x21 * x665 + x593))
    result[2, 8, 5] = numpy.sum(x146 * (x21 * x668 + x594))
    result[2, 9, 0] = numpy.sum(
        x84 * (x22 * x651 + x22 * x652 + x22 * x653 + x471 * x669)
    )
    result[2, 9, 1] = numpy.sum(
        x91 * (x22 * x654 + x22 * x655 + x22 * x656 + x598 * x669)
    )
    result[2, 9, 2] = numpy.sum(
        x91 * (x22 * x657 + x22 * x658 + x22 * x659 + x474 * x670)
    )
    result[2, 9, 3] = numpy.sum(x84 * (x22 * x660 + x22 * x661 + x22 * x662 + x669 * x99))
    result[2, 9, 4] = numpy.sum(
        x91 * (x104 * x670 + x22 * x663 + x22 * x664 + x22 * x665)
    )
    result[2, 9, 5] = numpy.sum(
        x84 * (x22 * x666 + x22 * x667 + x22 * x668 + x54 * (4.0 * x464 + x670 * x92))
    )
    return result


def int3c2e3d_sph_133(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pf|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 10, 10), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(4, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x20 * x23
    x25 = x2 * x24
    x26 = 2.0 * x19 * x25
    x27 = x18 * x26
    x28 = cx ** (-1.0)
    x29 = x14 ** (-0.5)
    x30 = boys(3, x17)
    x31 = 2.0 * x2 * x20 * x23 * x28 * x29 * x30 - x27
    x32 = x31 * x6
    x33 = -2.0 * x2 * x20 * x23 * x28 * x29 * x30 * x5 + x27 * x4
    x34 = -x33
    x35 = boys(5, x17)
    x36 = x26 * x35
    x37 = -2.0 * x18 * x2 * x20 * x23 * x28 * x29 * x5 + x36 * x4
    x38 = -x37
    x39 = x16 * x38
    x40 = x39 * x4
    x41 = x32 + x34 * x5 - x40
    x42 = 2.0 * x6
    x43 = x6 * (2.0 * x18 * x2 * x20 * x23 * x28 * x29 - x36)
    x44 = boys(6, x17)
    x45 = x26 * x44
    x46 = 2.0 * x2 * x20 * x23 * x28 * x29 * x35 * x5 - x4 * x45
    x47 = x16 * x46
    x48 = x38 * x5 - x4 * x47 + x43
    x49 = x16 * x48
    x50 = -x4 * x49 + x41 * x5 - x42 * (x33 + x39)
    x51 = x4 * x50
    x52 = x41 * x6
    x53 = 3.0 * x52
    x54 = x51 + x53
    x55 = x1 * x15
    x56 = x4 * x55
    x57 = x4 * x41
    x58 = x34 * x6
    x59 = 2.0 * x58
    x60 = x57 + x59
    x61 = 3.0 * x6
    x62 = x55 * x61
    x63 = x54 * x56 + x60 * x62
    x64 = x34 * x4
    x65 = x28 * x30 * x42
    x66 = x25 * x29 * x65
    x67 = x64 + x66
    x68 = x42 * x55
    x69 = x56 * x60 + x67 * x68
    x70 = x55 * (x56 * x63 + x62 * x69)
    x71 = x24 * x65
    x72 = x19 * x71
    x73 = x4 * x72 + x56 * x67
    x74 = x55 * (x56 * x69 + x68 * x73)
    x75 = x0 * x74 + x70
    x76 = x1 * x14 ** (-2.5) * x71
    x77 = x56 * x73 + x7 * x76
    x78 = x0 * x55
    x79 = -x31 * x6
    x80 = x6 * (2.0 * x2 * x20 * x23 * x28 * x29 * x35 - x45)
    x81 = x26 * boys(7, x17)
    x82 = x16 * x4
    x83 = (
        x5 * x50
        - x61 * (-x34 * x5 + x40 + x49 + x79)
        + x82
        * (
            x42 * (x37 + x47)
            - x48 * x5
            + x82
            * (
                x46 * x5
                + x80
                - x82 * (2.0 * x2 * x20 * x23 * x28 * x29 * x44 * x5 - x4 * x81)
            )
        )
    )
    x84 = x4 * x83
    x85 = x50 * x6
    x86 = 4.0 * x85
    x87 = x55 * x6
    x88 = 4.0 * x87
    x89 = da * db * dc
    x90 = 0.06666666666666667 * x89
    x91 = x55 * x9
    x92 = x91 * (x51 + x53)
    x93 = x91 * (x57 + x59)
    x94 = x55 * (x56 * x92 + x62 * x93)
    x95 = x72 * x9
    x96 = x64 * x91 + x95
    x97 = x55 * (x56 * x93 + x68 * x96)
    x98 = x0 * x97 + x94
    x99 = x4 * x9
    x100 = x56 * x96 + x76 * x99
    x101 = 2.23606797749979 * x90
    x102 = x12 * x55
    x103 = x102 * (x51 + x53)
    x104 = x102 * (x57 + x59)
    x105 = x55 * (x103 * x56 + x104 * x62)
    x106 = x12 * x72
    x107 = x102 * x64 + x106
    x108 = x55 * (x104 * x56 + x107 * x68)
    x109 = x0 * x108 + x105
    x110 = x12 * x76
    x111 = x107 * x56 + x110 * x4
    x112 = x1**2 / x14**2
    x113 = x10 * x112
    x114 = x113 * x55 * (x51 + x53)
    x115 = x113 * x55 * (x57 + x59)
    x116 = x0 * x115 + x114
    x117 = x10 * x76
    x118 = x113 * x64 + x117
    x119 = x112 * x9
    x120 = x119 * x12
    x121 = x120 * x55 * (x51 + x53)
    x122 = x120 * x55 * (x57 + x59)
    x123 = x0 * x122 + x121
    x124 = x110 * x9
    x125 = x120 * x64 + x124
    x126 = 3.872983346207417 * x90
    x127 = x112 * x13
    x128 = x127 * x55 * (x51 + x53)
    x129 = x127 * x55 * (x57 + x59)
    x130 = x0 * x129 + x128
    x131 = x13 * x76
    x132 = x127 * x64 + x131
    x133 = x1**3 / x14**3
    x134 = x133 * x9**3
    x135 = x134 * x50
    x136 = x134 * x41
    x137 = x0 * x136 + x135
    x138 = x0 * x34
    x139 = x10 * x133
    x140 = x12 * x139
    x141 = x140 * x50
    x142 = x140 * x41
    x143 = x0 * x142 + x141
    x144 = x13 * x133
    x145 = x144 * x9
    x146 = x145 * x50
    x147 = x145 * x41
    x148 = x0 * x147 + x146
    x149 = x12**3 * x133
    x150 = x149 * x50
    x151 = x149 * x41
    x152 = x0 * x151 + x150
    x153 = -x8 - A[1]
    x154 = -2.0 * x153 * x18 * x2 * x20 * x23 * x28 * x29 + x36 * x9
    x155 = -x154
    x156 = x155 * x16
    x157 = -2.0 * x153 * x2 * x20 * x23 * x28 * x29 * x30 + x27 * x9
    x158 = -x6 * (x156 + x157)
    x159 = -x157
    x160 = x156 * x4 - x159 * x5
    x161 = -x160
    x162 = 2.0 * x153 * x2 * x20 * x23 * x28 * x29 * x35 - x45 * x9
    x163 = x16 * x162
    x164 = x155 * x5 - x163 * x4
    x165 = x16 * x164
    x166 = x158 + x161 * x5 - x165 * x4
    x167 = x166 * x4
    x168 = x161 * x6
    x169 = 2.0 * x168
    x170 = x167 + x169
    x171 = x159 * x6
    x172 = x161 * x4
    x173 = x171 + x172
    x174 = x170 * x56 + x173 * x68
    x175 = x56 * (x171 + x173)
    x176 = x55 * (x174 * x56 + x175 * x68)
    x177 = x176 + x21 * x74
    x178 = x112 * x7
    x179 = x55 * (x171 * x178 + x175 * x56)
    x180 = x21 * x55
    x181 = x179 + x180 * x77
    x182 = -x6 * (x154 + x163)
    x183 = 2.0 * x153 * x2 * x20 * x23 * x28 * x29 * x44 - x81 * x9
    x184 = (
        x166 * x5
        - x42 * (x160 + x165)
        - x82 * (x164 * x5 + x182 - x82 * (x162 * x5 - x183 * x82))
    )
    x185 = x184 * x4
    x186 = x166 * x6
    x187 = 3.0 * x186
    x188 = x55 * (x174 * x62 + x56 * (x170 * x62 + x56 * (x185 + x187)))
    x189 = x166 * x9
    x190 = x189 + x52
    x191 = x161 * x9
    x192 = x191 + x58
    x193 = x192 * x68
    x194 = x190 * x56 + x193
    x195 = x159 * x9
    x196 = x195 + x66
    x197 = x196 * x55
    x198 = x192 * x56 + x197 * x6
    x199 = x55 * (x194 * x56 + x198 * x68)
    x200 = x199 + x21 * x97
    x201 = x112 * x4
    x202 = x201 * x6
    x203 = x55 * (x196 * x202 + x198 * x56)
    x204 = x100 * x180 + x203
    x205 = x184 * x9
    x206 = x205 + x85
    x207 = x55 * (x194 * x62 + x56 * (x190 * x62 + x206 * x56))
    x208 = 0.3333333333333333 * x89
    x209 = x102 * x169
    x210 = x102 * x167 + x209
    x211 = x102 * x171
    x212 = x102 * x172 + x211
    x213 = x55 * (x210 * x56 + x212 * x68)
    x214 = x108 * x21 + x213
    x215 = x12 * x201
    x216 = x55 * (x171 * x215 + x212 * x56)
    x217 = x111 * x180 + x216
    x218 = x55 * (x102 * x56 * (x185 + x187) + x210 * x62)
    x219 = x91 * (x190 + x52)
    x220 = x91 * (x192 + x58)
    x221 = x220 * x68
    x222 = x55 * (x219 * x56 + x221)
    x223 = x115 * x21 + x222
    x224 = x197 * x9 + x95
    x225 = x55 * (x220 * x56 + x224 * x87)
    x226 = x118 * x180 + x225
    x227 = x91 * (x206 + x85)
    x228 = x55 * (x219 * x62 + x227 * x56)
    x229 = x102 * x52
    x230 = x102 * x189 + x229
    x231 = x102 * x58
    x232 = x102 * x191 + x231
    x233 = x232 * x68
    x234 = x55 * (x230 * x56 + x233)
    x235 = x122 * x21 + x234
    x236 = x102 * x195 + x106
    x237 = x55 * (x232 * x56 + x236 * x87)
    x238 = x125 * x180 + x237
    x239 = x102 * x85
    x240 = x102 * x205 + x239
    x241 = x55 * (x230 * x62 + x240 * x56)
    x242 = 1.732050807568877 * x208
    x243 = x127 * x169
    x244 = x55 * (x127 * x167 + x243)
    x245 = x129 * x21 + x244
    x246 = x127 * x171
    x247 = x55 * (x127 * x172 + x246)
    x248 = x132 * x180 + x247
    x249 = x127 * x55 * (x185 + x187)
    x250 = x55 * (x113 * x52 + x219 * x91)
    x251 = x136 * x21 + x250
    x252 = x55 * (x113 * x58 + x220 * x91)
    x253 = x21 * x34
    x254 = x134 * x253 + x252
    x255 = x55 * (x113 * x85 + x227 * x91)
    x256 = x55 * (x120 * x52 + x230 * x91)
    x257 = x142 * x21 + x256
    x258 = x55 * (x120 * x58 + x232 * x91)
    x259 = x140 * x253 + x258
    x260 = x55 * (x120 * x85 + x240 * x91)
    x261 = x127 * x52
    x262 = x55 * (x127 * x189 + x261)
    x263 = x147 * x21 + x262
    x264 = x127 * x58
    x265 = x55 * (x127 * x191 + x264)
    x266 = x145 * x253 + x265
    x267 = x127 * x85
    x268 = x55 * (x127 * x205 + x267)
    x269 = x149 * x166
    x270 = x151 * x21 + x269
    x271 = x149 * x161
    x272 = x149 * x253 + x271
    x273 = x149 * x184
    x274 = -x11 - A[2]
    x275 = x12 * x36 - 2.0 * x18 * x2 * x20 * x23 * x274 * x28 * x29
    x276 = -x275
    x277 = x16 * x276
    x278 = x12 * x27 - 2.0 * x2 * x20 * x23 * x274 * x28 * x29 * x30
    x279 = -x6 * (x277 + x278)
    x280 = -x278
    x281 = x277 * x4 - x280 * x5
    x282 = -x281
    x283 = -x12 * x45 + 2.0 * x2 * x20 * x23 * x274 * x28 * x29 * x35
    x284 = x16 * x283
    x285 = x276 * x5 - x284 * x4
    x286 = x16 * x285
    x287 = x279 + x282 * x5 - x286 * x4
    x288 = x287 * x4
    x289 = x282 * x6
    x290 = 2.0 * x289
    x291 = x288 + x290
    x292 = x280 * x6
    x293 = x282 * x4
    x294 = x292 + x293
    x295 = x291 * x56 + x294 * x68
    x296 = x56 * (x292 + x294)
    x297 = x55 * (x295 * x56 + x296 * x68)
    x298 = x22 * x74 + x297
    x299 = x55 * (x178 * x292 + x296 * x56)
    x300 = x22 * x55
    x301 = x299 + x300 * x77
    x302 = -x6 * (x275 + x284)
    x303 = -x12 * x81 + 2.0 * x2 * x20 * x23 * x274 * x28 * x29 * x44
    x304 = (
        x287 * x5
        - x42 * (x281 + x286)
        - x82 * (x285 * x5 + x302 - x82 * (x283 * x5 - x303 * x82))
    )
    x305 = x304 * x4
    x306 = x287 * x6
    x307 = 3.0 * x306
    x308 = x55 * (x295 * x62 + x56 * (x291 * x62 + x56 * (x305 + x307)))
    x309 = x91 * (x288 + x290)
    x310 = x292 * x91
    x311 = x293 * x91 + x310
    x312 = x55 * (x309 * x56 + x311 * x68)
    x313 = x22 * x97 + x312
    x314 = x119 * x4
    x315 = x55 * (x292 * x314 + x311 * x56)
    x316 = x100 * x300 + x315
    x317 = x55 * (x309 * x62 + x56 * x91 * (x305 + x307))
    x318 = x12 * x287 + x52
    x319 = x12 * x282 + x58
    x320 = x319 * x68
    x321 = x318 * x56 + x320
    x322 = x12 * x280 + x66
    x323 = x322 * x87
    x324 = x319 * x56 + x323
    x325 = x55 * (x321 * x56 + x324 * x68)
    x326 = x108 * x22 + x325
    x327 = x55 * (x202 * x322 + x324 * x56)
    x328 = x111 * x300 + x327
    x329 = x12 * x304 + x85
    x330 = x55 * (x321 * x62 + x56 * (x318 * x62 + x329 * x56))
    x331 = x113 * x55 * (x288 + x290)
    x332 = x115 * x22 + x331
    x333 = x113 * x292
    x334 = x55 * (x113 * x293 + x333)
    x335 = x118 * x300 + x334
    x336 = x113 * x55 * (x305 + x307)
    x337 = x119 * x42
    x338 = x55 * (x314 * x318 + x319 * x337)
    x339 = x122 * x22 + x338
    x340 = x119 * x6
    x341 = x322 * x340
    x342 = x55 * (x314 * x319 + x341)
    x343 = x125 * x300 + x342
    x344 = x55 * (x119 * x318 * x61 + x314 * x329)
    x345 = x102 * x318 + x229
    x346 = x102 * x319 + x231
    x347 = x346 * x68
    x348 = x55 * (x345 * x56 + x347)
    x349 = x129 * x22 + x348
    x350 = x102 * x322 + x106
    x351 = x350 * x87
    x352 = x55 * (x346 * x56 + x351)
    x353 = x132 * x300 + x352
    x354 = x102 * x329 + x239
    x355 = x55 * (x345 * x62 + x354 * x56)
    x356 = x134 * x287
    x357 = x136 * x22 + x356
    x358 = x134 * x282
    x359 = x22 * x34
    x360 = x134 * x359 + x358
    x361 = x134 * x304
    x362 = x139 * x318
    x363 = x142 * x22 + x362
    x364 = x139 * x319
    x365 = x140 * x359 + x364
    x366 = x139 * x329
    x367 = x119 * x345
    x368 = x147 * x22 + x367
    x369 = x119 * x346
    x370 = x145 * x359 + x369
    x371 = x119 * x354
    x372 = x55 * (x102 * x345 + x261)
    x373 = x151 * x22 + x372
    x374 = x55 * (x102 * x346 + x264)
    x375 = x149 * x359 + x374
    x376 = x55 * (x102 * x354 + x267)
    x377 = x156 * x9
    x378 = x153 * x159 + x32 - x377
    x379 = x378 * x6
    x380 = x153 * x155 - x163 * x9 + x43
    x381 = x16 * x380
    x382 = x378 * x5 - x381 * x4
    x383 = x382 * x4
    x384 = x379 + x383
    x385 = x56 * (x379 + x384)
    x386 = x55 * (x178 * x379 + x385 * x56)
    x387 = x179 * x21 + x386
    x388 = x181 * x21 + x387
    x389 = x6 * (x153 * x159 - x377 - x381 - x79)
    x390 = x16 * x9
    x391 = x153 * x162 - x183 * x390 + x80
    x392 = x382 * x5 + x389 - x82 * (x380 * x5 - x391 * x82)
    x393 = x392 * x4
    x394 = x382 * x6
    x395 = 2.0 * x394
    x396 = x176 * x21 + x55 * (x385 * x68 + x56 * (x384 * x68 + x56 * (x393 + x395)))
    x397 = x378 * x9
    x398 = 2.0 * x171
    x399 = x397 + x398
    x400 = x382 * x9
    x401 = x169 + x400
    x402 = x399 * x87 + x401 * x56
    x403 = x55 * (x202 * x399 + x402 * x56)
    x404 = x203 * x21 + x403
    x405 = x204 * x21 + x404
    x406 = x392 * x9
    x407 = 2.0 * x186
    x408 = x406 + x407
    x409 = x199 * x21 + x55 * (x402 * x68 + x56 * (x401 * x68 + x408 * x56))
    x410 = x102 * x379
    x411 = x102 * x383 + x410
    x412 = x55 * (x215 * x379 + x411 * x56)
    x413 = x21 * x216 + x412
    x414 = x21 * x217 + x413
    x415 = x21 * x213 + x55 * (x102 * x56 * (x393 + x395) + x411 * x68)
    x416 = x197 * x42 + x399 * x91
    x417 = x193 + x401 * x91
    x418 = x55 * (x416 * x87 + x417 * x56)
    x419 = x21 * x225 + x418
    x420 = x21 * x226 + x419
    x421 = x190 * x68 + x408 * x91
    x422 = x21 * x222 + x55 * (x417 * x68 + x421 * x56)
    x423 = x102 * (x397 + x398)
    x424 = x102 * x400 + x209
    x425 = x55 * (x423 * x87 + x424 * x56)
    x426 = x21 * x237 + x425
    x427 = x21 * x238 + x426
    x428 = x102 * (x406 + x407)
    x429 = x21 * x234 + x55 * (x424 * x68 + x428 * x56)
    x430 = x127 * x379
    x431 = x55 * (x127 * x383 + x430)
    x432 = x21 * x247 + x431
    x433 = x21 * x248 + x432
    x434 = x127 * x55 * (x393 + x395) + x21 * x244
    x435 = x55 * (x221 + x417 * x91)
    x436 = x21 * x252 + x435
    x437 = x21 * x254 + x436
    x438 = x21 * x250 + x55 * (x219 * x68 + x421 * x91)
    x439 = x55 * (x233 + x424 * x91)
    x440 = x21 * x258 + x439
    x441 = x21 * x259 + x440
    x442 = x21 * x256 + x55 * (x230 * x68 + x428 * x91)
    x443 = x55 * (x127 * x400 + x243)
    x444 = x21 * x265 + x443
    x445 = x21 * x266 + x444
    x446 = x127 * x55 * (x406 + x407) + x21 * x262
    x447 = x149 * x382
    x448 = x21 * x271 + x447
    x449 = x21 * x272 + x448
    x450 = x149 * x392 + x21 * x269
    x451 = -x153 * x280 + x277 * x9
    x452 = -x451
    x453 = x452 * x6
    x454 = x153 * x276 - x284 * x9
    x455 = x16 * x454
    x456 = -x4 * x455 + x452 * x5
    x457 = x4 * x456 + x453
    x458 = x56 * (x453 + x457)
    x459 = x55 * (x178 * x453 + x458 * x56)
    x460 = x179 * x22 + x459
    x461 = x21 * x301 + x460
    x462 = -x6 * (x451 + x455)
    x463 = x153 * x283 - x303 * x390
    x464 = x456 * x5 + x462 - x82 * (x454 * x5 - x463 * x82)
    x465 = x42 * x456
    x466 = x55 * (x458 * x68 + x56 * (x457 * x68 + x56 * (x4 * x464 + x465)))
    x467 = x176 * x22 + x466
    x468 = x292 + x452 * x9
    x469 = x289 + x456 * x9
    x470 = x468 * x87 + x469 * x56
    x471 = x55 * (x202 * x468 + x470 * x56)
    x472 = x203 * x22 + x471
    x473 = x21 * x316 + x472
    x474 = x306 + x464 * x9
    x475 = x469 * x68
    x476 = x55 * (x470 * x68 + x56 * (x474 * x56 + x475))
    x477 = x199 * x22 + x476
    x478 = x12 * x452 + x171
    x479 = x12 * x456 + x168
    x480 = x478 * x87 + x479 * x56
    x481 = x55 * (x202 * x478 + x480 * x56)
    x482 = x216 * x22 + x481
    x483 = x21 * x328 + x482
    x484 = x12 * x464 + x186
    x485 = x479 * x68
    x486 = x55 * (x480 * x68 + x56 * (x484 * x56 + x485))
    x487 = x213 * x22 + x486
    x488 = x310 + x468 * x91
    x489 = x91 * (x289 + x469)
    x490 = x55 * (x488 * x87 + x489 * x56)
    x491 = x22 * x225 + x490
    x492 = x21 * x335 + x491
    x493 = x91 * (x306 + x474)
    x494 = x489 * x68
    x495 = x55 * (x493 * x56 + x494)
    x496 = x22 * x222 + x495
    x497 = x323 + x478 * x91
    x498 = x319 * x87 + x479 * x91
    x499 = x55 * (x497 * x87 + x498 * x56)
    x500 = x22 * x237 + x499
    x501 = x21 * x343 + x500
    x502 = x318 * x87 + x484 * x91
    x503 = x498 * x68
    x504 = x55 * (x502 * x56 + x503)
    x505 = x22 * x234 + x504
    x506 = x102 * x478 + x211
    x507 = x102 * (x168 + x479)
    x508 = x55 * (x506 * x87 + x507 * x56)
    x509 = x22 * x247 + x508
    x510 = x21 * x353 + x509
    x511 = x102 * (x186 + x484)
    x512 = x507 * x68
    x513 = x55 * (x511 * x56 + x512)
    x514 = x22 * x244 + x513
    x515 = x55 * (x113 * x289 + x489 * x91)
    x516 = x22 * x252 + x515
    x517 = x21 * x360 + x516
    x518 = x55 * (x113 * x306 + x493 * x91)
    x519 = x22 * x250 + x518
    x520 = x55 * (x319 * x340 + x498 * x91)
    x521 = x22 * x258 + x520
    x522 = x21 * x365 + x521
    x523 = x55 * (x318 * x340 + x502 * x91)
    x524 = x22 * x256 + x523
    x525 = x55 * (x346 * x87 + x507 * x91)
    x526 = x22 * x265 + x525
    x527 = x21 * x370 + x526
    x528 = x55 * (x345 * x87 + x511 * x91)
    x529 = x22 * x262 + x528
    x530 = x55 * (x102 * x507 + x127 * x168)
    x531 = x22 * x271 + x530
    x532 = x21 * x375 + x531
    x533 = x55 * (x102 * x511 + x127 * x186)
    x534 = x22 * x269 + x533
    x535 = x12 * x277
    x536 = x274 * x280 + x32 - x535
    x537 = x536 * x6
    x538 = -x12 * x284 + x274 * x276 + x43
    x539 = x16 * x538
    x540 = -x4 * x539 + x5 * x536
    x541 = x4 * x540
    x542 = x537 + x541
    x543 = x56 * (x537 + x542)
    x544 = x55 * (x178 * x537 + x543 * x56)
    x545 = x22 * x299 + x544
    x546 = x22 * x301 + x545
    x547 = x6 * (x274 * x280 - x535 - x539 - x79)
    x548 = x12 * x16
    x549 = x274 * x283 - x303 * x548 + x80
    x550 = x5 * x540 + x547 - x82 * (x5 * x538 - x549 * x82)
    x551 = x4 * x550
    x552 = x540 * x6
    x553 = 2.0 * x552
    x554 = x22 * x297 + x55 * (x543 * x68 + x56 * (x542 * x68 + x56 * (x551 + x553)))
    x555 = x537 * x91
    x556 = x541 * x91 + x555
    x557 = x55 * (x314 * x537 + x556 * x56)
    x558 = x22 * x315 + x557
    x559 = x22 * x316 + x558
    x560 = x22 * x312 + x55 * (x556 * x68 + x56 * x91 * (x551 + x553))
    x561 = x12 * x536 + 2.0 * x292
    x562 = x561 * x87
    x563 = x12 * x540 + x290
    x564 = x56 * x563 + x562
    x565 = x55 * (x202 * x561 + x56 * x564)
    x566 = x22 * x327 + x565
    x567 = x22 * x328 + x566
    x568 = x12 * x550 + 2.0 * x306
    x569 = x22 * x325 + x55 * (x56 * (x56 * x568 + x563 * x68) + x564 * x68)
    x570 = x113 * x537
    x571 = x55 * (x113 * x541 + x570)
    x572 = x22 * x334 + x571
    x573 = x22 * x335 + x572
    x574 = x113 * x55 * (x551 + x553) + x22 * x331
    x575 = x340 * x561
    x576 = x55 * (x314 * x563 + x575)
    x577 = x22 * x342 + x576
    x578 = x22 * x343 + x577
    x579 = x22 * x338 + x55 * (x314 * x568 + x337 * x563)
    x580 = x102 * x561 + x322 * x68
    x581 = x580 * x87
    x582 = x102 * x563 + x320
    x583 = x55 * (x56 * x582 + x581)
    x584 = x22 * x352 + x583
    x585 = x22 * x353 + x584
    x586 = x102 * x568 + x318 * x68
    x587 = x22 * x348 + x55 * (x56 * x586 + x582 * x68)
    x588 = x134 * x540
    x589 = x22 * x358 + x588
    x590 = x22 * x360 + x589
    x591 = x134 * x550 + x22 * x356
    x592 = x139 * x563
    x593 = x22 * x364 + x592
    x594 = x22 * x365 + x593
    x595 = x139 * x568 + x22 * x362
    x596 = x119 * x582
    x597 = x22 * x369 + x596
    x598 = x22 * x370 + x597
    x599 = x119 * x586 + x22 * x367
    x600 = x55 * (x102 * x582 + x347)
    x601 = x22 * x374 + x600
    x602 = x22 * x375 + x601
    x603 = x22 * x372 + x55 * (x102 * x586 + x345 * x68)
    x604 = x153 * x378 + 2.0 * x158 - x381 * x9
    x605 = x6 * x604
    x606 = x153 * x380 + 2.0 * x182 - x390 * x391
    x607 = x5 * x604 - x606 * x82
    x608 = x4 * x607
    x609 = x21 * x386 + x21 * x387 + x55 * (x178 * x605 + x56**2 * (2.0 * x605 + x608))
    x610 = x604 * x9
    x611 = 3.0 * x379
    x612 = x610 + x611
    x613 = x612 * x87
    x614 = x607 * x9
    x615 = 3.0 * x394
    x616 = x614 + x615
    x617 = x21 * x403 + x21 * x404 + x55 * (x202 * x612 + x56 * (x56 * x616 + x613))
    x618 = x102 * x605
    x619 = x21 * x412 + x21 * x413 + x55 * (x215 * x605 + x56 * (x102 * x608 + x618))
    x620 = x399 * x62 + x612 * x91
    x621 = x620 * x87
    x622 = x401 * x62 + x616 * x91
    x623 = x21 * x418 + x21 * x419 + x55 * (x56 * x622 + x621)
    x624 = x102 * (x610 + x611)
    x625 = x624 * x87
    x626 = x102 * (x614 + x615)
    x627 = x21 * x425 + x21 * x426 + x55 * (x56 * x626 + x625)
    x628 = x127 * x605
    x629 = x21 * x431 + x21 * x432 + x55 * (x127 * x608 + x628)
    x630 = x21 * x435 + x21 * x436 + x55 * (x417 * x62 + x622 * x91)
    x631 = x21 * x439 + x21 * x440 + x55 * (x424 * x62 + x626 * x91)
    x632 = x127 * x55 * (x614 + x615) + x21 * x443 + x21 * x444
    x633 = x149 * x607 + x21 * x447 + x21 * x448
    x634 = x153 * x452 + x279 - x455 * x9
    x635 = x6 * x634
    x636 = x153 * x454 + x302 - x390 * x463
    x637 = x5 * x634 - x636 * x82
    x638 = x55 * (x178 * x635 + x56**2 * (x4 * x637 + 2.0 * x635))
    x639 = x21 * x460 + x22 * x386 + x638
    x640 = 2.0 * x453
    x641 = x634 * x9 + x640
    x642 = x465 + x637 * x9
    x643 = x55 * (x202 * x641 + x56 * (x56 * x642 + x641 * x87))
    x644 = x21 * x472 + x22 * x403 + x643
    x645 = x12 * x634 + x379
    x646 = x12 * x637 + x394
    x647 = x55 * (x202 * x645 + x56 * (x56 * x646 + x645 * x87))
    x648 = x21 * x482 + x22 * x412 + x647
    x649 = x468 * x68 + x641 * x91
    x650 = x475 + x642 * x91
    x651 = x55 * (x56 * x650 + x649 * x87)
    x652 = x21 * x491 + x22 * x418 + x651
    x653 = x478 * x68
    x654 = x645 * x91 + x653
    x655 = x485 + x646 * x91
    x656 = x55 * (x56 * x655 + x654 * x87)
    x657 = x21 * x500 + x22 * x425 + x656
    x658 = x102 * x645 + x410
    x659 = x102 * (x394 + x646)
    x660 = x55 * (x56 * x659 + x658 * x87)
    x661 = x21 * x509 + x22 * x431 + x660
    x662 = x55 * (x494 + x650 * x91)
    x663 = x21 * x516 + x22 * x435 + x662
    x664 = x55 * (x503 + x655 * x91)
    x665 = x21 * x521 + x22 * x439 + x664
    x666 = x55 * (x512 + x659 * x91)
    x667 = x21 * x526 + x22 * x443 + x666
    x668 = x55 * (x102 * x659 + x127 * x394)
    x669 = x21 * x531 + x22 * x447 + x668
    x670 = x153 * x536 - x539 * x9
    x671 = x6 * x670
    x672 = x153 * x538 - x390 * x549
    x673 = x5 * x670 - x672 * x82
    x674 = x22 * x459 + x55 * (x178 * x671 + x56**2 * (x4 * x673 + 2.0 * x671))
    x675 = x22 * x460 + x674
    x676 = x537 + x670 * x9
    x677 = x552 + x673 * x9
    x678 = x22 * x471 + x55 * (x202 * x676 + x56 * (x56 * x677 + x676 * x87))
    x679 = x22 * x472 + x678
    x680 = x12 * x670 + x640
    x681 = x12 * x673 + x465
    x682 = x22 * x481 + x55 * (x202 * x680 + x56 * (x56 * x681 + x680 * x87))
    x683 = x22 * x482 + x682
    x684 = x555 + x676 * x91
    x685 = x91 * (x552 + x677)
    x686 = x22 * x490 + x55 * (x56 * x685 + x684 * x87)
    x687 = x22 * x491 + x686
    x688 = x562 + x680 * x91
    x689 = x563 * x87 + x681 * x91
    x690 = x22 * x499 + x55 * (x56 * x689 + x688 * x87)
    x691 = x22 * x500 + x690
    x692 = x102 * x680 + x653
    x693 = x102 * x681 + x485
    x694 = x22 * x508 + x55 * (x56 * x693 + x692 * x87)
    x695 = x22 * x509 + x694
    x696 = x22 * x515 + x55 * (x113 * x552 + x685 * x91)
    x697 = x22 * x516 + x696
    x698 = x22 * x520 + x55 * (x340 * x563 + x689 * x91)
    x699 = x22 * x521 + x698
    x700 = x22 * x525 + x55 * (x582 * x87 + x693 * x91)
    x701 = x22 * x526 + x700
    x702 = x22 * x530 + x55 * (x102 * x693 + x512)
    x703 = x22 * x531 + x702
    x704 = -x12 * x539 + x274 * x536 + 2.0 * x279
    x705 = x6 * x704
    x706 = x274 * x538 + 2.0 * x302 - x548 * x549
    x707 = x5 * x704 - x706 * x82
    x708 = x4 * x707
    x709 = x22 * x544 + x22 * x545 + x55 * (x178 * x705 + x56**2 * (2.0 * x705 + x708))
    x710 = x705 * x91
    x711 = x22 * x557 + x22 * x558 + x55 * (x314 * x705 + x56 * (x708 * x91 + x710))
    x712 = x12 * x704 + 3.0 * x537
    x713 = x712 * x87
    x714 = x12 * x707 + 3.0 * x552
    x715 = x22 * x565 + x22 * x566 + x55 * (x202 * x712 + x56 * (x56 * x714 + x713))
    x716 = x113 * x705
    x717 = x22 * x571 + x22 * x572 + x55 * (x113 * x708 + x716)
    x718 = x340 * x712
    x719 = x22 * x576 + x22 * x577 + x55 * (x314 * x714 + x718)
    x720 = x102 * x712 + x561 * x62
    x721 = x720 * x87
    x722 = x102 * x714 + x563 * x62
    x723 = x22 * x583 + x22 * x584 + x55 * (x56 * x722 + x721)
    x724 = x134 * x707 + x22 * x588 + x22 * x589
    x725 = x139 * x714 + x22 * x592 + x22 * x593
    x726 = x119 * x722 + x22 * x596 + x22 * x597
    x727 = x22 * x600 + x22 * x601 + x55 * (x102 * x722 + x582 * x62)
    x728 = x0 * x179 + x176
    x729 = x133 * x4**3
    x730 = x0 * x159
    x731 = x0 * x203 + x199
    x732 = x133 * x7
    x733 = x196 * x732
    x734 = x0 * x216 + x213
    x735 = x12 * x732
    x736 = x0 * x225 + x222
    x737 = x0 * x201
    x738 = x0 * x237 + x234
    x739 = x0 * x247 + x244
    x740 = x144 * x4
    x741 = x0 * x252 + x250
    x742 = x117 + x224 * x91
    x743 = x0 * x258 + x256
    x744 = x124 + x236 * x91
    x745 = x0 * x265 + x262
    x746 = x127 * x195 + x131
    x747 = x0 * x271 + x269
    x748 = x378 * x729
    x749 = x159 * x21
    x750 = x729 * x749 + x748
    x751 = x399 * x732
    x752 = x21 * x733 + x751
    x753 = x378 * x735
    x754 = x735 * x749 + x753
    x755 = x201 * x416
    x756 = x201 * x21
    x757 = x224 * x756 + x755
    x758 = x201 * x423
    x759 = x236 * x756 + x758
    x760 = x378 * x740
    x761 = x740 * x749 + x760
    x762 = x55 * (x224 * x68 + x416 * x91)
    x763 = x180 * x742 + x762
    x764 = x55 * (x236 * x68 + x423 * x91)
    x765 = x180 * x744 + x764
    x766 = x127 * x55 * (x397 + x398)
    x767 = x180 * x746 + x766
    x768 = x149 * x378
    x769 = x149 * x749 + x768
    x770 = x452 * x729
    x771 = x159 * x22
    x772 = x729 * x771 + x770
    x773 = x468 * x732
    x774 = x22 * x733 + x773
    x775 = x478 * x732
    x776 = x735 * x771 + x775
    x777 = x201 * x488
    x778 = x201 * x22
    x779 = x224 * x778 + x777
    x780 = x201 * x497
    x781 = x236 * x778 + x780
    x782 = x201 * x506
    x783 = x740 * x771 + x782
    x784 = x55 * (x333 + x488 * x91)
    x785 = x300 * x742 + x784
    x786 = x55 * (x341 + x497 * x91)
    x787 = x300 * x744 + x786
    x788 = x55 * (x351 + x506 * x91)
    x789 = x300 * x746 + x788
    x790 = x55 * (x102 * x506 + x246)
    x791 = x149 * x771 + x790
    x792 = x604 * x729
    x793 = x21 * x748 + x792
    x794 = x21 * x750 + x793
    x795 = x612 * x732
    x796 = x21 * x751 + x795
    x797 = x21 * x752 + x796
    x798 = x604 * x735
    x799 = x21 * x753 + x798
    x800 = x21 * x754 + x799
    x801 = x201 * x620
    x802 = x21 * x755 + x801
    x803 = x21 * x757 + x802
    x804 = x201 * x624
    x805 = x21 * x758 + x804
    x806 = x21 * x759 + x805
    x807 = x604 * x740
    x808 = x21 * x760 + x807
    x809 = x21 * x761 + x808
    x810 = x55 * (x416 * x62 + x620 * x91)
    x811 = x21 * x762 + x810
    x812 = x21 * x763 + x811
    x813 = x55 * (x423 * x62 + x624 * x91)
    x814 = x21 * x764 + x813
    x815 = x21 * x765 + x814
    x816 = x127 * x55 * (x610 + x611)
    x817 = x21 * x766 + x816
    x818 = x21 * x767 + x817
    x819 = x149 * x604
    x820 = x21 * x768 + x819
    x821 = x21 * x769 + x820
    x822 = x634 * x729
    x823 = x22 * x748 + x822
    x824 = x21 * x772 + x823
    x825 = x641 * x732
    x826 = x22 * x751 + x825
    x827 = x21 * x774 + x826
    x828 = x645 * x732
    x829 = x22 * x753 + x828
    x830 = x21 * x776 + x829
    x831 = x201 * x649
    x832 = x22 * x755 + x831
    x833 = x21 * x779 + x832
    x834 = x201 * x654
    x835 = x22 * x758 + x834
    x836 = x21 * x781 + x835
    x837 = x201 * x658
    x838 = x22 * x760 + x837
    x839 = x21 * x783 + x838
    x840 = x55 * (x488 * x68 + x649 * x91)
    x841 = x22 * x762 + x840
    x842 = x21 * x785 + x841
    x843 = x55 * (x497 * x68 + x654 * x91)
    x844 = x22 * x764 + x843
    x845 = x21 * x787 + x844
    x846 = x506 * x68
    x847 = x55 * (x658 * x91 + x846)
    x848 = x22 * x766 + x847
    x849 = x21 * x789 + x848
    x850 = x55 * (x102 * x658 + x430)
    x851 = x22 * x768 + x850
    x852 = x21 * x791 + x851
    x853 = x670 * x729
    x854 = x22 * x770 + x853
    x855 = x22 * x772 + x854
    x856 = x676 * x732
    x857 = x22 * x773 + x856
    x858 = x22 * x774 + x857
    x859 = x680 * x732
    x860 = x22 * x775 + x859
    x861 = x22 * x776 + x860
    x862 = x201 * x684
    x863 = x22 * x777 + x862
    x864 = x22 * x779 + x863
    x865 = x201 * x688
    x866 = x22 * x780 + x865
    x867 = x22 * x781 + x866
    x868 = x201 * x692
    x869 = x22 * x782 + x868
    x870 = x22 * x783 + x869
    x871 = x55 * (x570 + x684 * x91)
    x872 = x22 * x784 + x871
    x873 = x22 * x785 + x872
    x874 = x55 * (x575 + x688 * x91)
    x875 = x22 * x786 + x874
    x876 = x22 * x787 + x875
    x877 = x55 * (x581 + x692 * x91)
    x878 = x22 * x788 + x877
    x879 = x22 * x789 + x878
    x880 = x55 * (x102 * x692 + x846)
    x881 = x22 * x790 + x880
    x882 = x22 * x791 + x881
    x883 = x153 * x604 + 3.0 * x389 - x390 * x606
    x884 = x883 * x9
    x885 = 4.0 * x605
    x886 = x884 + x885
    x887 = 4.0 * x613 + x886 * x91
    x888 = x102 * (x884 + x885)
    x889 = x153 * x634 - x390 * x636 + 2.0 * x462
    x890 = x729 * x889
    x891 = 3.0 * x635 + x889 * x9
    x892 = x732 * x891
    x893 = x12 * x889 + x605
    x894 = x732 * x893
    x895 = x62 * x641 + x891 * x91
    x896 = x201 * x895
    x897 = x62 * x645 + x893 * x91
    x898 = x201 * x897
    x899 = x102 * x893 + x618
    x900 = x201 * x899
    x901 = x55 * (x62 * x649 + x895 * x91)
    x902 = x55 * (x62 * x654 + x897 * x91)
    x903 = x55 * (x62 * x658 + x899 * x91)
    x904 = x55 * (x102 * x899 + x628)
    x905 = x153 * x670 - x390 * x672 + x547
    x906 = x22 * x822 + x729 * x905
    x907 = 2.0 * x671 + x9 * x905
    x908 = x22 * x825 + x732 * x907
    x909 = x12 * x905 + 2.0 * x635
    x910 = x22 * x828 + x732 * x909
    x911 = x676 * x68 + x907 * x91
    x912 = x201 * x911 + x22 * x831
    x913 = x68 * x680 + x909 * x91
    x914 = x201 * x913 + x22 * x834
    x915 = x102 * x909 + x645 * x68
    x916 = x201 * x915 + x22 * x837
    x917 = x22 * x840 + x55 * (x68 * x684 + x91 * x911)
    x918 = x22 * x843 + x55 * (x68 * x688 + x91 * x913)
    x919 = x22 * x847 + x55 * (x68 * x692 + x91 * x915)
    x920 = x22 * x850 + x55 * (x102 * x915 + x658 * x68)
    x921 = x153 * x704 - x390 * x706
    x922 = x22 * x853 + x22 * x854 + x729 * x921
    x923 = x705 + x9 * x921
    x924 = x22 * x856 + x22 * x857 + x732 * x923
    x925 = x12 * x921 + 3.0 * x671
    x926 = x22 * x859 + x22 * x860 + x732 * x925
    x927 = x710 + x91 * x923
    x928 = x201 * x927 + x22 * x862 + x22 * x863
    x929 = x713 + x91 * x925
    x930 = x201 * x929 + x22 * x865 + x22 * x866
    x931 = x102 * x925 + x62 * x680
    x932 = x201 * x931 + x22 * x868 + x22 * x869
    x933 = x22 * x871 + x22 * x872 + x55 * (x716 + x91 * x927)
    x934 = x22 * x874 + x22 * x875 + x55 * (x718 + x91 * x929)
    x935 = x22 * x877 + x22 * x878 + x55 * (x721 + x91 * x931)
    x936 = x22 * x880 + x22 * x881 + x55 * (x102 * x931 + x62 * x692)
    x937 = x0 * x299 + x297
    x938 = x0 * x280
    x939 = x0 * x315 + x312
    x940 = x732 * x9
    x941 = x0 * x327 + x325
    x942 = x0 * x322
    x943 = x0 * x334 + x331
    x944 = x139 * x4
    x945 = x0 * x342 + x338
    x946 = x133 * x99
    x947 = x0 * x352 + x348
    x948 = x0 * x358 + x356
    x949 = x0 * x364 + x362
    x950 = x0 * x369 + x367
    x951 = x119 * x350
    x952 = x0 * x374 + x372
    x953 = x102 * x350 + x131
    x954 = x21 * x299 + x459
    x955 = x21 * x280
    x956 = x729 * x955 + x770
    x957 = x21 * x315 + x471
    x958 = x773 + x940 * x955
    x959 = x21 * x327 + x481
    x960 = x21 * x322
    x961 = x732 * x960 + x775
    x962 = x21 * x334 + x490
    x963 = x777 + x944 * x955
    x964 = x21 * x342 + x499
    x965 = x780 + x946 * x960
    x966 = x21 * x352 + x508
    x967 = x350 * x756 + x782
    x968 = x21 * x358 + x515
    x969 = x134 * x955 + x784
    x970 = x21 * x364 + x520
    x971 = x139 * x960 + x786
    x972 = x21 * x369 + x525
    x973 = x21 * x951 + x788
    x974 = x21 * x374 + x530
    x975 = x180 * x953 + x790
    x976 = x536 * x729
    x977 = x22 * x280
    x978 = x729 * x977 + x976
    x979 = x536 * x940
    x980 = x940 * x977 + x979
    x981 = x561 * x732
    x982 = x22 * x322
    x983 = x732 * x982 + x981
    x984 = x536 * x944
    x985 = x944 * x977 + x984
    x986 = x561 * x946
    x987 = x946 * x982 + x986
    x988 = x201 * x580
    x989 = x350 * x778 + x988
    x990 = x134 * x536
    x991 = x134 * x977 + x990
    x992 = x139 * x561
    x993 = x139 * x982 + x992
    x994 = x119 * x580
    x995 = x22 * x951 + x994
    x996 = x55 * (x102 * x580 + x350 * x68)
    x997 = x300 * x953 + x996
    x998 = x21 * x770 + x822
    x999 = x21 * x956 + x998
    x1000 = x21 * x773 + x825
    x1001 = x1000 + x21 * x958
    x1002 = x21 * x775 + x828
    x1003 = x1002 + x21 * x961
    x1004 = x21 * x777 + x831
    x1005 = x1004 + x21 * x963
    x1006 = x21 * x780 + x834
    x1007 = x1006 + x21 * x965
    x1008 = x21 * x782 + x837
    x1009 = x1008 + x21 * x967
    x1010 = x21 * x784 + x840
    x1011 = x1010 + x21 * x969
    x1012 = x21 * x786 + x843
    x1013 = x1012 + x21 * x971
    x1014 = x21 * x788 + x847
    x1015 = x1014 + x21 * x973
    x1016 = x21 * x790 + x850
    x1017 = x1016 + x21 * x975
    x1018 = x21 * x978 + x854
    x1019 = x21 * x980 + x857
    x1020 = x21 * x983 + x860
    x1021 = x21 * x985 + x863
    x1022 = x21 * x987 + x866
    x1023 = x21 * x989 + x869
    x1024 = x21 * x991 + x872
    x1025 = x21 * x993 + x875
    x1026 = x21 * x995 + x878
    x1027 = x21 * x997 + x881
    x1028 = x704 * x729
    x1029 = x1028 + x22 * x976
    x1030 = x1029 + x22 * x978
    x1031 = x704 * x940
    x1032 = x1031 + x22 * x979
    x1033 = x1032 + x22 * x980
    x1034 = x712 * x732
    x1035 = x1034 + x22 * x981
    x1036 = x1035 + x22 * x983
    x1037 = x704 * x944
    x1038 = x1037 + x22 * x984
    x1039 = x1038 + x22 * x985
    x1040 = x712 * x946
    x1041 = x1040 + x22 * x986
    x1042 = x1041 + x22 * x987
    x1043 = x201 * x720
    x1044 = x1043 + x22 * x988
    x1045 = x1044 + x22 * x989
    x1046 = x134 * x704
    x1047 = x1046 + x22 * x990
    x1048 = x1047 + x22 * x991
    x1049 = x139 * x712
    x1050 = x1049 + x22 * x992
    x1051 = x1050 + x22 * x993
    x1052 = x119 * x720
    x1053 = x1052 + x22 * x994
    x1054 = x1053 + x22 * x995
    x1055 = x55 * (x102 * x720 + x580 * x62)
    x1056 = x1055 + x22 * x996
    x1057 = x1056 + x22 * x997
    x1058 = x274 * x704 + 3.0 * x547 - x548 * x706
    x1059 = x1058 * x12 + 4.0 * x705
    x1060 = x102 * x1059 + 4.0 * x713

    # 300 item(s)
    result[0, 0, 0] = numpy.sum(
        x90
        * (
            x0 * x70
            + x0 * x75
            + x0 * (x0 * (x74 + x77 * x78) + x75)
            + x55 * (x56 * (x54 * x88 + x56 * (x84 + x86)) + x63 * x88)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x101
        * (
            x0 * x94
            + x0 * x98
            + x0 * (x0 * (x100 * x78 + x97) + x98)
            + x55 * (x56 * x91 * (x84 + x86) + x88 * x92)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x101
        * (
            x0 * x105
            + x0 * x109
            + x0 * (x0 * (x108 + x111 * x78) + x109)
            + x55 * (x102 * x56 * (x84 + x86) + x103 * x88)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x101
        * (
            x0 * x114
            + x0 * x116
            + x0 * (x0 * (x115 + x118 * x78) + x116)
            + x113 * x55 * (x84 + x86)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x126
        * (
            x0 * x121
            + x0 * x123
            + x0 * (x0 * (x122 + x125 * x78) + x123)
            + x120 * x55 * (x84 + x86)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x101
        * (
            x0 * x128
            + x0 * x130
            + x0 * (x0 * (x129 + x132 * x78) + x130)
            + x127 * x55 * (x84 + x86)
        )
    )
    result[0, 0, 6] = numpy.sum(
        x90
        * (x0 * x135 + x0 * x137 + x0 * (x0 * (x134 * x138 + x136) + x137) + x134 * x83)
    )
    result[0, 0, 7] = numpy.sum(
        x101
        * (x0 * x141 + x0 * x143 + x0 * (x0 * (x138 * x140 + x142) + x143) + x140 * x83)
    )
    result[0, 0, 8] = numpy.sum(
        x101
        * (x0 * x146 + x0 * x148 + x0 * (x0 * (x138 * x145 + x147) + x148) + x145 * x83)
    )
    result[0, 0, 9] = numpy.sum(
        x90
        * (x0 * x150 + x0 * x152 + x0 * (x0 * (x138 * x149 + x151) + x152) + x149 * x83)
    )
    result[0, 1, 0] = numpy.sum(
        x101 * (x0 * x177 + x0 * (x0 * x181 + x177) + x188 + x21 * x70)
    )
    result[0, 1, 1] = numpy.sum(
        x208 * (x0 * x200 + x0 * (x0 * x204 + x200) + x207 + x21 * x94)
    )
    result[0, 1, 2] = numpy.sum(
        x208 * (x0 * x214 + x0 * (x0 * x217 + x214) + x105 * x21 + x218)
    )
    result[0, 1, 3] = numpy.sum(
        x208 * (x0 * x223 + x0 * (x0 * x226 + x223) + x114 * x21 + x228)
    )
    result[0, 1, 4] = numpy.sum(
        x242 * (x0 * x235 + x0 * (x0 * x238 + x235) + x121 * x21 + x241)
    )
    result[0, 1, 5] = numpy.sum(
        x208 * (x0 * x245 + x0 * (x0 * x248 + x245) + x128 * x21 + x249)
    )
    result[0, 1, 6] = numpy.sum(
        x101 * (x0 * x251 + x0 * (x0 * x254 + x251) + x135 * x21 + x255)
    )
    result[0, 1, 7] = numpy.sum(
        x208 * (x0 * x257 + x0 * (x0 * x259 + x257) + x141 * x21 + x260)
    )
    result[0, 1, 8] = numpy.sum(
        x208 * (x0 * x263 + x0 * (x0 * x266 + x263) + x146 * x21 + x268)
    )
    result[0, 1, 9] = numpy.sum(
        x101 * (x0 * x270 + x0 * (x0 * x272 + x270) + x150 * x21 + x273)
    )
    result[0, 2, 0] = numpy.sum(
        x101 * (x0 * x298 + x0 * (x0 * x301 + x298) + x22 * x70 + x308)
    )
    result[0, 2, 1] = numpy.sum(
        x208 * (x0 * x313 + x0 * (x0 * x316 + x313) + x22 * x94 + x317)
    )
    result[0, 2, 2] = numpy.sum(
        x208 * (x0 * x326 + x0 * (x0 * x328 + x326) + x105 * x22 + x330)
    )
    result[0, 2, 3] = numpy.sum(
        x208 * (x0 * x332 + x0 * (x0 * x335 + x332) + x114 * x22 + x336)
    )
    result[0, 2, 4] = numpy.sum(
        x242 * (x0 * x339 + x0 * (x0 * x343 + x339) + x121 * x22 + x344)
    )
    result[0, 2, 5] = numpy.sum(
        x208 * (x0 * x349 + x0 * (x0 * x353 + x349) + x128 * x22 + x355)
    )
    result[0, 2, 6] = numpy.sum(
        x101 * (x0 * x357 + x0 * (x0 * x360 + x357) + x135 * x22 + x361)
    )
    result[0, 2, 7] = numpy.sum(
        x208 * (x0 * x363 + x0 * (x0 * x365 + x363) + x141 * x22 + x366)
    )
    result[0, 2, 8] = numpy.sum(
        x208 * (x0 * x368 + x0 * (x0 * x370 + x368) + x146 * x22 + x371)
    )
    result[0, 2, 9] = numpy.sum(
        x101 * (x0 * x373 + x0 * (x0 * x375 + x373) + x150 * x22 + x376)
    )
    result[0, 3, 0] = numpy.sum(x101 * (x0 * x388 + x177 * x21 + x396))
    result[0, 3, 1] = numpy.sum(x208 * (x0 * x405 + x200 * x21 + x409))
    result[0, 3, 2] = numpy.sum(x208 * (x0 * x414 + x21 * x214 + x415))
    result[0, 3, 3] = numpy.sum(x208 * (x0 * x420 + x21 * x223 + x422))
    result[0, 3, 4] = numpy.sum(x242 * (x0 * x427 + x21 * x235 + x429))
    result[0, 3, 5] = numpy.sum(x208 * (x0 * x433 + x21 * x245 + x434))
    result[0, 3, 6] = numpy.sum(x101 * (x0 * x437 + x21 * x251 + x438))
    result[0, 3, 7] = numpy.sum(x208 * (x0 * x441 + x21 * x257 + x442))
    result[0, 3, 8] = numpy.sum(x208 * (x0 * x445 + x21 * x263 + x446))
    result[0, 3, 9] = numpy.sum(x101 * (x0 * x449 + x21 * x270 + x450))
    result[0, 4, 0] = numpy.sum(x126 * (x0 * x461 + x21 * x298 + x467))
    result[0, 4, 1] = numpy.sum(x242 * (x0 * x473 + x21 * x313 + x477))
    result[0, 4, 2] = numpy.sum(x242 * (x0 * x483 + x21 * x326 + x487))
    result[0, 4, 3] = numpy.sum(x242 * (x0 * x492 + x21 * x332 + x496))
    result[0, 4, 4] = numpy.sum(x89 * (x0 * x501 + x21 * x339 + x505))
    result[0, 4, 5] = numpy.sum(x242 * (x0 * x510 + x21 * x349 + x514))
    result[0, 4, 6] = numpy.sum(x126 * (x0 * x517 + x21 * x357 + x519))
    result[0, 4, 7] = numpy.sum(x242 * (x0 * x522 + x21 * x363 + x524))
    result[0, 4, 8] = numpy.sum(x242 * (x0 * x527 + x21 * x368 + x529))
    result[0, 4, 9] = numpy.sum(x126 * (x0 * x532 + x21 * x373 + x534))
    result[0, 5, 0] = numpy.sum(x101 * (x0 * x546 + x22 * x298 + x554))
    result[0, 5, 1] = numpy.sum(x208 * (x0 * x559 + x22 * x313 + x560))
    result[0, 5, 2] = numpy.sum(x208 * (x0 * x567 + x22 * x326 + x569))
    result[0, 5, 3] = numpy.sum(x208 * (x0 * x573 + x22 * x332 + x574))
    result[0, 5, 4] = numpy.sum(x242 * (x0 * x578 + x22 * x339 + x579))
    result[0, 5, 5] = numpy.sum(x208 * (x0 * x585 + x22 * x349 + x587))
    result[0, 5, 6] = numpy.sum(x101 * (x0 * x590 + x22 * x357 + x591))
    result[0, 5, 7] = numpy.sum(x208 * (x0 * x594 + x22 * x363 + x595))
    result[0, 5, 8] = numpy.sum(x208 * (x0 * x598 + x22 * x368 + x599))
    result[0, 5, 9] = numpy.sum(x101 * (x0 * x602 + x22 * x373 + x603))
    result[0, 6, 0] = numpy.sum(x90 * (x21 * x388 + x609))
    result[0, 6, 1] = numpy.sum(x101 * (x21 * x405 + x617))
    result[0, 6, 2] = numpy.sum(x101 * (x21 * x414 + x619))
    result[0, 6, 3] = numpy.sum(x101 * (x21 * x420 + x623))
    result[0, 6, 4] = numpy.sum(x126 * (x21 * x427 + x627))
    result[0, 6, 5] = numpy.sum(x101 * (x21 * x433 + x629))
    result[0, 6, 6] = numpy.sum(x90 * (x21 * x437 + x630))
    result[0, 6, 7] = numpy.sum(x101 * (x21 * x441 + x631))
    result[0, 6, 8] = numpy.sum(x101 * (x21 * x445 + x632))
    result[0, 6, 9] = numpy.sum(x90 * (x21 * x449 + x633))
    result[0, 7, 0] = numpy.sum(x101 * (x21 * x461 + x639))
    result[0, 7, 1] = numpy.sum(x208 * (x21 * x473 + x644))
    result[0, 7, 2] = numpy.sum(x208 * (x21 * x483 + x648))
    result[0, 7, 3] = numpy.sum(x208 * (x21 * x492 + x652))
    result[0, 7, 4] = numpy.sum(x242 * (x21 * x501 + x657))
    result[0, 7, 5] = numpy.sum(x208 * (x21 * x510 + x661))
    result[0, 7, 6] = numpy.sum(x101 * (x21 * x517 + x663))
    result[0, 7, 7] = numpy.sum(x208 * (x21 * x522 + x665))
    result[0, 7, 8] = numpy.sum(x208 * (x21 * x527 + x667))
    result[0, 7, 9] = numpy.sum(x101 * (x21 * x532 + x669))
    result[0, 8, 0] = numpy.sum(x101 * (x21 * x546 + x675))
    result[0, 8, 1] = numpy.sum(x208 * (x21 * x559 + x679))
    result[0, 8, 2] = numpy.sum(x208 * (x21 * x567 + x683))
    result[0, 8, 3] = numpy.sum(x208 * (x21 * x573 + x687))
    result[0, 8, 4] = numpy.sum(x242 * (x21 * x578 + x691))
    result[0, 8, 5] = numpy.sum(x208 * (x21 * x585 + x695))
    result[0, 8, 6] = numpy.sum(x101 * (x21 * x590 + x697))
    result[0, 8, 7] = numpy.sum(x208 * (x21 * x594 + x699))
    result[0, 8, 8] = numpy.sum(x208 * (x21 * x598 + x701))
    result[0, 8, 9] = numpy.sum(x101 * (x21 * x602 + x703))
    result[0, 9, 0] = numpy.sum(x90 * (x22 * x546 + x709))
    result[0, 9, 1] = numpy.sum(x101 * (x22 * x559 + x711))
    result[0, 9, 2] = numpy.sum(x101 * (x22 * x567 + x715))
    result[0, 9, 3] = numpy.sum(x101 * (x22 * x573 + x717))
    result[0, 9, 4] = numpy.sum(x126 * (x22 * x578 + x719))
    result[0, 9, 5] = numpy.sum(x101 * (x22 * x585 + x723))
    result[0, 9, 6] = numpy.sum(x90 * (x22 * x590 + x724))
    result[0, 9, 7] = numpy.sum(x101 * (x22 * x594 + x725))
    result[0, 9, 8] = numpy.sum(x101 * (x22 * x598 + x726))
    result[0, 9, 9] = numpy.sum(x90 * (x22 * x602 + x727))
    result[1, 0, 0] = numpy.sum(
        x90 * (x0 * x176 + x0 * x728 + x0 * (x0 * (x179 + x729 * x730) + x728) + x188)
    )
    result[1, 0, 1] = numpy.sum(
        x101 * (x0 * x199 + x0 * x731 + x0 * (x0 * (x0 * x733 + x203) + x731) + x207)
    )
    result[1, 0, 2] = numpy.sum(
        x101 * (x0 * x213 + x0 * x734 + x0 * (x0 * (x216 + x730 * x735) + x734) + x218)
    )
    result[1, 0, 3] = numpy.sum(
        x101 * (x0 * x222 + x0 * x736 + x0 * (x0 * (x224 * x737 + x225) + x736) + x228)
    )
    result[1, 0, 4] = numpy.sum(
        x126 * (x0 * x234 + x0 * x738 + x0 * (x0 * (x236 * x737 + x237) + x738) + x241)
    )
    result[1, 0, 5] = numpy.sum(
        x101 * (x0 * x244 + x0 * x739 + x0 * (x0 * (x247 + x730 * x740) + x739) + x249)
    )
    result[1, 0, 6] = numpy.sum(
        x90 * (x0 * x250 + x0 * x741 + x0 * (x0 * (x252 + x742 * x78) + x741) + x255)
    )
    result[1, 0, 7] = numpy.sum(
        x101 * (x0 * x256 + x0 * x743 + x0 * (x0 * (x258 + x744 * x78) + x743) + x260)
    )
    result[1, 0, 8] = numpy.sum(
        x101 * (x0 * x262 + x0 * x745 + x0 * (x0 * (x265 + x746 * x78) + x745) + x268)
    )
    result[1, 0, 9] = numpy.sum(
        x90 * (x0 * x269 + x0 * x747 + x0 * (x0 * (x149 * x730 + x271) + x747) + x273)
    )
    result[1, 1, 0] = numpy.sum(x101 * (x0 * x387 + x0 * (x0 * x750 + x387) + x396))
    result[1, 1, 1] = numpy.sum(x208 * (x0 * x404 + x0 * (x0 * x752 + x404) + x409))
    result[1, 1, 2] = numpy.sum(x208 * (x0 * x413 + x0 * (x0 * x754 + x413) + x415))
    result[1, 1, 3] = numpy.sum(x208 * (x0 * x419 + x0 * (x0 * x757 + x419) + x422))
    result[1, 1, 4] = numpy.sum(x242 * (x0 * x426 + x0 * (x0 * x759 + x426) + x429))
    result[1, 1, 5] = numpy.sum(x208 * (x0 * x432 + x0 * (x0 * x761 + x432) + x434))
    result[1, 1, 6] = numpy.sum(x101 * (x0 * x436 + x0 * (x0 * x763 + x436) + x438))
    result[1, 1, 7] = numpy.sum(x208 * (x0 * x440 + x0 * (x0 * x765 + x440) + x442))
    result[1, 1, 8] = numpy.sum(x208 * (x0 * x444 + x0 * (x0 * x767 + x444) + x446))
    result[1, 1, 9] = numpy.sum(x101 * (x0 * x448 + x0 * (x0 * x769 + x448) + x450))
    result[1, 2, 0] = numpy.sum(x101 * (x0 * x460 + x0 * (x0 * x772 + x460) + x467))
    result[1, 2, 1] = numpy.sum(x208 * (x0 * x472 + x0 * (x0 * x774 + x472) + x477))
    result[1, 2, 2] = numpy.sum(x208 * (x0 * x482 + x0 * (x0 * x776 + x482) + x487))
    result[1, 2, 3] = numpy.sum(x208 * (x0 * x491 + x0 * (x0 * x779 + x491) + x496))
    result[1, 2, 4] = numpy.sum(x242 * (x0 * x500 + x0 * (x0 * x781 + x500) + x505))
    result[1, 2, 5] = numpy.sum(x208 * (x0 * x509 + x0 * (x0 * x783 + x509) + x514))
    result[1, 2, 6] = numpy.sum(x101 * (x0 * x516 + x0 * (x0 * x785 + x516) + x519))
    result[1, 2, 7] = numpy.sum(x208 * (x0 * x521 + x0 * (x0 * x787 + x521) + x524))
    result[1, 2, 8] = numpy.sum(x208 * (x0 * x526 + x0 * (x0 * x789 + x526) + x529))
    result[1, 2, 9] = numpy.sum(x101 * (x0 * x531 + x0 * (x0 * x791 + x531) + x534))
    result[1, 3, 0] = numpy.sum(x101 * (x0 * x794 + x609))
    result[1, 3, 1] = numpy.sum(x208 * (x0 * x797 + x617))
    result[1, 3, 2] = numpy.sum(x208 * (x0 * x800 + x619))
    result[1, 3, 3] = numpy.sum(x208 * (x0 * x803 + x623))
    result[1, 3, 4] = numpy.sum(x242 * (x0 * x806 + x627))
    result[1, 3, 5] = numpy.sum(x208 * (x0 * x809 + x629))
    result[1, 3, 6] = numpy.sum(x101 * (x0 * x812 + x630))
    result[1, 3, 7] = numpy.sum(x208 * (x0 * x815 + x631))
    result[1, 3, 8] = numpy.sum(x208 * (x0 * x818 + x632))
    result[1, 3, 9] = numpy.sum(x101 * (x0 * x821 + x633))
    result[1, 4, 0] = numpy.sum(x126 * (x0 * x824 + x639))
    result[1, 4, 1] = numpy.sum(x242 * (x0 * x827 + x644))
    result[1, 4, 2] = numpy.sum(x242 * (x0 * x830 + x648))
    result[1, 4, 3] = numpy.sum(x242 * (x0 * x833 + x652))
    result[1, 4, 4] = numpy.sum(x89 * (x0 * x836 + x657))
    result[1, 4, 5] = numpy.sum(x242 * (x0 * x839 + x661))
    result[1, 4, 6] = numpy.sum(x126 * (x0 * x842 + x663))
    result[1, 4, 7] = numpy.sum(x242 * (x0 * x845 + x665))
    result[1, 4, 8] = numpy.sum(x242 * (x0 * x849 + x667))
    result[1, 4, 9] = numpy.sum(x126 * (x0 * x852 + x669))
    result[1, 5, 0] = numpy.sum(x101 * (x0 * x855 + x675))
    result[1, 5, 1] = numpy.sum(x208 * (x0 * x858 + x679))
    result[1, 5, 2] = numpy.sum(x208 * (x0 * x861 + x683))
    result[1, 5, 3] = numpy.sum(x208 * (x0 * x864 + x687))
    result[1, 5, 4] = numpy.sum(x242 * (x0 * x867 + x691))
    result[1, 5, 5] = numpy.sum(x208 * (x0 * x870 + x695))
    result[1, 5, 6] = numpy.sum(x101 * (x0 * x873 + x697))
    result[1, 5, 7] = numpy.sum(x208 * (x0 * x876 + x699))
    result[1, 5, 8] = numpy.sum(x208 * (x0 * x879 + x701))
    result[1, 5, 9] = numpy.sum(x101 * (x0 * x882 + x703))
    result[1, 6, 0] = numpy.sum(
        x90 * (x21 * x792 + x21 * x793 + x21 * x794 + x729 * x883)
    )
    result[1, 6, 1] = numpy.sum(
        x101 * (x21 * x795 + x21 * x796 + x21 * x797 + x732 * x886)
    )
    result[1, 6, 2] = numpy.sum(
        x101 * (x21 * x798 + x21 * x799 + x21 * x800 + x735 * x883)
    )
    result[1, 6, 3] = numpy.sum(
        x101 * (x201 * x887 + x21 * x801 + x21 * x802 + x21 * x803)
    )
    result[1, 6, 4] = numpy.sum(
        x126 * (x201 * x888 + x21 * x804 + x21 * x805 + x21 * x806)
    )
    result[1, 6, 5] = numpy.sum(
        x101 * (x21 * x807 + x21 * x808 + x21 * x809 + x740 * x883)
    )
    result[1, 6, 6] = numpy.sum(
        x90 * (x21 * x810 + x21 * x811 + x21 * x812 + x55 * (4.0 * x621 + x887 * x91))
    )
    result[1, 6, 7] = numpy.sum(
        x101 * (x21 * x813 + x21 * x814 + x21 * x815 + x55 * (4.0 * x625 + x888 * x91))
    )
    result[1, 6, 8] = numpy.sum(
        x101 * (x127 * x55 * (x884 + x885) + x21 * x816 + x21 * x817 + x21 * x818)
    )
    result[1, 6, 9] = numpy.sum(
        x90 * (x149 * x883 + x21 * x819 + x21 * x820 + x21 * x821)
    )
    result[1, 7, 0] = numpy.sum(x101 * (x21 * x823 + x21 * x824 + x22 * x792 + x890))
    result[1, 7, 1] = numpy.sum(x208 * (x21 * x826 + x21 * x827 + x22 * x795 + x892))
    result[1, 7, 2] = numpy.sum(x208 * (x21 * x829 + x21 * x830 + x22 * x798 + x894))
    result[1, 7, 3] = numpy.sum(x208 * (x21 * x832 + x21 * x833 + x22 * x801 + x896))
    result[1, 7, 4] = numpy.sum(x242 * (x21 * x835 + x21 * x836 + x22 * x804 + x898))
    result[1, 7, 5] = numpy.sum(x208 * (x21 * x838 + x21 * x839 + x22 * x807 + x900))
    result[1, 7, 6] = numpy.sum(x101 * (x21 * x841 + x21 * x842 + x22 * x810 + x901))
    result[1, 7, 7] = numpy.sum(x208 * (x21 * x844 + x21 * x845 + x22 * x813 + x902))
    result[1, 7, 8] = numpy.sum(x208 * (x21 * x848 + x21 * x849 + x22 * x816 + x903))
    result[1, 7, 9] = numpy.sum(x101 * (x21 * x851 + x21 * x852 + x22 * x819 + x904))
    result[1, 8, 0] = numpy.sum(x101 * (x21 * x855 + x22 * x823 + x906))
    result[1, 8, 1] = numpy.sum(x208 * (x21 * x858 + x22 * x826 + x908))
    result[1, 8, 2] = numpy.sum(x208 * (x21 * x861 + x22 * x829 + x910))
    result[1, 8, 3] = numpy.sum(x208 * (x21 * x864 + x22 * x832 + x912))
    result[1, 8, 4] = numpy.sum(x242 * (x21 * x867 + x22 * x835 + x914))
    result[1, 8, 5] = numpy.sum(x208 * (x21 * x870 + x22 * x838 + x916))
    result[1, 8, 6] = numpy.sum(x101 * (x21 * x873 + x22 * x841 + x917))
    result[1, 8, 7] = numpy.sum(x208 * (x21 * x876 + x22 * x844 + x918))
    result[1, 8, 8] = numpy.sum(x208 * (x21 * x879 + x22 * x848 + x919))
    result[1, 8, 9] = numpy.sum(x101 * (x21 * x882 + x22 * x851 + x920))
    result[1, 9, 0] = numpy.sum(x90 * (x22 * x855 + x922))
    result[1, 9, 1] = numpy.sum(x101 * (x22 * x858 + x924))
    result[1, 9, 2] = numpy.sum(x101 * (x22 * x861 + x926))
    result[1, 9, 3] = numpy.sum(x101 * (x22 * x864 + x928))
    result[1, 9, 4] = numpy.sum(x126 * (x22 * x867 + x930))
    result[1, 9, 5] = numpy.sum(x101 * (x22 * x870 + x932))
    result[1, 9, 6] = numpy.sum(x90 * (x22 * x873 + x933))
    result[1, 9, 7] = numpy.sum(x101 * (x22 * x876 + x934))
    result[1, 9, 8] = numpy.sum(x101 * (x22 * x879 + x935))
    result[1, 9, 9] = numpy.sum(x90 * (x22 * x882 + x936))
    result[2, 0, 0] = numpy.sum(
        x90 * (x0 * x297 + x0 * x937 + x0 * (x0 * (x299 + x729 * x938) + x937) + x308)
    )
    result[2, 0, 1] = numpy.sum(
        x101 * (x0 * x312 + x0 * x939 + x0 * (x0 * (x315 + x938 * x940) + x939) + x317)
    )
    result[2, 0, 2] = numpy.sum(
        x101 * (x0 * x325 + x0 * x941 + x0 * (x0 * (x327 + x732 * x942) + x941) + x330)
    )
    result[2, 0, 3] = numpy.sum(
        x101 * (x0 * x331 + x0 * x943 + x0 * (x0 * (x334 + x938 * x944) + x943) + x336)
    )
    result[2, 0, 4] = numpy.sum(
        x126 * (x0 * x338 + x0 * x945 + x0 * (x0 * (x342 + x942 * x946) + x945) + x344)
    )
    result[2, 0, 5] = numpy.sum(
        x101 * (x0 * x348 + x0 * x947 + x0 * (x0 * (x350 * x737 + x352) + x947) + x355)
    )
    result[2, 0, 6] = numpy.sum(
        x90 * (x0 * x356 + x0 * x948 + x0 * (x0 * (x134 * x938 + x358) + x948) + x361)
    )
    result[2, 0, 7] = numpy.sum(
        x101 * (x0 * x362 + x0 * x949 + x0 * (x0 * (x139 * x942 + x364) + x949) + x366)
    )
    result[2, 0, 8] = numpy.sum(
        x101 * (x0 * x367 + x0 * x950 + x0 * (x0 * (x0 * x951 + x369) + x950) + x371)
    )
    result[2, 0, 9] = numpy.sum(
        x90 * (x0 * x372 + x0 * x952 + x0 * (x0 * (x374 + x78 * x953) + x952) + x376)
    )
    result[2, 1, 0] = numpy.sum(
        x101 * (x0 * x954 + x0 * (x0 * x956 + x954) + x21 * x297 + x466)
    )
    result[2, 1, 1] = numpy.sum(
        x208 * (x0 * x957 + x0 * (x0 * x958 + x957) + x21 * x312 + x476)
    )
    result[2, 1, 2] = numpy.sum(
        x208 * (x0 * x959 + x0 * (x0 * x961 + x959) + x21 * x325 + x486)
    )
    result[2, 1, 3] = numpy.sum(
        x208 * (x0 * x962 + x0 * (x0 * x963 + x962) + x21 * x331 + x495)
    )
    result[2, 1, 4] = numpy.sum(
        x242 * (x0 * x964 + x0 * (x0 * x965 + x964) + x21 * x338 + x504)
    )
    result[2, 1, 5] = numpy.sum(
        x208 * (x0 * x966 + x0 * (x0 * x967 + x966) + x21 * x348 + x513)
    )
    result[2, 1, 6] = numpy.sum(
        x101 * (x0 * x968 + x0 * (x0 * x969 + x968) + x21 * x356 + x518)
    )
    result[2, 1, 7] = numpy.sum(
        x208 * (x0 * x970 + x0 * (x0 * x971 + x970) + x21 * x362 + x523)
    )
    result[2, 1, 8] = numpy.sum(
        x208 * (x0 * x972 + x0 * (x0 * x973 + x972) + x21 * x367 + x528)
    )
    result[2, 1, 9] = numpy.sum(
        x101 * (x0 * x974 + x0 * (x0 * x975 + x974) + x21 * x372 + x533)
    )
    result[2, 2, 0] = numpy.sum(x101 * (x0 * x545 + x0 * (x0 * x978 + x545) + x554))
    result[2, 2, 1] = numpy.sum(x208 * (x0 * x558 + x0 * (x0 * x980 + x558) + x560))
    result[2, 2, 2] = numpy.sum(x208 * (x0 * x566 + x0 * (x0 * x983 + x566) + x569))
    result[2, 2, 3] = numpy.sum(x208 * (x0 * x572 + x0 * (x0 * x985 + x572) + x574))
    result[2, 2, 4] = numpy.sum(x242 * (x0 * x577 + x0 * (x0 * x987 + x577) + x579))
    result[2, 2, 5] = numpy.sum(x208 * (x0 * x584 + x0 * (x0 * x989 + x584) + x587))
    result[2, 2, 6] = numpy.sum(x101 * (x0 * x589 + x0 * (x0 * x991 + x589) + x591))
    result[2, 2, 7] = numpy.sum(x208 * (x0 * x593 + x0 * (x0 * x993 + x593) + x595))
    result[2, 2, 8] = numpy.sum(x208 * (x0 * x597 + x0 * (x0 * x995 + x597) + x599))
    result[2, 2, 9] = numpy.sum(x101 * (x0 * x601 + x0 * (x0 * x997 + x601) + x603))
    result[2, 3, 0] = numpy.sum(x101 * (x0 * x999 + x21 * x459 + x21 * x954 + x638))
    result[2, 3, 1] = numpy.sum(x208 * (x0 * x1001 + x21 * x471 + x21 * x957 + x643))
    result[2, 3, 2] = numpy.sum(x208 * (x0 * x1003 + x21 * x481 + x21 * x959 + x647))
    result[2, 3, 3] = numpy.sum(x208 * (x0 * x1005 + x21 * x490 + x21 * x962 + x651))
    result[2, 3, 4] = numpy.sum(x242 * (x0 * x1007 + x21 * x499 + x21 * x964 + x656))
    result[2, 3, 5] = numpy.sum(x208 * (x0 * x1009 + x21 * x508 + x21 * x966 + x660))
    result[2, 3, 6] = numpy.sum(x101 * (x0 * x1011 + x21 * x515 + x21 * x968 + x662))
    result[2, 3, 7] = numpy.sum(x208 * (x0 * x1013 + x21 * x520 + x21 * x970 + x664))
    result[2, 3, 8] = numpy.sum(x208 * (x0 * x1015 + x21 * x525 + x21 * x972 + x666))
    result[2, 3, 9] = numpy.sum(x101 * (x0 * x1017 + x21 * x530 + x21 * x974 + x668))
    result[2, 4, 0] = numpy.sum(x126 * (x0 * x1018 + x21 * x545 + x674))
    result[2, 4, 1] = numpy.sum(x242 * (x0 * x1019 + x21 * x558 + x678))
    result[2, 4, 2] = numpy.sum(x242 * (x0 * x1020 + x21 * x566 + x682))
    result[2, 4, 3] = numpy.sum(x242 * (x0 * x1021 + x21 * x572 + x686))
    result[2, 4, 4] = numpy.sum(x89 * (x0 * x1022 + x21 * x577 + x690))
    result[2, 4, 5] = numpy.sum(x242 * (x0 * x1023 + x21 * x584 + x694))
    result[2, 4, 6] = numpy.sum(x126 * (x0 * x1024 + x21 * x589 + x696))
    result[2, 4, 7] = numpy.sum(x242 * (x0 * x1025 + x21 * x593 + x698))
    result[2, 4, 8] = numpy.sum(x242 * (x0 * x1026 + x21 * x597 + x700))
    result[2, 4, 9] = numpy.sum(x126 * (x0 * x1027 + x21 * x601 + x702))
    result[2, 5, 0] = numpy.sum(x101 * (x0 * x1030 + x709))
    result[2, 5, 1] = numpy.sum(x208 * (x0 * x1033 + x711))
    result[2, 5, 2] = numpy.sum(x208 * (x0 * x1036 + x715))
    result[2, 5, 3] = numpy.sum(x208 * (x0 * x1039 + x717))
    result[2, 5, 4] = numpy.sum(x242 * (x0 * x1042 + x719))
    result[2, 5, 5] = numpy.sum(x208 * (x0 * x1045 + x723))
    result[2, 5, 6] = numpy.sum(x101 * (x0 * x1048 + x724))
    result[2, 5, 7] = numpy.sum(x208 * (x0 * x1051 + x725))
    result[2, 5, 8] = numpy.sum(x208 * (x0 * x1054 + x726))
    result[2, 5, 9] = numpy.sum(x101 * (x0 * x1057 + x727))
    result[2, 6, 0] = numpy.sum(x90 * (x21 * x822 + x21 * x998 + x21 * x999 + x890))
    result[2, 6, 1] = numpy.sum(x101 * (x1000 * x21 + x1001 * x21 + x21 * x825 + x892))
    result[2, 6, 2] = numpy.sum(x101 * (x1002 * x21 + x1003 * x21 + x21 * x828 + x894))
    result[2, 6, 3] = numpy.sum(x101 * (x1004 * x21 + x1005 * x21 + x21 * x831 + x896))
    result[2, 6, 4] = numpy.sum(x126 * (x1006 * x21 + x1007 * x21 + x21 * x834 + x898))
    result[2, 6, 5] = numpy.sum(x101 * (x1008 * x21 + x1009 * x21 + x21 * x837 + x900))
    result[2, 6, 6] = numpy.sum(x90 * (x1010 * x21 + x1011 * x21 + x21 * x840 + x901))
    result[2, 6, 7] = numpy.sum(x101 * (x1012 * x21 + x1013 * x21 + x21 * x843 + x902))
    result[2, 6, 8] = numpy.sum(x101 * (x1014 * x21 + x1015 * x21 + x21 * x847 + x903))
    result[2, 6, 9] = numpy.sum(x90 * (x1016 * x21 + x1017 * x21 + x21 * x850 + x904))
    result[2, 7, 0] = numpy.sum(x101 * (x1018 * x21 + x21 * x854 + x906))
    result[2, 7, 1] = numpy.sum(x208 * (x1019 * x21 + x21 * x857 + x908))
    result[2, 7, 2] = numpy.sum(x208 * (x1020 * x21 + x21 * x860 + x910))
    result[2, 7, 3] = numpy.sum(x208 * (x1021 * x21 + x21 * x863 + x912))
    result[2, 7, 4] = numpy.sum(x242 * (x1022 * x21 + x21 * x866 + x914))
    result[2, 7, 5] = numpy.sum(x208 * (x1023 * x21 + x21 * x869 + x916))
    result[2, 7, 6] = numpy.sum(x101 * (x1024 * x21 + x21 * x872 + x917))
    result[2, 7, 7] = numpy.sum(x208 * (x1025 * x21 + x21 * x875 + x918))
    result[2, 7, 8] = numpy.sum(x208 * (x1026 * x21 + x21 * x878 + x919))
    result[2, 7, 9] = numpy.sum(x101 * (x1027 * x21 + x21 * x881 + x920))
    result[2, 8, 0] = numpy.sum(x101 * (x1030 * x21 + x922))
    result[2, 8, 1] = numpy.sum(x208 * (x1033 * x21 + x924))
    result[2, 8, 2] = numpy.sum(x208 * (x1036 * x21 + x926))
    result[2, 8, 3] = numpy.sum(x208 * (x1039 * x21 + x928))
    result[2, 8, 4] = numpy.sum(x242 * (x1042 * x21 + x930))
    result[2, 8, 5] = numpy.sum(x208 * (x1045 * x21 + x932))
    result[2, 8, 6] = numpy.sum(x101 * (x1048 * x21 + x933))
    result[2, 8, 7] = numpy.sum(x208 * (x1051 * x21 + x934))
    result[2, 8, 8] = numpy.sum(x208 * (x1054 * x21 + x935))
    result[2, 8, 9] = numpy.sum(x101 * (x1057 * x21 + x936))
    result[2, 9, 0] = numpy.sum(
        x90 * (x1028 * x22 + x1029 * x22 + x1030 * x22 + x1058 * x729)
    )
    result[2, 9, 1] = numpy.sum(
        x101 * (x1031 * x22 + x1032 * x22 + x1033 * x22 + x1058 * x940)
    )
    result[2, 9, 2] = numpy.sum(
        x101 * (x1034 * x22 + x1035 * x22 + x1036 * x22 + x1059 * x732)
    )
    result[2, 9, 3] = numpy.sum(
        x101 * (x1037 * x22 + x1038 * x22 + x1039 * x22 + x1058 * x944)
    )
    result[2, 9, 4] = numpy.sum(
        x126 * (x1040 * x22 + x1041 * x22 + x1042 * x22 + x1059 * x946)
    )
    result[2, 9, 5] = numpy.sum(
        x101 * (x1043 * x22 + x1044 * x22 + x1045 * x22 + x1060 * x201)
    )
    result[2, 9, 6] = numpy.sum(
        x90 * (x1046 * x22 + x1047 * x22 + x1048 * x22 + x1058 * x134)
    )
    result[2, 9, 7] = numpy.sum(
        x101 * (x1049 * x22 + x1050 * x22 + x1051 * x22 + x1059 * x139)
    )
    result[2, 9, 8] = numpy.sum(
        x101 * (x1052 * x22 + x1053 * x22 + x1054 * x22 + x1060 * x119)
    )
    result[2, 9, 9] = numpy.sum(
        x90
        * (x1055 * x22 + x1056 * x22 + x1057 * x22 + x55 * (x102 * x1060 + 4.0 * x721))
    )
    return result


def int3c2e3d_sph_134(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (pf|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((3, 10, 15), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(5, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x20 * x23
    x25 = x2 * x24
    x26 = 2.0 * x19 * x25
    x27 = x18 * x26
    x28 = cx ** (-1.0)
    x29 = x14 ** (-0.5)
    x30 = boys(4, x17)
    x31 = 2.0 * x2 * x20 * x23 * x28 * x29 * x30 - x27
    x32 = x31 * x6
    x33 = -2.0 * x2 * x20 * x23 * x28 * x29 * x30 * x5 + x27 * x4
    x34 = -x33
    x35 = boys(6, x17)
    x36 = x26 * x35
    x37 = -2.0 * x18 * x2 * x20 * x23 * x28 * x29 * x5 + x36 * x4
    x38 = -x37
    x39 = x16 * x38
    x40 = x39 * x4
    x41 = x32 + x34 * x5 - x40
    x42 = 2.0 * x6
    x43 = x6 * (2.0 * x18 * x2 * x20 * x23 * x28 * x29 - x36)
    x44 = boys(7, x17)
    x45 = x26 * x44
    x46 = 2.0 * x2 * x20 * x23 * x28 * x29 * x35 * x5 - x4 * x45
    x47 = x16 * x46
    x48 = x38 * x5 - x4 * x47 + x43
    x49 = x16 * x48
    x50 = -x4 * x49 + x41 * x5 - x42 * (x33 + x39)
    x51 = x4 * x50
    x52 = x41 * x6
    x53 = 3.0 * x52
    x54 = x51 + x53
    x55 = x1 * x15
    x56 = x4 * x55
    x57 = x4 * x41
    x58 = x34 * x6
    x59 = 2.0 * x58
    x60 = x57 + x59
    x61 = 3.0 * x6
    x62 = x55 * x61
    x63 = x54 * x56 + x60 * x62
    x64 = x34 * x4
    x65 = x28 * x30 * x42
    x66 = x25 * x29 * x65
    x67 = x64 + x66
    x68 = x42 * x55
    x69 = x56 * x60 + x67 * x68
    x70 = x56 * x63 + x62 * x69
    x71 = x24 * x65
    x72 = x19 * x71
    x73 = x4 * x72 + x56 * x67
    x74 = x56 * x69 + x68 * x73
    x75 = x55 * (x56 * x70 + x62 * x74)
    x76 = x7 * x71
    x77 = x1 * x14 ** (-2.5)
    x78 = x56 * x73 + x76 * x77
    x79 = x55 * (x56 * x74 + x68 * x78)
    x80 = x0 * x79 + x75
    x81 = x4**3
    x82 = x1**2
    x83 = x14 ** (-3.5) * x82
    x84 = x71 * x83
    x85 = x56 * x78 + x81 * x84
    x86 = x0 * x55
    x87 = -x31 * x6
    x88 = x6 * (2.0 * x2 * x20 * x23 * x28 * x29 * x35 - x45)
    x89 = x26 * boys(8, x17)
    x90 = x16 * x4
    x91 = (
        x5 * x50
        - x61 * (-x34 * x5 + x40 + x49 + x87)
        + x90
        * (
            x42 * (x37 + x47)
            - x48 * x5
            + x90
            * (
                x46 * x5
                + x88
                - x90 * (2.0 * x2 * x20 * x23 * x28 * x29 * x44 * x5 - x4 * x89)
            )
        )
    )
    x92 = x4 * x91
    x93 = x50 * x6
    x94 = 4.0 * x93
    x95 = x55 * x6
    x96 = 4.0 * x95
    x97 = da * db * dc
    x98 = 0.009523809523809524 * x97
    x99 = 2.645751311064591 * x98
    x100 = x55 * x9
    x101 = x100 * (x51 + x53)
    x102 = x100 * (x57 + x59)
    x103 = x101 * x56 + x102 * x62
    x104 = x72 * x9
    x105 = x100 * x64 + x104
    x106 = x102 * x56 + x105 * x68
    x107 = x55 * (x103 * x56 + x106 * x62)
    x108 = x71 * x77
    x109 = x108 * x4
    x110 = x105 * x56 + x109 * x9
    x111 = x55 * (x106 * x56 + x110 * x68)
    x112 = x0 * x111 + x107
    x113 = x76 * x83
    x114 = x110 * x56 + x113 * x9
    x115 = 0.06666666666666667 * x97
    x116 = x12 * x55
    x117 = x116 * (x51 + x53)
    x118 = x116 * (x57 + x59)
    x119 = x117 * x56 + x118 * x62
    x120 = x12 * x72
    x121 = x116 * x64 + x120
    x122 = x118 * x56 + x121 * x68
    x123 = x55 * (x119 * x56 + x122 * x62)
    x124 = x109 * x12 + x121 * x56
    x125 = x55 * (x122 * x56 + x124 * x68)
    x126 = x0 * x125 + x123
    x127 = x113 * x12 + x124 * x56
    x128 = x82 / x14**2
    x129 = x10 * x128
    x130 = x129 * (x51 + x53)
    x131 = x129 * (x57 + x59)
    x132 = x55 * (x130 * x56 + x131 * x62)
    x133 = x10 * x108
    x134 = x129 * x64 + x133
    x135 = x55 * (x131 * x56 + x134 * x68)
    x136 = x0 * x135 + x132
    x137 = x10 * x84
    x138 = x134 * x56 + x137 * x4
    x139 = 3.872983346207417
    x140 = 0.02222222222222222 * x139 * x97
    x141 = x128 * x9
    x142 = x12 * x141
    x143 = x142 * (x51 + x53)
    x144 = x142 * (x57 + x59)
    x145 = x55 * (x143 * x56 + x144 * x62)
    x146 = x12 * x9
    x147 = x108 * x146
    x148 = x142 * x64 + x147
    x149 = x55 * (x144 * x56 + x148 * x68)
    x150 = x0 * x149 + x145
    x151 = x146 * x4 * x84 + x148 * x56
    x152 = 2.23606797749979 * x115
    x153 = x128 * x13
    x154 = x153 * (x51 + x53)
    x155 = x153 * (x57 + x59)
    x156 = x55 * (x154 * x56 + x155 * x62)
    x157 = x108 * x13
    x158 = x153 * x64 + x157
    x159 = x55 * (x155 * x56 + x158 * x68)
    x160 = x0 * x159 + x156
    x161 = x13 * x4
    x162 = x158 * x56 + x161 * x84
    x163 = x9**3
    x164 = x1**3 / x14**3
    x165 = x163 * x164
    x166 = x165 * x55 * (x51 + x53)
    x167 = x165 * x55 * (x57 + x59)
    x168 = x0 * x167 + x166
    x169 = x163 * x84
    x170 = x165 * x64 + x169
    x171 = x10 * x164
    x172 = x12 * x171
    x173 = x172 * x55 * (x51 + x53)
    x174 = x172 * x55 * (x57 + x59)
    x175 = x0 * x174 + x173
    x176 = x12 * x137
    x177 = x172 * x64 + x176
    x178 = x164 * x9
    x179 = x13 * x178
    x180 = x179 * x55 * (x51 + x53)
    x181 = x179 * x55 * (x57 + x59)
    x182 = x0 * x181 + x180
    x183 = x13 * x84 * x9
    x184 = x179 * x64 + x183
    x185 = x12**3
    x186 = x164 * x185
    x187 = x186 * x55 * (x51 + x53)
    x188 = x186 * x55 * (x57 + x59)
    x189 = x0 * x188 + x187
    x190 = x185 * x84
    x191 = x186 * x64 + x190
    x192 = x1**4 / x14**4
    x193 = x192 * x9**4
    x194 = x193 * x50
    x195 = x193 * x41
    x196 = x0 * x195 + x194
    x197 = x0 * x34
    x198 = x163 * x192
    x199 = x12 * x198
    x200 = x199 * x50
    x201 = x199 * x41
    x202 = x0 * x201 + x200
    x203 = x192 * x50
    x204 = x10 * x13
    x205 = x203 * x204
    x206 = x192 * x204
    x207 = x206 * x41
    x208 = x0 * x207 + x205
    x209 = x185 * x9
    x210 = x203 * x209
    x211 = x192 * x209
    x212 = x211 * x41
    x213 = x0 * x212 + x210
    x214 = x12**4 * x192
    x215 = x214 * x50
    x216 = x214 * x41
    x217 = x0 * x216 + x215
    x218 = -x8 - A[1]
    x219 = -2.0 * x18 * x2 * x20 * x218 * x23 * x28 * x29 + x36 * x9
    x220 = -x219
    x221 = x16 * x220
    x222 = -2.0 * x2 * x20 * x218 * x23 * x28 * x29 * x30 + x27 * x9
    x223 = -x6 * (x221 + x222)
    x224 = -x222
    x225 = x221 * x4 - x224 * x5
    x226 = -x225
    x227 = 2.0 * x2 * x20 * x218 * x23 * x28 * x29 * x35 - x45 * x9
    x228 = x16 * x227
    x229 = x220 * x5 - x228 * x4
    x230 = x16 * x229
    x231 = x223 + x226 * x5 - x230 * x4
    x232 = x231 * x4
    x233 = x226 * x6
    x234 = 2.0 * x233
    x235 = x232 + x234
    x236 = x224 * x6
    x237 = x226 * x4
    x238 = x236 + x237
    x239 = x235 * x56 + x238 * x68
    x240 = x56 * (x236 + x238)
    x241 = x239 * x56 + x240 * x68
    x242 = x128 * x7
    x243 = x236 * x242 + x240 * x56
    x244 = x55 * (x241 * x56 + x243 * x68)
    x245 = x21 * x79 + x244
    x246 = x164 * x81
    x247 = x55 * (x236 * x246 + x243 * x56)
    x248 = x21 * x55
    x249 = x247 + x248 * x85
    x250 = -x6 * (x219 + x228)
    x251 = 2.0 * x2 * x20 * x218 * x23 * x28 * x29 * x44 - x89 * x9
    x252 = (
        x231 * x5
        - x42 * (x225 + x230)
        - x90 * (x229 * x5 + x250 - x90 * (x227 * x5 - x251 * x90))
    )
    x253 = x252 * x4
    x254 = x231 * x6
    x255 = 3.0 * x254
    x256 = x55 * (
        x241 * x62 + x56 * (x239 * x62 + x56 * (x235 * x62 + x56 * (x253 + x255)))
    )
    x257 = 5.916079783099616 * x98
    x258 = x231 * x9
    x259 = x258 + x52
    x260 = x226 * x9
    x261 = x260 + x58
    x262 = x261 * x68
    x263 = x259 * x56 + x262
    x264 = x224 * x9
    x265 = x264 + x66
    x266 = x265 * x55
    x267 = x261 * x56 + x266 * x6
    x268 = x263 * x56 + x267 * x68
    x269 = x128 * x4
    x270 = x265 * x6
    x271 = x267 * x56 + x269 * x270
    x272 = x55 * (x268 * x56 + x271 * x68)
    x273 = x111 * x21 + x272
    x274 = x164 * x7
    x275 = x55 * (x270 * x274 + x271 * x56)
    x276 = x114 * x248 + x275
    x277 = x252 * x9
    x278 = x277 + x93
    x279 = x55 * (x268 * x62 + x56 * (x263 * x62 + x56 * (x259 * x62 + x278 * x56)))
    x280 = x116 * x234
    x281 = x116 * x232 + x280
    x282 = x116 * x236
    x283 = x116 * x237 + x282
    x284 = x281 * x56 + x283 * x68
    x285 = x12 * x236
    x286 = x269 * x285 + x283 * x56
    x287 = x55 * (x284 * x56 + x286 * x68)
    x288 = x125 * x21 + x287
    x289 = x55 * (x274 * x285 + x286 * x56)
    x290 = x127 * x248 + x289
    x291 = x55 * (x284 * x62 + x56 * (x116 * x56 * (x253 + x255) + x281 * x62))
    x292 = x100 * (x259 + x52)
    x293 = x100 * (x261 + x58)
    x294 = x293 * x68
    x295 = x292 * x56 + x294
    x296 = x104 + x266 * x9
    x297 = x293 * x56 + x296 * x95
    x298 = x55 * (x295 * x56 + x297 * x68)
    x299 = x135 * x21 + x298
    x300 = x269 * x6
    x301 = x55 * (x296 * x300 + x297 * x56)
    x302 = x138 * x248 + x301
    x303 = x100 * (x278 + x93)
    x304 = x55 * (x295 * x62 + x56 * (x292 * x62 + x303 * x56))
    x305 = 1.732050807568877
    x306 = 0.1111111111111111 * x305 * x97
    x307 = x116 * x52
    x308 = x116 * x258 + x307
    x309 = x116 * x58
    x310 = x116 * x260 + x309
    x311 = x310 * x68
    x312 = x308 * x56 + x311
    x313 = x116 * x264 + x120
    x314 = x310 * x56 + x313 * x95
    x315 = x55 * (x312 * x56 + x314 * x68)
    x316 = x149 * x21 + x315
    x317 = x55 * (x300 * x313 + x314 * x56)
    x318 = x151 * x248 + x317
    x319 = x116 * x93
    x320 = x116 * x277 + x319
    x321 = x55 * (x312 * x62 + x56 * (x308 * x62 + x320 * x56))
    x322 = 0.3333333333333333 * x97
    x323 = x153 * x234
    x324 = x153 * x232 + x323
    x325 = x153 * x236
    x326 = x153 * x237 + x325
    x327 = x55 * (x324 * x56 + x326 * x68)
    x328 = x159 * x21 + x327
    x329 = x161 * x164
    x330 = x55 * (x236 * x329 + x326 * x56)
    x331 = x162 * x248 + x330
    x332 = x55 * (x153 * x56 * (x253 + x255) + x324 * x62)
    x333 = x100 * x292 + x129 * x52
    x334 = x100 * x293 + x129 * x58
    x335 = x334 * x68
    x336 = x55 * (x333 * x56 + x335)
    x337 = x167 * x21 + x336
    x338 = x100 * x296 + x133
    x339 = x55 * (x334 * x56 + x338 * x95)
    x340 = x170 * x248 + x339
    x341 = x100 * x303 + x129 * x93
    x342 = x55 * (x333 * x62 + x341 * x56)
    x343 = x100 * x308 + x142 * x52
    x344 = x100 * x310 + x142 * x58
    x345 = x344 * x68
    x346 = x55 * (x343 * x56 + x345)
    x347 = x174 * x21 + x346
    x348 = x100 * x313 + x147
    x349 = x55 * (x344 * x56 + x348 * x95)
    x350 = x177 * x248 + x349
    x351 = x100 * x320 + x142 * x93
    x352 = x55 * (x343 * x62 + x351 * x56)
    x353 = x153 * x52
    x354 = x153 * x258 + x353
    x355 = x153 * x58
    x356 = x153 * x260 + x355
    x357 = x356 * x68
    x358 = x55 * (x354 * x56 + x357)
    x359 = x181 * x21 + x358
    x360 = x153 * x264 + x157
    x361 = x55 * (x356 * x56 + x360 * x95)
    x362 = x184 * x248 + x361
    x363 = x153 * x93
    x364 = x153 * x277 + x363
    x365 = x55 * (x354 * x62 + x364 * x56)
    x366 = x186 * x234
    x367 = x55 * (x186 * x232 + x366)
    x368 = x188 * x21 + x367
    x369 = x186 * x236
    x370 = x55 * (x186 * x237 + x369)
    x371 = x191 * x248 + x370
    x372 = x186 * x55 * (x253 + x255)
    x373 = x55 * (x100 * x333 + x165 * x52)
    x374 = x195 * x21 + x373
    x375 = x55 * (x100 * x334 + x165 * x58)
    x376 = x21 * x34
    x377 = x193 * x376 + x375
    x378 = x55 * (x100 * x341 + x165 * x93)
    x379 = x55 * (x100 * x343 + x172 * x52)
    x380 = x201 * x21 + x379
    x381 = x55 * (x100 * x344 + x172 * x58)
    x382 = x199 * x376 + x381
    x383 = x55 * (x100 * x351 + x172 * x93)
    x384 = x55 * (x100 * x354 + x179 * x52)
    x385 = x207 * x21 + x384
    x386 = x55 * (x100 * x356 + x179 * x58)
    x387 = x206 * x376 + x386
    x388 = x55 * (x100 * x364 + x179 * x93)
    x389 = x186 * x52
    x390 = x55 * (x186 * x258 + x389)
    x391 = x21 * x212 + x390
    x392 = x186 * x58
    x393 = x55 * (x186 * x260 + x392)
    x394 = x211 * x376 + x393
    x395 = x186 * x93
    x396 = x55 * (x186 * x277 + x395)
    x397 = x214 * x231
    x398 = x21 * x216 + x397
    x399 = x214 * x226
    x400 = x214 * x376 + x399
    x401 = x214 * x252
    x402 = -x11 - A[2]
    x403 = x12 * x36 - 2.0 * x18 * x2 * x20 * x23 * x28 * x29 * x402
    x404 = -x403
    x405 = x16 * x404
    x406 = x12 * x27 - 2.0 * x2 * x20 * x23 * x28 * x29 * x30 * x402
    x407 = -x6 * (x405 + x406)
    x408 = -x406
    x409 = x4 * x405 - x408 * x5
    x410 = -x409
    x411 = -x12 * x45 + 2.0 * x2 * x20 * x23 * x28 * x29 * x35 * x402
    x412 = x16 * x411
    x413 = -x4 * x412 + x404 * x5
    x414 = x16 * x413
    x415 = -x4 * x414 + x407 + x410 * x5
    x416 = x4 * x415
    x417 = x410 * x6
    x418 = 2.0 * x417
    x419 = x416 + x418
    x420 = x408 * x6
    x421 = x4 * x410
    x422 = x420 + x421
    x423 = x419 * x56 + x422 * x68
    x424 = x56 * (x420 + x422)
    x425 = x423 * x56 + x424 * x68
    x426 = x242 * x420 + x424 * x56
    x427 = x55 * (x425 * x56 + x426 * x68)
    x428 = x22 * x79 + x427
    x429 = x55 * (x246 * x420 + x426 * x56)
    x430 = x22 * x55
    x431 = x429 + x430 * x85
    x432 = -x6 * (x403 + x412)
    x433 = -x12 * x89 + 2.0 * x2 * x20 * x23 * x28 * x29 * x402 * x44
    x434 = (
        x415 * x5
        - x42 * (x409 + x414)
        - x90 * (x413 * x5 + x432 - x90 * (x411 * x5 - x433 * x90))
    )
    x435 = x4 * x434
    x436 = x415 * x6
    x437 = 3.0 * x436
    x438 = x55 * (
        x425 * x62 + x56 * (x423 * x62 + x56 * (x419 * x62 + x56 * (x435 + x437)))
    )
    x439 = x100 * (x416 + x418)
    x440 = x100 * x420
    x441 = x100 * x421 + x440
    x442 = x439 * x56 + x441 * x68
    x443 = x141 * x4
    x444 = x420 * x443 + x441 * x56
    x445 = x55 * (x442 * x56 + x444 * x68)
    x446 = x111 * x22 + x445
    x447 = x274 * x9
    x448 = x55 * (x420 * x447 + x444 * x56)
    x449 = x114 * x430 + x448
    x450 = x55 * (x442 * x62 + x56 * (x100 * x56 * (x435 + x437) + x439 * x62))
    x451 = x12 * x415 + x52
    x452 = x12 * x410 + x58
    x453 = x452 * x68
    x454 = x451 * x56 + x453
    x455 = x12 * x408 + x66
    x456 = x455 * x95
    x457 = x452 * x56 + x456
    x458 = x454 * x56 + x457 * x68
    x459 = x300 * x455 + x457 * x56
    x460 = x55 * (x458 * x56 + x459 * x68)
    x461 = x125 * x22 + x460
    x462 = x455 * x6
    x463 = x55 * (x274 * x462 + x459 * x56)
    x464 = x127 * x430 + x463
    x465 = x12 * x434 + x93
    x466 = x55 * (x458 * x62 + x56 * (x454 * x62 + x56 * (x451 * x62 + x465 * x56)))
    x467 = x129 * (x416 + x418)
    x468 = x129 * x420
    x469 = x129 * x421 + x468
    x470 = x55 * (x467 * x56 + x469 * x68)
    x471 = x135 * x22 + x470
    x472 = x171 * x4
    x473 = x55 * (x420 * x472 + x469 * x56)
    x474 = x138 * x430 + x473
    x475 = x55 * (x129 * x56 * (x435 + x437) + x467 * x62)
    x476 = x42 * x452
    x477 = x141 * x476 + x443 * x451
    x478 = x141 * x462
    x479 = x443 * x452 + x478
    x480 = x55 * (x477 * x56 + x479 * x68)
    x481 = x149 * x22 + x480
    x482 = x178 * x4
    x483 = x55 * (x462 * x482 + x479 * x56)
    x484 = x151 * x430 + x483
    x485 = x451 * x61
    x486 = x55 * (x477 * x62 + x56 * (x141 * x485 + x443 * x465))
    x487 = x116 * x451 + x307
    x488 = x116 * x452 + x309
    x489 = x488 * x68
    x490 = x487 * x56 + x489
    x491 = x116 * x455 + x120
    x492 = x491 * x95
    x493 = x488 * x56 + x492
    x494 = x55 * (x490 * x56 + x493 * x68)
    x495 = x159 * x22 + x494
    x496 = x55 * (x300 * x491 + x493 * x56)
    x497 = x162 * x430 + x496
    x498 = x116 * x465 + x319
    x499 = x55 * (x490 * x62 + x56 * (x487 * x62 + x498 * x56))
    x500 = x165 * x55 * (x416 + x418)
    x501 = x167 * x22 + x500
    x502 = x165 * x420
    x503 = x55 * (x165 * x421 + x502)
    x504 = x170 * x430 + x503
    x505 = x165 * x55 * (x435 + x437)
    x506 = x55 * (x171 * x476 + x451 * x472)
    x507 = x174 * x22 + x506
    x508 = x171 * x462
    x509 = x55 * (x452 * x472 + x508)
    x510 = x177 * x430 + x509
    x511 = x55 * (x171 * x485 + x465 * x472)
    x512 = x141 * x42
    x513 = x55 * (x443 * x487 + x488 * x512)
    x514 = x181 * x22 + x513
    x515 = x141 * x6
    x516 = x491 * x515
    x517 = x55 * (x443 * x488 + x516)
    x518 = x184 * x430 + x517
    x519 = x55 * (x141 * x487 * x61 + x443 * x498)
    x520 = x116 * x487 + x353
    x521 = x116 * x488 + x355
    x522 = x521 * x68
    x523 = x55 * (x520 * x56 + x522)
    x524 = x188 * x22 + x523
    x525 = x116 * x491 + x157
    x526 = x525 * x95
    x527 = x55 * (x521 * x56 + x526)
    x528 = x191 * x430 + x527
    x529 = x116 * x498 + x363
    x530 = x55 * (x520 * x62 + x529 * x56)
    x531 = x193 * x415
    x532 = x195 * x22 + x531
    x533 = x193 * x410
    x534 = x22 * x34
    x535 = x193 * x534 + x533
    x536 = x193 * x434
    x537 = x198 * x451
    x538 = x201 * x22 + x537
    x539 = x198 * x452
    x540 = x199 * x534 + x539
    x541 = x198 * x465
    x542 = x171 * x487
    x543 = x207 * x22 + x542
    x544 = x171 * x488
    x545 = x206 * x534 + x544
    x546 = x171 * x498
    x547 = x141 * x520
    x548 = x212 * x22 + x547
    x549 = x141 * x521
    x550 = x211 * x534 + x549
    x551 = x141 * x529
    x552 = x55 * (x116 * x520 + x389)
    x553 = x216 * x22 + x552
    x554 = x55 * (x116 * x521 + x392)
    x555 = x214 * x534 + x554
    x556 = x55 * (x116 * x529 + x395)
    x557 = x221 * x9
    x558 = x218 * x224 + x32 - x557
    x559 = x558 * x6
    x560 = x218 * x220 - x228 * x9 + x43
    x561 = x16 * x560
    x562 = -x4 * x561 + x5 * x558
    x563 = x4 * x562
    x564 = x559 + x563
    x565 = x56 * (x559 + x564)
    x566 = x242 * x559 + x56 * x565
    x567 = x55 * (x246 * x559 + x56 * x566)
    x568 = x21 * x247 + x567
    x569 = x21 * x249 + x568
    x570 = x6 * (x218 * x224 - x557 - x561 - x87)
    x571 = x16 * x9
    x572 = x218 * x227 - x251 * x571 + x88
    x573 = x5 * x562 + x570 - x90 * (x5 * x560 - x572 * x90)
    x574 = x4 * x573
    x575 = x562 * x6
    x576 = 2.0 * x575
    x577 = x21 * x244 + x55 * (
        x56 * (x56 * (x56 * (x574 + x576) + x564 * x68) + x565 * x68) + x566 * x68
    )
    x578 = x558 * x9
    x579 = 2.0 * x236
    x580 = x578 + x579
    x581 = x562 * x9
    x582 = x234 + x581
    x583 = x56 * x582 + x580 * x95
    x584 = x300 * x580 + x56 * x583
    x585 = x274 * x6
    x586 = x55 * (x56 * x584 + x580 * x585)
    x587 = x21 * x275 + x586
    x588 = x21 * x276 + x587
    x589 = x573 * x9
    x590 = 2.0 * x254
    x591 = x589 + x590
    x592 = x21 * x272 + x55 * (
        x56 * (x56 * (x56 * x591 + x582 * x68) + x583 * x68) + x584 * x68
    )
    x593 = x116 * x559
    x594 = x116 * x563 + x593
    x595 = x12 * x559
    x596 = x269 * x595 + x56 * x594
    x597 = x55 * (x274 * x595 + x56 * x596)
    x598 = x21 * x289 + x597
    x599 = x21 * x290 + x598
    x600 = x21 * x287 + x55 * (
        x56 * (x116 * x56 * (x574 + x576) + x594 * x68) + x596 * x68
    )
    x601 = x100 * x580 + x266 * x42
    x602 = x100 * x582 + x262
    x603 = x56 * x602 + x601 * x95
    x604 = x55 * (x300 * x601 + x56 * x603)
    x605 = x21 * x301 + x604
    x606 = x21 * x302 + x605
    x607 = x100 * x591 + x259 * x68
    x608 = x21 * x298 + x55 * (x56 * (x56 * x607 + x602 * x68) + x603 * x68)
    x609 = x116 * (x578 + x579)
    x610 = x116 * x581 + x280
    x611 = x56 * x610 + x609 * x95
    x612 = x55 * (x300 * x609 + x56 * x611)
    x613 = x21 * x317 + x612
    x614 = x21 * x318 + x613
    x615 = x116 * (x589 + x590)
    x616 = x21 * x315 + x55 * (x56 * (x56 * x615 + x610 * x68) + x611 * x68)
    x617 = x153 * x559
    x618 = x153 * x563 + x617
    x619 = x55 * (x329 * x559 + x56 * x618)
    x620 = x21 * x330 + x619
    x621 = x21 * x331 + x620
    x622 = x21 * x327 + x55 * (x153 * x56 * (x574 + x576) + x618 * x68)
    x623 = x100 * x601 + x296 * x68
    x624 = x100 * x602 + x294
    x625 = x55 * (x56 * x624 + x623 * x95)
    x626 = x21 * x339 + x625
    x627 = x21 * x340 + x626
    x628 = x100 * x607 + x292 * x68
    x629 = x21 * x336 + x55 * (x56 * x628 + x624 * x68)
    x630 = x100 * x609 + x313 * x68
    x631 = x100 * x610 + x311
    x632 = x55 * (x56 * x631 + x630 * x95)
    x633 = x21 * x349 + x632
    x634 = x21 * x350 + x633
    x635 = x100 * x615 + x308 * x68
    x636 = x21 * x346 + x55 * (x56 * x635 + x631 * x68)
    x637 = x153 * (x578 + x579)
    x638 = x153 * x581 + x323
    x639 = x55 * (x56 * x638 + x637 * x95)
    x640 = x21 * x361 + x639
    x641 = x21 * x362 + x640
    x642 = x153 * (x589 + x590)
    x643 = x21 * x358 + x55 * (x56 * x642 + x638 * x68)
    x644 = x186 * x559
    x645 = x55 * (x186 * x563 + x644)
    x646 = x21 * x370 + x645
    x647 = x21 * x371 + x646
    x648 = x186 * x55 * (x574 + x576) + x21 * x367
    x649 = x55 * (x100 * x624 + x335)
    x650 = x21 * x375 + x649
    x651 = x21 * x377 + x650
    x652 = x21 * x373 + x55 * (x100 * x628 + x333 * x68)
    x653 = x55 * (x100 * x631 + x345)
    x654 = x21 * x381 + x653
    x655 = x21 * x382 + x654
    x656 = x21 * x379 + x55 * (x100 * x635 + x343 * x68)
    x657 = x55 * (x100 * x638 + x357)
    x658 = x21 * x386 + x657
    x659 = x21 * x387 + x658
    x660 = x21 * x384 + x55 * (x100 * x642 + x354 * x68)
    x661 = x55 * (x186 * x581 + x366)
    x662 = x21 * x393 + x661
    x663 = x21 * x394 + x662
    x664 = x186 * x55 * (x589 + x590) + x21 * x390
    x665 = x214 * x562
    x666 = x21 * x399 + x665
    x667 = x21 * x400 + x666
    x668 = x21 * x397 + x214 * x573
    x669 = -x218 * x408 + x405 * x9
    x670 = -x669
    x671 = x6 * x670
    x672 = x218 * x404 - x412 * x9
    x673 = x16 * x672
    x674 = -x4 * x673 + x5 * x670
    x675 = x4 * x674 + x671
    x676 = x56 * (x671 + x675)
    x677 = x242 * x671 + x56 * x676
    x678 = x55 * (x246 * x671 + x56 * x677)
    x679 = x22 * x247 + x678
    x680 = x21 * x431 + x679
    x681 = -x6 * (x669 + x673)
    x682 = x218 * x411 - x433 * x571
    x683 = x5 * x674 + x681 - x90 * (x5 * x672 - x682 * x90)
    x684 = x42 * x674
    x685 = x55 * (
        x56 * (x56 * (x56 * (x4 * x683 + x684) + x675 * x68) + x676 * x68) + x677 * x68
    )
    x686 = x22 * x244 + x685
    x687 = 10.2469507659596 * x98
    x688 = x420 + x670 * x9
    x689 = x417 + x674 * x9
    x690 = x56 * x689 + x688 * x95
    x691 = x300 * x688 + x56 * x690
    x692 = x55 * (x56 * x691 + x585 * x688)
    x693 = x22 * x275 + x692
    x694 = x21 * x449 + x693
    x695 = x436 + x683 * x9
    x696 = x68 * x689
    x697 = x55 * (x56 * (x56 * (x56 * x695 + x696) + x68 * x690) + x68 * x691)
    x698 = x22 * x272 + x697
    x699 = x115 * x139
    x700 = x12 * x670 + x236
    x701 = x12 * x674 + x233
    x702 = x56 * x701 + x700 * x95
    x703 = x300 * x700 + x56 * x702
    x704 = x55 * (x56 * x703 + x585 * x700)
    x705 = x22 * x289 + x704
    x706 = x21 * x464 + x705
    x707 = x12 * x683 + x254
    x708 = x68 * x701
    x709 = x55 * (x56 * (x56 * (x56 * x707 + x708) + x68 * x702) + x68 * x703)
    x710 = x22 * x287 + x709
    x711 = x100 * x688 + x440
    x712 = x100 * (x417 + x689)
    x713 = x56 * x712 + x711 * x95
    x714 = x55 * (x300 * x711 + x56 * x713)
    x715 = x22 * x301 + x714
    x716 = x21 * x474 + x715
    x717 = x100 * (x436 + x695)
    x718 = x68 * x712
    x719 = x55 * (x56 * (x56 * x717 + x718) + x68 * x713)
    x720 = x22 * x298 + x719
    x721 = x100 * x700 + x456
    x722 = x100 * x701 + x452 * x95
    x723 = x56 * x722 + x721 * x95
    x724 = x55 * (x300 * x721 + x56 * x723)
    x725 = x22 * x317 + x724
    x726 = x21 * x484 + x725
    x727 = x100 * x707 + x451 * x95
    x728 = x68 * x722
    x729 = x55 * (x56 * (x56 * x727 + x728) + x68 * x723)
    x730 = x22 * x315 + x729
    x731 = x305 * x322
    x732 = x116 * x700 + x282
    x733 = x116 * (x233 + x701)
    x734 = x56 * x733 + x732 * x95
    x735 = x55 * (x300 * x732 + x56 * x734)
    x736 = x22 * x330 + x735
    x737 = x21 * x497 + x736
    x738 = x116 * (x254 + x707)
    x739 = x68 * x733
    x740 = x55 * (x56 * (x56 * x738 + x739) + x68 * x734)
    x741 = x22 * x327 + x740
    x742 = x100 * x711 + x468
    x743 = x100 * x712 + x129 * x417
    x744 = x55 * (x56 * x743 + x742 * x95)
    x745 = x22 * x339 + x744
    x746 = x21 * x504 + x745
    x747 = x100 * x717 + x129 * x436
    x748 = x68 * x743
    x749 = x55 * (x56 * x747 + x748)
    x750 = x22 * x336 + x749
    x751 = x100 * x721 + x478
    x752 = x100 * x722 + x452 * x515
    x753 = x55 * (x56 * x752 + x751 * x95)
    x754 = x22 * x349 + x753
    x755 = x21 * x510 + x754
    x756 = x100 * x727 + x451 * x515
    x757 = x68 * x752
    x758 = x55 * (x56 * x756 + x757)
    x759 = x22 * x346 + x758
    x760 = x100 * x732 + x492
    x761 = x100 * x733 + x488 * x95
    x762 = x55 * (x56 * x761 + x760 * x95)
    x763 = x22 * x361 + x762
    x764 = x21 * x518 + x763
    x765 = x100 * x738 + x487 * x95
    x766 = x68 * x761
    x767 = x55 * (x56 * x765 + x766)
    x768 = x22 * x358 + x767
    x769 = x116 * x732 + x325
    x770 = x116 * x733 + x153 * x233
    x771 = x55 * (x56 * x770 + x769 * x95)
    x772 = x22 * x370 + x771
    x773 = x21 * x528 + x772
    x774 = x116 * x738 + x153 * x254
    x775 = x68 * x770
    x776 = x55 * (x56 * x774 + x775)
    x777 = x22 * x367 + x776
    x778 = x55 * (x100 * x743 + x165 * x417)
    x779 = x22 * x375 + x778
    x780 = x21 * x535 + x779
    x781 = x55 * (x100 * x747 + x165 * x436)
    x782 = x22 * x373 + x781
    x783 = x171 * x6
    x784 = x55 * (x100 * x752 + x452 * x783)
    x785 = x22 * x381 + x784
    x786 = x21 * x540 + x785
    x787 = x55 * (x100 * x756 + x451 * x783)
    x788 = x22 * x379 + x787
    x789 = x55 * (x100 * x761 + x488 * x515)
    x790 = x22 * x386 + x789
    x791 = x21 * x545 + x790
    x792 = x55 * (x100 * x765 + x487 * x515)
    x793 = x22 * x384 + x792
    x794 = x55 * (x100 * x770 + x521 * x95)
    x795 = x22 * x393 + x794
    x796 = x21 * x550 + x795
    x797 = x55 * (x100 * x774 + x520 * x95)
    x798 = x22 * x390 + x797
    x799 = x55 * (x116 * x770 + x186 * x233)
    x800 = x22 * x399 + x799
    x801 = x21 * x555 + x800
    x802 = x55 * (x116 * x774 + x186 * x254)
    x803 = x22 * x397 + x802
    x804 = x12 * x405
    x805 = x32 + x402 * x408 - x804
    x806 = x6 * x805
    x807 = -x12 * x412 + x402 * x404 + x43
    x808 = x16 * x807
    x809 = -x4 * x808 + x5 * x805
    x810 = x4 * x809
    x811 = x806 + x810
    x812 = x56 * (x806 + x811)
    x813 = x242 * x806 + x56 * x812
    x814 = x55 * (x246 * x806 + x56 * x813)
    x815 = x22 * x429 + x814
    x816 = x22 * x431 + x815
    x817 = x6 * (x402 * x408 - x804 - x808 - x87)
    x818 = x12 * x16
    x819 = x402 * x411 - x433 * x818 + x88
    x820 = x5 * x809 + x817 - x90 * (x5 * x807 - x819 * x90)
    x821 = x4 * x820
    x822 = x6 * x809
    x823 = 2.0 * x822
    x824 = x22 * x427 + x55 * (
        x56 * (x56 * (x56 * (x821 + x823) + x68 * x811) + x68 * x812) + x68 * x813
    )
    x825 = x100 * x806
    x826 = x100 * x810 + x825
    x827 = x443 * x806 + x56 * x826
    x828 = x55 * (x447 * x806 + x56 * x827)
    x829 = x22 * x448 + x828
    x830 = x22 * x449 + x829
    x831 = x22 * x445 + x55 * (
        x56 * (x100 * x56 * (x821 + x823) + x68 * x826) + x68 * x827
    )
    x832 = x12 * x805 + 2.0 * x420
    x833 = x832 * x95
    x834 = x12 * x809 + x418
    x835 = x56 * x834 + x833
    x836 = x300 * x832 + x56 * x835
    x837 = x55 * (x56 * x836 + x585 * x832)
    x838 = x22 * x463 + x837
    x839 = x22 * x464 + x838
    x840 = x12 * x820 + 2.0 * x436
    x841 = x22 * x460 + x55 * (
        x56 * (x56 * (x56 * x840 + x68 * x834) + x68 * x835) + x68 * x836
    )
    x842 = x129 * x806
    x843 = x129 * x810 + x842
    x844 = x55 * (x472 * x806 + x56 * x843)
    x845 = x22 * x473 + x844
    x846 = x22 * x474 + x845
    x847 = x22 * x470 + x55 * (x129 * x56 * (x821 + x823) + x68 * x843)
    x848 = x515 * x832
    x849 = x443 * x834 + x848
    x850 = x4 * x832
    x851 = x55 * (x178 * x6 * x850 + x56 * x849)
    x852 = x22 * x483 + x851
    x853 = x22 * x484 + x852
    x854 = x22 * x480 + x55 * (x56 * (x443 * x840 + x512 * x834) + x68 * x849)
    x855 = x116 * x832 + x455 * x68
    x856 = x855 * x95
    x857 = x116 * x834 + x453
    x858 = x56 * x857 + x856
    x859 = x55 * (x300 * x855 + x56 * x858)
    x860 = x22 * x496 + x859
    x861 = x22 * x497 + x860
    x862 = x116 * x840 + x451 * x68
    x863 = x22 * x494 + x55 * (x56 * (x56 * x862 + x68 * x857) + x68 * x858)
    x864 = x165 * x806
    x865 = x55 * (x165 * x810 + x864)
    x866 = x22 * x503 + x865
    x867 = x22 * x504 + x866
    x868 = x165 * x55 * (x821 + x823) + x22 * x500
    x869 = x783 * x832
    x870 = x55 * (x472 * x834 + x869)
    x871 = x22 * x509 + x870
    x872 = x22 * x510 + x871
    x873 = x22 * x506 + x55 * (x171 * x42 * x834 + x472 * x840)
    x874 = x515 * x855
    x875 = x55 * (x443 * x857 + x874)
    x876 = x22 * x517 + x875
    x877 = x22 * x518 + x876
    x878 = x22 * x513 + x55 * (x443 * x862 + x512 * x857)
    x879 = x116 * x855 + x491 * x68
    x880 = x879 * x95
    x881 = x116 * x857 + x489
    x882 = x55 * (x56 * x881 + x880)
    x883 = x22 * x527 + x882
    x884 = x22 * x528 + x883
    x885 = x116 * x862 + x487 * x68
    x886 = x22 * x523 + x55 * (x56 * x885 + x68 * x881)
    x887 = x193 * x809
    x888 = x22 * x533 + x887
    x889 = x22 * x535 + x888
    x890 = x193 * x820 + x22 * x531
    x891 = x198 * x834
    x892 = x22 * x539 + x891
    x893 = x22 * x540 + x892
    x894 = x198 * x840 + x22 * x537
    x895 = x171 * x857
    x896 = x22 * x544 + x895
    x897 = x22 * x545 + x896
    x898 = x171 * x862 + x22 * x542
    x899 = x141 * x881
    x900 = x22 * x549 + x899
    x901 = x22 * x550 + x900
    x902 = x141 * x885 + x22 * x547
    x903 = x55 * (x116 * x881 + x522)
    x904 = x22 * x554 + x903
    x905 = x22 * x555 + x904
    x906 = x22 * x552 + x55 * (x116 * x885 + x520 * x68)
    x907 = x218 * x558 + 2.0 * x223 - x561 * x9
    x908 = x6 * x907
    x909 = x218 * x560 + 2.0 * x250 - x571 * x572
    x910 = x5 * x907 - x90 * x909
    x911 = x4 * x910
    x912 = (
        x21 * x567
        + x21 * x568
        + x55 * (x246 * x908 + x56 * (x242 * x908 + x56**2 * (2.0 * x908 + x911)))
    )
    x913 = x9 * x907
    x914 = 3.0 * x559
    x915 = x913 + x914
    x916 = x915 * x95
    x917 = x9 * x910
    x918 = 3.0 * x575
    x919 = x917 + x918
    x920 = (
        x21 * x586
        + x21 * x587
        + x55 * (x56 * (x300 * x915 + x56 * (x56 * x919 + x916)) + x585 * x915)
    )
    x921 = x116 * x908
    x922 = x12 * x908
    x923 = (
        x21 * x597
        + x21 * x598
        + x55 * (x274 * x922 + x56 * (x269 * x922 + x56 * (x116 * x911 + x921)))
    )
    x924 = x100 * x915 + x580 * x62
    x925 = x924 * x95
    x926 = x100 * x919 + x582 * x62
    x927 = x21 * x604 + x21 * x605 + x55 * (x300 * x924 + x56 * (x56 * x926 + x925))
    x928 = x116 * (x913 + x914)
    x929 = x928 * x95
    x930 = x116 * (x917 + x918)
    x931 = x21 * x612 + x21 * x613 + x55 * (x300 * x928 + x56 * (x56 * x930 + x929))
    x932 = x153 * x908
    x933 = x21 * x619 + x21 * x620 + x55 * (x329 * x908 + x56 * (x153 * x911 + x932))
    x934 = x100 * x924 + x601 * x62
    x935 = x934 * x95
    x936 = x100 * x926 + x602 * x62
    x937 = x21 * x625 + x21 * x626 + x55 * (x56 * x936 + x935)
    x938 = x100 * x928 + x609 * x62
    x939 = x938 * x95
    x940 = x100 * x930 + x610 * x62
    x941 = x21 * x632 + x21 * x633 + x55 * (x56 * x940 + x939)
    x942 = x153 * (x913 + x914)
    x943 = x942 * x95
    x944 = x153 * (x917 + x918)
    x945 = x21 * x639 + x21 * x640 + x55 * (x56 * x944 + x943)
    x946 = x186 * x908
    x947 = x21 * x645 + x21 * x646 + x55 * (x186 * x911 + x946)
    x948 = x21 * x649 + x21 * x650 + x55 * (x100 * x936 + x62 * x624)
    x949 = x21 * x653 + x21 * x654 + x55 * (x100 * x940 + x62 * x631)
    x950 = x21 * x657 + x21 * x658 + x55 * (x100 * x944 + x62 * x638)
    x951 = x186 * x55 * (x917 + x918) + x21 * x661 + x21 * x662
    x952 = x21 * x665 + x21 * x666 + x214 * x910
    x953 = x218 * x670 + x407 - x673 * x9
    x954 = x6 * x953
    x955 = x218 * x672 + x432 - x571 * x682
    x956 = x5 * x953 - x90 * x955
    x957 = x55 * (x246 * x954 + x56 * (x242 * x954 + x56**2 * (x4 * x956 + 2.0 * x954)))
    x958 = x21 * x679 + x22 * x567 + x957
    x959 = 2.0 * x671
    x960 = x9 * x953 + x959
    x961 = x684 + x9 * x956
    x962 = x55 * (x56 * (x300 * x960 + x56 * (x56 * x961 + x95 * x960)) + x585 * x960)
    x963 = x21 * x693 + x22 * x586 + x962
    x964 = x12 * x953 + x559
    x965 = x12 * x956 + x575
    x966 = x55 * (x56 * (x300 * x964 + x56 * (x56 * x965 + x95 * x964)) + x585 * x964)
    x967 = x21 * x705 + x22 * x597 + x966
    x968 = x100 * x960 + x68 * x688
    x969 = x100 * x961 + x696
    x970 = x55 * (x300 * x968 + x56 * (x56 * x969 + x95 * x968))
    x971 = x21 * x715 + x22 * x604 + x970
    x972 = x68 * x700
    x973 = x100 * x964 + x972
    x974 = x100 * x965 + x708
    x975 = x55 * (x300 * x973 + x56 * (x56 * x974 + x95 * x973))
    x976 = x21 * x725 + x22 * x612 + x975
    x977 = x116 * x964 + x593
    x978 = x116 * (x575 + x965)
    x979 = x55 * (x300 * x977 + x56 * (x56 * x978 + x95 * x977))
    x980 = x21 * x736 + x22 * x619 + x979
    x981 = x100 * x968 + x68 * x711
    x982 = x100 * x969 + x718
    x983 = x55 * (x56 * x982 + x95 * x981)
    x984 = x21 * x745 + x22 * x625 + x983
    x985 = x100 * x973 + x68 * x721
    x986 = x100 * x974 + x728
    x987 = x55 * (x56 * x986 + x95 * x985)
    x988 = x21 * x754 + x22 * x632 + x987
    x989 = x68 * x732
    x990 = x100 * x977 + x989
    x991 = x100 * x978 + x739
    x992 = x55 * (x56 * x991 + x95 * x990)
    x993 = x21 * x763 + x22 * x639 + x992
    x994 = x116 * x977 + x617
    x995 = x116 * x978 + x153 * x575
    x996 = x55 * (x56 * x995 + x95 * x994)
    x997 = x21 * x772 + x22 * x645 + x996
    x998 = x55 * (x100 * x982 + x748)
    x999 = x21 * x779 + x22 * x649 + x998
    x1000 = x55 * (x100 * x986 + x757)
    x1001 = x1000 + x21 * x785 + x22 * x653
    x1002 = x55 * (x100 * x991 + x766)
    x1003 = x1002 + x21 * x790 + x22 * x657
    x1004 = x55 * (x100 * x995 + x775)
    x1005 = x1004 + x21 * x795 + x22 * x661
    x1006 = x55 * (x116 * x995 + x186 * x575)
    x1007 = x1006 + x21 * x800 + x22 * x665
    x1008 = x218 * x805 - x808 * x9
    x1009 = x1008 * x6
    x1010 = x218 * x807 - x571 * x819
    x1011 = x1008 * x5 - x1010 * x90
    x1012 = x22 * x678 + x55 * (
        x1009 * x246 + x56 * (x1009 * x242 + x56**2 * (2.0 * x1009 + x1011 * x4))
    )
    x1013 = x1012 + x22 * x679
    x1014 = x1008 * x9 + x806
    x1015 = x1011 * x9 + x822
    x1016 = x22 * x692 + x55 * (
        x1014 * x585 + x56 * (x1014 * x300 + x56 * (x1014 * x95 + x1015 * x56))
    )
    x1017 = x1016 + x22 * x693
    x1018 = x1008 * x12 + x959
    x1019 = x1011 * x12 + x684
    x1020 = x22 * x704 + x55 * (
        x1018 * x585 + x56 * (x1018 * x300 + x56 * (x1018 * x95 + x1019 * x56))
    )
    x1021 = x1020 + x22 * x705
    x1022 = x100 * x1014 + x825
    x1023 = x100 * (x1015 + x822)
    x1024 = x22 * x714 + x55 * (x1022 * x300 + x56 * (x1022 * x95 + x1023 * x56))
    x1025 = x1024 + x22 * x715
    x1026 = x100 * x1018 + x833
    x1027 = x100 * x1019 + x834 * x95
    x1028 = x22 * x724 + x55 * (x1026 * x300 + x56 * (x1026 * x95 + x1027 * x56))
    x1029 = x1028 + x22 * x725
    x1030 = x1018 * x116 + x972
    x1031 = x1019 * x116 + x708
    x1032 = x22 * x735 + x55 * (x1030 * x300 + x56 * (x1030 * x95 + x1031 * x56))
    x1033 = x1032 + x22 * x736
    x1034 = x100 * x1022 + x842
    x1035 = x100 * x1023 + x129 * x822
    x1036 = x22 * x744 + x55 * (x1034 * x95 + x1035 * x56)
    x1037 = x1036 + x22 * x745
    x1038 = x100 * x1026 + x848
    x1039 = x100 * x1027 + x515 * x834
    x1040 = x22 * x753 + x55 * (x1038 * x95 + x1039 * x56)
    x1041 = x1040 + x22 * x754
    x1042 = x100 * x1030 + x856
    x1043 = x100 * x1031 + x857 * x95
    x1044 = x22 * x762 + x55 * (x1042 * x95 + x1043 * x56)
    x1045 = x1044 + x22 * x763
    x1046 = x1030 * x116 + x989
    x1047 = x1031 * x116 + x739
    x1048 = x22 * x771 + x55 * (x1046 * x95 + x1047 * x56)
    x1049 = x1048 + x22 * x772
    x1050 = x22 * x778 + x55 * (x100 * x1035 + x165 * x822)
    x1051 = x1050 + x22 * x779
    x1052 = x22 * x784 + x55 * (x100 * x1039 + x783 * x834)
    x1053 = x1052 + x22 * x785
    x1054 = x22 * x789 + x55 * (x100 * x1043 + x515 * x857)
    x1055 = x1054 + x22 * x790
    x1056 = x22 * x794 + x55 * (x100 * x1047 + x881 * x95)
    x1057 = x1056 + x22 * x795
    x1058 = x22 * x799 + x55 * (x1047 * x116 + x775)
    x1059 = x1058 + x22 * x800
    x1060 = -x12 * x808 + x402 * x805 + 2.0 * x407
    x1061 = x1060 * x6
    x1062 = x402 * x807 + 2.0 * x432 - x818 * x819
    x1063 = x1060 * x5 - x1062 * x90
    x1064 = x1063 * x4
    x1065 = (
        x22 * x814
        + x22 * x815
        + x55 * (x1061 * x246 + x56 * (x1061 * x242 + x56**2 * (2.0 * x1061 + x1064)))
    )
    x1066 = x100 * x1061
    x1067 = (
        x22 * x828
        + x22 * x829
        + x55 * (x1061 * x447 + x56 * (x1061 * x443 + x56 * (x100 * x1064 + x1066)))
    )
    x1068 = x1060 * x12 + 3.0 * x806
    x1069 = x1068 * x95
    x1070 = x1063 * x12 + 3.0 * x822
    x1071 = (
        x22 * x837
        + x22 * x838
        + x55 * (x1068 * x585 + x56 * (x1068 * x300 + x56 * (x1069 + x1070 * x56)))
    )
    x1072 = x1061 * x129
    x1073 = x22 * x844 + x22 * x845 + x55 * (x1061 * x472 + x56 * (x1064 * x129 + x1072))
    x1074 = x1068 * x515
    x1075 = (
        x22 * x851 + x22 * x852 + x55 * (x1068 * x482 * x6 + x56 * (x1070 * x443 + x1074))
    )
    x1076 = x1068 * x116 + x62 * x832
    x1077 = x1076 * x95
    x1078 = x1070 * x116 + x62 * x834
    x1079 = x22 * x859 + x22 * x860 + x55 * (x1076 * x300 + x56 * (x1077 + x1078 * x56))
    x1080 = x1061 * x165
    x1081 = x22 * x865 + x22 * x866 + x55 * (x1064 * x165 + x1080)
    x1082 = x1068 * x783
    x1083 = x22 * x870 + x22 * x871 + x55 * (x1070 * x472 + x1082)
    x1084 = x1076 * x515
    x1085 = x22 * x875 + x22 * x876 + x55 * (x1078 * x443 + x1084)
    x1086 = x1076 * x116 + x62 * x855
    x1087 = x1086 * x95
    x1088 = x1078 * x116 + x62 * x857
    x1089 = x22 * x882 + x22 * x883 + x55 * (x1087 + x1088 * x56)
    x1090 = x1063 * x193 + x22 * x887 + x22 * x888
    x1091 = x1070 * x198 + x22 * x891 + x22 * x892
    x1092 = x1078 * x171 + x22 * x895 + x22 * x896
    x1093 = x1088 * x141 + x22 * x899 + x22 * x900
    x1094 = x22 * x903 + x22 * x904 + x55 * (x1088 * x116 + x62 * x881)
    x1095 = x0 * x247 + x244
    x1096 = x192 * x4**4
    x1097 = x0 * x224
    x1098 = x0 * x275 + x272
    x1099 = x192 * x81
    x1100 = x1099 * x265
    x1101 = x0 * x289 + x287
    x1102 = x1099 * x12
    x1103 = x0 * x301 + x298
    x1104 = x0 * x274
    x1105 = x0 * x317 + x315
    x1106 = x0 * x330 + x327
    x1107 = x13 * x7
    x1108 = x1097 * x192
    x1109 = x0 * x339 + x336
    x1110 = x0 * x269
    x1111 = x0 * x349 + x346
    x1112 = x0 * x361 + x358
    x1113 = x0 * x370 + x367
    x1114 = x185 * x4
    x1115 = x0 * x375 + x373
    x1116 = x100 * x338 + x169
    x1117 = x0 * x381 + x379
    x1118 = x100 * x348 + x176
    x1119 = x0 * x386 + x384
    x1120 = x100 * x360 + x183
    x1121 = x0 * x393 + x390
    x1122 = x186 * x264 + x190
    x1123 = x0 * x399 + x397
    x1124 = x1096 * x558
    x1125 = x21 * x224
    x1126 = x1096 * x1125 + x1124
    x1127 = x1099 * x580
    x1128 = x1100 * x21 + x1127
    x1129 = x1102 * x558
    x1130 = x1102 * x1125 + x1129
    x1131 = x274 * x601
    x1132 = x21 * x274
    x1133 = x1131 + x1132 * x296
    x1134 = x274 * x609
    x1135 = x1132 * x313 + x1134
    x1136 = x192 * x558
    x1137 = x1107 * x1136
    x1138 = x1125 * x192
    x1139 = x1107 * x1138 + x1137
    x1140 = x269 * x623
    x1141 = x21 * x269
    x1142 = x1140 + x1141 * x338
    x1143 = x269 * x630
    x1144 = x1141 * x348 + x1143
    x1145 = x269 * x637
    x1146 = x1141 * x360 + x1145
    x1147 = x1114 * x1136
    x1148 = x1114 * x1138 + x1147
    x1149 = x55 * (x100 * x623 + x338 * x68)
    x1150 = x1116 * x248 + x1149
    x1151 = x55 * (x100 * x630 + x348 * x68)
    x1152 = x1118 * x248 + x1151
    x1153 = x55 * (x100 * x637 + x360 * x68)
    x1154 = x1120 * x248 + x1153
    x1155 = x186 * x55 * (x578 + x579)
    x1156 = x1122 * x248 + x1155
    x1157 = x214 * x558
    x1158 = x1125 * x214 + x1157
    x1159 = x1096 * x670
    x1160 = x22 * x224
    x1161 = x1096 * x1160 + x1159
    x1162 = x1099 * x688
    x1163 = x1100 * x22 + x1162
    x1164 = x1099 * x700
    x1165 = x1102 * x1160 + x1164
    x1166 = x274 * x711
    x1167 = x22 * x274
    x1168 = x1166 + x1167 * x296
    x1169 = x274 * x721
    x1170 = x1167 * x313 + x1169
    x1171 = x274 * x732
    x1172 = x1160 * x192
    x1173 = x1107 * x1172 + x1171
    x1174 = x269 * x742
    x1175 = x22 * x269
    x1176 = x1174 + x1175 * x338
    x1177 = x269 * x751
    x1178 = x1175 * x348 + x1177
    x1179 = x269 * x760
    x1180 = x1175 * x360 + x1179
    x1181 = x269 * x769
    x1182 = x1114 * x1172 + x1181
    x1183 = x55 * (x100 * x742 + x502)
    x1184 = x1116 * x430 + x1183
    x1185 = x55 * (x100 * x751 + x508)
    x1186 = x1118 * x430 + x1185
    x1187 = x55 * (x100 * x760 + x516)
    x1188 = x1120 * x430 + x1187
    x1189 = x55 * (x100 * x769 + x526)
    x1190 = x1122 * x430 + x1189
    x1191 = x55 * (x116 * x769 + x369)
    x1192 = x1160 * x214 + x1191
    x1193 = x1096 * x907
    x1194 = x1124 * x21 + x1193
    x1195 = x1126 * x21 + x1194
    x1196 = x1099 * x915
    x1197 = x1127 * x21 + x1196
    x1198 = x1128 * x21 + x1197
    x1199 = x1102 * x907
    x1200 = x1129 * x21 + x1199
    x1201 = x1130 * x21 + x1200
    x1202 = x274 * x924
    x1203 = x1131 * x21 + x1202
    x1204 = x1133 * x21 + x1203
    x1205 = x274 * x928
    x1206 = x1134 * x21 + x1205
    x1207 = x1135 * x21 + x1206
    x1208 = x192 * x907
    x1209 = x1107 * x1208
    x1210 = x1137 * x21 + x1209
    x1211 = x1139 * x21 + x1210
    x1212 = x269 * x934
    x1213 = x1140 * x21 + x1212
    x1214 = x1142 * x21 + x1213
    x1215 = x269 * x938
    x1216 = x1143 * x21 + x1215
    x1217 = x1144 * x21 + x1216
    x1218 = x269 * x942
    x1219 = x1145 * x21 + x1218
    x1220 = x1146 * x21 + x1219
    x1221 = x1114 * x1208
    x1222 = x1147 * x21 + x1221
    x1223 = x1148 * x21 + x1222
    x1224 = x55 * (x100 * x934 + x62 * x623)
    x1225 = x1149 * x21 + x1224
    x1226 = x1150 * x21 + x1225
    x1227 = x55 * (x100 * x938 + x62 * x630)
    x1228 = x1151 * x21 + x1227
    x1229 = x1152 * x21 + x1228
    x1230 = x55 * (x100 * x942 + x62 * x637)
    x1231 = x1153 * x21 + x1230
    x1232 = x1154 * x21 + x1231
    x1233 = x186 * x55 * (x913 + x914)
    x1234 = x1155 * x21 + x1233
    x1235 = x1156 * x21 + x1234
    x1236 = x214 * x907
    x1237 = x1157 * x21 + x1236
    x1238 = x1158 * x21 + x1237
    x1239 = x1096 * x953
    x1240 = x1124 * x22 + x1239
    x1241 = x1161 * x21 + x1240
    x1242 = x1099 * x960
    x1243 = x1127 * x22 + x1242
    x1244 = x1163 * x21 + x1243
    x1245 = x1099 * x964
    x1246 = x1129 * x22 + x1245
    x1247 = x1165 * x21 + x1246
    x1248 = x274 * x968
    x1249 = x1131 * x22 + x1248
    x1250 = x1168 * x21 + x1249
    x1251 = x274 * x973
    x1252 = x1134 * x22 + x1251
    x1253 = x1170 * x21 + x1252
    x1254 = x274 * x977
    x1255 = x1137 * x22 + x1254
    x1256 = x1173 * x21 + x1255
    x1257 = x269 * x981
    x1258 = x1140 * x22 + x1257
    x1259 = x1176 * x21 + x1258
    x1260 = x269 * x985
    x1261 = x1143 * x22 + x1260
    x1262 = x1178 * x21 + x1261
    x1263 = x269 * x990
    x1264 = x1145 * x22 + x1263
    x1265 = x1180 * x21 + x1264
    x1266 = x269 * x994
    x1267 = x1147 * x22 + x1266
    x1268 = x1182 * x21 + x1267
    x1269 = x55 * (x100 * x981 + x68 * x742)
    x1270 = x1149 * x22 + x1269
    x1271 = x1184 * x21 + x1270
    x1272 = x55 * (x100 * x985 + x68 * x751)
    x1273 = x1151 * x22 + x1272
    x1274 = x1186 * x21 + x1273
    x1275 = x55 * (x100 * x990 + x68 * x760)
    x1276 = x1153 * x22 + x1275
    x1277 = x1188 * x21 + x1276
    x1278 = x68 * x769
    x1279 = x55 * (x100 * x994 + x1278)
    x1280 = x1155 * x22 + x1279
    x1281 = x1190 * x21 + x1280
    x1282 = x55 * (x116 * x994 + x644)
    x1283 = x1157 * x22 + x1282
    x1284 = x1192 * x21 + x1283
    x1285 = x1008 * x1096
    x1286 = x1159 * x22 + x1285
    x1287 = x1161 * x22 + x1286
    x1288 = x1014 * x1099
    x1289 = x1162 * x22 + x1288
    x1290 = x1163 * x22 + x1289
    x1291 = x1018 * x1099
    x1292 = x1164 * x22 + x1291
    x1293 = x1165 * x22 + x1292
    x1294 = x1022 * x274
    x1295 = x1166 * x22 + x1294
    x1296 = x1168 * x22 + x1295
    x1297 = x1026 * x274
    x1298 = x1169 * x22 + x1297
    x1299 = x1170 * x22 + x1298
    x1300 = x1030 * x274
    x1301 = x1171 * x22 + x1300
    x1302 = x1173 * x22 + x1301
    x1303 = x1034 * x269
    x1304 = x1174 * x22 + x1303
    x1305 = x1176 * x22 + x1304
    x1306 = x1038 * x269
    x1307 = x1177 * x22 + x1306
    x1308 = x1178 * x22 + x1307
    x1309 = x1042 * x269
    x1310 = x1179 * x22 + x1309
    x1311 = x1180 * x22 + x1310
    x1312 = x1046 * x269
    x1313 = x1181 * x22 + x1312
    x1314 = x1182 * x22 + x1313
    x1315 = x55 * (x100 * x1034 + x864)
    x1316 = x1183 * x22 + x1315
    x1317 = x1184 * x22 + x1316
    x1318 = x55 * (x100 * x1038 + x869)
    x1319 = x1185 * x22 + x1318
    x1320 = x1186 * x22 + x1319
    x1321 = x55 * (x100 * x1042 + x874)
    x1322 = x1187 * x22 + x1321
    x1323 = x1188 * x22 + x1322
    x1324 = x55 * (x100 * x1046 + x880)
    x1325 = x1189 * x22 + x1324
    x1326 = x1190 * x22 + x1325
    x1327 = x55 * (x1046 * x116 + x1278)
    x1328 = x1191 * x22 + x1327
    x1329 = x1192 * x22 + x1328
    x1330 = x218 * x907 + 3.0 * x570 - x571 * x909
    x1331 = x1330 * x9
    x1332 = 4.0 * x908
    x1333 = x1331 + x1332
    x1334 = x100 * x1333 + 4.0 * x916
    x1335 = x116 * (x1331 + x1332)
    x1336 = x1330 * x192
    x1337 = x100 * x1334 + 4.0 * x925
    x1338 = x100 * x1335 + 4.0 * x929
    x1339 = x153 * (x1331 + x1332)
    x1340 = x218 * x953 - x571 * x955 + 2.0 * x681
    x1341 = x1096 * x1340
    x1342 = x1340 * x9 + 3.0 * x954
    x1343 = x1099 * x1342
    x1344 = x12 * x1340 + x908
    x1345 = x1099 * x1344
    x1346 = x100 * x1342 + x62 * x960
    x1347 = x1346 * x274
    x1348 = x100 * x1344 + x62 * x964
    x1349 = x1348 * x274
    x1350 = x116 * x1344 + x921
    x1351 = x1350 * x274
    x1352 = x100 * x1346 + x62 * x968
    x1353 = x1352 * x269
    x1354 = x100 * x1348 + x62 * x973
    x1355 = x1354 * x269
    x1356 = x100 * x1350 + x62 * x977
    x1357 = x1356 * x269
    x1358 = x116 * x1350 + x932
    x1359 = x1358 * x269
    x1360 = x55 * (x100 * x1352 + x62 * x981)
    x1361 = x55 * (x100 * x1354 + x62 * x985)
    x1362 = x55 * (x100 * x1356 + x62 * x990)
    x1363 = x55 * (x100 * x1358 + x62 * x994)
    x1364 = x55 * (x116 * x1358 + x946)
    x1365 = x1008 * x218 - x1010 * x571 + x817
    x1366 = x1096 * x1365 + x1239 * x22
    x1367 = 2.0 * x1009 + x1365 * x9
    x1368 = x1099 * x1367 + x1242 * x22
    x1369 = x12 * x1365 + 2.0 * x954
    x1370 = x1099 * x1369 + x1245 * x22
    x1371 = x100 * x1367 + x1014 * x68
    x1372 = x1248 * x22 + x1371 * x274
    x1373 = x100 * x1369 + x1018 * x68
    x1374 = x1251 * x22 + x1373 * x274
    x1375 = x116 * x1369 + x68 * x964
    x1376 = x1254 * x22 + x1375 * x274
    x1377 = x100 * x1371 + x1022 * x68
    x1378 = x1257 * x22 + x1377 * x269
    x1379 = x100 * x1373 + x1026 * x68
    x1380 = x1260 * x22 + x1379 * x269
    x1381 = x100 * x1375 + x1030 * x68
    x1382 = x1263 * x22 + x1381 * x269
    x1383 = x116 * x1375 + x68 * x977
    x1384 = x1266 * x22 + x1383 * x269
    x1385 = x1269 * x22 + x55 * (x100 * x1377 + x1034 * x68)
    x1386 = x1272 * x22 + x55 * (x100 * x1379 + x1038 * x68)
    x1387 = x1275 * x22 + x55 * (x100 * x1381 + x1042 * x68)
    x1388 = x1279 * x22 + x55 * (x100 * x1383 + x1046 * x68)
    x1389 = x1282 * x22 + x55 * (x116 * x1383 + x68 * x994)
    x1390 = x1060 * x218 - x1062 * x571
    x1391 = x1096 * x1390 + x1285 * x22 + x1286 * x22
    x1392 = x1061 + x1390 * x9
    x1393 = x1099 * x1392 + x1288 * x22 + x1289 * x22
    x1394 = 3.0 * x1009 + x12 * x1390
    x1395 = x1099 * x1394 + x1291 * x22 + x1292 * x22
    x1396 = x100 * x1392 + x1066
    x1397 = x1294 * x22 + x1295 * x22 + x1396 * x274
    x1398 = x100 * x1394 + x1069
    x1399 = x1297 * x22 + x1298 * x22 + x1398 * x274
    x1400 = x1018 * x62 + x116 * x1394
    x1401 = x1300 * x22 + x1301 * x22 + x1400 * x274
    x1402 = x100 * x1396 + x1072
    x1403 = x1303 * x22 + x1304 * x22 + x1402 * x269
    x1404 = x100 * x1398 + x1074
    x1405 = x1306 * x22 + x1307 * x22 + x1404 * x269
    x1406 = x100 * x1400 + x1077
    x1407 = x1309 * x22 + x1310 * x22 + x1406 * x269
    x1408 = x1030 * x62 + x116 * x1400
    x1409 = x1312 * x22 + x1313 * x22 + x1408 * x269
    x1410 = x1315 * x22 + x1316 * x22 + x55 * (x100 * x1402 + x1080)
    x1411 = x1318 * x22 + x1319 * x22 + x55 * (x100 * x1404 + x1082)
    x1412 = x1321 * x22 + x1322 * x22 + x55 * (x100 * x1406 + x1084)
    x1413 = x1324 * x22 + x1325 * x22 + x55 * (x100 * x1408 + x1087)
    x1414 = x1327 * x22 + x1328 * x22 + x55 * (x1046 * x62 + x116 * x1408)
    x1415 = x0 * x429 + x427
    x1416 = x0 * x408
    x1417 = x0 * x448 + x445
    x1418 = x1099 * x9
    x1419 = x0 * x463 + x460
    x1420 = x0 * x455
    x1421 = x0 * x473 + x470
    x1422 = x192 * x7
    x1423 = x10 * x1422
    x1424 = x0 * x483 + x480
    x1425 = x1422 * x9
    x1426 = x0 * x496 + x494
    x1427 = x0 * x503 + x500
    x1428 = x198 * x4
    x1429 = x0 * x509 + x506
    x1430 = x10 * x192
    x1431 = x1430 * x4
    x1432 = x0 * x517 + x513
    x1433 = x482 * x491
    x1434 = x0 * x527 + x523
    x1435 = x0 * x533 + x531
    x1436 = x0 * x539 + x537
    x1437 = x0 * x544 + x542
    x1438 = x171 * x491
    x1439 = x0 * x549 + x547
    x1440 = x141 * x525
    x1441 = x0 * x554 + x552
    x1442 = x116 * x525 + x190
    x1443 = x21 * x429 + x678
    x1444 = x21 * x408
    x1445 = x1096 * x1444 + x1159
    x1446 = x21 * x448 + x692
    x1447 = x1162 + x1418 * x1444
    x1448 = x21 * x463 + x704
    x1449 = x21 * x455
    x1450 = x1099 * x1449 + x1164
    x1451 = x21 * x473 + x714
    x1452 = x1166 + x1423 * x1444
    x1453 = x21 * x483 + x724
    x1454 = x1169 + x1425 * x1449
    x1455 = x21 * x496 + x735
    x1456 = x1132 * x491 + x1171
    x1457 = x21 * x503 + x744
    x1458 = x1174 + x1428 * x1444
    x1459 = x21 * x509 + x753
    x1460 = x1177 + x1431 * x1449
    x1461 = x21 * x517 + x762
    x1462 = x1179 + x1433 * x21
    x1463 = x21 * x527 + x771
    x1464 = x1141 * x525 + x1181
    x1465 = x21 * x533 + x778
    x1466 = x1183 + x1444 * x193
    x1467 = x21 * x539 + x784
    x1468 = x1185 + x1449 * x198
    x1469 = x21 * x544 + x789
    x1470 = x1187 + x1438 * x21
    x1471 = x21 * x549 + x794
    x1472 = x1189 + x1440 * x21
    x1473 = x21 * x554 + x799
    x1474 = x1191 + x1442 * x248
    x1475 = x1096 * x805
    x1476 = x22 * x408
    x1477 = x1096 * x1476 + x1475
    x1478 = x1418 * x805
    x1479 = x1418 * x1476 + x1478
    x1480 = x1099 * x832
    x1481 = x22 * x455
    x1482 = x1099 * x1481 + x1480
    x1483 = x1423 * x805
    x1484 = x1423 * x1476 + x1483
    x1485 = x1425 * x832
    x1486 = x1425 * x1481 + x1485
    x1487 = x274 * x855
    x1488 = x1167 * x491 + x1487
    x1489 = x1428 * x805
    x1490 = x1428 * x1476 + x1489
    x1491 = x1430 * x850
    x1492 = x1431 * x1481 + x1491
    x1493 = x482 * x855
    x1494 = x1433 * x22 + x1493
    x1495 = x269 * x879
    x1496 = x1175 * x525 + x1495
    x1497 = x193 * x805
    x1498 = x1476 * x193 + x1497
    x1499 = x198 * x832
    x1500 = x1481 * x198 + x1499
    x1501 = x171 * x855
    x1502 = x1438 * x22 + x1501
    x1503 = x141 * x879
    x1504 = x1440 * x22 + x1503
    x1505 = x55 * (x116 * x879 + x525 * x68)
    x1506 = x1442 * x430 + x1505
    x1507 = x1159 * x21 + x1239
    x1508 = x1445 * x21 + x1507
    x1509 = x1162 * x21 + x1242
    x1510 = x1447 * x21 + x1509
    x1511 = x1164 * x21 + x1245
    x1512 = x1450 * x21 + x1511
    x1513 = x1166 * x21 + x1248
    x1514 = x1452 * x21 + x1513
    x1515 = x1169 * x21 + x1251
    x1516 = x1454 * x21 + x1515
    x1517 = x1171 * x21 + x1254
    x1518 = x1456 * x21 + x1517
    x1519 = x1174 * x21 + x1257
    x1520 = x1458 * x21 + x1519
    x1521 = x1177 * x21 + x1260
    x1522 = x1460 * x21 + x1521
    x1523 = x1179 * x21 + x1263
    x1524 = x1462 * x21 + x1523
    x1525 = x1181 * x21 + x1266
    x1526 = x1464 * x21 + x1525
    x1527 = x1183 * x21 + x1269
    x1528 = x1466 * x21 + x1527
    x1529 = x1185 * x21 + x1272
    x1530 = x1468 * x21 + x1529
    x1531 = x1187 * x21 + x1275
    x1532 = x1470 * x21 + x1531
    x1533 = x1189 * x21 + x1279
    x1534 = x1472 * x21 + x1533
    x1535 = x1191 * x21 + x1282
    x1536 = x1474 * x21 + x1535
    x1537 = x1286 + x1477 * x21
    x1538 = x1289 + x1479 * x21
    x1539 = x1292 + x1482 * x21
    x1540 = x1295 + x1484 * x21
    x1541 = x1298 + x1486 * x21
    x1542 = x1301 + x1488 * x21
    x1543 = x1304 + x1490 * x21
    x1544 = x1307 + x1492 * x21
    x1545 = x1310 + x1494 * x21
    x1546 = x1313 + x1496 * x21
    x1547 = x1316 + x1498 * x21
    x1548 = x1319 + x1500 * x21
    x1549 = x1322 + x1502 * x21
    x1550 = x1325 + x1504 * x21
    x1551 = x1328 + x1506 * x21
    x1552 = x1060 * x1096
    x1553 = x1475 * x22 + x1552
    x1554 = x1477 * x22 + x1553
    x1555 = x1060 * x1418
    x1556 = x1478 * x22 + x1555
    x1557 = x1479 * x22 + x1556
    x1558 = x1068 * x1099
    x1559 = x1480 * x22 + x1558
    x1560 = x1482 * x22 + x1559
    x1561 = x1060 * x1423
    x1562 = x1483 * x22 + x1561
    x1563 = x1484 * x22 + x1562
    x1564 = x1068 * x1425
    x1565 = x1485 * x22 + x1564
    x1566 = x1486 * x22 + x1565
    x1567 = x1076 * x274
    x1568 = x1487 * x22 + x1567
    x1569 = x1488 * x22 + x1568
    x1570 = x1060 * x1428
    x1571 = x1489 * x22 + x1570
    x1572 = x1490 * x22 + x1571
    x1573 = x1068 * x1431
    x1574 = x1491 * x22 + x1573
    x1575 = x1492 * x22 + x1574
    x1576 = x1076 * x482
    x1577 = x1493 * x22 + x1576
    x1578 = x1494 * x22 + x1577
    x1579 = x1086 * x269
    x1580 = x1495 * x22 + x1579
    x1581 = x1496 * x22 + x1580
    x1582 = x1060 * x193
    x1583 = x1497 * x22 + x1582
    x1584 = x1498 * x22 + x1583
    x1585 = x1068 * x198
    x1586 = x1499 * x22 + x1585
    x1587 = x1500 * x22 + x1586
    x1588 = x1076 * x171
    x1589 = x1501 * x22 + x1588
    x1590 = x1502 * x22 + x1589
    x1591 = x1086 * x141
    x1592 = x1503 * x22 + x1591
    x1593 = x1504 * x22 + x1592
    x1594 = x55 * (x1086 * x116 + x62 * x879)
    x1595 = x1505 * x22 + x1594
    x1596 = x1506 * x22 + x1595
    x1597 = x1060 * x402 - x1062 * x818 + 3.0 * x817
    x1598 = 4.0 * x1061 + x12 * x1597
    x1599 = 4.0 * x1069 + x116 * x1598
    x1600 = 4.0 * x1077 + x116 * x1599

    # 450 item(s)
    result[0, 0, 0] = numpy.sum(
        x99
        * (
            x0 * x75
            + x0 * x80
            + x0 * (x0 * (x79 + x85 * x86) + x80)
            + x55
            * (x56 * (x56 * (x54 * x96 + x56 * (x92 + x94)) + x63 * x96) + x70 * x96)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x115
        * (
            x0 * x107
            + x0 * x112
            + x0 * (x0 * (x111 + x114 * x86) + x112)
            + x55 * (x103 * x96 + x56 * (x100 * x56 * (x92 + x94) + x101 * x96))
        )
    )
    result[0, 0, 2] = numpy.sum(
        x115
        * (
            x0 * x123
            + x0 * x126
            + x0 * (x0 * (x125 + x127 * x86) + x126)
            + x55 * (x119 * x96 + x56 * (x116 * x56 * (x92 + x94) + x117 * x96))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x140
        * (
            x0 * x132
            + x0 * x136
            + x0 * (x0 * (x135 + x138 * x86) + x136)
            + x55 * (x129 * x56 * (x92 + x94) + x130 * x96)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x152
        * (
            x0 * x145
            + x0 * x150
            + x0 * (x0 * (x149 + x151 * x86) + x150)
            + x55 * (x142 * x56 * (x92 + x94) + x143 * x96)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x140
        * (
            x0 * x156
            + x0 * x160
            + x0 * (x0 * (x159 + x162 * x86) + x160)
            + x55 * (x153 * x56 * (x92 + x94) + x154 * x96)
        )
    )
    result[0, 0, 6] = numpy.sum(
        x115
        * (
            x0 * x166
            + x0 * x168
            + x0 * (x0 * (x167 + x170 * x86) + x168)
            + x165 * x55 * (x92 + x94)
        )
    )
    result[0, 0, 7] = numpy.sum(
        x152
        * (
            x0 * x173
            + x0 * x175
            + x0 * (x0 * (x174 + x177 * x86) + x175)
            + x172 * x55 * (x92 + x94)
        )
    )
    result[0, 0, 8] = numpy.sum(
        x152
        * (
            x0 * x180
            + x0 * x182
            + x0 * (x0 * (x181 + x184 * x86) + x182)
            + x179 * x55 * (x92 + x94)
        )
    )
    result[0, 0, 9] = numpy.sum(
        x115
        * (
            x0 * x187
            + x0 * x189
            + x0 * (x0 * (x188 + x191 * x86) + x189)
            + x186 * x55 * (x92 + x94)
        )
    )
    result[0, 0, 10] = numpy.sum(
        x99
        * (x0 * x194 + x0 * x196 + x0 * (x0 * (x193 * x197 + x195) + x196) + x193 * x91)
    )
    result[0, 0, 11] = numpy.sum(
        x115
        * (x0 * x200 + x0 * x202 + x0 * (x0 * (x197 * x199 + x201) + x202) + x199 * x91)
    )
    result[0, 0, 12] = numpy.sum(
        x140
        * (x0 * x205 + x0 * x208 + x0 * (x0 * (x197 * x206 + x207) + x208) + x206 * x91)
    )
    result[0, 0, 13] = numpy.sum(
        x115
        * (x0 * x210 + x0 * x213 + x0 * (x0 * (x197 * x211 + x212) + x213) + x211 * x91)
    )
    result[0, 0, 14] = numpy.sum(
        x99
        * (x0 * x215 + x0 * x217 + x0 * (x0 * (x197 * x214 + x216) + x217) + x214 * x91)
    )
    result[0, 1, 0] = numpy.sum(
        x257 * (x0 * x245 + x0 * (x0 * x249 + x245) + x21 * x75 + x256)
    )
    result[0, 1, 1] = numpy.sum(
        x152 * (x0 * x273 + x0 * (x0 * x276 + x273) + x107 * x21 + x279)
    )
    result[0, 1, 2] = numpy.sum(
        x152 * (x0 * x288 + x0 * (x0 * x290 + x288) + x123 * x21 + x291)
    )
    result[0, 1, 3] = numpy.sum(
        x306 * (x0 * x299 + x0 * (x0 * x302 + x299) + x132 * x21 + x304)
    )
    result[0, 1, 4] = numpy.sum(
        x322 * (x0 * x316 + x0 * (x0 * x318 + x316) + x145 * x21 + x321)
    )
    result[0, 1, 5] = numpy.sum(
        x306 * (x0 * x328 + x0 * (x0 * x331 + x328) + x156 * x21 + x332)
    )
    result[0, 1, 6] = numpy.sum(
        x152 * (x0 * x337 + x0 * (x0 * x340 + x337) + x166 * x21 + x342)
    )
    result[0, 1, 7] = numpy.sum(
        x322 * (x0 * x347 + x0 * (x0 * x350 + x347) + x173 * x21 + x352)
    )
    result[0, 1, 8] = numpy.sum(
        x322 * (x0 * x359 + x0 * (x0 * x362 + x359) + x180 * x21 + x365)
    )
    result[0, 1, 9] = numpy.sum(
        x152 * (x0 * x368 + x0 * (x0 * x371 + x368) + x187 * x21 + x372)
    )
    result[0, 1, 10] = numpy.sum(
        x257 * (x0 * x374 + x0 * (x0 * x377 + x374) + x194 * x21 + x378)
    )
    result[0, 1, 11] = numpy.sum(
        x152 * (x0 * x380 + x0 * (x0 * x382 + x380) + x200 * x21 + x383)
    )
    result[0, 1, 12] = numpy.sum(
        x306 * (x0 * x385 + x0 * (x0 * x387 + x385) + x205 * x21 + x388)
    )
    result[0, 1, 13] = numpy.sum(
        x152 * (x0 * x391 + x0 * (x0 * x394 + x391) + x21 * x210 + x396)
    )
    result[0, 1, 14] = numpy.sum(
        x257 * (x0 * x398 + x0 * (x0 * x400 + x398) + x21 * x215 + x401)
    )
    result[0, 2, 0] = numpy.sum(
        x257 * (x0 * x428 + x0 * (x0 * x431 + x428) + x22 * x75 + x438)
    )
    result[0, 2, 1] = numpy.sum(
        x152 * (x0 * x446 + x0 * (x0 * x449 + x446) + x107 * x22 + x450)
    )
    result[0, 2, 2] = numpy.sum(
        x152 * (x0 * x461 + x0 * (x0 * x464 + x461) + x123 * x22 + x466)
    )
    result[0, 2, 3] = numpy.sum(
        x306 * (x0 * x471 + x0 * (x0 * x474 + x471) + x132 * x22 + x475)
    )
    result[0, 2, 4] = numpy.sum(
        x322 * (x0 * x481 + x0 * (x0 * x484 + x481) + x145 * x22 + x486)
    )
    result[0, 2, 5] = numpy.sum(
        x306 * (x0 * x495 + x0 * (x0 * x497 + x495) + x156 * x22 + x499)
    )
    result[0, 2, 6] = numpy.sum(
        x152 * (x0 * x501 + x0 * (x0 * x504 + x501) + x166 * x22 + x505)
    )
    result[0, 2, 7] = numpy.sum(
        x322 * (x0 * x507 + x0 * (x0 * x510 + x507) + x173 * x22 + x511)
    )
    result[0, 2, 8] = numpy.sum(
        x322 * (x0 * x514 + x0 * (x0 * x518 + x514) + x180 * x22 + x519)
    )
    result[0, 2, 9] = numpy.sum(
        x152 * (x0 * x524 + x0 * (x0 * x528 + x524) + x187 * x22 + x530)
    )
    result[0, 2, 10] = numpy.sum(
        x257 * (x0 * x532 + x0 * (x0 * x535 + x532) + x194 * x22 + x536)
    )
    result[0, 2, 11] = numpy.sum(
        x152 * (x0 * x538 + x0 * (x0 * x540 + x538) + x200 * x22 + x541)
    )
    result[0, 2, 12] = numpy.sum(
        x306 * (x0 * x543 + x0 * (x0 * x545 + x543) + x205 * x22 + x546)
    )
    result[0, 2, 13] = numpy.sum(
        x152 * (x0 * x548 + x0 * (x0 * x550 + x548) + x210 * x22 + x551)
    )
    result[0, 2, 14] = numpy.sum(
        x257 * (x0 * x553 + x0 * (x0 * x555 + x553) + x215 * x22 + x556)
    )
    result[0, 3, 0] = numpy.sum(x257 * (x0 * x569 + x21 * x245 + x577))
    result[0, 3, 1] = numpy.sum(x152 * (x0 * x588 + x21 * x273 + x592))
    result[0, 3, 2] = numpy.sum(x152 * (x0 * x599 + x21 * x288 + x600))
    result[0, 3, 3] = numpy.sum(x306 * (x0 * x606 + x21 * x299 + x608))
    result[0, 3, 4] = numpy.sum(x322 * (x0 * x614 + x21 * x316 + x616))
    result[0, 3, 5] = numpy.sum(x306 * (x0 * x621 + x21 * x328 + x622))
    result[0, 3, 6] = numpy.sum(x152 * (x0 * x627 + x21 * x337 + x629))
    result[0, 3, 7] = numpy.sum(x322 * (x0 * x634 + x21 * x347 + x636))
    result[0, 3, 8] = numpy.sum(x322 * (x0 * x641 + x21 * x359 + x643))
    result[0, 3, 9] = numpy.sum(x152 * (x0 * x647 + x21 * x368 + x648))
    result[0, 3, 10] = numpy.sum(x257 * (x0 * x651 + x21 * x374 + x652))
    result[0, 3, 11] = numpy.sum(x152 * (x0 * x655 + x21 * x380 + x656))
    result[0, 3, 12] = numpy.sum(x306 * (x0 * x659 + x21 * x385 + x660))
    result[0, 3, 13] = numpy.sum(x152 * (x0 * x663 + x21 * x391 + x664))
    result[0, 3, 14] = numpy.sum(x257 * (x0 * x667 + x21 * x398 + x668))
    result[0, 4, 0] = numpy.sum(x687 * (x0 * x680 + x21 * x428 + x686))
    result[0, 4, 1] = numpy.sum(x699 * (x0 * x694 + x21 * x446 + x698))
    result[0, 4, 2] = numpy.sum(x699 * (x0 * x706 + x21 * x461 + x710))
    result[0, 4, 3] = numpy.sum(x322 * (x0 * x716 + x21 * x471 + x720))
    result[0, 4, 4] = numpy.sum(x731 * (x0 * x726 + x21 * x481 + x730))
    result[0, 4, 5] = numpy.sum(x322 * (x0 * x737 + x21 * x495 + x741))
    result[0, 4, 6] = numpy.sum(x699 * (x0 * x746 + x21 * x501 + x750))
    result[0, 4, 7] = numpy.sum(x731 * (x0 * x755 + x21 * x507 + x759))
    result[0, 4, 8] = numpy.sum(x731 * (x0 * x764 + x21 * x514 + x768))
    result[0, 4, 9] = numpy.sum(x699 * (x0 * x773 + x21 * x524 + x777))
    result[0, 4, 10] = numpy.sum(x687 * (x0 * x780 + x21 * x532 + x782))
    result[0, 4, 11] = numpy.sum(x699 * (x0 * x786 + x21 * x538 + x788))
    result[0, 4, 12] = numpy.sum(x322 * (x0 * x791 + x21 * x543 + x793))
    result[0, 4, 13] = numpy.sum(x699 * (x0 * x796 + x21 * x548 + x798))
    result[0, 4, 14] = numpy.sum(x687 * (x0 * x801 + x21 * x553 + x803))
    result[0, 5, 0] = numpy.sum(x257 * (x0 * x816 + x22 * x428 + x824))
    result[0, 5, 1] = numpy.sum(x152 * (x0 * x830 + x22 * x446 + x831))
    result[0, 5, 2] = numpy.sum(x152 * (x0 * x839 + x22 * x461 + x841))
    result[0, 5, 3] = numpy.sum(x306 * (x0 * x846 + x22 * x471 + x847))
    result[0, 5, 4] = numpy.sum(x322 * (x0 * x853 + x22 * x481 + x854))
    result[0, 5, 5] = numpy.sum(x306 * (x0 * x861 + x22 * x495 + x863))
    result[0, 5, 6] = numpy.sum(x152 * (x0 * x867 + x22 * x501 + x868))
    result[0, 5, 7] = numpy.sum(x322 * (x0 * x872 + x22 * x507 + x873))
    result[0, 5, 8] = numpy.sum(x322 * (x0 * x877 + x22 * x514 + x878))
    result[0, 5, 9] = numpy.sum(x152 * (x0 * x884 + x22 * x524 + x886))
    result[0, 5, 10] = numpy.sum(x257 * (x0 * x889 + x22 * x532 + x890))
    result[0, 5, 11] = numpy.sum(x152 * (x0 * x893 + x22 * x538 + x894))
    result[0, 5, 12] = numpy.sum(x306 * (x0 * x897 + x22 * x543 + x898))
    result[0, 5, 13] = numpy.sum(x152 * (x0 * x901 + x22 * x548 + x902))
    result[0, 5, 14] = numpy.sum(x257 * (x0 * x905 + x22 * x553 + x906))
    result[0, 6, 0] = numpy.sum(x99 * (x21 * x569 + x912))
    result[0, 6, 1] = numpy.sum(x115 * (x21 * x588 + x920))
    result[0, 6, 2] = numpy.sum(x115 * (x21 * x599 + x923))
    result[0, 6, 3] = numpy.sum(x140 * (x21 * x606 + x927))
    result[0, 6, 4] = numpy.sum(x152 * (x21 * x614 + x931))
    result[0, 6, 5] = numpy.sum(x140 * (x21 * x621 + x933))
    result[0, 6, 6] = numpy.sum(x115 * (x21 * x627 + x937))
    result[0, 6, 7] = numpy.sum(x152 * (x21 * x634 + x941))
    result[0, 6, 8] = numpy.sum(x152 * (x21 * x641 + x945))
    result[0, 6, 9] = numpy.sum(x115 * (x21 * x647 + x947))
    result[0, 6, 10] = numpy.sum(x99 * (x21 * x651 + x948))
    result[0, 6, 11] = numpy.sum(x115 * (x21 * x655 + x949))
    result[0, 6, 12] = numpy.sum(x140 * (x21 * x659 + x950))
    result[0, 6, 13] = numpy.sum(x115 * (x21 * x663 + x951))
    result[0, 6, 14] = numpy.sum(x99 * (x21 * x667 + x952))
    result[0, 7, 0] = numpy.sum(x257 * (x21 * x680 + x958))
    result[0, 7, 1] = numpy.sum(x152 * (x21 * x694 + x963))
    result[0, 7, 2] = numpy.sum(x152 * (x21 * x706 + x967))
    result[0, 7, 3] = numpy.sum(x306 * (x21 * x716 + x971))
    result[0, 7, 4] = numpy.sum(x322 * (x21 * x726 + x976))
    result[0, 7, 5] = numpy.sum(x306 * (x21 * x737 + x980))
    result[0, 7, 6] = numpy.sum(x152 * (x21 * x746 + x984))
    result[0, 7, 7] = numpy.sum(x322 * (x21 * x755 + x988))
    result[0, 7, 8] = numpy.sum(x322 * (x21 * x764 + x993))
    result[0, 7, 9] = numpy.sum(x152 * (x21 * x773 + x997))
    result[0, 7, 10] = numpy.sum(x257 * (x21 * x780 + x999))
    result[0, 7, 11] = numpy.sum(x152 * (x1001 + x21 * x786))
    result[0, 7, 12] = numpy.sum(x306 * (x1003 + x21 * x791))
    result[0, 7, 13] = numpy.sum(x152 * (x1005 + x21 * x796))
    result[0, 7, 14] = numpy.sum(x257 * (x1007 + x21 * x801))
    result[0, 8, 0] = numpy.sum(x257 * (x1013 + x21 * x816))
    result[0, 8, 1] = numpy.sum(x152 * (x1017 + x21 * x830))
    result[0, 8, 2] = numpy.sum(x152 * (x1021 + x21 * x839))
    result[0, 8, 3] = numpy.sum(x306 * (x1025 + x21 * x846))
    result[0, 8, 4] = numpy.sum(x322 * (x1029 + x21 * x853))
    result[0, 8, 5] = numpy.sum(x306 * (x1033 + x21 * x861))
    result[0, 8, 6] = numpy.sum(x152 * (x1037 + x21 * x867))
    result[0, 8, 7] = numpy.sum(x322 * (x1041 + x21 * x872))
    result[0, 8, 8] = numpy.sum(x322 * (x1045 + x21 * x877))
    result[0, 8, 9] = numpy.sum(x152 * (x1049 + x21 * x884))
    result[0, 8, 10] = numpy.sum(x257 * (x1051 + x21 * x889))
    result[0, 8, 11] = numpy.sum(x152 * (x1053 + x21 * x893))
    result[0, 8, 12] = numpy.sum(x306 * (x1055 + x21 * x897))
    result[0, 8, 13] = numpy.sum(x152 * (x1057 + x21 * x901))
    result[0, 8, 14] = numpy.sum(x257 * (x1059 + x21 * x905))
    result[0, 9, 0] = numpy.sum(x99 * (x1065 + x22 * x816))
    result[0, 9, 1] = numpy.sum(x115 * (x1067 + x22 * x830))
    result[0, 9, 2] = numpy.sum(x115 * (x1071 + x22 * x839))
    result[0, 9, 3] = numpy.sum(x140 * (x1073 + x22 * x846))
    result[0, 9, 4] = numpy.sum(x152 * (x1075 + x22 * x853))
    result[0, 9, 5] = numpy.sum(x140 * (x1079 + x22 * x861))
    result[0, 9, 6] = numpy.sum(x115 * (x1081 + x22 * x867))
    result[0, 9, 7] = numpy.sum(x152 * (x1083 + x22 * x872))
    result[0, 9, 8] = numpy.sum(x152 * (x1085 + x22 * x877))
    result[0, 9, 9] = numpy.sum(x115 * (x1089 + x22 * x884))
    result[0, 9, 10] = numpy.sum(x99 * (x1090 + x22 * x889))
    result[0, 9, 11] = numpy.sum(x115 * (x1091 + x22 * x893))
    result[0, 9, 12] = numpy.sum(x140 * (x1092 + x22 * x897))
    result[0, 9, 13] = numpy.sum(x115 * (x1093 + x22 * x901))
    result[0, 9, 14] = numpy.sum(x99 * (x1094 + x22 * x905))
    result[1, 0, 0] = numpy.sum(
        x99 * (x0 * x1095 + x0 * x244 + x0 * (x0 * (x1096 * x1097 + x247) + x1095) + x256)
    )
    result[1, 0, 1] = numpy.sum(
        x115 * (x0 * x1098 + x0 * x272 + x0 * (x0 * (x0 * x1100 + x275) + x1098) + x279)
    )
    result[1, 0, 2] = numpy.sum(
        x115
        * (x0 * x1101 + x0 * x287 + x0 * (x0 * (x1097 * x1102 + x289) + x1101) + x291)
    )
    result[1, 0, 3] = numpy.sum(
        x140 * (x0 * x1103 + x0 * x298 + x0 * (x0 * (x1104 * x296 + x301) + x1103) + x304)
    )
    result[1, 0, 4] = numpy.sum(
        x152 * (x0 * x1105 + x0 * x315 + x0 * (x0 * (x1104 * x313 + x317) + x1105) + x321)
    )
    result[1, 0, 5] = numpy.sum(
        x140
        * (x0 * x1106 + x0 * x327 + x0 * (x0 * (x1107 * x1108 + x330) + x1106) + x332)
    )
    result[1, 0, 6] = numpy.sum(
        x115 * (x0 * x1109 + x0 * x336 + x0 * (x0 * (x1110 * x338 + x339) + x1109) + x342)
    )
    result[1, 0, 7] = numpy.sum(
        x152 * (x0 * x1111 + x0 * x346 + x0 * (x0 * (x1110 * x348 + x349) + x1111) + x352)
    )
    result[1, 0, 8] = numpy.sum(
        x152 * (x0 * x1112 + x0 * x358 + x0 * (x0 * (x1110 * x360 + x361) + x1112) + x365)
    )
    result[1, 0, 9] = numpy.sum(
        x115
        * (x0 * x1113 + x0 * x367 + x0 * (x0 * (x1108 * x1114 + x370) + x1113) + x372)
    )
    result[1, 0, 10] = numpy.sum(
        x99 * (x0 * x1115 + x0 * x373 + x0 * (x0 * (x1116 * x86 + x375) + x1115) + x378)
    )
    result[1, 0, 11] = numpy.sum(
        x115 * (x0 * x1117 + x0 * x379 + x0 * (x0 * (x1118 * x86 + x381) + x1117) + x383)
    )
    result[1, 0, 12] = numpy.sum(
        x140 * (x0 * x1119 + x0 * x384 + x0 * (x0 * (x1120 * x86 + x386) + x1119) + x388)
    )
    result[1, 0, 13] = numpy.sum(
        x115 * (x0 * x1121 + x0 * x390 + x0 * (x0 * (x1122 * x86 + x393) + x1121) + x396)
    )
    result[1, 0, 14] = numpy.sum(
        x99 * (x0 * x1123 + x0 * x397 + x0 * (x0 * (x1097 * x214 + x399) + x1123) + x401)
    )
    result[1, 1, 0] = numpy.sum(x257 * (x0 * x568 + x0 * (x0 * x1126 + x568) + x577))
    result[1, 1, 1] = numpy.sum(x152 * (x0 * x587 + x0 * (x0 * x1128 + x587) + x592))
    result[1, 1, 2] = numpy.sum(x152 * (x0 * x598 + x0 * (x0 * x1130 + x598) + x600))
    result[1, 1, 3] = numpy.sum(x306 * (x0 * x605 + x0 * (x0 * x1133 + x605) + x608))
    result[1, 1, 4] = numpy.sum(x322 * (x0 * x613 + x0 * (x0 * x1135 + x613) + x616))
    result[1, 1, 5] = numpy.sum(x306 * (x0 * x620 + x0 * (x0 * x1139 + x620) + x622))
    result[1, 1, 6] = numpy.sum(x152 * (x0 * x626 + x0 * (x0 * x1142 + x626) + x629))
    result[1, 1, 7] = numpy.sum(x322 * (x0 * x633 + x0 * (x0 * x1144 + x633) + x636))
    result[1, 1, 8] = numpy.sum(x322 * (x0 * x640 + x0 * (x0 * x1146 + x640) + x643))
    result[1, 1, 9] = numpy.sum(x152 * (x0 * x646 + x0 * (x0 * x1148 + x646) + x648))
    result[1, 1, 10] = numpy.sum(x257 * (x0 * x650 + x0 * (x0 * x1150 + x650) + x652))
    result[1, 1, 11] = numpy.sum(x152 * (x0 * x654 + x0 * (x0 * x1152 + x654) + x656))
    result[1, 1, 12] = numpy.sum(x306 * (x0 * x658 + x0 * (x0 * x1154 + x658) + x660))
    result[1, 1, 13] = numpy.sum(x152 * (x0 * x662 + x0 * (x0 * x1156 + x662) + x664))
    result[1, 1, 14] = numpy.sum(x257 * (x0 * x666 + x0 * (x0 * x1158 + x666) + x668))
    result[1, 2, 0] = numpy.sum(x257 * (x0 * x679 + x0 * (x0 * x1161 + x679) + x686))
    result[1, 2, 1] = numpy.sum(x152 * (x0 * x693 + x0 * (x0 * x1163 + x693) + x698))
    result[1, 2, 2] = numpy.sum(x152 * (x0 * x705 + x0 * (x0 * x1165 + x705) + x710))
    result[1, 2, 3] = numpy.sum(x306 * (x0 * x715 + x0 * (x0 * x1168 + x715) + x720))
    result[1, 2, 4] = numpy.sum(x322 * (x0 * x725 + x0 * (x0 * x1170 + x725) + x730))
    result[1, 2, 5] = numpy.sum(x306 * (x0 * x736 + x0 * (x0 * x1173 + x736) + x741))
    result[1, 2, 6] = numpy.sum(x152 * (x0 * x745 + x0 * (x0 * x1176 + x745) + x750))
    result[1, 2, 7] = numpy.sum(x322 * (x0 * x754 + x0 * (x0 * x1178 + x754) + x759))
    result[1, 2, 8] = numpy.sum(x322 * (x0 * x763 + x0 * (x0 * x1180 + x763) + x768))
    result[1, 2, 9] = numpy.sum(x152 * (x0 * x772 + x0 * (x0 * x1182 + x772) + x777))
    result[1, 2, 10] = numpy.sum(x257 * (x0 * x779 + x0 * (x0 * x1184 + x779) + x782))
    result[1, 2, 11] = numpy.sum(x152 * (x0 * x785 + x0 * (x0 * x1186 + x785) + x788))
    result[1, 2, 12] = numpy.sum(x306 * (x0 * x790 + x0 * (x0 * x1188 + x790) + x793))
    result[1, 2, 13] = numpy.sum(x152 * (x0 * x795 + x0 * (x0 * x1190 + x795) + x798))
    result[1, 2, 14] = numpy.sum(x257 * (x0 * x800 + x0 * (x0 * x1192 + x800) + x803))
    result[1, 3, 0] = numpy.sum(x257 * (x0 * x1195 + x912))
    result[1, 3, 1] = numpy.sum(x152 * (x0 * x1198 + x920))
    result[1, 3, 2] = numpy.sum(x152 * (x0 * x1201 + x923))
    result[1, 3, 3] = numpy.sum(x306 * (x0 * x1204 + x927))
    result[1, 3, 4] = numpy.sum(x322 * (x0 * x1207 + x931))
    result[1, 3, 5] = numpy.sum(x306 * (x0 * x1211 + x933))
    result[1, 3, 6] = numpy.sum(x152 * (x0 * x1214 + x937))
    result[1, 3, 7] = numpy.sum(x322 * (x0 * x1217 + x941))
    result[1, 3, 8] = numpy.sum(x322 * (x0 * x1220 + x945))
    result[1, 3, 9] = numpy.sum(x152 * (x0 * x1223 + x947))
    result[1, 3, 10] = numpy.sum(x257 * (x0 * x1226 + x948))
    result[1, 3, 11] = numpy.sum(x152 * (x0 * x1229 + x949))
    result[1, 3, 12] = numpy.sum(x306 * (x0 * x1232 + x950))
    result[1, 3, 13] = numpy.sum(x152 * (x0 * x1235 + x951))
    result[1, 3, 14] = numpy.sum(x257 * (x0 * x1238 + x952))
    result[1, 4, 0] = numpy.sum(x687 * (x0 * x1241 + x958))
    result[1, 4, 1] = numpy.sum(x699 * (x0 * x1244 + x963))
    result[1, 4, 2] = numpy.sum(x699 * (x0 * x1247 + x967))
    result[1, 4, 3] = numpy.sum(x322 * (x0 * x1250 + x971))
    result[1, 4, 4] = numpy.sum(x731 * (x0 * x1253 + x976))
    result[1, 4, 5] = numpy.sum(x322 * (x0 * x1256 + x980))
    result[1, 4, 6] = numpy.sum(x699 * (x0 * x1259 + x984))
    result[1, 4, 7] = numpy.sum(x731 * (x0 * x1262 + x988))
    result[1, 4, 8] = numpy.sum(x731 * (x0 * x1265 + x993))
    result[1, 4, 9] = numpy.sum(x699 * (x0 * x1268 + x997))
    result[1, 4, 10] = numpy.sum(x687 * (x0 * x1271 + x999))
    result[1, 4, 11] = numpy.sum(x699 * (x0 * x1274 + x1001))
    result[1, 4, 12] = numpy.sum(x322 * (x0 * x1277 + x1003))
    result[1, 4, 13] = numpy.sum(x699 * (x0 * x1281 + x1005))
    result[1, 4, 14] = numpy.sum(x687 * (x0 * x1284 + x1007))
    result[1, 5, 0] = numpy.sum(x257 * (x0 * x1287 + x1013))
    result[1, 5, 1] = numpy.sum(x152 * (x0 * x1290 + x1017))
    result[1, 5, 2] = numpy.sum(x152 * (x0 * x1293 + x1021))
    result[1, 5, 3] = numpy.sum(x306 * (x0 * x1296 + x1025))
    result[1, 5, 4] = numpy.sum(x322 * (x0 * x1299 + x1029))
    result[1, 5, 5] = numpy.sum(x306 * (x0 * x1302 + x1033))
    result[1, 5, 6] = numpy.sum(x152 * (x0 * x1305 + x1037))
    result[1, 5, 7] = numpy.sum(x322 * (x0 * x1308 + x1041))
    result[1, 5, 8] = numpy.sum(x322 * (x0 * x1311 + x1045))
    result[1, 5, 9] = numpy.sum(x152 * (x0 * x1314 + x1049))
    result[1, 5, 10] = numpy.sum(x257 * (x0 * x1317 + x1051))
    result[1, 5, 11] = numpy.sum(x152 * (x0 * x1320 + x1053))
    result[1, 5, 12] = numpy.sum(x306 * (x0 * x1323 + x1055))
    result[1, 5, 13] = numpy.sum(x152 * (x0 * x1326 + x1057))
    result[1, 5, 14] = numpy.sum(x257 * (x0 * x1329 + x1059))
    result[1, 6, 0] = numpy.sum(
        x99 * (x1096 * x1330 + x1193 * x21 + x1194 * x21 + x1195 * x21)
    )
    result[1, 6, 1] = numpy.sum(
        x115 * (x1099 * x1333 + x1196 * x21 + x1197 * x21 + x1198 * x21)
    )
    result[1, 6, 2] = numpy.sum(
        x115 * (x1102 * x1330 + x1199 * x21 + x1200 * x21 + x1201 * x21)
    )
    result[1, 6, 3] = numpy.sum(
        x140 * (x1202 * x21 + x1203 * x21 + x1204 * x21 + x1334 * x274)
    )
    result[1, 6, 4] = numpy.sum(
        x152 * (x1205 * x21 + x1206 * x21 + x1207 * x21 + x1335 * x274)
    )
    result[1, 6, 5] = numpy.sum(
        x140 * (x1107 * x1336 + x1209 * x21 + x1210 * x21 + x1211 * x21)
    )
    result[1, 6, 6] = numpy.sum(
        x115 * (x1212 * x21 + x1213 * x21 + x1214 * x21 + x1337 * x269)
    )
    result[1, 6, 7] = numpy.sum(
        x152 * (x1215 * x21 + x1216 * x21 + x1217 * x21 + x1338 * x269)
    )
    result[1, 6, 8] = numpy.sum(
        x152 * (x1218 * x21 + x1219 * x21 + x1220 * x21 + x1339 * x269)
    )
    result[1, 6, 9] = numpy.sum(
        x115 * (x1114 * x1336 + x1221 * x21 + x1222 * x21 + x1223 * x21)
    )
    result[1, 6, 10] = numpy.sum(
        x99
        * (x1224 * x21 + x1225 * x21 + x1226 * x21 + x55 * (x100 * x1337 + 4.0 * x935))
    )
    result[1, 6, 11] = numpy.sum(
        x115
        * (x1227 * x21 + x1228 * x21 + x1229 * x21 + x55 * (x100 * x1338 + 4.0 * x939))
    )
    result[1, 6, 12] = numpy.sum(
        x140
        * (x1230 * x21 + x1231 * x21 + x1232 * x21 + x55 * (x100 * x1339 + 4.0 * x943))
    )
    result[1, 6, 13] = numpy.sum(
        x115 * (x1233 * x21 + x1234 * x21 + x1235 * x21 + x186 * x55 * (x1331 + x1332))
    )
    result[1, 6, 14] = numpy.sum(
        x99 * (x1236 * x21 + x1237 * x21 + x1238 * x21 + x1330 * x214)
    )
    result[1, 7, 0] = numpy.sum(x257 * (x1193 * x22 + x1240 * x21 + x1241 * x21 + x1341))
    result[1, 7, 1] = numpy.sum(x152 * (x1196 * x22 + x1243 * x21 + x1244 * x21 + x1343))
    result[1, 7, 2] = numpy.sum(x152 * (x1199 * x22 + x1246 * x21 + x1247 * x21 + x1345))
    result[1, 7, 3] = numpy.sum(x306 * (x1202 * x22 + x1249 * x21 + x1250 * x21 + x1347))
    result[1, 7, 4] = numpy.sum(x322 * (x1205 * x22 + x1252 * x21 + x1253 * x21 + x1349))
    result[1, 7, 5] = numpy.sum(x306 * (x1209 * x22 + x1255 * x21 + x1256 * x21 + x1351))
    result[1, 7, 6] = numpy.sum(x152 * (x1212 * x22 + x1258 * x21 + x1259 * x21 + x1353))
    result[1, 7, 7] = numpy.sum(x322 * (x1215 * x22 + x1261 * x21 + x1262 * x21 + x1355))
    result[1, 7, 8] = numpy.sum(x322 * (x1218 * x22 + x1264 * x21 + x1265 * x21 + x1357))
    result[1, 7, 9] = numpy.sum(x152 * (x1221 * x22 + x1267 * x21 + x1268 * x21 + x1359))
    result[1, 7, 10] = numpy.sum(x257 * (x1224 * x22 + x1270 * x21 + x1271 * x21 + x1360))
    result[1, 7, 11] = numpy.sum(x152 * (x1227 * x22 + x1273 * x21 + x1274 * x21 + x1361))
    result[1, 7, 12] = numpy.sum(x306 * (x1230 * x22 + x1276 * x21 + x1277 * x21 + x1362))
    result[1, 7, 13] = numpy.sum(x152 * (x1233 * x22 + x1280 * x21 + x1281 * x21 + x1363))
    result[1, 7, 14] = numpy.sum(x257 * (x1236 * x22 + x1283 * x21 + x1284 * x21 + x1364))
    result[1, 8, 0] = numpy.sum(x257 * (x1240 * x22 + x1287 * x21 + x1366))
    result[1, 8, 1] = numpy.sum(x152 * (x1243 * x22 + x1290 * x21 + x1368))
    result[1, 8, 2] = numpy.sum(x152 * (x1246 * x22 + x1293 * x21 + x1370))
    result[1, 8, 3] = numpy.sum(x306 * (x1249 * x22 + x1296 * x21 + x1372))
    result[1, 8, 4] = numpy.sum(x322 * (x1252 * x22 + x1299 * x21 + x1374))
    result[1, 8, 5] = numpy.sum(x306 * (x1255 * x22 + x1302 * x21 + x1376))
    result[1, 8, 6] = numpy.sum(x152 * (x1258 * x22 + x1305 * x21 + x1378))
    result[1, 8, 7] = numpy.sum(x322 * (x1261 * x22 + x1308 * x21 + x1380))
    result[1, 8, 8] = numpy.sum(x322 * (x1264 * x22 + x1311 * x21 + x1382))
    result[1, 8, 9] = numpy.sum(x152 * (x1267 * x22 + x1314 * x21 + x1384))
    result[1, 8, 10] = numpy.sum(x257 * (x1270 * x22 + x1317 * x21 + x1385))
    result[1, 8, 11] = numpy.sum(x152 * (x1273 * x22 + x1320 * x21 + x1386))
    result[1, 8, 12] = numpy.sum(x306 * (x1276 * x22 + x1323 * x21 + x1387))
    result[1, 8, 13] = numpy.sum(x152 * (x1280 * x22 + x1326 * x21 + x1388))
    result[1, 8, 14] = numpy.sum(x257 * (x1283 * x22 + x1329 * x21 + x1389))
    result[1, 9, 0] = numpy.sum(x99 * (x1287 * x22 + x1391))
    result[1, 9, 1] = numpy.sum(x115 * (x1290 * x22 + x1393))
    result[1, 9, 2] = numpy.sum(x115 * (x1293 * x22 + x1395))
    result[1, 9, 3] = numpy.sum(x140 * (x1296 * x22 + x1397))
    result[1, 9, 4] = numpy.sum(x152 * (x1299 * x22 + x1399))
    result[1, 9, 5] = numpy.sum(x140 * (x1302 * x22 + x1401))
    result[1, 9, 6] = numpy.sum(x115 * (x1305 * x22 + x1403))
    result[1, 9, 7] = numpy.sum(x152 * (x1308 * x22 + x1405))
    result[1, 9, 8] = numpy.sum(x152 * (x1311 * x22 + x1407))
    result[1, 9, 9] = numpy.sum(x115 * (x1314 * x22 + x1409))
    result[1, 9, 10] = numpy.sum(x99 * (x1317 * x22 + x1410))
    result[1, 9, 11] = numpy.sum(x115 * (x1320 * x22 + x1411))
    result[1, 9, 12] = numpy.sum(x140 * (x1323 * x22 + x1412))
    result[1, 9, 13] = numpy.sum(x115 * (x1326 * x22 + x1413))
    result[1, 9, 14] = numpy.sum(x99 * (x1329 * x22 + x1414))
    result[2, 0, 0] = numpy.sum(
        x99 * (x0 * x1415 + x0 * x427 + x0 * (x0 * (x1096 * x1416 + x429) + x1415) + x438)
    )
    result[2, 0, 1] = numpy.sum(
        x115
        * (x0 * x1417 + x0 * x445 + x0 * (x0 * (x1416 * x1418 + x448) + x1417) + x450)
    )
    result[2, 0, 2] = numpy.sum(
        x115
        * (x0 * x1419 + x0 * x460 + x0 * (x0 * (x1099 * x1420 + x463) + x1419) + x466)
    )
    result[2, 0, 3] = numpy.sum(
        x140
        * (x0 * x1421 + x0 * x470 + x0 * (x0 * (x1416 * x1423 + x473) + x1421) + x475)
    )
    result[2, 0, 4] = numpy.sum(
        x152
        * (x0 * x1424 + x0 * x480 + x0 * (x0 * (x1420 * x1425 + x483) + x1424) + x486)
    )
    result[2, 0, 5] = numpy.sum(
        x140 * (x0 * x1426 + x0 * x494 + x0 * (x0 * (x1104 * x491 + x496) + x1426) + x499)
    )
    result[2, 0, 6] = numpy.sum(
        x115
        * (x0 * x1427 + x0 * x500 + x0 * (x0 * (x1416 * x1428 + x503) + x1427) + x505)
    )
    result[2, 0, 7] = numpy.sum(
        x152
        * (x0 * x1429 + x0 * x506 + x0 * (x0 * (x1420 * x1431 + x509) + x1429) + x511)
    )
    result[2, 0, 8] = numpy.sum(
        x152 * (x0 * x1432 + x0 * x513 + x0 * (x0 * (x0 * x1433 + x517) + x1432) + x519)
    )
    result[2, 0, 9] = numpy.sum(
        x115 * (x0 * x1434 + x0 * x523 + x0 * (x0 * (x1110 * x525 + x527) + x1434) + x530)
    )
    result[2, 0, 10] = numpy.sum(
        x99 * (x0 * x1435 + x0 * x531 + x0 * (x0 * (x1416 * x193 + x533) + x1435) + x536)
    )
    result[2, 0, 11] = numpy.sum(
        x115 * (x0 * x1436 + x0 * x537 + x0 * (x0 * (x1420 * x198 + x539) + x1436) + x541)
    )
    result[2, 0, 12] = numpy.sum(
        x140 * (x0 * x1437 + x0 * x542 + x0 * (x0 * (x0 * x1438 + x544) + x1437) + x546)
    )
    result[2, 0, 13] = numpy.sum(
        x115 * (x0 * x1439 + x0 * x547 + x0 * (x0 * (x0 * x1440 + x549) + x1439) + x551)
    )
    result[2, 0, 14] = numpy.sum(
        x99 * (x0 * x1441 + x0 * x552 + x0 * (x0 * (x1442 * x86 + x554) + x1441) + x556)
    )
    result[2, 1, 0] = numpy.sum(
        x257 * (x0 * x1443 + x0 * (x0 * x1445 + x1443) + x21 * x427 + x685)
    )
    result[2, 1, 1] = numpy.sum(
        x152 * (x0 * x1446 + x0 * (x0 * x1447 + x1446) + x21 * x445 + x697)
    )
    result[2, 1, 2] = numpy.sum(
        x152 * (x0 * x1448 + x0 * (x0 * x1450 + x1448) + x21 * x460 + x709)
    )
    result[2, 1, 3] = numpy.sum(
        x306 * (x0 * x1451 + x0 * (x0 * x1452 + x1451) + x21 * x470 + x719)
    )
    result[2, 1, 4] = numpy.sum(
        x322 * (x0 * x1453 + x0 * (x0 * x1454 + x1453) + x21 * x480 + x729)
    )
    result[2, 1, 5] = numpy.sum(
        x306 * (x0 * x1455 + x0 * (x0 * x1456 + x1455) + x21 * x494 + x740)
    )
    result[2, 1, 6] = numpy.sum(
        x152 * (x0 * x1457 + x0 * (x0 * x1458 + x1457) + x21 * x500 + x749)
    )
    result[2, 1, 7] = numpy.sum(
        x322 * (x0 * x1459 + x0 * (x0 * x1460 + x1459) + x21 * x506 + x758)
    )
    result[2, 1, 8] = numpy.sum(
        x322 * (x0 * x1461 + x0 * (x0 * x1462 + x1461) + x21 * x513 + x767)
    )
    result[2, 1, 9] = numpy.sum(
        x152 * (x0 * x1463 + x0 * (x0 * x1464 + x1463) + x21 * x523 + x776)
    )
    result[2, 1, 10] = numpy.sum(
        x257 * (x0 * x1465 + x0 * (x0 * x1466 + x1465) + x21 * x531 + x781)
    )
    result[2, 1, 11] = numpy.sum(
        x152 * (x0 * x1467 + x0 * (x0 * x1468 + x1467) + x21 * x537 + x787)
    )
    result[2, 1, 12] = numpy.sum(
        x306 * (x0 * x1469 + x0 * (x0 * x1470 + x1469) + x21 * x542 + x792)
    )
    result[2, 1, 13] = numpy.sum(
        x152 * (x0 * x1471 + x0 * (x0 * x1472 + x1471) + x21 * x547 + x797)
    )
    result[2, 1, 14] = numpy.sum(
        x257 * (x0 * x1473 + x0 * (x0 * x1474 + x1473) + x21 * x552 + x802)
    )
    result[2, 2, 0] = numpy.sum(x257 * (x0 * x815 + x0 * (x0 * x1477 + x815) + x824))
    result[2, 2, 1] = numpy.sum(x152 * (x0 * x829 + x0 * (x0 * x1479 + x829) + x831))
    result[2, 2, 2] = numpy.sum(x152 * (x0 * x838 + x0 * (x0 * x1482 + x838) + x841))
    result[2, 2, 3] = numpy.sum(x306 * (x0 * x845 + x0 * (x0 * x1484 + x845) + x847))
    result[2, 2, 4] = numpy.sum(x322 * (x0 * x852 + x0 * (x0 * x1486 + x852) + x854))
    result[2, 2, 5] = numpy.sum(x306 * (x0 * x860 + x0 * (x0 * x1488 + x860) + x863))
    result[2, 2, 6] = numpy.sum(x152 * (x0 * x866 + x0 * (x0 * x1490 + x866) + x868))
    result[2, 2, 7] = numpy.sum(x322 * (x0 * x871 + x0 * (x0 * x1492 + x871) + x873))
    result[2, 2, 8] = numpy.sum(x322 * (x0 * x876 + x0 * (x0 * x1494 + x876) + x878))
    result[2, 2, 9] = numpy.sum(x152 * (x0 * x883 + x0 * (x0 * x1496 + x883) + x886))
    result[2, 2, 10] = numpy.sum(x257 * (x0 * x888 + x0 * (x0 * x1498 + x888) + x890))
    result[2, 2, 11] = numpy.sum(x152 * (x0 * x892 + x0 * (x0 * x1500 + x892) + x894))
    result[2, 2, 12] = numpy.sum(x306 * (x0 * x896 + x0 * (x0 * x1502 + x896) + x898))
    result[2, 2, 13] = numpy.sum(x152 * (x0 * x900 + x0 * (x0 * x1504 + x900) + x902))
    result[2, 2, 14] = numpy.sum(x257 * (x0 * x904 + x0 * (x0 * x1506 + x904) + x906))
    result[2, 3, 0] = numpy.sum(x257 * (x0 * x1508 + x1443 * x21 + x21 * x678 + x957))
    result[2, 3, 1] = numpy.sum(x152 * (x0 * x1510 + x1446 * x21 + x21 * x692 + x962))
    result[2, 3, 2] = numpy.sum(x152 * (x0 * x1512 + x1448 * x21 + x21 * x704 + x966))
    result[2, 3, 3] = numpy.sum(x306 * (x0 * x1514 + x1451 * x21 + x21 * x714 + x970))
    result[2, 3, 4] = numpy.sum(x322 * (x0 * x1516 + x1453 * x21 + x21 * x724 + x975))
    result[2, 3, 5] = numpy.sum(x306 * (x0 * x1518 + x1455 * x21 + x21 * x735 + x979))
    result[2, 3, 6] = numpy.sum(x152 * (x0 * x1520 + x1457 * x21 + x21 * x744 + x983))
    result[2, 3, 7] = numpy.sum(x322 * (x0 * x1522 + x1459 * x21 + x21 * x753 + x987))
    result[2, 3, 8] = numpy.sum(x322 * (x0 * x1524 + x1461 * x21 + x21 * x762 + x992))
    result[2, 3, 9] = numpy.sum(x152 * (x0 * x1526 + x1463 * x21 + x21 * x771 + x996))
    result[2, 3, 10] = numpy.sum(x257 * (x0 * x1528 + x1465 * x21 + x21 * x778 + x998))
    result[2, 3, 11] = numpy.sum(x152 * (x0 * x1530 + x1000 + x1467 * x21 + x21 * x784))
    result[2, 3, 12] = numpy.sum(x306 * (x0 * x1532 + x1002 + x1469 * x21 + x21 * x789))
    result[2, 3, 13] = numpy.sum(x152 * (x0 * x1534 + x1004 + x1471 * x21 + x21 * x794))
    result[2, 3, 14] = numpy.sum(x257 * (x0 * x1536 + x1006 + x1473 * x21 + x21 * x799))
    result[2, 4, 0] = numpy.sum(x687 * (x0 * x1537 + x1012 + x21 * x815))
    result[2, 4, 1] = numpy.sum(x699 * (x0 * x1538 + x1016 + x21 * x829))
    result[2, 4, 2] = numpy.sum(x699 * (x0 * x1539 + x1020 + x21 * x838))
    result[2, 4, 3] = numpy.sum(x322 * (x0 * x1540 + x1024 + x21 * x845))
    result[2, 4, 4] = numpy.sum(x731 * (x0 * x1541 + x1028 + x21 * x852))
    result[2, 4, 5] = numpy.sum(x322 * (x0 * x1542 + x1032 + x21 * x860))
    result[2, 4, 6] = numpy.sum(x699 * (x0 * x1543 + x1036 + x21 * x866))
    result[2, 4, 7] = numpy.sum(x731 * (x0 * x1544 + x1040 + x21 * x871))
    result[2, 4, 8] = numpy.sum(x731 * (x0 * x1545 + x1044 + x21 * x876))
    result[2, 4, 9] = numpy.sum(x699 * (x0 * x1546 + x1048 + x21 * x883))
    result[2, 4, 10] = numpy.sum(x687 * (x0 * x1547 + x1050 + x21 * x888))
    result[2, 4, 11] = numpy.sum(x699 * (x0 * x1548 + x1052 + x21 * x892))
    result[2, 4, 12] = numpy.sum(x322 * (x0 * x1549 + x1054 + x21 * x896))
    result[2, 4, 13] = numpy.sum(x699 * (x0 * x1550 + x1056 + x21 * x900))
    result[2, 4, 14] = numpy.sum(x687 * (x0 * x1551 + x1058 + x21 * x904))
    result[2, 5, 0] = numpy.sum(x257 * (x0 * x1554 + x1065))
    result[2, 5, 1] = numpy.sum(x152 * (x0 * x1557 + x1067))
    result[2, 5, 2] = numpy.sum(x152 * (x0 * x1560 + x1071))
    result[2, 5, 3] = numpy.sum(x306 * (x0 * x1563 + x1073))
    result[2, 5, 4] = numpy.sum(x322 * (x0 * x1566 + x1075))
    result[2, 5, 5] = numpy.sum(x306 * (x0 * x1569 + x1079))
    result[2, 5, 6] = numpy.sum(x152 * (x0 * x1572 + x1081))
    result[2, 5, 7] = numpy.sum(x322 * (x0 * x1575 + x1083))
    result[2, 5, 8] = numpy.sum(x322 * (x0 * x1578 + x1085))
    result[2, 5, 9] = numpy.sum(x152 * (x0 * x1581 + x1089))
    result[2, 5, 10] = numpy.sum(x257 * (x0 * x1584 + x1090))
    result[2, 5, 11] = numpy.sum(x152 * (x0 * x1587 + x1091))
    result[2, 5, 12] = numpy.sum(x306 * (x0 * x1590 + x1092))
    result[2, 5, 13] = numpy.sum(x152 * (x0 * x1593 + x1093))
    result[2, 5, 14] = numpy.sum(x257 * (x0 * x1596 + x1094))
    result[2, 6, 0] = numpy.sum(x99 * (x1239 * x21 + x1341 + x1507 * x21 + x1508 * x21))
    result[2, 6, 1] = numpy.sum(x115 * (x1242 * x21 + x1343 + x1509 * x21 + x1510 * x21))
    result[2, 6, 2] = numpy.sum(x115 * (x1245 * x21 + x1345 + x1511 * x21 + x1512 * x21))
    result[2, 6, 3] = numpy.sum(x140 * (x1248 * x21 + x1347 + x1513 * x21 + x1514 * x21))
    result[2, 6, 4] = numpy.sum(x152 * (x1251 * x21 + x1349 + x1515 * x21 + x1516 * x21))
    result[2, 6, 5] = numpy.sum(x140 * (x1254 * x21 + x1351 + x1517 * x21 + x1518 * x21))
    result[2, 6, 6] = numpy.sum(x115 * (x1257 * x21 + x1353 + x1519 * x21 + x1520 * x21))
    result[2, 6, 7] = numpy.sum(x152 * (x1260 * x21 + x1355 + x1521 * x21 + x1522 * x21))
    result[2, 6, 8] = numpy.sum(x152 * (x1263 * x21 + x1357 + x1523 * x21 + x1524 * x21))
    result[2, 6, 9] = numpy.sum(x115 * (x1266 * x21 + x1359 + x1525 * x21 + x1526 * x21))
    result[2, 6, 10] = numpy.sum(x99 * (x1269 * x21 + x1360 + x1527 * x21 + x1528 * x21))
    result[2, 6, 11] = numpy.sum(x115 * (x1272 * x21 + x1361 + x1529 * x21 + x1530 * x21))
    result[2, 6, 12] = numpy.sum(x140 * (x1275 * x21 + x1362 + x1531 * x21 + x1532 * x21))
    result[2, 6, 13] = numpy.sum(x115 * (x1279 * x21 + x1363 + x1533 * x21 + x1534 * x21))
    result[2, 6, 14] = numpy.sum(x99 * (x1282 * x21 + x1364 + x1535 * x21 + x1536 * x21))
    result[2, 7, 0] = numpy.sum(x257 * (x1286 * x21 + x1366 + x1537 * x21))
    result[2, 7, 1] = numpy.sum(x152 * (x1289 * x21 + x1368 + x1538 * x21))
    result[2, 7, 2] = numpy.sum(x152 * (x1292 * x21 + x1370 + x1539 * x21))
    result[2, 7, 3] = numpy.sum(x306 * (x1295 * x21 + x1372 + x1540 * x21))
    result[2, 7, 4] = numpy.sum(x322 * (x1298 * x21 + x1374 + x1541 * x21))
    result[2, 7, 5] = numpy.sum(x306 * (x1301 * x21 + x1376 + x1542 * x21))
    result[2, 7, 6] = numpy.sum(x152 * (x1304 * x21 + x1378 + x1543 * x21))
    result[2, 7, 7] = numpy.sum(x322 * (x1307 * x21 + x1380 + x1544 * x21))
    result[2, 7, 8] = numpy.sum(x322 * (x1310 * x21 + x1382 + x1545 * x21))
    result[2, 7, 9] = numpy.sum(x152 * (x1313 * x21 + x1384 + x1546 * x21))
    result[2, 7, 10] = numpy.sum(x257 * (x1316 * x21 + x1385 + x1547 * x21))
    result[2, 7, 11] = numpy.sum(x152 * (x1319 * x21 + x1386 + x1548 * x21))
    result[2, 7, 12] = numpy.sum(x306 * (x1322 * x21 + x1387 + x1549 * x21))
    result[2, 7, 13] = numpy.sum(x152 * (x1325 * x21 + x1388 + x1550 * x21))
    result[2, 7, 14] = numpy.sum(x257 * (x1328 * x21 + x1389 + x1551 * x21))
    result[2, 8, 0] = numpy.sum(x257 * (x1391 + x1554 * x21))
    result[2, 8, 1] = numpy.sum(x152 * (x1393 + x1557 * x21))
    result[2, 8, 2] = numpy.sum(x152 * (x1395 + x1560 * x21))
    result[2, 8, 3] = numpy.sum(x306 * (x1397 + x1563 * x21))
    result[2, 8, 4] = numpy.sum(x322 * (x1399 + x1566 * x21))
    result[2, 8, 5] = numpy.sum(x306 * (x1401 + x1569 * x21))
    result[2, 8, 6] = numpy.sum(x152 * (x1403 + x1572 * x21))
    result[2, 8, 7] = numpy.sum(x322 * (x1405 + x1575 * x21))
    result[2, 8, 8] = numpy.sum(x322 * (x1407 + x1578 * x21))
    result[2, 8, 9] = numpy.sum(x152 * (x1409 + x1581 * x21))
    result[2, 8, 10] = numpy.sum(x257 * (x1410 + x1584 * x21))
    result[2, 8, 11] = numpy.sum(x152 * (x1411 + x1587 * x21))
    result[2, 8, 12] = numpy.sum(x306 * (x1412 + x1590 * x21))
    result[2, 8, 13] = numpy.sum(x152 * (x1413 + x1593 * x21))
    result[2, 8, 14] = numpy.sum(x257 * (x1414 + x1596 * x21))
    result[2, 9, 0] = numpy.sum(
        x99 * (x1096 * x1597 + x1552 * x22 + x1553 * x22 + x1554 * x22)
    )
    result[2, 9, 1] = numpy.sum(
        x115 * (x1418 * x1597 + x1555 * x22 + x1556 * x22 + x1557 * x22)
    )
    result[2, 9, 2] = numpy.sum(
        x115 * (x1099 * x1598 + x1558 * x22 + x1559 * x22 + x1560 * x22)
    )
    result[2, 9, 3] = numpy.sum(
        x140 * (x1423 * x1597 + x1561 * x22 + x1562 * x22 + x1563 * x22)
    )
    result[2, 9, 4] = numpy.sum(
        x152 * (x1425 * x1598 + x1564 * x22 + x1565 * x22 + x1566 * x22)
    )
    result[2, 9, 5] = numpy.sum(
        x140 * (x1567 * x22 + x1568 * x22 + x1569 * x22 + x1599 * x274)
    )
    result[2, 9, 6] = numpy.sum(
        x115 * (x1428 * x1597 + x1570 * x22 + x1571 * x22 + x1572 * x22)
    )
    result[2, 9, 7] = numpy.sum(
        x152 * (x1431 * x1598 + x1573 * x22 + x1574 * x22 + x1575 * x22)
    )
    result[2, 9, 8] = numpy.sum(
        x152 * (x1576 * x22 + x1577 * x22 + x1578 * x22 + x1599 * x482)
    )
    result[2, 9, 9] = numpy.sum(
        x115 * (x1579 * x22 + x1580 * x22 + x1581 * x22 + x1600 * x269)
    )
    result[2, 9, 10] = numpy.sum(
        x99 * (x1582 * x22 + x1583 * x22 + x1584 * x22 + x1597 * x193)
    )
    result[2, 9, 11] = numpy.sum(
        x115 * (x1585 * x22 + x1586 * x22 + x1587 * x22 + x1598 * x198)
    )
    result[2, 9, 12] = numpy.sum(
        x140 * (x1588 * x22 + x1589 * x22 + x1590 * x22 + x1599 * x171)
    )
    result[2, 9, 13] = numpy.sum(
        x115 * (x141 * x1600 + x1591 * x22 + x1592 * x22 + x1593 * x22)
    )
    result[2, 9, 14] = numpy.sum(
        x99
        * (x1594 * x22 + x1595 * x22 + x1596 * x22 + x55 * (4.0 * x1087 + x116 * x1600))
    )
    return result


def int3c2e3d_sph_200(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ds|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 1, 1), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = cx + x0
    x3 = x2 ** (-1.0)
    x4 = -x1 * (ax * A[0] + bx * B[0])
    x5 = x4 + C[0]
    x6 = -x5
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x3
    x14 = x0 * x13 * (x12**2 + x6**2 + x9**2)
    x15 = boys(1, x14)
    x16 = x15 * x3
    x17 = cx ** (-1.0)
    x18 = x17 * boys(0, x14)
    x19 = x1 * (x16 - x18)
    x20 = x4 + A[0]
    x21 = -x20
    x22 = x3 * boys(2, x14)
    x23 = x15 * x17
    x24 = x13 * x5
    x25 = (
        17.49341832762486
        * da
        * db
        * dc
        * x1
        * x2 ** (-0.5)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
    )
    x26 = 0.5773502691896258 * x25
    x27 = x7 + A[1]
    x28 = -x27
    x29 = x16 * x9 - x18 * x28
    x30 = x22 * x9 - x23 * x28
    x31 = 2.0 * x25
    x32 = x10 + A[2]
    x33 = -x32
    x34 = x12 * x16 - x18 * x33
    x35 = x12 * x22 - x23 * x33
    x36 = x13 * x8

    # 6 item(s)
    result[0, 0, 0] = numpy.sum(
        x26
        * (-x19 + 2.0 * x20 * (x16 * x6 - x18 * x21) + 2.0 * x24 * (x21 * x23 - x22 * x6))
    )
    result[1, 0, 0] = numpy.sum(x31 * (x20 * x29 - x24 * x30))
    result[2, 0, 0] = numpy.sum(x31 * (x20 * x34 - x24 * x35))
    result[3, 0, 0] = numpy.sum(x26 * (-x19 + 2.0 * x27 * x29 - 2.0 * x30 * x36))
    result[4, 0, 0] = numpy.sum(x31 * (x27 * x34 - x35 * x36))
    result[5, 0, 0] = numpy.sum(x26 * (-2.0 * x11 * x13 * x35 - x19 + 2.0 * x32 * x34))
    return result


def int3c2e3d_sph_201(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ds|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 1, 3), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.0)
    x6 = -x3
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x5
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x6**2 + x9**2)
    x16 = boys(2, x15)
    x17 = x16 * x5
    x18 = cx ** (-1.0)
    x19 = x18 * boys(1, x15)
    x20 = x1 * (x17 - x19)
    x21 = x2 + A[0]
    x22 = -x21
    x23 = x17 * x6 - x19 * x22
    x24 = x5 * boys(3, x15)
    x25 = x16 * x18
    x26 = x13 * x3
    x27 = x20 - 2.0 * x21 * x23 - 2.0 * x26 * (x22 * x25 - x24 * x6)
    x28 = (
        17.49341832762486
        * da
        * db
        * dc
        * x4 ** (-1.5)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
    )
    x29 = 0.5773502691896258 * x28
    x30 = x27 * x29
    x31 = x14 * (x11**2 + x3**2 + x8**2)
    x32 = x5 * boys(2, x31)
    x33 = x7 + A[1]
    x34 = boys(1, x31)
    x35 = x1 * (-x18 * x33 * x34 + x32 * x8)
    x36 = -x33
    x37 = x17 * x9 - x19 * x36
    x38 = x24 * x9 - x25 * x36
    x39 = -2.0 * x21 * x37 + 2.0 * x26 * x38
    x40 = x1 * (-x18 * x21 * x34 + x3 * x32)
    x41 = x10 + A[2]
    x42 = x1 * (x11 * x32 - x18 * x34 * x41)
    x43 = -x41
    x44 = x12 * x17 - x19 * x43
    x45 = x12 * x24 - x25 * x43
    x46 = -2.0 * x21 * x44 + 2.0 * x26 * x45
    x47 = 2.0 * x37
    x48 = x13 * x8
    x49 = x20 - x33 * x47 + 2.0 * x38 * x48
    x50 = x29 * x49
    x51 = -2.0 * x33 * x44 + 2.0 * x45 * x48
    x52 = 2.0 * x44
    x53 = 2.0 * x11 * x13 * x45 + x20 - x41 * x52
    x54 = x29 * x53

    # 18 item(s)
    result[0, 0, 0] = numpy.sum(x29 * (-2.0 * x1 * x23 + x27 * x3))
    result[0, 0, 1] = numpy.sum(x30 * x8)
    result[0, 0, 2] = numpy.sum(x11 * x30)
    result[1, 0, 0] = numpy.sum(x28 * (x3 * x39 + x35))
    result[1, 0, 1] = numpy.sum(x28 * (x39 * x8 + x40))
    result[1, 0, 2] = numpy.sum(x11 * x28 * x39)
    result[2, 0, 0] = numpy.sum(x28 * (x3 * x46 + x42))
    result[2, 0, 1] = numpy.sum(x28 * x46 * x8)
    result[2, 0, 2] = numpy.sum(x28 * (x11 * x46 + x40))
    result[3, 0, 0] = numpy.sum(x3 * x50)
    result[3, 0, 1] = numpy.sum(x29 * (-x1 * x47 + x49 * x8))
    result[3, 0, 2] = numpy.sum(x11 * x50)
    result[4, 0, 0] = numpy.sum(x28 * x3 * x51)
    result[4, 0, 1] = numpy.sum(x28 * (x42 + x51 * x8))
    result[4, 0, 2] = numpy.sum(x28 * (x11 * x51 + x35))
    result[5, 0, 0] = numpy.sum(x3 * x54)
    result[5, 0, 1] = numpy.sum(x54 * x8)
    result[5, 0, 2] = numpy.sum(x29 * (-x1 * x52 + x11 * x53))
    return result


def int3c2e3d_sph_202(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ds|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 1, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = -x3
    x5 = cx + x0
    x6 = x5 ** (-1.0)
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x6
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x4**2 + x9**2)
    x16 = boys(3, x15)
    x17 = x16 * x6
    x18 = x2 + A[0]
    x19 = -x18
    x20 = cx ** (-1.0)
    x21 = x20 * boys(2, x15)
    x22 = x17 * x4 - x19 * x21
    x23 = x3**2
    x24 = x8**2
    x25 = x11**2
    x26 = x14 * (x23 + x24 + x25)
    x27 = boys(2, x26)
    x28 = x1 * x20 * x27
    x29 = x1 * (x17 - x21)
    x30 = x6 * boys(4, x15)
    x31 = x13 * x3
    x32 = -2.0 * x18 * x22 + x29 - 2.0 * x31 * (x16 * x19 * x20 - x30 * x4)
    x33 = x1 * x22
    x34 = 2.0 * x33
    x35 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0
        * x5 ** (-2.5)
        * numpy.exp(
            -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
        )
    )
    x36 = 0.3333333333333333 * x35
    x37 = x6 * boys(3, x26)
    x38 = x18 * x20 * x27 - x3 * x37
    x39 = 1.732050807568877
    x40 = x36 * x39
    x41 = x40 * (2.0 * x1 * x38 - x3 * x32)
    x42 = x32 * x36
    x43 = x11 * x39
    x44 = x7 + A[1]
    x45 = -x44
    x46 = x17 * x9 - x21 * x45
    x47 = x1 * x46
    x48 = 2.0 * x47
    x49 = -x48
    x50 = -x16 * x20 * x45 + x30 * x9
    x51 = x13 * x4
    x52 = 2.0 * x19 * x46 - 2.0 * x50 * x51
    x53 = x3 * x52
    x54 = x3 * x40
    x55 = -x33
    x56 = x52 * x8
    x57 = x55 + x56
    x58 = 2.0 * x46
    x59 = x1 * (x28 + x58 * x8)
    x60 = -x47
    x61 = x11 * x35
    x62 = -x34
    x63 = x40 * x8
    x64 = 0.6666666666666667 * x35 * x39
    x65 = x10 + A[2]
    x66 = -x65
    x67 = x12 * x17 - x21 * x66
    x68 = x1 * x67
    x69 = 2.0 * x68
    x70 = -x69
    x71 = -x67
    x72 = x12 * x30 - x16 * x20 * x66
    x73 = -x72
    x74 = -2.0 * x19 * x71 + 2.0 * x51 * x73
    x75 = x3 * x74
    x76 = x35 * x8
    x77 = x11 * x74
    x78 = 2.0 * x11
    x79 = x1 * (x28 + x67 * x78)
    x80 = -0.5 * x79
    x81 = -x18 * x67 + x31 * x72
    x82 = x11 * x40
    x83 = 2.0 * x8
    x84 = x13 * x50 * x83 + x29 - x44 * x58
    x85 = x36 * x84
    x86 = x48 - x8 * x84
    x87 = x20 * x27 * x44 - x37 * x8
    x88 = x13 * x72
    x89 = -x44 * x67 + x8 * x88
    x90 = x3 * x35
    x91 = x13 * x73 * x9 - x45 * x71
    x92 = x78 * x91
    x93 = x29 - 2.0 * x65 * x67 + x78 * x88
    x94 = x36 * x93
    x95 = -x11 * x93 + x69

    # 36 item(s)
    result[0, 0, 0] = numpy.sum(
        x36 * (x1 * (2.0 * x22 * x3 + x28) - x3 * (x3 * x32 - x34))
    )
    result[0, 0, 1] = numpy.sum(x41 * x8)
    result[0, 0, 2] = numpy.sum(x11 * x41)
    result[0, 0, 3] = numpy.sum(-x24 * x42)
    result[0, 0, 4] = numpy.sum(-x42 * x43 * x8)
    result[0, 0, 5] = numpy.sum(-x25 * x42)
    result[1, 0, 0] = numpy.sum(-x54 * (x49 + x53))
    result[1, 0, 1] = numpy.sum(0.5 * x35 * (-2.0 * x3 * x57 + x59))
    result[1, 0, 2] = numpy.sum(-x61 * (x53 + x60))
    result[1, 0, 3] = numpy.sum(-x63 * (x56 + x62))
    result[1, 0, 4] = numpy.sum(-x57 * x61)
    result[1, 0, 5] = numpy.sum(x25 * x64 * (x18 * x46 - x31 * x50))
    result[2, 0, 0] = numpy.sum(-x54 * (x70 + x75))
    result[2, 0, 1] = numpy.sum(x76 * (x68 - x75))
    result[2, 0, 2] = numpy.sum(-x35 * (x3 * (x55 + x77) + x80))
    result[2, 0, 3] = numpy.sum(-x24 * x64 * x81)
    result[2, 0, 4] = numpy.sum(x76 * (x1 * x38 - x78 * x81))
    result[2, 0, 5] = numpy.sum(-x82 * (x62 + x77))
    result[3, 0, 0] = numpy.sum(-x23 * x85)
    result[3, 0, 1] = numpy.sum(x54 * x86)
    result[3, 0, 2] = numpy.sum(-x3 * x43 * x85)
    result[3, 0, 3] = numpy.sum(x36 * (x59 + x8 * x86))
    result[3, 0, 4] = numpy.sum(x82 * (2.0 * x1 * x87 - x8 * x84))
    result[3, 0, 5] = numpy.sum(-x25 * x85)
    result[4, 0, 0] = numpy.sum(-x23 * x64 * x89)
    result[4, 0, 1] = numpy.sum(x90 * (-x1 * (x11 * x37 - x20 * x27 * x65) - x83 * x89))
    result[4, 0, 2] = numpy.sum(x90 * (x1 * x87 - x78 * x89))
    result[4, 0, 3] = numpy.sum(-x63 * (x70 + x83 * x91))
    result[4, 0, 4] = numpy.sum(-x35 * (x8 * (x60 + x92) + x80))
    result[4, 0, 5] = numpy.sum(-x82 * (x49 + x92))
    result[5, 0, 0] = numpy.sum(-x23 * x94)
    result[5, 0, 1] = numpy.sum(-x3 * x39 * x8 * x94)
    result[5, 0, 2] = numpy.sum(x54 * x95)
    result[5, 0, 3] = numpy.sum(-x24 * x94)
    result[5, 0, 4] = numpy.sum(x63 * x95)
    result[5, 0, 5] = numpy.sum(x36 * (x11 * x95 + x79))
    return result


def int3c2e3d_sph_203(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ds|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 1, 10), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = 0.5 / (ax + bx)
    x5 = x3**2
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = x7**2
    x9 = -x1 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = x10**2
    x12 = cx + x0
    x13 = x12 ** (-1.0)
    x14 = cx * x13
    x15 = x0 * x14 * (x11 + x5 + x8)
    x16 = boys(4, x15)
    x17 = x12 ** (-1.5)
    x18 = 17.49341832762486
    x19 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x20 = 2.0 * x1 * x18 * x19
    x21 = x17 * x20
    x22 = x16 * x21
    x23 = cx ** (-1.0)
    x24 = x12 ** (-0.5)
    x25 = boys(3, x15)
    x26 = x4 * (2.0 * x1 * x18 * x19 * x23 * x24 * x25 - x22)
    x27 = -x2 - A[0]
    x28 = 2.0 * x1 * x18 * x19 * x23 * x24 * x25 * x27 - x22 * x3
    x29 = x21 * boys(5, x15)
    x30 = x14 * x3
    x31 = (
        x26 + x27 * x28 - x30 * (2.0 * x1 * x16 * x18 * x19 * x23 * x24 * x27 - x29 * x3)
    )
    x32 = x3 * x31
    x33 = x28 * x4
    x34 = 2.0 * x33
    x35 = x0 * x13
    x36 = x3 * x35
    x37 = x28 * x3
    x38 = x23 * x25
    x39 = x20 * x24 * x38 * x4
    x40 = x37 + x39
    x41 = x35 * x4
    x42 = 2.0 * x41
    x43 = 2.0 * x17 * x18 * x19 * x38 * x4
    x44 = 2.23606797749979
    x45 = da * db * dc
    x46 = x35 * x45
    x47 = 0.06666666666666667 * x46
    x48 = x44 * x47
    x49 = x35 * x7
    x50 = x43 * x7
    x51 = 0.3333333333333333 * x46
    x52 = x10 * x35
    x53 = x10 * x43
    x54 = x0**2 / x12**2
    x55 = x32 * x54
    x56 = x54 * x8
    x57 = x54 * x7
    x58 = x10 * x57
    x59 = 1.732050807568877
    x60 = x51 * x59
    x61 = x11 * x54
    x62 = x0**3 / x12**3
    x63 = 0.06666666666666667 * x45 * x62
    x64 = x63 * x7**3
    x65 = x31 * x44
    x66 = 0.3333333333333333 * x45
    x67 = x62 * x66
    x68 = x67 * x8
    x69 = x10**3 * x63
    x70 = -x6 - A[1]
    x71 = 2.0 * x1 * x18 * x19 * x23 * x24 * x25 * x70 - x22 * x7
    x72 = x4 * x71
    x73 = 2.0 * x1 * x16 * x18 * x19 * x23 * x24 * x70 - x29 * x7
    x74 = x27 * x71 - x30 * x73
    x75 = x3 * x74
    x76 = x54 * x72
    x77 = 3.872983346207417
    x78 = x47 * x77
    x79 = x7 * x71
    x80 = x39 + x79
    x81 = x35 * x80
    x82 = x4 * x81
    x83 = x7 * x74
    x84 = x33 + x83
    x85 = x4 * x54
    x86 = x3 * x85
    x87 = x52 * x72
    x88 = x41 * (x50 + x7 * x81)
    x89 = x49 * (x33 + x84)
    x90 = x41 * (x52 * x79 + x53)
    x91 = x33 * x52
    x92 = x52 * x83 + x91
    x93 = x11 * x76
    x94 = x33 * x61
    x95 = -x9 - A[2]
    x96 = 2.0 * x1 * x18 * x19 * x23 * x24 * x25 * x95 - x10 * x22
    x97 = x4 * x96
    x98 = 2.0 * x1 * x16 * x18 * x19 * x23 * x24 * x95 - x10 * x29
    x99 = x27 * x96 - x30 * x98
    x100 = x3 * x99
    x101 = x54 * x97
    x102 = x49 * x97
    x103 = x3 * x7
    x104 = x10 * x96 + x39
    x105 = x104 * x41
    x106 = x10 * x99 + x33
    x107 = x56 * x97
    x108 = x104 * x7 * x85
    x109 = x41 * (x104 * x52 + x53)
    x110 = x106 * x52 + x91
    x111 = x57 * x66
    x112 = x14 * x7
    x113 = -x112 * x73 + x26 + x70 * x71
    x114 = x113 * x44
    x115 = x3**3 * x63
    x116 = x113 * x7
    x117 = 2.0 * x72
    x118 = x116 + x117
    x119 = x5 * x67
    x120 = x118 * x49 + 2.0 * x82
    x121 = x3 * x45
    x122 = x121 * x54
    x123 = 0.3333333333333333 * x122
    x124 = x52 * (x116 + x117)
    x125 = x123 * x59
    x126 = 0.3333333333333333 * x121 * x62
    x127 = -x112 * x98 + x70 * x96
    x128 = x127 * x7 + x97
    x129 = x119 * x59
    x130 = x10 * x127 + x72
    x131 = x102 + x128 * x49
    x132 = x105 + x130 * x49
    x133 = x130 * x52 + x87
    x134 = -x10 * x14 * x98 + x26 + x95 * x96
    x135 = x134 * x44
    x136 = x10 * x134 + 2.0 * x97
    x137 = 2.0 * x105 + x136 * x52

    # 60 item(s)
    result[0, 0, 0] = numpy.sum(
        x48 * (x36 * (x36 * (x32 + x34) + x40 * x42) + x42 * (x3 * x43 + x36 * x40))
    )
    result[0, 0, 1] = numpy.sum(x51 * (x36 * x49 * (x32 + x34) + x42 * (x37 * x49 + x50)))
    result[0, 0, 2] = numpy.sum(x51 * (x36 * x52 * (x32 + x34) + x42 * (x37 * x52 + x53)))
    result[0, 0, 3] = numpy.sum(x51 * (x34 * x56 + x55 * x8))
    result[0, 0, 4] = numpy.sum(x60 * (x10 * x55 * x7 + x34 * x58))
    result[0, 0, 5] = numpy.sum(x51 * (x11 * x55 + x34 * x61))
    result[0, 0, 6] = numpy.sum(x64 * x65)
    result[0, 0, 7] = numpy.sum(x10 * x31 * x68)
    result[0, 0, 8] = numpy.sum(x11 * x31 * x67 * x7)
    result[0, 0, 9] = numpy.sum(x65 * x69)
    result[1, 0, 0] = numpy.sum(x78 * (x36**2 * (2.0 * x72 + x75) + x5 * x76))
    result[1, 0, 1] = numpy.sum(x60 * (x36 * (x36 * x84 + x82) + x80 * x86))
    result[1, 0, 2] = numpy.sum(x60 * (x10 * x3 * x76 + x36 * (x52 * x75 + x87)))
    result[1, 0, 3] = numpy.sum(x60 * (x36 * x89 + x88))
    result[1, 0, 4] = numpy.sum(x46 * (x36 * x92 + x90))
    result[1, 0, 5] = numpy.sum(x60 * (x61 * x75 + x93))
    result[1, 0, 6] = numpy.sum(x78 * (x33 * x56 + x49 * x89))
    result[1, 0, 7] = numpy.sum(x60 * (x33 * x58 + x49 * x92))
    result[1, 0, 8] = numpy.sum(x60 * (x61 * x83 + x94))
    result[1, 0, 9] = numpy.sum(x69 * x74 * x77)
    result[2, 0, 0] = numpy.sum(x78 * (x101 * x5 + x36**2 * (x100 + 2.0 * x97)))
    result[2, 0, 1] = numpy.sum(x60 * (x101 * x103 + x36 * (x100 * x49 + x102)))
    result[2, 0, 2] = numpy.sum(x60 * (x104 * x86 + x36 * (x105 + x106 * x36)))
    result[2, 0, 3] = numpy.sum(x60 * (x100 * x56 + x107))
    result[2, 0, 4] = numpy.sum(x46 * (x106 * x3 * x57 + x108))
    result[2, 0, 5] = numpy.sum(x60 * (x109 + x110 * x36))
    result[2, 0, 6] = numpy.sum(x64 * x77 * x99)
    result[2, 0, 7] = numpy.sum(x106 * x59 * x68)
    result[2, 0, 8] = numpy.sum(x110 * x111 * x59)
    result[2, 0, 9] = numpy.sum(x78 * (x110 * x52 + x94))
    result[3, 0, 0] = numpy.sum(x114 * x115)
    result[3, 0, 1] = numpy.sum(x118 * x119)
    result[3, 0, 2] = numpy.sum(x10 * x113 * x119)
    result[3, 0, 3] = numpy.sum(x120 * x123)
    result[3, 0, 4] = numpy.sum(x124 * x125)
    result[3, 0, 5] = numpy.sum(x11 * x113 * x126)
    result[3, 0, 6] = numpy.sum(x48 * (x120 * x49 + 2.0 * x88))
    result[3, 0, 7] = numpy.sum(x51 * (x124 * x49 + 2.0 * x90))
    result[3, 0, 8] = numpy.sum(x51 * x61 * (x116 + x117))
    result[3, 0, 9] = numpy.sum(x114 * x69)
    result[4, 0, 0] = numpy.sum(x115 * x127 * x77)
    result[4, 0, 1] = numpy.sum(x128 * x129)
    result[4, 0, 2] = numpy.sum(x129 * x130)
    result[4, 0, 3] = numpy.sum(x125 * x131)
    result[4, 0, 4] = numpy.sum(x122 * x132)
    result[4, 0, 5] = numpy.sum(x125 * x133)
    result[4, 0, 6] = numpy.sum(x78 * (x107 + x131 * x49))
    result[4, 0, 7] = numpy.sum(x60 * (x108 + x132 * x49))
    result[4, 0, 8] = numpy.sum(x60 * (x109 + x133 * x49))
    result[4, 0, 9] = numpy.sum(x78 * (x133 * x52 + x93))
    result[5, 0, 0] = numpy.sum(x115 * x135)
    result[5, 0, 1] = numpy.sum(x119 * x134 * x7)
    result[5, 0, 2] = numpy.sum(x119 * x136)
    result[5, 0, 3] = numpy.sum(x126 * x134 * x8)
    result[5, 0, 4] = numpy.sum(x103 * x136 * x59 * x67)
    result[5, 0, 5] = numpy.sum(x123 * x137)
    result[5, 0, 6] = numpy.sum(x135 * x64)
    result[5, 0, 7] = numpy.sum(x136 * x68)
    result[5, 0, 8] = numpy.sum(x111 * x137)
    result[5, 0, 9] = numpy.sum(x48 * (2.0 * x109 + x137 * x52))
    return result


def int3c2e3d_sph_204(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ds|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 1, 15), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = 0.5 / (ax + bx)
    x5 = x3**2
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = x7**2
    x9 = -x1 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = x10**2
    x12 = cx + x0
    x13 = x12 ** (-1.0)
    x14 = cx * x13
    x15 = x0 * x14 * (x11 + x5 + x8)
    x16 = boys(5, x15)
    x17 = x12 ** (-1.5)
    x18 = 17.49341832762486
    x19 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x20 = 2.0 * x18 * x19
    x21 = x1 * x20
    x22 = x17 * x21
    x23 = x16 * x22
    x24 = cx ** (-1.0)
    x25 = x12 ** (-0.5)
    x26 = boys(4, x15)
    x27 = x4 * (2.0 * x1 * x18 * x19 * x24 * x25 * x26 - x23)
    x28 = -x2 - A[0]
    x29 = 2.0 * x1 * x18 * x19 * x24 * x25 * x26 * x28 - x23 * x3
    x30 = x22 * boys(6, x15)
    x31 = x14 * x3
    x32 = (
        x27 + x28 * x29 - x31 * (2.0 * x1 * x16 * x18 * x19 * x24 * x25 * x28 - x3 * x30)
    )
    x33 = x3 * x32
    x34 = x29 * x4
    x35 = 2.0 * x34
    x36 = x0 * x13
    x37 = x3 * x36
    x38 = x29 * x3
    x39 = x24 * x26
    x40 = x21 * x25 * x39 * x4
    x41 = x38 + x40
    x42 = x36 * x4
    x43 = 2.0 * x42
    x44 = x20 * x39 * x4
    x45 = x17 * x44
    x46 = x3 * x45 + x37 * x41
    x47 = x0 * x12 ** (-2.5) * x44
    x48 = 5.916079783099616
    x49 = da * db * dc
    x50 = x36 * x49
    x51 = 0.009523809523809524 * x50
    x52 = x48 * x51
    x53 = x36 * x7
    x54 = x45 * x7
    x55 = x38 * x53 + x54
    x56 = x3 * x7
    x57 = 2.23606797749979
    x58 = 0.06666666666666667 * x50
    x59 = x57 * x58
    x60 = x10 * x36
    x61 = x10 * x45
    x62 = x38 * x60 + x61
    x63 = x0**2 / x12**2
    x64 = x33 * x8
    x65 = x63 * x8
    x66 = x38 * x63
    x67 = x47 * x8
    x68 = 1.732050807568877
    x69 = 0.1111111111111111 * x68
    x70 = x50 * x69
    x71 = x63 * x7
    x72 = x10 * x71
    x73 = x10 * x7
    x74 = x47 * x73
    x75 = 0.3333333333333333 * x50
    x76 = x11 * x63
    x77 = x11 * x47
    x78 = x7**3
    x79 = x0**3 / x12**3
    x80 = x33 * x79
    x81 = x78 * x79
    x82 = x79 * x8
    x83 = x10 * x82
    x84 = x11 * x7
    x85 = x79 * x84
    x86 = x10**3
    x87 = x79 * x86
    x88 = x0**4 / x12**4
    x89 = x49 * x88
    x90 = 0.009523809523809524 * x89
    x91 = x7**4 * x90
    x92 = x32 * x48
    x93 = 0.06666666666666667 * x57
    x94 = x89 * x93
    x95 = x78 * x94
    x96 = x11 * x69 * x89
    x97 = x86 * x94
    x98 = x10**4 * x90
    x99 = -x6 - A[1]
    x100 = 2.0 * x1 * x18 * x19 * x24 * x25 * x26 * x99 - x23 * x7
    x101 = x100 * x4
    x102 = 2.0 * x1 * x16 * x18 * x19 * x24 * x25 * x99 - x30 * x7
    x103 = x100 * x28 - x102 * x31
    x104 = x103 * x3
    x105 = x5 * x63
    x106 = x3**3
    x107 = x101 * x79
    x108 = 10.2469507659596
    x109 = x108 * x51
    x110 = x100 * x7
    x111 = x110 + x40
    x112 = x111 * x36
    x113 = x112 * x4
    x114 = x103 * x7
    x115 = x114 + x34
    x116 = x111 * x4
    x117 = x3 * x63
    x118 = x5 * x79
    x119 = 3.872983346207417
    x120 = x119 * x58
    x121 = x101 * x60
    x122 = x112 * x7 + x54
    x123 = x122 * x42
    x124 = x53 * (x115 + x34)
    x125 = x117 * x4
    x126 = x110 * x60 + x61
    x127 = x126 * x42
    x128 = x34 * x60
    x129 = x114 * x60 + x128
    x130 = x68 * x75
    x131 = x101 * x76
    x132 = x42 * (x122 * x53 + x67)
    x133 = x124 * x53 + x34 * x65
    x134 = x42 * (x126 * x53 + x74)
    x135 = x129 * x53 + x34 * x72
    x136 = x42 * (x110 * x76 + x77)
    x137 = x34 * x76
    x138 = x114 * x76 + x137
    x139 = x107 * x86
    x140 = x34 * x87
    x141 = -x9 - A[2]
    x142 = 2.0 * x1 * x141 * x18 * x19 * x24 * x25 * x26 - x10 * x23
    x143 = x142 * x4
    x144 = 2.0 * x1 * x141 * x16 * x18 * x19 * x24 * x25 - x10 * x30
    x145 = x142 * x28 - x144 * x31
    x146 = x145 * x3
    x147 = x143 * x79
    x148 = x143 * x53
    x149 = x117 * x7
    x150 = x10 * x142 + x40
    x151 = x150 * x42
    x152 = x10 * x145 + x34
    x153 = x150 * x4
    x154 = x143 * x65
    x155 = x3 * x8
    x156 = x153 * x71
    x157 = x56 * x79
    x158 = x150 * x60 + x61
    x159 = x158 * x42
    x160 = x128 + x152 * x60
    x161 = x143 * x81
    x162 = x153 * x82
    x163 = x158 * x4 * x71
    x164 = x42 * (x158 * x60 + x77)
    x165 = x137 + x160 * x60
    x166 = 0.06666666666666667 * x119
    x167 = x166 * x89
    x168 = 0.3333333333333333 * x49
    x169 = x166 * x49
    x170 = x14 * x7
    x171 = x100 * x99 - x102 * x170 + x27
    x172 = x171 * x48
    x173 = x3**4 * x90
    x174 = x171 * x7
    x175 = 2.0 * x101
    x176 = x174 + x175
    x177 = x106 * x94
    x178 = 2.0 * x113 + x176 * x53
    x179 = x49 * x69
    x180 = x118 * x179
    x181 = x60 * (x174 + x175)
    x182 = x118 * x168
    x183 = 2.0 * x123 + x178 * x53
    x184 = x49 * x93
    x185 = x117 * x184
    x186 = 2.0 * x127 + x181 * x53
    x187 = x117 * x168
    x188 = x76 * (x174 + x175)
    x189 = x142 * x99 - x144 * x170
    x190 = x143 + x189 * x7
    x191 = x106 * x167
    x192 = x10 * x189 + x101
    x193 = x148 + x190 * x53
    x194 = x151 + x192 * x53
    x195 = x121 + x192 * x60
    x196 = x154 + x193 * x53
    x197 = x117 * x169
    x198 = x156 + x194 * x53
    x199 = x187 * x68
    x200 = x159 + x195 * x53
    x201 = x131 + x195 * x60
    x202 = -x10 * x14 * x144 + x141 * x142 + x27
    x203 = x202 * x48
    x204 = x10 * x202 + 2.0 * x143
    x205 = x168 * x204 * x88
    x206 = 2.0 * x151 + x204 * x60
    x207 = 2.0 * x159 + x206 * x60

    # 90 item(s)
    result[0, 0, 0] = numpy.sum(
        x52
        * (
            x37 * (x37 * (x37 * (x33 + x35) + x41 * x43) + x43 * x46)
            + x43 * (x37 * x46 + x47 * x5)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x59
        * (x37 * (x37 * x53 * (x33 + x35) + x43 * x55) + x43 * (x37 * x55 + x47 * x56))
    )
    result[0, 0, 2] = numpy.sum(
        x59
        * (
            x37 * (x37 * x60 * (x33 + x35) + x43 * x62)
            + x43 * (x10 * x3 * x47 + x37 * x62)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x70 * (x37 * (x35 * x65 + x63 * x64) + x43 * (x66 * x8 + x67))
    )
    result[0, 0, 4] = numpy.sum(x75 * (x37 * x72 * (x33 + x35) + x43 * (x66 * x73 + x74)))
    result[0, 0, 5] = numpy.sum(x70 * (x37 * x76 * (x33 + x35) + x43 * (x11 * x66 + x77)))
    result[0, 0, 6] = numpy.sum(x59 * (x35 * x81 + x78 * x80))
    result[0, 0, 7] = numpy.sum(x75 * (x10 * x64 * x79 + x35 * x83))
    result[0, 0, 8] = numpy.sum(x75 * (x35 * x85 + x80 * x84))
    result[0, 0, 9] = numpy.sum(x59 * (x35 * x87 + x80 * x86))
    result[0, 0, 10] = numpy.sum(x91 * x92)
    result[0, 0, 11] = numpy.sum(x10 * x32 * x95)
    result[0, 0, 12] = numpy.sum(x32 * x8 * x96)
    result[0, 0, 13] = numpy.sum(x32 * x7 * x97)
    result[0, 0, 14] = numpy.sum(x92 * x98)
    result[1, 0, 0] = numpy.sum(
        x109 * (x106 * x107 + x37 * (x101 * x105 + x37**2 * (2.0 * x101 + x104)))
    )
    result[1, 0, 1] = numpy.sum(
        x120 * (x116 * x118 + x37 * (x116 * x117 + x37 * (x113 + x115 * x37)))
    )
    result[1, 0, 2] = numpy.sum(
        x120 * (x10 * x107 * x5 + x37 * (x10 * x101 * x117 + x37 * (x104 * x60 + x121)))
    )
    result[1, 0, 3] = numpy.sum(x75 * (x122 * x125 + x37 * (x123 + x124 * x37)))
    result[1, 0, 4] = numpy.sum(x130 * (x125 * x126 + x37 * (x127 + x129 * x37)))
    result[1, 0, 5] = numpy.sum(x75 * (x107 * x11 * x3 + x37 * (x104 * x76 + x131)))
    result[1, 0, 6] = numpy.sum(x120 * (x132 + x133 * x37))
    result[1, 0, 7] = numpy.sum(x130 * (x134 + x135 * x37))
    result[1, 0, 8] = numpy.sum(x130 * (x136 + x138 * x37))
    result[1, 0, 9] = numpy.sum(x120 * (x104 * x87 + x139))
    result[1, 0, 10] = numpy.sum(x109 * (x133 * x53 + x34 * x81))
    result[1, 0, 11] = numpy.sum(x120 * (x135 * x53 + x34 * x83))
    result[1, 0, 12] = numpy.sum(x75 * (x138 * x53 + x34 * x85))
    result[1, 0, 13] = numpy.sum(x120 * (x114 * x87 + x140))
    result[1, 0, 14] = numpy.sum(x103 * x108 * x98)
    result[2, 0, 0] = numpy.sum(
        x109 * (x106 * x147 + x37 * (x105 * x143 + x37**2 * (2.0 * x143 + x146)))
    )
    result[2, 0, 1] = numpy.sum(
        x120 * (x118 * x143 * x7 + x37 * (x143 * x149 + x37 * (x146 * x53 + x148)))
    )
    result[2, 0, 2] = numpy.sum(
        x120 * (x118 * x153 + x37 * (x125 * x150 + x37 * (x151 + x152 * x37)))
    )
    result[2, 0, 3] = numpy.sum(x75 * (x147 * x155 + x37 * (x146 * x65 + x154)))
    result[2, 0, 4] = numpy.sum(x130 * (x153 * x157 + x37 * (x149 * x152 + x156)))
    result[2, 0, 5] = numpy.sum(x75 * (x125 * x158 + x37 * (x159 + x160 * x37)))
    result[2, 0, 6] = numpy.sum(x120 * (x146 * x81 + x161))
    result[2, 0, 7] = numpy.sum(x130 * (x152 * x3 * x82 + x162))
    result[2, 0, 8] = numpy.sum(x130 * (x149 * x160 + x163))
    result[2, 0, 9] = numpy.sum(x120 * (x164 + x165 * x37))
    result[2, 0, 10] = numpy.sum(x108 * x145 * x91)
    result[2, 0, 11] = numpy.sum(x152 * x167 * x78)
    result[2, 0, 12] = numpy.sum(x160 * x168 * x82)
    result[2, 0, 13] = numpy.sum(x165 * x169 * x71)
    result[2, 0, 14] = numpy.sum(x109 * (x140 + x165 * x60))
    result[3, 0, 0] = numpy.sum(x172 * x173)
    result[3, 0, 1] = numpy.sum(x176 * x177)
    result[3, 0, 2] = numpy.sum(x10 * x171 * x177)
    result[3, 0, 3] = numpy.sum(x178 * x180)
    result[3, 0, 4] = numpy.sum(x181 * x182)
    result[3, 0, 5] = numpy.sum(x171 * x5 * x96)
    result[3, 0, 6] = numpy.sum(x183 * x185)
    result[3, 0, 7] = numpy.sum(x186 * x187)
    result[3, 0, 8] = numpy.sum(x187 * x188)
    result[3, 0, 9] = numpy.sum(x171 * x3 * x97)
    result[3, 0, 10] = numpy.sum(x52 * (2.0 * x132 + x183 * x53))
    result[3, 0, 11] = numpy.sum(x59 * (2.0 * x134 + x186 * x53))
    result[3, 0, 12] = numpy.sum(x70 * (2.0 * x136 + x188 * x53))
    result[3, 0, 13] = numpy.sum(x59 * x87 * (x174 + x175))
    result[3, 0, 14] = numpy.sum(x172 * x98)
    result[4, 0, 0] = numpy.sum(x108 * x173 * x189)
    result[4, 0, 1] = numpy.sum(x190 * x191)
    result[4, 0, 2] = numpy.sum(x191 * x192)
    result[4, 0, 3] = numpy.sum(x182 * x193)
    result[4, 0, 4] = numpy.sum(x182 * x194 * x68)
    result[4, 0, 5] = numpy.sum(x182 * x195)
    result[4, 0, 6] = numpy.sum(x196 * x197)
    result[4, 0, 7] = numpy.sum(x198 * x199)
    result[4, 0, 8] = numpy.sum(x199 * x200)
    result[4, 0, 9] = numpy.sum(x197 * x201)
    result[4, 0, 10] = numpy.sum(x109 * (x161 + x196 * x53))
    result[4, 0, 11] = numpy.sum(x120 * (x162 + x198 * x53))
    result[4, 0, 12] = numpy.sum(x75 * (x163 + x200 * x53))
    result[4, 0, 13] = numpy.sum(x120 * (x164 + x201 * x53))
    result[4, 0, 14] = numpy.sum(x109 * (x139 + x201 * x60))
    result[5, 0, 0] = numpy.sum(x173 * x203)
    result[5, 0, 1] = numpy.sum(x177 * x202 * x7)
    result[5, 0, 2] = numpy.sum(x177 * x204)
    result[5, 0, 3] = numpy.sum(x202 * x5 * x69 * x8 * x89)
    result[5, 0, 4] = numpy.sum(x205 * x5 * x7)
    result[5, 0, 5] = numpy.sum(x180 * x206)
    result[5, 0, 6] = numpy.sum(x202 * x3 * x95)
    result[5, 0, 7] = numpy.sum(x155 * x205)
    result[5, 0, 8] = numpy.sum(x157 * x168 * x206)
    result[5, 0, 9] = numpy.sum(x185 * x207)
    result[5, 0, 10] = numpy.sum(x203 * x91)
    result[5, 0, 11] = numpy.sum(x204 * x95)
    result[5, 0, 12] = numpy.sum(x179 * x206 * x82)
    result[5, 0, 13] = numpy.sum(x184 * x207 * x71)
    result[5, 0, 14] = numpy.sum(x52 * (2.0 * x164 + x207 * x60))
    return result


def int3c2e3d_sph_210(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dp|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 3, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = cx + x1
    x4 = x3 ** (-1.0)
    x5 = -x2 * (ax * A[0] + bx * B[0])
    x6 = x5 + C[0]
    x7 = -x6
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = x8 + C[1]
    x10 = -x9
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = x11 + C[2]
    x13 = -x12
    x14 = cx * x4
    x15 = x1 * x14
    x16 = x15 * (x10**2 + x13**2 + x7**2)
    x17 = boys(1, x16)
    x18 = x17 * x4
    x19 = cx ** (-1.0)
    x20 = x19 * boys(0, x16)
    x21 = x2 * (x18 - x20)
    x22 = x5 + A[0]
    x23 = -x22
    x24 = 2.0 * x22
    x25 = boys(2, x16)
    x26 = x25 * x4
    x27 = x17 * x19
    x28 = -x23 * x27 + x26 * x7
    x29 = x14 * x28
    x30 = x21 - x24 * (x18 * x7 - x20 * x23) + 2.0 * x29 * x6
    x31 = x15 * (x12**2 + x6**2 + x9**2)
    x32 = x4 * boys(1, x31)
    x33 = boys(0, x31)
    x34 = 2.0 * x2
    x35 = x2 * (x26 - x27)
    x36 = x4 * boys(3, x16)
    x37 = x14 * x6
    x38 = 2.0 * x37
    x39 = A[1] - B[1]
    x40 = A[2] - B[2]
    x41 = (
        17.49341832762486
        * da
        * db
        * dc
        * x3 ** (-0.5)
        * numpy.exp(-ax * bx * x2 * (x0**2 + x39**2 + x40**2))
    )
    x42 = x2 * x41
    x43 = 0.5773502691896258 * x42
    x44 = -x30
    x45 = x8 + A[1]
    x46 = -x45
    x47 = x10 * x26 - x17 * x19 * x46
    x48 = -x47
    x49 = x14 * x48
    x50 = x10 * x18 - x20 * x46
    x51 = x23 * x50 + x49 * x7
    x52 = x10 * x36 - x19 * x25 * x46
    x53 = x14 * x7
    x54 = x2 * (x49 + x50) - x24 * x51 - x38 * (x23 * x48 + x52 * x53)
    x55 = x11 + A[2]
    x56 = -x55
    x57 = x13 * x26 - x17 * x19 * x56
    x58 = -x57
    x59 = x14 * x58
    x60 = x13 * x18 - x20 * x56
    x61 = x2 * (x59 + x60)
    x62 = -x60
    x63 = -x23 * x62 + x59 * x7
    x64 = x13 * x36 - x19 * x25 * x56
    x65 = -x64
    x66 = -x24 * x63 - x38 * (x23 * x58 - x53 * x65) + x61
    x67 = 2.0 * x51
    x68 = x14 * x47
    x69 = x21 - 2.0 * x45 * x50 + 2.0 * x68 * x9
    x70 = -x69
    x71 = x14 * x9
    x72 = 2.0 * x71
    x73 = x35 - 2.0 * x45 * x47 + x52 * x72
    x74 = x10 * x59 - x46 * x62
    x75 = x10 * x14 * x65 - x46 * x58
    x76 = -x22 * x74 + x37 * x75
    x77 = x34 * x41
    x78 = 2.0 * x63
    x79 = x14 * x57
    x80 = 2.0 * x12 * x79 + x21 - 2.0 * x55 * x60
    x81 = -x80
    x82 = x12 * x14
    x83 = x35 - 2.0 * x55 * x57 + 2.0 * x64 * x82
    x84 = -x83
    x85 = -2.0 * x45 * x74 + x61 + x72 * x75
    x86 = 2.0 * x74

    # 18 item(s)
    result[0, 0, 0] = numpy.sum(
        x43
        * (
            -x0 * x30
            + x22 * x30
            + x34 * (-x19 * x22 * x33 + x29 + x32 * x6)
            + x37 * (x24 * x28 - x35 + x38 * (x19 * x23 * x25 - x36 * x7))
        )
    )
    result[0, 1, 0] = numpy.sum(x43 * (x39 * x44 - x54))
    result[0, 2, 0] = numpy.sum(x43 * (x40 * x44 - x66))
    result[1, 0, 0] = numpy.sum(-x42 * (x0 * x67 + x54))
    result[1, 1, 0] = numpy.sum(-x42 * (x22 * x70 + x37 * x73 + x39 * x67))
    result[1, 2, 0] = numpy.sum(-x77 * (x40 * x51 + x76))
    result[2, 0, 0] = numpy.sum(-x42 * (x0 * x78 + x66))
    result[2, 1, 0] = numpy.sum(-x77 * (x39 * x63 + x76))
    result[2, 2, 0] = numpy.sum(x42 * (-x22 * x81 + x37 * x84 - x40 * x78))
    result[3, 0, 0] = numpy.sum(x43 * (-x0 * x69 + x22 * x69 - x37 * x73))
    result[3, 1, 0] = numpy.sum(
        x43
        * (x34 * (-x19 * x33 * x45 + x32 * x9 + x68) - x39 * x69 + x45 * x69 - x71 * x73)
    )
    result[3, 2, 0] = numpy.sum(x43 * (x40 * x70 - x85))
    result[4, 0, 0] = numpy.sum(-x77 * (x0 * x74 + x76))
    result[4, 1, 0] = numpy.sum(-x42 * (x39 * x86 + x85))
    result[4, 2, 0] = numpy.sum(x42 * (-x40 * x86 - x45 * x81 + x71 * x84))
    result[5, 0, 0] = numpy.sum(x43 * (-x0 * x80 + x22 * x80 - x37 * x83))
    result[5, 1, 0] = numpy.sum(x43 * (-x39 * x80 + x45 * x80 - x71 * x83))
    result[5, 2, 0] = numpy.sum(
        x43
        * (x34 * (x12 * x32 - x19 * x33 * x55 + x79) - x40 * x80 + x55 * x80 - x82 * x83)
    )
    return result


def int3c2e3d_sph_211(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dp|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 3, 3), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = x3 + C[0]
    x5 = cx + x1
    x6 = x5 ** (-1.0)
    x7 = -x4
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = x8 + C[1]
    x10 = -x9
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = x11 + C[2]
    x13 = -x12
    x14 = cx * x6
    x15 = x1 * x14
    x16 = x15 * (x10**2 + x13**2 + x7**2)
    x17 = boys(2, x16)
    x18 = x17 * x6
    x19 = cx ** (-1.0)
    x20 = x19 * boys(1, x16)
    x21 = x18 - x20
    x22 = x2 * x21
    x23 = x3 + A[0]
    x24 = -x23
    x25 = x18 * x7 - x20 * x24
    x26 = boys(3, x16)
    x27 = x26 * x6
    x28 = x17 * x19
    x29 = -x24 * x28 + x27 * x7
    x30 = x14 * x4
    x31 = 2.0 * x30
    x32 = -x22 + 2.0 * x23 * x25 - x29 * x31
    x33 = 2.0 * x2 * x25 + x32 * x4
    x34 = x23 * x32
    x35 = 2.0 * x2
    x36 = x35 * (-x14 * x29 + x25)
    x37 = x27 - x28
    x38 = x2 * x37
    x39 = x6 * boys(4, x16)
    x40 = 2.0 * x23 * x29 + x31 * (x19 * x24 * x26 - x39 * x7) - x38
    x41 = x2 * x32
    x42 = A[1] - B[1]
    x43 = A[2] - B[2]
    x44 = (
        17.49341832762486
        * da
        * db
        * dc
        * x5 ** (-1.5)
        * numpy.exp(-ax * bx * x2 * (x0**2 + x42**2 + x43**2))
    )
    x45 = 0.5773502691896258
    x46 = x44 * x45
    x47 = x44 * x9
    x48 = x45 * (x0 * x32 + x30 * x40 - x34 - x36)
    x49 = x12 * x44
    x50 = x8 + A[1]
    x51 = -x50
    x52 = x10 * x27 - x17 * x19 * x51
    x53 = -x52
    x54 = x14 * x53
    x55 = x10 * x18 - x20 * x51
    x56 = x2 * (x54 + x55)
    x57 = -x55
    x58 = -x24 * x57 + x54 * x7
    x59 = 2.0 * x23
    x60 = x10 * x39 - x19 * x26 * x51
    x61 = -x60
    x62 = x14 * x7
    x63 = -x31 * (x24 * x53 - x61 * x62) + x56 - x58 * x59
    x64 = -x63
    x65 = x35 * x58 + x4 * x64
    x66 = x64 * x9
    x67 = 0.5 * x41
    x68 = -x67
    x69 = x45 * x49
    x70 = x11 + A[2]
    x71 = -x70
    x72 = x13 * x27 - x17 * x19 * x71
    x73 = -x72
    x74 = x14 * x73
    x75 = x13 * x18 - x20 * x71
    x76 = x2 * (x74 + x75)
    x77 = -x75
    x78 = -x24 * x77 + x7 * x74
    x79 = x13 * x39 - x19 * x26 * x71
    x80 = -x79
    x81 = -x31 * (x24 * x73 - x62 * x80) - x59 * x78 + x76
    x82 = -x81
    x83 = x35 * x78 + x4 * x82
    x84 = x45 * x47
    x85 = x12 * x82
    x86 = x15 * (x12**2 + x4**2 + x9**2)
    x87 = x6 * boys(2, x86)
    x88 = boys(1, x86)
    x89 = x2 * (-x19 * x50 * x88 + x87 * x9)
    x90 = -x23 * x55 + x30 * x52
    x91 = 2.0 * x90
    x92 = x4 * x91 + x89
    x93 = x2 * (-x19 * x23 * x88 + x4 * x87)
    x94 = x9 * x91 + x93
    x95 = x14 * x9
    x96 = 2.0 * x95
    x97 = x22 - 2.0 * x50 * x55 + x52 * x96
    x98 = -x97
    x99 = -x38 + 2.0 * x50 * x52 - x60 * x96
    x100 = x30 * x99
    x101 = -x100 + x23 * x98
    x102 = 0.5 * x2
    x103 = x2 * x90
    x104 = 2.0 * x103
    x105 = -x50 * x75 + x72 * x95
    x106 = x105 * x2
    x107 = x10 * x74 - x51 * x77
    x108 = x10 * x14
    x109 = x108 * x80 - x51 * x73
    x110 = -2.0 * x107 * x23 + 2.0 * x109 * x30
    x111 = -x106 + x110 * x4
    x112 = -x23 * x75 + x30 * x72
    x113 = x112 * x2
    x114 = x110 * x9 - x113
    x115 = -x103 + x110 * x12
    x116 = x2 * (x12 * x87 - x19 * x70 * x88)
    x117 = 2.0 * x112
    x118 = x116 + x117 * x4
    x119 = x117 * x12 + x93
    x120 = x12 * x14
    x121 = 2.0 * x120
    x122 = x121 * x72 + x22 - 2.0 * x70 * x75
    x123 = -x122
    x124 = -x121 * x79 - x38 + 2.0 * x70 * x72
    x125 = x124 * x30
    x126 = x123 * x23 - x125
    x127 = -x102 * x122
    x128 = 2.0 * x113
    x129 = -x2 * x21
    x130 = 2.0 * x51
    x131 = x24 * (-2.0 * x10 * x54 + x129 + x130 * x57)
    x132 = -x2 * x37
    x133 = x62 * (-2.0 * x108 * x61 + x130 * x53 + x132)
    x134 = x102 * x98
    x135 = x35 * x55 + x9 * x98
    x136 = x50 * x98
    x137 = 2.0 * x56
    x138 = -x136 - x137 + x42 * x98 + x95 * x99
    x139 = x4 * x44
    x140 = x139 * x45
    x141 = 1.5 * x2
    x142 = -2.0 * x107 * x50 + x109 * x96 + x76
    x143 = -x142
    x144 = x107 * x35 + x143 * x9
    x145 = x12 * x143
    x146 = 2.0 * x105
    x147 = x116 + x146 * x9
    x148 = x12 * x146 + x89
    x149 = x124 * x95
    x150 = x123 * x50 - x149
    x151 = 2.0 * x106
    x152 = 2.0 * x71
    x153 = 2.0 * x13
    x154 = x129 + x152 * x77 - x153 * x74
    x155 = x154 * x24
    x156 = x132 - x14 * x153 * x80 + x152 * x73
    x157 = x156 * x62
    x158 = x102 * x123
    x159 = x12 * x123 + x35 * x75
    x160 = x154 * x51
    x161 = x108 * x156
    x162 = x123 * x70
    x163 = 2.0 * x76
    x164 = x120 * x124 + x123 * x43 - x162 - x163

    # 54 item(s)
    result[0, 0, 0] = numpy.sum(
        0.5
        * x46
        * (-2.0 * x0 * x33 + 2.0 * x4 * (-cx * x4 * x40 * x6 + x34 + x36) + 3.0 * x41)
    )
    result[0, 0, 1] = numpy.sum(-x47 * x48)
    result[0, 0, 2] = numpy.sum(-x48 * x49)
    result[0, 1, 0] = numpy.sum(-x46 * (x33 * x42 + x65))
    result[0, 1, 1] = numpy.sum(-x46 * (x32 * x42 * x9 + x66 + x68))
    result[0, 1, 2] = numpy.sum(x69 * (-x32 * x42 + x63))
    result[0, 2, 0] = numpy.sum(-x46 * (x33 * x43 + x83))
    result[0, 2, 1] = numpy.sum(x84 * (-x32 * x43 + x81))
    result[0, 2, 2] = numpy.sum(-x46 * (x12 * x32 * x43 + x68 + x85))
    result[1, 0, 0] = numpy.sum(x44 * (x0 * x92 - x65))
    result[1, 0, 1] = numpy.sum(x44 * (x0 * x94 - x66 + x67))
    result[1, 0, 2] = numpy.sum(x49 * (x0 * x91 + x63))
    result[1, 1, 0] = numpy.sum(x44 * (x101 * x4 - x102 * x97 + x42 * x92))
    result[1, 1, 1] = numpy.sum(x44 * (x101 * x9 - x104 + x42 * x94))
    result[1, 1, 2] = numpy.sum(x49 * (-x100 + x23 * x98 + x42 * x91))
    result[1, 2, 0] = numpy.sum(x44 * (x111 + x43 * x92))
    result[1, 2, 1] = numpy.sum(x44 * (x114 + x43 * x94))
    result[1, 2, 2] = numpy.sum(x44 * (x115 + x12 * x43 * x91))
    result[2, 0, 0] = numpy.sum(x44 * (x0 * x118 - x83))
    result[2, 0, 1] = numpy.sum(x47 * (x0 * x117 + x81))
    result[2, 0, 2] = numpy.sum(x44 * (x0 * x119 + x67 - x85))
    result[2, 1, 0] = numpy.sum(x44 * (x111 + x118 * x42))
    result[2, 1, 1] = numpy.sum(x44 * (x114 + x117 * x42 * x9))
    result[2, 1, 2] = numpy.sum(x44 * (x115 + x119 * x42))
    result[2, 2, 0] = numpy.sum(x44 * (x118 * x43 + x126 * x4 + x127))
    result[2, 2, 1] = numpy.sum(x47 * (x117 * x43 + x123 * x23 - x125))
    result[2, 2, 2] = numpy.sum(x44 * (x119 * x43 + x12 * x126 - x128))
    result[3, 0, 0] = numpy.sum(x46 * (-x0 * x4 * x98 + x134 - x4 * (x131 - x133)))
    result[3, 0, 1] = numpy.sum(x46 * (-x0 * x135 + x101 * x9 - x104))
    result[3, 0, 2] = numpy.sum(x69 * (-x0 * x98 - x131 + x133))
    result[3, 1, 0] = numpy.sum(-x138 * x140)
    result[3, 1, 1] = numpy.sum(
        x46 * (-x135 * x42 + x141 * x98 + x9 * (-cx * x6 * x9 * x99 + x136 + x137))
    )
    result[3, 1, 2] = numpy.sum(-x138 * x69)
    result[3, 2, 0] = numpy.sum(x140 * (x142 - x43 * x98))
    result[3, 2, 1] = numpy.sum(-x46 * (x135 * x43 + x144))
    result[3, 2, 2] = numpy.sum(x46 * (-x12 * x43 * x98 + x134 - x145))
    result[4, 0, 0] = numpy.sum(x44 * (x0 * x146 * x4 + x111))
    result[4, 0, 1] = numpy.sum(x44 * (x0 * x147 + x114))
    result[4, 0, 2] = numpy.sum(x44 * (x0 * x148 + x115))
    result[4, 1, 0] = numpy.sum(x139 * (x142 + x146 * x42))
    result[4, 1, 1] = numpy.sum(x44 * (-x144 + x147 * x42))
    result[4, 1, 2] = numpy.sum(x44 * (x134 - x145 + x148 * x42))
    result[4, 2, 0] = numpy.sum(x139 * (x123 * x50 + x146 * x43 - x149))
    result[4, 2, 1] = numpy.sum(x44 * (x127 + x147 * x43 + x150 * x9))
    result[4, 2, 2] = numpy.sum(x44 * (x12 * x150 + x148 * x43 - x151))
    result[5, 0, 0] = numpy.sum(x46 * (-x0 * x123 * x4 + x158 - x4 * (x155 - x157)))
    result[5, 0, 1] = numpy.sum(x84 * (-x0 * x123 - x155 + x157))
    result[5, 0, 2] = numpy.sum(x46 * (-x0 * x159 + x12 * x126 - x128))
    result[5, 1, 0] = numpy.sum(x140 * (-x123 * x42 - x160 + x161))
    result[5, 1, 1] = numpy.sum(x46 * (-x123 * x42 * x9 + x158 - x9 * (x160 - x161)))
    result[5, 1, 2] = numpy.sum(x46 * (x12 * x150 - x151 - x159 * x42))
    result[5, 2, 0] = numpy.sum(-x140 * x164)
    result[5, 2, 1] = numpy.sum(-x164 * x84)
    result[5, 2, 2] = numpy.sum(
        x46 * (x12 * (-cx * x12 * x124 * x6 + x162 + x163) + x123 * x141 - x159 * x43)
    )
    return result


def int3c2e3d_sph_212(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dp|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 3, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = cx + x0
    x3 = x2 ** (-1.0)
    x4 = -x1 * (ax * A[0] + bx * B[0])
    x5 = x4 + C[0]
    x6 = -x5
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x3
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x6**2 + x9**2)
    x16 = boys(3, x15)
    x17 = x16 * x3
    x18 = cx ** (-1.0)
    x19 = x18 * boys(2, x15)
    x20 = x17 - x19
    x21 = x1 * x20
    x22 = x4 + A[0]
    x23 = -x22
    x24 = x17 * x6 - x19 * x23
    x25 = boys(4, x15)
    x26 = x25 * x3
    x27 = x16 * x18
    x28 = -x23 * x27 + x26 * x6
    x29 = 2.0 * x5
    x30 = x13 * x29
    x31 = x21 - 2.0 * x22 * x24 + x28 * x30
    x32 = -x31
    x33 = 2.0 * x1
    x34 = x26 - x27
    x35 = x1 * x34
    x36 = x3 * boys(5, x15)
    x37 = x13 * x5
    x38 = (
        x22 * x32
        - x33 * (x13 * x28 - x24)
        - x37 * (2.0 * x22 * x28 + x30 * (x18 * x23 * x25 - x36 * x6) - x35)
    )
    x39 = 0.5 * x5
    x40 = A[0] - B[0]
    x41 = x5**2
    x42 = x8**2
    x43 = x11**2
    x44 = x14 * (x41 + x42 + x43)
    x45 = boys(2, x44)
    x46 = x1 * x18 * x45
    x47 = x1 * x24
    x48 = x32 * x5 + 2.0 * x47
    x49 = x1 * (2.0 * x24 * x5 + x46) + x48 * x5
    x50 = 1.5 * x1
    x51 = A[1] - B[1]
    x52 = A[2] - B[2]
    x53 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0
        * x2 ** (-2.5)
        * numpy.exp(-ax * bx * x1 * (x40**2 + x51**2 + x52**2))
    )
    x54 = 0.3333333333333333 * x53
    x55 = x3 * boys(3, x44)
    x56 = 2.0 * x1 * (x18 * x22 * x45 - x5 * x55) - x31 * x5
    x57 = 1.732050807568877
    x58 = x54 * x57
    x59 = x58 * (x31 * x50 - x38 * x5 + x40 * x56)
    x60 = x54 * (x31 * x40 + x38)
    x61 = x7 + A[1]
    x62 = -x61
    x63 = x17 * x9 - x19 * x62
    x64 = x1 * x63
    x65 = -x64
    x66 = -x63
    x67 = -x16 * x18 * x62 + x26 * x9
    x68 = -x67
    x69 = x13 * x68
    x70 = -x23 * x66 + x6 * x69
    x71 = x5 * x70
    x72 = x65 + 2.0 * x71
    x73 = x1 * (x63 + x69)
    x74 = 2.0 * x22
    x75 = -x18 * x25 * x62 + x36 * x9
    x76 = -x75
    x77 = x13 * x6
    x78 = -x30 * (x23 * x68 - x76 * x77) - x70 * x74 + x73
    x79 = -x78
    x80 = x1 * x70
    x81 = 2.0 * x80
    x82 = x1 * x72 + x5 * (x5 * x79 + x81)
    x83 = -x47
    x84 = x70 * x8
    x85 = x83 + 2.0 * x84
    x86 = x1 * x85
    x87 = -x1 * x32
    x88 = x79 * x8
    x89 = -x39 * (x87 + 2.0 * x88)
    x90 = x51 * x56
    x91 = x5 * x78
    x92 = -x22 * x63 + x37 * x67
    x93 = x11 * x58
    x94 = x31 * x51
    x95 = x8 * x94
    x96 = x1 * x32
    x97 = -x88 + x96
    x98 = x54 * x8
    x99 = -0.5 * x1 * x31 + x78 * x8
    x100 = x43 * x54
    x101 = x10 + A[2]
    x102 = -x101
    x103 = -x102 * x19 + x12 * x17
    x104 = x1 * x103
    x105 = -x104
    x106 = -x103
    x107 = -x102 * x16 * x18 + x12 * x26
    x108 = -x107
    x109 = x108 * x13
    x110 = -x106 * x23 + x109 * x6
    x111 = x110 * x5
    x112 = x105 + 2.0 * x111
    x113 = x1 * (x103 + x109)
    x114 = -x102 * x18 * x25 + x12 * x36
    x115 = -x114
    x116 = -x110 * x74 + x113 - x30 * (x108 * x23 - x115 * x77)
    x117 = -x116
    x118 = x1 * x110
    x119 = 2.0 * x118
    x120 = x1 * x112 + x5 * (x117 * x5 + x119)
    x121 = x52 * x56
    x122 = x116 * x5
    x123 = -x103 * x22 + x107 * x37
    x124 = x58 * x8
    x125 = x11 * x110
    x126 = 2.0 * x125 + x83
    x127 = x1 * x126
    x128 = x11 * x117
    x129 = -x39 * (2.0 * x128 + x87)
    x130 = x31 * x52
    x131 = x42 * x54
    x132 = 0.5 * x96
    x133 = -x128
    x134 = x11 * x130 + x133
    x135 = x11 * x54
    x136 = x65 + x71
    x137 = x29 * x40
    x138 = x1 * (x46 + 2.0 * x63 * x8)
    x139 = -0.5 * x138 + 0.5 * x29 * x85
    x140 = -x86
    x141 = x11 * x53
    x142 = x83 + x84
    x143 = 2.0 * x40
    x144 = x43 * x58
    x145 = 2.0 * x51
    x146 = 2.0 * x8
    x147 = x13 * x146
    x148 = x147 * x67 + x21 - 2.0 * x61 * x63
    x149 = -x148
    x150 = x1 * x149
    x151 = -x1 * x20
    x152 = 2.0 * x62
    x153 = -x1 * x34
    x154 = x13 * x9
    x155 = -x23 * (x151 + x152 * x66 - 2.0 * x69 * x9) + x77 * (
        x152 * x68 + x153 - 2.0 * x154 * x76
    )
    x156 = x155 * x5
    x157 = x150 + x156
    x158 = x5 * x58
    x159 = x155 * x8
    x160 = x159 - x81
    x161 = x149 * x8 + 2.0 * x64
    x162 = 0.5 * x1
    x163 = x160 * x5 + x161 * x162
    x164 = 0.5 * x150
    x165 = x156 + x164
    x166 = x160 * x8
    x167 = x145 * x8
    x168 = -x106 * x62 + x109 * x9
    x169 = -x108 * x62 + x115 * x154
    x170 = x168 * x23 - x169 * x77
    x171 = x1 * x168
    x172 = x170 * x5 - x171
    x173 = x5 * x53
    x174 = 0.6666666666666667 * x57
    x175 = x173 * x174
    x176 = -x118
    x177 = x170 * x8
    x178 = x168 * x8
    x179 = x105 + 2.0 * x178
    x180 = x1 * x179
    x181 = -0.5 * x180 + x5 * (x176 + 2.0 * x177)
    x182 = x11 * x52
    x183 = -x80
    x184 = x11 * x170
    x185 = x183 + 2.0 * x184
    x186 = x11 * x168
    x187 = 2.0 * x186 + x65
    x188 = x1 * x187
    x189 = x185 * x5 - 0.5 * x188
    x190 = x176 + x177
    x191 = x53 * x8
    x192 = x174 * x191
    x193 = -0.5 * x127 + x185 * x8
    x194 = x183 + x184
    x195 = x141 * x174
    x196 = x105 + x111
    x197 = x1 * (2.0 * x103 * x11 + x46)
    x198 = -x197
    x199 = 0.5 * x126 * x29 + 0.5 * x198
    x200 = -x127
    x201 = x42 * x58
    x202 = x125 + x83
    x203 = x51 * x8
    x204 = 2.0 * x52
    x205 = x11 * x13
    x206 = -2.0 * x101 * x103 + 2.0 * x107 * x205 + x21
    x207 = -x206
    x208 = x1 * x207
    x209 = 2.0 * x102
    x210 = 2.0 * x12
    x211 = x106 * x209 - x109 * x210 + x151
    x212 = x108 * x209 - x115 * x13 * x210 + x153
    x213 = -x211 * x23 + x212 * x77
    x214 = x213 * x5
    x215 = x208 + x214
    x216 = 0.5 * x208
    x217 = x214 + x216
    x218 = x11 * x213 - x119
    x219 = 2.0 * x104 + x11 * x207
    x220 = x162 * x219
    x221 = x218 * x5 + x220
    x222 = x11 * x218
    x223 = 2.0 * x182
    x224 = x148 * x40
    x225 = x224 * x5
    x226 = x5 * x54
    x227 = x40 * x5
    x228 = x138 + x161 * x8
    x229 = 2.0 * x1 * (x18 * x45 * x61 - x55 * x8) - x148 * x8
    x230 = -x147 * x75 - x35 + 2.0 * x61 * x67
    x231 = x13 * x8
    x232 = x149 * x61 - x230 * x231 + 2.0 * x73
    x233 = x148 * x51 + x232
    x234 = x41 * x54
    x235 = -x232 * x8
    x236 = 0.5 * x8
    x237 = x148 * x52
    x238 = x113 + x147 * x169 - 2.0 * x168 * x61
    x239 = -x238
    x240 = 2.0 * x171
    x241 = x239 * x8 + x240
    x242 = x11 * x239
    x243 = -x242
    x244 = x11 * x237 + x243
    x245 = x180 + x241 * x8
    x246 = x236 * (x1 * x149 - 2.0 * x242)
    x247 = x105 + x178
    x248 = 0.5 * x146 * x187 + 0.5 * x198
    x249 = x186 + x65
    x250 = x41 * x58
    x251 = -x188
    x252 = x154 * x212 - x211 * x62
    x253 = x252 * x8
    x254 = x11 * x252 - x240
    x255 = x208 + x253
    x256 = x220 + x254 * x8
    x257 = x11 * x254
    x258 = x206 * x40
    x259 = x258 * x5
    x260 = x219 * x40
    x261 = 2.0 * x101 * x107 - 2.0 * x114 * x205 - x35
    x262 = x11 * x219 + x197
    x263 = x206 * x51
    x264 = x231 * x261
    x265 = x263 * x8
    x266 = x219 * x51
    x267 = x101 * x207 + 2.0 * x113 - x205 * x261
    x268 = x206 * x52 + x267
    x269 = -x11 * x267
    x270 = 1.5 * x1 * x207 - x219 * x52 - x269

    # 108 item(s)
    result[0, 0, 0] = numpy.sum(
        -x54 * (x39 * (3.0 * x1 * x32 + x29 * x38) - x40 * x49 + x48 * x50)
    )
    result[0, 0, 1] = numpy.sum(x59 * x8)
    result[0, 0, 2] = numpy.sum(x11 * x59)
    result[0, 0, 3] = numpy.sum(-x42 * x60)
    result[0, 0, 4] = numpy.sum(-x11 * x57 * x60 * x8)
    result[0, 0, 5] = numpy.sum(-x43 * x60)
    result[0, 1, 0] = numpy.sum(x54 * (x49 * x51 + x82))
    result[0, 1, 1] = numpy.sum(x58 * (x8 * x90 + x86 - x89))
    result[0, 1, 2] = numpy.sum(x93 * (x33 * x92 + x90 - x91))
    result[0, 1, 3] = numpy.sum(-x98 * (x95 + x97))
    result[0, 1, 4] = numpy.sum(-x93 * (x95 + x99))
    result[0, 1, 5] = numpy.sum(-x100 * (x78 + x94))
    result[0, 2, 0] = numpy.sum(x54 * (x120 + x49 * x52))
    result[0, 2, 1] = numpy.sum(x124 * (x121 - x122 + x123 * x33))
    result[0, 2, 2] = numpy.sum(x58 * (x11 * x121 + x127 - x129))
    result[0, 2, 3] = numpy.sum(-x131 * (x116 + x130))
    result[0, 2, 4] = numpy.sum(-x124 * (x132 + x134))
    result[0, 2, 5] = numpy.sum(-x135 * (x134 + x96))
    result[1, 0, 0] = numpy.sum(x58 * (-x136 * x137 + x82))
    result[1, 0, 1] = numpy.sum(-x53 * (x139 * x40 + x140 + x89))
    result[1, 0, 2] = numpy.sum(x141 * (2.0 * x1 * x92 - x40 * x72 - x91))
    result[1, 0, 3] = numpy.sum(-x124 * (x142 * x143 + x97))
    result[1, 0, 4] = numpy.sum(-x141 * (x40 * x85 + x99))
    result[1, 0, 5] = numpy.sum(-x144 * (x143 * x70 + x78))
    result[1, 1, 0] = numpy.sum(-x158 * (x136 * x145 + x157))
    result[1, 1, 1] = numpy.sum(-x53 * (x139 * x51 + x163))
    result[1, 1, 2] = numpy.sum(-x141 * (x165 + x51 * x72))
    result[1, 1, 3] = numpy.sum(-x58 * (x140 + x142 * x167 + x166))
    result[1, 1, 4] = numpy.sum(-x141 * (x160 + x51 * x85))
    result[1, 1, 5] = numpy.sum(-x144 * (x145 * x70 + x155))
    result[1, 2, 0] = numpy.sum(-x175 * (x136 * x52 + x172))
    result[1, 2, 1] = numpy.sum(-x53 * (x139 * x52 + x181))
    result[1, 2, 2] = numpy.sum(-x53 * (x182 * x72 + x189))
    result[1, 2, 3] = numpy.sum(-x192 * (x142 * x52 + x190))
    result[1, 2, 4] = numpy.sum(-x53 * (x182 * x85 + x193))
    result[1, 2, 5] = numpy.sum(-x195 * (x182 * x70 + x194))
    result[2, 0, 0] = numpy.sum(x58 * (x120 - x137 * x196))
    result[2, 0, 1] = numpy.sum(x191 * (2.0 * x1 * x123 - x112 * x40 - x122))
    result[2, 0, 2] = numpy.sum(-x53 * (x129 + x199 * x40 + x200))
    result[2, 0, 3] = numpy.sum(-x201 * (x110 * x143 + x116))
    result[2, 0, 4] = numpy.sum(-x191 * (x126 * x40 + x132 + x133))
    result[2, 0, 5] = numpy.sum(-x93 * (x133 + x143 * x202 + x96))
    result[2, 1, 0] = numpy.sum(-x175 * (x172 + x196 * x51))
    result[2, 1, 1] = numpy.sum(-x53 * (x112 * x203 + x181))
    result[2, 1, 2] = numpy.sum(-x53 * (x189 + x199 * x51))
    result[2, 1, 3] = numpy.sum(-x192 * (x110 * x203 + x190))
    result[2, 1, 4] = numpy.sum(-x53 * (x126 * x203 + x193))
    result[2, 1, 5] = numpy.sum(-x195 * (x194 + x202 * x51))
    result[2, 2, 0] = numpy.sum(-x158 * (x196 * x204 + x215))
    result[2, 2, 1] = numpy.sum(-x191 * (x112 * x52 + x217))
    result[2, 2, 2] = numpy.sum(-x53 * (x199 * x52 + x221))
    result[2, 2, 3] = numpy.sum(-x201 * (x110 * x204 + x213))
    result[2, 2, 4] = numpy.sum(-x191 * (x126 * x52 + x218))
    result[2, 2, 5] = numpy.sum(-x58 * (x200 + x202 * x223 + x222))
    result[3, 0, 0] = numpy.sum(-x226 * (x157 + x225))
    result[3, 0, 1] = numpy.sum(x58 * (x161 * x227 - x163))
    result[3, 0, 2] = numpy.sum(-x93 * (x165 + x225))
    result[3, 0, 3] = numpy.sum(x54 * (-x166 + x228 * x40 + x86))
    result[3, 0, 4] = numpy.sum(x93 * (-x159 + x229 * x40 + x81))
    result[3, 0, 5] = numpy.sum(x100 * (-x149 * x22 - x224 + x230 * x37))
    result[3, 1, 0] = numpy.sum(-x233 * x234)
    result[3, 1, 1] = numpy.sum(
        0.5 * x158 * (-3.0 * x1 * x149 + 2.0 * x161 * x51 + 2.0 * x235)
    )
    result[3, 1, 2] = numpy.sum(-x233 * x5 * x93)
    result[3, 1, 3] = numpy.sum(
        -x54 * (x161 * x50 - x228 * x51 + x236 * (3.0 * x1 * x149 - 2.0 * x235))
    )
    result[3, 1, 4] = numpy.sum(x93 * (x148 * x50 + x229 * x51 - x232 * x8))
    result[3, 1, 5] = numpy.sum(-x100 * x233)
    result[3, 2, 0] = numpy.sum(-x234 * (x237 + x238))
    result[3, 2, 1] = numpy.sum(x158 * (x161 * x52 + x241))
    result[3, 2, 2] = numpy.sum(-x158 * (x164 + x244))
    result[3, 2, 3] = numpy.sum(x54 * (x228 * x52 + x245))
    result[3, 2, 4] = numpy.sum(x58 * (x182 * x229 + x188 - x246))
    result[3, 2, 5] = numpy.sum(-x135 * (x150 + x244))
    result[4, 0, 0] = numpy.sum(-x175 * (x168 * x227 + x172))
    result[4, 0, 1] = numpy.sum(-x53 * (x179 * x227 + x181))
    result[4, 0, 2] = numpy.sum(-x53 * (x187 * x227 + x189))
    result[4, 0, 3] = numpy.sum(-x192 * (x190 + x247 * x40))
    result[4, 0, 4] = numpy.sum(-x53 * (x193 + x248 * x40))
    result[4, 0, 5] = numpy.sum(-x195 * (x194 + x249 * x40))
    result[4, 1, 0] = numpy.sum(-x250 * (x145 * x168 + x238))
    result[4, 1, 1] = numpy.sum(x173 * (-x179 * x51 + x241))
    result[4, 1, 2] = numpy.sum(-x173 * (x164 + x187 * x51 + x243))
    result[4, 1, 3] = numpy.sum(x58 * (-x167 * x247 + x245))
    result[4, 1, 4] = numpy.sum(-x53 * (x246 + x248 * x51 + x251))
    result[4, 1, 5] = numpy.sum(-x93 * (x145 * x249 + x150 + x243))
    result[4, 2, 0] = numpy.sum(-x250 * (x168 * x204 + x252))
    result[4, 2, 1] = numpy.sum(-x173 * (x179 * x52 + x216 + x253))
    result[4, 2, 2] = numpy.sum(-x173 * (x187 * x52 + x254))
    result[4, 2, 3] = numpy.sum(-x124 * (x204 * x247 + x255))
    result[4, 2, 4] = numpy.sum(-x53 * (x248 * x52 + x256))
    result[4, 2, 5] = numpy.sum(-x58 * (x223 * x249 + x251 + x257))
    result[5, 0, 0] = numpy.sum(-x226 * (x215 + x259))
    result[5, 0, 1] = numpy.sum(-x124 * (x217 + x259))
    result[5, 0, 2] = numpy.sum(x58 * (-x221 + x260 * x5))
    result[5, 0, 3] = numpy.sum(x131 * (-x207 * x22 - x258 + x261 * x37))
    result[5, 0, 4] = numpy.sum(x124 * (-x11 * x213 + x119 + x260))
    result[5, 0, 5] = numpy.sum(x54 * (x127 - x222 + x262 * x40))
    result[5, 1, 0] = numpy.sum(x234 * (-x207 * x61 - x263 + x264))
    result[5, 1, 1] = numpy.sum(-x158 * (-x162 * x206 + x265 + x8 * (x207 * x61 - x264)))
    result[5, 1, 2] = numpy.sum(x158 * (-x11 * x252 + x240 + x266))
    result[5, 1, 3] = numpy.sum(-x98 * (x255 + x265))
    result[5, 1, 4] = numpy.sum(x58 * (-x256 + x266 * x8))
    result[5, 1, 5] = numpy.sum(x54 * (x188 - x257 + x262 * x51))
    result[5, 2, 0] = numpy.sum(-x234 * x268)
    result[5, 2, 1] = numpy.sum(-x124 * x268 * x5)
    result[5, 2, 2] = numpy.sum(-x158 * x270)
    result[5, 2, 3] = numpy.sum(-x131 * x268)
    result[5, 2, 4] = numpy.sum(-x124 * x270)
    result[5, 2, 5] = numpy.sum(
        -0.5
        * x54
        * (x11 * (3.0 * x1 * x207 - 2.0 * x269) + 2.0 * x219 * x50 - 2.0 * x262 * x52)
    )
    return result


def int3c2e3d_sph_213(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dp|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 3, 10), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = x3**2
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x0
    x14 = x13 ** (-1.0)
    x15 = cx * x14
    x16 = x0 * x15 * (x12 + x6 + x9)
    x17 = boys(4, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = A[0] - B[0]
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x1 * (x20**2 + x21**2 + x22**2))
    x24 = x1 * x19 * x23
    x25 = 2.0 * x18 * x24
    x26 = x17 * x25
    x27 = cx ** (-1.0)
    x28 = x13 ** (-0.5)
    x29 = boys(3, x16)
    x30 = x5 * (2.0 * x1 * x19 * x23 * x27 * x28 * x29 - x26)
    x31 = -2.0 * x1 * x19 * x23 * x27 * x28 * x29 * x4 + x26 * x3
    x32 = -x31
    x33 = boys(5, x16)
    x34 = x25 * x33
    x35 = 2.0 * x1 * x17 * x19 * x23 * x27 * x28 * x4 - x3 * x34
    x36 = x15 * x35
    x37 = -x3 * x36 + x30 + x32 * x4
    x38 = 2.0 * x5
    x39 = x5 * (2.0 * x1 * x17 * x19 * x23 * x27 * x28 - x34)
    x40 = x25 * boys(6, x16)
    x41 = x15 * x3
    x42 = (
        x37 * x4
        - x38 * (x31 + x36)
        - x41
        * (
            x35 * x4
            + x39
            - x41 * (2.0 * x1 * x19 * x23 * x27 * x28 * x33 * x4 - x3 * x40)
        )
    )
    x43 = x3 * x42
    x44 = x37 * x5
    x45 = 3.0 * x44
    x46 = x0 * x14
    x47 = x3 * x46
    x48 = x3 * x37
    x49 = x32 * x5
    x50 = 2.0 * x49
    x51 = x48 + x50
    x52 = x46 * x5
    x53 = 3.0 * x52
    x54 = x3 * x32
    x55 = x27 * x29 * x38
    x56 = x24 * x28 * x55
    x57 = x54 + x56
    x58 = x38 * x46
    x59 = x47 * x51 + x57 * x58
    x60 = x18 * x19 * x23 * x55
    x61 = x47 * x59 + x58 * (x3 * x60 + x47 * x57)
    x62 = x20 * x46
    x63 = da * db * dc
    x64 = 0.06666666666666667 * x63
    x65 = 2.23606797749979 * x64
    x66 = x46 * x8
    x67 = x66 * (x48 + x50)
    x68 = x60 * x8
    x69 = x47 * x67 + x58 * (x54 * x66 + x68)
    x70 = 0.3333333333333333 * x63
    x71 = x11 * x46
    x72 = x71 * (x48 + x50)
    x73 = x11 * x60
    x74 = x47 * x72 + x58 * (x54 * x71 + x73)
    x75 = x0**2 / x13**2
    x76 = x75 * x9
    x77 = x76 * (x48 + x50)
    x78 = x75 * x8
    x79 = x11 * x78
    x80 = x79 * (x48 + x50)
    x81 = 1.732050807568877 * x70
    x82 = x12 * x75
    x83 = x82 * (x48 + x50)
    x84 = x8**3
    x85 = x0**3 / x13**3
    x86 = x42 * x85
    x87 = x84 * x85
    x88 = x20 * x37
    x89 = x85 * x9
    x90 = x11 * x89
    x91 = x12 * x8
    x92 = x85 * x91
    x93 = x11**3
    x94 = x85 * x93
    x95 = -x7 - A[1]
    x96 = 2.0 * x1 * x17 * x19 * x23 * x27 * x28 * x95 - x34 * x8
    x97 = x15 * x96
    x98 = -2.0 * x1 * x19 * x23 * x27 * x28 * x29 * x95 + x26 * x8
    x99 = -x5 * (x97 + x98)
    x100 = -x98
    x101 = x100 * x4 - x3 * x97
    x102 = 2.0 * x1 * x19 * x23 * x27 * x28 * x33 * x95 - x40 * x8
    x103 = x101 * x4 + x41 * (x102 * x41 - x4 * x96) + x99
    x104 = x103 * x3
    x105 = x101 * x5
    x106 = 2.0 * x105
    x107 = x100 * x5
    x108 = x101 * x3
    x109 = x107 + x108
    x110 = x47 * (x107 + x109)
    x111 = x46 * (x110 * x58 + x47 * (x109 * x58 + x47 * (x104 + x106)))
    x112 = x21 * x46
    x113 = x103 * x8
    x114 = x113 + x44
    x115 = x101 * x8
    x116 = x115 + x49
    x117 = x116 * x58
    x118 = x100 * x8
    x119 = x118 + x56
    x120 = x116 * x47 + x119 * x52
    x121 = x46 * (x120 * x58 + x47 * (x114 * x47 + x117))
    x122 = x106 * x71
    x123 = x107 * x71
    x124 = x108 * x71 + x123
    x125 = x46 * (x124 * x58 + x47 * (x104 * x71 + x122))
    x126 = x66 * (x114 + x44)
    x127 = x66 * (x116 + x49)
    x128 = x127 * x58
    x129 = x46 * (x126 * x47 + x128)
    x130 = x44 * x71
    x131 = x113 * x71 + x130
    x132 = x49 * x71
    x133 = x115 * x71 + x132
    x134 = x133 * x58
    x135 = x46 * (x131 * x47 + x134)
    x136 = x106 * x82
    x137 = x46 * (x104 * x82 + x136)
    x138 = x46 * (x126 * x66 + x44 * x76)
    x139 = x21 * x37
    x140 = x46 * (x131 * x66 + x44 * x79)
    x141 = x44 * x82
    x142 = x46 * (x113 * x82 + x141)
    x143 = x103 * x94
    x144 = -x10 - A[2]
    x145 = 2.0 * x1 * x144 * x17 * x19 * x23 * x27 * x28 - x11 * x34
    x146 = x145 * x15
    x147 = -2.0 * x1 * x144 * x19 * x23 * x27 * x28 * x29 + x11 * x26
    x148 = -x5 * (x146 + x147)
    x149 = -x147
    x150 = -x146 * x3 + x149 * x4
    x151 = 2.0 * x1 * x144 * x19 * x23 * x27 * x28 * x33 - x11 * x40
    x152 = x148 + x150 * x4 - x41 * (x145 * x4 - x151 * x41)
    x153 = x152 * x3
    x154 = x150 * x5
    x155 = 2.0 * x154
    x156 = x149 * x5
    x157 = x150 * x3
    x158 = x156 + x157
    x159 = x47 * (x156 + x158)
    x160 = x46 * (x159 * x58 + x47 * (x158 * x58 + x47 * (x153 + x155)))
    x161 = x22 * x46
    x162 = x156 * x66
    x163 = x157 * x66 + x162
    x164 = x46 * (x163 * x58 + x47 * x66 * (x153 + x155))
    x165 = x11 * x152 + x44
    x166 = x11 * x150 + x49
    x167 = x166 * x58
    x168 = x11 * x149 + x56
    x169 = x168 * x52
    x170 = x166 * x47 + x169
    x171 = x46 * (x170 * x58 + x47 * (x165 * x47 + x167))
    x172 = x46 * x76 * (x153 + x155)
    x173 = x3 * x78
    x174 = x46 * (x165 * x173 + x166 * x38 * x78)
    x175 = x130 + x165 * x71
    x176 = x132 + x166 * x71
    x177 = x176 * x58
    x178 = x46 * (x175 * x47 + x177)
    x179 = x152 * x87
    x180 = x22 * x37
    x181 = x165 * x89
    x182 = x175 * x78
    x183 = x46 * (x141 + x175 * x71)
    x184 = x6 * x75
    x185 = x107 * x184 + x110 * x47
    x186 = 3.872983346207417 * x64
    x187 = x3 * x75
    x188 = x187 * x5
    x189 = x119 * x188 + x120 * x47
    x190 = x11 * x187
    x191 = x107 * x190 + x124 * x47
    x192 = x119 * x66 + x68
    x193 = x127 * x47 + x192 * x52
    x194 = x118 * x71 + x73
    x195 = x133 * x47 + x194 * x52
    x196 = x107 * x82
    x197 = x108 * x82 + x196
    x198 = x127 * x66 + x49 * x76
    x199 = x133 * x66 + x49 * x79
    x200 = x49 * x82
    x201 = x115 * x82 + x200
    x202 = x101 * x94
    x203 = x100 * x95 + x30 - x8 * x97
    x204 = x203 * x5
    x205 = x15 * x8
    x206 = -x102 * x205 + x39 + x95 * x96
    x207 = x203 * x4 - x206 * x41
    x208 = x207 * x3
    x209 = x46 * (x184 * x204 + x47**2 * (2.0 * x204 + x208))
    x210 = x203 * x8
    x211 = 2.0 * x107
    x212 = x210 + x211
    x213 = x212 * x52
    x214 = x207 * x8
    x215 = x106 + x214
    x216 = x46 * (x188 * x212 + x47 * (x213 + x215 * x47))
    x217 = x204 * x71
    x218 = x46 * (x190 * x204 + x47 * (x208 * x71 + x217))
    x219 = x119 * x58 + x212 * x66
    x220 = x219 * x52
    x221 = x117 + x215 * x66
    x222 = x46 * (x220 + x221 * x47)
    x223 = x71 * (x210 + x211)
    x224 = x223 * x52
    x225 = x122 + x214 * x71
    x226 = x46 * (x224 + x225 * x47)
    x227 = x204 * x82
    x228 = x46 * (x208 * x82 + x227)
    x229 = x46 * (x128 + x221 * x66)
    x230 = x46 * (x134 + x225 * x66)
    x231 = x46 * (x136 + x214 * x82)
    x232 = x207 * x94
    x233 = -x146 * x8 + x149 * x95
    x234 = x233 * x5
    x235 = x145 * x95 - x151 * x205
    x236 = x233 * x4 - x235 * x41
    x237 = x46 * (x184 * x234 + x47**2 * (2.0 * x234 + x236 * x3))
    x238 = x156 + x233 * x8
    x239 = x154 + x236 * x8
    x240 = x46 * (x188 * x238 + x47 * (x238 * x52 + x239 * x47))
    x241 = x107 + x11 * x233
    x242 = x105 + x11 * x236
    x243 = x46 * (x188 * x241 + x47 * (x241 * x52 + x242 * x47))
    x244 = x162 + x238 * x66
    x245 = x66 * (x154 + x239)
    x246 = x46 * (x244 * x52 + x245 * x47)
    x247 = x169 + x241 * x66
    x248 = x166 * x52 + x242 * x66
    x249 = x46 * (x247 * x52 + x248 * x47)
    x250 = x123 + x241 * x71
    x251 = x71 * (x105 + x242)
    x252 = x46 * (x250 * x52 + x251 * x47)
    x253 = x46 * (x154 * x76 + x245 * x66)
    x254 = x5 * x78
    x255 = x46 * (x166 * x254 + x248 * x66)
    x256 = x46 * (x176 * x52 + x251 * x66)
    x257 = x46 * (x105 * x82 + x251 * x71)
    x258 = x156 * x184 + x159 * x47
    x259 = x156 * x173 + x163 * x47
    x260 = x168 * x188 + x170 * x47
    x261 = x156 * x76
    x262 = x157 * x76 + x261
    x263 = x168 * x254
    x264 = x166 * x173 + x263
    x265 = x168 * x71 + x73
    x266 = x265 * x52
    x267 = x176 * x47 + x266
    x268 = x150 * x87
    x269 = x166 * x89
    x270 = x176 * x78
    x271 = x176 * x71 + x200
    x272 = -x11 * x146 + x144 * x149 + x30
    x273 = x272 * x5
    x274 = x11 * x15
    x275 = x144 * x145 - x151 * x274 + x39
    x276 = x272 * x4 - x275 * x41
    x277 = x276 * x3
    x278 = x46 * (x184 * x273 + x47**2 * (2.0 * x273 + x277))
    x279 = x273 * x66
    x280 = x46 * (x173 * x273 + x47 * (x277 * x66 + x279))
    x281 = x11 * x272 + 2.0 * x156
    x282 = x281 * x52
    x283 = x11 * x276 + x155
    x284 = x46 * (x188 * x281 + x47 * (x282 + x283 * x47))
    x285 = x273 * x76
    x286 = x46 * (x277 * x76 + x285)
    x287 = x254 * x281
    x288 = x46 * (x173 * x283 + x287)
    x289 = x168 * x58 + x281 * x71
    x290 = x289 * x52
    x291 = x167 + x283 * x71
    x292 = x46 * (x290 + x291 * x47)
    x293 = x276 * x87
    x294 = x283 * x89
    x295 = x291 * x78
    x296 = x46 * (x177 + x291 * x71)
    x297 = x3**3 * x85
    x298 = x20 * x203
    x299 = x6 * x85
    x300 = x212 * x299
    x301 = x11 * x299
    x302 = x187 * x20
    x303 = x3 * x85
    x304 = x12 * x303
    x305 = x192 * x58 + x219 * x66
    x306 = x194 * x58 + x223 * x66
    x307 = x82 * (x210 + x211)
    x308 = x203 * x95 - x205 * x206 + 2.0 * x99
    x309 = x203 * x21
    x310 = x308 * x8
    x311 = 3.0 * x204
    x312 = x310 + x311
    x313 = 3.0 * x213 + x312 * x66
    x314 = x187 * x21
    x315 = x71 * (x310 + x311)
    x316 = x148 - x205 * x235 + x233 * x95
    x317 = x297 * x316
    x318 = x203 * x22
    x319 = 2.0 * x234
    x320 = x316 * x8 + x319
    x321 = x299 * x320
    x322 = x11 * x316 + x204
    x323 = x299 * x322
    x324 = x238 * x58 + x320 * x66
    x325 = x187 * x324
    x326 = x187 * x22
    x327 = x241 * x58
    x328 = x322 * x66 + x327
    x329 = x187 * x328
    x330 = x217 + x322 * x71
    x331 = x187 * x330
    x332 = x46 * (x244 * x58 + x324 * x66)
    x333 = x46 * (x247 * x58 + x328 * x66)
    x334 = x250 * x58
    x335 = x46 * (x330 * x66 + x334)
    x336 = x46 * (x227 + x330 * x71)
    x337 = x233 * x297
    x338 = x20 * x299
    x339 = x244 * x66 + x261
    x340 = x247 * x66 + x263
    x341 = x250 * x66 + x266
    x342 = x196 + x250 * x71
    x343 = x21 * x299
    x344 = -x205 * x275 + x272 * x95
    x345 = x297 * x344
    x346 = x273 + x344 * x8
    x347 = x299 * x346
    x348 = x22 * x299
    x349 = x11 * x344 + x319
    x350 = x299 * x349
    x351 = x279 + x346 * x66
    x352 = x187 * x351
    x353 = x282 + x349 * x66
    x354 = x187 * x353
    x355 = x327 + x349 * x71
    x356 = x187 * x355
    x357 = x46 * (x285 + x351 * x66)
    x358 = x46 * (x287 + x353 * x66)
    x359 = x46 * (x290 + x355 * x66)
    x360 = x46 * (x334 + x355 * x71)
    x361 = x20 * x272
    x362 = x272 * x8
    x363 = x3 * x89
    x364 = x303 * x8
    x365 = x281 * x364
    x366 = x281 * x89
    x367 = x289 * x78
    x368 = x265 * x58 + x289 * x71
    x369 = x21 * x272
    x370 = x144 * x272 + 2.0 * x148 - x274 * x275
    x371 = x22 * x272
    x372 = x11 * x370 + 3.0 * x273
    x373 = 3.0 * x282 + x372 * x71

    # 180 item(s)
    result[0, 0, 0] = numpy.sum(
        x65 * (x46 * (x47 * (x47 * (x43 + x45) + x51 * x53) + x53 * x59) + x61 * x62)
    )
    result[0, 0, 1] = numpy.sum(
        x70 * (x46 * (x47 * x66 * (x43 + x45) + x53 * x67) + x62 * x69)
    )
    result[0, 0, 2] = numpy.sum(
        x70 * (x46 * (x47 * x71 * (x43 + x45) + x53 * x72) + x62 * x74)
    )
    result[0, 0, 3] = numpy.sum(x70 * (x46 * x76 * (x43 + x45) + x62 * x77))
    result[0, 0, 4] = numpy.sum(x81 * (x46 * x79 * (x43 + x45) + x62 * x80))
    result[0, 0, 5] = numpy.sum(x70 * (x46 * x82 * (x43 + x45) + x62 * x83))
    result[0, 0, 6] = numpy.sum(x65 * (x84 * x86 + x87 * x88))
    result[0, 0, 7] = numpy.sum(x70 * (x11 * x86 * x9 + x88 * x90))
    result[0, 0, 8] = numpy.sum(x70 * (x86 * x91 + x88 * x92))
    result[0, 0, 9] = numpy.sum(x65 * (x86 * x93 + x88 * x94))
    result[0, 1, 0] = numpy.sum(x65 * (x111 + x112 * x61))
    result[0, 1, 1] = numpy.sum(x70 * (x112 * x69 + x121))
    result[0, 1, 2] = numpy.sum(x70 * (x112 * x74 + x125))
    result[0, 1, 3] = numpy.sum(x70 * (x112 * x77 + x129))
    result[0, 1, 4] = numpy.sum(x81 * (x112 * x80 + x135))
    result[0, 1, 5] = numpy.sum(x70 * (x112 * x83 + x137))
    result[0, 1, 6] = numpy.sum(x65 * (x138 + x139 * x87))
    result[0, 1, 7] = numpy.sum(x70 * (x139 * x90 + x140))
    result[0, 1, 8] = numpy.sum(x70 * (x139 * x92 + x142))
    result[0, 1, 9] = numpy.sum(x65 * (x139 * x94 + x143))
    result[0, 2, 0] = numpy.sum(x65 * (x160 + x161 * x61))
    result[0, 2, 1] = numpy.sum(x70 * (x161 * x69 + x164))
    result[0, 2, 2] = numpy.sum(x70 * (x161 * x74 + x171))
    result[0, 2, 3] = numpy.sum(x70 * (x161 * x77 + x172))
    result[0, 2, 4] = numpy.sum(x81 * (x161 * x80 + x174))
    result[0, 2, 5] = numpy.sum(x70 * (x161 * x83 + x178))
    result[0, 2, 6] = numpy.sum(x65 * (x179 + x180 * x87))
    result[0, 2, 7] = numpy.sum(x70 * (x180 * x90 + x181))
    result[0, 2, 8] = numpy.sum(x70 * (x180 * x92 + x182))
    result[0, 2, 9] = numpy.sum(x65 * (x180 * x94 + x183))
    result[1, 0, 0] = numpy.sum(x186 * (x111 + x185 * x62))
    result[1, 0, 1] = numpy.sum(x81 * (x121 + x189 * x62))
    result[1, 0, 2] = numpy.sum(x81 * (x125 + x191 * x62))
    result[1, 0, 3] = numpy.sum(x81 * (x129 + x193 * x62))
    result[1, 0, 4] = numpy.sum(x63 * (x135 + x195 * x62))
    result[1, 0, 5] = numpy.sum(x81 * (x137 + x197 * x62))
    result[1, 0, 6] = numpy.sum(x186 * (x138 + x198 * x62))
    result[1, 0, 7] = numpy.sum(x81 * (x140 + x199 * x62))
    result[1, 0, 8] = numpy.sum(x81 * (x142 + x201 * x62))
    result[1, 0, 9] = numpy.sum(x186 * (x143 + x20 * x202))
    result[1, 1, 0] = numpy.sum(x186 * (x112 * x185 + x209))
    result[1, 1, 1] = numpy.sum(x81 * (x112 * x189 + x216))
    result[1, 1, 2] = numpy.sum(x81 * (x112 * x191 + x218))
    result[1, 1, 3] = numpy.sum(x81 * (x112 * x193 + x222))
    result[1, 1, 4] = numpy.sum(x63 * (x112 * x195 + x226))
    result[1, 1, 5] = numpy.sum(x81 * (x112 * x197 + x228))
    result[1, 1, 6] = numpy.sum(x186 * (x112 * x198 + x229))
    result[1, 1, 7] = numpy.sum(x81 * (x112 * x199 + x230))
    result[1, 1, 8] = numpy.sum(x81 * (x112 * x201 + x231))
    result[1, 1, 9] = numpy.sum(x186 * (x202 * x21 + x232))
    result[1, 2, 0] = numpy.sum(x186 * (x161 * x185 + x237))
    result[1, 2, 1] = numpy.sum(x81 * (x161 * x189 + x240))
    result[1, 2, 2] = numpy.sum(x81 * (x161 * x191 + x243))
    result[1, 2, 3] = numpy.sum(x81 * (x161 * x193 + x246))
    result[1, 2, 4] = numpy.sum(x63 * (x161 * x195 + x249))
    result[1, 2, 5] = numpy.sum(x81 * (x161 * x197 + x252))
    result[1, 2, 6] = numpy.sum(x186 * (x161 * x198 + x253))
    result[1, 2, 7] = numpy.sum(x81 * (x161 * x199 + x255))
    result[1, 2, 8] = numpy.sum(x81 * (x161 * x201 + x256))
    result[1, 2, 9] = numpy.sum(x186 * (x202 * x22 + x257))
    result[2, 0, 0] = numpy.sum(x186 * (x160 + x258 * x62))
    result[2, 0, 1] = numpy.sum(x81 * (x164 + x259 * x62))
    result[2, 0, 2] = numpy.sum(x81 * (x171 + x260 * x62))
    result[2, 0, 3] = numpy.sum(x81 * (x172 + x262 * x62))
    result[2, 0, 4] = numpy.sum(x63 * (x174 + x264 * x62))
    result[2, 0, 5] = numpy.sum(x81 * (x178 + x267 * x62))
    result[2, 0, 6] = numpy.sum(x186 * (x179 + x20 * x268))
    result[2, 0, 7] = numpy.sum(x81 * (x181 + x20 * x269))
    result[2, 0, 8] = numpy.sum(x81 * (x182 + x20 * x270))
    result[2, 0, 9] = numpy.sum(x186 * (x183 + x271 * x62))
    result[2, 1, 0] = numpy.sum(x186 * (x112 * x258 + x237))
    result[2, 1, 1] = numpy.sum(x81 * (x112 * x259 + x240))
    result[2, 1, 2] = numpy.sum(x81 * (x112 * x260 + x243))
    result[2, 1, 3] = numpy.sum(x81 * (x112 * x262 + x246))
    result[2, 1, 4] = numpy.sum(x63 * (x112 * x264 + x249))
    result[2, 1, 5] = numpy.sum(x81 * (x112 * x267 + x252))
    result[2, 1, 6] = numpy.sum(x186 * (x21 * x268 + x253))
    result[2, 1, 7] = numpy.sum(x81 * (x21 * x269 + x255))
    result[2, 1, 8] = numpy.sum(x81 * (x21 * x270 + x256))
    result[2, 1, 9] = numpy.sum(x186 * (x112 * x271 + x257))
    result[2, 2, 0] = numpy.sum(x186 * (x161 * x258 + x278))
    result[2, 2, 1] = numpy.sum(x81 * (x161 * x259 + x280))
    result[2, 2, 2] = numpy.sum(x81 * (x161 * x260 + x284))
    result[2, 2, 3] = numpy.sum(x81 * (x161 * x262 + x286))
    result[2, 2, 4] = numpy.sum(x63 * (x161 * x264 + x288))
    result[2, 2, 5] = numpy.sum(x81 * (x161 * x267 + x292))
    result[2, 2, 6] = numpy.sum(x186 * (x22 * x268 + x293))
    result[2, 2, 7] = numpy.sum(x81 * (x22 * x269 + x294))
    result[2, 2, 8] = numpy.sum(x81 * (x22 * x270 + x295))
    result[2, 2, 9] = numpy.sum(x186 * (x161 * x271 + x296))
    result[3, 0, 0] = numpy.sum(x65 * (x209 + x297 * x298))
    result[3, 0, 1] = numpy.sum(x70 * (x20 * x300 + x216))
    result[3, 0, 2] = numpy.sum(x70 * (x218 + x298 * x301))
    result[3, 0, 3] = numpy.sum(x70 * (x219 * x302 + x222))
    result[3, 0, 4] = numpy.sum(x81 * (x223 * x302 + x226))
    result[3, 0, 5] = numpy.sum(x70 * (x228 + x298 * x304))
    result[3, 0, 6] = numpy.sum(x65 * (x229 + x305 * x62))
    result[3, 0, 7] = numpy.sum(x70 * (x230 + x306 * x62))
    result[3, 0, 8] = numpy.sum(x70 * (x231 + x307 * x62))
    result[3, 0, 9] = numpy.sum(x65 * (x232 + x298 * x94))
    result[3, 1, 0] = numpy.sum(x297 * x65 * (x308 + x309))
    result[3, 1, 1] = numpy.sum(x70 * (x21 * x300 + x299 * x312))
    result[3, 1, 2] = numpy.sum(x301 * x70 * (x308 + x309))
    result[3, 1, 3] = numpy.sum(x70 * (x187 * x313 + x219 * x314))
    result[3, 1, 4] = numpy.sum(x81 * (x187 * x315 + x223 * x314))
    result[3, 1, 5] = numpy.sum(x304 * x70 * (x308 + x309))
    result[3, 1, 6] = numpy.sum(x65 * (x112 * x305 + x46 * (3.0 * x220 + x313 * x66)))
    result[3, 1, 7] = numpy.sum(x70 * (x112 * x306 + x46 * (3.0 * x224 + x315 * x66)))
    result[3, 1, 8] = numpy.sum(x70 * (x112 * x307 + x46 * x82 * (x310 + x311)))
    result[3, 1, 9] = numpy.sum(x65 * x94 * (x308 + x309))
    result[3, 2, 0] = numpy.sum(x65 * (x297 * x318 + x317))
    result[3, 2, 1] = numpy.sum(x70 * (x22 * x300 + x321))
    result[3, 2, 2] = numpy.sum(x70 * (x301 * x318 + x323))
    result[3, 2, 3] = numpy.sum(x70 * (x219 * x326 + x325))
    result[3, 2, 4] = numpy.sum(x81 * (x223 * x326 + x329))
    result[3, 2, 5] = numpy.sum(x70 * (x304 * x318 + x331))
    result[3, 2, 6] = numpy.sum(x65 * (x161 * x305 + x332))
    result[3, 2, 7] = numpy.sum(x70 * (x161 * x306 + x333))
    result[3, 2, 8] = numpy.sum(x70 * (x161 * x307 + x335))
    result[3, 2, 9] = numpy.sum(x65 * (x318 * x94 + x336))
    result[4, 0, 0] = numpy.sum(x186 * (x20 * x337 + x237))
    result[4, 0, 1] = numpy.sum(x81 * (x238 * x338 + x240))
    result[4, 0, 2] = numpy.sum(x81 * (x241 * x338 + x243))
    result[4, 0, 3] = numpy.sum(x81 * (x244 * x302 + x246))
    result[4, 0, 4] = numpy.sum(x63 * (x247 * x302 + x249))
    result[4, 0, 5] = numpy.sum(x81 * (x250 * x302 + x252))
    result[4, 0, 6] = numpy.sum(x186 * (x253 + x339 * x62))
    result[4, 0, 7] = numpy.sum(x81 * (x255 + x340 * x62))
    result[4, 0, 8] = numpy.sum(x81 * (x256 + x341 * x62))
    result[4, 0, 9] = numpy.sum(x186 * (x257 + x342 * x62))
    result[4, 1, 0] = numpy.sum(x186 * (x21 * x337 + x317))
    result[4, 1, 1] = numpy.sum(x81 * (x238 * x343 + x321))
    result[4, 1, 2] = numpy.sum(x81 * (x241 * x343 + x323))
    result[4, 1, 3] = numpy.sum(x81 * (x244 * x314 + x325))
    result[4, 1, 4] = numpy.sum(x63 * (x247 * x314 + x329))
    result[4, 1, 5] = numpy.sum(x81 * (x250 * x314 + x331))
    result[4, 1, 6] = numpy.sum(x186 * (x112 * x339 + x332))
    result[4, 1, 7] = numpy.sum(x81 * (x112 * x340 + x333))
    result[4, 1, 8] = numpy.sum(x81 * (x112 * x341 + x335))
    result[4, 1, 9] = numpy.sum(x186 * (x112 * x342 + x336))
    result[4, 2, 0] = numpy.sum(x186 * (x22 * x337 + x345))
    result[4, 2, 1] = numpy.sum(x81 * (x238 * x348 + x347))
    result[4, 2, 2] = numpy.sum(x81 * (x241 * x348 + x350))
    result[4, 2, 3] = numpy.sum(x81 * (x244 * x326 + x352))
    result[4, 2, 4] = numpy.sum(x63 * (x247 * x326 + x354))
    result[4, 2, 5] = numpy.sum(x81 * (x250 * x326 + x356))
    result[4, 2, 6] = numpy.sum(x186 * (x161 * x339 + x357))
    result[4, 2, 7] = numpy.sum(x81 * (x161 * x340 + x358))
    result[4, 2, 8] = numpy.sum(x81 * (x161 * x341 + x359))
    result[4, 2, 9] = numpy.sum(x186 * (x161 * x342 + x360))
    result[5, 0, 0] = numpy.sum(x65 * (x278 + x297 * x361))
    result[5, 0, 1] = numpy.sum(x70 * (x280 + x338 * x362))
    result[5, 0, 2] = numpy.sum(x70 * (x281 * x338 + x284))
    result[5, 0, 3] = numpy.sum(x70 * (x286 + x361 * x363))
    result[5, 0, 4] = numpy.sum(x81 * (x20 * x365 + x288))
    result[5, 0, 5] = numpy.sum(x70 * (x289 * x302 + x292))
    result[5, 0, 6] = numpy.sum(x65 * (x293 + x361 * x87))
    result[5, 0, 7] = numpy.sum(x70 * (x20 * x366 + x294))
    result[5, 0, 8] = numpy.sum(x70 * (x20 * x367 + x295))
    result[5, 0, 9] = numpy.sum(x65 * (x296 + x368 * x62))
    result[5, 1, 0] = numpy.sum(x65 * (x297 * x369 + x345))
    result[5, 1, 1] = numpy.sum(x70 * (x343 * x362 + x347))
    result[5, 1, 2] = numpy.sum(x70 * (x281 * x343 + x350))
    result[5, 1, 3] = numpy.sum(x70 * (x352 + x363 * x369))
    result[5, 1, 4] = numpy.sum(x81 * (x21 * x365 + x354))
    result[5, 1, 5] = numpy.sum(x70 * (x289 * x314 + x356))
    result[5, 1, 6] = numpy.sum(x65 * (x357 + x369 * x87))
    result[5, 1, 7] = numpy.sum(x70 * (x21 * x366 + x358))
    result[5, 1, 8] = numpy.sum(x70 * (x21 * x367 + x359))
    result[5, 1, 9] = numpy.sum(x65 * (x112 * x368 + x360))
    result[5, 2, 0] = numpy.sum(x297 * x65 * (x370 + x371))
    result[5, 2, 1] = numpy.sum(x70 * (x299 * x370 * x8 + x348 * x362))
    result[5, 2, 2] = numpy.sum(x70 * (x281 * x348 + x299 * x372))
    result[5, 2, 3] = numpy.sum(x363 * x70 * (x370 + x371))
    result[5, 2, 4] = numpy.sum(x81 * (x22 * x365 + x364 * x372))
    result[5, 2, 5] = numpy.sum(x70 * (x187 * x373 + x289 * x326))
    result[5, 2, 6] = numpy.sum(x65 * x87 * (x370 + x371))
    result[5, 2, 7] = numpy.sum(x70 * (x22 * x366 + x372 * x89))
    result[5, 2, 8] = numpy.sum(x70 * (x22 * x367 + x373 * x78))
    result[5, 2, 9] = numpy.sum(x65 * (x161 * x368 + x46 * (3.0 * x290 + x373 * x71)))
    return result


def int3c2e3d_sph_214(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dp|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 3, 15), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = x3**2
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x0
    x14 = x13 ** (-1.0)
    x15 = cx * x14
    x16 = x0 * x15 * (x12 + x6 + x9)
    x17 = boys(5, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = A[0] - B[0]
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x1 * (x20**2 + x21**2 + x22**2))
    x24 = x19 * x23
    x25 = x1 * x24
    x26 = 2.0 * x18 * x25
    x27 = x17 * x26
    x28 = cx ** (-1.0)
    x29 = x13 ** (-0.5)
    x30 = boys(4, x16)
    x31 = x5 * (2.0 * x1 * x19 * x23 * x28 * x29 * x30 - x27)
    x32 = -2.0 * x1 * x19 * x23 * x28 * x29 * x30 * x4 + x27 * x3
    x33 = -x32
    x34 = boys(6, x16)
    x35 = x26 * x34
    x36 = 2.0 * x1 * x17 * x19 * x23 * x28 * x29 * x4 - x3 * x35
    x37 = x15 * x36
    x38 = -x3 * x37 + x31 + x33 * x4
    x39 = 2.0 * x5
    x40 = x5 * (2.0 * x1 * x17 * x19 * x23 * x28 * x29 - x35)
    x41 = x26 * boys(7, x16)
    x42 = x15 * x3
    x43 = (
        x38 * x4
        - x39 * (x32 + x37)
        - x42
        * (
            x36 * x4
            + x40
            - x42 * (2.0 * x1 * x19 * x23 * x28 * x29 * x34 * x4 - x3 * x41)
        )
    )
    x44 = x3 * x43
    x45 = x38 * x5
    x46 = 3.0 * x45
    x47 = x0 * x14
    x48 = x3 * x47
    x49 = x3 * x38
    x50 = x33 * x5
    x51 = 2.0 * x50
    x52 = x49 + x51
    x53 = x47 * x5
    x54 = 3.0 * x53
    x55 = x3 * x33
    x56 = x28 * x30 * x39
    x57 = x25 * x29 * x56
    x58 = x55 + x57
    x59 = x39 * x47
    x60 = x48 * x52 + x58 * x59
    x61 = x24 * x56
    x62 = x18 * x61
    x63 = x3 * x62 + x48 * x58
    x64 = x48 * x60 + x59 * x63
    x65 = x0 * x13 ** (-2.5) * x61
    x66 = x48 * x64 + x59 * (x48 * x63 + x6 * x65)
    x67 = x20 * x47
    x68 = da * db * dc
    x69 = 0.009523809523809524 * x68
    x70 = 5.916079783099616 * x69
    x71 = x47 * x8
    x72 = x71 * (x49 + x51)
    x73 = x62 * x8
    x74 = x55 * x71 + x73
    x75 = x48 * x72 + x59 * x74
    x76 = x3 * x65
    x77 = x48 * x75 + x59 * (x48 * x74 + x76 * x8)
    x78 = 0.06666666666666667 * x68
    x79 = 2.23606797749979 * x78
    x80 = x11 * x47
    x81 = x80 * (x49 + x51)
    x82 = x11 * x62
    x83 = x55 * x80 + x82
    x84 = x48 * x81 + x59 * x83
    x85 = x48 * x84 + x59 * (x11 * x76 + x48 * x83)
    x86 = x0**2 / x13**2
    x87 = x86 * x9
    x88 = x87 * (x49 + x51)
    x89 = x65 * x9
    x90 = x48 * x88 + x59 * (x55 * x87 + x89)
    x91 = 1.732050807568877
    x92 = 0.1111111111111111 * x68 * x91
    x93 = x8 * x86
    x94 = x11 * x93
    x95 = x94 * (x49 + x51)
    x96 = x11 * x65 * x8
    x97 = x48 * x95 + x59 * (x55 * x94 + x96)
    x98 = 0.3333333333333333 * x68
    x99 = x12 * x86
    x100 = x99 * (x49 + x51)
    x101 = x12 * x65
    x102 = x100 * x48 + x59 * (x101 + x55 * x99)
    x103 = x8**3
    x104 = x0**3 / x13**3
    x105 = x103 * x104
    x106 = x105 * (x49 + x51)
    x107 = x104 * x9
    x108 = x107 * x11
    x109 = x108 * (x49 + x51)
    x110 = x104 * x8
    x111 = x110 * x12
    x112 = x111 * (x49 + x51)
    x113 = x11**3
    x114 = x104 * x113
    x115 = x114 * (x49 + x51)
    x116 = x8**4
    x117 = x0**4 / x13**4
    x118 = x117 * x43
    x119 = x116 * x117
    x120 = x20 * x38
    x121 = x103 * x117
    x122 = x11 * x121
    x123 = x12 * x9
    x124 = x117 * x120
    x125 = x113 * x8
    x126 = x11**4
    x127 = x117 * x126
    x128 = -x7 - A[1]
    x129 = 2.0 * x1 * x128 * x17 * x19 * x23 * x28 * x29 - x35 * x8
    x130 = x129 * x15
    x131 = -2.0 * x1 * x128 * x19 * x23 * x28 * x29 * x30 + x27 * x8
    x132 = -x5 * (x130 + x131)
    x133 = -x131
    x134 = -x130 * x3 + x133 * x4
    x135 = 2.0 * x1 * x128 * x19 * x23 * x28 * x29 * x34 - x41 * x8
    x136 = x132 + x134 * x4 - x42 * (x129 * x4 - x135 * x42)
    x137 = x136 * x3
    x138 = x134 * x5
    x139 = 2.0 * x138
    x140 = x133 * x5
    x141 = x134 * x3
    x142 = x140 + x141
    x143 = x48 * (x140 + x142)
    x144 = x6 * x86
    x145 = x140 * x144 + x143 * x48
    x146 = x47 * (
        x145 * x59 + x48 * (x143 * x59 + x48 * (x142 * x59 + x48 * (x137 + x139)))
    )
    x147 = x21 * x47
    x148 = x136 * x8
    x149 = x148 + x45
    x150 = x134 * x8
    x151 = x150 + x50
    x152 = x151 * x59
    x153 = x133 * x8
    x154 = x153 + x57
    x155 = x154 * x47
    x156 = x151 * x48 + x155 * x5
    x157 = x3 * x86
    x158 = x157 * x5
    x159 = x154 * x158 + x156 * x48
    x160 = x47 * (x159 * x59 + x48 * (x156 * x59 + x48 * (x149 * x48 + x152)))
    x161 = x139 * x80
    x162 = x140 * x80
    x163 = x141 * x80 + x162
    x164 = x11 * x140
    x165 = x157 * x164 + x163 * x48
    x166 = x47 * (x165 * x59 + x48 * (x163 * x59 + x48 * (x137 * x80 + x161)))
    x167 = x71 * (x149 + x45)
    x168 = x71 * (x151 + x50)
    x169 = x168 * x59
    x170 = x155 * x8 + x73
    x171 = x168 * x48 + x170 * x53
    x172 = x47 * (x171 * x59 + x48 * (x167 * x48 + x169))
    x173 = x45 * x80
    x174 = x148 * x80 + x173
    x175 = x50 * x80
    x176 = x150 * x80 + x175
    x177 = x176 * x59
    x178 = x153 * x80 + x82
    x179 = x176 * x48 + x178 * x53
    x180 = x47 * (x179 * x59 + x48 * (x174 * x48 + x177))
    x181 = x139 * x99
    x182 = x140 * x99
    x183 = x141 * x99 + x182
    x184 = x47 * (x183 * x59 + x48 * (x137 * x99 + x181))
    x185 = x167 * x71 + x45 * x87
    x186 = x168 * x71 + x50 * x87
    x187 = x186 * x59
    x188 = x47 * (x185 * x48 + x187)
    x189 = x174 * x71 + x45 * x94
    x190 = x176 * x71 + x50 * x94
    x191 = x190 * x59
    x192 = x47 * (x189 * x48 + x191)
    x193 = x45 * x99
    x194 = x148 * x99 + x193
    x195 = x50 * x99
    x196 = x150 * x99 + x195
    x197 = x196 * x59
    x198 = x47 * (x194 * x48 + x197)
    x199 = x114 * x139
    x200 = x47 * (x114 * x137 + x199)
    x201 = x47 * (x105 * x45 + x185 * x71)
    x202 = x21 * x38
    x203 = x47 * (x108 * x45 + x189 * x71)
    x204 = x47 * (x111 * x45 + x194 * x71)
    x205 = x117 * x202
    x206 = x114 * x45
    x207 = x47 * (x114 * x148 + x206)
    x208 = x127 * x136
    x209 = -x10 - A[2]
    x210 = 2.0 * x1 * x17 * x19 * x209 * x23 * x28 * x29 - x11 * x35
    x211 = x15 * x210
    x212 = -2.0 * x1 * x19 * x209 * x23 * x28 * x29 * x30 + x11 * x27
    x213 = -x5 * (x211 + x212)
    x214 = -x212
    x215 = -x211 * x3 + x214 * x4
    x216 = 2.0 * x1 * x19 * x209 * x23 * x28 * x29 * x34 - x11 * x41
    x217 = x213 + x215 * x4 - x42 * (x210 * x4 - x216 * x42)
    x218 = x217 * x3
    x219 = x215 * x5
    x220 = 2.0 * x219
    x221 = x214 * x5
    x222 = x215 * x3
    x223 = x221 + x222
    x224 = x48 * (x221 + x223)
    x225 = x144 * x221 + x224 * x48
    x226 = x47 * (
        x225 * x59 + x48 * (x224 * x59 + x48 * (x223 * x59 + x48 * (x218 + x220)))
    )
    x227 = x22 * x47
    x228 = x221 * x71
    x229 = x222 * x71 + x228
    x230 = x3 * x93
    x231 = x221 * x230 + x229 * x48
    x232 = x47 * (x231 * x59 + x48 * (x229 * x59 + x48 * x71 * (x218 + x220)))
    x233 = x11 * x217 + x45
    x234 = x11 * x215 + x50
    x235 = x234 * x59
    x236 = x11 * x214 + x57
    x237 = x236 * x53
    x238 = x234 * x48 + x237
    x239 = x158 * x236 + x238 * x48
    x240 = x47 * (x239 * x59 + x48 * (x238 * x59 + x48 * (x233 * x48 + x235)))
    x241 = x221 * x87
    x242 = x222 * x87 + x241
    x243 = x47 * (x242 * x59 + x48 * x87 * (x218 + x220))
    x244 = x234 * x39
    x245 = x5 * x93
    x246 = x236 * x245
    x247 = x230 * x234 + x246
    x248 = x47 * (x247 * x59 + x48 * (x230 * x233 + x244 * x93))
    x249 = x173 + x233 * x80
    x250 = x175 + x234 * x80
    x251 = x250 * x59
    x252 = x236 * x80 + x82
    x253 = x252 * x53
    x254 = x250 * x48 + x253
    x255 = x47 * (x254 * x59 + x48 * (x249 * x48 + x251))
    x256 = x105 * x47 * (x218 + x220)
    x257 = x107 * x3
    x258 = x47 * (x107 * x244 + x233 * x257)
    x259 = x47 * (x230 * x249 + x250 * x39 * x93)
    x260 = x193 + x249 * x80
    x261 = x195 + x250 * x80
    x262 = x261 * x59
    x263 = x47 * (x260 * x48 + x262)
    x264 = x119 * x217
    x265 = x22 * x38
    x266 = x121 * x233
    x267 = x107 * x249
    x268 = x117 * x265
    x269 = x260 * x93
    x270 = x47 * (x206 + x260 * x80)
    x271 = x3**3
    x272 = x104 * x271
    x273 = x140 * x272 + x145 * x48
    x274 = 10.2469507659596 * x69
    x275 = x104 * x6
    x276 = x275 * x5
    x277 = x154 * x276 + x159 * x48
    x278 = 3.872983346207417 * x78
    x279 = x164 * x275 + x165 * x48
    x280 = x158 * x170 + x171 * x48
    x281 = x158 * x178 + x179 * x48
    x282 = x91 * x98
    x283 = x104 * x12 * x3
    x284 = x140 * x283 + x183 * x48
    x285 = x170 * x71 + x89
    x286 = x186 * x48 + x285 * x53
    x287 = x178 * x71 + x96
    x288 = x190 * x48 + x287 * x53
    x289 = x101 + x153 * x99
    x290 = x196 * x48 + x289 * x53
    x291 = x114 * x140
    x292 = x114 * x141 + x291
    x293 = x105 * x50 + x186 * x71
    x294 = x108 * x50 + x190 * x71
    x295 = x111 * x50 + x196 * x71
    x296 = x114 * x50
    x297 = x114 * x150 + x296
    x298 = x127 * x134
    x299 = x128 * x133 - x130 * x8 + x31
    x300 = x299 * x5
    x301 = x15 * x8
    x302 = x128 * x129 - x135 * x301 + x40
    x303 = x299 * x4 - x302 * x42
    x304 = x3 * x303
    x305 = x47 * (x272 * x300 + x48 * (x144 * x300 + x48**2 * (2.0 * x300 + x304)))
    x306 = x299 * x8
    x307 = 2.0 * x140
    x308 = x306 + x307
    x309 = x308 * x53
    x310 = x303 * x8
    x311 = x139 + x310
    x312 = x47 * (x276 * x308 + x48 * (x158 * x308 + x48 * (x309 + x311 * x48)))
    x313 = x300 * x80
    x314 = x11 * x300
    x315 = x47 * (x275 * x314 + x48 * (x157 * x314 + x48 * (x304 * x80 + x313)))
    x316 = x155 * x39 + x308 * x71
    x317 = x316 * x53
    x318 = x152 + x311 * x71
    x319 = x47 * (x158 * x316 + x48 * (x317 + x318 * x48))
    x320 = x80 * (x306 + x307)
    x321 = x320 * x53
    x322 = x161 + x310 * x80
    x323 = x47 * (x158 * x320 + x48 * (x321 + x322 * x48))
    x324 = x300 * x99
    x325 = x47 * (x283 * x300 + x48 * (x304 * x99 + x324))
    x326 = x170 * x59 + x316 * x71
    x327 = x326 * x53
    x328 = x169 + x318 * x71
    x329 = x47 * (x327 + x328 * x48)
    x330 = x178 * x59 + x320 * x71
    x331 = x330 * x53
    x332 = x177 + x322 * x71
    x333 = x47 * (x331 + x332 * x48)
    x334 = x99 * (x306 + x307)
    x335 = x334 * x53
    x336 = x181 + x310 * x99
    x337 = x47 * (x335 + x336 * x48)
    x338 = x114 * x300
    x339 = x47 * (x114 * x304 + x338)
    x340 = x47 * (x187 + x328 * x71)
    x341 = x47 * (x191 + x332 * x71)
    x342 = x47 * (x197 + x336 * x71)
    x343 = x47 * (x114 * x310 + x199)
    x344 = x127 * x303
    x345 = x128 * x214 - x211 * x8
    x346 = x345 * x5
    x347 = x128 * x210 - x216 * x301
    x348 = x345 * x4 - x347 * x42
    x349 = x47 * (x272 * x346 + x48 * (x144 * x346 + x48**2 * (x3 * x348 + 2.0 * x346)))
    x350 = x221 + x345 * x8
    x351 = x219 + x348 * x8
    x352 = x47 * (x276 * x350 + x48 * (x158 * x350 + x48 * (x350 * x53 + x351 * x48)))
    x353 = x11 * x345 + x140
    x354 = x11 * x348 + x138
    x355 = x47 * (x276 * x353 + x48 * (x158 * x353 + x48 * (x353 * x53 + x354 * x48)))
    x356 = x228 + x350 * x71
    x357 = x71 * (x219 + x351)
    x358 = x47 * (x158 * x356 + x48 * (x356 * x53 + x357 * x48))
    x359 = x237 + x353 * x71
    x360 = x234 * x53 + x354 * x71
    x361 = x47 * (x158 * x359 + x48 * (x359 * x53 + x360 * x48))
    x362 = x162 + x353 * x80
    x363 = x80 * (x138 + x354)
    x364 = x47 * (x158 * x362 + x48 * (x362 * x53 + x363 * x48))
    x365 = x241 + x356 * x71
    x366 = x219 * x87 + x357 * x71
    x367 = x47 * (x365 * x53 + x366 * x48)
    x368 = x246 + x359 * x71
    x369 = x234 * x245 + x360 * x71
    x370 = x47 * (x368 * x53 + x369 * x48)
    x371 = x253 + x362 * x71
    x372 = x250 * x53 + x363 * x71
    x373 = x47 * (x371 * x53 + x372 * x48)
    x374 = x182 + x362 * x80
    x375 = x138 * x99 + x363 * x80
    x376 = x47 * (x374 * x53 + x375 * x48)
    x377 = x47 * (x105 * x219 + x366 * x71)
    x378 = x107 * x5
    x379 = x47 * (x234 * x378 + x369 * x71)
    x380 = x47 * (x245 * x250 + x372 * x71)
    x381 = x47 * (x261 * x53 + x375 * x71)
    x382 = x47 * (x114 * x138 + x375 * x80)
    x383 = x221 * x272 + x225 * x48
    x384 = x275 * x8
    x385 = x221 * x384 + x231 * x48
    x386 = x236 * x276 + x239 * x48
    x387 = x221 * x257 + x242 * x48
    x388 = x110 * x3
    x389 = x388 * x5
    x390 = x236 * x389 + x247 * x48
    x391 = x158 * x252 + x254 * x48
    x392 = x105 * x221
    x393 = x105 * x222 + x392
    x394 = x236 * x378
    x395 = x234 * x257 + x394
    x396 = x245 * x252
    x397 = x230 * x250 + x396
    x398 = x101 + x252 * x80
    x399 = x398 * x53
    x400 = x261 * x48 + x399
    x401 = x119 * x215
    x402 = x121 * x234
    x403 = x107 * x250
    x404 = x261 * x93
    x405 = x261 * x80 + x296
    x406 = -x11 * x211 + x209 * x214 + x31
    x407 = x406 * x5
    x408 = x11 * x15
    x409 = x209 * x210 - x216 * x408 + x40
    x410 = x4 * x406 - x409 * x42
    x411 = x3 * x410
    x412 = x47 * (x272 * x407 + x48 * (x144 * x407 + x48**2 * (2.0 * x407 + x411)))
    x413 = x407 * x71
    x414 = x47 * (x384 * x407 + x48 * (x230 * x407 + x48 * (x411 * x71 + x413)))
    x415 = x11 * x406 + 2.0 * x221
    x416 = x415 * x53
    x417 = x11 * x410 + x220
    x418 = x47 * (x276 * x415 + x48 * (x158 * x415 + x48 * (x416 + x417 * x48)))
    x419 = x407 * x87
    x420 = x47 * (x257 * x407 + x48 * (x411 * x87 + x419))
    x421 = x245 * x415
    x422 = x47 * (x389 * x415 + x48 * (x230 * x417 + x421))
    x423 = x236 * x59 + x415 * x80
    x424 = x423 * x53
    x425 = x235 + x417 * x80
    x426 = x47 * (x158 * x423 + x48 * (x424 + x425 * x48))
    x427 = x105 * x407
    x428 = x47 * (x105 * x411 + x427)
    x429 = x378 * x415
    x430 = x47 * (x257 * x417 + x429)
    x431 = x245 * x423
    x432 = x47 * (x230 * x425 + x431)
    x433 = x252 * x59 + x423 * x80
    x434 = x433 * x53
    x435 = x251 + x425 * x80
    x436 = x47 * (x434 + x435 * x48)
    x437 = x119 * x410
    x438 = x121 * x417
    x439 = x107 * x425
    x440 = x435 * x93
    x441 = x47 * (x262 + x435 * x80)
    x442 = x117 * x3**4
    x443 = x20 * x299
    x444 = x117 * x271
    x445 = x308 * x444
    x446 = x11 * x444
    x447 = x20 * x275
    x448 = x12 * x6
    x449 = x117 * x443
    x450 = x157 * x20
    x451 = x113 * x3
    x452 = x285 * x59 + x326 * x71
    x453 = x287 * x59 + x330 * x71
    x454 = x289 * x59 + x334 * x71
    x455 = x114 * (x306 + x307)
    x456 = x128 * x299 + 2.0 * x132 - x301 * x302
    x457 = x21 * x299
    x458 = x456 * x8
    x459 = 3.0 * x300
    x460 = x458 + x459
    x461 = 3.0 * x309 + x460 * x71
    x462 = x21 * x275
    x463 = x80 * (x458 + x459)
    x464 = x117 * x456
    x465 = x117 * x457
    x466 = 3.0 * x317 + x461 * x71
    x467 = x157 * x21
    x468 = 3.0 * x321 + x463 * x71
    x469 = x99 * (x458 + x459)
    x470 = x128 * x345 + x213 - x301 * x347
    x471 = x442 * x470
    x472 = x22 * x299
    x473 = 2.0 * x346
    x474 = x470 * x8 + x473
    x475 = x444 * x474
    x476 = x11 * x470 + x300
    x477 = x444 * x476
    x478 = x350 * x59 + x474 * x71
    x479 = x275 * x478
    x480 = x22 * x275
    x481 = x353 * x59
    x482 = x476 * x71 + x481
    x483 = x275 * x482
    x484 = x313 + x476 * x80
    x485 = x275 * x484
    x486 = x117 * x472
    x487 = x356 * x59 + x478 * x71
    x488 = x157 * x487
    x489 = x157 * x22
    x490 = x359 * x59 + x482 * x71
    x491 = x157 * x490
    x492 = x362 * x59
    x493 = x484 * x71 + x492
    x494 = x157 * x493
    x495 = x324 + x484 * x80
    x496 = x157 * x495
    x497 = x47 * (x365 * x59 + x487 * x71)
    x498 = x47 * (x368 * x59 + x490 * x71)
    x499 = x47 * (x371 * x59 + x493 * x71)
    x500 = x374 * x59
    x501 = x47 * (x495 * x71 + x500)
    x502 = x47 * (x338 + x495 * x80)
    x503 = x345 * x442
    x504 = x20 * x444
    x505 = x365 * x71 + x392
    x506 = x368 * x71 + x394
    x507 = x371 * x71 + x396
    x508 = x374 * x71 + x399
    x509 = x291 + x374 * x80
    x510 = x21 * x444
    x511 = x128 * x406 - x301 * x409
    x512 = x442 * x511
    x513 = x407 + x511 * x8
    x514 = x444 * x513
    x515 = x22 * x444
    x516 = x11 * x511 + x473
    x517 = x444 * x516
    x518 = x413 + x513 * x71
    x519 = x275 * x518
    x520 = x416 + x516 * x71
    x521 = x275 * x520
    x522 = x481 + x516 * x80
    x523 = x275 * x522
    x524 = x419 + x518 * x71
    x525 = x157 * x524
    x526 = x421 + x520 * x71
    x527 = x157 * x526
    x528 = x424 + x522 * x71
    x529 = x157 * x528
    x530 = x492 + x522 * x80
    x531 = x157 * x530
    x532 = x47 * (x427 + x524 * x71)
    x533 = x47 * (x429 + x526 * x71)
    x534 = x47 * (x431 + x528 * x71)
    x535 = x47 * (x434 + x530 * x71)
    x536 = x47 * (x500 + x530 * x80)
    x537 = x20 * x406
    x538 = x406 * x8
    x539 = x117 * x6
    x540 = x539 * x9
    x541 = x539 * x8
    x542 = x20 * x415
    x543 = x121 * x3
    x544 = x117 * x3 * x9
    x545 = x388 * x423
    x546 = x121 * x415
    x547 = x107 * x423
    x548 = x433 * x93
    x549 = x398 * x59 + x433 * x80
    x550 = x21 * x406
    x551 = x21 * x415
    x552 = x209 * x406 + 2.0 * x213 - x408 * x409
    x553 = x22 * x406
    x554 = x11 * x552 + 3.0 * x407
    x555 = x22 * x415
    x556 = 3.0 * x416 + x554 * x80
    x557 = 3.0 * x424 + x556 * x80

    # 270 item(s)
    result[0, 0, 0] = numpy.sum(
        x70
        * (
            x47 * (x48 * (x48 * (x48 * (x44 + x46) + x52 * x54) + x54 * x60) + x54 * x64)
            + x66 * x67
        )
    )
    result[0, 0, 1] = numpy.sum(
        x79
        * (x47 * (x48 * (x48 * x71 * (x44 + x46) + x54 * x72) + x54 * x75) + x67 * x77)
    )
    result[0, 0, 2] = numpy.sum(
        x79
        * (x47 * (x48 * (x48 * x80 * (x44 + x46) + x54 * x81) + x54 * x84) + x67 * x85)
    )
    result[0, 0, 3] = numpy.sum(
        x92 * (x47 * (x48 * x87 * (x44 + x46) + x54 * x88) + x67 * x90)
    )
    result[0, 0, 4] = numpy.sum(
        x98 * (x47 * (x48 * x94 * (x44 + x46) + x54 * x95) + x67 * x97)
    )
    result[0, 0, 5] = numpy.sum(
        x92 * (x102 * x67 + x47 * (x100 * x54 + x48 * x99 * (x44 + x46)))
    )
    result[0, 0, 6] = numpy.sum(x79 * (x105 * x47 * (x44 + x46) + x106 * x67))
    result[0, 0, 7] = numpy.sum(x98 * (x108 * x47 * (x44 + x46) + x109 * x67))
    result[0, 0, 8] = numpy.sum(x98 * (x111 * x47 * (x44 + x46) + x112 * x67))
    result[0, 0, 9] = numpy.sum(x79 * (x114 * x47 * (x44 + x46) + x115 * x67))
    result[0, 0, 10] = numpy.sum(x70 * (x116 * x118 + x119 * x120))
    result[0, 0, 11] = numpy.sum(x79 * (x103 * x11 * x118 + x120 * x122))
    result[0, 0, 12] = numpy.sum(x123 * x92 * (x118 + x124))
    result[0, 0, 13] = numpy.sum(x125 * x79 * (x118 + x124))
    result[0, 0, 14] = numpy.sum(x70 * (x118 * x126 + x120 * x127))
    result[0, 1, 0] = numpy.sum(x70 * (x146 + x147 * x66))
    result[0, 1, 1] = numpy.sum(x79 * (x147 * x77 + x160))
    result[0, 1, 2] = numpy.sum(x79 * (x147 * x85 + x166))
    result[0, 1, 3] = numpy.sum(x92 * (x147 * x90 + x172))
    result[0, 1, 4] = numpy.sum(x98 * (x147 * x97 + x180))
    result[0, 1, 5] = numpy.sum(x92 * (x102 * x147 + x184))
    result[0, 1, 6] = numpy.sum(x79 * (x106 * x147 + x188))
    result[0, 1, 7] = numpy.sum(x98 * (x109 * x147 + x192))
    result[0, 1, 8] = numpy.sum(x98 * (x112 * x147 + x198))
    result[0, 1, 9] = numpy.sum(x79 * (x115 * x147 + x200))
    result[0, 1, 10] = numpy.sum(x70 * (x119 * x202 + x201))
    result[0, 1, 11] = numpy.sum(x79 * (x122 * x202 + x203))
    result[0, 1, 12] = numpy.sum(x92 * (x123 * x205 + x204))
    result[0, 1, 13] = numpy.sum(x79 * (x125 * x205 + x207))
    result[0, 1, 14] = numpy.sum(x70 * (x127 * x202 + x208))
    result[0, 2, 0] = numpy.sum(x70 * (x226 + x227 * x66))
    result[0, 2, 1] = numpy.sum(x79 * (x227 * x77 + x232))
    result[0, 2, 2] = numpy.sum(x79 * (x227 * x85 + x240))
    result[0, 2, 3] = numpy.sum(x92 * (x227 * x90 + x243))
    result[0, 2, 4] = numpy.sum(x98 * (x227 * x97 + x248))
    result[0, 2, 5] = numpy.sum(x92 * (x102 * x227 + x255))
    result[0, 2, 6] = numpy.sum(x79 * (x106 * x227 + x256))
    result[0, 2, 7] = numpy.sum(x98 * (x109 * x227 + x258))
    result[0, 2, 8] = numpy.sum(x98 * (x112 * x227 + x259))
    result[0, 2, 9] = numpy.sum(x79 * (x115 * x227 + x263))
    result[0, 2, 10] = numpy.sum(x70 * (x119 * x265 + x264))
    result[0, 2, 11] = numpy.sum(x79 * (x122 * x265 + x266))
    result[0, 2, 12] = numpy.sum(x92 * (x123 * x268 + x267))
    result[0, 2, 13] = numpy.sum(x79 * (x125 * x268 + x269))
    result[0, 2, 14] = numpy.sum(x70 * (x127 * x265 + x270))
    result[1, 0, 0] = numpy.sum(x274 * (x146 + x273 * x67))
    result[1, 0, 1] = numpy.sum(x278 * (x160 + x277 * x67))
    result[1, 0, 2] = numpy.sum(x278 * (x166 + x279 * x67))
    result[1, 0, 3] = numpy.sum(x98 * (x172 + x280 * x67))
    result[1, 0, 4] = numpy.sum(x282 * (x180 + x281 * x67))
    result[1, 0, 5] = numpy.sum(x98 * (x184 + x284 * x67))
    result[1, 0, 6] = numpy.sum(x278 * (x188 + x286 * x67))
    result[1, 0, 7] = numpy.sum(x282 * (x192 + x288 * x67))
    result[1, 0, 8] = numpy.sum(x282 * (x198 + x290 * x67))
    result[1, 0, 9] = numpy.sum(x278 * (x200 + x292 * x67))
    result[1, 0, 10] = numpy.sum(x274 * (x201 + x293 * x67))
    result[1, 0, 11] = numpy.sum(x278 * (x203 + x294 * x67))
    result[1, 0, 12] = numpy.sum(x98 * (x204 + x295 * x67))
    result[1, 0, 13] = numpy.sum(x278 * (x207 + x297 * x67))
    result[1, 0, 14] = numpy.sum(x274 * (x20 * x298 + x208))
    result[1, 1, 0] = numpy.sum(x274 * (x147 * x273 + x305))
    result[1, 1, 1] = numpy.sum(x278 * (x147 * x277 + x312))
    result[1, 1, 2] = numpy.sum(x278 * (x147 * x279 + x315))
    result[1, 1, 3] = numpy.sum(x98 * (x147 * x280 + x319))
    result[1, 1, 4] = numpy.sum(x282 * (x147 * x281 + x323))
    result[1, 1, 5] = numpy.sum(x98 * (x147 * x284 + x325))
    result[1, 1, 6] = numpy.sum(x278 * (x147 * x286 + x329))
    result[1, 1, 7] = numpy.sum(x282 * (x147 * x288 + x333))
    result[1, 1, 8] = numpy.sum(x282 * (x147 * x290 + x337))
    result[1, 1, 9] = numpy.sum(x278 * (x147 * x292 + x339))
    result[1, 1, 10] = numpy.sum(x274 * (x147 * x293 + x340))
    result[1, 1, 11] = numpy.sum(x278 * (x147 * x294 + x341))
    result[1, 1, 12] = numpy.sum(x98 * (x147 * x295 + x342))
    result[1, 1, 13] = numpy.sum(x278 * (x147 * x297 + x343))
    result[1, 1, 14] = numpy.sum(x274 * (x21 * x298 + x344))
    result[1, 2, 0] = numpy.sum(x274 * (x227 * x273 + x349))
    result[1, 2, 1] = numpy.sum(x278 * (x227 * x277 + x352))
    result[1, 2, 2] = numpy.sum(x278 * (x227 * x279 + x355))
    result[1, 2, 3] = numpy.sum(x98 * (x227 * x280 + x358))
    result[1, 2, 4] = numpy.sum(x282 * (x227 * x281 + x361))
    result[1, 2, 5] = numpy.sum(x98 * (x227 * x284 + x364))
    result[1, 2, 6] = numpy.sum(x278 * (x227 * x286 + x367))
    result[1, 2, 7] = numpy.sum(x282 * (x227 * x288 + x370))
    result[1, 2, 8] = numpy.sum(x282 * (x227 * x290 + x373))
    result[1, 2, 9] = numpy.sum(x278 * (x227 * x292 + x376))
    result[1, 2, 10] = numpy.sum(x274 * (x227 * x293 + x377))
    result[1, 2, 11] = numpy.sum(x278 * (x227 * x294 + x379))
    result[1, 2, 12] = numpy.sum(x98 * (x227 * x295 + x380))
    result[1, 2, 13] = numpy.sum(x278 * (x227 * x297 + x381))
    result[1, 2, 14] = numpy.sum(x274 * (x22 * x298 + x382))
    result[2, 0, 0] = numpy.sum(x274 * (x226 + x383 * x67))
    result[2, 0, 1] = numpy.sum(x278 * (x232 + x385 * x67))
    result[2, 0, 2] = numpy.sum(x278 * (x240 + x386 * x67))
    result[2, 0, 3] = numpy.sum(x98 * (x243 + x387 * x67))
    result[2, 0, 4] = numpy.sum(x282 * (x248 + x390 * x67))
    result[2, 0, 5] = numpy.sum(x98 * (x255 + x391 * x67))
    result[2, 0, 6] = numpy.sum(x278 * (x256 + x393 * x67))
    result[2, 0, 7] = numpy.sum(x282 * (x258 + x395 * x67))
    result[2, 0, 8] = numpy.sum(x282 * (x259 + x397 * x67))
    result[2, 0, 9] = numpy.sum(x278 * (x263 + x400 * x67))
    result[2, 0, 10] = numpy.sum(x274 * (x20 * x401 + x264))
    result[2, 0, 11] = numpy.sum(x278 * (x20 * x402 + x266))
    result[2, 0, 12] = numpy.sum(x98 * (x20 * x403 + x267))
    result[2, 0, 13] = numpy.sum(x278 * (x20 * x404 + x269))
    result[2, 0, 14] = numpy.sum(x274 * (x270 + x405 * x67))
    result[2, 1, 0] = numpy.sum(x274 * (x147 * x383 + x349))
    result[2, 1, 1] = numpy.sum(x278 * (x147 * x385 + x352))
    result[2, 1, 2] = numpy.sum(x278 * (x147 * x386 + x355))
    result[2, 1, 3] = numpy.sum(x98 * (x147 * x387 + x358))
    result[2, 1, 4] = numpy.sum(x282 * (x147 * x390 + x361))
    result[2, 1, 5] = numpy.sum(x98 * (x147 * x391 + x364))
    result[2, 1, 6] = numpy.sum(x278 * (x147 * x393 + x367))
    result[2, 1, 7] = numpy.sum(x282 * (x147 * x395 + x370))
    result[2, 1, 8] = numpy.sum(x282 * (x147 * x397 + x373))
    result[2, 1, 9] = numpy.sum(x278 * (x147 * x400 + x376))
    result[2, 1, 10] = numpy.sum(x274 * (x21 * x401 + x377))
    result[2, 1, 11] = numpy.sum(x278 * (x21 * x402 + x379))
    result[2, 1, 12] = numpy.sum(x98 * (x21 * x403 + x380))
    result[2, 1, 13] = numpy.sum(x278 * (x21 * x404 + x381))
    result[2, 1, 14] = numpy.sum(x274 * (x147 * x405 + x382))
    result[2, 2, 0] = numpy.sum(x274 * (x227 * x383 + x412))
    result[2, 2, 1] = numpy.sum(x278 * (x227 * x385 + x414))
    result[2, 2, 2] = numpy.sum(x278 * (x227 * x386 + x418))
    result[2, 2, 3] = numpy.sum(x98 * (x227 * x387 + x420))
    result[2, 2, 4] = numpy.sum(x282 * (x227 * x390 + x422))
    result[2, 2, 5] = numpy.sum(x98 * (x227 * x391 + x426))
    result[2, 2, 6] = numpy.sum(x278 * (x227 * x393 + x428))
    result[2, 2, 7] = numpy.sum(x282 * (x227 * x395 + x430))
    result[2, 2, 8] = numpy.sum(x282 * (x227 * x397 + x432))
    result[2, 2, 9] = numpy.sum(x278 * (x227 * x400 + x436))
    result[2, 2, 10] = numpy.sum(x274 * (x22 * x401 + x437))
    result[2, 2, 11] = numpy.sum(x278 * (x22 * x402 + x438))
    result[2, 2, 12] = numpy.sum(x98 * (x22 * x403 + x439))
    result[2, 2, 13] = numpy.sum(x278 * (x22 * x404 + x440))
    result[2, 2, 14] = numpy.sum(x274 * (x227 * x405 + x441))
    result[3, 0, 0] = numpy.sum(x70 * (x305 + x442 * x443))
    result[3, 0, 1] = numpy.sum(x79 * (x20 * x445 + x312))
    result[3, 0, 2] = numpy.sum(x79 * (x315 + x443 * x446))
    result[3, 0, 3] = numpy.sum(x92 * (x316 * x447 + x319))
    result[3, 0, 4] = numpy.sum(x98 * (x320 * x447 + x323))
    result[3, 0, 5] = numpy.sum(x92 * (x325 + x448 * x449))
    result[3, 0, 6] = numpy.sum(x79 * (x326 * x450 + x329))
    result[3, 0, 7] = numpy.sum(x98 * (x330 * x450 + x333))
    result[3, 0, 8] = numpy.sum(x98 * (x334 * x450 + x337))
    result[3, 0, 9] = numpy.sum(x79 * (x339 + x449 * x451))
    result[3, 0, 10] = numpy.sum(x70 * (x340 + x452 * x67))
    result[3, 0, 11] = numpy.sum(x79 * (x341 + x453 * x67))
    result[3, 0, 12] = numpy.sum(x92 * (x342 + x454 * x67))
    result[3, 0, 13] = numpy.sum(x79 * (x343 + x455 * x67))
    result[3, 0, 14] = numpy.sum(x70 * (x127 * x443 + x344))
    result[3, 1, 0] = numpy.sum(x442 * x70 * (x456 + x457))
    result[3, 1, 1] = numpy.sum(x79 * (x21 * x445 + x444 * x460))
    result[3, 1, 2] = numpy.sum(x446 * x79 * (x456 + x457))
    result[3, 1, 3] = numpy.sum(x92 * (x275 * x461 + x316 * x462))
    result[3, 1, 4] = numpy.sum(x98 * (x275 * x463 + x320 * x462))
    result[3, 1, 5] = numpy.sum(x448 * x92 * (x464 + x465))
    result[3, 1, 6] = numpy.sum(x79 * (x157 * x466 + x326 * x467))
    result[3, 1, 7] = numpy.sum(x98 * (x157 * x468 + x330 * x467))
    result[3, 1, 8] = numpy.sum(x98 * (x157 * x469 + x334 * x467))
    result[3, 1, 9] = numpy.sum(x451 * x79 * (x464 + x465))
    result[3, 1, 10] = numpy.sum(x70 * (x147 * x452 + x47 * (3.0 * x327 + x466 * x71)))
    result[3, 1, 11] = numpy.sum(x79 * (x147 * x453 + x47 * (3.0 * x331 + x468 * x71)))
    result[3, 1, 12] = numpy.sum(x92 * (x147 * x454 + x47 * (3.0 * x335 + x469 * x71)))
    result[3, 1, 13] = numpy.sum(x79 * (x114 * x47 * (x458 + x459) + x147 * x455))
    result[3, 1, 14] = numpy.sum(x127 * x70 * (x456 + x457))
    result[3, 2, 0] = numpy.sum(x70 * (x442 * x472 + x471))
    result[3, 2, 1] = numpy.sum(x79 * (x22 * x445 + x475))
    result[3, 2, 2] = numpy.sum(x79 * (x446 * x472 + x477))
    result[3, 2, 3] = numpy.sum(x92 * (x316 * x480 + x479))
    result[3, 2, 4] = numpy.sum(x98 * (x320 * x480 + x483))
    result[3, 2, 5] = numpy.sum(x92 * (x448 * x486 + x485))
    result[3, 2, 6] = numpy.sum(x79 * (x326 * x489 + x488))
    result[3, 2, 7] = numpy.sum(x98 * (x330 * x489 + x491))
    result[3, 2, 8] = numpy.sum(x98 * (x334 * x489 + x494))
    result[3, 2, 9] = numpy.sum(x79 * (x451 * x486 + x496))
    result[3, 2, 10] = numpy.sum(x70 * (x227 * x452 + x497))
    result[3, 2, 11] = numpy.sum(x79 * (x227 * x453 + x498))
    result[3, 2, 12] = numpy.sum(x92 * (x227 * x454 + x499))
    result[3, 2, 13] = numpy.sum(x79 * (x227 * x455 + x501))
    result[3, 2, 14] = numpy.sum(x70 * (x127 * x472 + x502))
    result[4, 0, 0] = numpy.sum(x274 * (x20 * x503 + x349))
    result[4, 0, 1] = numpy.sum(x278 * (x350 * x504 + x352))
    result[4, 0, 2] = numpy.sum(x278 * (x353 * x504 + x355))
    result[4, 0, 3] = numpy.sum(x98 * (x356 * x447 + x358))
    result[4, 0, 4] = numpy.sum(x282 * (x359 * x447 + x361))
    result[4, 0, 5] = numpy.sum(x98 * (x362 * x447 + x364))
    result[4, 0, 6] = numpy.sum(x278 * (x365 * x450 + x367))
    result[4, 0, 7] = numpy.sum(x282 * (x368 * x450 + x370))
    result[4, 0, 8] = numpy.sum(x282 * (x371 * x450 + x373))
    result[4, 0, 9] = numpy.sum(x278 * (x374 * x450 + x376))
    result[4, 0, 10] = numpy.sum(x274 * (x377 + x505 * x67))
    result[4, 0, 11] = numpy.sum(x278 * (x379 + x506 * x67))
    result[4, 0, 12] = numpy.sum(x98 * (x380 + x507 * x67))
    result[4, 0, 13] = numpy.sum(x278 * (x381 + x508 * x67))
    result[4, 0, 14] = numpy.sum(x274 * (x382 + x509 * x67))
    result[4, 1, 0] = numpy.sum(x274 * (x21 * x503 + x471))
    result[4, 1, 1] = numpy.sum(x278 * (x350 * x510 + x475))
    result[4, 1, 2] = numpy.sum(x278 * (x353 * x510 + x477))
    result[4, 1, 3] = numpy.sum(x98 * (x356 * x462 + x479))
    result[4, 1, 4] = numpy.sum(x282 * (x359 * x462 + x483))
    result[4, 1, 5] = numpy.sum(x98 * (x362 * x462 + x485))
    result[4, 1, 6] = numpy.sum(x278 * (x365 * x467 + x488))
    result[4, 1, 7] = numpy.sum(x282 * (x368 * x467 + x491))
    result[4, 1, 8] = numpy.sum(x282 * (x371 * x467 + x494))
    result[4, 1, 9] = numpy.sum(x278 * (x374 * x467 + x496))
    result[4, 1, 10] = numpy.sum(x274 * (x147 * x505 + x497))
    result[4, 1, 11] = numpy.sum(x278 * (x147 * x506 + x498))
    result[4, 1, 12] = numpy.sum(x98 * (x147 * x507 + x499))
    result[4, 1, 13] = numpy.sum(x278 * (x147 * x508 + x501))
    result[4, 1, 14] = numpy.sum(x274 * (x147 * x509 + x502))
    result[4, 2, 0] = numpy.sum(x274 * (x22 * x503 + x512))
    result[4, 2, 1] = numpy.sum(x278 * (x350 * x515 + x514))
    result[4, 2, 2] = numpy.sum(x278 * (x353 * x515 + x517))
    result[4, 2, 3] = numpy.sum(x98 * (x356 * x480 + x519))
    result[4, 2, 4] = numpy.sum(x282 * (x359 * x480 + x521))
    result[4, 2, 5] = numpy.sum(x98 * (x362 * x480 + x523))
    result[4, 2, 6] = numpy.sum(x278 * (x365 * x489 + x525))
    result[4, 2, 7] = numpy.sum(x282 * (x368 * x489 + x527))
    result[4, 2, 8] = numpy.sum(x282 * (x371 * x489 + x529))
    result[4, 2, 9] = numpy.sum(x278 * (x374 * x489 + x531))
    result[4, 2, 10] = numpy.sum(x274 * (x227 * x505 + x532))
    result[4, 2, 11] = numpy.sum(x278 * (x227 * x506 + x533))
    result[4, 2, 12] = numpy.sum(x98 * (x227 * x507 + x534))
    result[4, 2, 13] = numpy.sum(x278 * (x227 * x508 + x535))
    result[4, 2, 14] = numpy.sum(x274 * (x227 * x509 + x536))
    result[5, 0, 0] = numpy.sum(x70 * (x412 + x442 * x537))
    result[5, 0, 1] = numpy.sum(x79 * (x414 + x504 * x538))
    result[5, 0, 2] = numpy.sum(x79 * (x415 * x504 + x418))
    result[5, 0, 3] = numpy.sum(x92 * (x420 + x537 * x540))
    result[5, 0, 4] = numpy.sum(x98 * (x422 + x541 * x542))
    result[5, 0, 5] = numpy.sum(x92 * (x423 * x447 + x426))
    result[5, 0, 6] = numpy.sum(x79 * (x428 + x537 * x543))
    result[5, 0, 7] = numpy.sum(x98 * (x430 + x542 * x544))
    result[5, 0, 8] = numpy.sum(x98 * (x20 * x545 + x432))
    result[5, 0, 9] = numpy.sum(x79 * (x433 * x450 + x436))
    result[5, 0, 10] = numpy.sum(x70 * (x119 * x537 + x437))
    result[5, 0, 11] = numpy.sum(x79 * (x20 * x546 + x438))
    result[5, 0, 12] = numpy.sum(x92 * (x20 * x547 + x439))
    result[5, 0, 13] = numpy.sum(x79 * (x20 * x548 + x440))
    result[5, 0, 14] = numpy.sum(x70 * (x441 + x549 * x67))
    result[5, 1, 0] = numpy.sum(x70 * (x442 * x550 + x512))
    result[5, 1, 1] = numpy.sum(x79 * (x510 * x538 + x514))
    result[5, 1, 2] = numpy.sum(x79 * (x415 * x510 + x517))
    result[5, 1, 3] = numpy.sum(x92 * (x519 + x540 * x550))
    result[5, 1, 4] = numpy.sum(x98 * (x521 + x541 * x551))
    result[5, 1, 5] = numpy.sum(x92 * (x423 * x462 + x523))
    result[5, 1, 6] = numpy.sum(x79 * (x525 + x543 * x550))
    result[5, 1, 7] = numpy.sum(x98 * (x527 + x544 * x551))
    result[5, 1, 8] = numpy.sum(x98 * (x21 * x545 + x529))
    result[5, 1, 9] = numpy.sum(x79 * (x433 * x467 + x531))
    result[5, 1, 10] = numpy.sum(x70 * (x119 * x550 + x532))
    result[5, 1, 11] = numpy.sum(x79 * (x21 * x546 + x533))
    result[5, 1, 12] = numpy.sum(x92 * (x21 * x547 + x534))
    result[5, 1, 13] = numpy.sum(x79 * (x21 * x548 + x535))
    result[5, 1, 14] = numpy.sum(x70 * (x147 * x549 + x536))
    result[5, 2, 0] = numpy.sum(x442 * x70 * (x552 + x553))
    result[5, 2, 1] = numpy.sum(x79 * (x444 * x552 * x8 + x515 * x538))
    result[5, 2, 2] = numpy.sum(x79 * (x415 * x515 + x444 * x554))
    result[5, 2, 3] = numpy.sum(x540 * x92 * (x552 + x553))
    result[5, 2, 4] = numpy.sum(x541 * x98 * (x554 + x555))
    result[5, 2, 5] = numpy.sum(x92 * (x275 * x556 + x423 * x480))
    result[5, 2, 6] = numpy.sum(x543 * x79 * (x552 + x553))
    result[5, 2, 7] = numpy.sum(x544 * x98 * (x554 + x555))
    result[5, 2, 8] = numpy.sum(x98 * (x22 * x545 + x388 * x556))
    result[5, 2, 9] = numpy.sum(x79 * (x157 * x557 + x433 * x489))
    result[5, 2, 10] = numpy.sum(x119 * x70 * (x552 + x553))
    result[5, 2, 11] = numpy.sum(x79 * (x121 * x554 + x22 * x546))
    result[5, 2, 12] = numpy.sum(x92 * (x107 * x556 + x22 * x547))
    result[5, 2, 13] = numpy.sum(x79 * (x22 * x548 + x557 * x93))
    result[5, 2, 14] = numpy.sum(x70 * (x227 * x549 + x47 * (3.0 * x434 + x557 * x80)))
    return result


def int3c2e3d_sph_220(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dd|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = x3 + A[0]
    x5 = cx + x1
    x6 = x5 ** (-1.0)
    x7 = x3 + C[0]
    x8 = -x7
    x9 = -x2 * (ax * A[1] + bx * B[1])
    x10 = x9 + C[1]
    x11 = -x10
    x12 = -x2 * (ax * A[2] + bx * B[2])
    x13 = x12 + C[2]
    x14 = -x13
    x15 = cx * x6
    x16 = x1 * x15
    x17 = x16 * (x11**2 + x14**2 + x8**2)
    x18 = boys(1, x17)
    x19 = x18 * x6
    x20 = cx ** (-1.0)
    x21 = x20 * boys(0, x17)
    x22 = x19 - x21
    x23 = x2 * x22
    x24 = -x4
    x25 = x19 * x8 - x21 * x24
    x26 = 2.0 * x4
    x27 = boys(2, x17)
    x28 = x27 * x6
    x29 = x18 * x20
    x30 = -x24 * x29 + x28 * x8
    x31 = x15 * x30
    x32 = 2.0 * x7
    x33 = x23 - x25 * x26 + x31 * x32
    x34 = -x33
    x35 = 2.0 * x2
    x36 = x28 - x29
    x37 = x2 * x36
    x38 = boys(3, x17)
    x39 = x38 * x6
    x40 = x20 * x27
    x41 = -x24 * x40 + x39 * x8
    x42 = x15 * x7
    x43 = 2.0 * x42
    x44 = -x26 * x30 + x37 + x41 * x43
    x45 = -x44
    x46 = x15 * x45
    x47 = x34 * x4 - x35 * (x15 * x30 - x25) - x46 * x7
    x48 = x16 * (x10**2 + x13**2 + x7**2)
    x49 = x6 * boys(1, x48)
    x50 = boys(0, x48)
    x51 = 1.5 * x2
    x52 = x39 - x40
    x53 = x2 * x52
    x54 = x6 * boys(4, x17)
    x55 = A[1] - B[1]
    x56 = A[2] - B[2]
    x57 = (
        17.49341832762486
        * da
        * db
        * dc
        * x2
        * x5 ** (-0.5)
        * numpy.exp(-ax * bx * x2 * (x0**2 + x55**2 + x56**2))
    )
    x58 = 0.3333333333333333 * x57
    x59 = x9 + A[1]
    x60 = -x59
    x61 = x11 * x28 - x29 * x60
    x62 = -x61
    x63 = x15 * x62
    x64 = x11 * x19 - x21 * x60
    x65 = x2 * (x63 + x64)
    x66 = -x64
    x67 = -x24 * x66 + x63 * x8
    x68 = x11 * x39 - x20 * x27 * x60
    x69 = -x68
    x70 = x15 * x69
    x71 = -x24 * x62 + x70 * x8
    x72 = x15 * x71
    x73 = -x26 * x67 + x32 * x72 + x65
    x74 = -x34 * x55 + x73
    x75 = x2 * (x61 + x70)
    x76 = x11 * x54 - x20 * x38 * x60
    x77 = -x76
    x78 = x15 * x8
    x79 = (
        -x35 * (-cx * x6 * x61 * x7 + x4 * x64 + x72)
        - x4 * x73
        - x42 * (x26 * x71 + x43 * (x24 * x69 - x77 * x78) - x75)
    )
    x80 = 1.732050807568877 * x58
    x81 = x12 + A[2]
    x82 = -x81
    x83 = x14 * x28 - x29 * x82
    x84 = -x83
    x85 = x15 * x84
    x86 = x14 * x19 - x21 * x82
    x87 = x2 * (x85 + x86)
    x88 = -x86
    x89 = -x24 * x88 + x8 * x85
    x90 = x14 * x39 - x20 * x27 * x82
    x91 = -x90
    x92 = x15 * x91
    x93 = -x24 * x84 + x8 * x92
    x94 = x15 * x93
    x95 = -x26 * x89 + x32 * x94 + x87
    x96 = -x34 * x56 + x95
    x97 = x2 * (x83 + x92)
    x98 = x14 * x54 - x20 * x38 * x82
    x99 = -x98
    x100 = (
        -x35 * (-cx * x6 * x7 * x83 + x4 * x86 + x94)
        - x4 * x95
        - x42 * (x26 * x93 + x43 * (x24 * x91 - x78 * x99) - x97)
    )
    x101 = x10 * x15
    x102 = 2.0 * x101
    x103 = x102 * x68 + x37 - 2.0 * x59 * x61
    x104 = -x103
    x105 = x104 * x15
    x106 = 2.0 * x59
    x107 = x15 * x61
    x108 = 2.0 * x10
    x109 = -x106 * x64 + x107 * x108 + x23
    x110 = x105 + x109
    x111 = 0.5 * x2
    x112 = -x109
    x113 = x112 * x4
    x114 = x105 * x7
    x115 = -x113 + x114
    x116 = -x115
    x117 = -x102 * x76 - x53 + 2.0 * x59 * x68
    x118 = x110 * x111 - x116 * x4 + x42 * (x104 * x4 - x117 * x42) + x55 * x73
    x119 = x11 * x92 - x60 * x84
    x120 = x119 * x15
    x121 = x2 * (cx * x10 * x6 * x83 - x120 - x59 * x86)
    x122 = x11 * x85 - x60 * x88
    x123 = x120 * x7 - x122 * x4
    x124 = x11 * x15
    x125 = x124 * x99 - x60 * x91
    x126 = x121 - 2.0 * x123 * x4 - x43 * (x119 * x4 - x125 * x42)
    x127 = x126 + x56 * x73
    x128 = x13 * x15
    x129 = 2.0 * x128
    x130 = x129 * x90 + x37 - 2.0 * x81 * x83
    x131 = -x130
    x132 = x131 * x15
    x133 = x15 * x83
    x134 = 2.0 * x13 * x133 + x23 - 2.0 * x81 * x86
    x135 = x132 + x134
    x136 = x111 * x135
    x137 = -x134
    x138 = x137 * x4
    x139 = x132 * x7
    x140 = -x138 + x139
    x141 = -x140
    x142 = -x129 * x98 - x53 + 2.0 * x81 * x90
    x143 = x136 - x141 * x4 + x42 * (x131 * x4 - x142 * x42) + x56 * x95
    x144 = 2.0 * x67
    x145 = x113 - x114 + x144 * x55
    x146 = x123 + x56 * x67
    x147 = 2.0 * x146
    x148 = -x10 * x105 + x112 * x59 + 2.0 * x65
    x149 = -x101 * x117 + x104 * x59 + 2.0 * x75
    x150 = x116 * x55 - x148 * x4 + x149 * x42
    x151 = -x106 * x122 + x108 * x120 + x87
    x152 = x102 * x125 - x106 * x119 + x97
    x153 = -x151 * x4 + x152 * x42
    x154 = x116 * x56 + x153
    x155 = 2.0 * x56
    x156 = -x119
    x157 = x15 * x156
    x158 = x122 * x24 + x157 * x8
    x159 = -x2 * x22
    x160 = 2.0 * x82
    x161 = x160 * x88
    x162 = 2.0 * x14
    x163 = x162 * x85
    x164 = x159 + x161 - x163
    x165 = -x2 * x36
    x166 = x160 * x84 - x162 * x92 + x165
    x167 = x15 * x166
    x168 = x11 * x167 - x164 * x60
    x169 = -x2 * x52
    x170 = -x15 * x162 * x99 + x160 * x91 + x169
    x171 = x124 * x170 - x166 * x60
    x172 = -x168 * x4 + x171 * x42
    x173 = x155 * x158 + x172
    x174 = 2.0 * x0
    x175 = x123 + x55 * x89
    x176 = x138 - x139 + x155 * x89
    x177 = 2.0 * x55
    x178 = x123 * x177 + x153
    x179 = -x13 * x132 + x137 * x81 + 2.0 * x87
    x180 = -x128 * x142 + x131 * x81 + 2.0 * x97
    x181 = x141 * x56 - x179 * x4 + x180 * x42
    x182 = 2.0 * x60
    x183 = x182 * x66
    x184 = 2.0 * x11
    x185 = x184 * x63
    x186 = x165 + x182 * x62 - x184 * x70
    x187 = x15 * x186
    x188 = x187 * x8 - x24 * (x159 + x183 - x185)
    x189 = -x159
    x190 = (
        -x101 * x103
        - x109 * x55
        + x109 * x59
        + x35 * (x10 * x49 + x107 - x20 * x50 * x59)
    )
    x191 = -x112 * x56 + x151
    x192 = x101 * x152 + 2.0 * x121 - x151 * x59
    x193 = x137 * x59
    x194 = x10 * x132
    x195 = -x193 + x194
    x196 = -x195
    x197 = -x101 * (x101 * x142 - x131 * x59) + x136 + x151 * x56 - x196 * x59
    x198 = x122 * x177 + x151
    x199 = x122 * x155 + x193 - x194
    x200 = x101 * x180 - x179 * x59 + x196 * x56
    x201 = -x164 * x24 + x167 * x8
    x202 = x111 * (-x161 + x163 + x167 + x189)
    x203 = x137 * x55 + x195
    x204 = (
        -x128 * x130
        - x134 * x56
        + x134 * x81
        + x35 * (x13 * x49 + x133 - x20 * x50 * x81)
    )

    # 36 item(s)
    result[0, 0, 0] = numpy.sum(
        -x58
        * (
            x0 * x47
            + x0
            * (x0 * x33 - x33 * x4 - x35 * (-x20 * x4 * x50 + x31 + x49 * x7) + x42 * x44)
            - x4 * x47
            + x42
            * (
                -x35 * (x15 * x41 - x30)
                + x4 * x45
                - x42 * (2.0 * x4 * x41 + x43 * (x20 * x24 * x38 - x54 * x8) - x53)
            )
            + x51 * (x33 + x46)
        )
    )
    result[0, 1, 0] = numpy.sum(-x80 * (x0 * x74 + x47 * x55 + x79))
    result[0, 2, 0] = numpy.sum(-x80 * (x0 * x96 + x100 + x47 * x56))
    result[0, 3, 0] = numpy.sum(-x58 * (x118 + x55 * x74))
    result[0, 4, 0] = numpy.sum(-x80 * (x127 + x55 * x96))
    result[0, 5, 0] = numpy.sum(-x58 * (x143 + x56 * x96))
    result[1, 0, 0] = numpy.sum(-x80 * (x0 * x73 + x0 * (x0 * x144 + x73) + x79))
    result[1, 1, 0] = numpy.sum(-x57 * (x0 * x145 + x118))
    result[1, 2, 0] = numpy.sum(-x57 * (x0 * x147 + x127))
    result[1, 3, 0] = numpy.sum(-x80 * (x145 * x55 + x150))
    result[1, 4, 0] = numpy.sum(-x57 * (x147 * x55 + x154))
    result[1, 5, 0] = numpy.sum(-x80 * (x146 * x155 + x173))
    result[2, 0, 0] = numpy.sum(-x80 * (x0 * x95 + x0 * (x174 * x89 + x95) + x100))
    result[2, 1, 0] = numpy.sum(-x57 * (x126 + x174 * x175 + x55 * x95))
    result[2, 2, 0] = numpy.sum(-x57 * (x0 * x176 + x143))
    result[2, 3, 0] = numpy.sum(-x80 * (x175 * x177 + x178))
    result[2, 4, 0] = numpy.sum(-x57 * (x173 + x176 * x55))
    result[2, 5, 0] = numpy.sum(-x80 * (x176 * x56 + x181))
    result[3, 0, 0] = numpy.sum(
        x58
        * (
            -x0 * x188
            + x0 * (x0 * x112 + x115)
            - x111 * (-x183 + x185 + x187 + x189)
            + x188 * x4
            + x42 * (x186 * x24 - x78 * (-2.0 * x124 * x77 + x169 + x182 * x69))
        )
    )
    result[3, 1, 0] = numpy.sum(x80 * (x0 * x190 - x150))
    result[3, 2, 0] = numpy.sum(-x80 * (x0 * x191 + x154))
    result[3, 3, 0] = numpy.sum(
        x58 * (-x101 * x149 - x110 * x51 - x148 * x55 + x148 * x59 + x190 * x55)
    )
    result[3, 4, 0] = numpy.sum(-x80 * (x148 * x56 + x191 * x55 + x192))
    result[3, 5, 0] = numpy.sum(-x58 * (x191 * x56 + x197))
    result[4, 0, 0] = numpy.sum(
        -x80
        * (
            x158 * x174
            - x158 * x26
            + x174 * (x0 * x122 + x123)
            + x2 * (x122 + x157)
            - x43 * (x125 * x78 + x156 * x24)
        )
    )
    result[4, 1, 0] = numpy.sum(-x57 * (x0 * x198 + x178))
    result[4, 2, 0] = numpy.sum(-x57 * (x0 * x199 + x173))
    result[4, 3, 0] = numpy.sum(-x80 * (x151 * x55 + x192 + x198 * x55))
    result[4, 4, 0] = numpy.sum(-x57 * (x197 + x199 * x55))
    result[4, 5, 0] = numpy.sum(-x80 * (x199 * x56 + x200))
    result[5, 0, 0] = numpy.sum(
        x58
        * (
            -x0 * x201
            + x0 * (x0 * x137 + x140)
            + x201 * x4
            - x202
            + x42 * (x166 * x24 - x170 * x78)
        )
    )
    result[5, 1, 0] = numpy.sum(x80 * (x0 * x203 - x172 - x201 * x55))
    result[5, 2, 0] = numpy.sum(x80 * (x0 * x204 - x181))
    result[5, 3, 0] = numpy.sum(
        x58 * (-x101 * x171 - x168 * x55 + x168 * x59 - x202 + x203 * x55)
    )
    result[5, 4, 0] = numpy.sum(x80 * (-x200 + x204 * x55))
    result[5, 5, 0] = numpy.sum(
        x58 * (-x128 * x180 - x135 * x51 - x179 * x56 + x179 * x81 + x204 * x56)
    )
    return result


def int3c2e3d_sph_221(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dd|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6, 3), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = cx + x0
    x3 = x2 ** (-1.0)
    x4 = -x1 * (ax * A[0] + bx * B[0])
    x5 = x4 + C[0]
    x6 = -x5
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x3
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x6**2 + x9**2)
    x16 = boys(2, x15)
    x17 = x16 * x3
    x18 = cx ** (-1.0)
    x19 = x18 * boys(1, x15)
    x20 = x17 - x19
    x21 = x1 * x20
    x22 = x4 + A[0]
    x23 = -x22
    x24 = x17 * x6 - x19 * x23
    x25 = boys(3, x15)
    x26 = x25 * x3
    x27 = x16 * x18
    x28 = -x23 * x27 + x26 * x6
    x29 = 2.0 * x5
    x30 = x13 * x29
    x31 = -x21 + 2.0 * x22 * x24 - x28 * x30
    x32 = x1 * x31
    x33 = x22 * x31
    x34 = -x28
    x35 = x13 * x34
    x36 = 2.0 * x1
    x37 = x36 * (x24 + x35)
    x38 = x26 - x27
    x39 = x1 * x38
    x40 = boys(4, x15)
    x41 = x3 * x40
    x42 = x18 * x25
    x43 = -x23 * x42 + x41 * x6
    x44 = 2.0 * x22 * x28 - x30 * x43 - x39
    x45 = -cx * x3 * x44 * x5 + x33 + x37
    x46 = -x45
    x47 = x29 * x46 - 3.0 * x32
    x48 = A[0] - B[0]
    x49 = 0.5 * x48
    x50 = x24 * x36 + x31 * x5
    x51 = 2.0 * x48
    x52 = x22 * x46
    x53 = -x1 * x20
    x54 = -x53
    x55 = 2.0 * x23
    x56 = -x1 * x38
    x57 = -x13 * x43
    x58 = 2.0 * x6
    x59 = x1 * (x13 * (x34 * x55 + x56 - x57 * x58) + x24 * x55 + x35 * x58 + x54)
    x60 = x41 - x42
    x61 = x1 * x60
    x62 = x3 * boys(5, x15)
    x63 = (
        cx * x3 * x5 * (2.0 * x22 * x43 + x30 * (x18 * x23 * x40 - x6 * x62) - x61)
        - x22 * x44
        - x36 * (x28 + x57)
    )
    x64 = 0.5 * x5
    x65 = A[1] - B[1]
    x66 = A[2] - B[2]
    x67 = (
        17.49341832762486
        * da
        * db
        * dc
        * x2 ** (-1.5)
        * numpy.exp(-ax * bx * x1 * (x48**2 + x65**2 + x66**2))
    )
    x68 = 0.3333333333333333 * x67
    x69 = x13 * x5
    x70 = (
        0.5
        * x68
        * (
            2.0 * x46 * x48
            + 2.0 * x48 * (x31 * x48 - x33 - x37 + x44 * x69)
            - 2.0 * x52
            - 3.0 * x59
            + 2.0 * x63 * x69
        )
    )
    x71 = x7 + A[1]
    x72 = -x71
    x73 = x26 * x9 - x27 * x72
    x74 = -x73
    x75 = x13 * x74
    x76 = x17 * x9 - x19 * x72
    x77 = x1 * (x75 + x76)
    x78 = -x76
    x79 = -x23 * x78 + x6 * x75
    x80 = 2.0 * x22
    x81 = -x18 * x25 * x72 + x41 * x9
    x82 = -x81
    x83 = x13 * x82
    x84 = -x23 * x74 + x6 * x83
    x85 = x30 * x84 + x77 - x79 * x80
    x86 = -x85
    x87 = x36 * x79 + x5 * x86
    x88 = x50 * x65 + x87
    x89 = 0.5 * x47
    x90 = x22 * x86
    x91 = x36 * (-x13 * x84 + x79)
    x92 = x1 * (x73 + x83)
    x93 = -x18 * x40 * x72 + x62 * x9
    x94 = -x93
    x95 = x13 * x6
    x96 = 2.0 * x22 * x84 + x30 * (x23 * x82 - x94 * x95) - x92
    x97 = -cx * x3 * x5 * x96 + x90 + x91
    x98 = -x97
    x99 = x1 * x86
    x100 = x5 * x98 - 1.5 * x99
    x101 = 1.732050807568877 * x68
    x102 = 2.0 * x8
    x103 = -x32
    x104 = x102 * x86
    x105 = x103 + x104
    x106 = x102 * x31 * x65 + x105
    x107 = -0.5 * x1 * x46
    x108 = x107 + x8 * x98
    x109 = x31 * x65 - x85
    x110 = x101 * x11
    x111 = x10 + A[2]
    x112 = -x111
    x113 = -x112 * x27 + x12 * x26
    x114 = -x113
    x115 = x114 * x13
    x116 = -x112 * x19 + x12 * x17
    x117 = x1 * (x115 + x116)
    x118 = -x116
    x119 = x115 * x6 - x118 * x23
    x120 = -x112 * x18 * x25 + x12 * x41
    x121 = -x120
    x122 = x121 * x13
    x123 = -x114 * x23 + x122 * x6
    x124 = x117 - x119 * x80 + x123 * x30
    x125 = -x124
    x126 = x119 * x36 + x125 * x5
    x127 = x126 + x50 * x66
    x128 = x125 * x22
    x129 = x36 * (x119 - x123 * x13)
    x130 = x1 * (x113 + x122)
    x131 = -x112 * x18 * x40 + x12 * x62
    x132 = -x131
    x133 = 2.0 * x123 * x22 - x130 + x30 * (x121 * x23 - x132 * x95)
    x134 = -cx * x133 * x3 * x5 + x128 + x129
    x135 = -x134
    x136 = x1 * x125
    x137 = x135 * x5 - 1.5 * x136
    x138 = -x124 + x31 * x66
    x139 = x101 * x8
    x140 = 2.0 * x11
    x141 = x125 * x140
    x142 = x103 + x141
    x143 = x140 * x31 * x66 + x142
    x144 = x107 + x11 * x135
    x145 = 2.0 * x72
    x146 = x145 * x78
    x147 = 2.0 * x9
    x148 = x147 * x75
    x149 = x23 * (x146 - x148 + x53)
    x150 = x145 * x74 - x147 * x83 + x56
    x151 = x13 * x150
    x152 = x151 * x6
    x153 = -x149 + x152
    x154 = x1 * (-x146 + x148 + x151 + x54)
    x155 = -x1 * x60
    x156 = x13 * x9
    x157 = -x150 * x23 + x95 * (x145 * x82 + x155 - 2.0 * x156 * x94)
    x158 = 2.0 * x153 * x22 - x154 - x157 * x30
    x159 = x1 * x153 + x158 * x64
    x160 = x159 + x65 * x87
    x161 = 0.5 * x65
    x162 = x105 * x161
    x163 = 0.5 * x8
    x164 = x158 * x163
    x165 = x153 * x22
    x166 = 0.5 * x154
    x167 = x157 * x69
    x168 = x11 * x68
    x169 = -x114 * x72 + x122 * x9
    x170 = -x169
    x171 = x13 * x170
    x172 = x115 * x9 - x118 * x72
    x173 = x1 * (x171 + x172)
    x174 = x171 * x6 + x172 * x23
    x175 = -x121 * x72 + x132 * x156
    x176 = -x173 + 2.0 * x174 * x22 + x30 * (x170 * x23 + x175 * x95)
    x177 = x176 * x5
    x178 = x174 * x36
    x179 = x177 + x178
    x180 = x179 + x66 * x87
    x181 = x176 * x8
    x182 = 0.5 * x66
    x183 = x105 * x182
    x184 = 0.5 * x136
    x185 = x65 * x8
    x186 = x11 * x176
    x187 = 2.0 * x112
    x188 = x118 * x187
    x189 = 2.0 * x12
    x190 = x115 * x189
    x191 = x188 - x190 + x53
    x192 = x191 * x23
    x193 = x114 * x187 - x122 * x189 + x56
    x194 = x13 * x193
    x195 = x194 * x6
    x196 = -x192 + x195
    x197 = x1 * (-x188 + x190 + x194 + x54)
    x198 = x121 * x187 - x13 * x132 * x189 + x155
    x199 = -x193 * x23 + x198 * x95
    x200 = 2.0 * x196 * x22 - x197 - x199 * x30
    x201 = x1 * x196 + x200 * x64
    x202 = x126 * x66 + x201
    x203 = x196 * x22
    x204 = 0.5 * x197
    x205 = -x204
    x206 = x199 * x69
    x207 = x68 * x8
    x208 = x142 * x182
    x209 = 0.5 * x11
    x210 = x200 * x209
    x211 = x14 * (x11**2 + x5**2 + x8**2)
    x212 = x3 * boys(2, x211)
    x213 = boys(1, x211)
    x214 = x1 * (-x18 * x213 * x71 + x212 * x8)
    x215 = -x22 * x76 + x69 * x73
    x216 = x214 + x215 * x29
    x217 = x1 * (-x18 * x213 * x22 + x212 * x5)
    x218 = x102 * x215 + x217
    x219 = 2.0 * x65
    x220 = 2.0 * x71
    x221 = x102 * x13
    x222 = x21 - x220 * x76 + x221 * x73
    x223 = -x222
    x224 = -x221 * x81 - x39 + 2.0 * x71 * x73
    x225 = x224 * x69
    x226 = x22 * x223 - x225
    x227 = -x1 * x222 + x226 * x29
    x228 = x216 * x219 + x227
    x229 = x1 * x215
    x230 = 2.0 * x229
    x231 = x226 * x8 - x230
    x232 = x218 * x65 + x231
    x233 = -x164 + x99
    x234 = -x165 + x166 + x167
    x235 = x13 * x8
    x236 = x113 * x235 - x116 * x71
    x237 = x1 * x236
    x238 = x169 * x69 - x172 * x22
    x239 = -x237 + x238 * x29
    x240 = x216 * x66 + x239
    x241 = x113 * x69 - x116 * x22
    x242 = x1 * x241
    x243 = x102 * x238 - x242
    x244 = x218 * x66 + x243
    x245 = -x181 + x184
    x246 = x140 * x238 - x229
    x247 = x140 * x215 * x66 + x246
    x248 = x11 * x66
    x249 = -x186 + 0.5 * x99
    x250 = x223 * x71
    x251 = 2.0 * x77
    x252 = -cx * x224 * x3 * x8 + x250 + x251
    x253 = -x252
    x254 = -cx * x3 * x8 * (x221 * x93 + x61 - 2.0 * x71 * x81) - x224 * x71 - 2.0 * x92
    x255 = x254 * x69
    x256 = -x22 * x253 + x255
    x257 = -x256
    x258 = 0.5 * x1
    x259 = x252 * x258
    x260 = 1.5 * x1
    x261 = x226 * x260
    x262 = x117 + x169 * x221 - x172 * x220
    x263 = -x262
    x264 = -x130 + 2.0 * x169 * x71 - x175 * x221
    x265 = x22 * x263 - x264 * x69
    x266 = x258 * x262
    x267 = x265 * x5 - x266
    x268 = x238 * x36
    x269 = -x268
    x270 = x265 * x8 + x269
    x271 = x226 * x258
    x272 = x11 * x265 - x271
    x273 = x191 * x72
    x274 = x194 * x9
    x275 = -x273 + x274
    x276 = x156 * x198 - x193 * x72
    x277 = -x22 * x275 + x276 * x69
    x278 = x13 * x140
    x279 = -2.0 * x111 * x116 + x113 * x278 + x21
    x280 = -x279
    x281 = 2.0 * x111 * x113 - x120 * x278 - x39
    x282 = x235 * x281
    x283 = x280 * x71 - x282
    x284 = x258 * x283
    x285 = x239 * x66 + x277 * x5 - x284
    x286 = x281 * x69
    x287 = x22 * x280 - x286
    x288 = x258 * x287
    x289 = x243 * x66 + x277 * x8 - x288
    x290 = x11 * x277 + x269
    x291 = x246 * x66 + x290
    x292 = x1 * (x11 * x212 - x111 * x18 * x213)
    x293 = x241 * x29 + x292
    x294 = x140 * x241 + x217
    x295 = x239 + x293 * x65
    x296 = x102 * x241 * x65 + x243
    x297 = x246 + x294 * x65
    x298 = 2.0 * x66
    x299 = -x1 * x279
    x300 = x287 * x29 + x299
    x301 = x293 * x298 + x300
    x302 = -x203 + x204 + x206
    x303 = 2.0 * x242
    x304 = x11 * x287 - x303
    x305 = x294 * x66 + x304
    x306 = x136 - x210
    x307 = x239 * x65 + x267
    x308 = x243 * x65 + x270
    x309 = x246 * x65 + x272
    x310 = x22 * x280 + x241 * x298 - x286
    x311 = x111 * x280
    x312 = 2.0 * x117
    x313 = -cx * x11 * x281 * x3 + x311 + x312
    x314 = -x313
    x315 = (
        -cx * x11 * x3 * (-2.0 * x111 * x120 + x131 * x278 + x61)
        - x111 * x281
        - 2.0 * x130
    )
    x316 = x315 * x69
    x317 = -x22 * x314 + x316
    x318 = -x317
    x319 = x258 * x313
    x320 = -x319
    x321 = x260 * x287
    x322 = x1 * x223
    x323 = x223 * x8 + x36 * x76
    x324 = x223 * x65 + x224 * x235 - x250 - x251
    x325 = x324 * x48
    x326 = x102 * x253 - 3.0 * x322
    x327 = x219 * x323 + x326
    x328 = x223 * x66 - x262
    x329 = x48 * x5
    x330 = x172 * x36 + x263 * x8
    x331 = x323 * x66 + x330
    x332 = x140 * x263
    x333 = -x322 + x332
    x334 = x140 * x223 * x66 + x333
    x335 = x253 * x71
    x336 = -1.5 * x154 + x235 * x254 + x253 * x65 + x324 * x65 - x335
    x337 = x5 * x68
    x338 = x263 * x71
    x339 = 2.0 * x173
    x340 = x101 * x5
    x341 = -cx * x264 * x3 * x8 + x338 + x339
    x342 = -x341
    x343 = x1 * x263
    x344 = x342 * x8 - 1.5 * x343
    x345 = -0.5 * x1 * x253 + x11 * x342
    x346 = x275 * x71
    x347 = x235 * x276
    x348 = -x197 - x221 * x276 + 2.0 * x275 * x71
    x349 = x1 * x275 + x163 * x348
    x350 = x330 * x66 + x349
    x351 = x182 * x333
    x352 = x209 * x348
    x353 = x102 * x236 + x292
    x354 = x140 * x236 + x214
    x355 = -x330 + x353 * x65
    x356 = x219 * x354 + x322 - x332
    x357 = x236 * x298 + x280 * x71 - x282
    x358 = x102 * x283 + x299
    x359 = x298 * x353 + x358
    x360 = 2.0 * x237
    x361 = x11 * x283 - x360
    x362 = x354 * x66 + x361
    x363 = x204 - x346 + x347
    x364 = x343 - x352
    x365 = x235 * x315
    x366 = -x314 * x71 + x365
    x367 = -x366
    x368 = x260 * x283
    x369 = x1 * x280
    x370 = x11 * x280 + x116 * x36
    x371 = x273 - x274 + x280 * x65
    x372 = -x102 * x275 + 2.0 * x280 * x65 * x8 - x369
    x373 = x11 * x283 - x360 - x370 * x65
    x374 = x11 * x13
    x375 = x280 * x66 + x281 * x374 - x311 - x312
    x376 = x375 * x48
    x377 = x140 * x314 - 3.0 * x369
    x378 = x298 * x370 + x377
    x379 = x375 * x65
    x380 = x111 * x314
    x381 = -1.5 * x197 + x314 * x66 + x315 * x374 + x375 * x66 - x380

    # 108 item(s)
    result[0, 0, 0] = numpy.sum(
        x68
        * (
            x36 * x46
            - x47 * x49
            - x49 * (x47 + x50 * x51)
            + x64 * (-2.0 * cx * x3 * x5 * x63 + 2.0 * x52 + 3.0 * x59)
        )
    )
    result[0, 0, 1] = numpy.sum(-x70 * x8)
    result[0, 0, 2] = numpy.sum(-x11 * x70)
    result[0, 1, 0] = numpy.sum(-x101 * (x100 + x48 * x88 + x65 * x89))
    result[0, 1, 1] = numpy.sum(x101 * (-x106 * x49 - x108 + x45 * x65 * x8))
    result[0, 1, 2] = numpy.sum(x110 * (-x109 * x48 - x46 * x65 - x69 * x96 + x90 + x91))
    result[0, 2, 0] = numpy.sum(-x101 * (x127 * x48 + x137 + x66 * x89))
    result[0, 2, 1] = numpy.sum(
        x139 * (x128 + x129 - x133 * x69 - x138 * x48 - x46 * x66)
    )
    result[0, 2, 2] = numpy.sum(x101 * (x11 * x45 * x66 - x143 * x49 - x144))
    result[0, 3, 0] = numpy.sum(-x68 * (x160 + x65 * x88))
    result[0, 3, 1] = numpy.sum(x68 * (-x106 * x161 - x162 - x164 + x99))
    result[0, 3, 2] = numpy.sum(x168 * (-x109 * x65 - x165 + x166 + x167 - x65 * x86))
    result[0, 4, 0] = numpy.sum(-x101 * (x127 * x65 + x180))
    result[0, 4, 1] = numpy.sum(x101 * (-x138 * x185 - x181 - x183 + x184))
    result[0, 4, 2] = numpy.sum(
        0.5 * x101 * (x1 * x86 + 2.0 * x11 * x66 * x85 - 2.0 * x143 * x161 - 2.0 * x186)
    )
    result[0, 5, 0] = numpy.sum(-x68 * (x127 * x66 + x202))
    result[0, 5, 1] = numpy.sum(x207 * (-x125 * x66 - x138 * x66 - x203 - x205 + x206))
    result[0, 5, 2] = numpy.sum(x68 * (x136 - x143 * x182 - x208 - x210))
    result[1, 0, 0] = numpy.sum(x101 * (-x100 + x216 * x48**2 - 2.0 * x48 * x87))
    result[1, 0, 1] = numpy.sum(
        -0.5 * x101 * (2.0 * x105 * x49 + 2.0 * x108 - x48 * (-x104 + x218 * x51 + x32))
    )
    result[1, 0, 2] = numpy.sum(x110 * (-x48 * x86 + x48 * (x51 * x79 + x85) + x97))
    result[1, 1, 0] = numpy.sum(0.5 * x67 * (-2.0 * x160 + x228 * x48))
    result[1, 1, 1] = numpy.sum(x67 * (-x162 + x232 * x48 + x233))
    result[1, 1, 2] = numpy.sum(
        x11 * x67 * (x234 + x48 * (x153 + x219 * x79) - x65 * x86)
    )
    result[1, 2, 0] = numpy.sum(x67 * (-x180 + x240 * x48))
    result[1, 2, 1] = numpy.sum(x67 * (-x183 + x244 * x48 + x245))
    result[1, 2, 2] = numpy.sum(x67 * (x247 * x48 + x248 * x85 + x249))
    result[1, 3, 0] = numpy.sum(x101 * (x161 * x227 + x161 * x228 + x257 * x5 - x259))
    result[1, 3, 1] = numpy.sum(x101 * (x231 * x65 + x232 * x65 + x257 * x8 - x261))
    result[1, 3, 2] = numpy.sum(
        x110 * (x22 * x253 + x226 * x65 - x255 + x65 * (x215 * x219 + x22 * x223 - x225))
    )
    result[1, 4, 0] = numpy.sum(x67 * (x182 * x227 + x240 * x65 + x267))
    result[1, 4, 1] = numpy.sum(x67 * (x231 * x66 + x244 * x65 + x270))
    result[1, 4, 2] = numpy.sum(x67 * (x226 * x248 + x247 * x65 + x272))
    result[1, 5, 0] = numpy.sum(x101 * (x240 * x66 + x285))
    result[1, 5, 1] = numpy.sum(x101 * (x244 * x66 + x289))
    result[1, 5, 2] = numpy.sum(x101 * (x247 * x66 + x291))
    result[2, 0, 0] = numpy.sum(x101 * (-2.0 * x126 * x48 - x137 + x293 * x48**2))
    result[2, 0, 1] = numpy.sum(x139 * (-x125 * x48 + x134 + x48 * (x119 * x51 + x124)))
    result[2, 0, 2] = numpy.sum(
        -0.5 * x101 * (2.0 * x142 * x49 + 2.0 * x144 - x48 * (-x141 + x294 * x51 + x32))
    )
    result[2, 1, 0] = numpy.sum(x67 * (-x126 * x65 - x179 + x295 * x48))
    result[2, 1, 1] = numpy.sum(x67 * (x124 * x185 + x245 + x296 * x48))
    result[2, 1, 2] = numpy.sum(x67 * (-x142 * x161 + x249 + x297 * x48))
    result[2, 2, 0] = numpy.sum(0.5 * x67 * (-2.0 * x202 + x301 * x48))
    result[2, 2, 1] = numpy.sum(
        x67 * x8 * (-x125 * x66 + x302 + x48 * (x119 * x298 + x196))
    )
    result[2, 2, 2] = numpy.sum(x67 * (-x208 + x305 * x48 + x306))
    result[2, 3, 0] = numpy.sum(x101 * (x295 * x65 + x307))
    result[2, 3, 1] = numpy.sum(x101 * (x296 * x65 + x308))
    result[2, 3, 2] = numpy.sum(x101 * (x297 * x65 + x309))
    result[2, 4, 0] = numpy.sum(x67 * (x161 * x301 + x285))
    result[2, 4, 1] = numpy.sum(x67 * (x185 * x310 + x289))
    result[2, 4, 2] = numpy.sum(x67 * (x291 + x305 * x65))
    result[2, 5, 0] = numpy.sum(x101 * (x182 * x300 + x182 * x301 + x318 * x5 + x320))
    result[2, 5, 1] = numpy.sum(x139 * (x22 * x314 + x287 * x66 + x310 * x66 - x316))
    result[2, 5, 2] = numpy.sum(x101 * (x11 * x318 + x304 * x66 + x305 * x66 - x321))
    result[3, 0, 0] = numpy.sum(
        0.5
        * x68
        * (
            -2.0 * x159
            + x227 * x48
            + 2.0 * x49 * (x153 * x29 - 2.0 * x223 * x48 * x5 + x322)
        )
    )
    result[3, 0, 1] = numpy.sum(
        x68 * (x231 * x48 + x233 - x48 * (-x226 * x8 + x230 + x323 * x48))
    )
    result[3, 0, 2] = numpy.sum(
        x168 * (x226 * x48 + x234 - x48 * (x149 - x152 + x223 * x48))
    )
    result[3, 1, 0] = numpy.sum(
        0.5 * x101 * (x227 * x65 + 2.0 * x257 * x5 - 2.0 * x259 - 2.0 * x325 * x5)
    )
    result[3, 1, 1] = numpy.sum(x101 * (x231 * x65 + x257 * x8 - x261 - x327 * x49))
    result[3, 1, 2] = numpy.sum(x110 * (x226 * x65 - x256 - x325))
    result[3, 2, 0] = numpy.sum(
        0.5 * x101 * (x227 * x66 + 2.0 * x265 * x5 - 2.0 * x266 - 2.0 * x328 * x329)
    )
    result[3, 2, 1] = numpy.sum(x101 * (x231 * x66 + x265 * x8 - x268 - x331 * x48))
    result[3, 2, 2] = numpy.sum(
        x101 * (x11 * x226 * x66 + x11 * x265 - x271 - x334 * x49)
    )
    result[3, 3, 0] = numpy.sum(-x336 * x337)
    result[3, 3, 1] = numpy.sum(
        -x68
        * (
            x161 * x326
            + x161 * x327
            - x163 * (-2.0 * cx * x254 * x3 * x8 + 3.0 * x154 + 2.0 * x335)
            - x253 * x36
        )
    )
    result[3, 3, 2] = numpy.sum(-x168 * x336)
    result[3, 4, 0] = numpy.sum(
        x340 * (-x235 * x264 - x253 * x66 - x328 * x65 + x338 + x339)
    )
    result[3, 4, 1] = numpy.sum(-x101 * (x182 * x326 + x331 * x65 + x344))
    result[3, 4, 2] = numpy.sum(x101 * (x11 * x252 * x66 - x161 * x334 - x345))
    result[3, 5, 0] = numpy.sum(x337 * (-x205 - x263 * x66 - x328 * x66 - x346 + x347))
    result[3, 5, 1] = numpy.sum(-x68 * (x331 * x66 + x350))
    result[3, 5, 2] = numpy.sum(x68 * (-x182 * x334 + x343 - x351 - x352))
    result[4, 0, 0] = numpy.sum(
        x101 * (-x177 - x178 + x236 * x29 * x48**2 + 2.0 * x239 * x48)
    )
    result[4, 0, 1] = numpy.sum(x101 * (x243 * x48 + x245 + x48 * (x243 + x353 * x48)))
    result[4, 0, 2] = numpy.sum(x101 * (x246 * x48 + x249 + x48 * (x246 + x354 * x48)))
    result[4, 1, 0] = numpy.sum(x67 * (x307 + x329 * (x219 * x236 + x262)))
    result[4, 1, 1] = numpy.sum(x67 * (x308 + x355 * x48))
    result[4, 1, 2] = numpy.sum(x67 * (x309 + x356 * x49))
    result[4, 2, 0] = numpy.sum(x67 * (x285 + x329 * x357))
    result[4, 2, 1] = numpy.sum(x67 * (x289 + x359 * x49))
    result[4, 2, 2] = numpy.sum(x67 * (x291 + x362 * x48))
    result[4, 3, 0] = numpy.sum(x340 * (-x263 * x65 + x341 + x65 * (x172 * x219 + x262)))
    result[4, 3, 1] = numpy.sum(x101 * (-x330 * x65 - x344 + x355 * x65))
    result[4, 3, 2] = numpy.sum(
        0.5 * x101 * (-2.0 * x161 * x333 - 2.0 * x345 + x356 * x65)
    )
    result[4, 4, 0] = numpy.sum(
        x5 * x67 * (-x263 * x66 + x363 + x65 * (x172 * x298 + x275))
    )
    result[4, 4, 1] = numpy.sum(0.5 * x67 * (-2.0 * x350 + x359 * x65))
    result[4, 4, 2] = numpy.sum(x67 * (-x351 + x362 * x65 + x364))
    result[4, 5, 0] = numpy.sum(x340 * (x283 * x66 + x314 * x71 + x357 * x66 - x365))
    result[4, 5, 1] = numpy.sum(x101 * (x182 * x358 + x182 * x359 + x320 + x367 * x8))
    result[4, 5, 2] = numpy.sum(x101 * (x11 * x367 + x361 * x66 + x362 * x66 - x368))
    result[5, 0, 0] = numpy.sum(
        0.5
        * x68
        * (
            -2.0 * x201
            + x300 * x48
            + 2.0 * x49 * (x196 * x29 - 2.0 * x280 * x48 * x5 + x369)
        )
    )
    result[5, 0, 1] = numpy.sum(
        x207 * (x287 * x48 + x302 - x48 * (x192 - x195 + x280 * x48))
    )
    result[5, 0, 2] = numpy.sum(
        x68 * (x304 * x48 + x306 - x48 * (-x11 * x287 + x303 + x370 * x48))
    )
    result[5, 1, 0] = numpy.sum(
        0.5 * x101 * (2.0 * x277 * x5 - 2.0 * x284 + x300 * x65 - 2.0 * x329 * x371)
    )
    result[5, 1, 1] = numpy.sum(x101 * (x277 * x8 + x287 * x65 * x8 - x288 - x372 * x49))
    result[5, 1, 2] = numpy.sum(x101 * (x290 + x304 * x65 + x373 * x48))
    result[5, 2, 0] = numpy.sum(
        0.5 * x101 * (x300 * x66 + 2.0 * x318 * x5 - 2.0 * x319 - 2.0 * x376 * x5)
    )
    result[5, 2, 1] = numpy.sum(x139 * (x287 * x66 - x317 - x376))
    result[5, 2, 2] = numpy.sum(x101 * (x11 * x318 + x304 * x66 - x321 - x378 * x49))
    result[5, 3, 0] = numpy.sum(x337 * (x283 * x65 + x363 - x371 * x65))
    result[5, 3, 1] = numpy.sum(
        0.5 * x68 * (-2.0 * x161 * x372 - 2.0 * x349 + x358 * x65)
    )
    result[5, 3, 2] = numpy.sum(x68 * (x361 * x65 + x364 + x373 * x65))
    result[5, 4, 0] = numpy.sum(x340 * (x283 * x66 - x366 - x379))
    result[5, 4, 1] = numpy.sum(
        0.5 * x101 * (-2.0 * x319 + x358 * x66 + 2.0 * x367 * x8 - 2.0 * x379 * x8)
    )
    result[5, 4, 2] = numpy.sum(x101 * (x11 * x367 - x161 * x378 + x361 * x66 - x368))
    result[5, 5, 0] = numpy.sum(-x337 * x381)
    result[5, 5, 1] = numpy.sum(-x207 * x381)
    result[5, 5, 2] = numpy.sum(
        -x68
        * (
            x182 * x377
            + x182 * x378
            - x209 * (-2.0 * cx * x11 * x3 * x315 + 3.0 * x197 + 2.0 * x380)
            - x314 * x36
        )
    )
    return result


def int3c2e3d_sph_222(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dd|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = x2 + C[0]
    x4 = cx + x0
    x5 = x4 ** (-1.0)
    x6 = -x3
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = x7 + C[1]
    x9 = -x8
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = x10 + C[2]
    x12 = -x11
    x13 = cx * x5
    x14 = x0 * x13
    x15 = x14 * (x12**2 + x6**2 + x9**2)
    x16 = boys(3, x15)
    x17 = x16 * x5
    x18 = cx ** (-1.0)
    x19 = x18 * boys(2, x15)
    x20 = x17 - x19
    x21 = x1 * x20
    x22 = x2 + A[0]
    x23 = -x22
    x24 = x17 * x6 - x19 * x23
    x25 = boys(4, x15)
    x26 = x25 * x5
    x27 = x16 * x18
    x28 = -x23 * x27 + x26 * x6
    x29 = 2.0 * x3
    x30 = x13 * x29
    x31 = x21 - 2.0 * x22 * x24 + x28 * x30
    x32 = -x31
    x33 = -x28
    x34 = x13 * x33
    x35 = 2.0 * x1
    x36 = x26 - x27
    x37 = x1 * x36
    x38 = boys(5, x15)
    x39 = x38 * x5
    x40 = x18 * x25
    x41 = -x23 * x40 + x39 * x6
    x42 = 2.0 * x22 * x28 - x30 * x41 - x37
    x43 = x13 * x3
    x44 = x22 * x32 + x35 * (x24 + x34) - x42 * x43
    x45 = -x44
    x46 = 3.0 * x1 * x32 - x29 * x45
    x47 = x1 * x24
    x48 = x3 * x32 + 2.0 * x47
    x49 = 3.0 * x1
    x50 = x3 * x46 + x48 * x49
    x51 = A[0] - B[0]
    x52 = 0.5 * x51
    x53 = x22 * x45
    x54 = -x1 * x20
    x55 = -x54
    x56 = 2.0 * x23
    x57 = -x1 * x36
    x58 = -x13 * x41
    x59 = 2.0 * x6
    x60 = x13 * (x33 * x56 + x57 - x58 * x59) + x24 * x56 + x34 * x59 + x55
    x61 = x39 - x40
    x62 = x1 * x61
    x63 = x5 * boys(6, x15)
    x64 = (
        cx * x3 * x5 * (2.0 * x22 * x41 + x30 * (x18 * x23 * x38 - x6 * x63) - x62)
        - x22 * x42
        - x35 * (x28 + x58)
    )
    x65 = -2.0 * cx * x3 * x5 * x64 + x49 * x60 + 2.0 * x53
    x66 = 0.5 * x3
    x67 = x3**2
    x68 = x8**2
    x69 = x11**2
    x70 = x14 * (x67 + x68 + x69)
    x71 = boys(2, x70)
    x72 = x1 * x18 * x71
    x73 = x1 * (x24 * x29 + x72) + x3 * x48
    x74 = 1.732050807568877
    x75 = A[1] - B[1]
    x76 = A[2] - B[2]
    x77 = (
        17.49341832762486
        * da
        * db
        * dc
        * x0
        * x4 ** (-2.5)
        * numpy.exp(-ax * bx * x1 * (x51**2 + x75**2 + x76**2))
    )
    x78 = x74 * x77
    x79 = 0.1111111111111111 * x78
    x80 = x29 * x44
    x81 = 3.0 * x1 * x31 - x80
    x82 = x5 * boys(3, x70)
    x83 = 2.0 * x1 * (x18 * x22 * x71 - x3 * x82) - x3 * x31
    x84 = 2.0 * x51
    x85 = 0.3333333333333333 * x77
    x86 = x85 * (
        x35 * x44 + x52 * x81 + x52 * (3.0 * x1 * x31 - x80 + x83 * x84) - x65 * x66
    )
    x87 = 1.5 * x1
    x88 = -x43 * x64 + x44 * x51 + x51 * (x31 * x51 + x44) + x53 + x60 * x87
    x89 = x79 * x88
    x90 = x8 * x85
    x91 = 0.5 * x75
    x92 = x7 + A[1]
    x93 = -x92
    x94 = x26 * x9 - x27 * x93
    x95 = -x94
    x96 = x13 * x95
    x97 = x17 * x9 - x19 * x93
    x98 = x96 + x97
    x99 = x1 * x98
    x100 = -x97
    x101 = -x100 * x23 + x6 * x96
    x102 = 2.0 * x22
    x103 = -x18 * x25 * x93 + x39 * x9
    x104 = -x103
    x105 = x104 * x13
    x106 = x105 * x6 - x23 * x95
    x107 = -x101 * x102 + x106 * x30 + x99
    x108 = -x107
    x109 = x105 + x94
    x110 = x1 * x109
    x111 = -x18 * x38 * x93 + x63 * x9
    x112 = -x111
    x113 = x13 * x6
    x114 = (
        x108 * x22
        + x35 * (x101 - x106 * x13)
        - x43 * (2.0 * x106 * x22 - x110 + x30 * (x104 * x23 - x112 * x113))
    )
    x115 = -x114
    x116 = x66 * (3.0 * x1 * x108 - x115 * x29)
    x117 = x1 * x97
    x118 = -x117
    x119 = x101 * x3
    x120 = x118 + 2.0 * x119
    x121 = x1 * x101
    x122 = 2.0 * x121
    x123 = x108 * x3 + x122
    x124 = x1 * x120 + x123 * x3
    x125 = x124 + x73 * x75
    x126 = x123 * x87
    x127 = -x1 * x45
    x128 = x115 * x8
    x129 = -x29 * (x127 + 2.0 * x128)
    x130 = x1 * x32
    x131 = -x130
    x132 = x108 * x8
    x133 = -x131 - 2.0 * x132
    x134 = x133 * x3
    x135 = -x47
    x136 = x101 * x8
    x137 = x135 + 2.0 * x136
    x138 = x1 * x137
    x139 = 2.0 * x138
    x140 = x75 * x83
    x141 = 2.0 * x8
    x142 = -x134 + x139 + x140 * x141
    x143 = x133 * x49
    x144 = x141 * x75
    x145 = 0.08333333333333333 * x78
    x146 = x107 * x3
    x147 = -x22 * x97 + x43 * x94
    x148 = x140 - x146 + x147 * x35
    x149 = x1 * x107
    x150 = -x114 * x3 + 1.5 * x149
    x151 = x11 * x85
    x152 = x151 * x74
    x153 = x31 * x75
    x154 = x153 * x8
    x155 = x130 - x132
    x156 = x154 + x155
    x157 = x44 * x75
    x158 = x157 * x8
    x159 = x1 * x45
    x160 = -x128 + x159
    x161 = -x1 * x31 + x107 * x141
    x162 = -2.0 * x154 - x161
    x163 = 0.5 * x1
    x164 = -x114 * x8 + x163 * x44
    x165 = x107 + x153
    x166 = x69 * x85
    x167 = 0.5 * x76
    x168 = x10 + A[2]
    x169 = -x168
    x170 = x12 * x26 - x169 * x27
    x171 = -x170
    x172 = x13 * x171
    x173 = x12 * x17 - x169 * x19
    x174 = x172 + x173
    x175 = x1 * x174
    x176 = -x173
    x177 = x172 * x6 - x176 * x23
    x178 = x12 * x39 - x169 * x18 * x25
    x179 = -x178
    x180 = x13 * x179
    x181 = -x171 * x23 + x180 * x6
    x182 = -x102 * x177 + x175 + x181 * x30
    x183 = -x182
    x184 = x170 + x180
    x185 = x1 * x184
    x186 = x12 * x63 - x169 * x18 * x38
    x187 = -x186
    x188 = (
        x183 * x22
        - x35 * (x13 * x181 - x177)
        + x43 * (-2.0 * x181 * x22 + x185 + x30 * (x113 * x187 - x179 * x23))
    )
    x189 = -x188
    x190 = x66 * (3.0 * x1 * x183 - x189 * x29)
    x191 = x1 * x173
    x192 = -x191
    x193 = x177 * x3
    x194 = x192 + 2.0 * x193
    x195 = x1 * x177
    x196 = 2.0 * x195
    x197 = x183 * x3 + x196
    x198 = x1 * x194 + x197 * x3
    x199 = x198 + x73 * x76
    x200 = x197 * x87
    x201 = x76 * x83
    x202 = x182 * x3
    x203 = x35 * (x170 * x43 - x173 * x22)
    x204 = x201 - x202 + x203
    x205 = x182 * x87 - x188 * x3
    x206 = x74 * x90
    x207 = x11 * x189
    x208 = -x29 * (x127 + 2.0 * x207)
    x209 = x11 * x183
    x210 = 2.0 * x209
    x211 = x131 + x210
    x212 = -x211
    x213 = x212 * x3
    x214 = x11 * x177
    x215 = x135 + 2.0 * x214
    x216 = x1 * x215
    x217 = 2.0 * x216
    x218 = 2.0 * x11
    x219 = x201 * x218 - x213 + x217
    x220 = x1 * x212
    x221 = 3.0 * x220
    x222 = x11 * x76
    x223 = 2.0 * x222
    x224 = x31 * x76
    x225 = x182 + x224
    x226 = x44 * x76
    x227 = x68 * x85
    x228 = x11 * x224
    x229 = x130 - x210
    x230 = -2.0 * x228 - x229
    x231 = 0.5 * x159
    x232 = x11 * x226
    x233 = x130 - x209
    x234 = x228 + x233
    x235 = -x207
    x236 = x159 + x235
    x237 = x13 * x141
    x238 = x21 + x237 * x94 - 2.0 * x92 * x97
    x239 = -x238
    x240 = x1 * x239
    x241 = 2.0 * x93
    x242 = x100 * x241
    x243 = 2.0 * x9
    x244 = x243 * x96
    x245 = x242 - x244 + x54
    x246 = -x105 * x243 + x241 * x95 + x57
    x247 = x13 * x246
    x248 = -x23 * x245 + x247 * x6
    x249 = x248 * x3
    x250 = x240 + 2.0 * x249
    x251 = x1 * (-x242 + x244 + x247 + x55)
    x252 = -x1 * x61
    x253 = x13 * x9
    x254 = 2.0 * x253
    x255 = x104 * x241 - x112 * x254 + x252
    x256 = x113 * x255 - x23 * x246
    x257 = -2.0 * x22 * x248 + x251 + x256 * x30
    x258 = -x257
    x259 = x1 * x248
    x260 = x258 * x3 + 2.0 * x259
    x261 = x124 * x75 + x163 * x250 + x260 * x66
    x262 = x134 - x139
    x263 = 2.0 * x1 * x108 - x258 * x8
    x264 = x248 * x8
    x265 = -x122 + x264
    x266 = x1 * x265
    x267 = x263 * x66 - x266
    x268 = x262 * x91 + x267
    x269 = -x103 * x237 - x37 + 2.0 * x92 * x94
    x270 = x269 * x43
    x271 = x22 * x239 - x270
    x272 = -2.0 * x1 * x147 + x146
    x273 = -x272
    x274 = x257 * x66
    x275 = x75 * x8
    x276 = -x131 - x132
    x277 = 0.5 * x8
    x278 = -x133 * x163 + x263 * x277
    x279 = x275 * x276 + x278
    x280 = -x161
    x281 = x257 * x277
    x282 = -x22 * x248 + 0.5 * x251 + x256 * x43
    x283 = x107 * x75 + x282
    x284 = x69 * x79
    x285 = x172 * x9 - x176 * x93
    x286 = x1 * x285
    x287 = -x286
    x288 = -x285
    x289 = -x171 * x93 + x180 * x9
    x290 = -x289
    x291 = x13 * x290
    x292 = -x23 * x288 + x291 * x6
    x293 = x292 * x3
    x294 = x287 + 2.0 * x293
    x295 = x1 * (x285 + x291)
    x296 = -x179 * x93 + x187 * x253
    x297 = -x296
    x298 = 2.0 * x22 * x292 - x295 - x30 * (x113 * x297 - x23 * x290)
    x299 = x292 * x35
    x300 = x298 * x3 + x299
    x301 = x1 * x294 + x3 * x300
    x302 = x124 * x76 + x301
    x303 = -x195
    x304 = x292 * x8
    x305 = x303 + 2.0 * x304
    x306 = x1 * x305
    x307 = x167 * x262
    x308 = x298 * x8
    x309 = x66 * (x1 * x183 - 2.0 * x308)
    x310 = x74 * x85
    x311 = -x121
    x312 = x11 * x292
    x313 = x311 + 2.0 * x312
    x314 = x1 * x313
    x315 = x11 * x298
    x316 = x1 * x108 - 2.0 * x315
    x317 = x316 * x66
    x318 = x1 * x183
    x319 = -x308 + x318
    x320 = x276 * x76 + x319
    x321 = x141 * x316
    x322 = x1 * x108 - x315
    x323 = x107 * x222 + x322
    x324 = x13 * x218
    x325 = -2.0 * x168 * x173 + x170 * x324 + x21
    x326 = -x325
    x327 = x1 * x326
    x328 = 2.0 * x169
    x329 = x176 * x328
    x330 = 2.0 * x12
    x331 = x172 * x330
    x332 = x329 - x331 + x54
    x333 = x171 * x328 - x180 * x330 + x57
    x334 = x13 * x333
    x335 = -x23 * x332 + x334 * x6
    x336 = x3 * x335
    x337 = x327 + 2.0 * x336
    x338 = x1 * (-x329 + x331 + x334 + x55)
    x339 = x12 * x13
    x340 = x179 * x328 - 2.0 * x187 * x339 + x252
    x341 = x113 * x340 - x23 * x333
    x342 = -2.0 * x22 * x335 + x30 * x341 + x338
    x343 = -x342
    x344 = x1 * x335
    x345 = x3 * x343 + 2.0 * x344
    x346 = x163 * x337 + x198 * x76 + x345 * x66
    x347 = 2.0 * x168 * x170 - x178 * x324 - x37
    x348 = x347 * x43
    x349 = x22 * x326 - x348
    x350 = -x203
    x351 = x202 + x350
    x352 = -x351
    x353 = x342 * x66
    x354 = x213 - x217
    x355 = x11 * x343
    x356 = 2.0 * x1 * x183 - x355
    x357 = x11 * x335
    x358 = -x196 + x357
    x359 = x1 * x358
    x360 = x356 * x66 - x359
    x361 = x167 * x354 + x360
    x362 = 0.5 * x338
    x363 = -x22 * x335 + x341 * x43 + x362
    x364 = x182 * x76 + x363
    x365 = x68 * x79
    x366 = x318 - 0.5 * x355
    x367 = x167 * x212 + x366
    x368 = -x131 - x209
    x369 = 0.5 * x11
    x370 = -0.5 * x220 + x356 * x369
    x371 = x222 * x368 + x370
    x372 = x118 + x119
    x373 = x29 * x51
    x374 = x1 * (x141 * x97 + x72)
    x375 = x137 * x29 - x374
    x376 = x135 + x136
    x377 = 2.0 * x75
    x378 = x240 + x249
    x379 = x372 * x377 + x378
    x380 = x3 * x51
    x381 = 2.0 * x117 + x239 * x8
    x382 = x1 * x381
    x383 = x265 * x29 + x382
    x384 = x375 * x75 + x383
    x385 = x120 * x377 + x250
    x386 = -x1 * x271 + x274
    x387 = x11 * x77
    x388 = x265 * x8
    x389 = -x138 + x388
    x390 = x144 * x376 + x389
    x391 = x137 * x75 + x265
    x392 = -x1 * x107 + x281
    x393 = x101 * x377 + x248
    x394 = x287 + x293
    x395 = x372 * x76 + x394
    x396 = x285 * x8
    x397 = x192 + 2.0 * x396
    x398 = x1 * x397
    x399 = x29 * x305 - x398
    x400 = x375 * x76 + x399
    x401 = -x306
    x402 = x309 + x401
    x403 = x11 * x285
    x404 = x118 + 2.0 * x403
    x405 = x1 * x404
    x406 = -x405
    x407 = x29 * x313 + x406
    x408 = x120 * x223 + x407
    x409 = -x314
    x410 = x317 + x409
    x411 = x303 + x304
    x412 = x376 * x76 + x411
    x413 = -x216
    x414 = x141 * x313 + x413
    x415 = x137 * x223 + x414
    x416 = -x220 + x321
    x417 = 0.25 * x77
    x418 = x311 + x312
    x419 = x101 * x222 + x418
    x420 = x239 * x92
    x421 = 2.0 * x99
    x422 = x13 * x8
    x423 = x269 * x422
    x424 = x420 + x421 - x423
    x425 = -x424
    x426 = x1 * x425
    x427 = -x113 * (x109 * x35 - x246 * x93 + x253 * x255) + x23 * (
        -x245 * x93 + x247 * x9 + x35 * x98
    )
    x428 = x3 * x427
    x429 = x378 * x75 + x426 + x428
    x430 = x3 * x85
    x431 = -3.0 * x1 * x239 + x141 * x425
    x432 = -x431
    x433 = -x1 * x432
    x434 = x427 * x8
    x435 = -3.0 * x259 + 2.0 * x434
    x436 = x29 * x435 + x377 * x383 + x433
    x437 = 0.5 * x426
    x438 = x250 * x91 + x428 + x437
    x439 = x389 * x75
    x440 = x277 * x435
    x441 = 1.5 * x266
    x442 = x265 * x75
    x443 = 1.5 * x259
    x444 = x248 * x75 + x427
    x445 = x175 + x237 * x289 - 2.0 * x285 * x92
    x446 = -x445
    x447 = x1 * x446
    x448 = -x1 * x174
    x449 = -x1 * x184
    x450 = x113 * (x241 * x290 - x254 * x297 + x449) - x23 * (
        x241 * x288 - x243 * x291 + x448
    )
    x451 = x3 * x450 + x447
    x452 = x378 * x76 + x451
    x453 = x3 * x310
    x454 = -x299
    x455 = x450 * x8 + x454
    x456 = 2.0 * x286
    x457 = x446 * x8 + x456
    x458 = x163 * x457 + x3 * x455
    x459 = x167 * x383 + x458
    x460 = x223 * x250
    x461 = -x240
    x462 = x11 * x446
    x463 = 2.0 * x462
    x464 = x461 + x463
    x465 = -x464
    x466 = x1 * x465
    x467 = -x259
    x468 = x11 * x450
    x469 = x467 + 2.0 * x468
    x470 = x29 * x469
    x471 = -x466 + x470
    x472 = x389 * x76
    x473 = x455 * x8
    x474 = x401 + x473
    x475 = x222 * x265
    x476 = x277 * x469
    x477 = x409 + x476
    x478 = x467 + x468
    x479 = x222 * x271 + x478
    x480 = 2.0 * x76
    x481 = -x332 * x93 + x334 * x9
    x482 = x253 * x340 - x333 * x93
    x483 = -x113 * x482 + x23 * x481
    x484 = x1 * x481
    x485 = x3 * x483 - x484
    x486 = x394 * x480 + x485
    x487 = x481 * x8
    x488 = x327 + 2.0 * x487
    x489 = x1 * x488
    x490 = -x344
    x491 = x483 * x8
    x492 = x29 * (x490 + 2.0 * x491) - x489
    x493 = x399 * x480 + x492
    x494 = x11 * x483 + x454
    x495 = x11 * x481 - x456
    x496 = x1 * x495
    x497 = x3 * x494 - 0.5 * x496
    x498 = x167 * x407 + x497
    x499 = x490 + x491
    x500 = x411 * x480 + x499
    x501 = -0.5 * x359 + x494 * x8
    x502 = x167 * x414 + x501
    x503 = x11 * x494
    x504 = x223 * x418 + x409 + x503
    x505 = x192 + x193
    x506 = x1 * (x173 * x218 + x72)
    x507 = -x506
    x508 = x215 * x29 + x507
    x509 = x135 + x214
    x510 = x394 + x505 * x75
    x511 = x144 * x194 + x399
    x512 = x407 + x508 * x75
    x513 = x177 * x275 + x411
    x514 = x144 * x215 + x414
    x515 = x418 + x509 * x75
    x516 = x327 + x336
    x517 = x480 * x505 + x516
    x518 = x194 * x480 + x337
    x519 = -x1 * x349 + x353
    x520 = x77 * x8
    x521 = x11 * x326 + 2.0 * x191
    x522 = x1 * x521
    x523 = x29 * x358 + x522
    x524 = x508 * x76 + x523
    x525 = x177 * x480 + x335
    x526 = x215 * x76 + x358
    x527 = x11 * x358
    x528 = x413 + x527
    x529 = x223 * x509 + x528
    x530 = x377 * x394 + x451
    x531 = x399 * x91 + x458
    x532 = x377 * x407 + x471
    x533 = x144 * x411
    x534 = x414 * x91 + x477
    x535 = x377 * x418 + x478
    x536 = x168 * x326
    x537 = 2.0 * x175
    x538 = x11 * x13
    x539 = x347 * x538
    x540 = x536 + x537 - x539
    x541 = -x540
    x542 = x1 * x541
    x543 = -x12 * x334 + x169 * x332 + 2.0 * x448
    x544 = x169 * x333 - x339 * x340 + 2.0 * x449
    x545 = x113 * x544 - x23 * x543
    x546 = x3 * x545
    x547 = x516 * x76 + x542 + x546
    x548 = 0.5 * x542
    x549 = x167 * x337 + x546 + x548
    x550 = -3.0 * x1 * x326 + x218 * x541
    x551 = -x550
    x552 = -x1 * x551
    x553 = x11 * x545
    x554 = -3.0 * x344 + 2.0 * x553
    x555 = x29 * x554 + x480 * x523 + x552
    x556 = x335 * x76 + x545
    x557 = 1.5 * x344
    x558 = x528 * x76
    x559 = x369 * x554
    x560 = 1.5 * x359
    x561 = x238 * x51
    x562 = x374 + x381 * x8
    x563 = 2.0 * x1 * (x18 * x71 * x92 - x8 * x82) - x238 * x8
    x564 = x238 * x75 + x424
    x565 = x380 * x564
    x566 = x377 * x381 + x431
    x567 = 3.0 * x382 + x432 * x8
    x568 = 2.0 * x562 * x75 - x567
    x569 = x141 * x424
    x570 = x238 * x49 + x377 * x563 - x569
    x571 = x238 * x76
    x572 = x445 + x571
    x573 = x381 * x76 + x457
    x574 = x240 - x463
    x575 = -x218 * x571 - x574
    x576 = x398 + x457 * x8
    x577 = x562 * x76 + x576
    x578 = x306 - x473
    x579 = x465 * x8
    x580 = 2.0 * x405
    x581 = x223 * x563 - x579 + x580
    x582 = x240 - x462
    x583 = x11 * x571 + x582
    x584 = x425 * x92
    x585 = (
        -cx * x5 * x8 * (-2.0 * x103 * x92 + x111 * x237 + x62) - 2.0 * x110 - x269 * x92
    )
    x586 = 1.5 * x251 - x422 * x585 + x424 * x75 + x564 * x75 + x584
    x587 = x67 * x79
    x588 = -2.0 * cx * x5 * x585 * x8 + 3.0 * x251 + 2.0 * x584
    x589 = -x588 * x8
    x590 = 3.0 * x1 * x238 - x569
    x591 = x424 * x76
    x592 = 2.0 * x295 + x422 * (x185 + x237 * x296 - 2.0 * x289 * x92) + x446 * x92
    x593 = x67 * x85
    x594 = -x592
    x595 = x594 * x8
    x596 = -1.5 * x1 * x446 + x595
    x597 = x11 * x594
    x598 = x11 * x591
    x599 = x277 * (3.0 * x1 * x446 - 2.0 * x595)
    x600 = x457 * x87
    x601 = x141 * (x1 * x425 - 2.0 * x597)
    x602 = 3.0 * x466
    x603 = -x597
    x604 = x426 + x603
    x605 = x362 + x422 * x482 - x481 * x92
    x606 = x445 * x76 + x605
    x607 = -x237 * x482 - x338 + 2.0 * x481 * x92
    x608 = x607 * x8
    x609 = x484 + 0.5 * x608
    x610 = x457 * x76 + x609
    x611 = x11 * x607
    x612 = x447 - 0.5 * x611
    x613 = x167 * x465 + x612
    x614 = 2.0 * x484 + x608
    x615 = x277 * x614 + 0.5 * x489 + x576 * x76
    x616 = x579 - x580
    x617 = 2.0 * x1 * x446 - x611
    x618 = x277 * x617 - x496
    x619 = x167 * x616 + x618
    x620 = -x461 - x462
    x621 = x369 * x617 - 0.5 * x466
    x622 = x222 * x620 + x621
    x623 = x192 + x396
    x624 = x141 * x404 + x507
    x625 = x118 + x403
    x626 = x285 * x377 + x445
    x627 = -x397 * x75 + x457
    x628 = x377 * x404 + x574
    x629 = -x144 * x623 + x576
    x630 = x616 + x624 * x75
    x631 = x377 * x625 + x582
    x632 = x285 * x480 + x481
    x633 = x397 * x480 + x488
    x634 = x404 * x76 + x495
    x635 = x327 + x487
    x636 = x480 * x623 + x635
    x637 = x141 * x495 + x522
    x638 = x624 * x76 + x637
    x639 = x11 * x495
    x640 = x406 + x639
    x641 = x223 * x625 + x640
    x642 = x3 * x77
    x643 = x253 * x544 - x543 * x93
    x644 = x481 * x76 + x643
    x645 = x643 * x8
    x646 = x167 * x488 + x548 + x645
    x647 = x11 * x643
    x648 = 1.5 * x484
    x649 = x542 + x635 * x76 + x645
    x650 = -3.0 * x484 + 2.0 * x647
    x651 = x141 * x650 + x480 * x637 + x552
    x652 = x640 * x76
    x653 = x369 * x650
    x654 = 1.5 * x496
    x655 = x325 * x51
    x656 = x51 * x521
    x657 = x11 * x521 + x506
    x658 = x325 * x75
    x659 = x347 * x422
    x660 = x326 * x92 + x658 - x659
    x661 = x326 * x92 - x659
    x662 = x521 * x75
    x663 = -x11 * x481 + x456 + x662
    x664 = x635 + x658 * x8
    x665 = -x141 * x662 + x637
    x666 = x405 - x639 + x657 * x75
    x667 = x325 * x76 + x540
    x668 = x380 * x667
    x669 = x480 * x521 + x550
    x670 = -x669
    x671 = x326 * x76 - x536 - x537 + x539
    x672 = x11 * x551 + 3.0 * x522
    x673 = 2.0 * x657 * x76 - x672
    x674 = x671 * x75
    x675 = x168 * x541
    x676 = (
        -cx * x11 * x5 * (-2.0 * x168 * x178 + x186 * x324 + x62)
        - x168 * x347
        - 2.0 * x185
    )
    x677 = 1.5 * x338 - x538 * x676 + x540 * x76 + x667 * x76 + x675
    x678 = x11 * (2.0 * cx * x11 * x5 * x676 - 3.0 * x338 - 2.0 * x675)
    x679 = x167 * x551 - x167 * x669 + 2.0 * x542 - 0.5 * x678

    # 216 item(s)
    result[0, 0, 0] = numpy.sum(
        -0.5
        * x79
        * (
            -2.0 * x1 * x46
            + 2.0 * x50 * x52
            + x51 * (x50 - 2.0 * x51 * x73)
            + 2.0 * x66 * (4.0 * x1 * x45 + x3 * x65)
        )
    )
    result[0, 0, 1] = numpy.sum(x8 * x86)
    result[0, 0, 2] = numpy.sum(x11 * x86)
    result[0, 0, 3] = numpy.sum(-x68 * x89)
    result[0, 0, 4] = numpy.sum(-x11 * x88 * x90)
    result[0, 0, 5] = numpy.sum(-x69 * x89)
    result[0, 1, 0] = numpy.sum(x85 * (-x116 + x125 * x51 - x126 - x50 * x91))
    result[0, 1, 1] = numpy.sum(x145 * (-x129 + x142 * x84 + x143 + x144 * x81))
    result[0, 1, 2] = numpy.sum(x152 * (x148 * x51 + x150 + x81 * x91))
    result[0, 1, 3] = numpy.sum(-x90 * (x156 * x51 + x158 + x160))
    result[0, 1, 4] = numpy.sum(x152 * (-x158 + x162 * x52 + x164))
    result[0, 1, 5] = numpy.sum(-x166 * (x114 + x157 + x165 * x51))
    result[0, 2, 0] = numpy.sum(x85 * (-x167 * x50 - x190 + x199 * x51 - x200))
    result[0, 2, 1] = numpy.sum(x206 * (x167 * x81 + x204 * x51 + x205))
    result[0, 2, 2] = numpy.sum(x145 * (-x208 + x219 * x84 + x221 + x223 * x81))
    result[0, 2, 3] = numpy.sum(-x227 * (x188 + x225 * x51 + x226))
    result[0, 2, 4] = numpy.sum(x206 * (x207 + x230 * x52 - x231 - x232))
    result[0, 2, 5] = numpy.sum(-x151 * (x232 + x234 * x51 + x236))
    result[0, 3, 0] = numpy.sum(x79 * (x125 * x75 + x261))
    result[0, 3, 1] = numpy.sum(0.5 * x85 * (x142 * x75 - 2.0 * x268))
    result[0, 3, 2] = numpy.sum(x151 * (x1 * x271 + x148 * x75 + x273 * x75 - x274))
    result[0, 3, 3] = numpy.sum(-x79 * (x156 * x275 + x279))
    result[0, 3, 4] = numpy.sum(x151 * (x149 + x162 * x91 + x280 * x91 - x281))
    result[0, 3, 5] = numpy.sum(-x284 * (x165 * x75 + x283))
    result[0, 4, 0] = numpy.sum(x85 * (x199 * x75 + x302))
    result[0, 4, 1] = numpy.sum(x310 * (x204 * x275 + x306 - x307 - x309))
    result[0, 4, 2] = numpy.sum(x310 * (x219 * x91 + x222 * x273 + x314 - x317))
    result[0, 4, 3] = numpy.sum(-x90 * (x225 * x275 + x320))
    result[0, 4, 4] = numpy.sum(x145 * (x144 * x230 + x220 + x223 * x280 - x321))
    result[0, 4, 5] = numpy.sum(-x151 * (x234 * x75 + x323))
    result[0, 5, 0] = numpy.sum(x79 * (x199 * x76 + x346))
    result[0, 5, 1] = numpy.sum(x90 * (x1 * x349 + x204 * x76 + x352 * x76 - x353))
    result[0, 5, 2] = numpy.sum(0.5 * x85 * (x219 * x76 - 2.0 * x361))
    result[0, 5, 3] = numpy.sum(-x365 * (x225 * x76 + x364))
    result[0, 5, 4] = numpy.sum(x90 * (x167 * (x211 + x223 * x32) - x367))
    result[0, 5, 5] = numpy.sum(-x79 * (x222 * x234 + x371))
    result[1, 0, 0] = numpy.sum(
        x85 * (-x116 + 2.0 * x124 * x51 - x126 - x372 * x373 * x51)
    )
    result[1, 0, 1] = numpy.sum(
        x145 * (-x129 + x143 - 2.0 * x262 * x84 - x375 * x51 * x84)
    )
    result[1, 0, 2] = numpy.sum(x152 * (x150 + x273 * x51 - x51 * (x120 * x51 + x272)))
    result[1, 0, 3] = numpy.sum(-x90 * (x160 + x276 * x51 + x51 * (x155 + x376 * x84)))
    result[1, 0, 4] = numpy.sum(x152 * (x164 + x280 * x52 - x52 * (x137 * x84 + x161)))
    result[1, 0, 5] = numpy.sum(-x166 * (x107 * x51 + x114 + x51 * (x101 * x84 + x107)))
    result[1, 1, 0] = numpy.sum(x310 * (x261 - x379 * x380))
    result[1, 1, 1] = numpy.sum(-x77 * (x268 + x384 * x52))
    result[1, 1, 2] = numpy.sum(x387 * (x273 * x75 - x385 * x52 - x386))
    result[1, 1, 3] = numpy.sum(-x310 * (x279 + x390 * x51))
    result[1, 1, 4] = numpy.sum(0.5 * x387 * (x280 * x75 - 2.0 * x391 * x51 - 2.0 * x392))
    result[1, 1, 5] = numpy.sum(-x166 * x74 * (x283 + x393 * x51))
    result[1, 2, 0] = numpy.sum(x310 * (x302 - x373 * x395))
    result[1, 2, 1] = numpy.sum(-x77 * (x307 + x400 * x52 + x402))
    result[1, 2, 2] = numpy.sum(x77 * (x11 * x273 * x76 - x408 * x52 - x410))
    result[1, 2, 3] = numpy.sum(-x206 * (x320 + x412 * x84))
    result[1, 2, 4] = numpy.sum(x417 * (2.0 * x11 * x280 * x76 - x415 * x84 - x416))
    result[1, 2, 5] = numpy.sum(-x152 * (x323 + x419 * x84))
    result[1, 3, 0] = numpy.sum(-x430 * (x379 * x75 + x429))
    result[1, 3, 1] = numpy.sum(-x145 * (x377 * x384 + x436))
    result[1, 3, 2] = numpy.sum(-x152 * (x385 * x91 + x438))
    result[1, 3, 3] = numpy.sum(x85 * (-x390 * x75 - x439 - x440 + x441))
    result[1, 3, 4] = numpy.sum(x152 * (-x391 * x75 - x434 - x442 + x443))
    result[1, 3, 5] = numpy.sum(-x166 * (x393 * x75 + x444))
    result[1, 4, 0] = numpy.sum(-x453 * (x377 * x395 + x452))
    result[1, 4, 1] = numpy.sum(-x77 * (x400 * x91 + x459))
    result[1, 4, 2] = numpy.sum(-x417 * (x377 * x408 + x460 + x471))
    result[1, 4, 3] = numpy.sum(-x310 * (x144 * x412 + x472 + x474))
    result[1, 4, 4] = numpy.sum(-x77 * (x415 * x91 + x475 + x477))
    result[1, 4, 5] = numpy.sum(-x152 * (x377 * x419 + x479))
    result[1, 5, 0] = numpy.sum(-x430 * (x395 * x480 + x486))
    result[1, 5, 1] = numpy.sum(-x145 * (x400 * x480 + x493))
    result[1, 5, 2] = numpy.sum(-x310 * (x167 * x408 + x498))
    result[1, 5, 3] = numpy.sum(-x90 * (x412 * x480 + x500))
    result[1, 5, 4] = numpy.sum(-x310 * (x167 * x415 + x502))
    result[1, 5, 5] = numpy.sum(-x85 * (x223 * x419 + x504))
    result[2, 0, 0] = numpy.sum(
        x85 * (-x190 + 2.0 * x198 * x51 - x200 - x373 * x505 * x51)
    )
    result[2, 0, 1] = numpy.sum(x206 * (x205 + x352 * x51 - x51 * (x194 * x51 + x351)))
    result[2, 0, 2] = numpy.sum(
        x145 * (-x208 + x221 - 2.0 * x354 * x84 - x508 * x51 * x84)
    )
    result[2, 0, 3] = numpy.sum(-x227 * (x182 * x51 + x188 + x51 * (x177 * x84 + x182)))
    result[2, 0, 4] = numpy.sum(
        -x206 * (x212 * x52 + x231 + x235 + x52 * (x215 * x84 + x229))
    )
    result[2, 0, 5] = numpy.sum(-x151 * (x236 + x368 * x51 + x51 * (x233 + x509 * x84)))
    result[2, 1, 0] = numpy.sum(x310 * (x198 * x75 + x301 - x373 * x510))
    result[2, 1, 1] = numpy.sum(x77 * (x352 * x75 * x8 - x402 - x511 * x52))
    result[2, 1, 2] = numpy.sum(-x77 * (x354 * x91 + x410 + x512 * x52))
    result[2, 1, 3] = numpy.sum(-x206 * (x182 * x275 + x319 + x513 * x84))
    result[2, 1, 4] = numpy.sum(x417 * (2.0 * x211 * x75 * x8 - x416 - x514 * x84))
    result[2, 1, 5] = numpy.sum(-x152 * (x322 + x368 * x75 + x515 * x84))
    result[2, 2, 0] = numpy.sum(x310 * (x346 - x380 * x517))
    result[2, 2, 1] = numpy.sum(x520 * (x352 * x76 - x518 * x52 - x519))
    result[2, 2, 2] = numpy.sum(-x77 * (x361 + x52 * x524))
    result[2, 2, 3] = numpy.sum(-x227 * x74 * (x364 + x51 * x525))
    result[2, 2, 4] = numpy.sum(-x520 * (x367 + x51 * x526))
    result[2, 2, 5] = numpy.sum(-x310 * (x371 + x51 * x529))
    result[2, 3, 0] = numpy.sum(-x430 * (x377 * x510 + x530))
    result[2, 3, 1] = numpy.sum(-x310 * (x511 * x91 + x531))
    result[2, 3, 2] = numpy.sum(-x145 * (x377 * x512 + x532))
    result[2, 3, 3] = numpy.sum(-x85 * (x144 * x513 + x474 + x533))
    result[2, 3, 4] = numpy.sum(-x310 * (x514 * x91 + x534))
    result[2, 3, 5] = numpy.sum(-x151 * (x377 * x515 + x535))
    result[2, 4, 0] = numpy.sum(-x453 * (x486 + x517 * x75))
    result[2, 4, 1] = numpy.sum(-x417 * (x144 * x518 + x493))
    result[2, 4, 2] = numpy.sum(-x77 * (x498 + x524 * x91))
    result[2, 4, 3] = numpy.sum(-x206 * (x275 * x525 + x500))
    result[2, 4, 4] = numpy.sum(-x77 * (x275 * x526 + x502))
    result[2, 4, 5] = numpy.sum(-x310 * (x504 + x529 * x75))
    result[2, 5, 0] = numpy.sum(-x430 * (x517 * x76 + x547))
    result[2, 5, 1] = numpy.sum(-x206 * (x167 * x518 + x549))
    result[2, 5, 2] = numpy.sum(-x145 * (x480 * x524 + x555))
    result[2, 5, 3] = numpy.sum(-x227 * (x525 * x76 + x556))
    result[2, 5, 4] = numpy.sum(x206 * (-x358 * x76 - x526 * x76 - x553 + x557))
    result[2, 5, 5] = numpy.sum(x85 * (-x529 * x76 - x558 - x559 + x560))
    result[3, 0, 0] = numpy.sum(
        0.5 * x79 * (x1 * x250 + x260 * x3 - 2.0 * x3 * x380 * x561 - 4.0 * x378 * x380)
    )
    result[3, 0, 1] = numpy.sum(x85 * (-x267 + x373 * x381 * x52 - 2.0 * x383 * x52))
    result[3, 0, 2] = numpy.sum(-x151 * (x250 * x52 + x386 + x52 * (x250 + x29 * x561)))
    result[3, 0, 3] = numpy.sum(
        -x79 * (x278 + x389 * x51 - x51 * (x138 - x388 + x51 * x562))
    )
    result[3, 0, 4] = numpy.sum(
        -x151 * (x265 * x51 + x392 - x51 * (x122 - x264 + x51 * x563))
    )
    result[3, 0, 5] = numpy.sum(
        -x284 * (x271 * x51 + x282 + x51 * (x22 * x239 - x270 + x561))
    )
    result[3, 1, 0] = numpy.sum(-x430 * (x429 + x565))
    result[3, 1, 1] = numpy.sum(x145 * (x373 * x566 - x436))
    result[3, 1, 2] = numpy.sum(-x152 * (x438 + x565))
    result[3, 1, 3] = numpy.sum(x85 * (-x439 - x440 + x441 + x52 * x568))
    result[3, 1, 4] = numpy.sum(x152 * (-x434 - x442 + x443 + x52 * x570))
    result[3, 1, 5] = numpy.sum(-x166 * (x444 - x51 * (x239 * x75 - x420 - x421 + x423)))
    result[3, 2, 0] = numpy.sum(-x430 * (x380 * x572 + x452))
    result[3, 2, 1] = numpy.sum(x310 * (x3 * x51 * x573 - x459))
    result[3, 2, 2] = numpy.sum(x145 * (x373 * x575 - x460 + x466 - x470))
    result[3, 2, 3] = numpy.sum(x85 * (-x472 + x51 * x577 + x578))
    result[3, 2, 4] = numpy.sum(x310 * (x314 - x475 - x476 + x52 * x581))
    result[3, 2, 5] = numpy.sum(-x151 * (x479 + x51 * x583))
    result[3, 3, 0] = numpy.sum(-x586 * x587)
    result[3, 3, 1] = numpy.sum(
        0.5 * x430 * (-4.0 * x426 - 2.0 * x432 * x91 + 2.0 * x566 * x91 + x589)
    )
    result[3, 3, 2] = numpy.sum(-x151 * x3 * x586)
    result[3, 3, 3] = numpy.sum(
        -0.5
        * x79
        * (
            2.0 * x277 * (4.0 * x1 * x425 - x589)
            + 2.0 * x433
            + 2.0 * x567 * x91
            - x568 * x75
        )
    )
    result[3, 3, 4] = numpy.sum(
        x151 * (-x277 * x588 + x35 * x424 + x570 * x91 + x590 * x91)
    )
    result[3, 3, 5] = numpy.sum(-x284 * x586)
    result[3, 4, 0] = numpy.sum(-x593 * (x572 * x75 + x591 + x592))
    result[3, 4, 1] = numpy.sum(
        0.5 * x453 * (-x432 * x76 + 2.0 * x573 * x75 + 2.0 * x596)
    )
    result[3, 4, 2] = numpy.sum(x453 * (-x437 + x575 * x91 + x597 - x598))
    result[3, 4, 3] = numpy.sum(x85 * (-x167 * x567 + x577 * x75 - x599 - x600))
    result[3, 4, 4] = numpy.sum(x145 * (x223 * x590 + x377 * x581 - x601 + x602))
    result[3, 4, 5] = numpy.sum(-x151 * (x583 * x75 + x598 + x604))
    result[3, 5, 0] = numpy.sum(-x587 * (x572 * x76 + x606))
    result[3, 5, 1] = numpy.sum(x430 * (x573 * x76 + x610))
    result[3, 5, 2] = numpy.sum(x430 * (x167 * (x223 * x239 + x464) - x613))
    result[3, 5, 3] = numpy.sum(x79 * (x577 * x76 + x615))
    result[3, 5, 4] = numpy.sum(0.5 * x85 * (x581 * x76 - 2.0 * x619))
    result[3, 5, 5] = numpy.sum(-x79 * (x222 * x583 + x622))
    result[4, 0, 0] = numpy.sum(
        x85 * (x1 * x294 + x3 * x300 - x373 * x394 - x373 * (x285 * x380 + x394))
    )
    result[4, 0, 1] = numpy.sum(-x310 * (x399 * x52 + x402 + x52 * (x373 * x397 + x399)))
    result[4, 0, 2] = numpy.sum(-x310 * (x407 * x52 + x410 + x52 * (x373 * x404 + x407)))
    result[4, 0, 3] = numpy.sum(-x90 * (x319 + x411 * x84 + x84 * (x411 + x51 * x623)))
    result[4, 0, 4] = numpy.sum(-x145 * (x414 * x84 + x416 + x84 * (x414 + x51 * x624)))
    result[4, 0, 5] = numpy.sum(-x151 * (x322 + x418 * x84 + x84 * (x418 + x51 * x625)))
    result[4, 1, 0] = numpy.sum(-x453 * (x380 * x626 + x530))
    result[4, 1, 1] = numpy.sum(x77 * (x380 * x627 - x531))
    result[4, 1, 2] = numpy.sum(-x417 * (x373 * x628 + x532))
    result[4, 1, 3] = numpy.sum(x310 * (x51 * x629 - x533 + x578))
    result[4, 1, 4] = numpy.sum(-x77 * (x52 * x630 + x534))
    result[4, 1, 5] = numpy.sum(-x152 * (x51 * x631 + x535))
    result[4, 2, 0] = numpy.sum(-x453 * (x380 * x632 + x486))
    result[4, 2, 1] = numpy.sum(-x417 * (x373 * x633 + x493))
    result[4, 2, 2] = numpy.sum(-x77 * (x380 * x634 + x498))
    result[4, 2, 3] = numpy.sum(-x206 * (x500 + x51 * x636))
    result[4, 2, 4] = numpy.sum(-x77 * (x502 + x52 * x638))
    result[4, 2, 5] = numpy.sum(-x310 * (x504 + x51 * x641))
    result[4, 3, 0] = numpy.sum(-x593 * (x445 * x75 + x592 + x626 * x75))
    result[4, 3, 1] = numpy.sum(x453 * (x457 * x75 + x596 + x627 * x75))
    result[4, 3, 2] = numpy.sum(-x453 * (x437 + x465 * x91 + x603 + x628 * x91))
    result[4, 3, 3] = numpy.sum(x85 * (x576 * x75 - x599 - x600 + x629 * x75))
    result[4, 3, 4] = numpy.sum(x145 * (-x377 * x616 - x377 * x630 - x601 + x602))
    result[4, 3, 5] = numpy.sum(-x151 * (x604 + x620 * x75 + x631 * x75))
    result[4, 4, 0] = numpy.sum(-x310 * x67 * (x606 + x632 * x75))
    result[4, 4, 1] = numpy.sum(0.5 * x642 * (2.0 * x610 - x633 * x75))
    result[4, 4, 2] = numpy.sum(-x642 * (x613 + x634 * x75))
    result[4, 4, 3] = numpy.sum(x310 * (-x275 * x636 + x615))
    result[4, 4, 4] = numpy.sum(-x77 * (x619 + x638 * x91))
    result[4, 4, 5] = numpy.sum(-x310 * (x622 + x641 * x75))
    result[4, 5, 0] = numpy.sum(-x593 * (x632 * x76 + x644))
    result[4, 5, 1] = numpy.sum(-x453 * (x167 * x633 + x646))
    result[4, 5, 2] = numpy.sum(x453 * (-x495 * x76 - x634 * x76 - x647 + x648))
    result[4, 5, 3] = numpy.sum(-x90 * (x636 * x76 + x649))
    result[4, 5, 4] = numpy.sum(-x145 * (x480 * x638 + x651))
    result[4, 5, 5] = numpy.sum(x85 * (-x641 * x76 - x652 - x653 + x654))
    result[5, 0, 0] = numpy.sum(
        0.5 * x79 * (x1 * x337 + x3 * x345 - 2.0 * x3 * x380 * x655 - 4.0 * x380 * x516)
    )
    result[5, 0, 1] = numpy.sum(-x90 * (x337 * x52 + x519 + x52 * (x29 * x655 + x337)))
    result[5, 0, 2] = numpy.sum(x85 * (x29 * x52 * x656 - x360 - 2.0 * x52 * x523))
    result[5, 0, 3] = numpy.sum(
        -x365 * (x349 * x51 + x363 + x51 * (x22 * x326 - x348 + x655))
    )
    result[5, 0, 4] = numpy.sum(-x90 * (x358 * x51 + x366 - x51 * (x196 - x357 + x656)))
    result[5, 0, 5] = numpy.sum(
        -x79 * (x370 + x51 * x528 - x51 * (x216 + x51 * x657 - x527))
    )
    result[5, 1, 0] = numpy.sum(-x430 * (x380 * x660 + x485 + x516 * x75))
    result[5, 1, 1] = numpy.sum(
        -x145 * (x144 * x337 + x373 * (-x1 * x325 + x141 * x658 + x141 * x661) + x492)
    )
    result[5, 1, 2] = numpy.sum(x310 * (x380 * x663 - x497 - x523 * x91))
    result[5, 1, 3] = numpy.sum(-x90 * (x275 * x349 + x499 + x51 * x664))
    result[5, 1, 4] = numpy.sum(-x310 * (x275 * (x11 * x349 + x350) + x501 + x52 * x665))
    result[5, 1, 5] = numpy.sum(x85 * (x314 - x503 + x51 * x666 - x528 * x75))
    result[5, 2, 0] = numpy.sum(-x430 * (x547 + x668))
    result[5, 2, 1] = numpy.sum(-x206 * (x549 + x668))
    result[5, 2, 2] = numpy.sum(-x145 * (x373 * x670 + x555))
    result[5, 2, 3] = numpy.sum(x227 * (x51 * x671 - x556))
    result[5, 2, 4] = numpy.sum(x206 * (-x11 * x545 - x358 * x76 + x52 * x669 + x557))
    result[5, 2, 5] = numpy.sum(x85 * (x52 * x673 - x558 - x559 + x560))
    result[5, 3, 0] = numpy.sum(-x587 * (x605 + x660 * x75 + x661 * x75))
    result[5, 3, 1] = numpy.sum(
        0.5
        * x430
        * (-x488 * x75 + 2.0 * x609 + 2.0 * x91 * (2.0 * x326 * x75 * x8 - x488))
    )
    result[5, 3, 2] = numpy.sum(x430 * (-x495 * x75 - x612 + x663 * x75))
    result[5, 3, 3] = numpy.sum(
        0.5 * x79 * (x1 * x488 - 2.0 * x275 * x635 - 2.0 * x275 * x664 + x614 * x8)
    )
    result[5, 3, 4] = numpy.sum(-x85 * (x618 + x637 * x91 + x665 * x91))
    result[5, 3, 5] = numpy.sum(x79 * (-x621 - x640 * x75 + x666 * x75))
    result[5, 4, 0] = numpy.sum(x593 * (-x644 + x674))
    result[5, 4, 1] = numpy.sum(x453 * (-x646 + x674 * x8))
    result[5, 4, 2] = numpy.sum(x453 * (-x11 * x643 - x495 * x76 + x648 + x669 * x91))
    result[5, 4, 3] = numpy.sum(-x90 * (x275 * x667 + x649))
    result[5, 4, 4] = numpy.sum(-x145 * (x144 * x670 + x651))
    result[5, 4, 5] = numpy.sum(x85 * (-x652 - x653 + x654 + x673 * x91))
    result[5, 5, 0] = numpy.sum(-x587 * x677)
    result[5, 5, 1] = numpy.sum(-x3 * x677 * x90)
    result[5, 5, 2] = numpy.sum(-x430 * x679)
    result[5, 5, 3] = numpy.sum(-x365 * x677)
    result[5, 5, 4] = numpy.sum(-x679 * x90)
    result[5, 5, 5] = numpy.sum(
        -0.5
        * x79
        * (
            2.0 * x167 * x672
            + 2.0 * x369 * (4.0 * x1 * x541 - x678)
            + 2.0 * x552
            - x673 * x76
        )
    )
    return result


def int3c2e3d_sph_223(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dd|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6, 10), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(4, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x2 * x20 * x23
    x25 = 2.0 * x19 * x24
    x26 = x18 * x25
    x27 = cx ** (-1.0)
    x28 = x14 ** (-0.5)
    x29 = boys(3, x17)
    x30 = 2.0 * x2 * x20 * x23 * x27 * x28 * x29 - x26
    x31 = x30 * x6
    x32 = -2.0 * x2 * x20 * x23 * x27 * x28 * x29 * x5 + x26 * x4
    x33 = -x32
    x34 = boys(5, x17)
    x35 = x25 * x34
    x36 = -2.0 * x18 * x2 * x20 * x23 * x27 * x28 * x5 + x35 * x4
    x37 = -x36
    x38 = x16 * x37
    x39 = x38 * x4
    x40 = x31 + x33 * x5 - x39
    x41 = 2.0 * x6
    x42 = x6 * (2.0 * x18 * x2 * x20 * x23 * x27 * x28 - x35)
    x43 = boys(6, x17)
    x44 = x25 * x43
    x45 = 2.0 * x2 * x20 * x23 * x27 * x28 * x34 * x5 - x4 * x44
    x46 = x16 * x45
    x47 = x37 * x5 - x4 * x46 + x42
    x48 = x16 * x47
    x49 = -x4 * x48 + x40 * x5 - x41 * (x32 + x38)
    x50 = x4 * x49
    x51 = x40 * x6
    x52 = 3.0 * x51
    x53 = x50 + x52
    x54 = x1 * x15
    x55 = x4 * x54
    x56 = x4 * x40
    x57 = x33 * x6
    x58 = 2.0 * x57
    x59 = x56 + x58
    x60 = 3.0 * x6
    x61 = x54 * x60
    x62 = x53 * x55 + x59 * x61
    x63 = x33 * x4
    x64 = x27 * x29 * x41
    x65 = x24 * x28 * x64
    x66 = x63 + x65
    x67 = x41 * x54
    x68 = x55 * x59 + x66 * x67
    x69 = x54 * (x55 * x62 + x61 * x68)
    x70 = x19 * x20 * x23 * x64
    x71 = x55 * x68 + x67 * (x4 * x70 + x55 * x66)
    x72 = x0 * x54
    x73 = -x30 * x6
    x74 = x6 * (2.0 * x2 * x20 * x23 * x27 * x28 * x34 - x44)
    x75 = x25 * boys(7, x17)
    x76 = x16 * x4
    x77 = (
        x49 * x5
        - x60 * (-x33 * x5 + x39 + x48 + x73)
        + x76
        * (
            x41 * (x36 + x46)
            - x47 * x5
            + x76
            * (
                x45 * x5
                + x74
                - x76 * (2.0 * x2 * x20 * x23 * x27 * x28 * x43 * x5 - x4 * x75)
            )
        )
    )
    x78 = x4 * x77
    x79 = x49 * x6
    x80 = 4.0 * x79
    x81 = x54 * x6
    x82 = 4.0 * x81
    x83 = da * db * dc
    x84 = 3.872983346207417 * x83
    x85 = 0.02222222222222222 * x84
    x86 = x54 * x9
    x87 = x86 * (x50 + x52)
    x88 = x86 * (x56 + x58)
    x89 = x54 * (x55 * x87 + x61 * x88)
    x90 = x70 * x9
    x91 = x55 * x88 + x67 * (x63 * x86 + x90)
    x92 = 1.732050807568877
    x93 = 0.1111111111111111 * x83 * x92
    x94 = x12 * x54
    x95 = x94 * (x50 + x52)
    x96 = x94 * (x56 + x58)
    x97 = x54 * (x55 * x95 + x61 * x96)
    x98 = x12 * x70
    x99 = x55 * x96 + x67 * (x63 * x94 + x98)
    x100 = x1**2 / x14**2
    x101 = x10 * x100
    x102 = x101 * x54 * (x50 + x52)
    x103 = x101 * (x56 + x58)
    x104 = x100 * x9
    x105 = x104 * x12
    x106 = x105 * x54 * (x50 + x52)
    x107 = x105 * (x56 + x58)
    x108 = 0.3333333333333333 * x83
    x109 = x100 * x13
    x110 = x109 * x54 * (x50 + x52)
    x111 = x109 * (x56 + x58)
    x112 = x1**3 / x14**3
    x113 = x112 * x9**3
    x114 = x113 * x49
    x115 = x0 * x40
    x116 = x10 * x112
    x117 = x116 * x12
    x118 = x117 * x49
    x119 = x112 * x13
    x120 = x119 * x9
    x121 = x120 * x49
    x122 = x112 * x12**3
    x123 = x122 * x49
    x124 = -x8 - A[1]
    x125 = -2.0 * x124 * x18 * x2 * x20 * x23 * x27 * x28 + x35 * x9
    x126 = -x125
    x127 = x126 * x16
    x128 = -2.0 * x124 * x2 * x20 * x23 * x27 * x28 * x29 + x26 * x9
    x129 = -x6 * (x127 + x128)
    x130 = -x128
    x131 = x127 * x4 - x130 * x5
    x132 = -x131
    x133 = 2.0 * x124 * x2 * x20 * x23 * x27 * x28 * x34 - x44 * x9
    x134 = x133 * x16
    x135 = x126 * x5 - x134 * x4
    x136 = x135 * x16
    x137 = x129 + x132 * x5 - x136 * x4
    x138 = x137 * x4
    x139 = x132 * x6
    x140 = 2.0 * x139
    x141 = x138 + x140
    x142 = x130 * x6
    x143 = x132 * x4
    x144 = x142 + x143
    x145 = x141 * x55 + x144 * x67
    x146 = x55 * (x142 + x144)
    x147 = x54 * (x145 * x55 + x146 * x67)
    x148 = x21 * x54
    x149 = x147 + x148 * x71
    x150 = -x6 * (x125 + x134)
    x151 = 2.0 * x124 * x2 * x20 * x23 * x27 * x28 * x43 - x75 * x9
    x152 = (
        x137 * x5
        - x41 * (x131 + x136)
        - x76 * (x135 * x5 + x150 - x76 * (x133 * x5 - x151 * x76))
    )
    x153 = x152 * x4
    x154 = x137 * x6
    x155 = 3.0 * x154
    x156 = x54 * (x145 * x61 + x55 * (x141 * x61 + x55 * (x153 + x155)))
    x157 = 0.149071198499986 * x83
    x158 = x137 * x9
    x159 = x158 + x51
    x160 = x132 * x9
    x161 = x160 + x57
    x162 = x161 * x67
    x163 = x159 * x55 + x162
    x164 = x130 * x9
    x165 = x164 + x65
    x166 = x161 * x55 + x165 * x81
    x167 = x54 * (x163 * x55 + x166 * x67)
    x168 = x148 * x91 + x167
    x169 = x152 * x9
    x170 = x169 + x79
    x171 = x54 * (x163 * x61 + x55 * (x159 * x61 + x170 * x55))
    x172 = x140 * x94
    x173 = x138 * x94 + x172
    x174 = x142 * x94
    x175 = x143 * x94 + x174
    x176 = x54 * (x173 * x55 + x175 * x67)
    x177 = x148 * x99 + x176
    x178 = x54 * (x173 * x61 + x55 * x94 * (x153 + x155))
    x179 = x86 * (x159 + x51)
    x180 = x86 * (x161 + x57)
    x181 = x180 * x67
    x182 = x54 * (x179 * x55 + x181)
    x183 = x103 * x148 + x182
    x184 = x86 * (x170 + x79)
    x185 = x54 * (x179 * x61 + x184 * x55)
    x186 = x51 * x94
    x187 = x158 * x94 + x186
    x188 = x57 * x94
    x189 = x160 * x94 + x188
    x190 = x189 * x67
    x191 = x54 * (x187 * x55 + x190)
    x192 = x107 * x148 + x191
    x193 = x79 * x94
    x194 = x169 * x94 + x193
    x195 = x54 * (x187 * x61 + x194 * x55)
    x196 = x108 * x92
    x197 = x109 * x140
    x198 = x54 * (x109 * x138 + x197)
    x199 = x111 * x148 + x198
    x200 = x109 * x54 * (x153 + x155)
    x201 = x54 * (x101 * x51 + x179 * x86)
    x202 = x21 * x40
    x203 = x113 * x202 + x201
    x204 = x54 * (x101 * x79 + x184 * x86)
    x205 = x54 * (x105 * x51 + x187 * x86)
    x206 = x117 * x202 + x205
    x207 = x54 * (x105 * x79 + x194 * x86)
    x208 = x109 * x51
    x209 = x54 * (x109 * x158 + x208)
    x210 = x120 * x202 + x209
    x211 = x109 * x79
    x212 = x54 * (x109 * x169 + x211)
    x213 = x122 * x137
    x214 = x122 * x202 + x213
    x215 = x122 * x152
    x216 = -x11 - A[2]
    x217 = x12 * x35 - 2.0 * x18 * x2 * x20 * x216 * x23 * x27 * x28
    x218 = -x217
    x219 = x16 * x218
    x220 = x12 * x26 - 2.0 * x2 * x20 * x216 * x23 * x27 * x28 * x29
    x221 = -x6 * (x219 + x220)
    x222 = -x220
    x223 = x219 * x4 - x222 * x5
    x224 = -x223
    x225 = -x12 * x44 + 2.0 * x2 * x20 * x216 * x23 * x27 * x28 * x34
    x226 = x16 * x225
    x227 = x218 * x5 - x226 * x4
    x228 = x16 * x227
    x229 = x221 + x224 * x5 - x228 * x4
    x230 = x229 * x4
    x231 = x224 * x6
    x232 = 2.0 * x231
    x233 = x230 + x232
    x234 = x222 * x6
    x235 = x224 * x4
    x236 = x234 + x235
    x237 = x233 * x55 + x236 * x67
    x238 = x55 * (x234 + x236)
    x239 = x54 * (x237 * x55 + x238 * x67)
    x240 = x22 * x54
    x241 = x239 + x240 * x71
    x242 = -x6 * (x217 + x226)
    x243 = -x12 * x75 + 2.0 * x2 * x20 * x216 * x23 * x27 * x28 * x43
    x244 = (
        x229 * x5
        - x41 * (x223 + x228)
        - x76 * (x227 * x5 + x242 - x76 * (x225 * x5 - x243 * x76))
    )
    x245 = x244 * x4
    x246 = x229 * x6
    x247 = 3.0 * x246
    x248 = x54 * (x237 * x61 + x55 * (x233 * x61 + x55 * (x245 + x247)))
    x249 = x86 * (x230 + x232)
    x250 = x234 * x86
    x251 = x235 * x86 + x250
    x252 = x54 * (x249 * x55 + x251 * x67)
    x253 = x240 * x91 + x252
    x254 = x54 * (x249 * x61 + x55 * x86 * (x245 + x247))
    x255 = x12 * x229 + x51
    x256 = x12 * x224 + x57
    x257 = x256 * x67
    x258 = x255 * x55 + x257
    x259 = x12 * x222 + x65
    x260 = x259 * x81
    x261 = x256 * x55 + x260
    x262 = x54 * (x258 * x55 + x261 * x67)
    x263 = x240 * x99 + x262
    x264 = x12 * x244 + x79
    x265 = x54 * (x258 * x61 + x55 * (x255 * x61 + x264 * x55))
    x266 = x101 * x54 * (x230 + x232)
    x267 = x103 * x240 + x266
    x268 = x101 * x54 * (x245 + x247)
    x269 = x104 * x4
    x270 = x104 * x41
    x271 = x54 * (x255 * x269 + x256 * x270)
    x272 = x107 * x240 + x271
    x273 = x54 * (x104 * x255 * x60 + x264 * x269)
    x274 = x186 + x255 * x94
    x275 = x188 + x256 * x94
    x276 = x275 * x67
    x277 = x54 * (x274 * x55 + x276)
    x278 = x111 * x240 + x277
    x279 = x193 + x264 * x94
    x280 = x54 * (x274 * x61 + x279 * x55)
    x281 = x113 * x229
    x282 = x22 * x40
    x283 = x113 * x282 + x281
    x284 = x113 * x244
    x285 = x116 * x255
    x286 = x117 * x282 + x285
    x287 = x116 * x264
    x288 = x104 * x274
    x289 = x120 * x282 + x288
    x290 = x104 * x279
    x291 = x54 * (x208 + x274 * x94)
    x292 = x122 * x282 + x291
    x293 = x54 * (x211 + x279 * x94)
    x294 = x124 * x126 - x134 * x9 + x42
    x295 = x16 * x294
    x296 = x127 * x9
    x297 = x6 * (x124 * x130 - x295 - x296 - x73)
    x298 = x124 * x130 - x296 + x31
    x299 = -x295 * x4 + x298 * x5
    x300 = x16 * x9
    x301 = x124 * x133 - x151 * x300 + x74
    x302 = x297 + x299 * x5 - x76 * (x294 * x5 - x301 * x76)
    x303 = x302 * x4
    x304 = x299 * x6
    x305 = 2.0 * x304
    x306 = x298 * x6
    x307 = x299 * x4
    x308 = x306 + x307
    x309 = x55 * (x306 + x308)
    x310 = x54 * (x309 * x67 + x55 * (x308 * x67 + x55 * (x303 + x305)))
    x311 = x147 * x21 + x310
    x312 = x302 * x9
    x313 = 2.0 * x154
    x314 = x312 + x313
    x315 = x299 * x9
    x316 = x140 + x315
    x317 = x298 * x9
    x318 = 2.0 * x142
    x319 = x317 + x318
    x320 = x316 * x55 + x319 * x81
    x321 = x54 * (x320 * x67 + x55 * (x314 * x55 + x316 * x67))
    x322 = x167 * x21 + x321
    x323 = x306 * x94
    x324 = x307 * x94 + x323
    x325 = x54 * (x324 * x67 + x55 * x94 * (x303 + x305))
    x326 = x176 * x21 + x325
    x327 = x159 * x67 + x314 * x86
    x328 = x162 + x316 * x86
    x329 = x54 * (x327 * x55 + x328 * x67)
    x330 = x182 * x21 + x329
    x331 = x94 * (x312 + x313)
    x332 = x172 + x315 * x94
    x333 = x54 * (x331 * x55 + x332 * x67)
    x334 = x191 * x21 + x333
    x335 = x109 * x54 * (x303 + x305)
    x336 = x198 * x21 + x335
    x337 = x54 * (x179 * x67 + x327 * x86)
    x338 = x201 * x21 + x337
    x339 = x54 * (x187 * x67 + x331 * x86)
    x340 = x205 * x21 + x339
    x341 = x109 * x54 * (x312 + x313)
    x342 = x209 * x21 + x341
    x343 = x122 * x302
    x344 = x21 * x213 + x343
    x345 = x124 * x218 - x226 * x9
    x346 = x16 * x345
    x347 = -x124 * x222 + x219 * x9
    x348 = -x6 * (x346 + x347)
    x349 = -x347
    x350 = -x346 * x4 + x349 * x5
    x351 = x124 * x225 - x243 * x300
    x352 = x348 + x350 * x5 - x76 * (x345 * x5 - x351 * x76)
    x353 = x350 * x41
    x354 = x349 * x6
    x355 = x350 * x4 + x354
    x356 = x55 * (x354 + x355)
    x357 = x54 * (x356 * x67 + x55 * (x355 * x67 + x55 * (x352 * x4 + x353)))
    x358 = x147 * x22 + x357
    x359 = x246 + x352 * x9
    x360 = x231 + x350 * x9
    x361 = x360 * x67
    x362 = x234 + x349 * x9
    x363 = x360 * x55 + x362 * x81
    x364 = x54 * (x363 * x67 + x55 * (x359 * x55 + x361))
    x365 = x167 * x22 + x364
    x366 = x12 * x352 + x154
    x367 = x12 * x350 + x139
    x368 = x367 * x67
    x369 = x12 * x349 + x142
    x370 = x367 * x55 + x369 * x81
    x371 = x54 * (x370 * x67 + x55 * (x366 * x55 + x368))
    x372 = x176 * x22 + x371
    x373 = x86 * (x246 + x359)
    x374 = x86 * (x231 + x360)
    x375 = x374 * x67
    x376 = x54 * (x373 * x55 + x375)
    x377 = x182 * x22 + x376
    x378 = x255 * x81 + x366 * x86
    x379 = x256 * x81 + x367 * x86
    x380 = x379 * x67
    x381 = x54 * (x378 * x55 + x380)
    x382 = x191 * x22 + x381
    x383 = x94 * (x154 + x366)
    x384 = x94 * (x139 + x367)
    x385 = x384 * x67
    x386 = x54 * (x383 * x55 + x385)
    x387 = x198 * x22 + x386
    x388 = x54 * (x101 * x246 + x373 * x86)
    x389 = x201 * x22 + x388
    x390 = x104 * x6
    x391 = x54 * (x255 * x390 + x378 * x86)
    x392 = x205 * x22 + x391
    x393 = x54 * (x274 * x81 + x383 * x86)
    x394 = x209 * x22 + x393
    x395 = x54 * (x109 * x154 + x383 * x94)
    x396 = x213 * x22 + x395
    x397 = -x12 * x226 + x216 * x218 + x42
    x398 = x16 * x397
    x399 = x12 * x219
    x400 = x6 * (x216 * x222 - x398 - x399 - x73)
    x401 = x216 * x222 + x31 - x399
    x402 = -x398 * x4 + x401 * x5
    x403 = x12 * x16
    x404 = x216 * x225 - x243 * x403 + x74
    x405 = x400 + x402 * x5 - x76 * (x397 * x5 - x404 * x76)
    x406 = x4 * x405
    x407 = x402 * x6
    x408 = 2.0 * x407
    x409 = x401 * x6
    x410 = x4 * x402
    x411 = x409 + x410
    x412 = x55 * (x409 + x411)
    x413 = x54 * (x412 * x67 + x55 * (x411 * x67 + x55 * (x406 + x408)))
    x414 = x22 * x239 + x413
    x415 = x409 * x86
    x416 = x410 * x86 + x415
    x417 = x54 * (x416 * x67 + x55 * x86 * (x406 + x408))
    x418 = x22 * x252 + x417
    x419 = x12 * x405 + 2.0 * x246
    x420 = x12 * x402 + x232
    x421 = x12 * x401 + 2.0 * x234
    x422 = x421 * x81
    x423 = x420 * x55 + x422
    x424 = x54 * (x423 * x67 + x55 * (x419 * x55 + x420 * x67))
    x425 = x22 * x262 + x424
    x426 = x101 * x54 * (x406 + x408)
    x427 = x22 * x266 + x426
    x428 = x54 * (x269 * x419 + x270 * x420)
    x429 = x22 * x271 + x428
    x430 = x255 * x67 + x419 * x94
    x431 = x257 + x420 * x94
    x432 = x54 * (x430 * x55 + x431 * x67)
    x433 = x22 * x277 + x432
    x434 = x113 * x405
    x435 = x22 * x281 + x434
    x436 = x116 * x419
    x437 = x22 * x285 + x436
    x438 = x104 * x430
    x439 = x22 * x288 + x438
    x440 = x54 * (x274 * x67 + x430 * x94)
    x441 = x22 * x291 + x440
    x442 = x100 * x7
    x443 = x142 * x442 + x146 * x55
    x444 = x100 * x4
    x445 = x444 * x6
    x446 = x165 * x445 + x166 * x55
    x447 = x12 * x444
    x448 = x142 * x447 + x175 * x55
    x449 = x165 * x86 + x90
    x450 = x180 * x55 + x449 * x81
    x451 = x164 * x94 + x98
    x452 = x189 * x55 + x451 * x81
    x453 = x109 * x142
    x454 = x109 * x143 + x453
    x455 = x101 * x57 + x180 * x86
    x456 = x105 * x57 + x189 * x86
    x457 = x109 * x57
    x458 = x109 * x160 + x457
    x459 = x122 * x132
    x460 = x54 * (x306 * x442 + x309 * x55)
    x461 = x148 * x443 + x460
    x462 = 0.06666666666666667 * x84
    x463 = x54 * (x319 * x445 + x320 * x55)
    x464 = x148 * x446 + x463
    x465 = x54 * (x306 * x447 + x324 * x55)
    x466 = x148 * x448 + x465
    x467 = x165 * x67 + x319 * x86
    x468 = x54 * (x328 * x55 + x467 * x81)
    x469 = x148 * x450 + x468
    x470 = x94 * (x317 + x318)
    x471 = x54 * (x332 * x55 + x470 * x81)
    x472 = x148 * x452 + x471
    x473 = x109 * x306
    x474 = x54 * (x109 * x307 + x473)
    x475 = x148 * x454 + x474
    x476 = x54 * (x181 + x328 * x86)
    x477 = x148 * x455 + x476
    x478 = x54 * (x190 + x332 * x86)
    x479 = x148 * x456 + x478
    x480 = x54 * (x109 * x315 + x197)
    x481 = x148 * x458 + x480
    x482 = x122 * x299
    x483 = x21 * x459 + x482
    x484 = x54 * (x354 * x442 + x356 * x55)
    x485 = x240 * x443 + x484
    x486 = x54 * (x362 * x445 + x363 * x55)
    x487 = x240 * x446 + x486
    x488 = x54 * (x369 * x445 + x370 * x55)
    x489 = x240 * x448 + x488
    x490 = x250 + x362 * x86
    x491 = x54 * (x374 * x55 + x490 * x81)
    x492 = x240 * x450 + x491
    x493 = x260 + x369 * x86
    x494 = x54 * (x379 * x55 + x493 * x81)
    x495 = x240 * x452 + x494
    x496 = x174 + x369 * x94
    x497 = x54 * (x384 * x55 + x496 * x81)
    x498 = x240 * x454 + x497
    x499 = x54 * (x101 * x231 + x374 * x86)
    x500 = x240 * x455 + x499
    x501 = x54 * (x256 * x390 + x379 * x86)
    x502 = x240 * x456 + x501
    x503 = x54 * (x275 * x81 + x384 * x86)
    x504 = x240 * x458 + x503
    x505 = x54 * (x109 * x139 + x384 * x94)
    x506 = x22 * x459 + x505
    x507 = x124 * x298 + 2.0 * x129 - x295 * x9
    x508 = x507 * x6
    x509 = x124 * x294 + 2.0 * x150 - x300 * x301
    x510 = x5 * x507 - x509 * x76
    x511 = x4 * x510
    x512 = x21 * x460 + x54 * (x442 * x508 + x55**2 * (2.0 * x508 + x511))
    x513 = x507 * x9
    x514 = 3.0 * x306
    x515 = x513 + x514
    x516 = x515 * x81
    x517 = x510 * x9
    x518 = 3.0 * x304
    x519 = x517 + x518
    x520 = x21 * x463 + x54 * (x445 * x515 + x55 * (x516 + x519 * x55))
    x521 = x508 * x94
    x522 = x21 * x465 + x54 * (x447 * x508 + x55 * (x511 * x94 + x521))
    x523 = x319 * x61 + x515 * x86
    x524 = x523 * x81
    x525 = x316 * x61 + x519 * x86
    x526 = x21 * x468 + x54 * (x524 + x525 * x55)
    x527 = x94 * (x513 + x514)
    x528 = x527 * x81
    x529 = x94 * (x517 + x518)
    x530 = x21 * x471 + x54 * (x528 + x529 * x55)
    x531 = x109 * x508
    x532 = x21 * x474 + x54 * (x109 * x511 + x531)
    x533 = x21 * x476 + x54 * (x328 * x61 + x525 * x86)
    x534 = x21 * x478 + x54 * (x332 * x61 + x529 * x86)
    x535 = x109 * x54 * (x517 + x518) + x21 * x480
    x536 = x122 * x510 + x21 * x482
    x537 = x124 * x349 + x221 - x346 * x9
    x538 = x537 * x6
    x539 = x124 * x345 + x242 - x300 * x351
    x540 = x5 * x537 - x539 * x76
    x541 = x54 * (x442 * x538 + x55**2 * (x4 * x540 + 2.0 * x538))
    x542 = x22 * x460 + x541
    x543 = 2.0 * x354
    x544 = x537 * x9 + x543
    x545 = x353 + x540 * x9
    x546 = x54 * (x445 * x544 + x55 * (x544 * x81 + x545 * x55))
    x547 = x22 * x463 + x546
    x548 = x12 * x537 + x306
    x549 = x12 * x540 + x304
    x550 = x54 * (x445 * x548 + x55 * (x548 * x81 + x549 * x55))
    x551 = x22 * x465 + x550
    x552 = x362 * x67 + x544 * x86
    x553 = x361 + x545 * x86
    x554 = x54 * (x55 * x553 + x552 * x81)
    x555 = x22 * x468 + x554
    x556 = x369 * x67
    x557 = x548 * x86 + x556
    x558 = x368 + x549 * x86
    x559 = x54 * (x55 * x558 + x557 * x81)
    x560 = x22 * x471 + x559
    x561 = x323 + x548 * x94
    x562 = x94 * (x304 + x549)
    x563 = x54 * (x55 * x562 + x561 * x81)
    x564 = x22 * x474 + x563
    x565 = x54 * (x375 + x553 * x86)
    x566 = x22 * x476 + x565
    x567 = x54 * (x380 + x558 * x86)
    x568 = x22 * x478 + x567
    x569 = x54 * (x385 + x562 * x86)
    x570 = x22 * x480 + x569
    x571 = x54 * (x109 * x304 + x562 * x94)
    x572 = x22 * x482 + x571
    x573 = x124 * x401 - x398 * x9
    x574 = x573 * x6
    x575 = x124 * x397 - x300 * x404
    x576 = x5 * x573 - x575 * x76
    x577 = x54 * (x442 * x574 + x55**2 * (x4 * x576 + 2.0 * x574))
    x578 = x22 * x484 + x577
    x579 = x409 + x573 * x9
    x580 = x407 + x576 * x9
    x581 = x54 * (x445 * x579 + x55 * (x55 * x580 + x579 * x81))
    x582 = x22 * x486 + x581
    x583 = x12 * x573 + x543
    x584 = x12 * x576 + x353
    x585 = x54 * (x445 * x583 + x55 * (x55 * x584 + x583 * x81))
    x586 = x22 * x488 + x585
    x587 = x415 + x579 * x86
    x588 = x86 * (x407 + x580)
    x589 = x54 * (x55 * x588 + x587 * x81)
    x590 = x22 * x491 + x589
    x591 = x422 + x583 * x86
    x592 = x420 * x81 + x584 * x86
    x593 = x54 * (x55 * x592 + x591 * x81)
    x594 = x22 * x494 + x593
    x595 = x556 + x583 * x94
    x596 = x368 + x584 * x94
    x597 = x54 * (x55 * x596 + x595 * x81)
    x598 = x22 * x497 + x597
    x599 = x54 * (x101 * x407 + x588 * x86)
    x600 = x22 * x499 + x599
    x601 = x54 * (x390 * x420 + x592 * x86)
    x602 = x22 * x501 + x601
    x603 = x54 * (x431 * x81 + x596 * x86)
    x604 = x22 * x503 + x603
    x605 = x54 * (x385 + x596 * x94)
    x606 = x22 * x505 + x605
    x607 = x234 * x442 + x238 * x55
    x608 = x234 * x269 + x251 * x55
    x609 = x259 * x445 + x261 * x55
    x610 = x101 * x234
    x611 = x101 * x235 + x610
    x612 = x259 * x390
    x613 = x256 * x269 + x612
    x614 = x259 * x94 + x98
    x615 = x614 * x81
    x616 = x275 * x55 + x615
    x617 = x113 * x224
    x618 = x116 * x256
    x619 = x104 * x275
    x620 = x275 * x94 + x457
    x621 = x148 * x607 + x484
    x622 = x148 * x608 + x486
    x623 = x148 * x609 + x488
    x624 = x148 * x611 + x491
    x625 = x148 * x613 + x494
    x626 = x148 * x616 + x497
    x627 = x21 * x617 + x499
    x628 = x21 * x618 + x501
    x629 = x21 * x619 + x503
    x630 = x148 * x620 + x505
    x631 = x54 * (x409 * x442 + x412 * x55)
    x632 = x240 * x607 + x631
    x633 = x54 * (x269 * x409 + x416 * x55)
    x634 = x240 * x608 + x633
    x635 = x54 * (x421 * x445 + x423 * x55)
    x636 = x240 * x609 + x635
    x637 = x101 * x409
    x638 = x54 * (x101 * x410 + x637)
    x639 = x240 * x611 + x638
    x640 = x390 * x421
    x641 = x54 * (x269 * x420 + x640)
    x642 = x240 * x613 + x641
    x643 = x259 * x67 + x421 * x94
    x644 = x643 * x81
    x645 = x54 * (x431 * x55 + x644)
    x646 = x240 * x616 + x645
    x647 = x113 * x402
    x648 = x22 * x617 + x647
    x649 = x116 * x420
    x650 = x22 * x618 + x649
    x651 = x104 * x431
    x652 = x22 * x619 + x651
    x653 = x54 * (x276 + x431 * x94)
    x654 = x240 * x620 + x653
    x655 = x21 * x484 + x541
    x656 = x21 * x486 + x546
    x657 = x21 * x488 + x550
    x658 = x21 * x491 + x554
    x659 = x21 * x494 + x559
    x660 = x21 * x497 + x563
    x661 = x21 * x499 + x565
    x662 = x21 * x501 + x567
    x663 = x21 * x503 + x569
    x664 = x21 * x505 + x571
    x665 = -x12 * x398 + x216 * x401 + 2.0 * x221
    x666 = x6 * x665
    x667 = x216 * x397 + 2.0 * x242 - x403 * x404
    x668 = x5 * x665 - x667 * x76
    x669 = x4 * x668
    x670 = x22 * x631 + x54 * (x442 * x666 + x55**2 * (2.0 * x666 + x669))
    x671 = x666 * x86
    x672 = x22 * x633 + x54 * (x269 * x666 + x55 * (x669 * x86 + x671))
    x673 = x12 * x665 + 3.0 * x409
    x674 = x673 * x81
    x675 = x12 * x668 + 3.0 * x407
    x676 = x22 * x635 + x54 * (x445 * x673 + x55 * (x55 * x675 + x674))
    x677 = x101 * x666
    x678 = x22 * x638 + x54 * (x101 * x669 + x677)
    x679 = x390 * x673
    x680 = x22 * x641 + x54 * (x269 * x675 + x679)
    x681 = x421 * x61 + x673 * x94
    x682 = x681 * x81
    x683 = x420 * x61 + x675 * x94
    x684 = x22 * x645 + x54 * (x55 * x683 + x682)
    x685 = x113 * x668 + x22 * x647
    x686 = x116 * x675 + x22 * x649
    x687 = x104 * x683 + x22 * x651
    x688 = x22 * x653 + x54 * (x431 * x61 + x683 * x94)
    x689 = x112 * x4**3
    x690 = x0 * x298
    x691 = x112 * x7
    x692 = x319 * x691
    x693 = x12 * x691
    x694 = x0 * x444
    x695 = x119 * x4
    x696 = x449 * x67 + x467 * x86
    x697 = x451 * x67 + x470 * x86
    x698 = x109 * (x317 + x318)
    x699 = x507 * x689
    x700 = x21 * x298
    x701 = x689 * x700 + x699
    x702 = x515 * x691
    x703 = x21 * x692 + x702
    x704 = x507 * x693
    x705 = x693 * x700 + x704
    x706 = x444 * x523
    x707 = x21 * x444
    x708 = x467 * x707 + x706
    x709 = x444 * x527
    x710 = x470 * x707 + x709
    x711 = x507 * x695
    x712 = x695 * x700 + x711
    x713 = x54 * (x467 * x61 + x523 * x86)
    x714 = x148 * x696 + x713
    x715 = x54 * (x470 * x61 + x527 * x86)
    x716 = x148 * x697 + x715
    x717 = x109 * x54 * (x513 + x514)
    x718 = x148 * x698 + x717
    x719 = x122 * x507
    x720 = x122 * x700 + x719
    x721 = x537 * x689
    x722 = x22 * x298
    x723 = x689 * x722 + x721
    x724 = x544 * x691
    x725 = x22 * x692 + x724
    x726 = x548 * x691
    x727 = x693 * x722 + x726
    x728 = x444 * x552
    x729 = x22 * x444
    x730 = x467 * x729 + x728
    x731 = x444 * x557
    x732 = x470 * x729 + x731
    x733 = x444 * x561
    x734 = x695 * x722 + x733
    x735 = x54 * (x490 * x67 + x552 * x86)
    x736 = x240 * x696 + x735
    x737 = x54 * (x493 * x67 + x557 * x86)
    x738 = x240 * x697 + x737
    x739 = x496 * x67
    x740 = x54 * (x561 * x86 + x739)
    x741 = x240 * x698 + x740
    x742 = x54 * (x473 + x561 * x94)
    x743 = x122 * x722 + x742
    x744 = x124 * x507 + 3.0 * x297 - x300 * x509
    x745 = x744 * x9
    x746 = 4.0 * x508
    x747 = x745 + x746
    x748 = 4.0 * x516 + x747 * x86
    x749 = x94 * (x745 + x746)
    x750 = x124 * x537 - x300 * x539 + 2.0 * x348
    x751 = x689 * x750
    x752 = 3.0 * x538 + x750 * x9
    x753 = x691 * x752
    x754 = x12 * x750 + x508
    x755 = x691 * x754
    x756 = x544 * x61 + x752 * x86
    x757 = x444 * x756
    x758 = x548 * x61 + x754 * x86
    x759 = x444 * x758
    x760 = x521 + x754 * x94
    x761 = x444 * x760
    x762 = x54 * (x552 * x61 + x756 * x86)
    x763 = x54 * (x557 * x61 + x758 * x86)
    x764 = x54 * (x561 * x61 + x760 * x86)
    x765 = x54 * (x531 + x760 * x94)
    x766 = x124 * x573 - x300 * x575 + x400
    x767 = x689 * x766
    x768 = x22 * x721 + x767
    x769 = 2.0 * x574 + x766 * x9
    x770 = x691 * x769
    x771 = x22 * x724 + x770
    x772 = x12 * x766 + 2.0 * x538
    x773 = x691 * x772
    x774 = x22 * x726 + x773
    x775 = x579 * x67 + x769 * x86
    x776 = x444 * x775
    x777 = x22 * x728 + x776
    x778 = x583 * x67 + x772 * x86
    x779 = x444 * x778
    x780 = x22 * x731 + x779
    x781 = x548 * x67 + x772 * x94
    x782 = x444 * x781
    x783 = x22 * x733 + x782
    x784 = x54 * (x587 * x67 + x775 * x86)
    x785 = x22 * x735 + x784
    x786 = x54 * (x591 * x67 + x778 * x86)
    x787 = x22 * x737 + x786
    x788 = x54 * (x595 * x67 + x781 * x86)
    x789 = x22 * x740 + x788
    x790 = x54 * (x561 * x67 + x781 * x94)
    x791 = x22 * x742 + x790
    x792 = x349 * x689
    x793 = x0 * x691
    x794 = x490 * x86 + x610
    x795 = x493 * x86 + x612
    x796 = x496 * x86 + x615
    x797 = x453 + x496 * x94
    x798 = x21 * x792 + x721
    x799 = x21 * x691
    x800 = x362 * x799 + x724
    x801 = x369 * x799 + x726
    x802 = x490 * x707 + x728
    x803 = x493 * x707 + x731
    x804 = x496 * x707 + x733
    x805 = x148 * x794 + x735
    x806 = x148 * x795 + x737
    x807 = x148 * x796 + x740
    x808 = x148 * x797 + x742
    x809 = x573 * x689
    x810 = x22 * x792 + x809
    x811 = x579 * x691
    x812 = x22 * x691
    x813 = x362 * x812 + x811
    x814 = x583 * x691
    x815 = x369 * x812 + x814
    x816 = x444 * x587
    x817 = x490 * x729 + x816
    x818 = x444 * x591
    x819 = x493 * x729 + x818
    x820 = x444 * x595
    x821 = x496 * x729 + x820
    x822 = x54 * (x587 * x86 + x637)
    x823 = x240 * x794 + x822
    x824 = x54 * (x591 * x86 + x640)
    x825 = x240 * x795 + x824
    x826 = x54 * (x595 * x86 + x644)
    x827 = x240 * x796 + x826
    x828 = x54 * (x595 * x94 + x739)
    x829 = x240 * x797 + x828
    x830 = x124 * x665 - x300 * x667
    x831 = x22 * x809 + x689 * x830
    x832 = x666 + x830 * x9
    x833 = x22 * x811 + x691 * x832
    x834 = x12 * x830 + 3.0 * x574
    x835 = x22 * x814 + x691 * x834
    x836 = x671 + x832 * x86
    x837 = x22 * x816 + x444 * x836
    x838 = x674 + x834 * x86
    x839 = x22 * x818 + x444 * x838
    x840 = x583 * x61 + x834 * x94
    x841 = x22 * x820 + x444 * x840
    x842 = x22 * x822 + x54 * (x677 + x836 * x86)
    x843 = x22 * x824 + x54 * (x679 + x838 * x86)
    x844 = x22 * x826 + x54 * (x682 + x840 * x86)
    x845 = x22 * x828 + x54 * (x595 * x61 + x840 * x94)
    x846 = x0 * x401
    x847 = x401 * x9
    x848 = x116 * x4
    x849 = x112 * x4 * x9
    x850 = x421 * x849
    x851 = x116 * x421
    x852 = x104 * x643
    x853 = x614 * x67 + x643 * x94
    x854 = x21 * x401
    x855 = x689 * x854 + x809
    x856 = x799 * x847 + x811
    x857 = x421 * x799 + x814
    x858 = x816 + x848 * x854
    x859 = x21 * x850 + x818
    x860 = x643 * x707 + x820
    x861 = x113 * x854 + x822
    x862 = x21 * x851 + x824
    x863 = x21 * x852 + x826
    x864 = x148 * x853 + x828
    x865 = x665 * x689
    x866 = x22 * x401
    x867 = x689 * x866 + x865
    x868 = x691 * x9
    x869 = x665 * x868 + x812 * x847
    x870 = x673 * x691
    x871 = x421 * x812 + x870
    x872 = x665 * x848
    x873 = x848 * x866 + x872
    x874 = x673 * x849
    x875 = x22 * x850 + x874
    x876 = x444 * x681
    x877 = x643 * x729 + x876
    x878 = x113 * x665
    x879 = x113 * x866 + x878
    x880 = x116 * x673
    x881 = x22 * x851 + x880
    x882 = x104 * x681
    x883 = x22 * x852 + x882
    x884 = x54 * (x61 * x643 + x681 * x94)
    x885 = x240 * x853 + x884
    x886 = x216 * x665 + 3.0 * x400 - x403 * x667
    x887 = x12 * x886 + 4.0 * x666
    x888 = 4.0 * x674 + x887 * x94

    # 360 item(s)
    result[0, 0, 0] = numpy.sum(
        x85
        * (
            x0 * x69
            + x0 * (x69 + x71 * x72)
            + x54 * (x55 * (x53 * x82 + x55 * (x78 + x80)) + x62 * x82)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x93
        * (
            x0 * x89
            + x0 * (x72 * x91 + x89)
            + x54 * (x55 * x86 * (x78 + x80) + x82 * x87)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x93
        * (
            x0 * x97
            + x0 * (x72 * x99 + x97)
            + x54 * (x55 * x94 * (x78 + x80) + x82 * x95)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x93 * (x0 * x102 + x0 * (x102 + x103 * x72) + x101 * x54 * (x78 + x80))
    )
    result[0, 0, 4] = numpy.sum(
        x108 * (x0 * x106 + x0 * (x106 + x107 * x72) + x105 * x54 * (x78 + x80))
    )
    result[0, 0, 5] = numpy.sum(
        x93 * (x0 * x110 + x0 * (x110 + x111 * x72) + x109 * x54 * (x78 + x80))
    )
    result[0, 0, 6] = numpy.sum(
        x85 * (x0 * x114 + x0 * (x113 * x115 + x114) + x113 * x77)
    )
    result[0, 0, 7] = numpy.sum(
        x93 * (x0 * x118 + x0 * (x115 * x117 + x118) + x117 * x77)
    )
    result[0, 0, 8] = numpy.sum(
        x93 * (x0 * x121 + x0 * (x115 * x120 + x121) + x120 * x77)
    )
    result[0, 0, 9] = numpy.sum(
        x85 * (x0 * x123 + x0 * (x115 * x122 + x123) + x122 * x77)
    )
    result[0, 1, 0] = numpy.sum(x157 * (x0 * x149 + x156 + x21 * x69))
    result[0, 1, 1] = numpy.sum(x108 * (x0 * x168 + x171 + x21 * x89))
    result[0, 1, 2] = numpy.sum(x108 * (x0 * x177 + x178 + x21 * x97))
    result[0, 1, 3] = numpy.sum(x108 * (x0 * x183 + x102 * x21 + x185))
    result[0, 1, 4] = numpy.sum(x196 * (x0 * x192 + x106 * x21 + x195))
    result[0, 1, 5] = numpy.sum(x108 * (x0 * x199 + x110 * x21 + x200))
    result[0, 1, 6] = numpy.sum(x157 * (x0 * x203 + x114 * x21 + x204))
    result[0, 1, 7] = numpy.sum(x108 * (x0 * x206 + x118 * x21 + x207))
    result[0, 1, 8] = numpy.sum(x108 * (x0 * x210 + x121 * x21 + x212))
    result[0, 1, 9] = numpy.sum(x157 * (x0 * x214 + x123 * x21 + x215))
    result[0, 2, 0] = numpy.sum(x157 * (x0 * x241 + x22 * x69 + x248))
    result[0, 2, 1] = numpy.sum(x108 * (x0 * x253 + x22 * x89 + x254))
    result[0, 2, 2] = numpy.sum(x108 * (x0 * x263 + x22 * x97 + x265))
    result[0, 2, 3] = numpy.sum(x108 * (x0 * x267 + x102 * x22 + x268))
    result[0, 2, 4] = numpy.sum(x196 * (x0 * x272 + x106 * x22 + x273))
    result[0, 2, 5] = numpy.sum(x108 * (x0 * x278 + x110 * x22 + x280))
    result[0, 2, 6] = numpy.sum(x157 * (x0 * x283 + x114 * x22 + x284))
    result[0, 2, 7] = numpy.sum(x108 * (x0 * x286 + x118 * x22 + x287))
    result[0, 2, 8] = numpy.sum(x108 * (x0 * x289 + x121 * x22 + x290))
    result[0, 2, 9] = numpy.sum(x157 * (x0 * x292 + x123 * x22 + x293))
    result[0, 3, 0] = numpy.sum(x85 * (x149 * x21 + x311))
    result[0, 3, 1] = numpy.sum(x93 * (x168 * x21 + x322))
    result[0, 3, 2] = numpy.sum(x93 * (x177 * x21 + x326))
    result[0, 3, 3] = numpy.sum(x93 * (x183 * x21 + x330))
    result[0, 3, 4] = numpy.sum(x108 * (x192 * x21 + x334))
    result[0, 3, 5] = numpy.sum(x93 * (x199 * x21 + x336))
    result[0, 3, 6] = numpy.sum(x85 * (x203 * x21 + x338))
    result[0, 3, 7] = numpy.sum(x93 * (x206 * x21 + x340))
    result[0, 3, 8] = numpy.sum(x93 * (x21 * x210 + x342))
    result[0, 3, 9] = numpy.sum(x85 * (x21 * x214 + x344))
    result[0, 4, 0] = numpy.sum(x157 * (x21 * x241 + x358))
    result[0, 4, 1] = numpy.sum(x108 * (x21 * x253 + x365))
    result[0, 4, 2] = numpy.sum(x108 * (x21 * x263 + x372))
    result[0, 4, 3] = numpy.sum(x108 * (x21 * x267 + x377))
    result[0, 4, 4] = numpy.sum(x196 * (x21 * x272 + x382))
    result[0, 4, 5] = numpy.sum(x108 * (x21 * x278 + x387))
    result[0, 4, 6] = numpy.sum(x157 * (x21 * x283 + x389))
    result[0, 4, 7] = numpy.sum(x108 * (x21 * x286 + x392))
    result[0, 4, 8] = numpy.sum(x108 * (x21 * x289 + x394))
    result[0, 4, 9] = numpy.sum(x157 * (x21 * x292 + x396))
    result[0, 5, 0] = numpy.sum(x85 * (x22 * x241 + x414))
    result[0, 5, 1] = numpy.sum(x93 * (x22 * x253 + x418))
    result[0, 5, 2] = numpy.sum(x93 * (x22 * x263 + x425))
    result[0, 5, 3] = numpy.sum(x93 * (x22 * x267 + x427))
    result[0, 5, 4] = numpy.sum(x108 * (x22 * x272 + x429))
    result[0, 5, 5] = numpy.sum(x93 * (x22 * x278 + x433))
    result[0, 5, 6] = numpy.sum(x85 * (x22 * x283 + x435))
    result[0, 5, 7] = numpy.sum(x93 * (x22 * x286 + x437))
    result[0, 5, 8] = numpy.sum(x93 * (x22 * x289 + x439))
    result[0, 5, 9] = numpy.sum(x85 * (x22 * x292 + x441))
    result[1, 0, 0] = numpy.sum(x157 * (x0 * x147 + x0 * (x147 + x443 * x72) + x156))
    result[1, 0, 1] = numpy.sum(x108 * (x0 * x167 + x0 * (x167 + x446 * x72) + x171))
    result[1, 0, 2] = numpy.sum(x108 * (x0 * x176 + x0 * (x176 + x448 * x72) + x178))
    result[1, 0, 3] = numpy.sum(x108 * (x0 * x182 + x0 * (x182 + x450 * x72) + x185))
    result[1, 0, 4] = numpy.sum(x196 * (x0 * x191 + x0 * (x191 + x452 * x72) + x195))
    result[1, 0, 5] = numpy.sum(x108 * (x0 * x198 + x0 * (x198 + x454 * x72) + x200))
    result[1, 0, 6] = numpy.sum(x157 * (x0 * x201 + x0 * (x201 + x455 * x72) + x204))
    result[1, 0, 7] = numpy.sum(x108 * (x0 * x205 + x0 * (x205 + x456 * x72) + x207))
    result[1, 0, 8] = numpy.sum(x108 * (x0 * x209 + x0 * (x209 + x458 * x72) + x212))
    result[1, 0, 9] = numpy.sum(x157 * (x0 * x213 + x0 * (x0 * x459 + x213) + x215))
    result[1, 1, 0] = numpy.sum(x462 * (x0 * x461 + x311))
    result[1, 1, 1] = numpy.sum(x196 * (x0 * x464 + x322))
    result[1, 1, 2] = numpy.sum(x196 * (x0 * x466 + x326))
    result[1, 1, 3] = numpy.sum(x196 * (x0 * x469 + x330))
    result[1, 1, 4] = numpy.sum(x83 * (x0 * x472 + x334))
    result[1, 1, 5] = numpy.sum(x196 * (x0 * x475 + x336))
    result[1, 1, 6] = numpy.sum(x462 * (x0 * x477 + x338))
    result[1, 1, 7] = numpy.sum(x196 * (x0 * x479 + x340))
    result[1, 1, 8] = numpy.sum(x196 * (x0 * x481 + x342))
    result[1, 1, 9] = numpy.sum(x462 * (x0 * x483 + x344))
    result[1, 2, 0] = numpy.sum(x462 * (x0 * x485 + x358))
    result[1, 2, 1] = numpy.sum(x196 * (x0 * x487 + x365))
    result[1, 2, 2] = numpy.sum(x196 * (x0 * x489 + x372))
    result[1, 2, 3] = numpy.sum(x196 * (x0 * x492 + x377))
    result[1, 2, 4] = numpy.sum(x83 * (x0 * x495 + x382))
    result[1, 2, 5] = numpy.sum(x196 * (x0 * x498 + x387))
    result[1, 2, 6] = numpy.sum(x462 * (x0 * x500 + x389))
    result[1, 2, 7] = numpy.sum(x196 * (x0 * x502 + x392))
    result[1, 2, 8] = numpy.sum(x196 * (x0 * x504 + x394))
    result[1, 2, 9] = numpy.sum(x462 * (x0 * x506 + x396))
    result[1, 3, 0] = numpy.sum(x157 * (x21 * x461 + x512))
    result[1, 3, 1] = numpy.sum(x108 * (x21 * x464 + x520))
    result[1, 3, 2] = numpy.sum(x108 * (x21 * x466 + x522))
    result[1, 3, 3] = numpy.sum(x108 * (x21 * x469 + x526))
    result[1, 3, 4] = numpy.sum(x196 * (x21 * x472 + x530))
    result[1, 3, 5] = numpy.sum(x108 * (x21 * x475 + x532))
    result[1, 3, 6] = numpy.sum(x157 * (x21 * x477 + x533))
    result[1, 3, 7] = numpy.sum(x108 * (x21 * x479 + x534))
    result[1, 3, 8] = numpy.sum(x108 * (x21 * x481 + x535))
    result[1, 3, 9] = numpy.sum(x157 * (x21 * x483 + x536))
    result[1, 4, 0] = numpy.sum(x462 * (x21 * x485 + x542))
    result[1, 4, 1] = numpy.sum(x196 * (x21 * x487 + x547))
    result[1, 4, 2] = numpy.sum(x196 * (x21 * x489 + x551))
    result[1, 4, 3] = numpy.sum(x196 * (x21 * x492 + x555))
    result[1, 4, 4] = numpy.sum(x83 * (x21 * x495 + x560))
    result[1, 4, 5] = numpy.sum(x196 * (x21 * x498 + x564))
    result[1, 4, 6] = numpy.sum(x462 * (x21 * x500 + x566))
    result[1, 4, 7] = numpy.sum(x196 * (x21 * x502 + x568))
    result[1, 4, 8] = numpy.sum(x196 * (x21 * x504 + x570))
    result[1, 4, 9] = numpy.sum(x462 * (x21 * x506 + x572))
    result[1, 5, 0] = numpy.sum(x157 * (x22 * x485 + x578))
    result[1, 5, 1] = numpy.sum(x108 * (x22 * x487 + x582))
    result[1, 5, 2] = numpy.sum(x108 * (x22 * x489 + x586))
    result[1, 5, 3] = numpy.sum(x108 * (x22 * x492 + x590))
    result[1, 5, 4] = numpy.sum(x196 * (x22 * x495 + x594))
    result[1, 5, 5] = numpy.sum(x108 * (x22 * x498 + x598))
    result[1, 5, 6] = numpy.sum(x157 * (x22 * x500 + x600))
    result[1, 5, 7] = numpy.sum(x108 * (x22 * x502 + x602))
    result[1, 5, 8] = numpy.sum(x108 * (x22 * x504 + x604))
    result[1, 5, 9] = numpy.sum(x157 * (x22 * x506 + x606))
    result[2, 0, 0] = numpy.sum(x157 * (x0 * x239 + x0 * (x239 + x607 * x72) + x248))
    result[2, 0, 1] = numpy.sum(x108 * (x0 * x252 + x0 * (x252 + x608 * x72) + x254))
    result[2, 0, 2] = numpy.sum(x108 * (x0 * x262 + x0 * (x262 + x609 * x72) + x265))
    result[2, 0, 3] = numpy.sum(x108 * (x0 * x266 + x0 * (x266 + x611 * x72) + x268))
    result[2, 0, 4] = numpy.sum(x196 * (x0 * x271 + x0 * (x271 + x613 * x72) + x273))
    result[2, 0, 5] = numpy.sum(x108 * (x0 * x277 + x0 * (x277 + x616 * x72) + x280))
    result[2, 0, 6] = numpy.sum(x157 * (x0 * x281 + x0 * (x0 * x617 + x281) + x284))
    result[2, 0, 7] = numpy.sum(x108 * (x0 * x285 + x0 * (x0 * x618 + x285) + x287))
    result[2, 0, 8] = numpy.sum(x108 * (x0 * x288 + x0 * (x0 * x619 + x288) + x290))
    result[2, 0, 9] = numpy.sum(x157 * (x0 * x291 + x0 * (x291 + x620 * x72) + x293))
    result[2, 1, 0] = numpy.sum(x462 * (x0 * x621 + x21 * x239 + x357))
    result[2, 1, 1] = numpy.sum(x196 * (x0 * x622 + x21 * x252 + x364))
    result[2, 1, 2] = numpy.sum(x196 * (x0 * x623 + x21 * x262 + x371))
    result[2, 1, 3] = numpy.sum(x196 * (x0 * x624 + x21 * x266 + x376))
    result[2, 1, 4] = numpy.sum(x83 * (x0 * x625 + x21 * x271 + x381))
    result[2, 1, 5] = numpy.sum(x196 * (x0 * x626 + x21 * x277 + x386))
    result[2, 1, 6] = numpy.sum(x462 * (x0 * x627 + x21 * x281 + x388))
    result[2, 1, 7] = numpy.sum(x196 * (x0 * x628 + x21 * x285 + x391))
    result[2, 1, 8] = numpy.sum(x196 * (x0 * x629 + x21 * x288 + x393))
    result[2, 1, 9] = numpy.sum(x462 * (x0 * x630 + x21 * x291 + x395))
    result[2, 2, 0] = numpy.sum(x462 * (x0 * x632 + x414))
    result[2, 2, 1] = numpy.sum(x196 * (x0 * x634 + x418))
    result[2, 2, 2] = numpy.sum(x196 * (x0 * x636 + x425))
    result[2, 2, 3] = numpy.sum(x196 * (x0 * x639 + x427))
    result[2, 2, 4] = numpy.sum(x83 * (x0 * x642 + x429))
    result[2, 2, 5] = numpy.sum(x196 * (x0 * x646 + x433))
    result[2, 2, 6] = numpy.sum(x462 * (x0 * x648 + x435))
    result[2, 2, 7] = numpy.sum(x196 * (x0 * x650 + x437))
    result[2, 2, 8] = numpy.sum(x196 * (x0 * x652 + x439))
    result[2, 2, 9] = numpy.sum(x462 * (x0 * x654 + x441))
    result[2, 3, 0] = numpy.sum(x157 * (x21 * x621 + x655))
    result[2, 3, 1] = numpy.sum(x108 * (x21 * x622 + x656))
    result[2, 3, 2] = numpy.sum(x108 * (x21 * x623 + x657))
    result[2, 3, 3] = numpy.sum(x108 * (x21 * x624 + x658))
    result[2, 3, 4] = numpy.sum(x196 * (x21 * x625 + x659))
    result[2, 3, 5] = numpy.sum(x108 * (x21 * x626 + x660))
    result[2, 3, 6] = numpy.sum(x157 * (x21 * x627 + x661))
    result[2, 3, 7] = numpy.sum(x108 * (x21 * x628 + x662))
    result[2, 3, 8] = numpy.sum(x108 * (x21 * x629 + x663))
    result[2, 3, 9] = numpy.sum(x157 * (x21 * x630 + x664))
    result[2, 4, 0] = numpy.sum(x462 * (x21 * x632 + x578))
    result[2, 4, 1] = numpy.sum(x196 * (x21 * x634 + x582))
    result[2, 4, 2] = numpy.sum(x196 * (x21 * x636 + x586))
    result[2, 4, 3] = numpy.sum(x196 * (x21 * x639 + x590))
    result[2, 4, 4] = numpy.sum(x83 * (x21 * x642 + x594))
    result[2, 4, 5] = numpy.sum(x196 * (x21 * x646 + x598))
    result[2, 4, 6] = numpy.sum(x462 * (x21 * x648 + x600))
    result[2, 4, 7] = numpy.sum(x196 * (x21 * x650 + x602))
    result[2, 4, 8] = numpy.sum(x196 * (x21 * x652 + x604))
    result[2, 4, 9] = numpy.sum(x462 * (x21 * x654 + x606))
    result[2, 5, 0] = numpy.sum(x157 * (x22 * x632 + x670))
    result[2, 5, 1] = numpy.sum(x108 * (x22 * x634 + x672))
    result[2, 5, 2] = numpy.sum(x108 * (x22 * x636 + x676))
    result[2, 5, 3] = numpy.sum(x108 * (x22 * x639 + x678))
    result[2, 5, 4] = numpy.sum(x196 * (x22 * x642 + x680))
    result[2, 5, 5] = numpy.sum(x108 * (x22 * x646 + x684))
    result[2, 5, 6] = numpy.sum(x157 * (x22 * x648 + x685))
    result[2, 5, 7] = numpy.sum(x108 * (x22 * x650 + x686))
    result[2, 5, 8] = numpy.sum(x108 * (x22 * x652 + x687))
    result[2, 5, 9] = numpy.sum(x157 * (x22 * x654 + x688))
    result[3, 0, 0] = numpy.sum(x85 * (x0 * x460 + x0 * (x460 + x689 * x690) + x310))
    result[3, 0, 1] = numpy.sum(x93 * (x0 * x463 + x0 * (x0 * x692 + x463) + x321))
    result[3, 0, 2] = numpy.sum(x93 * (x0 * x465 + x0 * (x465 + x690 * x693) + x325))
    result[3, 0, 3] = numpy.sum(x93 * (x0 * x468 + x0 * (x467 * x694 + x468) + x329))
    result[3, 0, 4] = numpy.sum(x108 * (x0 * x471 + x0 * (x470 * x694 + x471) + x333))
    result[3, 0, 5] = numpy.sum(x93 * (x0 * x474 + x0 * (x474 + x690 * x695) + x335))
    result[3, 0, 6] = numpy.sum(x85 * (x0 * x476 + x0 * (x476 + x696 * x72) + x337))
    result[3, 0, 7] = numpy.sum(x93 * (x0 * x478 + x0 * (x478 + x697 * x72) + x339))
    result[3, 0, 8] = numpy.sum(x93 * (x0 * x480 + x0 * (x480 + x698 * x72) + x341))
    result[3, 0, 9] = numpy.sum(x85 * (x0 * x482 + x0 * (x122 * x690 + x482) + x343))
    result[3, 1, 0] = numpy.sum(x157 * (x0 * x701 + x512))
    result[3, 1, 1] = numpy.sum(x108 * (x0 * x703 + x520))
    result[3, 1, 2] = numpy.sum(x108 * (x0 * x705 + x522))
    result[3, 1, 3] = numpy.sum(x108 * (x0 * x708 + x526))
    result[3, 1, 4] = numpy.sum(x196 * (x0 * x710 + x530))
    result[3, 1, 5] = numpy.sum(x108 * (x0 * x712 + x532))
    result[3, 1, 6] = numpy.sum(x157 * (x0 * x714 + x533))
    result[3, 1, 7] = numpy.sum(x108 * (x0 * x716 + x534))
    result[3, 1, 8] = numpy.sum(x108 * (x0 * x718 + x535))
    result[3, 1, 9] = numpy.sum(x157 * (x0 * x720 + x536))
    result[3, 2, 0] = numpy.sum(x157 * (x0 * x723 + x542))
    result[3, 2, 1] = numpy.sum(x108 * (x0 * x725 + x547))
    result[3, 2, 2] = numpy.sum(x108 * (x0 * x727 + x551))
    result[3, 2, 3] = numpy.sum(x108 * (x0 * x730 + x555))
    result[3, 2, 4] = numpy.sum(x196 * (x0 * x732 + x560))
    result[3, 2, 5] = numpy.sum(x108 * (x0 * x734 + x564))
    result[3, 2, 6] = numpy.sum(x157 * (x0 * x736 + x566))
    result[3, 2, 7] = numpy.sum(x108 * (x0 * x738 + x568))
    result[3, 2, 8] = numpy.sum(x108 * (x0 * x741 + x570))
    result[3, 2, 9] = numpy.sum(x157 * (x0 * x743 + x572))
    result[3, 3, 0] = numpy.sum(x85 * (x21 * x699 + x21 * x701 + x689 * x744))
    result[3, 3, 1] = numpy.sum(x93 * (x21 * x702 + x21 * x703 + x691 * x747))
    result[3, 3, 2] = numpy.sum(x93 * (x21 * x704 + x21 * x705 + x693 * x744))
    result[3, 3, 3] = numpy.sum(x93 * (x21 * x706 + x21 * x708 + x444 * x748))
    result[3, 3, 4] = numpy.sum(x108 * (x21 * x709 + x21 * x710 + x444 * x749))
    result[3, 3, 5] = numpy.sum(x93 * (x21 * x711 + x21 * x712 + x695 * x744))
    result[3, 3, 6] = numpy.sum(
        x85 * (x21 * x713 + x21 * x714 + x54 * (4.0 * x524 + x748 * x86))
    )
    result[3, 3, 7] = numpy.sum(
        x93 * (x21 * x715 + x21 * x716 + x54 * (4.0 * x528 + x749 * x86))
    )
    result[3, 3, 8] = numpy.sum(
        x93 * (x109 * x54 * (x745 + x746) + x21 * x717 + x21 * x718)
    )
    result[3, 3, 9] = numpy.sum(x85 * (x122 * x744 + x21 * x719 + x21 * x720))
    result[3, 4, 0] = numpy.sum(x157 * (x21 * x723 + x22 * x699 + x751))
    result[3, 4, 1] = numpy.sum(x108 * (x21 * x725 + x22 * x702 + x753))
    result[3, 4, 2] = numpy.sum(x108 * (x21 * x727 + x22 * x704 + x755))
    result[3, 4, 3] = numpy.sum(x108 * (x21 * x730 + x22 * x706 + x757))
    result[3, 4, 4] = numpy.sum(x196 * (x21 * x732 + x22 * x709 + x759))
    result[3, 4, 5] = numpy.sum(x108 * (x21 * x734 + x22 * x711 + x761))
    result[3, 4, 6] = numpy.sum(x157 * (x21 * x736 + x22 * x713 + x762))
    result[3, 4, 7] = numpy.sum(x108 * (x21 * x738 + x22 * x715 + x763))
    result[3, 4, 8] = numpy.sum(x108 * (x21 * x741 + x22 * x717 + x764))
    result[3, 4, 9] = numpy.sum(x157 * (x21 * x743 + x22 * x719 + x765))
    result[3, 5, 0] = numpy.sum(x85 * (x22 * x723 + x768))
    result[3, 5, 1] = numpy.sum(x93 * (x22 * x725 + x771))
    result[3, 5, 2] = numpy.sum(x93 * (x22 * x727 + x774))
    result[3, 5, 3] = numpy.sum(x93 * (x22 * x730 + x777))
    result[3, 5, 4] = numpy.sum(x108 * (x22 * x732 + x780))
    result[3, 5, 5] = numpy.sum(x93 * (x22 * x734 + x783))
    result[3, 5, 6] = numpy.sum(x85 * (x22 * x736 + x785))
    result[3, 5, 7] = numpy.sum(x93 * (x22 * x738 + x787))
    result[3, 5, 8] = numpy.sum(x93 * (x22 * x741 + x789))
    result[3, 5, 9] = numpy.sum(x85 * (x22 * x743 + x791))
    result[4, 0, 0] = numpy.sum(x157 * (x0 * x484 + x0 * (x0 * x792 + x484) + x357))
    result[4, 0, 1] = numpy.sum(x108 * (x0 * x486 + x0 * (x362 * x793 + x486) + x364))
    result[4, 0, 2] = numpy.sum(x108 * (x0 * x488 + x0 * (x369 * x793 + x488) + x371))
    result[4, 0, 3] = numpy.sum(x108 * (x0 * x491 + x0 * (x490 * x694 + x491) + x376))
    result[4, 0, 4] = numpy.sum(x196 * (x0 * x494 + x0 * (x493 * x694 + x494) + x381))
    result[4, 0, 5] = numpy.sum(x108 * (x0 * x497 + x0 * (x496 * x694 + x497) + x386))
    result[4, 0, 6] = numpy.sum(x157 * (x0 * x499 + x0 * (x499 + x72 * x794) + x388))
    result[4, 0, 7] = numpy.sum(x108 * (x0 * x501 + x0 * (x501 + x72 * x795) + x391))
    result[4, 0, 8] = numpy.sum(x108 * (x0 * x503 + x0 * (x503 + x72 * x796) + x393))
    result[4, 0, 9] = numpy.sum(x157 * (x0 * x505 + x0 * (x505 + x72 * x797) + x395))
    result[4, 1, 0] = numpy.sum(x462 * (x0 * x798 + x655))
    result[4, 1, 1] = numpy.sum(x196 * (x0 * x800 + x656))
    result[4, 1, 2] = numpy.sum(x196 * (x0 * x801 + x657))
    result[4, 1, 3] = numpy.sum(x196 * (x0 * x802 + x658))
    result[4, 1, 4] = numpy.sum(x83 * (x0 * x803 + x659))
    result[4, 1, 5] = numpy.sum(x196 * (x0 * x804 + x660))
    result[4, 1, 6] = numpy.sum(x462 * (x0 * x805 + x661))
    result[4, 1, 7] = numpy.sum(x196 * (x0 * x806 + x662))
    result[4, 1, 8] = numpy.sum(x196 * (x0 * x807 + x663))
    result[4, 1, 9] = numpy.sum(x462 * (x0 * x808 + x664))
    result[4, 2, 0] = numpy.sum(x462 * (x0 * x810 + x578))
    result[4, 2, 1] = numpy.sum(x196 * (x0 * x813 + x582))
    result[4, 2, 2] = numpy.sum(x196 * (x0 * x815 + x586))
    result[4, 2, 3] = numpy.sum(x196 * (x0 * x817 + x590))
    result[4, 2, 4] = numpy.sum(x83 * (x0 * x819 + x594))
    result[4, 2, 5] = numpy.sum(x196 * (x0 * x821 + x598))
    result[4, 2, 6] = numpy.sum(x462 * (x0 * x823 + x600))
    result[4, 2, 7] = numpy.sum(x196 * (x0 * x825 + x602))
    result[4, 2, 8] = numpy.sum(x196 * (x0 * x827 + x604))
    result[4, 2, 9] = numpy.sum(x462 * (x0 * x829 + x606))
    result[4, 3, 0] = numpy.sum(x157 * (x21 * x721 + x21 * x798 + x751))
    result[4, 3, 1] = numpy.sum(x108 * (x21 * x724 + x21 * x800 + x753))
    result[4, 3, 2] = numpy.sum(x108 * (x21 * x726 + x21 * x801 + x755))
    result[4, 3, 3] = numpy.sum(x108 * (x21 * x728 + x21 * x802 + x757))
    result[4, 3, 4] = numpy.sum(x196 * (x21 * x731 + x21 * x803 + x759))
    result[4, 3, 5] = numpy.sum(x108 * (x21 * x733 + x21 * x804 + x761))
    result[4, 3, 6] = numpy.sum(x157 * (x21 * x735 + x21 * x805 + x762))
    result[4, 3, 7] = numpy.sum(x108 * (x21 * x737 + x21 * x806 + x763))
    result[4, 3, 8] = numpy.sum(x108 * (x21 * x740 + x21 * x807 + x764))
    result[4, 3, 9] = numpy.sum(x157 * (x21 * x742 + x21 * x808 + x765))
    result[4, 4, 0] = numpy.sum(x462 * (x21 * x810 + x768))
    result[4, 4, 1] = numpy.sum(x196 * (x21 * x813 + x771))
    result[4, 4, 2] = numpy.sum(x196 * (x21 * x815 + x774))
    result[4, 4, 3] = numpy.sum(x196 * (x21 * x817 + x777))
    result[4, 4, 4] = numpy.sum(x83 * (x21 * x819 + x780))
    result[4, 4, 5] = numpy.sum(x196 * (x21 * x821 + x783))
    result[4, 4, 6] = numpy.sum(x462 * (x21 * x823 + x785))
    result[4, 4, 7] = numpy.sum(x196 * (x21 * x825 + x787))
    result[4, 4, 8] = numpy.sum(x196 * (x21 * x827 + x789))
    result[4, 4, 9] = numpy.sum(x462 * (x21 * x829 + x791))
    result[4, 5, 0] = numpy.sum(x157 * (x22 * x810 + x831))
    result[4, 5, 1] = numpy.sum(x108 * (x22 * x813 + x833))
    result[4, 5, 2] = numpy.sum(x108 * (x22 * x815 + x835))
    result[4, 5, 3] = numpy.sum(x108 * (x22 * x817 + x837))
    result[4, 5, 4] = numpy.sum(x196 * (x22 * x819 + x839))
    result[4, 5, 5] = numpy.sum(x108 * (x22 * x821 + x841))
    result[4, 5, 6] = numpy.sum(x157 * (x22 * x823 + x842))
    result[4, 5, 7] = numpy.sum(x108 * (x22 * x825 + x843))
    result[4, 5, 8] = numpy.sum(x108 * (x22 * x827 + x844))
    result[4, 5, 9] = numpy.sum(x157 * (x22 * x829 + x845))
    result[5, 0, 0] = numpy.sum(x85 * (x0 * x631 + x0 * (x631 + x689 * x846) + x413))
    result[5, 0, 1] = numpy.sum(x93 * (x0 * x633 + x0 * (x633 + x793 * x847) + x417))
    result[5, 0, 2] = numpy.sum(x93 * (x0 * x635 + x0 * (x421 * x793 + x635) + x424))
    result[5, 0, 3] = numpy.sum(x93 * (x0 * x638 + x0 * (x638 + x846 * x848) + x426))
    result[5, 0, 4] = numpy.sum(x108 * (x0 * x641 + x0 * (x0 * x850 + x641) + x428))
    result[5, 0, 5] = numpy.sum(x93 * (x0 * x645 + x0 * (x643 * x694 + x645) + x432))
    result[5, 0, 6] = numpy.sum(x85 * (x0 * x647 + x0 * (x113 * x846 + x647) + x434))
    result[5, 0, 7] = numpy.sum(x93 * (x0 * x649 + x0 * (x0 * x851 + x649) + x436))
    result[5, 0, 8] = numpy.sum(x93 * (x0 * x651 + x0 * (x0 * x852 + x651) + x438))
    result[5, 0, 9] = numpy.sum(x85 * (x0 * x653 + x0 * (x653 + x72 * x853) + x440))
    result[5, 1, 0] = numpy.sum(x157 * (x0 * x855 + x21 * x631 + x577))
    result[5, 1, 1] = numpy.sum(x108 * (x0 * x856 + x21 * x633 + x581))
    result[5, 1, 2] = numpy.sum(x108 * (x0 * x857 + x21 * x635 + x585))
    result[5, 1, 3] = numpy.sum(x108 * (x0 * x858 + x21 * x638 + x589))
    result[5, 1, 4] = numpy.sum(x196 * (x0 * x859 + x21 * x641 + x593))
    result[5, 1, 5] = numpy.sum(x108 * (x0 * x860 + x21 * x645 + x597))
    result[5, 1, 6] = numpy.sum(x157 * (x0 * x861 + x21 * x647 + x599))
    result[5, 1, 7] = numpy.sum(x108 * (x0 * x862 + x21 * x649 + x601))
    result[5, 1, 8] = numpy.sum(x108 * (x0 * x863 + x21 * x651 + x603))
    result[5, 1, 9] = numpy.sum(x157 * (x0 * x864 + x21 * x653 + x605))
    result[5, 2, 0] = numpy.sum(x157 * (x0 * x867 + x670))
    result[5, 2, 1] = numpy.sum(x108 * (x0 * x869 + x672))
    result[5, 2, 2] = numpy.sum(x108 * (x0 * x871 + x676))
    result[5, 2, 3] = numpy.sum(x108 * (x0 * x873 + x678))
    result[5, 2, 4] = numpy.sum(x196 * (x0 * x875 + x680))
    result[5, 2, 5] = numpy.sum(x108 * (x0 * x877 + x684))
    result[5, 2, 6] = numpy.sum(x157 * (x0 * x879 + x685))
    result[5, 2, 7] = numpy.sum(x108 * (x0 * x881 + x686))
    result[5, 2, 8] = numpy.sum(x108 * (x0 * x883 + x687))
    result[5, 2, 9] = numpy.sum(x157 * (x0 * x885 + x688))
    result[5, 3, 0] = numpy.sum(x85 * (x21 * x809 + x21 * x855 + x767))
    result[5, 3, 1] = numpy.sum(x93 * (x21 * x811 + x21 * x856 + x770))
    result[5, 3, 2] = numpy.sum(x93 * (x21 * x814 + x21 * x857 + x773))
    result[5, 3, 3] = numpy.sum(x93 * (x21 * x816 + x21 * x858 + x776))
    result[5, 3, 4] = numpy.sum(x108 * (x21 * x818 + x21 * x859 + x779))
    result[5, 3, 5] = numpy.sum(x93 * (x21 * x820 + x21 * x860 + x782))
    result[5, 3, 6] = numpy.sum(x85 * (x21 * x822 + x21 * x861 + x784))
    result[5, 3, 7] = numpy.sum(x93 * (x21 * x824 + x21 * x862 + x786))
    result[5, 3, 8] = numpy.sum(x93 * (x21 * x826 + x21 * x863 + x788))
    result[5, 3, 9] = numpy.sum(x85 * (x21 * x828 + x21 * x864 + x790))
    result[5, 4, 0] = numpy.sum(x157 * (x21 * x867 + x831))
    result[5, 4, 1] = numpy.sum(x108 * (x21 * x869 + x833))
    result[5, 4, 2] = numpy.sum(x108 * (x21 * x871 + x835))
    result[5, 4, 3] = numpy.sum(x108 * (x21 * x873 + x837))
    result[5, 4, 4] = numpy.sum(x196 * (x21 * x875 + x839))
    result[5, 4, 5] = numpy.sum(x108 * (x21 * x877 + x841))
    result[5, 4, 6] = numpy.sum(x157 * (x21 * x879 + x842))
    result[5, 4, 7] = numpy.sum(x108 * (x21 * x881 + x843))
    result[5, 4, 8] = numpy.sum(x108 * (x21 * x883 + x844))
    result[5, 4, 9] = numpy.sum(x157 * (x21 * x885 + x845))
    result[5, 5, 0] = numpy.sum(x85 * (x22 * x865 + x22 * x867 + x689 * x886))
    result[5, 5, 1] = numpy.sum(x93 * (x22 * x869 + x665 * x812 * x9 + x868 * x886))
    result[5, 5, 2] = numpy.sum(x93 * (x22 * x870 + x22 * x871 + x691 * x887))
    result[5, 5, 3] = numpy.sum(x93 * (x22 * x872 + x22 * x873 + x848 * x886))
    result[5, 5, 4] = numpy.sum(x108 * (x22 * x874 + x22 * x875 + x849 * x887))
    result[5, 5, 5] = numpy.sum(x93 * (x22 * x876 + x22 * x877 + x444 * x888))
    result[5, 5, 6] = numpy.sum(x85 * (x113 * x886 + x22 * x878 + x22 * x879))
    result[5, 5, 7] = numpy.sum(x93 * (x116 * x887 + x22 * x880 + x22 * x881))
    result[5, 5, 8] = numpy.sum(x93 * (x104 * x888 + x22 * x882 + x22 * x883))
    result[5, 5, 9] = numpy.sum(
        x85 * (x22 * x884 + x22 * x885 + x54 * (4.0 * x682 + x888 * x94))
    )
    return result


def int3c2e3d_sph_224(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (dd|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 6, 15), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(5, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x20 * x23
    x25 = x2 * x24
    x26 = 2.0 * x19 * x25
    x27 = x18 * x26
    x28 = cx ** (-1.0)
    x29 = x14 ** (-0.5)
    x30 = boys(4, x17)
    x31 = 2.0 * x2 * x20 * x23 * x28 * x29 * x30 - x27
    x32 = x31 * x6
    x33 = -2.0 * x2 * x20 * x23 * x28 * x29 * x30 * x5 + x27 * x4
    x34 = -x33
    x35 = boys(6, x17)
    x36 = x26 * x35
    x37 = -2.0 * x18 * x2 * x20 * x23 * x28 * x29 * x5 + x36 * x4
    x38 = -x37
    x39 = x16 * x38
    x40 = x39 * x4
    x41 = x32 + x34 * x5 - x40
    x42 = 2.0 * x6
    x43 = x6 * (2.0 * x18 * x2 * x20 * x23 * x28 * x29 - x36)
    x44 = boys(7, x17)
    x45 = x26 * x44
    x46 = 2.0 * x2 * x20 * x23 * x28 * x29 * x35 * x5 - x4 * x45
    x47 = x16 * x46
    x48 = x38 * x5 - x4 * x47 + x43
    x49 = x16 * x48
    x50 = -x4 * x49 + x41 * x5 - x42 * (x33 + x39)
    x51 = x4 * x50
    x52 = x41 * x6
    x53 = 3.0 * x52
    x54 = x51 + x53
    x55 = x1 * x15
    x56 = x4 * x55
    x57 = x4 * x41
    x58 = x34 * x6
    x59 = 2.0 * x58
    x60 = x57 + x59
    x61 = 3.0 * x6
    x62 = x55 * x61
    x63 = x54 * x56 + x60 * x62
    x64 = x34 * x4
    x65 = x28 * x30 * x42
    x66 = x25 * x29 * x65
    x67 = x64 + x66
    x68 = x42 * x55
    x69 = x56 * x60 + x67 * x68
    x70 = x56 * x63 + x62 * x69
    x71 = x24 * x65
    x72 = x19 * x71
    x73 = x4 * x72 + x56 * x67
    x74 = x56 * x69 + x68 * x73
    x75 = x55 * (x56 * x70 + x62 * x74)
    x76 = x1 * x14 ** (-2.5) * x71
    x77 = x56 * x74 + x68 * (x56 * x73 + x7 * x76)
    x78 = x0 * x55
    x79 = -x31 * x6
    x80 = x6 * (2.0 * x2 * x20 * x23 * x28 * x29 * x35 - x45)
    x81 = x26 * boys(8, x17)
    x82 = x16 * x4
    x83 = (
        x5 * x50
        - x61 * (-x34 * x5 + x40 + x49 + x79)
        + x82
        * (
            x42 * (x37 + x47)
            - x48 * x5
            + x82
            * (
                x46 * x5
                + x80
                - x82 * (2.0 * x2 * x20 * x23 * x28 * x29 * x44 * x5 - x4 * x81)
            )
        )
    )
    x84 = x4 * x83
    x85 = x50 * x6
    x86 = 4.0 * x85
    x87 = x55 * x6
    x88 = 4.0 * x87
    x89 = da * db * dc
    x90 = 10.2469507659596 * x89
    x91 = 0.003174603174603175 * x90
    x92 = x55 * x9
    x93 = x92 * (x51 + x53)
    x94 = x92 * (x57 + x59)
    x95 = x56 * x93 + x62 * x94
    x96 = x72 * x9
    x97 = x64 * x92 + x96
    x98 = x56 * x94 + x68 * x97
    x99 = x55 * (x56 * x95 + x62 * x98)
    x100 = x4 * x76
    x101 = x56 * x98 + x68 * (x100 * x9 + x56 * x97)
    x102 = 3.872983346207417 * x89
    x103 = 0.02222222222222222 * x102
    x104 = x12 * x55
    x105 = x104 * (x51 + x53)
    x106 = x104 * (x57 + x59)
    x107 = x105 * x56 + x106 * x62
    x108 = x12 * x72
    x109 = x104 * x64 + x108
    x110 = x106 * x56 + x109 * x68
    x111 = x55 * (x107 * x56 + x110 * x62)
    x112 = x110 * x56 + x68 * (x100 * x12 + x109 * x56)
    x113 = x1**2 / x14**2
    x114 = x10 * x113
    x115 = x114 * (x51 + x53)
    x116 = x114 * (x57 + x59)
    x117 = x55 * (x115 * x56 + x116 * x62)
    x118 = x10 * x76
    x119 = x116 * x56 + x68 * (x114 * x64 + x118)
    x120 = 0.1111111111111111 * x89
    x121 = x113 * x9
    x122 = x12 * x121
    x123 = x122 * (x51 + x53)
    x124 = x122 * (x57 + x59)
    x125 = x55 * (x123 * x56 + x124 * x62)
    x126 = x12 * x76 * x9
    x127 = x124 * x56 + x68 * (x122 * x64 + x126)
    x128 = 1.732050807568877
    x129 = x120 * x128
    x130 = x113 * x13
    x131 = x130 * (x51 + x53)
    x132 = x130 * (x57 + x59)
    x133 = x55 * (x131 * x56 + x132 * x62)
    x134 = x13 * x76
    x135 = x132 * x56 + x68 * (x130 * x64 + x134)
    x136 = x9**3
    x137 = x1**3 / x14**3
    x138 = x136 * x137
    x139 = x138 * x55 * (x51 + x53)
    x140 = x138 * (x57 + x59)
    x141 = x10 * x137
    x142 = x12 * x141
    x143 = x142 * x55 * (x51 + x53)
    x144 = x142 * (x57 + x59)
    x145 = x137 * x9
    x146 = x13 * x145
    x147 = x146 * x55 * (x51 + x53)
    x148 = x146 * (x57 + x59)
    x149 = x12**3
    x150 = x137 * x149
    x151 = x150 * x55 * (x51 + x53)
    x152 = x150 * (x57 + x59)
    x153 = x1**4 / x14**4
    x154 = x153 * x9**4
    x155 = x154 * x50
    x156 = x0 * x41
    x157 = x136 * x153
    x158 = x12 * x157
    x159 = x158 * x50
    x160 = x153 * x50
    x161 = x10 * x13
    x162 = x160 * x161
    x163 = x153 * x156
    x164 = x153 * x83
    x165 = x149 * x9
    x166 = x160 * x165
    x167 = x12**4 * x153
    x168 = x167 * x50
    x169 = -x8 - A[1]
    x170 = -2.0 * x169 * x18 * x2 * x20 * x23 * x28 * x29 + x36 * x9
    x171 = -x170
    x172 = x16 * x171
    x173 = -2.0 * x169 * x2 * x20 * x23 * x28 * x29 * x30 + x27 * x9
    x174 = -x6 * (x172 + x173)
    x175 = -x173
    x176 = x172 * x4 - x175 * x5
    x177 = -x176
    x178 = 2.0 * x169 * x2 * x20 * x23 * x28 * x29 * x35 - x45 * x9
    x179 = x16 * x178
    x180 = x171 * x5 - x179 * x4
    x181 = x16 * x180
    x182 = x174 + x177 * x5 - x181 * x4
    x183 = x182 * x4
    x184 = x177 * x6
    x185 = 2.0 * x184
    x186 = x183 + x185
    x187 = x175 * x6
    x188 = x177 * x4
    x189 = x187 + x188
    x190 = x186 * x56 + x189 * x68
    x191 = x56 * (x187 + x189)
    x192 = x190 * x56 + x191 * x68
    x193 = x113 * x7
    x194 = x187 * x193 + x191 * x56
    x195 = x55 * (x192 * x56 + x194 * x68)
    x196 = x21 * x55
    x197 = x195 + x196 * x77
    x198 = -x6 * (x170 + x179)
    x199 = 2.0 * x169 * x2 * x20 * x23 * x28 * x29 * x44 - x81 * x9
    x200 = (
        x182 * x5
        - x42 * (x176 + x181)
        - x82 * (x180 * x5 + x198 - x82 * (x178 * x5 - x199 * x82))
    )
    x201 = x200 * x4
    x202 = x182 * x6
    x203 = 3.0 * x202
    x204 = x55 * (
        x192 * x62 + x56 * (x190 * x62 + x56 * (x186 * x62 + x56 * (x201 + x203)))
    )
    x205 = 0.0563436169819011 * x89
    x206 = x182 * x9
    x207 = x206 + x52
    x208 = x177 * x9
    x209 = x208 + x58
    x210 = x209 * x68
    x211 = x207 * x56 + x210
    x212 = x175 * x9
    x213 = x212 + x66
    x214 = x213 * x55
    x215 = x209 * x56 + x214 * x6
    x216 = x211 * x56 + x215 * x68
    x217 = x113 * x4
    x218 = x217 * x6
    x219 = x213 * x218 + x215 * x56
    x220 = x55 * (x216 * x56 + x219 * x68)
    x221 = x101 * x196 + x220
    x222 = x200 * x9
    x223 = x222 + x85
    x224 = x55 * (x216 * x62 + x56 * (x211 * x62 + x56 * (x207 * x62 + x223 * x56)))
    x225 = 0.149071198499986 * x89
    x226 = x104 * x185
    x227 = x104 * x183 + x226
    x228 = x104 * x187
    x229 = x104 * x188 + x228
    x230 = x227 * x56 + x229 * x68
    x231 = x12 * x217
    x232 = x187 * x231 + x229 * x56
    x233 = x55 * (x230 * x56 + x232 * x68)
    x234 = x112 * x196 + x233
    x235 = x55 * (x230 * x62 + x56 * (x104 * x56 * (x201 + x203) + x227 * x62))
    x236 = x92 * (x207 + x52)
    x237 = x92 * (x209 + x58)
    x238 = x237 * x68
    x239 = x236 * x56 + x238
    x240 = x214 * x9 + x96
    x241 = x237 * x56 + x240 * x87
    x242 = x55 * (x239 * x56 + x241 * x68)
    x243 = x119 * x196 + x242
    x244 = x92 * (x223 + x85)
    x245 = x55 * (x239 * x62 + x56 * (x236 * x62 + x244 * x56))
    x246 = x104 * x52
    x247 = x104 * x206 + x246
    x248 = x104 * x58
    x249 = x104 * x208 + x248
    x250 = x249 * x68
    x251 = x247 * x56 + x250
    x252 = x104 * x212 + x108
    x253 = x249 * x56 + x252 * x87
    x254 = x55 * (x251 * x56 + x253 * x68)
    x255 = x127 * x196 + x254
    x256 = x104 * x85
    x257 = x104 * x222 + x256
    x258 = x55 * (x251 * x62 + x56 * (x247 * x62 + x257 * x56))
    x259 = 0.3333333333333333 * x89
    x260 = x130 * x185
    x261 = x130 * x183 + x260
    x262 = x130 * x187
    x263 = x130 * x188 + x262
    x264 = x55 * (x261 * x56 + x263 * x68)
    x265 = x135 * x196 + x264
    x266 = x55 * (x130 * x56 * (x201 + x203) + x261 * x62)
    x267 = x114 * x52 + x236 * x92
    x268 = x114 * x58 + x237 * x92
    x269 = x268 * x68
    x270 = x55 * (x267 * x56 + x269)
    x271 = x140 * x196 + x270
    x272 = x114 * x85 + x244 * x92
    x273 = x55 * (x267 * x62 + x272 * x56)
    x274 = x122 * x52 + x247 * x92
    x275 = x122 * x58 + x249 * x92
    x276 = x275 * x68
    x277 = x55 * (x274 * x56 + x276)
    x278 = x144 * x196 + x277
    x279 = x122 * x85 + x257 * x92
    x280 = x55 * (x274 * x62 + x279 * x56)
    x281 = x130 * x52
    x282 = x130 * x206 + x281
    x283 = x130 * x58
    x284 = x130 * x208 + x283
    x285 = x284 * x68
    x286 = x55 * (x282 * x56 + x285)
    x287 = x148 * x196 + x286
    x288 = x130 * x85
    x289 = x130 * x222 + x288
    x290 = x55 * (x282 * x62 + x289 * x56)
    x291 = x150 * x185
    x292 = x55 * (x150 * x183 + x291)
    x293 = x152 * x196 + x292
    x294 = x150 * x55 * (x201 + x203)
    x295 = x55 * (x138 * x52 + x267 * x92)
    x296 = x21 * x41
    x297 = x154 * x296 + x295
    x298 = x55 * (x138 * x85 + x272 * x92)
    x299 = x55 * (x142 * x52 + x274 * x92)
    x300 = x158 * x296 + x299
    x301 = x55 * (x142 * x85 + x279 * x92)
    x302 = x55 * (x146 * x52 + x282 * x92)
    x303 = x153 * x296
    x304 = x161 * x303 + x302
    x305 = x55 * (x146 * x85 + x289 * x92)
    x306 = x150 * x52
    x307 = x55 * (x150 * x206 + x306)
    x308 = x165 * x303 + x307
    x309 = x150 * x85
    x310 = x55 * (x150 * x222 + x309)
    x311 = x167 * x182
    x312 = x167 * x296 + x311
    x313 = x167 * x200
    x314 = -x11 - A[2]
    x315 = x12 * x36 - 2.0 * x18 * x2 * x20 * x23 * x28 * x29 * x314
    x316 = -x315
    x317 = x16 * x316
    x318 = x12 * x27 - 2.0 * x2 * x20 * x23 * x28 * x29 * x30 * x314
    x319 = -x6 * (x317 + x318)
    x320 = -x318
    x321 = x317 * x4 - x320 * x5
    x322 = -x321
    x323 = -x12 * x45 + 2.0 * x2 * x20 * x23 * x28 * x29 * x314 * x35
    x324 = x16 * x323
    x325 = x316 * x5 - x324 * x4
    x326 = x16 * x325
    x327 = x319 + x322 * x5 - x326 * x4
    x328 = x327 * x4
    x329 = x322 * x6
    x330 = 2.0 * x329
    x331 = x328 + x330
    x332 = x320 * x6
    x333 = x322 * x4
    x334 = x332 + x333
    x335 = x331 * x56 + x334 * x68
    x336 = x56 * (x332 + x334)
    x337 = x335 * x56 + x336 * x68
    x338 = x193 * x332 + x336 * x56
    x339 = x55 * (x337 * x56 + x338 * x68)
    x340 = x22 * x55
    x341 = x339 + x340 * x77
    x342 = -x6 * (x315 + x324)
    x343 = -x12 * x81 + 2.0 * x2 * x20 * x23 * x28 * x29 * x314 * x44
    x344 = (
        x327 * x5
        - x42 * (x321 + x326)
        - x82 * (x325 * x5 + x342 - x82 * (x323 * x5 - x343 * x82))
    )
    x345 = x344 * x4
    x346 = x327 * x6
    x347 = 3.0 * x346
    x348 = x55 * (
        x337 * x62 + x56 * (x335 * x62 + x56 * (x331 * x62 + x56 * (x345 + x347)))
    )
    x349 = x92 * (x328 + x330)
    x350 = x332 * x92
    x351 = x333 * x92 + x350
    x352 = x349 * x56 + x351 * x68
    x353 = x121 * x4
    x354 = x332 * x353 + x351 * x56
    x355 = x55 * (x352 * x56 + x354 * x68)
    x356 = x101 * x340 + x355
    x357 = x55 * (x352 * x62 + x56 * (x349 * x62 + x56 * x92 * (x345 + x347)))
    x358 = x12 * x327 + x52
    x359 = x12 * x322 + x58
    x360 = x359 * x68
    x361 = x358 * x56 + x360
    x362 = x12 * x320 + x66
    x363 = x362 * x87
    x364 = x359 * x56 + x363
    x365 = x361 * x56 + x364 * x68
    x366 = x218 * x362 + x364 * x56
    x367 = x55 * (x365 * x56 + x366 * x68)
    x368 = x112 * x340 + x367
    x369 = x12 * x344 + x85
    x370 = x55 * (x365 * x62 + x56 * (x361 * x62 + x56 * (x358 * x62 + x369 * x56)))
    x371 = x114 * (x328 + x330)
    x372 = x114 * x332
    x373 = x114 * x333 + x372
    x374 = x55 * (x371 * x56 + x373 * x68)
    x375 = x119 * x340 + x374
    x376 = x55 * (x114 * x56 * (x345 + x347) + x371 * x62)
    x377 = x359 * x42
    x378 = x121 * x377 + x353 * x358
    x379 = x121 * x6
    x380 = x362 * x379
    x381 = x353 * x359 + x380
    x382 = x55 * (x378 * x56 + x381 * x68)
    x383 = x127 * x340 + x382
    x384 = x358 * x61
    x385 = x55 * (x378 * x62 + x56 * (x121 * x384 + x353 * x369))
    x386 = x104 * x358 + x246
    x387 = x104 * x359 + x248
    x388 = x387 * x68
    x389 = x386 * x56 + x388
    x390 = x104 * x362 + x108
    x391 = x390 * x87
    x392 = x387 * x56 + x391
    x393 = x55 * (x389 * x56 + x392 * x68)
    x394 = x135 * x340 + x393
    x395 = x104 * x369 + x256
    x396 = x55 * (x389 * x62 + x56 * (x386 * x62 + x395 * x56))
    x397 = x138 * x55 * (x328 + x330)
    x398 = x140 * x340 + x397
    x399 = x138 * x55 * (x345 + x347)
    x400 = x141 * x4
    x401 = x55 * (x141 * x377 + x358 * x400)
    x402 = x144 * x340 + x401
    x403 = x55 * (x141 * x384 + x369 * x400)
    x404 = x121 * x42
    x405 = x55 * (x353 * x386 + x387 * x404)
    x406 = x148 * x340 + x405
    x407 = x55 * (x121 * x386 * x61 + x353 * x395)
    x408 = x104 * x386 + x281
    x409 = x104 * x387 + x283
    x410 = x409 * x68
    x411 = x55 * (x408 * x56 + x410)
    x412 = x152 * x340 + x411
    x413 = x104 * x395 + x288
    x414 = x55 * (x408 * x62 + x413 * x56)
    x415 = x154 * x327
    x416 = x22 * x41
    x417 = x154 * x416 + x415
    x418 = x154 * x344
    x419 = x157 * x358
    x420 = x158 * x416 + x419
    x421 = x157 * x369
    x422 = x141 * x386
    x423 = x153 * x416
    x424 = x161 * x423 + x422
    x425 = x141 * x395
    x426 = x121 * x408
    x427 = x165 * x423 + x426
    x428 = x121 * x413
    x429 = x55 * (x104 * x408 + x306)
    x430 = x167 * x416 + x429
    x431 = x55 * (x104 * x413 + x309)
    x432 = x169 * x171 - x179 * x9 + x43
    x433 = x16 * x432
    x434 = x172 * x9
    x435 = x6 * (x169 * x175 - x433 - x434 - x79)
    x436 = x169 * x175 + x32 - x434
    x437 = -x4 * x433 + x436 * x5
    x438 = x16 * x9
    x439 = x169 * x178 - x199 * x438 + x80
    x440 = x435 + x437 * x5 - x82 * (x432 * x5 - x439 * x82)
    x441 = x4 * x440
    x442 = x437 * x6
    x443 = 2.0 * x442
    x444 = x436 * x6
    x445 = x4 * x437
    x446 = x444 + x445
    x447 = x56 * (x444 + x446)
    x448 = x193 * x444 + x447 * x56
    x449 = x55 * (
        x448 * x68 + x56 * (x447 * x68 + x56 * (x446 * x68 + x56 * (x441 + x443)))
    )
    x450 = x195 * x21 + x449
    x451 = x440 * x9
    x452 = 2.0 * x202
    x453 = x451 + x452
    x454 = x437 * x9
    x455 = x185 + x454
    x456 = x436 * x9
    x457 = 2.0 * x187
    x458 = x456 + x457
    x459 = x455 * x56 + x458 * x87
    x460 = x218 * x458 + x459 * x56
    x461 = x55 * (x460 * x68 + x56 * (x459 * x68 + x56 * (x453 * x56 + x455 * x68)))
    x462 = x21 * x220 + x461
    x463 = x104 * x444
    x464 = x104 * x445 + x463
    x465 = x231 * x444 + x464 * x56
    x466 = x55 * (x465 * x68 + x56 * (x104 * x56 * (x441 + x443) + x464 * x68))
    x467 = x21 * x233 + x466
    x468 = x207 * x68 + x453 * x92
    x469 = x210 + x455 * x92
    x470 = x214 * x42 + x458 * x92
    x471 = x469 * x56 + x470 * x87
    x472 = x55 * (x471 * x68 + x56 * (x468 * x56 + x469 * x68))
    x473 = x21 * x242 + x472
    x474 = x104 * (x451 + x452)
    x475 = x104 * x454 + x226
    x476 = x104 * (x456 + x457)
    x477 = x475 * x56 + x476 * x87
    x478 = x55 * (x477 * x68 + x56 * (x474 * x56 + x475 * x68))
    x479 = x21 * x254 + x478
    x480 = x130 * x444
    x481 = x130 * x445 + x480
    x482 = x55 * (x130 * x56 * (x441 + x443) + x481 * x68)
    x483 = x21 * x264 + x482
    x484 = x236 * x68 + x468 * x92
    x485 = x238 + x469 * x92
    x486 = x55 * (x484 * x56 + x485 * x68)
    x487 = x21 * x270 + x486
    x488 = x247 * x68 + x474 * x92
    x489 = x250 + x475 * x92
    x490 = x55 * (x488 * x56 + x489 * x68)
    x491 = x21 * x277 + x490
    x492 = x130 * (x451 + x452)
    x493 = x130 * x454 + x260
    x494 = x55 * (x492 * x56 + x493 * x68)
    x495 = x21 * x286 + x494
    x496 = x150 * x55 * (x441 + x443)
    x497 = x21 * x292 + x496
    x498 = x55 * (x267 * x68 + x484 * x92)
    x499 = x21 * x295 + x498
    x500 = x55 * (x274 * x68 + x488 * x92)
    x501 = x21 * x299 + x500
    x502 = x55 * (x282 * x68 + x492 * x92)
    x503 = x21 * x302 + x502
    x504 = x150 * x55 * (x451 + x452)
    x505 = x21 * x307 + x504
    x506 = x167 * x440
    x507 = x21 * x311 + x506
    x508 = x169 * x316 - x324 * x9
    x509 = x16 * x508
    x510 = -x169 * x320 + x317 * x9
    x511 = -x6 * (x509 + x510)
    x512 = -x510
    x513 = -x4 * x509 + x5 * x512
    x514 = x169 * x323 - x343 * x438
    x515 = x5 * x513 + x511 - x82 * (x5 * x508 - x514 * x82)
    x516 = x42 * x513
    x517 = x512 * x6
    x518 = x4 * x513 + x517
    x519 = x56 * (x517 + x518)
    x520 = x193 * x517 + x519 * x56
    x521 = x55 * (
        x520 * x68 + x56 * (x519 * x68 + x56 * (x518 * x68 + x56 * (x4 * x515 + x516)))
    )
    x522 = x195 * x22 + x521
    x523 = x346 + x515 * x9
    x524 = x329 + x513 * x9
    x525 = x524 * x68
    x526 = x332 + x512 * x9
    x527 = x524 * x56 + x526 * x87
    x528 = x218 * x526 + x527 * x56
    x529 = x55 * (x528 * x68 + x56 * (x527 * x68 + x56 * (x523 * x56 + x525)))
    x530 = x22 * x220 + x529
    x531 = x12 * x515 + x202
    x532 = x12 * x513 + x184
    x533 = x532 * x68
    x534 = x12 * x512 + x187
    x535 = x532 * x56 + x534 * x87
    x536 = x218 * x534 + x535 * x56
    x537 = x55 * (x536 * x68 + x56 * (x535 * x68 + x56 * (x531 * x56 + x533)))
    x538 = x22 * x233 + x537
    x539 = x92 * (x346 + x523)
    x540 = x92 * (x329 + x524)
    x541 = x540 * x68
    x542 = x350 + x526 * x92
    x543 = x540 * x56 + x542 * x87
    x544 = x55 * (x543 * x68 + x56 * (x539 * x56 + x541))
    x545 = x22 * x242 + x544
    x546 = x358 * x87 + x531 * x92
    x547 = x359 * x87 + x532 * x92
    x548 = x547 * x68
    x549 = x363 + x534 * x92
    x550 = x547 * x56 + x549 * x87
    x551 = x55 * (x550 * x68 + x56 * (x546 * x56 + x548))
    x552 = x22 * x254 + x551
    x553 = x104 * (x202 + x531)
    x554 = x104 * (x184 + x532)
    x555 = x554 * x68
    x556 = x104 * x534 + x228
    x557 = x554 * x56 + x556 * x87
    x558 = x55 * (x557 * x68 + x56 * (x553 * x56 + x555))
    x559 = x22 * x264 + x558
    x560 = x114 * x346 + x539 * x92
    x561 = x114 * x329 + x540 * x92
    x562 = x561 * x68
    x563 = x55 * (x56 * x560 + x562)
    x564 = x22 * x270 + x563
    x565 = x358 * x379 + x546 * x92
    x566 = x359 * x379 + x547 * x92
    x567 = x566 * x68
    x568 = x55 * (x56 * x565 + x567)
    x569 = x22 * x277 + x568
    x570 = x386 * x87 + x553 * x92
    x571 = x387 * x87 + x554 * x92
    x572 = x571 * x68
    x573 = x55 * (x56 * x570 + x572)
    x574 = x22 * x286 + x573
    x575 = x104 * x553 + x130 * x202
    x576 = x104 * x554 + x130 * x184
    x577 = x576 * x68
    x578 = x55 * (x56 * x575 + x577)
    x579 = x22 * x292 + x578
    x580 = x55 * (x138 * x346 + x560 * x92)
    x581 = x22 * x295 + x580
    x582 = x141 * x6
    x583 = x55 * (x358 * x582 + x565 * x92)
    x584 = x22 * x299 + x583
    x585 = x55 * (x379 * x386 + x570 * x92)
    x586 = x22 * x302 + x585
    x587 = x55 * (x408 * x87 + x575 * x92)
    x588 = x22 * x307 + x587
    x589 = x55 * (x104 * x575 + x150 * x202)
    x590 = x22 * x311 + x589
    x591 = -x12 * x324 + x314 * x316 + x43
    x592 = x16 * x591
    x593 = x12 * x317
    x594 = x6 * (x314 * x320 - x592 - x593 - x79)
    x595 = x314 * x320 + x32 - x593
    x596 = -x4 * x592 + x5 * x595
    x597 = x12 * x16
    x598 = x314 * x323 - x343 * x597 + x80
    x599 = x5 * x596 + x594 - x82 * (x5 * x591 - x598 * x82)
    x600 = x4 * x599
    x601 = x596 * x6
    x602 = 2.0 * x601
    x603 = x595 * x6
    x604 = x4 * x596
    x605 = x603 + x604
    x606 = x56 * (x603 + x605)
    x607 = x193 * x603 + x56 * x606
    x608 = x55 * (
        x56 * (x56 * (x56 * (x600 + x602) + x605 * x68) + x606 * x68) + x607 * x68
    )
    x609 = x22 * x339 + x608
    x610 = x603 * x92
    x611 = x604 * x92 + x610
    x612 = x353 * x603 + x56 * x611
    x613 = x55 * (x56 * (x56 * x92 * (x600 + x602) + x611 * x68) + x612 * x68)
    x614 = x22 * x355 + x613
    x615 = x12 * x599 + 2.0 * x346
    x616 = x12 * x596 + x330
    x617 = x12 * x595 + 2.0 * x332
    x618 = x617 * x87
    x619 = x56 * x616 + x618
    x620 = x218 * x617 + x56 * x619
    x621 = x55 * (x56 * (x56 * (x56 * x615 + x616 * x68) + x619 * x68) + x620 * x68)
    x622 = x22 * x367 + x621
    x623 = x114 * x603
    x624 = x114 * x604 + x623
    x625 = x55 * (x114 * x56 * (x600 + x602) + x624 * x68)
    x626 = x22 * x374 + x625
    x627 = x379 * x617
    x628 = x353 * x616 + x627
    x629 = x55 * (x56 * (x353 * x615 + x404 * x616) + x628 * x68)
    x630 = x22 * x382 + x629
    x631 = x104 * x615 + x358 * x68
    x632 = x104 * x616 + x360
    x633 = x104 * x617 + x362 * x68
    x634 = x633 * x87
    x635 = x56 * x632 + x634
    x636 = x55 * (x56 * (x56 * x631 + x632 * x68) + x635 * x68)
    x637 = x22 * x393 + x636
    x638 = x138 * x55 * (x600 + x602)
    x639 = x22 * x397 + x638
    x640 = x55 * (x141 * x42 * x616 + x400 * x615)
    x641 = x22 * x401 + x640
    x642 = x55 * (x353 * x631 + x404 * x632)
    x643 = x22 * x405 + x642
    x644 = x104 * x631 + x386 * x68
    x645 = x104 * x632 + x388
    x646 = x55 * (x56 * x644 + x645 * x68)
    x647 = x22 * x411 + x646
    x648 = x154 * x599
    x649 = x22 * x415 + x648
    x650 = x157 * x615
    x651 = x22 * x419 + x650
    x652 = x141 * x631
    x653 = x22 * x422 + x652
    x654 = x121 * x644
    x655 = x22 * x426 + x654
    x656 = x55 * (x104 * x644 + x408 * x68)
    x657 = x22 * x429 + x656
    x658 = x4**3
    x659 = x137 * x658
    x660 = x187 * x659 + x194 * x56
    x661 = x137 * x7
    x662 = x6 * x661
    x663 = x213 * x662 + x219 * x56
    x664 = x12 * x661
    x665 = x187 * x664 + x232 * x56
    x666 = x218 * x240 + x241 * x56
    x667 = x218 * x252 + x253 * x56
    x668 = x13 * x137 * x4
    x669 = x187 * x668 + x263 * x56
    x670 = x118 + x240 * x92
    x671 = x268 * x56 + x670 * x87
    x672 = x126 + x252 * x92
    x673 = x275 * x56 + x672 * x87
    x674 = x130 * x212 + x134
    x675 = x284 * x56 + x674 * x87
    x676 = x150 * x187
    x677 = x150 * x188 + x676
    x678 = x138 * x58 + x268 * x92
    x679 = x142 * x58 + x275 * x92
    x680 = x146 * x58 + x284 * x92
    x681 = x150 * x58
    x682 = x150 * x208 + x681
    x683 = x167 * x177
    x684 = x55 * (x444 * x659 + x448 * x56)
    x685 = x196 * x660 + x684
    x686 = 0.009523809523809524 * x90
    x687 = x55 * (x458 * x662 + x460 * x56)
    x688 = x196 * x663 + x687
    x689 = 0.06666666666666667 * x102
    x690 = x55 * (x444 * x664 + x465 * x56)
    x691 = x196 * x665 + x690
    x692 = x55 * (x218 * x470 + x471 * x56)
    x693 = x196 * x666 + x692
    x694 = x55 * (x218 * x476 + x477 * x56)
    x695 = x196 * x667 + x694
    x696 = x128 * x259
    x697 = x55 * (x444 * x668 + x481 * x56)
    x698 = x196 * x669 + x697
    x699 = x240 * x68 + x470 * x92
    x700 = x55 * (x485 * x56 + x699 * x87)
    x701 = x196 * x671 + x700
    x702 = x252 * x68 + x476 * x92
    x703 = x55 * (x489 * x56 + x702 * x87)
    x704 = x196 * x673 + x703
    x705 = x130 * (x456 + x457)
    x706 = x55 * (x493 * x56 + x705 * x87)
    x707 = x196 * x675 + x706
    x708 = x150 * x444
    x709 = x55 * (x150 * x445 + x708)
    x710 = x196 * x677 + x709
    x711 = x55 * (x269 + x485 * x92)
    x712 = x196 * x678 + x711
    x713 = x55 * (x276 + x489 * x92)
    x714 = x196 * x679 + x713
    x715 = x55 * (x285 + x493 * x92)
    x716 = x196 * x680 + x715
    x717 = x55 * (x150 * x454 + x291)
    x718 = x196 * x682 + x717
    x719 = x167 * x437
    x720 = x21 * x683 + x719
    x721 = x55 * (x517 * x659 + x520 * x56)
    x722 = x340 * x660 + x721
    x723 = x55 * (x526 * x662 + x528 * x56)
    x724 = x340 * x663 + x723
    x725 = x55 * (x534 * x662 + x536 * x56)
    x726 = x340 * x665 + x725
    x727 = x55 * (x218 * x542 + x543 * x56)
    x728 = x340 * x666 + x727
    x729 = x55 * (x218 * x549 + x550 * x56)
    x730 = x340 * x667 + x729
    x731 = x55 * (x218 * x556 + x557 * x56)
    x732 = x340 * x669 + x731
    x733 = x372 + x542 * x92
    x734 = x55 * (x56 * x561 + x733 * x87)
    x735 = x340 * x671 + x734
    x736 = x380 + x549 * x92
    x737 = x55 * (x56 * x566 + x736 * x87)
    x738 = x340 * x673 + x737
    x739 = x391 + x556 * x92
    x740 = x55 * (x56 * x571 + x739 * x87)
    x741 = x340 * x675 + x740
    x742 = x104 * x556 + x262
    x743 = x55 * (x56 * x576 + x742 * x87)
    x744 = x340 * x677 + x743
    x745 = x55 * (x138 * x329 + x561 * x92)
    x746 = x340 * x678 + x745
    x747 = x55 * (x359 * x582 + x566 * x92)
    x748 = x340 * x679 + x747
    x749 = x55 * (x379 * x387 + x571 * x92)
    x750 = x340 * x680 + x749
    x751 = x55 * (x409 * x87 + x576 * x92)
    x752 = x340 * x682 + x751
    x753 = x55 * (x104 * x576 + x150 * x184)
    x754 = x22 * x683 + x753
    x755 = x169 * x436 + 2.0 * x174 - x433 * x9
    x756 = x6 * x755
    x757 = x169 * x432 + 2.0 * x198 - x438 * x439
    x758 = x5 * x755 - x757 * x82
    x759 = x4 * x758
    x760 = x21 * x684 + x55 * (
        x56 * (x193 * x756 + x56**2 * (2.0 * x756 + x759)) + x659 * x756
    )
    x761 = x755 * x9
    x762 = 3.0 * x444
    x763 = x761 + x762
    x764 = x763 * x87
    x765 = x758 * x9
    x766 = 3.0 * x442
    x767 = x765 + x766
    x768 = x21 * x687 + x55 * (
        x56 * (x218 * x763 + x56 * (x56 * x767 + x764)) + x662 * x763
    )
    x769 = x104 * x756
    x770 = x21 * x690 + x55 * (
        x56 * (x231 * x756 + x56 * (x104 * x759 + x769)) + x664 * x756
    )
    x771 = x458 * x62 + x763 * x92
    x772 = x771 * x87
    x773 = x455 * x62 + x767 * x92
    x774 = x21 * x692 + x55 * (x218 * x771 + x56 * (x56 * x773 + x772))
    x775 = x104 * (x761 + x762)
    x776 = x775 * x87
    x777 = x104 * (x765 + x766)
    x778 = x21 * x694 + x55 * (x218 * x775 + x56 * (x56 * x777 + x776))
    x779 = x130 * x756
    x780 = x21 * x697 + x55 * (x56 * (x130 * x759 + x779) + x668 * x756)
    x781 = x470 * x62 + x771 * x92
    x782 = x781 * x87
    x783 = x469 * x62 + x773 * x92
    x784 = x21 * x700 + x55 * (x56 * x783 + x782)
    x785 = x476 * x62 + x775 * x92
    x786 = x785 * x87
    x787 = x475 * x62 + x777 * x92
    x788 = x21 * x703 + x55 * (x56 * x787 + x786)
    x789 = x130 * (x761 + x762)
    x790 = x789 * x87
    x791 = x130 * (x765 + x766)
    x792 = x21 * x706 + x55 * (x56 * x791 + x790)
    x793 = x150 * x756
    x794 = x21 * x709 + x55 * (x150 * x759 + x793)
    x795 = x21 * x711 + x55 * (x485 * x62 + x783 * x92)
    x796 = x21 * x713 + x55 * (x489 * x62 + x787 * x92)
    x797 = x21 * x715 + x55 * (x493 * x62 + x791 * x92)
    x798 = x150 * x55 * (x765 + x766) + x21 * x717
    x799 = x167 * x758 + x21 * x719
    x800 = x169 * x512 + x319 - x509 * x9
    x801 = x6 * x800
    x802 = x169 * x508 + x342 - x438 * x514
    x803 = x5 * x800 - x802 * x82
    x804 = x55 * (x56 * (x193 * x801 + x56**2 * (x4 * x803 + 2.0 * x801)) + x659 * x801)
    x805 = x22 * x684 + x804
    x806 = 2.0 * x517
    x807 = x800 * x9 + x806
    x808 = x516 + x803 * x9
    x809 = x55 * (x56 * (x218 * x807 + x56 * (x56 * x808 + x807 * x87)) + x662 * x807)
    x810 = x22 * x687 + x809
    x811 = x12 * x800 + x444
    x812 = x12 * x803 + x442
    x813 = x55 * (x56 * (x218 * x811 + x56 * (x56 * x812 + x811 * x87)) + x662 * x811)
    x814 = x22 * x690 + x813
    x815 = x526 * x68 + x807 * x92
    x816 = x525 + x808 * x92
    x817 = x55 * (x218 * x815 + x56 * (x56 * x816 + x815 * x87))
    x818 = x22 * x692 + x817
    x819 = x534 * x68
    x820 = x811 * x92 + x819
    x821 = x533 + x812 * x92
    x822 = x55 * (x218 * x820 + x56 * (x56 * x821 + x820 * x87))
    x823 = x22 * x694 + x822
    x824 = x104 * x811 + x463
    x825 = x104 * (x442 + x812)
    x826 = x55 * (x218 * x824 + x56 * (x56 * x825 + x824 * x87))
    x827 = x22 * x697 + x826
    x828 = x542 * x68 + x815 * x92
    x829 = x541 + x816 * x92
    x830 = x55 * (x56 * x829 + x828 * x87)
    x831 = x22 * x700 + x830
    x832 = x549 * x68 + x820 * x92
    x833 = x548 + x821 * x92
    x834 = x55 * (x56 * x833 + x832 * x87)
    x835 = x22 * x703 + x834
    x836 = x556 * x68
    x837 = x824 * x92 + x836
    x838 = x555 + x825 * x92
    x839 = x55 * (x56 * x838 + x837 * x87)
    x840 = x22 * x706 + x839
    x841 = x104 * x824 + x480
    x842 = x104 * x825 + x130 * x442
    x843 = x55 * (x56 * x842 + x841 * x87)
    x844 = x22 * x709 + x843
    x845 = x55 * (x562 + x829 * x92)
    x846 = x22 * x711 + x845
    x847 = x55 * (x567 + x833 * x92)
    x848 = x22 * x713 + x847
    x849 = x55 * (x572 + x838 * x92)
    x850 = x22 * x715 + x849
    x851 = x55 * (x577 + x842 * x92)
    x852 = x22 * x717 + x851
    x853 = x55 * (x104 * x842 + x150 * x442)
    x854 = x22 * x719 + x853
    x855 = x169 * x595 - x592 * x9
    x856 = x6 * x855
    x857 = x169 * x591 - x438 * x598
    x858 = x5 * x855 - x82 * x857
    x859 = x55 * (x56 * (x193 * x856 + x56**2 * (x4 * x858 + 2.0 * x856)) + x659 * x856)
    x860 = x22 * x721 + x859
    x861 = x603 + x855 * x9
    x862 = x601 + x858 * x9
    x863 = x55 * (x56 * (x218 * x861 + x56 * (x56 * x862 + x861 * x87)) + x662 * x861)
    x864 = x22 * x723 + x863
    x865 = x12 * x855 + x806
    x866 = x12 * x858 + x516
    x867 = x55 * (x56 * (x218 * x865 + x56 * (x56 * x866 + x865 * x87)) + x662 * x865)
    x868 = x22 * x725 + x867
    x869 = x610 + x861 * x92
    x870 = x92 * (x601 + x862)
    x871 = x55 * (x218 * x869 + x56 * (x56 * x870 + x869 * x87))
    x872 = x22 * x727 + x871
    x873 = x618 + x865 * x92
    x874 = x616 * x87 + x866 * x92
    x875 = x55 * (x218 * x873 + x56 * (x56 * x874 + x87 * x873))
    x876 = x22 * x729 + x875
    x877 = x104 * x865 + x819
    x878 = x104 * x866 + x533
    x879 = x55 * (x218 * x877 + x56 * (x56 * x878 + x87 * x877))
    x880 = x22 * x731 + x879
    x881 = x623 + x869 * x92
    x882 = x114 * x601 + x870 * x92
    x883 = x55 * (x56 * x882 + x87 * x881)
    x884 = x22 * x734 + x883
    x885 = x627 + x873 * x92
    x886 = x379 * x616 + x874 * x92
    x887 = x55 * (x56 * x886 + x87 * x885)
    x888 = x22 * x737 + x887
    x889 = x634 + x877 * x92
    x890 = x632 * x87 + x878 * x92
    x891 = x55 * (x56 * x890 + x87 * x889)
    x892 = x22 * x740 + x891
    x893 = x104 * x877 + x836
    x894 = x104 * x878 + x555
    x895 = x55 * (x56 * x894 + x87 * x893)
    x896 = x22 * x743 + x895
    x897 = x55 * (x138 * x601 + x882 * x92)
    x898 = x22 * x745 + x897
    x899 = x55 * (x582 * x616 + x886 * x92)
    x900 = x22 * x747 + x899
    x901 = x55 * (x379 * x632 + x890 * x92)
    x902 = x22 * x749 + x901
    x903 = x55 * (x645 * x87 + x894 * x92)
    x904 = x22 * x751 + x903
    x905 = x55 * (x104 * x894 + x577)
    x906 = x22 * x753 + x905
    x907 = x332 * x659 + x338 * x56
    x908 = x661 * x9
    x909 = x332 * x908 + x354 * x56
    x910 = x362 * x662 + x366 * x56
    x911 = x332 * x400 + x373 * x56
    x912 = x145 * x4
    x913 = x6 * x912
    x914 = x362 * x913 + x381 * x56
    x915 = x218 * x390 + x392 * x56
    x916 = x138 * x332
    x917 = x138 * x333 + x916
    x918 = x362 * x582
    x919 = x359 * x400 + x918
    x920 = x379 * x390
    x921 = x353 * x387 + x920
    x922 = x104 * x390 + x134
    x923 = x87 * x922
    x924 = x409 * x56 + x923
    x925 = x154 * x322
    x926 = x157 * x359
    x927 = x141 * x387
    x928 = x121 * x409
    x929 = x104 * x409 + x681
    x930 = x196 * x907 + x721
    x931 = x196 * x909 + x723
    x932 = x196 * x910 + x725
    x933 = x196 * x911 + x727
    x934 = x196 * x914 + x729
    x935 = x196 * x915 + x731
    x936 = x196 * x917 + x734
    x937 = x196 * x919 + x737
    x938 = x196 * x921 + x740
    x939 = x196 * x924 + x743
    x940 = x21 * x925 + x745
    x941 = x21 * x926 + x747
    x942 = x21 * x927 + x749
    x943 = x21 * x928 + x751
    x944 = x196 * x929 + x753
    x945 = x55 * (x56 * x607 + x603 * x659)
    x946 = x340 * x907 + x945
    x947 = x55 * (x56 * x612 + x603 * x908)
    x948 = x340 * x909 + x947
    x949 = x55 * (x56 * x620 + x617 * x662)
    x950 = x340 * x910 + x949
    x951 = x55 * (x400 * x603 + x56 * x624)
    x952 = x340 * x911 + x951
    x953 = x55 * (x56 * x628 + x617 * x913)
    x954 = x340 * x914 + x953
    x955 = x55 * (x218 * x633 + x56 * x635)
    x956 = x340 * x915 + x955
    x957 = x138 * x603
    x958 = x55 * (x138 * x604 + x957)
    x959 = x340 * x917 + x958
    x960 = x582 * x617
    x961 = x55 * (x400 * x616 + x960)
    x962 = x340 * x919 + x961
    x963 = x379 * x633
    x964 = x55 * (x353 * x632 + x963)
    x965 = x340 * x921 + x964
    x966 = x104 * x633 + x390 * x68
    x967 = x87 * x966
    x968 = x55 * (x56 * x645 + x967)
    x969 = x340 * x924 + x968
    x970 = x154 * x596
    x971 = x22 * x925 + x970
    x972 = x157 * x616
    x973 = x22 * x926 + x972
    x974 = x141 * x632
    x975 = x22 * x927 + x974
    x976 = x121 * x645
    x977 = x22 * x928 + x976
    x978 = x55 * (x104 * x645 + x410)
    x979 = x340 * x929 + x978
    x980 = x21 * x721 + x804
    x981 = x21 * x723 + x809
    x982 = x21 * x725 + x813
    x983 = x21 * x727 + x817
    x984 = x21 * x729 + x822
    x985 = x21 * x731 + x826
    x986 = x21 * x734 + x830
    x987 = x21 * x737 + x834
    x988 = x21 * x740 + x839
    x989 = x21 * x743 + x843
    x990 = x21 * x745 + x845
    x991 = x21 * x747 + x847
    x992 = x21 * x749 + x849
    x993 = x21 * x751 + x851
    x994 = x21 * x753 + x853
    x995 = -x12 * x592 + x314 * x595 + 2.0 * x319
    x996 = x6 * x995
    x997 = x314 * x591 + 2.0 * x342 - x597 * x598
    x998 = x5 * x995 - x82 * x997
    x999 = x4 * x998
    x1000 = x22 * x945 + x55 * (
        x56 * (x193 * x996 + x56**2 * (2.0 * x996 + x999)) + x659 * x996
    )
    x1001 = x92 * x996
    x1002 = x22 * x947 + x55 * (
        x56 * (x353 * x996 + x56 * (x1001 + x92 * x999)) + x908 * x996
    )
    x1003 = x12 * x995 + 3.0 * x603
    x1004 = x1003 * x87
    x1005 = x12 * x998 + 3.0 * x601
    x1006 = x22 * x949 + x55 * (
        x1003 * x662 + x56 * (x1003 * x218 + x56 * (x1004 + x1005 * x56))
    )
    x1007 = x114 * x996
    x1008 = x22 * x951 + x55 * (x400 * x996 + x56 * (x1007 + x114 * x999))
    x1009 = x1003 * x379
    x1010 = x1003 * x4
    x1011 = x22 * x953 + x55 * (x1010 * x145 * x6 + x56 * (x1005 * x353 + x1009))
    x1012 = x1003 * x104 + x617 * x62
    x1013 = x1012 * x87
    x1014 = x1005 * x104 + x616 * x62
    x1015 = x22 * x955 + x55 * (x1012 * x218 + x56 * (x1013 + x1014 * x56))
    x1016 = x138 * x996
    x1017 = x22 * x958 + x55 * (x1016 + x138 * x999)
    x1018 = x1003 * x582
    x1019 = x22 * x961 + x55 * (x1005 * x400 + x1018)
    x1020 = x1012 * x379
    x1021 = x22 * x964 + x55 * (x1014 * x353 + x1020)
    x1022 = x1012 * x104 + x62 * x633
    x1023 = x1022 * x87
    x1024 = x1014 * x104 + x62 * x632
    x1025 = x22 * x968 + x55 * (x1023 + x1024 * x56)
    x1026 = x154 * x998 + x22 * x970
    x1027 = x1005 * x157 + x22 * x972
    x1028 = x1014 * x141 + x22 * x974
    x1029 = x1024 * x121 + x22 * x976
    x1030 = x22 * x978 + x55 * (x1024 * x104 + x62 * x645)
    x1031 = x153 * x4**4
    x1032 = x0 * x436
    x1033 = x153 * x658
    x1034 = x1033 * x458
    x1035 = x1033 * x12
    x1036 = x0 * x661
    x1037 = x13 * x7
    x1038 = x1032 * x153
    x1039 = x0 * x217
    x1040 = x149 * x4
    x1041 = x670 * x68 + x699 * x92
    x1042 = x672 * x68 + x702 * x92
    x1043 = x674 * x68 + x705 * x92
    x1044 = x150 * (x456 + x457)
    x1045 = x1031 * x755
    x1046 = x21 * x436
    x1047 = x1031 * x1046 + x1045
    x1048 = x1033 * x763
    x1049 = x1034 * x21 + x1048
    x1050 = x1035 * x755
    x1051 = x1035 * x1046 + x1050
    x1052 = x661 * x771
    x1053 = x21 * x661
    x1054 = x1052 + x1053 * x470
    x1055 = x661 * x775
    x1056 = x1053 * x476 + x1055
    x1057 = x153 * x755
    x1058 = x1037 * x1057
    x1059 = x1046 * x153
    x1060 = x1037 * x1059 + x1058
    x1061 = x217 * x781
    x1062 = x21 * x217
    x1063 = x1061 + x1062 * x699
    x1064 = x217 * x785
    x1065 = x1062 * x702 + x1064
    x1066 = x217 * x789
    x1067 = x1062 * x705 + x1066
    x1068 = x1040 * x1057
    x1069 = x1040 * x1059 + x1068
    x1070 = x55 * (x62 * x699 + x781 * x92)
    x1071 = x1041 * x196 + x1070
    x1072 = x55 * (x62 * x702 + x785 * x92)
    x1073 = x1042 * x196 + x1072
    x1074 = x55 * (x62 * x705 + x789 * x92)
    x1075 = x1043 * x196 + x1074
    x1076 = x150 * x55 * (x761 + x762)
    x1077 = x1044 * x196 + x1076
    x1078 = x167 * x755
    x1079 = x1046 * x167 + x1078
    x1080 = x1031 * x800
    x1081 = x22 * x436
    x1082 = x1031 * x1081 + x1080
    x1083 = x1033 * x807
    x1084 = x1034 * x22 + x1083
    x1085 = x1033 * x811
    x1086 = x1035 * x1081 + x1085
    x1087 = x661 * x815
    x1088 = x22 * x661
    x1089 = x1087 + x1088 * x470
    x1090 = x661 * x820
    x1091 = x1088 * x476 + x1090
    x1092 = x661 * x824
    x1093 = x1081 * x153
    x1094 = x1037 * x1093 + x1092
    x1095 = x217 * x828
    x1096 = x217 * x22
    x1097 = x1095 + x1096 * x699
    x1098 = x217 * x832
    x1099 = x1096 * x702 + x1098
    x1100 = x217 * x837
    x1101 = x1096 * x705 + x1100
    x1102 = x217 * x841
    x1103 = x1040 * x1093 + x1102
    x1104 = x55 * (x68 * x733 + x828 * x92)
    x1105 = x1041 * x340 + x1104
    x1106 = x55 * (x68 * x736 + x832 * x92)
    x1107 = x1042 * x340 + x1106
    x1108 = x55 * (x68 * x739 + x837 * x92)
    x1109 = x1043 * x340 + x1108
    x1110 = x68 * x742
    x1111 = x55 * (x1110 + x841 * x92)
    x1112 = x1044 * x340 + x1111
    x1113 = x55 * (x104 * x841 + x708)
    x1114 = x1081 * x167 + x1113
    x1115 = x169 * x755 + 3.0 * x435 - x438 * x757
    x1116 = x1115 * x9
    x1117 = 4.0 * x756
    x1118 = x1116 + x1117
    x1119 = x1118 * x92 + 4.0 * x764
    x1120 = x104 * (x1116 + x1117)
    x1121 = x1115 * x153
    x1122 = x1119 * x92 + 4.0 * x772
    x1123 = x1120 * x92 + 4.0 * x776
    x1124 = x130 * (x1116 + x1117)
    x1125 = x169 * x800 - x438 * x802 + 2.0 * x511
    x1126 = x1031 * x1125
    x1127 = x1125 * x9 + 3.0 * x801
    x1128 = x1033 * x1127
    x1129 = x1125 * x12 + x756
    x1130 = x1033 * x1129
    x1131 = x1127 * x92 + x62 * x807
    x1132 = x1131 * x661
    x1133 = x1129 * x92 + x62 * x811
    x1134 = x1133 * x661
    x1135 = x104 * x1129 + x769
    x1136 = x1135 * x661
    x1137 = x1131 * x92 + x62 * x815
    x1138 = x1137 * x217
    x1139 = x1133 * x92 + x62 * x820
    x1140 = x1139 * x217
    x1141 = x1135 * x92 + x62 * x824
    x1142 = x1141 * x217
    x1143 = x104 * x1135 + x779
    x1144 = x1143 * x217
    x1145 = x55 * (x1137 * x92 + x62 * x828)
    x1146 = x55 * (x1139 * x92 + x62 * x832)
    x1147 = x55 * (x1141 * x92 + x62 * x837)
    x1148 = x55 * (x1143 * x92 + x62 * x841)
    x1149 = x55 * (x104 * x1143 + x793)
    x1150 = x169 * x855 - x438 * x857 + x594
    x1151 = x1031 * x1150
    x1152 = x1080 * x22 + x1151
    x1153 = x1150 * x9 + 2.0 * x856
    x1154 = x1033 * x1153
    x1155 = x1083 * x22 + x1154
    x1156 = x1150 * x12 + 2.0 * x801
    x1157 = x1033 * x1156
    x1158 = x1085 * x22 + x1157
    x1159 = x1153 * x92 + x68 * x861
    x1160 = x1159 * x661
    x1161 = x1087 * x22 + x1160
    x1162 = x1156 * x92 + x68 * x865
    x1163 = x1162 * x661
    x1164 = x1090 * x22 + x1163
    x1165 = x104 * x1156 + x68 * x811
    x1166 = x1165 * x661
    x1167 = x1092 * x22 + x1166
    x1168 = x1159 * x92 + x68 * x869
    x1169 = x1168 * x217
    x1170 = x1095 * x22 + x1169
    x1171 = x1162 * x92 + x68 * x873
    x1172 = x1171 * x217
    x1173 = x1098 * x22 + x1172
    x1174 = x1165 * x92 + x68 * x877
    x1175 = x1174 * x217
    x1176 = x1100 * x22 + x1175
    x1177 = x104 * x1165 + x68 * x824
    x1178 = x1177 * x217
    x1179 = x1102 * x22 + x1178
    x1180 = x55 * (x1168 * x92 + x68 * x881)
    x1181 = x1104 * x22 + x1180
    x1182 = x55 * (x1171 * x92 + x68 * x885)
    x1183 = x1106 * x22 + x1182
    x1184 = x55 * (x1174 * x92 + x68 * x889)
    x1185 = x1108 * x22 + x1184
    x1186 = x55 * (x1177 * x92 + x68 * x893)
    x1187 = x1111 * x22 + x1186
    x1188 = x55 * (x104 * x1177 + x68 * x841)
    x1189 = x1113 * x22 + x1188
    x1190 = x1031 * x512
    x1191 = x0 * x1033
    x1192 = x733 * x92 + x916
    x1193 = x736 * x92 + x918
    x1194 = x739 * x92 + x920
    x1195 = x742 * x92 + x923
    x1196 = x104 * x742 + x676
    x1197 = x1080 + x1190 * x21
    x1198 = x1033 * x21
    x1199 = x1083 + x1198 * x526
    x1200 = x1085 + x1198 * x534
    x1201 = x1053 * x542 + x1087
    x1202 = x1053 * x549 + x1090
    x1203 = x1053 * x556 + x1092
    x1204 = x1062 * x733 + x1095
    x1205 = x1062 * x736 + x1098
    x1206 = x1062 * x739 + x1100
    x1207 = x1062 * x742 + x1102
    x1208 = x1104 + x1192 * x196
    x1209 = x1106 + x1193 * x196
    x1210 = x1108 + x1194 * x196
    x1211 = x1111 + x1195 * x196
    x1212 = x1113 + x1196 * x196
    x1213 = x1031 * x855
    x1214 = x1190 * x22 + x1213
    x1215 = x1033 * x861
    x1216 = x1033 * x22
    x1217 = x1215 + x1216 * x526
    x1218 = x1033 * x865
    x1219 = x1216 * x534 + x1218
    x1220 = x661 * x869
    x1221 = x1088 * x542 + x1220
    x1222 = x661 * x873
    x1223 = x1088 * x549 + x1222
    x1224 = x661 * x877
    x1225 = x1088 * x556 + x1224
    x1226 = x217 * x881
    x1227 = x1096 * x733 + x1226
    x1228 = x217 * x885
    x1229 = x1096 * x736 + x1228
    x1230 = x217 * x889
    x1231 = x1096 * x739 + x1230
    x1232 = x217 * x893
    x1233 = x1096 * x742 + x1232
    x1234 = x55 * (x881 * x92 + x957)
    x1235 = x1192 * x340 + x1234
    x1236 = x55 * (x885 * x92 + x960)
    x1237 = x1193 * x340 + x1236
    x1238 = x55 * (x889 * x92 + x963)
    x1239 = x1194 * x340 + x1238
    x1240 = x55 * (x893 * x92 + x967)
    x1241 = x1195 * x340 + x1240
    x1242 = x55 * (x104 * x893 + x1110)
    x1243 = x1196 * x340 + x1242
    x1244 = x169 * x995 - x438 * x997
    x1245 = x1031 * x1244 + x1213 * x22
    x1246 = x1244 * x9 + x996
    x1247 = x1033 * x1246 + x1215 * x22
    x1248 = x12 * x1244 + 3.0 * x856
    x1249 = x1033 * x1248 + x1218 * x22
    x1250 = x1001 + x1246 * x92
    x1251 = x1220 * x22 + x1250 * x661
    x1252 = x1004 + x1248 * x92
    x1253 = x1222 * x22 + x1252 * x661
    x1254 = x104 * x1248 + x62 * x865
    x1255 = x1224 * x22 + x1254 * x661
    x1256 = x1007 + x1250 * x92
    x1257 = x1226 * x22 + x1256 * x217
    x1258 = x1009 + x1252 * x92
    x1259 = x1228 * x22 + x1258 * x217
    x1260 = x1013 + x1254 * x92
    x1261 = x1230 * x22 + x1260 * x217
    x1262 = x104 * x1254 + x62 * x877
    x1263 = x1232 * x22 + x1262 * x217
    x1264 = x1234 * x22 + x55 * (x1016 + x1256 * x92)
    x1265 = x1236 * x22 + x55 * (x1018 + x1258 * x92)
    x1266 = x1238 * x22 + x55 * (x1020 + x1260 * x92)
    x1267 = x1240 * x22 + x55 * (x1023 + x1262 * x92)
    x1268 = x1242 * x22 + x55 * (x104 * x1262 + x62 * x893)
    x1269 = x0 * x595
    x1270 = x595 * x9
    x1271 = x153 * x7
    x1272 = x10 * x1271
    x1273 = x1271 * x9
    x1274 = x0 * x617
    x1275 = x157 * x4
    x1276 = x10 * x153
    x1277 = x1276 * x4
    x1278 = x633 * x912
    x1279 = x157 * x617
    x1280 = x141 * x633
    x1281 = x121 * x966
    x1282 = x104 * x966 + x68 * x922
    x1283 = x21 * x595
    x1284 = x1031 * x1283 + x1213
    x1285 = x1198 * x1270 + x1215
    x1286 = x1198 * x617 + x1218
    x1287 = x1220 + x1272 * x1283
    x1288 = x21 * x617
    x1289 = x1222 + x1273 * x1288
    x1290 = x1053 * x633 + x1224
    x1291 = x1226 + x1275 * x1283
    x1292 = x1228 + x1277 * x1288
    x1293 = x1230 + x1278 * x21
    x1294 = x1062 * x966 + x1232
    x1295 = x1234 + x1283 * x154
    x1296 = x1236 + x1279 * x21
    x1297 = x1238 + x1280 * x21
    x1298 = x1240 + x1281 * x21
    x1299 = x1242 + x1282 * x196
    x1300 = x1031 * x995
    x1301 = x22 * x595
    x1302 = x1031 * x1301 + x1300
    x1303 = x1033 * x9
    x1304 = x1216 * x1270 + x1303 * x995
    x1305 = x1003 * x1033
    x1306 = x1216 * x617 + x1305
    x1307 = x1272 * x995
    x1308 = x1272 * x1301 + x1307
    x1309 = x1003 * x1273
    x1310 = x22 * x617
    x1311 = x1273 * x1310 + x1309
    x1312 = x1012 * x661
    x1313 = x1088 * x633 + x1312
    x1314 = x1275 * x995
    x1315 = x1275 * x1301 + x1314
    x1316 = x1010 * x1276
    x1317 = x1277 * x1310 + x1316
    x1318 = x1012 * x912
    x1319 = x1278 * x22 + x1318
    x1320 = x1022 * x217
    x1321 = x1096 * x966 + x1320
    x1322 = x154 * x995
    x1323 = x1301 * x154 + x1322
    x1324 = x1003 * x157
    x1325 = x1279 * x22 + x1324
    x1326 = x1012 * x141
    x1327 = x1280 * x22 + x1326
    x1328 = x1022 * x121
    x1329 = x1281 * x22 + x1328
    x1330 = x55 * (x1022 * x104 + x62 * x966)
    x1331 = x1282 * x340 + x1330
    x1332 = x314 * x995 + 3.0 * x594 - x597 * x997
    x1333 = x12 * x1332 + 4.0 * x996
    x1334 = 4.0 * x1004 + x104 * x1333
    x1335 = 4.0 * x1013 + x104 * x1334

    # 540 item(s)
    result[0, 0, 0] = numpy.sum(
        x91
        * (
            x0 * x75
            + x0 * (x75 + x77 * x78)
            + x55
            * (x56 * (x56 * (x54 * x88 + x56 * (x84 + x86)) + x63 * x88) + x70 * x88)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x103
        * (
            x0 * x99
            + x0 * (x101 * x78 + x99)
            + x55 * (x56 * (x56 * x92 * (x84 + x86) + x88 * x93) + x88 * x95)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x103
        * (
            x0 * x111
            + x0 * (x111 + x112 * x78)
            + x55 * (x107 * x88 + x56 * (x104 * x56 * (x84 + x86) + x105 * x88))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x120
        * (
            x0 * x117
            + x0 * (x117 + x119 * x78)
            + x55 * (x114 * x56 * (x84 + x86) + x115 * x88)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x129
        * (
            x0 * x125
            + x0 * (x125 + x127 * x78)
            + x55 * (x122 * x56 * (x84 + x86) + x123 * x88)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x120
        * (
            x0 * x133
            + x0 * (x133 + x135 * x78)
            + x55 * (x130 * x56 * (x84 + x86) + x131 * x88)
        )
    )
    result[0, 0, 6] = numpy.sum(
        x103 * (x0 * x139 + x0 * (x139 + x140 * x78) + x138 * x55 * (x84 + x86))
    )
    result[0, 0, 7] = numpy.sum(
        x129 * (x0 * x143 + x0 * (x143 + x144 * x78) + x142 * x55 * (x84 + x86))
    )
    result[0, 0, 8] = numpy.sum(
        x129 * (x0 * x147 + x0 * (x147 + x148 * x78) + x146 * x55 * (x84 + x86))
    )
    result[0, 0, 9] = numpy.sum(
        x103 * (x0 * x151 + x0 * (x151 + x152 * x78) + x150 * x55 * (x84 + x86))
    )
    result[0, 0, 10] = numpy.sum(
        x91 * (x0 * x155 + x0 * (x154 * x156 + x155) + x154 * x83)
    )
    result[0, 0, 11] = numpy.sum(
        x103 * (x0 * x159 + x0 * (x156 * x158 + x159) + x158 * x83)
    )
    result[0, 0, 12] = numpy.sum(
        x120 * (x0 * x162 + x0 * (x161 * x163 + x162) + x161 * x164)
    )
    result[0, 0, 13] = numpy.sum(
        x103 * (x0 * x166 + x0 * (x163 * x165 + x166) + x164 * x165)
    )
    result[0, 0, 14] = numpy.sum(
        x91 * (x0 * x168 + x0 * (x156 * x167 + x168) + x167 * x83)
    )
    result[0, 1, 0] = numpy.sum(x205 * (x0 * x197 + x204 + x21 * x75))
    result[0, 1, 1] = numpy.sum(x225 * (x0 * x221 + x21 * x99 + x224))
    result[0, 1, 2] = numpy.sum(x225 * (x0 * x234 + x111 * x21 + x235))
    result[0, 1, 3] = numpy.sum(x129 * (x0 * x243 + x117 * x21 + x245))
    result[0, 1, 4] = numpy.sum(x259 * (x0 * x255 + x125 * x21 + x258))
    result[0, 1, 5] = numpy.sum(x129 * (x0 * x265 + x133 * x21 + x266))
    result[0, 1, 6] = numpy.sum(x225 * (x0 * x271 + x139 * x21 + x273))
    result[0, 1, 7] = numpy.sum(x259 * (x0 * x278 + x143 * x21 + x280))
    result[0, 1, 8] = numpy.sum(x259 * (x0 * x287 + x147 * x21 + x290))
    result[0, 1, 9] = numpy.sum(x225 * (x0 * x293 + x151 * x21 + x294))
    result[0, 1, 10] = numpy.sum(x205 * (x0 * x297 + x155 * x21 + x298))
    result[0, 1, 11] = numpy.sum(x225 * (x0 * x300 + x159 * x21 + x301))
    result[0, 1, 12] = numpy.sum(x129 * (x0 * x304 + x162 * x21 + x305))
    result[0, 1, 13] = numpy.sum(x225 * (x0 * x308 + x166 * x21 + x310))
    result[0, 1, 14] = numpy.sum(x205 * (x0 * x312 + x168 * x21 + x313))
    result[0, 2, 0] = numpy.sum(x205 * (x0 * x341 + x22 * x75 + x348))
    result[0, 2, 1] = numpy.sum(x225 * (x0 * x356 + x22 * x99 + x357))
    result[0, 2, 2] = numpy.sum(x225 * (x0 * x368 + x111 * x22 + x370))
    result[0, 2, 3] = numpy.sum(x129 * (x0 * x375 + x117 * x22 + x376))
    result[0, 2, 4] = numpy.sum(x259 * (x0 * x383 + x125 * x22 + x385))
    result[0, 2, 5] = numpy.sum(x129 * (x0 * x394 + x133 * x22 + x396))
    result[0, 2, 6] = numpy.sum(x225 * (x0 * x398 + x139 * x22 + x399))
    result[0, 2, 7] = numpy.sum(x259 * (x0 * x402 + x143 * x22 + x403))
    result[0, 2, 8] = numpy.sum(x259 * (x0 * x406 + x147 * x22 + x407))
    result[0, 2, 9] = numpy.sum(x225 * (x0 * x412 + x151 * x22 + x414))
    result[0, 2, 10] = numpy.sum(x205 * (x0 * x417 + x155 * x22 + x418))
    result[0, 2, 11] = numpy.sum(x225 * (x0 * x420 + x159 * x22 + x421))
    result[0, 2, 12] = numpy.sum(x129 * (x0 * x424 + x162 * x22 + x425))
    result[0, 2, 13] = numpy.sum(x225 * (x0 * x427 + x166 * x22 + x428))
    result[0, 2, 14] = numpy.sum(x205 * (x0 * x430 + x168 * x22 + x431))
    result[0, 3, 0] = numpy.sum(x91 * (x197 * x21 + x450))
    result[0, 3, 1] = numpy.sum(x103 * (x21 * x221 + x462))
    result[0, 3, 2] = numpy.sum(x103 * (x21 * x234 + x467))
    result[0, 3, 3] = numpy.sum(x120 * (x21 * x243 + x473))
    result[0, 3, 4] = numpy.sum(x129 * (x21 * x255 + x479))
    result[0, 3, 5] = numpy.sum(x120 * (x21 * x265 + x483))
    result[0, 3, 6] = numpy.sum(x103 * (x21 * x271 + x487))
    result[0, 3, 7] = numpy.sum(x129 * (x21 * x278 + x491))
    result[0, 3, 8] = numpy.sum(x129 * (x21 * x287 + x495))
    result[0, 3, 9] = numpy.sum(x103 * (x21 * x293 + x497))
    result[0, 3, 10] = numpy.sum(x91 * (x21 * x297 + x499))
    result[0, 3, 11] = numpy.sum(x103 * (x21 * x300 + x501))
    result[0, 3, 12] = numpy.sum(x120 * (x21 * x304 + x503))
    result[0, 3, 13] = numpy.sum(x103 * (x21 * x308 + x505))
    result[0, 3, 14] = numpy.sum(x91 * (x21 * x312 + x507))
    result[0, 4, 0] = numpy.sum(x205 * (x21 * x341 + x522))
    result[0, 4, 1] = numpy.sum(x225 * (x21 * x356 + x530))
    result[0, 4, 2] = numpy.sum(x225 * (x21 * x368 + x538))
    result[0, 4, 3] = numpy.sum(x129 * (x21 * x375 + x545))
    result[0, 4, 4] = numpy.sum(x259 * (x21 * x383 + x552))
    result[0, 4, 5] = numpy.sum(x129 * (x21 * x394 + x559))
    result[0, 4, 6] = numpy.sum(x225 * (x21 * x398 + x564))
    result[0, 4, 7] = numpy.sum(x259 * (x21 * x402 + x569))
    result[0, 4, 8] = numpy.sum(x259 * (x21 * x406 + x574))
    result[0, 4, 9] = numpy.sum(x225 * (x21 * x412 + x579))
    result[0, 4, 10] = numpy.sum(x205 * (x21 * x417 + x581))
    result[0, 4, 11] = numpy.sum(x225 * (x21 * x420 + x584))
    result[0, 4, 12] = numpy.sum(x129 * (x21 * x424 + x586))
    result[0, 4, 13] = numpy.sum(x225 * (x21 * x427 + x588))
    result[0, 4, 14] = numpy.sum(x205 * (x21 * x430 + x590))
    result[0, 5, 0] = numpy.sum(x91 * (x22 * x341 + x609))
    result[0, 5, 1] = numpy.sum(x103 * (x22 * x356 + x614))
    result[0, 5, 2] = numpy.sum(x103 * (x22 * x368 + x622))
    result[0, 5, 3] = numpy.sum(x120 * (x22 * x375 + x626))
    result[0, 5, 4] = numpy.sum(x129 * (x22 * x383 + x630))
    result[0, 5, 5] = numpy.sum(x120 * (x22 * x394 + x637))
    result[0, 5, 6] = numpy.sum(x103 * (x22 * x398 + x639))
    result[0, 5, 7] = numpy.sum(x129 * (x22 * x402 + x641))
    result[0, 5, 8] = numpy.sum(x129 * (x22 * x406 + x643))
    result[0, 5, 9] = numpy.sum(x103 * (x22 * x412 + x647))
    result[0, 5, 10] = numpy.sum(x91 * (x22 * x417 + x649))
    result[0, 5, 11] = numpy.sum(x103 * (x22 * x420 + x651))
    result[0, 5, 12] = numpy.sum(x120 * (x22 * x424 + x653))
    result[0, 5, 13] = numpy.sum(x103 * (x22 * x427 + x655))
    result[0, 5, 14] = numpy.sum(x91 * (x22 * x430 + x657))
    result[1, 0, 0] = numpy.sum(x205 * (x0 * x195 + x0 * (x195 + x660 * x78) + x204))
    result[1, 0, 1] = numpy.sum(x225 * (x0 * x220 + x0 * (x220 + x663 * x78) + x224))
    result[1, 0, 2] = numpy.sum(x225 * (x0 * x233 + x0 * (x233 + x665 * x78) + x235))
    result[1, 0, 3] = numpy.sum(x129 * (x0 * x242 + x0 * (x242 + x666 * x78) + x245))
    result[1, 0, 4] = numpy.sum(x259 * (x0 * x254 + x0 * (x254 + x667 * x78) + x258))
    result[1, 0, 5] = numpy.sum(x129 * (x0 * x264 + x0 * (x264 + x669 * x78) + x266))
    result[1, 0, 6] = numpy.sum(x225 * (x0 * x270 + x0 * (x270 + x671 * x78) + x273))
    result[1, 0, 7] = numpy.sum(x259 * (x0 * x277 + x0 * (x277 + x673 * x78) + x280))
    result[1, 0, 8] = numpy.sum(x259 * (x0 * x286 + x0 * (x286 + x675 * x78) + x290))
    result[1, 0, 9] = numpy.sum(x225 * (x0 * x292 + x0 * (x292 + x677 * x78) + x294))
    result[1, 0, 10] = numpy.sum(x205 * (x0 * x295 + x0 * (x295 + x678 * x78) + x298))
    result[1, 0, 11] = numpy.sum(x225 * (x0 * x299 + x0 * (x299 + x679 * x78) + x301))
    result[1, 0, 12] = numpy.sum(x129 * (x0 * x302 + x0 * (x302 + x680 * x78) + x305))
    result[1, 0, 13] = numpy.sum(x225 * (x0 * x307 + x0 * (x307 + x682 * x78) + x310))
    result[1, 0, 14] = numpy.sum(x205 * (x0 * x311 + x0 * (x0 * x683 + x311) + x313))
    result[1, 1, 0] = numpy.sum(x686 * (x0 * x685 + x450))
    result[1, 1, 1] = numpy.sum(x689 * (x0 * x688 + x462))
    result[1, 1, 2] = numpy.sum(x689 * (x0 * x691 + x467))
    result[1, 1, 3] = numpy.sum(x259 * (x0 * x693 + x473))
    result[1, 1, 4] = numpy.sum(x696 * (x0 * x695 + x479))
    result[1, 1, 5] = numpy.sum(x259 * (x0 * x698 + x483))
    result[1, 1, 6] = numpy.sum(x689 * (x0 * x701 + x487))
    result[1, 1, 7] = numpy.sum(x696 * (x0 * x704 + x491))
    result[1, 1, 8] = numpy.sum(x696 * (x0 * x707 + x495))
    result[1, 1, 9] = numpy.sum(x689 * (x0 * x710 + x497))
    result[1, 1, 10] = numpy.sum(x686 * (x0 * x712 + x499))
    result[1, 1, 11] = numpy.sum(x689 * (x0 * x714 + x501))
    result[1, 1, 12] = numpy.sum(x259 * (x0 * x716 + x503))
    result[1, 1, 13] = numpy.sum(x689 * (x0 * x718 + x505))
    result[1, 1, 14] = numpy.sum(x686 * (x0 * x720 + x507))
    result[1, 2, 0] = numpy.sum(x686 * (x0 * x722 + x522))
    result[1, 2, 1] = numpy.sum(x689 * (x0 * x724 + x530))
    result[1, 2, 2] = numpy.sum(x689 * (x0 * x726 + x538))
    result[1, 2, 3] = numpy.sum(x259 * (x0 * x728 + x545))
    result[1, 2, 4] = numpy.sum(x696 * (x0 * x730 + x552))
    result[1, 2, 5] = numpy.sum(x259 * (x0 * x732 + x559))
    result[1, 2, 6] = numpy.sum(x689 * (x0 * x735 + x564))
    result[1, 2, 7] = numpy.sum(x696 * (x0 * x738 + x569))
    result[1, 2, 8] = numpy.sum(x696 * (x0 * x741 + x574))
    result[1, 2, 9] = numpy.sum(x689 * (x0 * x744 + x579))
    result[1, 2, 10] = numpy.sum(x686 * (x0 * x746 + x581))
    result[1, 2, 11] = numpy.sum(x689 * (x0 * x748 + x584))
    result[1, 2, 12] = numpy.sum(x259 * (x0 * x750 + x586))
    result[1, 2, 13] = numpy.sum(x689 * (x0 * x752 + x588))
    result[1, 2, 14] = numpy.sum(x686 * (x0 * x754 + x590))
    result[1, 3, 0] = numpy.sum(x205 * (x21 * x685 + x760))
    result[1, 3, 1] = numpy.sum(x225 * (x21 * x688 + x768))
    result[1, 3, 2] = numpy.sum(x225 * (x21 * x691 + x770))
    result[1, 3, 3] = numpy.sum(x129 * (x21 * x693 + x774))
    result[1, 3, 4] = numpy.sum(x259 * (x21 * x695 + x778))
    result[1, 3, 5] = numpy.sum(x129 * (x21 * x698 + x780))
    result[1, 3, 6] = numpy.sum(x225 * (x21 * x701 + x784))
    result[1, 3, 7] = numpy.sum(x259 * (x21 * x704 + x788))
    result[1, 3, 8] = numpy.sum(x259 * (x21 * x707 + x792))
    result[1, 3, 9] = numpy.sum(x225 * (x21 * x710 + x794))
    result[1, 3, 10] = numpy.sum(x205 * (x21 * x712 + x795))
    result[1, 3, 11] = numpy.sum(x225 * (x21 * x714 + x796))
    result[1, 3, 12] = numpy.sum(x129 * (x21 * x716 + x797))
    result[1, 3, 13] = numpy.sum(x225 * (x21 * x718 + x798))
    result[1, 3, 14] = numpy.sum(x205 * (x21 * x720 + x799))
    result[1, 4, 0] = numpy.sum(x686 * (x21 * x722 + x805))
    result[1, 4, 1] = numpy.sum(x689 * (x21 * x724 + x810))
    result[1, 4, 2] = numpy.sum(x689 * (x21 * x726 + x814))
    result[1, 4, 3] = numpy.sum(x259 * (x21 * x728 + x818))
    result[1, 4, 4] = numpy.sum(x696 * (x21 * x730 + x823))
    result[1, 4, 5] = numpy.sum(x259 * (x21 * x732 + x827))
    result[1, 4, 6] = numpy.sum(x689 * (x21 * x735 + x831))
    result[1, 4, 7] = numpy.sum(x696 * (x21 * x738 + x835))
    result[1, 4, 8] = numpy.sum(x696 * (x21 * x741 + x840))
    result[1, 4, 9] = numpy.sum(x689 * (x21 * x744 + x844))
    result[1, 4, 10] = numpy.sum(x686 * (x21 * x746 + x846))
    result[1, 4, 11] = numpy.sum(x689 * (x21 * x748 + x848))
    result[1, 4, 12] = numpy.sum(x259 * (x21 * x750 + x850))
    result[1, 4, 13] = numpy.sum(x689 * (x21 * x752 + x852))
    result[1, 4, 14] = numpy.sum(x686 * (x21 * x754 + x854))
    result[1, 5, 0] = numpy.sum(x205 * (x22 * x722 + x860))
    result[1, 5, 1] = numpy.sum(x225 * (x22 * x724 + x864))
    result[1, 5, 2] = numpy.sum(x225 * (x22 * x726 + x868))
    result[1, 5, 3] = numpy.sum(x129 * (x22 * x728 + x872))
    result[1, 5, 4] = numpy.sum(x259 * (x22 * x730 + x876))
    result[1, 5, 5] = numpy.sum(x129 * (x22 * x732 + x880))
    result[1, 5, 6] = numpy.sum(x225 * (x22 * x735 + x884))
    result[1, 5, 7] = numpy.sum(x259 * (x22 * x738 + x888))
    result[1, 5, 8] = numpy.sum(x259 * (x22 * x741 + x892))
    result[1, 5, 9] = numpy.sum(x225 * (x22 * x744 + x896))
    result[1, 5, 10] = numpy.sum(x205 * (x22 * x746 + x898))
    result[1, 5, 11] = numpy.sum(x225 * (x22 * x748 + x900))
    result[1, 5, 12] = numpy.sum(x129 * (x22 * x750 + x902))
    result[1, 5, 13] = numpy.sum(x225 * (x22 * x752 + x904))
    result[1, 5, 14] = numpy.sum(x205 * (x22 * x754 + x906))
    result[2, 0, 0] = numpy.sum(x205 * (x0 * x339 + x0 * (x339 + x78 * x907) + x348))
    result[2, 0, 1] = numpy.sum(x225 * (x0 * x355 + x0 * (x355 + x78 * x909) + x357))
    result[2, 0, 2] = numpy.sum(x225 * (x0 * x367 + x0 * (x367 + x78 * x910) + x370))
    result[2, 0, 3] = numpy.sum(x129 * (x0 * x374 + x0 * (x374 + x78 * x911) + x376))
    result[2, 0, 4] = numpy.sum(x259 * (x0 * x382 + x0 * (x382 + x78 * x914) + x385))
    result[2, 0, 5] = numpy.sum(x129 * (x0 * x393 + x0 * (x393 + x78 * x915) + x396))
    result[2, 0, 6] = numpy.sum(x225 * (x0 * x397 + x0 * (x397 + x78 * x917) + x399))
    result[2, 0, 7] = numpy.sum(x259 * (x0 * x401 + x0 * (x401 + x78 * x919) + x403))
    result[2, 0, 8] = numpy.sum(x259 * (x0 * x405 + x0 * (x405 + x78 * x921) + x407))
    result[2, 0, 9] = numpy.sum(x225 * (x0 * x411 + x0 * (x411 + x78 * x924) + x414))
    result[2, 0, 10] = numpy.sum(x205 * (x0 * x415 + x0 * (x0 * x925 + x415) + x418))
    result[2, 0, 11] = numpy.sum(x225 * (x0 * x419 + x0 * (x0 * x926 + x419) + x421))
    result[2, 0, 12] = numpy.sum(x129 * (x0 * x422 + x0 * (x0 * x927 + x422) + x425))
    result[2, 0, 13] = numpy.sum(x225 * (x0 * x426 + x0 * (x0 * x928 + x426) + x428))
    result[2, 0, 14] = numpy.sum(x205 * (x0 * x429 + x0 * (x429 + x78 * x929) + x431))
    result[2, 1, 0] = numpy.sum(x686 * (x0 * x930 + x21 * x339 + x521))
    result[2, 1, 1] = numpy.sum(x689 * (x0 * x931 + x21 * x355 + x529))
    result[2, 1, 2] = numpy.sum(x689 * (x0 * x932 + x21 * x367 + x537))
    result[2, 1, 3] = numpy.sum(x259 * (x0 * x933 + x21 * x374 + x544))
    result[2, 1, 4] = numpy.sum(x696 * (x0 * x934 + x21 * x382 + x551))
    result[2, 1, 5] = numpy.sum(x259 * (x0 * x935 + x21 * x393 + x558))
    result[2, 1, 6] = numpy.sum(x689 * (x0 * x936 + x21 * x397 + x563))
    result[2, 1, 7] = numpy.sum(x696 * (x0 * x937 + x21 * x401 + x568))
    result[2, 1, 8] = numpy.sum(x696 * (x0 * x938 + x21 * x405 + x573))
    result[2, 1, 9] = numpy.sum(x689 * (x0 * x939 + x21 * x411 + x578))
    result[2, 1, 10] = numpy.sum(x686 * (x0 * x940 + x21 * x415 + x580))
    result[2, 1, 11] = numpy.sum(x689 * (x0 * x941 + x21 * x419 + x583))
    result[2, 1, 12] = numpy.sum(x259 * (x0 * x942 + x21 * x422 + x585))
    result[2, 1, 13] = numpy.sum(x689 * (x0 * x943 + x21 * x426 + x587))
    result[2, 1, 14] = numpy.sum(x686 * (x0 * x944 + x21 * x429 + x589))
    result[2, 2, 0] = numpy.sum(x686 * (x0 * x946 + x609))
    result[2, 2, 1] = numpy.sum(x689 * (x0 * x948 + x614))
    result[2, 2, 2] = numpy.sum(x689 * (x0 * x950 + x622))
    result[2, 2, 3] = numpy.sum(x259 * (x0 * x952 + x626))
    result[2, 2, 4] = numpy.sum(x696 * (x0 * x954 + x630))
    result[2, 2, 5] = numpy.sum(x259 * (x0 * x956 + x637))
    result[2, 2, 6] = numpy.sum(x689 * (x0 * x959 + x639))
    result[2, 2, 7] = numpy.sum(x696 * (x0 * x962 + x641))
    result[2, 2, 8] = numpy.sum(x696 * (x0 * x965 + x643))
    result[2, 2, 9] = numpy.sum(x689 * (x0 * x969 + x647))
    result[2, 2, 10] = numpy.sum(x686 * (x0 * x971 + x649))
    result[2, 2, 11] = numpy.sum(x689 * (x0 * x973 + x651))
    result[2, 2, 12] = numpy.sum(x259 * (x0 * x975 + x653))
    result[2, 2, 13] = numpy.sum(x689 * (x0 * x977 + x655))
    result[2, 2, 14] = numpy.sum(x686 * (x0 * x979 + x657))
    result[2, 3, 0] = numpy.sum(x205 * (x21 * x930 + x980))
    result[2, 3, 1] = numpy.sum(x225 * (x21 * x931 + x981))
    result[2, 3, 2] = numpy.sum(x225 * (x21 * x932 + x982))
    result[2, 3, 3] = numpy.sum(x129 * (x21 * x933 + x983))
    result[2, 3, 4] = numpy.sum(x259 * (x21 * x934 + x984))
    result[2, 3, 5] = numpy.sum(x129 * (x21 * x935 + x985))
    result[2, 3, 6] = numpy.sum(x225 * (x21 * x936 + x986))
    result[2, 3, 7] = numpy.sum(x259 * (x21 * x937 + x987))
    result[2, 3, 8] = numpy.sum(x259 * (x21 * x938 + x988))
    result[2, 3, 9] = numpy.sum(x225 * (x21 * x939 + x989))
    result[2, 3, 10] = numpy.sum(x205 * (x21 * x940 + x990))
    result[2, 3, 11] = numpy.sum(x225 * (x21 * x941 + x991))
    result[2, 3, 12] = numpy.sum(x129 * (x21 * x942 + x992))
    result[2, 3, 13] = numpy.sum(x225 * (x21 * x943 + x993))
    result[2, 3, 14] = numpy.sum(x205 * (x21 * x944 + x994))
    result[2, 4, 0] = numpy.sum(x686 * (x21 * x946 + x860))
    result[2, 4, 1] = numpy.sum(x689 * (x21 * x948 + x864))
    result[2, 4, 2] = numpy.sum(x689 * (x21 * x950 + x868))
    result[2, 4, 3] = numpy.sum(x259 * (x21 * x952 + x872))
    result[2, 4, 4] = numpy.sum(x696 * (x21 * x954 + x876))
    result[2, 4, 5] = numpy.sum(x259 * (x21 * x956 + x880))
    result[2, 4, 6] = numpy.sum(x689 * (x21 * x959 + x884))
    result[2, 4, 7] = numpy.sum(x696 * (x21 * x962 + x888))
    result[2, 4, 8] = numpy.sum(x696 * (x21 * x965 + x892))
    result[2, 4, 9] = numpy.sum(x689 * (x21 * x969 + x896))
    result[2, 4, 10] = numpy.sum(x686 * (x21 * x971 + x898))
    result[2, 4, 11] = numpy.sum(x689 * (x21 * x973 + x900))
    result[2, 4, 12] = numpy.sum(x259 * (x21 * x975 + x902))
    result[2, 4, 13] = numpy.sum(x689 * (x21 * x977 + x904))
    result[2, 4, 14] = numpy.sum(x686 * (x21 * x979 + x906))
    result[2, 5, 0] = numpy.sum(x205 * (x1000 + x22 * x946))
    result[2, 5, 1] = numpy.sum(x225 * (x1002 + x22 * x948))
    result[2, 5, 2] = numpy.sum(x225 * (x1006 + x22 * x950))
    result[2, 5, 3] = numpy.sum(x129 * (x1008 + x22 * x952))
    result[2, 5, 4] = numpy.sum(x259 * (x1011 + x22 * x954))
    result[2, 5, 5] = numpy.sum(x129 * (x1015 + x22 * x956))
    result[2, 5, 6] = numpy.sum(x225 * (x1017 + x22 * x959))
    result[2, 5, 7] = numpy.sum(x259 * (x1019 + x22 * x962))
    result[2, 5, 8] = numpy.sum(x259 * (x1021 + x22 * x965))
    result[2, 5, 9] = numpy.sum(x225 * (x1025 + x22 * x969))
    result[2, 5, 10] = numpy.sum(x205 * (x1026 + x22 * x971))
    result[2, 5, 11] = numpy.sum(x225 * (x1027 + x22 * x973))
    result[2, 5, 12] = numpy.sum(x129 * (x1028 + x22 * x975))
    result[2, 5, 13] = numpy.sum(x225 * (x1029 + x22 * x977))
    result[2, 5, 14] = numpy.sum(x205 * (x1030 + x22 * x979))
    result[3, 0, 0] = numpy.sum(x91 * (x0 * x684 + x0 * (x1031 * x1032 + x684) + x449))
    result[3, 0, 1] = numpy.sum(x103 * (x0 * x687 + x0 * (x0 * x1034 + x687) + x461))
    result[3, 0, 2] = numpy.sum(x103 * (x0 * x690 + x0 * (x1032 * x1035 + x690) + x466))
    result[3, 0, 3] = numpy.sum(x120 * (x0 * x692 + x0 * (x1036 * x470 + x692) + x472))
    result[3, 0, 4] = numpy.sum(x129 * (x0 * x694 + x0 * (x1036 * x476 + x694) + x478))
    result[3, 0, 5] = numpy.sum(x120 * (x0 * x697 + x0 * (x1037 * x1038 + x697) + x482))
    result[3, 0, 6] = numpy.sum(x103 * (x0 * x700 + x0 * (x1039 * x699 + x700) + x486))
    result[3, 0, 7] = numpy.sum(x129 * (x0 * x703 + x0 * (x1039 * x702 + x703) + x490))
    result[3, 0, 8] = numpy.sum(x129 * (x0 * x706 + x0 * (x1039 * x705 + x706) + x494))
    result[3, 0, 9] = numpy.sum(x103 * (x0 * x709 + x0 * (x1038 * x1040 + x709) + x496))
    result[3, 0, 10] = numpy.sum(x91 * (x0 * x711 + x0 * (x1041 * x78 + x711) + x498))
    result[3, 0, 11] = numpy.sum(x103 * (x0 * x713 + x0 * (x1042 * x78 + x713) + x500))
    result[3, 0, 12] = numpy.sum(x120 * (x0 * x715 + x0 * (x1043 * x78 + x715) + x502))
    result[3, 0, 13] = numpy.sum(x103 * (x0 * x717 + x0 * (x1044 * x78 + x717) + x504))
    result[3, 0, 14] = numpy.sum(x91 * (x0 * x719 + x0 * (x1032 * x167 + x719) + x506))
    result[3, 1, 0] = numpy.sum(x205 * (x0 * x1047 + x760))
    result[3, 1, 1] = numpy.sum(x225 * (x0 * x1049 + x768))
    result[3, 1, 2] = numpy.sum(x225 * (x0 * x1051 + x770))
    result[3, 1, 3] = numpy.sum(x129 * (x0 * x1054 + x774))
    result[3, 1, 4] = numpy.sum(x259 * (x0 * x1056 + x778))
    result[3, 1, 5] = numpy.sum(x129 * (x0 * x1060 + x780))
    result[3, 1, 6] = numpy.sum(x225 * (x0 * x1063 + x784))
    result[3, 1, 7] = numpy.sum(x259 * (x0 * x1065 + x788))
    result[3, 1, 8] = numpy.sum(x259 * (x0 * x1067 + x792))
    result[3, 1, 9] = numpy.sum(x225 * (x0 * x1069 + x794))
    result[3, 1, 10] = numpy.sum(x205 * (x0 * x1071 + x795))
    result[3, 1, 11] = numpy.sum(x225 * (x0 * x1073 + x796))
    result[3, 1, 12] = numpy.sum(x129 * (x0 * x1075 + x797))
    result[3, 1, 13] = numpy.sum(x225 * (x0 * x1077 + x798))
    result[3, 1, 14] = numpy.sum(x205 * (x0 * x1079 + x799))
    result[3, 2, 0] = numpy.sum(x205 * (x0 * x1082 + x805))
    result[3, 2, 1] = numpy.sum(x225 * (x0 * x1084 + x810))
    result[3, 2, 2] = numpy.sum(x225 * (x0 * x1086 + x814))
    result[3, 2, 3] = numpy.sum(x129 * (x0 * x1089 + x818))
    result[3, 2, 4] = numpy.sum(x259 * (x0 * x1091 + x823))
    result[3, 2, 5] = numpy.sum(x129 * (x0 * x1094 + x827))
    result[3, 2, 6] = numpy.sum(x225 * (x0 * x1097 + x831))
    result[3, 2, 7] = numpy.sum(x259 * (x0 * x1099 + x835))
    result[3, 2, 8] = numpy.sum(x259 * (x0 * x1101 + x840))
    result[3, 2, 9] = numpy.sum(x225 * (x0 * x1103 + x844))
    result[3, 2, 10] = numpy.sum(x205 * (x0 * x1105 + x846))
    result[3, 2, 11] = numpy.sum(x225 * (x0 * x1107 + x848))
    result[3, 2, 12] = numpy.sum(x129 * (x0 * x1109 + x850))
    result[3, 2, 13] = numpy.sum(x225 * (x0 * x1112 + x852))
    result[3, 2, 14] = numpy.sum(x205 * (x0 * x1114 + x854))
    result[3, 3, 0] = numpy.sum(x91 * (x1031 * x1115 + x1045 * x21 + x1047 * x21))
    result[3, 3, 1] = numpy.sum(x103 * (x1033 * x1118 + x1048 * x21 + x1049 * x21))
    result[3, 3, 2] = numpy.sum(x103 * (x1035 * x1115 + x1050 * x21 + x1051 * x21))
    result[3, 3, 3] = numpy.sum(x120 * (x1052 * x21 + x1054 * x21 + x1119 * x661))
    result[3, 3, 4] = numpy.sum(x129 * (x1055 * x21 + x1056 * x21 + x1120 * x661))
    result[3, 3, 5] = numpy.sum(x120 * (x1037 * x1121 + x1058 * x21 + x1060 * x21))
    result[3, 3, 6] = numpy.sum(x103 * (x1061 * x21 + x1063 * x21 + x1122 * x217))
    result[3, 3, 7] = numpy.sum(x129 * (x1064 * x21 + x1065 * x21 + x1123 * x217))
    result[3, 3, 8] = numpy.sum(x129 * (x1066 * x21 + x1067 * x21 + x1124 * x217))
    result[3, 3, 9] = numpy.sum(x103 * (x1040 * x1121 + x1068 * x21 + x1069 * x21))
    result[3, 3, 10] = numpy.sum(
        x91 * (x1070 * x21 + x1071 * x21 + x55 * (x1122 * x92 + 4.0 * x782))
    )
    result[3, 3, 11] = numpy.sum(
        x103 * (x1072 * x21 + x1073 * x21 + x55 * (x1123 * x92 + 4.0 * x786))
    )
    result[3, 3, 12] = numpy.sum(
        x120 * (x1074 * x21 + x1075 * x21 + x55 * (x1124 * x92 + 4.0 * x790))
    )
    result[3, 3, 13] = numpy.sum(
        x103 * (x1076 * x21 + x1077 * x21 + x150 * x55 * (x1116 + x1117))
    )
    result[3, 3, 14] = numpy.sum(x91 * (x1078 * x21 + x1079 * x21 + x1115 * x167))
    result[3, 4, 0] = numpy.sum(x205 * (x1045 * x22 + x1082 * x21 + x1126))
    result[3, 4, 1] = numpy.sum(x225 * (x1048 * x22 + x1084 * x21 + x1128))
    result[3, 4, 2] = numpy.sum(x225 * (x1050 * x22 + x1086 * x21 + x1130))
    result[3, 4, 3] = numpy.sum(x129 * (x1052 * x22 + x1089 * x21 + x1132))
    result[3, 4, 4] = numpy.sum(x259 * (x1055 * x22 + x1091 * x21 + x1134))
    result[3, 4, 5] = numpy.sum(x129 * (x1058 * x22 + x1094 * x21 + x1136))
    result[3, 4, 6] = numpy.sum(x225 * (x1061 * x22 + x1097 * x21 + x1138))
    result[3, 4, 7] = numpy.sum(x259 * (x1064 * x22 + x1099 * x21 + x1140))
    result[3, 4, 8] = numpy.sum(x259 * (x1066 * x22 + x1101 * x21 + x1142))
    result[3, 4, 9] = numpy.sum(x225 * (x1068 * x22 + x1103 * x21 + x1144))
    result[3, 4, 10] = numpy.sum(x205 * (x1070 * x22 + x1105 * x21 + x1145))
    result[3, 4, 11] = numpy.sum(x225 * (x1072 * x22 + x1107 * x21 + x1146))
    result[3, 4, 12] = numpy.sum(x129 * (x1074 * x22 + x1109 * x21 + x1147))
    result[3, 4, 13] = numpy.sum(x225 * (x1076 * x22 + x1112 * x21 + x1148))
    result[3, 4, 14] = numpy.sum(x205 * (x1078 * x22 + x1114 * x21 + x1149))
    result[3, 5, 0] = numpy.sum(x91 * (x1082 * x22 + x1152))
    result[3, 5, 1] = numpy.sum(x103 * (x1084 * x22 + x1155))
    result[3, 5, 2] = numpy.sum(x103 * (x1086 * x22 + x1158))
    result[3, 5, 3] = numpy.sum(x120 * (x1089 * x22 + x1161))
    result[3, 5, 4] = numpy.sum(x129 * (x1091 * x22 + x1164))
    result[3, 5, 5] = numpy.sum(x120 * (x1094 * x22 + x1167))
    result[3, 5, 6] = numpy.sum(x103 * (x1097 * x22 + x1170))
    result[3, 5, 7] = numpy.sum(x129 * (x1099 * x22 + x1173))
    result[3, 5, 8] = numpy.sum(x129 * (x1101 * x22 + x1176))
    result[3, 5, 9] = numpy.sum(x103 * (x1103 * x22 + x1179))
    result[3, 5, 10] = numpy.sum(x91 * (x1105 * x22 + x1181))
    result[3, 5, 11] = numpy.sum(x103 * (x1107 * x22 + x1183))
    result[3, 5, 12] = numpy.sum(x120 * (x1109 * x22 + x1185))
    result[3, 5, 13] = numpy.sum(x103 * (x1112 * x22 + x1187))
    result[3, 5, 14] = numpy.sum(x91 * (x1114 * x22 + x1189))
    result[4, 0, 0] = numpy.sum(x205 * (x0 * x721 + x0 * (x0 * x1190 + x721) + x521))
    result[4, 0, 1] = numpy.sum(x225 * (x0 * x723 + x0 * (x1191 * x526 + x723) + x529))
    result[4, 0, 2] = numpy.sum(x225 * (x0 * x725 + x0 * (x1191 * x534 + x725) + x537))
    result[4, 0, 3] = numpy.sum(x129 * (x0 * x727 + x0 * (x1036 * x542 + x727) + x544))
    result[4, 0, 4] = numpy.sum(x259 * (x0 * x729 + x0 * (x1036 * x549 + x729) + x551))
    result[4, 0, 5] = numpy.sum(x129 * (x0 * x731 + x0 * (x1036 * x556 + x731) + x558))
    result[4, 0, 6] = numpy.sum(x225 * (x0 * x734 + x0 * (x1039 * x733 + x734) + x563))
    result[4, 0, 7] = numpy.sum(x259 * (x0 * x737 + x0 * (x1039 * x736 + x737) + x568))
    result[4, 0, 8] = numpy.sum(x259 * (x0 * x740 + x0 * (x1039 * x739 + x740) + x573))
    result[4, 0, 9] = numpy.sum(x225 * (x0 * x743 + x0 * (x1039 * x742 + x743) + x578))
    result[4, 0, 10] = numpy.sum(x205 * (x0 * x745 + x0 * (x1192 * x78 + x745) + x580))
    result[4, 0, 11] = numpy.sum(x225 * (x0 * x747 + x0 * (x1193 * x78 + x747) + x583))
    result[4, 0, 12] = numpy.sum(x129 * (x0 * x749 + x0 * (x1194 * x78 + x749) + x585))
    result[4, 0, 13] = numpy.sum(x225 * (x0 * x751 + x0 * (x1195 * x78 + x751) + x587))
    result[4, 0, 14] = numpy.sum(x205 * (x0 * x753 + x0 * (x1196 * x78 + x753) + x589))
    result[4, 1, 0] = numpy.sum(x686 * (x0 * x1197 + x980))
    result[4, 1, 1] = numpy.sum(x689 * (x0 * x1199 + x981))
    result[4, 1, 2] = numpy.sum(x689 * (x0 * x1200 + x982))
    result[4, 1, 3] = numpy.sum(x259 * (x0 * x1201 + x983))
    result[4, 1, 4] = numpy.sum(x696 * (x0 * x1202 + x984))
    result[4, 1, 5] = numpy.sum(x259 * (x0 * x1203 + x985))
    result[4, 1, 6] = numpy.sum(x689 * (x0 * x1204 + x986))
    result[4, 1, 7] = numpy.sum(x696 * (x0 * x1205 + x987))
    result[4, 1, 8] = numpy.sum(x696 * (x0 * x1206 + x988))
    result[4, 1, 9] = numpy.sum(x689 * (x0 * x1207 + x989))
    result[4, 1, 10] = numpy.sum(x686 * (x0 * x1208 + x990))
    result[4, 1, 11] = numpy.sum(x689 * (x0 * x1209 + x991))
    result[4, 1, 12] = numpy.sum(x259 * (x0 * x1210 + x992))
    result[4, 1, 13] = numpy.sum(x689 * (x0 * x1211 + x993))
    result[4, 1, 14] = numpy.sum(x686 * (x0 * x1212 + x994))
    result[4, 2, 0] = numpy.sum(x686 * (x0 * x1214 + x860))
    result[4, 2, 1] = numpy.sum(x689 * (x0 * x1217 + x864))
    result[4, 2, 2] = numpy.sum(x689 * (x0 * x1219 + x868))
    result[4, 2, 3] = numpy.sum(x259 * (x0 * x1221 + x872))
    result[4, 2, 4] = numpy.sum(x696 * (x0 * x1223 + x876))
    result[4, 2, 5] = numpy.sum(x259 * (x0 * x1225 + x880))
    result[4, 2, 6] = numpy.sum(x689 * (x0 * x1227 + x884))
    result[4, 2, 7] = numpy.sum(x696 * (x0 * x1229 + x888))
    result[4, 2, 8] = numpy.sum(x696 * (x0 * x1231 + x892))
    result[4, 2, 9] = numpy.sum(x689 * (x0 * x1233 + x896))
    result[4, 2, 10] = numpy.sum(x686 * (x0 * x1235 + x898))
    result[4, 2, 11] = numpy.sum(x689 * (x0 * x1237 + x900))
    result[4, 2, 12] = numpy.sum(x259 * (x0 * x1239 + x902))
    result[4, 2, 13] = numpy.sum(x689 * (x0 * x1241 + x904))
    result[4, 2, 14] = numpy.sum(x686 * (x0 * x1243 + x906))
    result[4, 3, 0] = numpy.sum(x205 * (x1080 * x21 + x1126 + x1197 * x21))
    result[4, 3, 1] = numpy.sum(x225 * (x1083 * x21 + x1128 + x1199 * x21))
    result[4, 3, 2] = numpy.sum(x225 * (x1085 * x21 + x1130 + x1200 * x21))
    result[4, 3, 3] = numpy.sum(x129 * (x1087 * x21 + x1132 + x1201 * x21))
    result[4, 3, 4] = numpy.sum(x259 * (x1090 * x21 + x1134 + x1202 * x21))
    result[4, 3, 5] = numpy.sum(x129 * (x1092 * x21 + x1136 + x1203 * x21))
    result[4, 3, 6] = numpy.sum(x225 * (x1095 * x21 + x1138 + x1204 * x21))
    result[4, 3, 7] = numpy.sum(x259 * (x1098 * x21 + x1140 + x1205 * x21))
    result[4, 3, 8] = numpy.sum(x259 * (x1100 * x21 + x1142 + x1206 * x21))
    result[4, 3, 9] = numpy.sum(x225 * (x1102 * x21 + x1144 + x1207 * x21))
    result[4, 3, 10] = numpy.sum(x205 * (x1104 * x21 + x1145 + x1208 * x21))
    result[4, 3, 11] = numpy.sum(x225 * (x1106 * x21 + x1146 + x1209 * x21))
    result[4, 3, 12] = numpy.sum(x129 * (x1108 * x21 + x1147 + x1210 * x21))
    result[4, 3, 13] = numpy.sum(x225 * (x1111 * x21 + x1148 + x1211 * x21))
    result[4, 3, 14] = numpy.sum(x205 * (x1113 * x21 + x1149 + x1212 * x21))
    result[4, 4, 0] = numpy.sum(x686 * (x1152 + x1214 * x21))
    result[4, 4, 1] = numpy.sum(x689 * (x1155 + x1217 * x21))
    result[4, 4, 2] = numpy.sum(x689 * (x1158 + x1219 * x21))
    result[4, 4, 3] = numpy.sum(x259 * (x1161 + x1221 * x21))
    result[4, 4, 4] = numpy.sum(x696 * (x1164 + x1223 * x21))
    result[4, 4, 5] = numpy.sum(x259 * (x1167 + x1225 * x21))
    result[4, 4, 6] = numpy.sum(x689 * (x1170 + x1227 * x21))
    result[4, 4, 7] = numpy.sum(x696 * (x1173 + x1229 * x21))
    result[4, 4, 8] = numpy.sum(x696 * (x1176 + x1231 * x21))
    result[4, 4, 9] = numpy.sum(x689 * (x1179 + x1233 * x21))
    result[4, 4, 10] = numpy.sum(x686 * (x1181 + x1235 * x21))
    result[4, 4, 11] = numpy.sum(x689 * (x1183 + x1237 * x21))
    result[4, 4, 12] = numpy.sum(x259 * (x1185 + x1239 * x21))
    result[4, 4, 13] = numpy.sum(x689 * (x1187 + x1241 * x21))
    result[4, 4, 14] = numpy.sum(x686 * (x1189 + x1243 * x21))
    result[4, 5, 0] = numpy.sum(x205 * (x1214 * x22 + x1245))
    result[4, 5, 1] = numpy.sum(x225 * (x1217 * x22 + x1247))
    result[4, 5, 2] = numpy.sum(x225 * (x1219 * x22 + x1249))
    result[4, 5, 3] = numpy.sum(x129 * (x1221 * x22 + x1251))
    result[4, 5, 4] = numpy.sum(x259 * (x1223 * x22 + x1253))
    result[4, 5, 5] = numpy.sum(x129 * (x1225 * x22 + x1255))
    result[4, 5, 6] = numpy.sum(x225 * (x1227 * x22 + x1257))
    result[4, 5, 7] = numpy.sum(x259 * (x1229 * x22 + x1259))
    result[4, 5, 8] = numpy.sum(x259 * (x1231 * x22 + x1261))
    result[4, 5, 9] = numpy.sum(x225 * (x1233 * x22 + x1263))
    result[4, 5, 10] = numpy.sum(x205 * (x1235 * x22 + x1264))
    result[4, 5, 11] = numpy.sum(x225 * (x1237 * x22 + x1265))
    result[4, 5, 12] = numpy.sum(x129 * (x1239 * x22 + x1266))
    result[4, 5, 13] = numpy.sum(x225 * (x1241 * x22 + x1267))
    result[4, 5, 14] = numpy.sum(x205 * (x1243 * x22 + x1268))
    result[5, 0, 0] = numpy.sum(x91 * (x0 * x945 + x0 * (x1031 * x1269 + x945) + x608))
    result[5, 0, 1] = numpy.sum(x103 * (x0 * x947 + x0 * (x1191 * x1270 + x947) + x613))
    result[5, 0, 2] = numpy.sum(x103 * (x0 * x949 + x0 * (x1191 * x617 + x949) + x621))
    result[5, 0, 3] = numpy.sum(x120 * (x0 * x951 + x0 * (x1269 * x1272 + x951) + x625))
    result[5, 0, 4] = numpy.sum(x129 * (x0 * x953 + x0 * (x1273 * x1274 + x953) + x629))
    result[5, 0, 5] = numpy.sum(x120 * (x0 * x955 + x0 * (x1036 * x633 + x955) + x636))
    result[5, 0, 6] = numpy.sum(x103 * (x0 * x958 + x0 * (x1269 * x1275 + x958) + x638))
    result[5, 0, 7] = numpy.sum(x129 * (x0 * x961 + x0 * (x1274 * x1277 + x961) + x640))
    result[5, 0, 8] = numpy.sum(x129 * (x0 * x964 + x0 * (x0 * x1278 + x964) + x642))
    result[5, 0, 9] = numpy.sum(x103 * (x0 * x968 + x0 * (x1039 * x966 + x968) + x646))
    result[5, 0, 10] = numpy.sum(x91 * (x0 * x970 + x0 * (x1269 * x154 + x970) + x648))
    result[5, 0, 11] = numpy.sum(x103 * (x0 * x972 + x0 * (x0 * x1279 + x972) + x650))
    result[5, 0, 12] = numpy.sum(x120 * (x0 * x974 + x0 * (x0 * x1280 + x974) + x652))
    result[5, 0, 13] = numpy.sum(x103 * (x0 * x976 + x0 * (x0 * x1281 + x976) + x654))
    result[5, 0, 14] = numpy.sum(x91 * (x0 * x978 + x0 * (x1282 * x78 + x978) + x656))
    result[5, 1, 0] = numpy.sum(x205 * (x0 * x1284 + x21 * x945 + x859))
    result[5, 1, 1] = numpy.sum(x225 * (x0 * x1285 + x21 * x947 + x863))
    result[5, 1, 2] = numpy.sum(x225 * (x0 * x1286 + x21 * x949 + x867))
    result[5, 1, 3] = numpy.sum(x129 * (x0 * x1287 + x21 * x951 + x871))
    result[5, 1, 4] = numpy.sum(x259 * (x0 * x1289 + x21 * x953 + x875))
    result[5, 1, 5] = numpy.sum(x129 * (x0 * x1290 + x21 * x955 + x879))
    result[5, 1, 6] = numpy.sum(x225 * (x0 * x1291 + x21 * x958 + x883))
    result[5, 1, 7] = numpy.sum(x259 * (x0 * x1292 + x21 * x961 + x887))
    result[5, 1, 8] = numpy.sum(x259 * (x0 * x1293 + x21 * x964 + x891))
    result[5, 1, 9] = numpy.sum(x225 * (x0 * x1294 + x21 * x968 + x895))
    result[5, 1, 10] = numpy.sum(x205 * (x0 * x1295 + x21 * x970 + x897))
    result[5, 1, 11] = numpy.sum(x225 * (x0 * x1296 + x21 * x972 + x899))
    result[5, 1, 12] = numpy.sum(x129 * (x0 * x1297 + x21 * x974 + x901))
    result[5, 1, 13] = numpy.sum(x225 * (x0 * x1298 + x21 * x976 + x903))
    result[5, 1, 14] = numpy.sum(x205 * (x0 * x1299 + x21 * x978 + x905))
    result[5, 2, 0] = numpy.sum(x205 * (x0 * x1302 + x1000))
    result[5, 2, 1] = numpy.sum(x225 * (x0 * x1304 + x1002))
    result[5, 2, 2] = numpy.sum(x225 * (x0 * x1306 + x1006))
    result[5, 2, 3] = numpy.sum(x129 * (x0 * x1308 + x1008))
    result[5, 2, 4] = numpy.sum(x259 * (x0 * x1311 + x1011))
    result[5, 2, 5] = numpy.sum(x129 * (x0 * x1313 + x1015))
    result[5, 2, 6] = numpy.sum(x225 * (x0 * x1315 + x1017))
    result[5, 2, 7] = numpy.sum(x259 * (x0 * x1317 + x1019))
    result[5, 2, 8] = numpy.sum(x259 * (x0 * x1319 + x1021))
    result[5, 2, 9] = numpy.sum(x225 * (x0 * x1321 + x1025))
    result[5, 2, 10] = numpy.sum(x205 * (x0 * x1323 + x1026))
    result[5, 2, 11] = numpy.sum(x225 * (x0 * x1325 + x1027))
    result[5, 2, 12] = numpy.sum(x129 * (x0 * x1327 + x1028))
    result[5, 2, 13] = numpy.sum(x225 * (x0 * x1329 + x1029))
    result[5, 2, 14] = numpy.sum(x205 * (x0 * x1331 + x1030))
    result[5, 3, 0] = numpy.sum(x91 * (x1151 + x1213 * x21 + x1284 * x21))
    result[5, 3, 1] = numpy.sum(x103 * (x1154 + x1215 * x21 + x1285 * x21))
    result[5, 3, 2] = numpy.sum(x103 * (x1157 + x1218 * x21 + x1286 * x21))
    result[5, 3, 3] = numpy.sum(x120 * (x1160 + x1220 * x21 + x1287 * x21))
    result[5, 3, 4] = numpy.sum(x129 * (x1163 + x1222 * x21 + x1289 * x21))
    result[5, 3, 5] = numpy.sum(x120 * (x1166 + x1224 * x21 + x1290 * x21))
    result[5, 3, 6] = numpy.sum(x103 * (x1169 + x1226 * x21 + x1291 * x21))
    result[5, 3, 7] = numpy.sum(x129 * (x1172 + x1228 * x21 + x1292 * x21))
    result[5, 3, 8] = numpy.sum(x129 * (x1175 + x1230 * x21 + x1293 * x21))
    result[5, 3, 9] = numpy.sum(x103 * (x1178 + x1232 * x21 + x1294 * x21))
    result[5, 3, 10] = numpy.sum(x91 * (x1180 + x1234 * x21 + x1295 * x21))
    result[5, 3, 11] = numpy.sum(x103 * (x1182 + x1236 * x21 + x1296 * x21))
    result[5, 3, 12] = numpy.sum(x120 * (x1184 + x1238 * x21 + x1297 * x21))
    result[5, 3, 13] = numpy.sum(x103 * (x1186 + x1240 * x21 + x1298 * x21))
    result[5, 3, 14] = numpy.sum(x91 * (x1188 + x1242 * x21 + x1299 * x21))
    result[5, 4, 0] = numpy.sum(x205 * (x1245 + x1302 * x21))
    result[5, 4, 1] = numpy.sum(x225 * (x1247 + x1304 * x21))
    result[5, 4, 2] = numpy.sum(x225 * (x1249 + x1306 * x21))
    result[5, 4, 3] = numpy.sum(x129 * (x1251 + x1308 * x21))
    result[5, 4, 4] = numpy.sum(x259 * (x1253 + x1311 * x21))
    result[5, 4, 5] = numpy.sum(x129 * (x1255 + x1313 * x21))
    result[5, 4, 6] = numpy.sum(x225 * (x1257 + x1315 * x21))
    result[5, 4, 7] = numpy.sum(x259 * (x1259 + x1317 * x21))
    result[5, 4, 8] = numpy.sum(x259 * (x1261 + x1319 * x21))
    result[5, 4, 9] = numpy.sum(x225 * (x1263 + x1321 * x21))
    result[5, 4, 10] = numpy.sum(x205 * (x1264 + x1323 * x21))
    result[5, 4, 11] = numpy.sum(x225 * (x1265 + x1325 * x21))
    result[5, 4, 12] = numpy.sum(x129 * (x1266 + x1327 * x21))
    result[5, 4, 13] = numpy.sum(x225 * (x1267 + x1329 * x21))
    result[5, 4, 14] = numpy.sum(x205 * (x1268 + x1331 * x21))
    result[5, 5, 0] = numpy.sum(x91 * (x1031 * x1332 + x1300 * x22 + x1302 * x22))
    result[5, 5, 1] = numpy.sum(x103 * (x1216 * x9 * x995 + x1303 * x1332 + x1304 * x22))
    result[5, 5, 2] = numpy.sum(x103 * (x1033 * x1333 + x1305 * x22 + x1306 * x22))
    result[5, 5, 3] = numpy.sum(x120 * (x1272 * x1332 + x1307 * x22 + x1308 * x22))
    result[5, 5, 4] = numpy.sum(x129 * (x1273 * x1333 + x1309 * x22 + x1311 * x22))
    result[5, 5, 5] = numpy.sum(x120 * (x1312 * x22 + x1313 * x22 + x1334 * x661))
    result[5, 5, 6] = numpy.sum(x103 * (x1275 * x1332 + x1314 * x22 + x1315 * x22))
    result[5, 5, 7] = numpy.sum(x129 * (x1277 * x1333 + x1316 * x22 + x1317 * x22))
    result[5, 5, 8] = numpy.sum(x129 * (x1318 * x22 + x1319 * x22 + x1334 * x912))
    result[5, 5, 9] = numpy.sum(x103 * (x1320 * x22 + x1321 * x22 + x1335 * x217))
    result[5, 5, 10] = numpy.sum(x91 * (x1322 * x22 + x1323 * x22 + x1332 * x154))
    result[5, 5, 11] = numpy.sum(x103 * (x1324 * x22 + x1325 * x22 + x1333 * x157))
    result[5, 5, 12] = numpy.sum(x120 * (x1326 * x22 + x1327 * x22 + x1334 * x141))
    result[5, 5, 13] = numpy.sum(x103 * (x121 * x1335 + x1328 * x22 + x1329 * x22))
    result[5, 5, 14] = numpy.sum(
        x91 * (x1330 * x22 + x1331 * x22 + x55 * (4.0 * x1023 + x104 * x1335))
    )
    return result


def int3c2e3d_sph_230(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (df|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 10, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = -x3 - C[0]
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = cx / x11
    x13 = x1 * x12 * (x10**2 + x6**2 + x8**2)
    x14 = boys(1, x13)
    x15 = 17.49341832762486
    x16 = A[1] - B[1]
    x17 = A[2] - B[2]
    x18 = numpy.exp(-ax * bx * x2 * (x0**2 + x16**2 + x17**2))
    x19 = 2.0 * x11 ** (-1.5) * x15 * x18 * x2
    x20 = x14 * x19
    x21 = cx ** (-1.0)
    x22 = x11 ** (-0.5)
    x23 = boys(0, x13)
    x24 = 2.0 * x15 * x18 * x2 * x21 * x22 * x23 - x20
    x25 = x24 * x5
    x26 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x4 + x20 * x6
    x27 = -x26
    x28 = boys(2, x13)
    x29 = x19 * x28
    x30 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x4 + x29 * x6
    x31 = -x30
    x32 = x12 * x31
    x33 = x32 * x6
    x34 = x25 + x27 * x4 - x33
    x35 = -x26 - x32
    x36 = 2.0 * x5
    x37 = 2.0 * x14 * x15 * x18 * x2 * x21 * x22 - x29
    x38 = x37 * x5
    x39 = boys(3, x13)
    x40 = x19 * x39
    x41 = -2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x4 + x40 * x6
    x42 = -x41
    x43 = x12 * x42
    x44 = x43 * x6
    x45 = x31 * x4 + x38 - x44
    x46 = x12 * x45
    x47 = x46 * x6
    x48 = x34 * x4 + x35 * x36 - x47
    x49 = -x24 * x5
    x50 = 3.0 * x5
    x51 = x5 * (2.0 * x15 * x18 * x2 * x21 * x22 * x28 - x40)
    x52 = boys(4, x13)
    x53 = x19 * x52
    x54 = 2.0 * x15 * x18 * x2 * x21 * x22 * x39 * x4 - x53 * x6
    x55 = x12 * x54
    x56 = x4 * x42 + x51 - x55 * x6
    x57 = x12 * x56
    x58 = -x36 * (x30 + x43) + x4 * x45 - x57 * x6
    x59 = x12 * x58
    x60 = x4 * x48 - x50 * (-x27 * x4 + x33 + x46 + x49) - x59 * x6
    x61 = x0 * x48 + x60
    x62 = -x37 * x5
    x63 = x5 * (2.0 * x15 * x18 * x2 * x21 * x22 * x39 - x53)
    x64 = x19 * boys(5, x13)
    x65 = x12 * x6
    x66 = da * db * dc
    x67 = 0.06666666666666667 * x66
    x68 = 2.23606797749979 * x67
    x69 = -x7 - A[1]
    x70 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x69 + x29 * x8
    x71 = -x70
    x72 = x12 * x71
    x73 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x69 + x20 * x8
    x74 = -x72 - x73
    x75 = x5 * x74
    x76 = -x73
    x77 = -x4 * x76 + x6 * x72
    x78 = -x77
    x79 = -2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x69 + x40 * x8
    x80 = -x79
    x81 = x12 * x80
    x82 = -x4 * x71 + x6 * x81
    x83 = -x82
    x84 = x12 * x83
    x85 = x6 * x84
    x86 = x4 * x78 + x75 - x85
    x87 = -x5 * (x70 + x81)
    x88 = 2.0 * x15 * x18 * x2 * x21 * x22 * x39 * x69 - x53 * x8
    x89 = x12 * x88
    x90 = x4 * x80 - x6 * x89
    x91 = x12 * x90
    x92 = x4 * x83 - x6 * x91 + x87
    x93 = x12 * x92
    x94 = -x36 * (x77 + x84) + x4 * x86 - x6 * x93
    x95 = x16 * x48 + x94
    x96 = x16 * x34 + x86
    x97 = -x5 * (x79 + x89)
    x98 = 2.0 * x15 * x18 * x2 * x21 * x22 * x52 * x69 - x64 * x8
    x99 = (
        x4 * x94
        + x50 * (x4 * x78 + x5 * x74 - x85 - x93)
        + x65
        * (
            x36 * (x82 + x91)
            - x4 * x92
            + x65 * (x4 * x90 - x65 * (x4 * x88 - x65 * x98) + x97)
        )
    )
    x100 = 0.3333333333333333 * x66
    x101 = -x9 - A[2]
    x102 = x10 * x29 - 2.0 * x101 * x14 * x15 * x18 * x2 * x21 * x22
    x103 = -x102
    x104 = x103 * x12
    x105 = x10 * x20 - 2.0 * x101 * x15 * x18 * x2 * x21 * x22 * x23
    x106 = -x104 - x105
    x107 = x106 * x5
    x108 = -x105
    x109 = x104 * x6 - x108 * x4
    x110 = -x109
    x111 = x10 * x40 - 2.0 * x101 * x15 * x18 * x2 * x21 * x22 * x28
    x112 = -x111
    x113 = x112 * x12
    x114 = -x103 * x4 + x113 * x6
    x115 = -x114
    x116 = x115 * x12
    x117 = x116 * x6
    x118 = x107 + x110 * x4 - x117
    x119 = -x5 * (x102 + x113)
    x120 = -x10 * x53 + 2.0 * x101 * x15 * x18 * x2 * x21 * x22 * x39
    x121 = x12 * x120
    x122 = x112 * x4 - x121 * x6
    x123 = x12 * x122
    x124 = x115 * x4 + x119 - x123 * x6
    x125 = x12 * x124
    x126 = x118 * x4 - x125 * x6 - x36 * (x109 + x116)
    x127 = x126 + x17 * x48
    x128 = x118 + x17 * x34
    x129 = -x106 * x5
    x130 = -x5 * (x111 + x121)
    x131 = -x10 * x64 + 2.0 * x101 * x15 * x18 * x2 * x21 * x22 * x52
    x132 = (
        x126 * x4
        - x50 * (-x110 * x4 + x117 + x125 + x129)
        + x65
        * (
            -x124 * x4
            + x36 * (x114 + x123)
            + x65 * (x122 * x4 + x130 - x65 * (x120 * x4 - x131 * x65))
        )
    )
    x133 = x8 * x81
    x134 = -x133 + x38 + x69 * x71
    x135 = x12 * x134
    x136 = x72 * x8
    x137 = x5 * (-x135 - x136 - x49 + x69 * x76)
    x138 = -x136 + x25 + x69 * x76
    x139 = x135 * x6
    x140 = -x138 * x4 + x139
    x141 = -x140
    x142 = x51 + x69 * x80 - x8 * x89
    x143 = x12 * x142
    x144 = x134 * x4 - x143 * x6
    x145 = x12 * x144
    x146 = x137 + x141 * x4 - x145 * x6
    x147 = x146 + x16 * x86
    x148 = x147 + x16 * x96
    x149 = x5 * (-x133 - x143 - x62 + x69 * x71)
    x150 = x12 * x8
    x151 = -x150 * x98 + x63 + x69 * x88
    x152 = (
        x146 * x4
        - x36 * (x140 + x145)
        - x65 * (x144 * x4 + x149 - x65 * (x142 * x4 - x151 * x65))
    )
    x153 = x152 + x16 * x94
    x154 = -x103 * x69 + x113 * x8
    x155 = -x154
    x156 = x12 * x155
    x157 = x104 * x8 - x108 * x69
    x158 = -x5 * (x156 + x157)
    x159 = -x157
    x160 = x156 * x6
    x161 = -x159 * x4 + x160
    x162 = -x161
    x163 = x112 * x69 - x121 * x8
    x164 = x12 * x163
    x165 = x155 * x4 - x164 * x6
    x166 = x12 * x165
    x167 = x158 + x162 * x4 - x166 * x6
    x168 = x167 + x17 * x86
    x169 = x128 * x16 + x168
    x170 = -x5 * (x154 + x164)
    x171 = x120 * x69 - x131 * x150
    x172 = (
        x167 * x4
        - x36 * (x161 + x166)
        - x65 * (x165 * x4 + x170 - x65 * (x163 * x4 - x171 * x65))
    )
    x173 = x17 * x94 + x172
    x174 = 1.732050807568877 * x100
    x175 = x10 * x113
    x176 = x101 * x103 - x175 + x38
    x177 = x12 * x176
    x178 = x10 * x104
    x179 = x5 * (x101 * x108 - x177 - x178 - x49)
    x180 = x101 * x108 - x178 + x25
    x181 = x177 * x6
    x182 = -x180 * x4 + x181
    x183 = -x182
    x184 = -x10 * x121 + x101 * x112 + x51
    x185 = x12 * x184
    x186 = x176 * x4 - x185 * x6
    x187 = x12 * x186
    x188 = x179 + x183 * x4 - x187 * x6
    x189 = x118 * x17 + x188
    x190 = x128 * x17 + x189
    x191 = x5 * (x101 * x103 - x175 - x185 - x62)
    x192 = x10 * x12
    x193 = x101 * x120 - x131 * x192 + x63
    x194 = (
        x188 * x4
        - x36 * (x182 + x187)
        - x65 * (x186 * x4 + x191 - x65 * (x184 * x4 - x193 * x65))
    )
    x195 = x126 * x17 + x194
    x196 = x134 * x69 - x143 * x8 + 2.0 * x87
    x197 = x12 * x196
    x198 = x135 * x8
    x199 = x5 * (x138 * x69 - x197 - x198 + 2.0 * x5 * x74)
    x200 = x138 * x69 - x198 + 2.0 * x75
    x201 = x197 * x6
    x202 = x200 * x4 - x201
    x203 = x142 * x69 - x150 * x151 + 2.0 * x97
    x204 = x146 * x16 + x199 + x202 * x4 - x65 * (x196 * x4 - x203 * x65)
    x205 = x147 * x16 + x204
    x206 = x119 + x155 * x69 - x164 * x8
    x207 = x12 * x206
    x208 = x156 * x8
    x209 = x5 * (-x129 + x159 * x69 - x207 - x208)
    x210 = x107 + x159 * x69 - x208
    x211 = x207 * x6
    x212 = x210 * x4 - x211
    x213 = x130 - x150 * x171 + x163 * x69
    x214 = x209 + x212 * x4 - x65 * (x206 * x4 - x213 * x65)
    x215 = x146 * x17 + x214
    x216 = x16 * x168 + x215
    x217 = x176 * x69 - x185 * x8
    x218 = x12 * x217
    x219 = x177 * x8
    x220 = -x180 * x69 + x219
    x221 = -x5 * (x218 + x220)
    x222 = -x220
    x223 = x218 * x6
    x224 = x222 * x4 - x223
    x225 = -x150 * x193 + x184 * x69
    x226 = x221 + x224 * x4 - x65 * (x217 * x4 - x225 * x65)
    x227 = x167 * x17 + x226
    x228 = x168 * x17 + x227
    x229 = -x10 * x185 + x101 * x176 + 2.0 * x119
    x230 = x12 * x229
    x231 = x10 * x177
    x232 = x5 * (x101 * x180 + 2.0 * x106 * x5 - x230 - x231)
    x233 = x101 * x180 + 2.0 * x107 - x231
    x234 = x230 * x6
    x235 = x233 * x4 - x234
    x236 = x101 * x184 + 2.0 * x130 - x192 * x193
    x237 = x17 * x188 + x232 + x235 * x4 - x65 * (x229 * x4 - x236 * x65)
    x238 = x17 * x189 + x237
    x239 = x0 * x86 + x94
    x240 = 3.872983346207417 * x67
    x241 = x138 * x4 - x139
    x242 = x16 * x78 + x241
    x243 = x159 * x4 - x160
    x244 = x17 * x78 + x243
    x245 = x141 * x16 + x200 * x4 - x201
    x246 = x16 * x242 + x245
    x247 = x210 * x4 - x211
    x248 = x141 * x17 + x247
    x249 = x16 * x244 + x248
    x250 = x222 * x4 - x223
    x251 = x162 * x17 + x250
    x252 = x17 * x244 + x251
    x253 = 3.0 * x137 - x197 * x8 + x200 * x69
    x254 = 3.0 * x149 - x150 * x203 + x196 * x69
    x255 = x16 * x202 + x16 * x245 + x253 * x4 - x254 * x65
    x256 = 2.0 * x158 - x207 * x8 + x210 * x69
    x257 = -x150 * x213 + 2.0 * x170 + x206 * x69
    x258 = x256 * x4 - x257 * x65
    x259 = x16 * x248 + x17 * x202 + x258
    x260 = x179 - x218 * x8 + x222 * x69
    x261 = -x150 * x225 + x191 + x217 * x69
    x262 = x260 * x4 - x261 * x65
    x263 = x17 * x212 + x262
    x264 = x17 * x248 + x263
    x265 = x230 * x8
    x266 = x233 * x69 - x265
    x267 = -x150 * x236 + x229 * x69
    x268 = x17 * x224 + x266 * x4 - x267 * x65
    x269 = x17 * x251 + x268
    x270 = x0 * x118 + x126
    x271 = x118 * x16 + x167
    x272 = x110 * x16 + x243
    x273 = x180 * x4 - x181
    x274 = x110 * x17 + x273
    x275 = x16 * x162 + x247
    x276 = x16 * x272 + x275
    x277 = x16 * x167 + x214
    x278 = x16 * x274 + x251
    x279 = x17 * x183 + x233 * x4 - x234
    x280 = x17 * x274 + x279
    x281 = x16 * x212 + x16 * x275 + x258
    x282 = x16 * x251 + x263
    x283 = -x10 * x230 + x101 * x233 + 3.0 * x179
    x284 = x101 * x229 + 3.0 * x191 - x192 * x236
    x285 = x17 * x235 + x17 * x279 + x283 * x4 - x284 * x65
    x286 = x0 * x141 + x146
    x287 = x138 * x16 + x200
    x288 = x138 * x17 + x210
    x289 = x16 * x200 + x253
    x290 = x16 * x287 + x289
    x291 = x17 * x200 + x256
    x292 = x16 * x288 + x291
    x293 = x17 * x210 + x260
    x294 = x17 * x288 + x293
    x295 = -x150 * x257 + 3.0 * x209 + x256 * x69
    x296 = -x150 * x261 + 2.0 * x221 + x260 * x69
    x297 = x17 * x256 + x296
    x298 = -x150 * x267 + x17 * x260 + x232 + x266 * x69
    x299 = x17 * x293 + x298
    x300 = x0 * x162 + x167
    x301 = x159 * x16 + x210
    x302 = x180 * x69 - x219
    x303 = x159 * x17 + x302
    x304 = x16 * x210 + x256
    x305 = x16 * x301 + x304
    x306 = x16 * x303 + x293
    x307 = x17 * x222 + x233 * x69 - x265
    x308 = x17 * x303 + x307
    x309 = -x150 * x284 + x17 * x266 + x17 * x307 + x283 * x69
    x310 = x0 * x183 + x188
    x311 = x16 * x183 + x250
    x312 = x16 * x180 + x302
    x313 = x17 * x180 + x233
    x314 = x16 * x222 + x260
    x315 = x16 * x312 + x314
    x316 = x16 * x313 + x307
    x317 = x17 * x233 + x283
    x318 = x17 * x313 + x317

    # 60 item(s)
    result[0, 0, 0] = numpy.sum(
        x68
        * (
            x0 * x60
            + x0 * x61
            + x0 * (x0 * (x0 * x34 + x48) + x61)
            + x4 * x60
            + 4.0 * x5 * (x34 * x4 + 2.0 * x35 * x5 - x47 - x59)
            + x65
            * (
                -x4 * x58
                + x50 * (-x31 * x4 + x44 + x57 + x62)
                + x65
                * (
                    -x36 * (x41 + x55)
                    + x4 * x56
                    - x65
                    * (
                        x4 * x54
                        + x63
                        - x65 * (2.0 * x15 * x18 * x2 * x21 * x22 * x4 * x52 - x6 * x64)
                    )
                )
            )
        )
    )
    result[0, 1, 0] = numpy.sum(
        x100 * (x0 * x95 + x0 * (x0 * x96 + x95) + x16 * x60 + x99)
    )
    result[0, 2, 0] = numpy.sum(
        x100 * (x0 * x127 + x0 * (x0 * x128 + x127) + x132 + x17 * x60)
    )
    result[0, 3, 0] = numpy.sum(x100 * (x0 * x148 + x153 + x16 * x95))
    result[0, 4, 0] = numpy.sum(x174 * (x0 * x169 + x127 * x16 + x173))
    result[0, 5, 0] = numpy.sum(x100 * (x0 * x190 + x127 * x17 + x195))
    result[0, 6, 0] = numpy.sum(x68 * (x148 * x16 + x205))
    result[0, 7, 0] = numpy.sum(x100 * (x16 * x169 + x216))
    result[0, 8, 0] = numpy.sum(x100 * (x16 * x190 + x228))
    result[0, 9, 0] = numpy.sum(x68 * (x17 * x190 + x238))
    result[1, 0, 0] = numpy.sum(
        x240 * (x0 * x239 + x0 * x94 + x0 * (x0 * (x0 * x78 + x86) + x239) + x99)
    )
    result[1, 1, 0] = numpy.sum(x174 * (x0 * x147 + x0 * (x0 * x242 + x147) + x153))
    result[1, 2, 0] = numpy.sum(x174 * (x0 * x168 + x0 * (x0 * x244 + x168) + x173))
    result[1, 3, 0] = numpy.sum(x174 * (x0 * x246 + x205))
    result[1, 4, 0] = numpy.sum(x66 * (x0 * x249 + x216))
    result[1, 5, 0] = numpy.sum(x174 * (x0 * x252 + x228))
    result[1, 6, 0] = numpy.sum(x240 * (x16 * x246 + x255))
    result[1, 7, 0] = numpy.sum(x174 * (x16 * x249 + x259))
    result[1, 8, 0] = numpy.sum(x174 * (x16 * x252 + x264))
    result[1, 9, 0] = numpy.sum(x240 * (x17 * x252 + x269))
    result[2, 0, 0] = numpy.sum(
        x240 * (x0 * x126 + x0 * x270 + x0 * (x0 * (x0 * x110 + x118) + x270) + x132)
    )
    result[2, 1, 0] = numpy.sum(
        x174 * (x0 * x271 + x0 * (x0 * x272 + x271) + x126 * x16 + x172)
    )
    result[2, 2, 0] = numpy.sum(x174 * (x0 * x189 + x0 * (x0 * x274 + x189) + x195))
    result[2, 3, 0] = numpy.sum(x174 * (x0 * x276 + x16 * x271 + x277))
    result[2, 4, 0] = numpy.sum(x66 * (x0 * x278 + x16 * x189 + x227))
    result[2, 5, 0] = numpy.sum(x174 * (x0 * x280 + x238))
    result[2, 6, 0] = numpy.sum(x240 * (x16 * x276 + x281))
    result[2, 7, 0] = numpy.sum(x174 * (x16 * x278 + x282))
    result[2, 8, 0] = numpy.sum(x174 * (x16 * x280 + x269))
    result[2, 9, 0] = numpy.sum(x240 * (x17 * x280 + x285))
    result[3, 0, 0] = numpy.sum(
        x68 * (x0 * x146 + x0 * x286 + x0 * (x0 * (x0 * x138 + x241) + x286) + x152)
    )
    result[3, 1, 0] = numpy.sum(x100 * (x0 * x245 + x0 * (x0 * x287 + x245) + x204))
    result[3, 2, 0] = numpy.sum(x100 * (x0 * x248 + x0 * (x0 * x288 + x248) + x215))
    result[3, 3, 0] = numpy.sum(x100 * (x0 * x290 + x255))
    result[3, 4, 0] = numpy.sum(x174 * (x0 * x292 + x259))
    result[3, 5, 0] = numpy.sum(x100 * (x0 * x294 + x264))
    result[3, 6, 0] = numpy.sum(
        x68
        * (-x150 * x254 + x16 * x253 + x16 * x289 + x16 * x290 + 4.0 * x199 + x253 * x69)
    )
    result[3, 7, 0] = numpy.sum(x100 * (x16 * x291 + x16 * x292 + x17 * x253 + x295))
    result[3, 8, 0] = numpy.sum(x100 * (x16 * x294 + x17 * x291 + x297))
    result[3, 9, 0] = numpy.sum(x68 * (x17 * x294 + x299))
    result[4, 0, 0] = numpy.sum(
        x240 * (x0 * x167 + x0 * x300 + x0 * (x0 * (x0 * x159 + x243) + x300) + x172)
    )
    result[4, 1, 0] = numpy.sum(x174 * (x0 * x275 + x0 * (x0 * x301 + x275) + x277))
    result[4, 2, 0] = numpy.sum(x174 * (x0 * x251 + x0 * (x0 * x303 + x251) + x227))
    result[4, 3, 0] = numpy.sum(x174 * (x0 * x305 + x281))
    result[4, 4, 0] = numpy.sum(x66 * (x0 * x306 + x282))
    result[4, 5, 0] = numpy.sum(x174 * (x0 * x308 + x269))
    result[4, 6, 0] = numpy.sum(x240 * (x16 * x256 + x16 * x304 + x16 * x305 + x295))
    result[4, 7, 0] = numpy.sum(x174 * (x16 * x293 + x16 * x306 + x297))
    result[4, 8, 0] = numpy.sum(x174 * (x16 * x308 + x299))
    result[4, 9, 0] = numpy.sum(x240 * (x17 * x308 + x309))
    result[5, 0, 0] = numpy.sum(
        x68 * (x0 * x188 + x0 * x310 + x0 * (x0 * (x0 * x180 + x273) + x310) + x194)
    )
    result[5, 1, 0] = numpy.sum(
        x100 * (x0 * x311 + x0 * (x0 * x312 + x311) + x16 * x188 + x226)
    )
    result[5, 2, 0] = numpy.sum(x100 * (x0 * x279 + x0 * (x0 * x313 + x279) + x237))
    result[5, 3, 0] = numpy.sum(x100 * (x0 * x315 + x16 * x224 + x16 * x311 + x262))
    result[5, 4, 0] = numpy.sum(x174 * (x0 * x316 + x16 * x279 + x268))
    result[5, 5, 0] = numpy.sum(x100 * (x0 * x318 + x285))
    result[5, 6, 0] = numpy.sum(x68 * (x16 * x260 + x16 * x314 + x16 * x315 + x296))
    result[5, 7, 0] = numpy.sum(x100 * (x16 * x307 + x16 * x316 + x298))
    result[5, 8, 0] = numpy.sum(x100 * (x16 * x318 + x309))
    result[5, 9, 0] = numpy.sum(
        x68
        * (x101 * x283 + x17 * x283 + x17 * x317 + x17 * x318 - x192 * x284 + 4.0 * x232)
    )
    return result


def int3c2e3d_sph_231(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (df|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 10, 3), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = x11 ** (-1.0)
    x13 = cx * x12
    x14 = x1 * x13 * (x10**2 + x4**2 + x8**2)
    x15 = boys(2, x14)
    x16 = 17.49341832762486
    x17 = A[1] - B[1]
    x18 = A[2] - B[2]
    x19 = numpy.exp(-ax * bx * x2 * (x0**2 + x17**2 + x18**2))
    x20 = 2.0 * x11 ** (-1.5) * x16 * x19 * x2
    x21 = x15 * x20
    x22 = cx ** (-1.0)
    x23 = x11 ** (-0.5)
    x24 = boys(1, x14)
    x25 = 2.0 * x16 * x19 * x2 * x22 * x23 * x24 - x21
    x26 = x25 * x6
    x27 = -2.0 * x16 * x19 * x2 * x22 * x23 * x24 * x5 + x21 * x4
    x28 = -x27
    x29 = boys(3, x14)
    x30 = x20 * x29
    x31 = -2.0 * x15 * x16 * x19 * x2 * x22 * x23 * x5 + x30 * x4
    x32 = -x31
    x33 = x13 * x32
    x34 = x33 * x4
    x35 = x26 + x28 * x5 - x34
    x36 = -x27 - x33
    x37 = 2.0 * x6
    x38 = 2.0 * x15 * x16 * x19 * x2 * x22 * x23 - x30
    x39 = x38 * x6
    x40 = boys(4, x14)
    x41 = x20 * x40
    x42 = -2.0 * x16 * x19 * x2 * x22 * x23 * x29 * x5 + x4 * x41
    x43 = -x42
    x44 = x13 * x43
    x45 = x4 * x44
    x46 = x32 * x5 + x39 - x45
    x47 = x13 * x46
    x48 = x4 * x47
    x49 = x35 * x5 + x36 * x37 - x48
    x50 = -x25 * x6
    x51 = 3.0 * x6
    x52 = x6 * (2.0 * x16 * x19 * x2 * x22 * x23 * x29 - x41)
    x53 = boys(5, x14)
    x54 = x20 * x53
    x55 = 2.0 * x16 * x19 * x2 * x22 * x23 * x40 * x5 - x4 * x54
    x56 = x13 * x55
    x57 = -x4 * x56 + x43 * x5 + x52
    x58 = x13 * x57
    x59 = -x37 * (x31 + x44) - x4 * x58 + x46 * x5
    x60 = x13 * x59
    x61 = -x4 * x60 + x49 * x5 - x51 * (-x28 * x5 + x34 + x47 + x50)
    x62 = x49 * x6
    x63 = x1 * x12
    x64 = x63 * (x4 * x61 + 4.0 * x62)
    x65 = x35 * x6
    x66 = x63 * (x4 * x49 + 3.0 * x65)
    x67 = x0 * x66 + x64
    x68 = x28 * x6
    x69 = x63 * (x35 * x4 + 2.0 * x68)
    x70 = -x38 * x6
    x71 = x6 * (2.0 * x16 * x19 * x2 * x22 * x23 * x40 - x54)
    x72 = x20 * boys(6, x14)
    x73 = x13 * x4
    x74 = (
        x5 * x61
        + 4.0 * x6 * (x35 * x5 + 2.0 * x36 * x6 - x48 - x60)
        - x73
        * (
            x5 * x59
            - x51 * (-x32 * x5 + x45 + x58 + x70)
            + x73
            * (
                x37 * (x42 + x56)
                - x5 * x57
                + x73
                * (
                    x5 * x55
                    + x71
                    - x73 * (2.0 * x16 * x19 * x2 * x22 * x23 * x5 * x53 - x4 * x72)
                )
            )
        )
    )
    x75 = x6 * x61
    x76 = da * db * dc
    x77 = 0.06666666666666667 * x76
    x78 = 2.23606797749979 * x77
    x79 = x63 * x8
    x80 = x61 * x79
    x81 = x49 * x79
    x82 = x0 * x81 + x80
    x83 = x0 * x35
    x84 = x10 * x63
    x85 = x61 * x84
    x86 = x49 * x84
    x87 = x0 * x86 + x85
    x88 = -x7 - A[1]
    x89 = -2.0 * x15 * x16 * x19 * x2 * x22 * x23 * x88 + x30 * x8
    x90 = -x89
    x91 = x13 * x90
    x92 = -2.0 * x16 * x19 * x2 * x22 * x23 * x24 * x88 + x21 * x8
    x93 = -x91 - x92
    x94 = x6 * x93
    x95 = -x92
    x96 = x4 * x91 - x5 * x95
    x97 = -x96
    x98 = -2.0 * x16 * x19 * x2 * x22 * x23 * x29 * x88 + x41 * x8
    x99 = -x98
    x100 = x13 * x99
    x101 = x100 * x4 - x5 * x90
    x102 = -x101
    x103 = x102 * x13
    x104 = x103 * x4
    x105 = -x104 + x5 * x97 + x94
    x106 = -x6 * (x100 + x89)
    x107 = 2.0 * x16 * x19 * x2 * x22 * x23 * x40 * x88 - x54 * x8
    x108 = x107 * x13
    x109 = -x108 * x4 + x5 * x99
    x110 = x109 * x13
    x111 = x102 * x5 + x106 - x110 * x4
    x112 = x111 * x13
    x113 = x105 * x5 - x112 * x4 - x37 * (x103 + x96)
    x114 = x105 * x6
    x115 = x63 * (x113 * x4 + 3.0 * x114)
    x116 = x115 + x17 * x66
    x117 = x6 * x97
    x118 = 2.0 * x117
    x119 = x63 * (x105 * x4 + x118)
    x120 = x119 + x17 * x69
    x121 = -x6 * (x108 + x98)
    x122 = 2.0 * x16 * x19 * x2 * x22 * x23 * x53 * x88 - x72 * x8
    x123 = (
        x113 * x5
        - x51 * (x104 + x112 - x5 * x97 - x6 * x93)
        + x73
        * (
            -x111 * x5
            + x37 * (x101 + x110)
            + x73 * (x109 * x5 + x121 - x73 * (x107 * x5 - x122 * x73))
        )
    )
    x124 = x113 * x6
    x125 = x63 * (x123 * x4 + 4.0 * x124)
    x126 = 0.3333333333333333 * x76
    x127 = x63 * (x113 * x8 + x62)
    x128 = x127 + x17 * x81
    x129 = x63 * (x105 * x8 + x65)
    x130 = x17 * x35
    x131 = x129 + x130 * x79
    x132 = x63 * (x123 * x8 + x75)
    x133 = x113 * x84
    x134 = x133 + x17 * x86
    x135 = x105 * x84
    x136 = x130 * x84 + x135
    x137 = x123 * x84
    x138 = -x9 - A[2]
    x139 = x10 * x30 - 2.0 * x138 * x15 * x16 * x19 * x2 * x22 * x23
    x140 = -x139
    x141 = x13 * x140
    x142 = x10 * x21 - 2.0 * x138 * x16 * x19 * x2 * x22 * x23 * x24
    x143 = -x141 - x142
    x144 = x143 * x6
    x145 = -x142
    x146 = x141 * x4 - x145 * x5
    x147 = -x146
    x148 = x10 * x41 - 2.0 * x138 * x16 * x19 * x2 * x22 * x23 * x29
    x149 = -x148
    x150 = x13 * x149
    x151 = -x140 * x5 + x150 * x4
    x152 = -x151
    x153 = x13 * x152
    x154 = x153 * x4
    x155 = x144 + x147 * x5 - x154
    x156 = -x6 * (x139 + x150)
    x157 = -x10 * x54 + 2.0 * x138 * x16 * x19 * x2 * x22 * x23 * x40
    x158 = x13 * x157
    x159 = x149 * x5 - x158 * x4
    x160 = x13 * x159
    x161 = x152 * x5 + x156 - x160 * x4
    x162 = x13 * x161
    x163 = x155 * x5 - x162 * x4 - x37 * (x146 + x153)
    x164 = x155 * x6
    x165 = x63 * (x163 * x4 + 3.0 * x164)
    x166 = x165 + x18 * x66
    x167 = x147 * x6
    x168 = 2.0 * x167
    x169 = x63 * (x155 * x4 + x168)
    x170 = x169 + x18 * x69
    x171 = -x143 * x6
    x172 = -x6 * (x148 + x158)
    x173 = -x10 * x72 + 2.0 * x138 * x16 * x19 * x2 * x22 * x23 * x53
    x174 = (
        x163 * x5
        - x51 * (-x147 * x5 + x154 + x162 + x171)
        + x73
        * (
            -x161 * x5
            + x37 * (x151 + x160)
            + x73 * (x159 * x5 + x172 - x73 * (x157 * x5 - x173 * x73))
        )
    )
    x175 = x163 * x6
    x176 = x63 * (x174 * x4 + 4.0 * x175)
    x177 = x163 * x79
    x178 = x177 + x18 * x81
    x179 = x155 * x79
    x180 = x18 * x35
    x181 = x179 + x180 * x79
    x182 = x174 * x79
    x183 = x63 * (x10 * x163 + x62)
    x184 = x18 * x86 + x183
    x185 = x63 * (x10 * x155 + x65)
    x186 = x180 * x84 + x185
    x187 = x63 * (x10 * x174 + x75)
    x188 = x100 * x8
    x189 = -x188 + x39 + x88 * x90
    x190 = x13 * x189
    x191 = x8 * x91
    x192 = x6 * (-x190 - x191 - x50 + x88 * x95)
    x193 = -x191 + x26 + x88 * x95
    x194 = x190 * x4 - x193 * x5
    x195 = -x194
    x196 = -x108 * x8 + x52 + x88 * x99
    x197 = x13 * x196
    x198 = x189 * x5 - x197 * x4
    x199 = x13 * x198
    x200 = x192 + x195 * x5 - x199 * x4
    x201 = x195 * x6
    x202 = x63 * (x200 * x4 + 2.0 * x201)
    x203 = x119 * x17 + x202
    x204 = x120 * x17 + x203
    x205 = x6 * (-x188 - x197 - x70 + x88 * x90)
    x206 = x13 * x8
    x207 = x107 * x88 - x122 * x206 + x71
    x208 = (
        x200 * x5
        - x37 * (x194 + x199)
        - x73 * (x198 * x5 + x205 - x73 * (x196 * x5 - x207 * x73))
    )
    x209 = x200 * x6
    x210 = 3.0 * x209
    x211 = x63 * (x208 * x4 + x210)
    x212 = x115 * x17 + x211
    x213 = x63 * (2.0 * x114 + x200 * x8)
    x214 = x129 * x17 + x213
    x215 = x131 * x17 + x214
    x216 = x63 * (2.0 * x124 + x208 * x8)
    x217 = x127 * x17 + x216
    x218 = x200 * x84
    x219 = x135 * x17 + x218
    x220 = x136 * x17 + x219
    x221 = x208 * x84
    x222 = x133 * x17 + x221
    x223 = -x140 * x88 + x150 * x8
    x224 = -x223
    x225 = x13 * x224
    x226 = x141 * x8 - x145 * x88
    x227 = -x6 * (x225 + x226)
    x228 = -x226
    x229 = x225 * x4 - x228 * x5
    x230 = -x229
    x231 = x149 * x88 - x158 * x8
    x232 = x13 * x231
    x233 = x224 * x5 - x232 * x4
    x234 = x13 * x233
    x235 = x227 + x230 * x5 - x234 * x4
    x236 = x230 * x37
    x237 = x63 * (x235 * x4 + x236)
    x238 = x119 * x18 + x237
    x239 = x17 * x170 + x238
    x240 = -x6 * (x223 + x232)
    x241 = x157 * x88 - x173 * x206
    x242 = (
        x235 * x5
        - x37 * (x229 + x234)
        - x73 * (x233 * x5 + x240 - x73 * (x231 * x5 - x241 * x73))
    )
    x243 = x63 * (x235 * x51 + x242 * x4)
    x244 = x115 * x18 + x243
    x245 = 1.732050807568877 * x126
    x246 = x63 * (x164 + x235 * x8)
    x247 = x129 * x18 + x246
    x248 = x17 * x181 + x247
    x249 = x63 * (x175 + x242 * x8)
    x250 = x127 * x18 + x249
    x251 = x63 * (x10 * x235 + x114)
    x252 = x135 * x18 + x251
    x253 = x17 * x186 + x252
    x254 = x63 * (x10 * x242 + x124)
    x255 = x133 * x18 + x254
    x256 = x10 * x150
    x257 = x138 * x140 - x256 + x39
    x258 = x13 * x257
    x259 = x10 * x141
    x260 = x6 * (x138 * x145 - x258 - x259 - x50)
    x261 = x138 * x145 - x259 + x26
    x262 = x258 * x4 - x261 * x5
    x263 = -x262
    x264 = -x10 * x158 + x138 * x149 + x52
    x265 = x13 * x264
    x266 = x257 * x5 - x265 * x4
    x267 = x13 * x266
    x268 = x260 + x263 * x5 - x267 * x4
    x269 = x263 * x6
    x270 = x63 * (x268 * x4 + 2.0 * x269)
    x271 = x169 * x18 + x270
    x272 = x170 * x18 + x271
    x273 = x6 * (x138 * x140 - x256 - x265 - x70)
    x274 = x10 * x13
    x275 = x138 * x157 - x173 * x274 + x71
    x276 = (
        x268 * x5
        - x37 * (x262 + x267)
        - x73 * (x266 * x5 + x273 - x73 * (x264 * x5 - x275 * x73))
    )
    x277 = x268 * x6
    x278 = 3.0 * x277
    x279 = x63 * (x276 * x4 + x278)
    x280 = x165 * x18 + x279
    x281 = x268 * x79
    x282 = x179 * x18 + x281
    x283 = x18 * x181 + x282
    x284 = x276 * x79
    x285 = x177 * x18 + x284
    x286 = x63 * (x10 * x268 + 2.0 * x164)
    x287 = x18 * x185 + x286
    x288 = x18 * x186 + x287
    x289 = x63 * (x10 * x276 + 2.0 * x175)
    x290 = x18 * x183 + x289
    x291 = 2.0 * x106 + x189 * x88 - x197 * x8
    x292 = x13 * x291
    x293 = x190 * x8
    x294 = x6 * (x193 * x88 - x292 - x293 + 2.0 * x6 * x93)
    x295 = x193 * x88 - x293 + 2.0 * x94
    x296 = -x292 * x4 + x295 * x5
    x297 = 2.0 * x121 + x196 * x88 - x206 * x207
    x298 = x294 + x296 * x5 - x73 * (x291 * x5 - x297 * x73)
    x299 = x296 * x6
    x300 = x17 * x202 + x63 * (x298 * x4 + 2.0 * x299)
    x301 = x17 * x203 + x300
    x302 = x17 * x213 + x63 * (x210 + x298 * x8)
    x303 = x17 * x214 + x302
    x304 = x17 * x218 + x298 * x84
    x305 = x17 * x219 + x304
    x306 = x156 + x224 * x88 - x232 * x8
    x307 = x13 * x306
    x308 = x225 * x8
    x309 = x6 * (-x171 + x228 * x88 - x307 - x308)
    x310 = x144 + x228 * x88 - x308
    x311 = -x307 * x4 + x310 * x5
    x312 = x172 - x206 * x241 + x231 * x88
    x313 = x309 + x311 * x5 - x73 * (x306 * x5 - x312 * x73)
    x314 = x311 * x37
    x315 = x63 * (x313 * x4 + x314)
    x316 = x18 * x202 + x315
    x317 = x17 * x238 + x316
    x318 = x235 * x37
    x319 = x63 * (x313 * x8 + x318)
    x320 = x18 * x213 + x319
    x321 = x17 * x247 + x320
    x322 = x63 * (x10 * x313 + x209)
    x323 = x18 * x218 + x322
    x324 = x17 * x252 + x323
    x325 = x257 * x88 - x265 * x8
    x326 = x13 * x325
    x327 = x258 * x8 - x261 * x88
    x328 = -x6 * (x326 + x327)
    x329 = -x327
    x330 = -x326 * x4 + x329 * x5
    x331 = -x206 * x275 + x264 * x88
    x332 = x328 + x330 * x5 - x73 * (x325 * x5 - x331 * x73)
    x333 = x330 * x37
    x334 = x63 * (x332 * x4 + x333)
    x335 = x18 * x237 + x334
    x336 = x18 * x238 + x335
    x337 = x63 * (x277 + x332 * x8)
    x338 = x18 * x246 + x337
    x339 = x18 * x247 + x338
    x340 = x63 * (x10 * x332 + x318)
    x341 = x18 * x251 + x340
    x342 = x18 * x252 + x341
    x343 = -x10 * x265 + x138 * x257 + 2.0 * x156
    x344 = x13 * x343
    x345 = x10 * x258
    x346 = x6 * (x138 * x261 + 2.0 * x143 * x6 - x344 - x345)
    x347 = x138 * x261 + 2.0 * x144 - x345
    x348 = -x344 * x4 + x347 * x5
    x349 = x138 * x264 + 2.0 * x172 - x274 * x275
    x350 = x346 + x348 * x5 - x73 * (x343 * x5 - x349 * x73)
    x351 = x348 * x6
    x352 = x18 * x270 + x63 * (x350 * x4 + 2.0 * x351)
    x353 = x18 * x271 + x352
    x354 = x18 * x281 + x350 * x79
    x355 = x18 * x282 + x354
    x356 = x18 * x286 + x63 * (x10 * x350 + x278)
    x357 = x18 * x287 + x356
    x358 = x0 * x119 + x115
    x359 = x6 * x95
    x360 = x359 + x4 * x97
    x361 = x0 * x63
    x362 = 3.872983346207417 * x77
    x363 = x0 * x129 + x127
    x364 = x68 + x8 * x97
    x365 = x0 * x135 + x133
    x366 = x84 * x97
    x367 = x193 * x6
    x368 = x63 * (x195 * x4 + x367)
    x369 = x17 * x63
    x370 = x360 * x369 + x368
    x371 = x63 * (x118 + x195 * x8)
    x372 = x364 * x369 + x371
    x373 = x195 * x84
    x374 = x17 * x366 + x373
    x375 = x228 * x6
    x376 = x63 * (x230 * x4 + x375)
    x377 = x18 * x63
    x378 = x360 * x377 + x376
    x379 = x63 * (x167 + x230 * x8)
    x380 = x364 * x377 + x379
    x381 = x63 * (x10 * x230 + x117)
    x382 = x18 * x366 + x381
    x383 = x295 * x6
    x384 = x63 * (x296 * x4 + x383)
    x385 = x17 * x368 + x384
    x386 = x17 * x370 + x385
    x387 = x63 * (3.0 * x201 + x296 * x8)
    x388 = x17 * x371 + x387
    x389 = x17 * x372 + x388
    x390 = x296 * x84
    x391 = x17 * x373 + x390
    x392 = x17 * x374 + x391
    x393 = x310 * x6
    x394 = x63 * (x311 * x4 + x393)
    x395 = x18 * x368 + x394
    x396 = x17 * x378 + x395
    x397 = x63 * (x236 + x311 * x8)
    x398 = x18 * x371 + x397
    x399 = x17 * x380 + x398
    x400 = x63 * (x10 * x311 + x201)
    x401 = x18 * x373 + x400
    x402 = x17 * x382 + x401
    x403 = x329 * x6
    x404 = x63 * (x330 * x4 + x403)
    x405 = x18 * x376 + x404
    x406 = x18 * x378 + x405
    x407 = x63 * (x269 + x330 * x8)
    x408 = x18 * x379 + x407
    x409 = x18 * x380 + x408
    x410 = x63 * (x10 * x330 + x236)
    x411 = x18 * x381 + x410
    x412 = x18 * x382 + x411
    x413 = 3.0 * x192 - x292 * x8 + x295 * x88
    x414 = x413 * x6
    x415 = 3.0 * x205 - x206 * x297 + x291 * x88
    x416 = x413 * x5 - x415 * x73
    x417 = x17 * x384 + x17 * x385 + x63 * (x4 * x416 + x414)
    x418 = x17 * x387 + x17 * x388 + x63 * (4.0 * x299 + x416 * x8)
    x419 = x17 * x390 + x17 * x391 + x416 * x84
    x420 = 2.0 * x227 - x307 * x8 + x310 * x88
    x421 = x420 * x6
    x422 = -x206 * x312 + 2.0 * x240 + x306 * x88
    x423 = x420 * x5 - x422 * x73
    x424 = x63 * (x4 * x423 + x421)
    x425 = x17 * x395 + x18 * x384 + x424
    x426 = x63 * (x311 * x51 + x423 * x8)
    x427 = x17 * x398 + x18 * x387 + x426
    x428 = x63 * (x10 * x423 + x299)
    x429 = x17 * x401 + x18 * x390 + x428
    x430 = x260 - x326 * x8 + x329 * x88
    x431 = x430 * x6
    x432 = -x206 * x331 + x273 + x325 * x88
    x433 = x430 * x5 - x432 * x73
    x434 = x63 * (x4 * x433 + x431)
    x435 = x18 * x394 + x434
    x436 = x18 * x395 + x435
    x437 = x63 * (x333 + x433 * x8)
    x438 = x18 * x397 + x437
    x439 = x18 * x398 + x438
    x440 = x63 * (x10 * x433 + x314)
    x441 = x18 * x400 + x440
    x442 = x18 * x401 + x441
    x443 = -x344 * x8 + x347 * x88
    x444 = x443 * x6
    x445 = -x206 * x349 + x343 * x88
    x446 = x443 * x5 - x445 * x73
    x447 = x18 * x404 + x63 * (x4 * x446 + x444)
    x448 = x18 * x405 + x447
    x449 = x18 * x407 + x63 * (x351 + x446 * x8)
    x450 = x18 * x408 + x449
    x451 = x18 * x410 + x63 * (x10 * x446 + x330 * x51)
    x452 = x18 * x411 + x451
    x453 = x0 * x169 + x165
    x454 = x145 * x6
    x455 = x147 * x4 + x454
    x456 = x0 * x179 + x177
    x457 = x147 * x79
    x458 = x0 * x185 + x183
    x459 = x10 * x147 + x68
    x460 = x169 * x17 + x237
    x461 = x369 * x455 + x376
    x462 = x17 * x179 + x246
    x463 = x17 * x457 + x379
    x464 = x17 * x185 + x251
    x465 = x369 * x459 + x381
    x466 = x261 * x6
    x467 = x63 * (x263 * x4 + x466)
    x468 = x377 * x455 + x467
    x469 = x263 * x79
    x470 = x18 * x457 + x469
    x471 = x63 * (x10 * x263 + x168)
    x472 = x377 * x459 + x471
    x473 = x17 * x376 + x394
    x474 = x17 * x461 + x473
    x475 = x17 * x237 + x315
    x476 = x17 * x379 + x397
    x477 = x17 * x463 + x476
    x478 = x17 * x246 + x319
    x479 = x17 * x381 + x400
    x480 = x17 * x465 + x479
    x481 = x17 * x251 + x322
    x482 = x17 * x468 + x405
    x483 = x17 * x470 + x408
    x484 = x17 * x472 + x411
    x485 = x347 * x6
    x486 = x63 * (x348 * x4 + x485)
    x487 = x18 * x467 + x486
    x488 = x18 * x468 + x487
    x489 = x348 * x79
    x490 = x18 * x469 + x489
    x491 = x18 * x470 + x490
    x492 = x63 * (x10 * x348 + 3.0 * x269)
    x493 = x18 * x471 + x492
    x494 = x18 * x472 + x493
    x495 = x17 * x394 + x17 * x473 + x424
    x496 = x17 * x397 + x17 * x476 + x426
    x497 = x17 * x400 + x17 * x479 + x428
    x498 = x17 * x405 + x435
    x499 = x17 * x408 + x438
    x500 = x17 * x411 + x441
    x501 = -x10 * x344 + x138 * x347 + 3.0 * x260
    x502 = x501 * x6
    x503 = x138 * x343 + 3.0 * x273 - x274 * x349
    x504 = x5 * x501 - x503 * x73
    x505 = x18 * x486 + x18 * x487 + x63 * (x4 * x504 + x502)
    x506 = x18 * x489 + x18 * x490 + x504 * x79
    x507 = x18 * x492 + x18 * x493 + x63 * (x10 * x504 + 4.0 * x351)
    x508 = x0 * x368 + x202
    x509 = x193 * x4
    x510 = x0 * x371 + x213
    x511 = x193 * x8 + 2.0 * x359
    x512 = x0 * x373 + x218
    x513 = x193 * x84
    x514 = x4 * x63
    x515 = x295 * x514 + x369 * x509
    x516 = x63 * (x295 * x8 + 3.0 * x367)
    x517 = x369 * x511 + x516
    x518 = x295 * x84
    x519 = x17 * x513 + x518
    x520 = x310 * x514
    x521 = x377 * x509 + x520
    x522 = 2.0 * x375
    x523 = x63 * (x310 * x8 + x522)
    x524 = x377 * x511 + x523
    x525 = x63 * (x10 * x310 + x367)
    x526 = x18 * x513 + x525
    x527 = x295 * x4
    x528 = x369 * x527 + x413 * x514
    x529 = x17 * x515 + x528
    x530 = x63 * (4.0 * x383 + x413 * x8)
    x531 = x17 * x516 + x530
    x532 = x17 * x517 + x531
    x533 = x413 * x84
    x534 = x17 * x518 + x533
    x535 = x17 * x519 + x534
    x536 = x420 * x514
    x537 = x377 * x527 + x536
    x538 = x17 * x521 + x537
    x539 = x63 * (3.0 * x393 + x420 * x8)
    x540 = x18 * x516 + x539
    x541 = x17 * x524 + x540
    x542 = x63 * (x10 * x420 + x383)
    x543 = x18 * x518 + x542
    x544 = x17 * x526 + x543
    x545 = x430 * x514
    x546 = x377 * x4
    x547 = x310 * x546 + x545
    x548 = x18 * x521 + x547
    x549 = x63 * (2.0 * x403 + x430 * x8)
    x550 = x18 * x523 + x549
    x551 = x18 * x524 + x550
    x552 = x63 * (x10 * x430 + 2.0 * x393)
    x553 = x18 * x525 + x552
    x554 = x18 * x526 + x553
    x555 = -x206 * x415 + 4.0 * x294 + x413 * x88
    x556 = x369 * x4
    x557 = -x206 * x422 + 3.0 * x309 + x420 * x88
    x558 = x514 * x557
    x559 = x63 * (4.0 * x421 + x557 * x8)
    x560 = x63 * (x10 * x557 + x414)
    x561 = -x206 * x432 + 2.0 * x328 + x430 * x88
    x562 = x514 * x561
    x563 = x420 * x546 + x562
    x564 = 3.0 * x431
    x565 = x63 * (x561 * x8 + x564)
    x566 = x18 * x539 + x565
    x567 = x63 * (x10 * x561 + 2.0 * x421)
    x568 = x18 * x542 + x567
    x569 = -x206 * x445 + x346 + x443 * x88
    x570 = x430 * x546 + x514 * x569
    x571 = x18 * x547 + x570
    x572 = x18 * x549 + x63 * (2.0 * x444 + x569 * x8)
    x573 = x18 * x550 + x572
    x574 = x18 * x552 + x63 * (x10 * x569 + x564)
    x575 = x18 * x553 + x574
    x576 = x0 * x376 + x237
    x577 = x361 * x4
    x578 = x0 * x379 + x246
    x579 = x228 * x8 + x454
    x580 = x0 * x381 + x251
    x581 = x10 * x228 + x359
    x582 = x228 * x556 + x520
    x583 = x369 * x579 + x523
    x584 = x369 * x581 + x525
    x585 = x329 * x514
    x586 = x228 * x546 + x585
    x587 = x63 * (x329 * x8 + x466)
    x588 = x377 * x579 + x587
    x589 = x63 * (x10 * x329 + x522)
    x590 = x377 * x581 + x589
    x591 = x310 * x556 + x536
    x592 = x17 * x582 + x591
    x593 = x17 * x523 + x539
    x594 = x17 * x583 + x593
    x595 = x17 * x525 + x542
    x596 = x17 * x584 + x595
    x597 = x17 * x586 + x547
    x598 = x17 * x588 + x550
    x599 = x17 * x590 + x553
    x600 = x329 * x546 + x443 * x514
    x601 = x18 * x586 + x600
    x602 = x63 * (x443 * x8 + x485)
    x603 = x18 * x587 + x602
    x604 = x18 * x588 + x603
    x605 = x63 * (x10 * x443 + 3.0 * x403)
    x606 = x18 * x589 + x605
    x607 = x18 * x590 + x606
    x608 = -x206 * x503 + x501 * x88
    x609 = x18 * x600 + x443 * x546 + x514 * x608
    x610 = x18 * x602 + x18 * x603 + x63 * (x502 + x608 * x8)
    x611 = x18 * x605 + x18 * x606 + x63 * (x10 * x608 + 4.0 * x444)
    x612 = x0 * x467 + x270
    x613 = x0 * x469 + x281
    x614 = x261 * x79
    x615 = x0 * x471 + x286
    x616 = x10 * x261 + 2.0 * x454
    x617 = x17 * x467 + x404
    x618 = x261 * x556 + x585
    x619 = x17 * x469 + x407
    x620 = x17 * x614 + x587
    x621 = x17 * x471 + x410
    x622 = x369 * x616 + x589
    x623 = x261 * x546 + x347 * x514
    x624 = x347 * x79
    x625 = x18 * x614 + x624
    x626 = x63 * (x10 * x347 + 3.0 * x466)
    x627 = x377 * x616 + x626
    x628 = x329 * x556 + x545
    x629 = x17 * x618 + x628
    x630 = x17 * x587 + x549
    x631 = x17 * x620 + x630
    x632 = x17 * x589 + x552
    x633 = x17 * x622 + x632
    x634 = x17 * x623 + x600
    x635 = x17 * x625 + x603
    x636 = x17 * x627 + x606
    x637 = x347 * x546 + x501 * x514
    x638 = x18 * x623 + x637
    x639 = x501 * x79
    x640 = x18 * x624 + x639
    x641 = x18 * x625 + x640
    x642 = x63 * (x10 * x501 + 4.0 * x485)
    x643 = x18 * x626 + x642
    x644 = x18 * x627 + x643
    x645 = x138 * x501 - x274 * x503 + 4.0 * x346

    # 180 item(s)
    result[0, 0, 0] = numpy.sum(
        x78
        * (
            x0 * x64
            + x0 * x67
            + x0 * (x0 * (x0 * x69 + x66) + x67)
            + x63 * (x4 * x74 + 5.0 * x75)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x78 * (x0 * x80 + x0 * x82 + x0 * (x0 * (x79 * x83 + x81) + x82) + x74 * x79)
    )
    result[0, 0, 2] = numpy.sum(
        x78 * (x0 * x85 + x0 * x87 + x0 * (x0 * (x83 * x84 + x86) + x87) + x74 * x84)
    )
    result[0, 1, 0] = numpy.sum(
        x126 * (x0 * x116 + x0 * (x0 * x120 + x116) + x125 + x17 * x64)
    )
    result[0, 1, 1] = numpy.sum(
        x126 * (x0 * x128 + x0 * (x0 * x131 + x128) + x132 + x17 * x80)
    )
    result[0, 1, 2] = numpy.sum(
        x126 * (x0 * x134 + x0 * (x0 * x136 + x134) + x137 + x17 * x85)
    )
    result[0, 2, 0] = numpy.sum(
        x126 * (x0 * x166 + x0 * (x0 * x170 + x166) + x176 + x18 * x64)
    )
    result[0, 2, 1] = numpy.sum(
        x126 * (x0 * x178 + x0 * (x0 * x181 + x178) + x18 * x80 + x182)
    )
    result[0, 2, 2] = numpy.sum(
        x126 * (x0 * x184 + x0 * (x0 * x186 + x184) + x18 * x85 + x187)
    )
    result[0, 3, 0] = numpy.sum(x126 * (x0 * x204 + x116 * x17 + x212))
    result[0, 3, 1] = numpy.sum(x126 * (x0 * x215 + x128 * x17 + x217))
    result[0, 3, 2] = numpy.sum(x126 * (x0 * x220 + x134 * x17 + x222))
    result[0, 4, 0] = numpy.sum(x245 * (x0 * x239 + x166 * x17 + x244))
    result[0, 4, 1] = numpy.sum(x245 * (x0 * x248 + x17 * x178 + x250))
    result[0, 4, 2] = numpy.sum(x245 * (x0 * x253 + x17 * x184 + x255))
    result[0, 5, 0] = numpy.sum(x126 * (x0 * x272 + x166 * x18 + x280))
    result[0, 5, 1] = numpy.sum(x126 * (x0 * x283 + x178 * x18 + x285))
    result[0, 5, 2] = numpy.sum(x126 * (x0 * x288 + x18 * x184 + x290))
    result[0, 6, 0] = numpy.sum(x78 * (x17 * x204 + x301))
    result[0, 6, 1] = numpy.sum(x78 * (x17 * x215 + x303))
    result[0, 6, 2] = numpy.sum(x78 * (x17 * x220 + x305))
    result[0, 7, 0] = numpy.sum(x126 * (x17 * x239 + x317))
    result[0, 7, 1] = numpy.sum(x126 * (x17 * x248 + x321))
    result[0, 7, 2] = numpy.sum(x126 * (x17 * x253 + x324))
    result[0, 8, 0] = numpy.sum(x126 * (x17 * x272 + x336))
    result[0, 8, 1] = numpy.sum(x126 * (x17 * x283 + x339))
    result[0, 8, 2] = numpy.sum(x126 * (x17 * x288 + x342))
    result[0, 9, 0] = numpy.sum(x78 * (x18 * x272 + x353))
    result[0, 9, 1] = numpy.sum(x78 * (x18 * x283 + x355))
    result[0, 9, 2] = numpy.sum(x78 * (x18 * x288 + x357))
    result[1, 0, 0] = numpy.sum(
        x362 * (x0 * x115 + x0 * x358 + x0 * (x0 * (x119 + x360 * x361) + x358) + x125)
    )
    result[1, 0, 1] = numpy.sum(
        x362 * (x0 * x127 + x0 * x363 + x0 * (x0 * (x129 + x361 * x364) + x363) + x132)
    )
    result[1, 0, 2] = numpy.sum(
        x362 * (x0 * x133 + x0 * x365 + x0 * (x0 * (x0 * x366 + x135) + x365) + x137)
    )
    result[1, 1, 0] = numpy.sum(x245 * (x0 * x203 + x0 * (x0 * x370 + x203) + x212))
    result[1, 1, 1] = numpy.sum(x245 * (x0 * x214 + x0 * (x0 * x372 + x214) + x217))
    result[1, 1, 2] = numpy.sum(x245 * (x0 * x219 + x0 * (x0 * x374 + x219) + x222))
    result[1, 2, 0] = numpy.sum(x245 * (x0 * x238 + x0 * (x0 * x378 + x238) + x244))
    result[1, 2, 1] = numpy.sum(x245 * (x0 * x247 + x0 * (x0 * x380 + x247) + x250))
    result[1, 2, 2] = numpy.sum(x245 * (x0 * x252 + x0 * (x0 * x382 + x252) + x255))
    result[1, 3, 0] = numpy.sum(x245 * (x0 * x386 + x301))
    result[1, 3, 1] = numpy.sum(x245 * (x0 * x389 + x303))
    result[1, 3, 2] = numpy.sum(x245 * (x0 * x392 + x305))
    result[1, 4, 0] = numpy.sum(x76 * (x0 * x396 + x317))
    result[1, 4, 1] = numpy.sum(x76 * (x0 * x399 + x321))
    result[1, 4, 2] = numpy.sum(x76 * (x0 * x402 + x324))
    result[1, 5, 0] = numpy.sum(x245 * (x0 * x406 + x336))
    result[1, 5, 1] = numpy.sum(x245 * (x0 * x409 + x339))
    result[1, 5, 2] = numpy.sum(x245 * (x0 * x412 + x342))
    result[1, 6, 0] = numpy.sum(x362 * (x17 * x386 + x417))
    result[1, 6, 1] = numpy.sum(x362 * (x17 * x389 + x418))
    result[1, 6, 2] = numpy.sum(x362 * (x17 * x392 + x419))
    result[1, 7, 0] = numpy.sum(x245 * (x17 * x396 + x425))
    result[1, 7, 1] = numpy.sum(x245 * (x17 * x399 + x427))
    result[1, 7, 2] = numpy.sum(x245 * (x17 * x402 + x429))
    result[1, 8, 0] = numpy.sum(x245 * (x17 * x406 + x436))
    result[1, 8, 1] = numpy.sum(x245 * (x17 * x409 + x439))
    result[1, 8, 2] = numpy.sum(x245 * (x17 * x412 + x442))
    result[1, 9, 0] = numpy.sum(x362 * (x18 * x406 + x448))
    result[1, 9, 1] = numpy.sum(x362 * (x18 * x409 + x450))
    result[1, 9, 2] = numpy.sum(x362 * (x18 * x412 + x452))
    result[2, 0, 0] = numpy.sum(
        x362 * (x0 * x165 + x0 * x453 + x0 * (x0 * (x169 + x361 * x455) + x453) + x176)
    )
    result[2, 0, 1] = numpy.sum(
        x362 * (x0 * x177 + x0 * x456 + x0 * (x0 * (x0 * x457 + x179) + x456) + x182)
    )
    result[2, 0, 2] = numpy.sum(
        x362 * (x0 * x183 + x0 * x458 + x0 * (x0 * (x185 + x361 * x459) + x458) + x187)
    )
    result[2, 1, 0] = numpy.sum(
        x245 * (x0 * x460 + x0 * (x0 * x461 + x460) + x165 * x17 + x243)
    )
    result[2, 1, 1] = numpy.sum(
        x245 * (x0 * x462 + x0 * (x0 * x463 + x462) + x17 * x177 + x249)
    )
    result[2, 1, 2] = numpy.sum(
        x245 * (x0 * x464 + x0 * (x0 * x465 + x464) + x17 * x183 + x254)
    )
    result[2, 2, 0] = numpy.sum(x245 * (x0 * x271 + x0 * (x0 * x468 + x271) + x280))
    result[2, 2, 1] = numpy.sum(x245 * (x0 * x282 + x0 * (x0 * x470 + x282) + x285))
    result[2, 2, 2] = numpy.sum(x245 * (x0 * x287 + x0 * (x0 * x472 + x287) + x290))
    result[2, 3, 0] = numpy.sum(x245 * (x0 * x474 + x17 * x460 + x475))
    result[2, 3, 1] = numpy.sum(x245 * (x0 * x477 + x17 * x462 + x478))
    result[2, 3, 2] = numpy.sum(x245 * (x0 * x480 + x17 * x464 + x481))
    result[2, 4, 0] = numpy.sum(x76 * (x0 * x482 + x17 * x271 + x335))
    result[2, 4, 1] = numpy.sum(x76 * (x0 * x483 + x17 * x282 + x338))
    result[2, 4, 2] = numpy.sum(x76 * (x0 * x484 + x17 * x287 + x341))
    result[2, 5, 0] = numpy.sum(x245 * (x0 * x488 + x353))
    result[2, 5, 1] = numpy.sum(x245 * (x0 * x491 + x355))
    result[2, 5, 2] = numpy.sum(x245 * (x0 * x494 + x357))
    result[2, 6, 0] = numpy.sum(x362 * (x17 * x474 + x495))
    result[2, 6, 1] = numpy.sum(x362 * (x17 * x477 + x496))
    result[2, 6, 2] = numpy.sum(x362 * (x17 * x480 + x497))
    result[2, 7, 0] = numpy.sum(x245 * (x17 * x482 + x498))
    result[2, 7, 1] = numpy.sum(x245 * (x17 * x483 + x499))
    result[2, 7, 2] = numpy.sum(x245 * (x17 * x484 + x500))
    result[2, 8, 0] = numpy.sum(x245 * (x17 * x488 + x448))
    result[2, 8, 1] = numpy.sum(x245 * (x17 * x491 + x450))
    result[2, 8, 2] = numpy.sum(x245 * (x17 * x494 + x452))
    result[2, 9, 0] = numpy.sum(x362 * (x18 * x488 + x505))
    result[2, 9, 1] = numpy.sum(x362 * (x18 * x491 + x506))
    result[2, 9, 2] = numpy.sum(x362 * (x18 * x494 + x507))
    result[3, 0, 0] = numpy.sum(
        x78 * (x0 * x202 + x0 * x508 + x0 * (x0 * (x361 * x509 + x368) + x508) + x211)
    )
    result[3, 0, 1] = numpy.sum(
        x78 * (x0 * x213 + x0 * x510 + x0 * (x0 * (x361 * x511 + x371) + x510) + x216)
    )
    result[3, 0, 2] = numpy.sum(
        x78 * (x0 * x218 + x0 * x512 + x0 * (x0 * (x0 * x513 + x373) + x512) + x221)
    )
    result[3, 1, 0] = numpy.sum(x126 * (x0 * x385 + x0 * (x0 * x515 + x385) + x300))
    result[3, 1, 1] = numpy.sum(x126 * (x0 * x388 + x0 * (x0 * x517 + x388) + x302))
    result[3, 1, 2] = numpy.sum(x126 * (x0 * x391 + x0 * (x0 * x519 + x391) + x304))
    result[3, 2, 0] = numpy.sum(x126 * (x0 * x395 + x0 * (x0 * x521 + x395) + x316))
    result[3, 2, 1] = numpy.sum(x126 * (x0 * x398 + x0 * (x0 * x524 + x398) + x320))
    result[3, 2, 2] = numpy.sum(x126 * (x0 * x401 + x0 * (x0 * x526 + x401) + x323))
    result[3, 3, 0] = numpy.sum(x126 * (x0 * x529 + x417))
    result[3, 3, 1] = numpy.sum(x126 * (x0 * x532 + x418))
    result[3, 3, 2] = numpy.sum(x126 * (x0 * x535 + x419))
    result[3, 4, 0] = numpy.sum(x245 * (x0 * x538 + x425))
    result[3, 4, 1] = numpy.sum(x245 * (x0 * x541 + x427))
    result[3, 4, 2] = numpy.sum(x245 * (x0 * x544 + x429))
    result[3, 5, 0] = numpy.sum(x126 * (x0 * x548 + x436))
    result[3, 5, 1] = numpy.sum(x126 * (x0 * x551 + x439))
    result[3, 5, 2] = numpy.sum(x126 * (x0 * x554 + x442))
    result[3, 6, 0] = numpy.sum(
        x78 * (x17 * x528 + x17 * x529 + x413 * x556 + x514 * x555)
    )
    result[3, 6, 1] = numpy.sum(
        x78 * (x17 * x530 + x17 * x531 + x17 * x532 + x63 * (5.0 * x414 + x555 * x8))
    )
    result[3, 6, 2] = numpy.sum(x78 * (x17 * x533 + x17 * x534 + x17 * x535 + x555 * x84))
    result[3, 7, 0] = numpy.sum(x126 * (x17 * x537 + x17 * x538 + x413 * x546 + x558))
    result[3, 7, 1] = numpy.sum(x126 * (x17 * x540 + x17 * x541 + x18 * x530 + x559))
    result[3, 7, 2] = numpy.sum(x126 * (x17 * x543 + x17 * x544 + x18 * x533 + x560))
    result[3, 8, 0] = numpy.sum(x126 * (x17 * x548 + x18 * x537 + x563))
    result[3, 8, 1] = numpy.sum(x126 * (x17 * x551 + x18 * x540 + x566))
    result[3, 8, 2] = numpy.sum(x126 * (x17 * x554 + x18 * x543 + x568))
    result[3, 9, 0] = numpy.sum(x78 * (x18 * x548 + x571))
    result[3, 9, 1] = numpy.sum(x78 * (x18 * x551 + x573))
    result[3, 9, 2] = numpy.sum(x78 * (x18 * x554 + x575))
    result[4, 0, 0] = numpy.sum(
        x362 * (x0 * x237 + x0 * x576 + x0 * (x0 * (x228 * x577 + x376) + x576) + x243)
    )
    result[4, 0, 1] = numpy.sum(
        x362 * (x0 * x246 + x0 * x578 + x0 * (x0 * (x361 * x579 + x379) + x578) + x249)
    )
    result[4, 0, 2] = numpy.sum(
        x362 * (x0 * x251 + x0 * x580 + x0 * (x0 * (x361 * x581 + x381) + x580) + x254)
    )
    result[4, 1, 0] = numpy.sum(x245 * (x0 * x473 + x0 * (x0 * x582 + x473) + x475))
    result[4, 1, 1] = numpy.sum(x245 * (x0 * x476 + x0 * (x0 * x583 + x476) + x478))
    result[4, 1, 2] = numpy.sum(x245 * (x0 * x479 + x0 * (x0 * x584 + x479) + x481))
    result[4, 2, 0] = numpy.sum(x245 * (x0 * x405 + x0 * (x0 * x586 + x405) + x335))
    result[4, 2, 1] = numpy.sum(x245 * (x0 * x408 + x0 * (x0 * x588 + x408) + x338))
    result[4, 2, 2] = numpy.sum(x245 * (x0 * x411 + x0 * (x0 * x590 + x411) + x341))
    result[4, 3, 0] = numpy.sum(x245 * (x0 * x592 + x495))
    result[4, 3, 1] = numpy.sum(x245 * (x0 * x594 + x496))
    result[4, 3, 2] = numpy.sum(x245 * (x0 * x596 + x497))
    result[4, 4, 0] = numpy.sum(x76 * (x0 * x597 + x498))
    result[4, 4, 1] = numpy.sum(x76 * (x0 * x598 + x499))
    result[4, 4, 2] = numpy.sum(x76 * (x0 * x599 + x500))
    result[4, 5, 0] = numpy.sum(x245 * (x0 * x601 + x448))
    result[4, 5, 1] = numpy.sum(x245 * (x0 * x604 + x450))
    result[4, 5, 2] = numpy.sum(x245 * (x0 * x607 + x452))
    result[4, 6, 0] = numpy.sum(x362 * (x17 * x591 + x17 * x592 + x420 * x556 + x558))
    result[4, 6, 1] = numpy.sum(x362 * (x17 * x539 + x17 * x593 + x17 * x594 + x559))
    result[4, 6, 2] = numpy.sum(x362 * (x17 * x542 + x17 * x595 + x17 * x596 + x560))
    result[4, 7, 0] = numpy.sum(x245 * (x17 * x547 + x17 * x597 + x563))
    result[4, 7, 1] = numpy.sum(x245 * (x17 * x550 + x17 * x598 + x566))
    result[4, 7, 2] = numpy.sum(x245 * (x17 * x553 + x17 * x599 + x568))
    result[4, 8, 0] = numpy.sum(x245 * (x17 * x601 + x571))
    result[4, 8, 1] = numpy.sum(x245 * (x17 * x604 + x573))
    result[4, 8, 2] = numpy.sum(x245 * (x17 * x607 + x575))
    result[4, 9, 0] = numpy.sum(x362 * (x18 * x601 + x609))
    result[4, 9, 1] = numpy.sum(x362 * (x18 * x604 + x610))
    result[4, 9, 2] = numpy.sum(x362 * (x18 * x607 + x611))
    result[5, 0, 0] = numpy.sum(
        x78 * (x0 * x270 + x0 * x612 + x0 * (x0 * (x261 * x577 + x467) + x612) + x279)
    )
    result[5, 0, 1] = numpy.sum(
        x78 * (x0 * x281 + x0 * x613 + x0 * (x0 * (x0 * x614 + x469) + x613) + x284)
    )
    result[5, 0, 2] = numpy.sum(
        x78 * (x0 * x286 + x0 * x615 + x0 * (x0 * (x361 * x616 + x471) + x615) + x289)
    )
    result[5, 1, 0] = numpy.sum(
        x126 * (x0 * x617 + x0 * (x0 * x618 + x617) + x17 * x270 + x334)
    )
    result[5, 1, 1] = numpy.sum(
        x126 * (x0 * x619 + x0 * (x0 * x620 + x619) + x17 * x281 + x337)
    )
    result[5, 1, 2] = numpy.sum(
        x126 * (x0 * x621 + x0 * (x0 * x622 + x621) + x17 * x286 + x340)
    )
    result[5, 2, 0] = numpy.sum(x126 * (x0 * x487 + x0 * (x0 * x623 + x487) + x352))
    result[5, 2, 1] = numpy.sum(x126 * (x0 * x490 + x0 * (x0 * x625 + x490) + x354))
    result[5, 2, 2] = numpy.sum(x126 * (x0 * x493 + x0 * (x0 * x627 + x493) + x356))
    result[5, 3, 0] = numpy.sum(x126 * (x0 * x629 + x17 * x404 + x17 * x617 + x434))
    result[5, 3, 1] = numpy.sum(x126 * (x0 * x631 + x17 * x407 + x17 * x619 + x437))
    result[5, 3, 2] = numpy.sum(x126 * (x0 * x633 + x17 * x410 + x17 * x621 + x440))
    result[5, 4, 0] = numpy.sum(x245 * (x0 * x634 + x17 * x487 + x447))
    result[5, 4, 1] = numpy.sum(x245 * (x0 * x635 + x17 * x490 + x449))
    result[5, 4, 2] = numpy.sum(x245 * (x0 * x636 + x17 * x493 + x451))
    result[5, 5, 0] = numpy.sum(x126 * (x0 * x638 + x505))
    result[5, 5, 1] = numpy.sum(x126 * (x0 * x641 + x506))
    result[5, 5, 2] = numpy.sum(x126 * (x0 * x644 + x507))
    result[5, 6, 0] = numpy.sum(x78 * (x17 * x628 + x17 * x629 + x430 * x556 + x562))
    result[5, 6, 1] = numpy.sum(x78 * (x17 * x549 + x17 * x630 + x17 * x631 + x565))
    result[5, 6, 2] = numpy.sum(x78 * (x17 * x552 + x17 * x632 + x17 * x633 + x567))
    result[5, 7, 0] = numpy.sum(x126 * (x17 * x600 + x17 * x634 + x570))
    result[5, 7, 1] = numpy.sum(x126 * (x17 * x603 + x17 * x635 + x572))
    result[5, 7, 2] = numpy.sum(x126 * (x17 * x606 + x17 * x636 + x574))
    result[5, 8, 0] = numpy.sum(x126 * (x17 * x638 + x609))
    result[5, 8, 1] = numpy.sum(x126 * (x17 * x641 + x610))
    result[5, 8, 2] = numpy.sum(x126 * (x17 * x644 + x611))
    result[5, 9, 0] = numpy.sum(
        x78 * (x18 * x637 + x18 * x638 + x501 * x546 + x514 * x645)
    )
    result[5, 9, 1] = numpy.sum(x78 * (x18 * x639 + x18 * x640 + x18 * x641 + x645 * x79))
    result[5, 9, 2] = numpy.sum(
        x78 * (x18 * x642 + x18 * x643 + x18 * x644 + x63 * (x10 * x645 + 5.0 * x502))
    )
    return result


def int3c2e3d_sph_232(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (df|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 10, 6), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(3, x17)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = x19 * x2 * x22
    x24 = 2.0 * x14 ** (-1.5) * x23
    x25 = x18 * x24
    x26 = cx ** (-1.0)
    x27 = x14 ** (-0.5)
    x28 = boys(2, x17)
    x29 = 2.0 * x19 * x2 * x22 * x26 * x27 * x28 - x25
    x30 = x29 * x6
    x31 = -2.0 * x19 * x2 * x22 * x26 * x27 * x28 * x5 + x25 * x4
    x32 = -x31
    x33 = boys(4, x17)
    x34 = x24 * x33
    x35 = -2.0 * x18 * x19 * x2 * x22 * x26 * x27 * x5 + x34 * x4
    x36 = -x35
    x37 = x16 * x36
    x38 = x37 * x4
    x39 = x30 + x32 * x5 - x38
    x40 = -x31 - x37
    x41 = 2.0 * x6
    x42 = 2.0 * x18 * x19 * x2 * x22 * x26 * x27 - x34
    x43 = x42 * x6
    x44 = boys(5, x17)
    x45 = x24 * x44
    x46 = -2.0 * x19 * x2 * x22 * x26 * x27 * x33 * x5 + x4 * x45
    x47 = -x46
    x48 = x16 * x47
    x49 = x4 * x48
    x50 = x36 * x5 + x43 - x49
    x51 = x16 * x50
    x52 = x4 * x51
    x53 = x39 * x5 + x40 * x41 - x52
    x54 = -x29 * x6
    x55 = 3.0 * x6
    x56 = x6 * (2.0 * x19 * x2 * x22 * x26 * x27 * x33 - x45)
    x57 = boys(6, x17)
    x58 = x24 * x57
    x59 = 2.0 * x19 * x2 * x22 * x26 * x27 * x44 * x5 - x4 * x58
    x60 = x16 * x59
    x61 = -x4 * x60 + x47 * x5 + x56
    x62 = x16 * x61
    x63 = -x4 * x62 - x41 * (x35 + x48) + x5 * x50
    x64 = x16 * x63
    x65 = -x4 * x64 + x5 * x53 - x55 * (-x32 * x5 + x38 + x51 + x54)
    x66 = x4 * x65
    x67 = x53 * x6
    x68 = 4.0 * x67
    x69 = x66 + x68
    x70 = x1 * x15
    x71 = x4 * x70
    x72 = x4 * x53
    x73 = x39 * x6
    x74 = 3.0 * x73
    x75 = x72 + x74
    x76 = 4.0 * x6
    x77 = x70 * x76
    x78 = x70 * (x69 * x71 + x75 * x77)
    x79 = x39 * x4
    x80 = x32 * x6
    x81 = 2.0 * x80
    x82 = x79 + x81
    x83 = x55 * x70
    x84 = x70 * (x71 * x75 + x82 * x83)
    x85 = x0 * x84 + x78
    x86 = x23 * x26 * x27 * x28 * x41
    x87 = x41 * x70
    x88 = x71 * x82 + x87 * (x32 * x4 + x86)
    x89 = x0 * x70
    x90 = -x42 * x6
    x91 = x6 * (2.0 * x19 * x2 * x22 * x26 * x27 * x44 - x58)
    x92 = x24 * boys(7, x17)
    x93 = x16 * x4
    x94 = (
        x5 * x65
        + x76 * (x39 * x5 + 2.0 * x40 * x6 - x52 - x64)
        - x93
        * (
            x5 * x63
            - x55 * (-x36 * x5 + x49 + x62 + x90)
            + x93
            * (
                x41 * (x46 + x60)
                - x5 * x61
                + x93
                * (
                    x5 * x59
                    + x91
                    - x93 * (2.0 * x19 * x2 * x22 * x26 * x27 * x5 * x57 - x4 * x92)
                )
            )
        )
    )
    x95 = x4 * x94
    x96 = x6 * x65
    x97 = 5.0 * x96
    x98 = x6 * x70
    x99 = da * db * dc
    x100 = 3.872983346207417 * x99
    x101 = 0.02222222222222222 * x100
    x102 = x70 * x9
    x103 = x102 * x70 * (x66 + x68)
    x104 = x102 * x70 * (x72 + x74)
    x105 = x0 * x104 + x103
    x106 = x102 * (x79 + x81)
    x107 = 0.149071198499986 * x99
    x108 = x12 * x70
    x109 = x108 * x70 * (x66 + x68)
    x110 = x108 * x70 * (x72 + x74)
    x111 = x0 * x110 + x109
    x112 = x108 * (x79 + x81)
    x113 = x1**2 / x14**2
    x114 = x10 * x113
    x115 = x114 * x65
    x116 = x114 * x53
    x117 = x0 * x116 + x115
    x118 = x0 * x39
    x119 = x113 * x9
    x120 = x119 * x12
    x121 = x120 * x65
    x122 = x120 * x53
    x123 = x0 * x122 + x121
    x124 = x113 * x13
    x125 = x124 * x65
    x126 = x124 * x53
    x127 = x0 * x126 + x125
    x128 = -x8 - A[1]
    x129 = -2.0 * x128 * x18 * x19 * x2 * x22 * x26 * x27 + x34 * x9
    x130 = -x129
    x131 = x130 * x16
    x132 = -2.0 * x128 * x19 * x2 * x22 * x26 * x27 * x28 + x25 * x9
    x133 = -x131 - x132
    x134 = x133 * x6
    x135 = -x132
    x136 = x131 * x4 - x135 * x5
    x137 = -x136
    x138 = -2.0 * x128 * x19 * x2 * x22 * x26 * x27 * x33 + x45 * x9
    x139 = -x138
    x140 = x139 * x16
    x141 = -x130 * x5 + x140 * x4
    x142 = -x141
    x143 = x142 * x16
    x144 = x143 * x4
    x145 = x134 + x137 * x5 - x144
    x146 = -x6 * (x129 + x140)
    x147 = 2.0 * x128 * x19 * x2 * x22 * x26 * x27 * x44 - x58 * x9
    x148 = x147 * x16
    x149 = x139 * x5 - x148 * x4
    x150 = x149 * x16
    x151 = x142 * x5 + x146 - x150 * x4
    x152 = x151 * x16
    x153 = x145 * x5 - x152 * x4 - x41 * (x136 + x143)
    x154 = x153 * x4
    x155 = x145 * x6
    x156 = 3.0 * x155
    x157 = x154 + x156
    x158 = x145 * x4
    x159 = x137 * x6
    x160 = 2.0 * x159
    x161 = x158 + x160
    x162 = x70 * (x157 * x71 + x161 * x83)
    x163 = x162 + x20 * x84
    x164 = x135 * x6
    x165 = x137 * x4
    x166 = x164 + x165
    x167 = x70 * (x161 * x71 + x166 * x87)
    x168 = x20 * x70
    x169 = x167 + x168 * x88
    x170 = -x6 * (x138 + x148)
    x171 = 2.0 * x128 * x19 * x2 * x22 * x26 * x27 * x57 - x9 * x92
    x172 = (
        x153 * x5
        + x55 * (x133 * x6 + x137 * x5 - x144 - x152)
        + x93
        * (
            -x151 * x5
            + x41 * (x141 + x150)
            + x93 * (x149 * x5 + x170 - x93 * (x147 * x5 - x171 * x93))
        )
    )
    x173 = x172 * x4
    x174 = x153 * x6
    x175 = 4.0 * x174
    x176 = x70 * (x157 * x77 + x71 * (x173 + x175))
    x177 = 1.732050807568877
    x178 = 0.1111111111111111 * x177 * x99
    x179 = x153 * x9
    x180 = x179 + x67
    x181 = x145 * x9
    x182 = x181 + x73
    x183 = x70 * (x180 * x71 + x182 * x83)
    x184 = x104 * x20 + x183
    x185 = x137 * x9
    x186 = x185 + x80
    x187 = x186 * x87
    x188 = x70 * (x182 * x71 + x187)
    x189 = x106 * x168 + x188
    x190 = x172 * x9
    x191 = x190 + x96
    x192 = x70 * (x180 * x77 + x191 * x71)
    x193 = 0.3333333333333333 * x99
    x194 = x108 * x70 * (x154 + x156)
    x195 = x110 * x20 + x194
    x196 = x108 * x160
    x197 = x70 * (x108 * x158 + x196)
    x198 = x112 * x168 + x197
    x199 = x108 * x70 * (x173 + x175)
    x200 = x102 * x70 * (x180 + x67)
    x201 = x116 * x20 + x200
    x202 = x102 * x70 * (x182 + x73)
    x203 = x20 * x39
    x204 = x114 * x203 + x202
    x205 = x102 * x70 * (x191 + x96)
    x206 = x108 * x67
    x207 = x70 * (x108 * x179 + x206)
    x208 = x122 * x20 + x207
    x209 = x108 * x73
    x210 = x70 * (x108 * x181 + x209)
    x211 = x120 * x203 + x210
    x212 = x108 * x96
    x213 = x70 * (x108 * x190 + x212)
    x214 = x124 * x153
    x215 = x126 * x20 + x214
    x216 = x124 * x145
    x217 = x124 * x203 + x216
    x218 = x124 * x172
    x219 = -x11 - A[2]
    x220 = x12 * x34 - 2.0 * x18 * x19 * x2 * x219 * x22 * x26 * x27
    x221 = -x220
    x222 = x16 * x221
    x223 = x12 * x25 - 2.0 * x19 * x2 * x219 * x22 * x26 * x27 * x28
    x224 = -x222 - x223
    x225 = x224 * x6
    x226 = -x223
    x227 = x222 * x4 - x226 * x5
    x228 = -x227
    x229 = x12 * x45 - 2.0 * x19 * x2 * x219 * x22 * x26 * x27 * x33
    x230 = -x229
    x231 = x16 * x230
    x232 = -x221 * x5 + x231 * x4
    x233 = -x232
    x234 = x16 * x233
    x235 = x234 * x4
    x236 = x225 + x228 * x5 - x235
    x237 = -x6 * (x220 + x231)
    x238 = -x12 * x58 + 2.0 * x19 * x2 * x219 * x22 * x26 * x27 * x44
    x239 = x16 * x238
    x240 = x230 * x5 - x239 * x4
    x241 = x16 * x240
    x242 = x233 * x5 + x237 - x241 * x4
    x243 = x16 * x242
    x244 = x236 * x5 - x243 * x4 - x41 * (x227 + x234)
    x245 = x244 * x4
    x246 = x236 * x6
    x247 = 3.0 * x246
    x248 = x245 + x247
    x249 = x236 * x4
    x250 = x228 * x6
    x251 = 2.0 * x250
    x252 = x249 + x251
    x253 = x70 * (x248 * x71 + x252 * x83)
    x254 = x21 * x84 + x253
    x255 = x226 * x6
    x256 = x228 * x4
    x257 = x255 + x256
    x258 = x70 * (x252 * x71 + x257 * x87)
    x259 = x21 * x70
    x260 = x258 + x259 * x88
    x261 = -x224 * x6
    x262 = -x6 * (x229 + x239)
    x263 = -x12 * x92 + 2.0 * x19 * x2 * x219 * x22 * x26 * x27 * x57
    x264 = (
        x244 * x5
        - x55 * (-x228 * x5 + x235 + x243 + x261)
        + x93
        * (
            -x242 * x5
            + x41 * (x232 + x241)
            + x93 * (x240 * x5 + x262 - x93 * (x238 * x5 - x263 * x93))
        )
    )
    x265 = x264 * x4
    x266 = x244 * x6
    x267 = 4.0 * x266
    x268 = x70 * (x248 * x77 + x71 * (x265 + x267))
    x269 = x102 * x70 * (x245 + x247)
    x270 = x104 * x21 + x269
    x271 = x102 * x70 * (x249 + x251)
    x272 = x106 * x259 + x271
    x273 = x102 * x70 * (x265 + x267)
    x274 = x12 * x244 + x67
    x275 = x12 * x236 + x73
    x276 = x70 * (x274 * x71 + x275 * x83)
    x277 = x110 * x21 + x276
    x278 = x12 * x228 + x80
    x279 = x278 * x87
    x280 = x70 * (x275 * x71 + x279)
    x281 = x112 * x259 + x280
    x282 = x12 * x264 + x96
    x283 = x70 * (x274 * x77 + x282 * x71)
    x284 = x114 * x244
    x285 = x116 * x21 + x284
    x286 = x114 * x236
    x287 = x21 * x39
    x288 = x114 * x287 + x286
    x289 = x114 * x264
    x290 = x119 * x274
    x291 = x122 * x21 + x290
    x292 = x119 * x275
    x293 = x120 * x287 + x292
    x294 = x119 * x282
    x295 = x70 * (x108 * x274 + x206)
    x296 = x126 * x21 + x295
    x297 = x70 * (x108 * x275 + x209)
    x298 = x124 * x287 + x297
    x299 = x70 * (x108 * x282 + x212)
    x300 = x140 * x9
    x301 = x128 * x130 - x300 + x43
    x302 = x16 * x301
    x303 = x131 * x9
    x304 = x6 * (x128 * x135 - x302 - x303 - x54)
    x305 = x128 * x135 + x30 - x303
    x306 = x302 * x4 - x305 * x5
    x307 = -x306
    x308 = x128 * x139 - x148 * x9 + x56
    x309 = x16 * x308
    x310 = x301 * x5 - x309 * x4
    x311 = x16 * x310
    x312 = x304 + x307 * x5 - x311 * x4
    x313 = x312 * x4
    x314 = x307 * x6
    x315 = 2.0 * x314
    x316 = x313 + x315
    x317 = x305 * x6
    x318 = x307 * x4
    x319 = x317 + x318
    x320 = x70 * (x316 * x71 + x319 * x87)
    x321 = x167 * x20 + x320
    x322 = x169 * x20 + x321
    x323 = x6 * (x128 * x130 - x300 - x309 - x90)
    x324 = x16 * x9
    x325 = x128 * x147 - x171 * x324 + x91
    x326 = (
        x312 * x5
        - x41 * (x306 + x311)
        - x93 * (x310 * x5 + x323 - x93 * (x308 * x5 - x325 * x93))
    )
    x327 = x326 * x4
    x328 = x312 * x6
    x329 = 3.0 * x328
    x330 = x70 * (x316 * x83 + x71 * (x327 + x329))
    x331 = x162 * x20 + x330
    x332 = x312 * x9
    x333 = 2.0 * x155
    x334 = x332 + x333
    x335 = x307 * x9
    x336 = x160 + x335
    x337 = x70 * (x334 * x71 + x336 * x87)
    x338 = x188 * x20 + x337
    x339 = x189 * x20 + x338
    x340 = x326 * x9
    x341 = 2.0 * x174
    x342 = x340 + x341
    x343 = x334 * x83
    x344 = x70 * (x342 * x71 + x343)
    x345 = x183 * x20 + x344
    x346 = x108 * x70 * (x313 + x315)
    x347 = x197 * x20 + x346
    x348 = x198 * x20 + x347
    x349 = x108 * x329
    x350 = x70 * (x108 * x327 + x349)
    x351 = x194 * x20 + x350
    x352 = x70 * (x102 * x334 + x182 * x87)
    x353 = x20 * x202 + x352
    x354 = x20 * x204 + x353
    x355 = x70 * (x102 * x342 + x180 * x87)
    x356 = x20 * x200 + x355
    x357 = x108 * x70 * (x332 + x333)
    x358 = x20 * x210 + x357
    x359 = x20 * x211 + x358
    x360 = x108 * x70 * (x340 + x341)
    x361 = x20 * x207 + x360
    x362 = x124 * x312
    x363 = x20 * x216 + x362
    x364 = x20 * x217 + x363
    x365 = x124 * x326
    x366 = x20 * x214 + x365
    x367 = -x128 * x221 + x231 * x9
    x368 = -x367
    x369 = x16 * x368
    x370 = -x128 * x226 + x222 * x9
    x371 = -x6 * (x369 + x370)
    x372 = -x370
    x373 = x369 * x4 - x372 * x5
    x374 = -x373
    x375 = x128 * x230 - x239 * x9
    x376 = x16 * x375
    x377 = x368 * x5 - x376 * x4
    x378 = x16 * x377
    x379 = x371 + x374 * x5 - x378 * x4
    x380 = x374 * x41
    x381 = x379 * x4 + x380
    x382 = x372 * x6
    x383 = x374 * x4 + x382
    x384 = x70 * (x381 * x71 + x383 * x87)
    x385 = x167 * x21 + x384
    x386 = x20 * x260 + x385
    x387 = -x6 * (x367 + x376)
    x388 = x128 * x238 - x263 * x324
    x389 = (
        x379 * x5
        - x41 * (x373 + x378)
        - x93 * (x377 * x5 + x387 - x93 * (x375 * x5 - x388 * x93))
    )
    x390 = x70 * (x381 * x83 + x71 * (x379 * x55 + x389 * x4))
    x391 = x162 * x21 + x390
    x392 = x246 + x379 * x9
    x393 = x250 + x374 * x9
    x394 = x393 * x87
    x395 = x70 * (x392 * x71 + x394)
    x396 = x188 * x21 + x395
    x397 = x20 * x272 + x396
    x398 = x266 + x389 * x9
    x399 = x70 * (x392 * x83 + x398 * x71)
    x400 = x183 * x21 + x399
    x401 = x177 * x193
    x402 = x12 * x379 + x155
    x403 = x12 * x374 + x159
    x404 = x403 * x87
    x405 = x70 * (x402 * x71 + x404)
    x406 = x197 * x21 + x405
    x407 = x20 * x281 + x406
    x408 = x12 * x389 + x174
    x409 = x70 * (x402 * x83 + x408 * x71)
    x410 = x194 * x21 + x409
    x411 = x102 * x70 * (x246 + x392)
    x412 = x202 * x21 + x411
    x413 = x20 * x288 + x412
    x414 = x102 * x70 * (x266 + x398)
    x415 = x200 * x21 + x414
    x416 = x70 * (x102 * x402 + x275 * x98)
    x417 = x21 * x210 + x416
    x418 = x20 * x293 + x417
    x419 = x70 * (x102 * x408 + x274 * x98)
    x420 = x207 * x21 + x419
    x421 = x108 * x70 * (x155 + x402)
    x422 = x21 * x216 + x421
    x423 = x20 * x298 + x422
    x424 = x108 * x70 * (x174 + x408)
    x425 = x21 * x214 + x424
    x426 = x12 * x231
    x427 = x219 * x221 - x426 + x43
    x428 = x16 * x427
    x429 = x12 * x222
    x430 = x6 * (x219 * x226 - x428 - x429 - x54)
    x431 = x219 * x226 + x30 - x429
    x432 = x4 * x428 - x431 * x5
    x433 = -x432
    x434 = -x12 * x239 + x219 * x230 + x56
    x435 = x16 * x434
    x436 = -x4 * x435 + x427 * x5
    x437 = x16 * x436
    x438 = -x4 * x437 + x430 + x433 * x5
    x439 = x4 * x438
    x440 = x433 * x6
    x441 = 2.0 * x440
    x442 = x439 + x441
    x443 = x431 * x6
    x444 = x4 * x433
    x445 = x443 + x444
    x446 = x70 * (x442 * x71 + x445 * x87)
    x447 = x21 * x258 + x446
    x448 = x21 * x260 + x447
    x449 = x6 * (x219 * x221 - x426 - x435 - x90)
    x450 = x12 * x16
    x451 = x219 * x238 - x263 * x450 + x91
    x452 = (
        -x41 * (x432 + x437)
        + x438 * x5
        - x93 * (x436 * x5 + x449 - x93 * (x434 * x5 - x451 * x93))
    )
    x453 = x4 * x452
    x454 = x438 * x6
    x455 = 3.0 * x454
    x456 = x70 * (x442 * x83 + x71 * (x453 + x455))
    x457 = x21 * x253 + x456
    x458 = x102 * x70 * (x439 + x441)
    x459 = x21 * x271 + x458
    x460 = x21 * x272 + x459
    x461 = x102 * x70 * (x453 + x455)
    x462 = x21 * x269 + x461
    x463 = x12 * x438 + 2.0 * x246
    x464 = x12 * x433 + x251
    x465 = x70 * (x463 * x71 + x464 * x87)
    x466 = x21 * x280 + x465
    x467 = x21 * x281 + x466
    x468 = x12 * x452 + 2.0 * x266
    x469 = x463 * x83
    x470 = x70 * (x468 * x71 + x469)
    x471 = x21 * x276 + x470
    x472 = x114 * x438
    x473 = x21 * x286 + x472
    x474 = x21 * x288 + x473
    x475 = x114 * x452
    x476 = x21 * x284 + x475
    x477 = x119 * x463
    x478 = x21 * x292 + x477
    x479 = x21 * x293 + x478
    x480 = x119 * x468
    x481 = x21 * x290 + x480
    x482 = x70 * (x108 * x463 + x275 * x87)
    x483 = x21 * x297 + x482
    x484 = x21 * x298 + x483
    x485 = x70 * (x108 * x468 + x274 * x87)
    x486 = x21 * x295 + x485
    x487 = x128 * x301 + 2.0 * x146 - x309 * x9
    x488 = x16 * x487
    x489 = x302 * x9
    x490 = x6 * (x128 * x305 + 2.0 * x133 * x6 - x488 - x489)
    x491 = x128 * x305 + 2.0 * x134 - x489
    x492 = -x4 * x488 + x491 * x5
    x493 = x128 * x308 + 2.0 * x170 - x324 * x325
    x494 = x490 + x492 * x5 - x93 * (x487 * x5 - x493 * x93)
    x495 = x4 * x494
    x496 = x492 * x6
    x497 = 2.0 * x496
    x498 = x491 * x6
    x499 = x4 * x492
    x500 = x498 + x499
    x501 = x20 * x320 + x70 * (x500 * x87 + x71 * (x495 + x497))
    x502 = x20 * x321 + x501
    x503 = x494 * x9
    x504 = x329 + x503
    x505 = x492 * x9
    x506 = 3.0 * x314
    x507 = x505 + x506
    x508 = x20 * x337 + x70 * (x504 * x71 + x507 * x87)
    x509 = x20 * x338 + x508
    x510 = x108 * x70 * (x495 + x497) + x20 * x346
    x511 = x20 * x347 + x510
    x512 = x20 * x352 + x70 * (x102 * x504 + x343)
    x513 = x20 * x353 + x512
    x514 = x20 * x357 + x70 * (x108 * x503 + x349)
    x515 = x20 * x358 + x514
    x516 = x124 * x494 + x20 * x362
    x517 = x20 * x363 + x516
    x518 = x128 * x368 + x237 - x376 * x9
    x519 = x16 * x518
    x520 = x369 * x9
    x521 = x6 * (x128 * x372 - x261 - x519 - x520)
    x522 = x128 * x372 + x225 - x520
    x523 = -x4 * x519 + x5 * x522
    x524 = x128 * x375 + x262 - x324 * x388
    x525 = x5 * x523 + x521 - x93 * (x5 * x518 - x524 * x93)
    x526 = x41 * x523
    x527 = x522 * x6
    x528 = x4 * x523 + x527
    x529 = x70 * (x528 * x87 + x71 * (x4 * x525 + x526))
    x530 = x21 * x320 + x529
    x531 = x20 * x385 + x530
    x532 = x379 * x41
    x533 = x525 * x9 + x532
    x534 = x380 + x523 * x9
    x535 = x70 * (x533 * x71 + x534 * x87)
    x536 = x21 * x337 + x535
    x537 = x20 * x396 + x536
    x538 = x12 * x525 + x328
    x539 = x12 * x523 + x314
    x540 = x539 * x87
    x541 = x70 * (x538 * x71 + x540)
    x542 = x21 * x346 + x541
    x543 = x20 * x406 + x542
    x544 = x70 * (x102 * x533 + x392 * x87)
    x545 = x21 * x352 + x544
    x546 = x20 * x412 + x545
    x547 = x402 * x87
    x548 = x70 * (x102 * x538 + x547)
    x549 = x21 * x357 + x548
    x550 = x20 * x417 + x549
    x551 = x108 * x70 * (x328 + x538)
    x552 = x21 * x362 + x551
    x553 = x20 * x422 + x552
    x554 = x128 * x427 - x435 * x9
    x555 = x16 * x554
    x556 = -x128 * x431 + x428 * x9
    x557 = -x6 * (x555 + x556)
    x558 = -x556
    x559 = -x4 * x555 + x5 * x558
    x560 = x128 * x434 - x324 * x451
    x561 = x5 * x559 + x557 - x93 * (x5 * x554 - x560 * x93)
    x562 = x41 * x559
    x563 = x558 * x6
    x564 = x4 * x559 + x563
    x565 = x70 * (x564 * x87 + x71 * (x4 * x561 + x562))
    x566 = x21 * x384 + x565
    x567 = x21 * x385 + x566
    x568 = x454 + x561 * x9
    x569 = x440 + x559 * x9
    x570 = x569 * x87
    x571 = x70 * (x568 * x71 + x570)
    x572 = x21 * x395 + x571
    x573 = x21 * x396 + x572
    x574 = x12 * x561 + x532
    x575 = x12 * x559 + x380
    x576 = x575 * x87
    x577 = x70 * (x574 * x71 + x576)
    x578 = x21 * x405 + x577
    x579 = x21 * x406 + x578
    x580 = x102 * x70 * (x454 + x568)
    x581 = x21 * x411 + x580
    x582 = x21 * x412 + x581
    x583 = x70 * (x102 * x574 + x463 * x98)
    x584 = x21 * x416 + x583
    x585 = x21 * x417 + x584
    x586 = x70 * (x108 * x574 + x547)
    x587 = x21 * x421 + x586
    x588 = x21 * x422 + x587
    x589 = -x12 * x435 + x219 * x427 + 2.0 * x237
    x590 = x16 * x589
    x591 = x12 * x428
    x592 = x6 * (x219 * x431 + 2.0 * x224 * x6 - x590 - x591)
    x593 = x219 * x431 + 2.0 * x225 - x591
    x594 = -x4 * x590 + x5 * x593
    x595 = x219 * x434 + 2.0 * x262 - x450 * x451
    x596 = x5 * x594 + x592 - x93 * (x5 * x589 - x595 * x93)
    x597 = x4 * x596
    x598 = x594 * x6
    x599 = 2.0 * x598
    x600 = x593 * x6
    x601 = x4 * x594
    x602 = x600 + x601
    x603 = x21 * x446 + x70 * (x602 * x87 + x71 * (x597 + x599))
    x604 = x21 * x447 + x603
    x605 = x102 * x70 * (x597 + x599) + x21 * x458
    x606 = x21 * x459 + x605
    x607 = x12 * x596 + x455
    x608 = x12 * x594 + 3.0 * x440
    x609 = x21 * x465 + x70 * (x607 * x71 + x608 * x87)
    x610 = x21 * x466 + x609
    x611 = x114 * x596 + x21 * x472
    x612 = x21 * x473 + x611
    x613 = x119 * x607 + x21 * x477
    x614 = x21 * x478 + x613
    x615 = x21 * x482 + x70 * (x108 * x607 + x469)
    x616 = x21 * x483 + x615
    x617 = x0 * x167 + x162
    x618 = x71 * (x164 + x166)
    x619 = x0 * x188 + x183
    x620 = x135 * x9 + x86
    x621 = x186 * x71 + x620 * x98
    x622 = 0.06666666666666667 * x100
    x623 = x0 * x197 + x194
    x624 = x108 * x164
    x625 = x108 * x165 + x624
    x626 = x0 * x202 + x200
    x627 = x102 * (x186 + x80)
    x628 = x0 * x210 + x207
    x629 = x108 * x80
    x630 = x108 * x185 + x629
    x631 = x0 * x216 + x214
    x632 = x124 * x137
    x633 = x70 * x71 * (x317 + x319)
    x634 = x168 * x618 + x633
    x635 = x305 * x9
    x636 = 2.0 * x164
    x637 = x635 + x636
    x638 = x70 * (x336 * x71 + x637 * x98)
    x639 = x168 * x621 + x638
    x640 = x108 * x317
    x641 = x70 * (x108 * x318 + x640)
    x642 = x168 * x625 + x641
    x643 = x70 * (x102 * x336 + x187)
    x644 = x168 * x627 + x643
    x645 = x70 * (x108 * x335 + x196)
    x646 = x168 * x630 + x645
    x647 = x124 * x307
    x648 = x20 * x632 + x647
    x649 = x70 * x71 * (x382 + x383)
    x650 = x259 * x618 + x649
    x651 = x255 + x372 * x9
    x652 = x70 * (x393 * x71 + x651 * x98)
    x653 = x259 * x621 + x652
    x654 = x12 * x372 + x164
    x655 = x70 * (x403 * x71 + x654 * x98)
    x656 = x259 * x625 + x655
    x657 = x102 * x70 * (x250 + x393)
    x658 = x259 * x627 + x657
    x659 = x70 * (x102 * x403 + x278 * x98)
    x660 = x259 * x630 + x659
    x661 = x108 * x70 * (x159 + x403)
    x662 = x21 * x632 + x661
    x663 = x70 * x71 * (x498 + x500)
    x664 = x20 * x633 + x663
    x665 = x20 * x634 + x664
    x666 = x491 * x9
    x667 = 3.0 * x317
    x668 = x666 + x667
    x669 = x70 * (x507 * x71 + x668 * x98)
    x670 = x20 * x638 + x669
    x671 = x20 * x639 + x670
    x672 = x108 * x498
    x673 = x70 * (x108 * x499 + x672)
    x674 = x20 * x641 + x673
    x675 = x20 * x642 + x674
    x676 = x70 * (x102 * x507 + x336 * x83)
    x677 = x20 * x643 + x676
    x678 = x20 * x644 + x677
    x679 = x108 * x70 * (x505 + x506)
    x680 = x20 * x645 + x679
    x681 = x20 * x646 + x680
    x682 = x124 * x492
    x683 = x20 * x647 + x682
    x684 = x20 * x648 + x683
    x685 = x70 * x71 * (x527 + x528)
    x686 = x21 * x633 + x685
    x687 = x20 * x650 + x686
    x688 = 2.0 * x382
    x689 = x522 * x9 + x688
    x690 = x70 * (x534 * x71 + x689 * x98)
    x691 = x21 * x638 + x690
    x692 = x20 * x653 + x691
    x693 = x12 * x522 + x317
    x694 = x70 * (x539 * x71 + x693 * x98)
    x695 = x21 * x641 + x694
    x696 = x20 * x656 + x695
    x697 = x70 * (x102 * x534 + x394)
    x698 = x21 * x643 + x697
    x699 = x20 * x658 + x698
    x700 = x70 * (x102 * x539 + x404)
    x701 = x21 * x645 + x700
    x702 = x20 * x660 + x701
    x703 = x108 * x70 * (x314 + x539)
    x704 = x21 * x647 + x703
    x705 = x20 * x662 + x704
    x706 = x70 * x71 * (x563 + x564)
    x707 = x21 * x649 + x706
    x708 = x21 * x650 + x707
    x709 = x443 + x558 * x9
    x710 = x70 * (x569 * x71 + x709 * x98)
    x711 = x21 * x652 + x710
    x712 = x21 * x653 + x711
    x713 = x12 * x558 + x688
    x714 = x70 * (x575 * x71 + x713 * x98)
    x715 = x21 * x655 + x714
    x716 = x21 * x656 + x715
    x717 = x102 * x70 * (x440 + x569)
    x718 = x21 * x657 + x717
    x719 = x21 * x658 + x718
    x720 = x70 * (x102 * x575 + x464 * x98)
    x721 = x21 * x659 + x720
    x722 = x21 * x660 + x721
    x723 = x70 * (x108 * x575 + x404)
    x724 = x21 * x661 + x723
    x725 = x21 * x662 + x724
    x726 = x128 * x491 + 3.0 * x304 - x488 * x9
    x727 = x6 * x726
    x728 = x128 * x487 + 3.0 * x323 - x324 * x493
    x729 = x5 * x726 - x728 * x93
    x730 = x4 * x729
    x731 = x20 * x663 + x20 * x664 + x70 * x71 * (2.0 * x727 + x730)
    x732 = x726 * x9
    x733 = 4.0 * x498
    x734 = x732 + x733
    x735 = x734 * x98
    x736 = x729 * x9
    x737 = 4.0 * x496
    x738 = x736 + x737
    x739 = x20 * x669 + x20 * x670 + x70 * (x71 * x738 + x735)
    x740 = x108 * x727
    x741 = x20 * x673 + x20 * x674 + x70 * (x108 * x730 + x740)
    x742 = x20 * x676 + x20 * x677 + x70 * (x102 * x738 + x507 * x77)
    x743 = x108 * x70 * (x736 + x737) + x20 * x679 + x20 * x680
    x744 = x124 * x729 + x20 * x682 + x20 * x683
    x745 = x128 * x522 + 2.0 * x371 - x519 * x9
    x746 = x6 * x745
    x747 = x128 * x518 - x324 * x524 + 2.0 * x387
    x748 = x5 * x745 - x747 * x93
    x749 = x70 * x71 * (x4 * x748 + 2.0 * x746)
    x750 = x20 * x686 + x21 * x663 + x749
    x751 = 3.0 * x527 + x745 * x9
    x752 = x523 * x55 + x748 * x9
    x753 = x70 * (x71 * x752 + x751 * x98)
    x754 = x20 * x691 + x21 * x669 + x753
    x755 = x12 * x745 + x498
    x756 = x12 * x748 + x496
    x757 = x70 * (x71 * x756 + x755 * x98)
    x758 = x20 * x695 + x21 * x673 + x757
    x759 = x70 * (x102 * x752 + x534 * x83)
    x760 = x20 * x698 + x21 * x676 + x759
    x761 = x70 * (x102 * x756 + x539 * x83)
    x762 = x20 * x701 + x21 * x679 + x761
    x763 = x108 * x70 * (x496 + x756)
    x764 = x20 * x704 + x21 * x682 + x763
    x765 = x128 * x558 + x430 - x555 * x9
    x766 = x6 * x765
    x767 = x128 * x554 - x324 * x560 + x449
    x768 = x5 * x765 - x767 * x93
    x769 = x70 * x71 * (x4 * x768 + 2.0 * x766)
    x770 = x21 * x685 + x769
    x771 = x21 * x686 + x770
    x772 = 2.0 * x563 + x765 * x9
    x773 = x562 + x768 * x9
    x774 = x70 * (x71 * x773 + x772 * x98)
    x775 = x21 * x690 + x774
    x776 = x21 * x691 + x775
    x777 = x12 * x765 + 2.0 * x527
    x778 = x12 * x768 + x526
    x779 = x70 * (x71 * x778 + x777 * x98)
    x780 = x21 * x694 + x779
    x781 = x21 * x695 + x780
    x782 = x70 * (x102 * x773 + x570)
    x783 = x21 * x697 + x782
    x784 = x21 * x698 + x783
    x785 = x70 * (x102 * x778 + x576)
    x786 = x21 * x700 + x785
    x787 = x21 * x701 + x786
    x788 = x70 * (x108 * x778 + x540)
    x789 = x21 * x703 + x788
    x790 = x21 * x704 + x789
    x791 = x128 * x593 - x590 * x9
    x792 = x6 * x791
    x793 = x128 * x589 - x324 * x595
    x794 = x5 * x791 - x793 * x93
    x795 = x21 * x706 + x70 * x71 * (x4 * x794 + 2.0 * x792)
    x796 = x21 * x707 + x795
    x797 = x600 + x791 * x9
    x798 = x598 + x794 * x9
    x799 = x21 * x710 + x70 * (x71 * x798 + x797 * x98)
    x800 = x21 * x711 + x799
    x801 = x12 * x791 + 3.0 * x563
    x802 = x12 * x794 + x55 * x559
    x803 = x21 * x714 + x70 * (x71 * x802 + x801 * x98)
    x804 = x21 * x715 + x803
    x805 = x102 * x70 * (x598 + x798) + x21 * x717
    x806 = x21 * x718 + x805
    x807 = x21 * x720 + x70 * (x102 * x802 + x608 * x98)
    x808 = x21 * x721 + x807
    x809 = x21 * x723 + x70 * (x108 * x802 + x575 * x83)
    x810 = x21 * x724 + x809
    x811 = x0 * x258 + x253
    x812 = x71 * (x255 + x257)
    x813 = x0 * x271 + x269
    x814 = x102 * x255
    x815 = x102 * x256 + x814
    x816 = x0 * x280 + x276
    x817 = x12 * x226 + x86
    x818 = x817 * x98
    x819 = x278 * x71 + x818
    x820 = x0 * x286 + x284
    x821 = x114 * x228
    x822 = x0 * x292 + x290
    x823 = x119 * x278
    x824 = x0 * x297 + x295
    x825 = x108 * x278 + x629
    x826 = x20 * x258 + x384
    x827 = x168 * x812 + x649
    x828 = x20 * x271 + x395
    x829 = x168 * x815 + x652
    x830 = x20 * x280 + x405
    x831 = x168 * x819 + x655
    x832 = x20 * x286 + x411
    x833 = x20 * x821 + x657
    x834 = x20 * x292 + x416
    x835 = x20 * x823 + x659
    x836 = x20 * x297 + x421
    x837 = x168 * x825 + x661
    x838 = x70 * x71 * (x443 + x445)
    x839 = x259 * x812 + x838
    x840 = x102 * x443
    x841 = x70 * (x102 * x444 + x840)
    x842 = x259 * x815 + x841
    x843 = x12 * x431 + 2.0 * x255
    x844 = x843 * x98
    x845 = x70 * (x464 * x71 + x844)
    x846 = x259 * x819 + x845
    x847 = x114 * x433
    x848 = x21 * x821 + x847
    x849 = x119 * x464
    x850 = x21 * x823 + x849
    x851 = x70 * (x108 * x464 + x279)
    x852 = x259 * x825 + x851
    x853 = x20 * x649 + x685
    x854 = x20 * x827 + x853
    x855 = x20 * x384 + x529
    x856 = x20 * x652 + x690
    x857 = x20 * x829 + x856
    x858 = x20 * x395 + x535
    x859 = x20 * x655 + x694
    x860 = x20 * x831 + x859
    x861 = x20 * x405 + x541
    x862 = x20 * x657 + x697
    x863 = x20 * x833 + x862
    x864 = x20 * x411 + x544
    x865 = x20 * x659 + x700
    x866 = x20 * x835 + x865
    x867 = x20 * x416 + x548
    x868 = x20 * x661 + x703
    x869 = x20 * x837 + x868
    x870 = x20 * x421 + x551
    x871 = x20 * x839 + x707
    x872 = x20 * x842 + x711
    x873 = x20 * x846 + x715
    x874 = x20 * x848 + x718
    x875 = x20 * x850 + x721
    x876 = x20 * x852 + x724
    x877 = x70 * x71 * (x600 + x602)
    x878 = x21 * x838 + x877
    x879 = x21 * x839 + x878
    x880 = x102 * x600
    x881 = x70 * (x102 * x601 + x880)
    x882 = x21 * x841 + x881
    x883 = x21 * x842 + x882
    x884 = x12 * x593 + 3.0 * x443
    x885 = x884 * x98
    x886 = x70 * (x608 * x71 + x885)
    x887 = x21 * x845 + x886
    x888 = x21 * x846 + x887
    x889 = x114 * x594
    x890 = x21 * x847 + x889
    x891 = x21 * x848 + x890
    x892 = x119 * x608
    x893 = x21 * x849 + x892
    x894 = x21 * x850 + x893
    x895 = x70 * (x108 * x608 + x464 * x83)
    x896 = x21 * x851 + x895
    x897 = x21 * x852 + x896
    x898 = x20 * x685 + x20 * x853 + x749
    x899 = x20 * x690 + x20 * x856 + x753
    x900 = x20 * x694 + x20 * x859 + x757
    x901 = x20 * x697 + x20 * x862 + x759
    x902 = x20 * x700 + x20 * x865 + x761
    x903 = x20 * x703 + x20 * x868 + x763
    x904 = x20 * x707 + x770
    x905 = x20 * x711 + x775
    x906 = x20 * x715 + x780
    x907 = x20 * x718 + x783
    x908 = x20 * x721 + x786
    x909 = x20 * x724 + x789
    x910 = -x12 * x590 + x219 * x593 + 3.0 * x430
    x911 = x6 * x910
    x912 = x219 * x589 + 3.0 * x449 - x450 * x595
    x913 = x5 * x910 - x912 * x93
    x914 = x4 * x913
    x915 = x21 * x877 + x21 * x878 + x70 * x71 * (2.0 * x911 + x914)
    x916 = x102 * x911
    x917 = x21 * x881 + x21 * x882 + x70 * (x102 * x914 + x916)
    x918 = x12 * x910 + 4.0 * x600
    x919 = x918 * x98
    x920 = x12 * x913 + 4.0 * x598
    x921 = x21 * x886 + x21 * x887 + x70 * (x71 * x920 + x919)
    x922 = x114 * x913 + x21 * x889 + x21 * x890
    x923 = x119 * x920 + x21 * x892 + x21 * x893
    x924 = x21 * x895 + x21 * x896 + x70 * (x108 * x920 + x608 * x77)
    x925 = x0 * x633 + x320
    x926 = x113 * x7
    x927 = x0 * x305
    x928 = x0 * x638 + x337
    x929 = x113 * x4
    x930 = x637 * x929
    x931 = x0 * x641 + x346
    x932 = x12 * x929
    x933 = x0 * x643 + x352
    x934 = x102 * x637 + x620 * x87
    x935 = x0 * x645 + x357
    x936 = x108 * (x635 + x636)
    x937 = x0 * x647 + x362
    x938 = x491 * x926
    x939 = x20 * x305
    x940 = x926 * x939 + x938
    x941 = x668 * x929
    x942 = x20 * x930 + x941
    x943 = x491 * x932
    x944 = x932 * x939 + x943
    x945 = x70 * (x102 * x668 + x637 * x83)
    x946 = x168 * x934 + x945
    x947 = x108 * x70 * (x666 + x667)
    x948 = x168 * x936 + x947
    x949 = x124 * x491
    x950 = x124 * x939 + x949
    x951 = x522 * x926
    x952 = x21 * x305
    x953 = x926 * x952 + x951
    x954 = x689 * x929
    x955 = x21 * x930 + x954
    x956 = x693 * x929
    x957 = x932 * x952 + x956
    x958 = x70 * (x102 * x689 + x651 * x87)
    x959 = x259 * x934 + x958
    x960 = x654 * x87
    x961 = x70 * (x102 * x693 + x960)
    x962 = x259 * x936 + x961
    x963 = x70 * (x108 * x693 + x640)
    x964 = x124 * x952 + x963
    x965 = x726 * x926
    x966 = x20 * x938 + x965
    x967 = x20 * x940 + x966
    x968 = x734 * x929
    x969 = x20 * x941 + x968
    x970 = x20 * x942 + x969
    x971 = x726 * x932
    x972 = x20 * x943 + x971
    x973 = x20 * x944 + x972
    x974 = x70 * (x102 * x734 + x668 * x77)
    x975 = x20 * x945 + x974
    x976 = x20 * x946 + x975
    x977 = x108 * x70 * (x732 + x733)
    x978 = x20 * x947 + x977
    x979 = x20 * x948 + x978
    x980 = x124 * x726
    x981 = x20 * x949 + x980
    x982 = x20 * x950 + x981
    x983 = x745 * x926
    x984 = x21 * x938 + x983
    x985 = x20 * x953 + x984
    x986 = x751 * x929
    x987 = x21 * x941 + x986
    x988 = x20 * x955 + x987
    x989 = x755 * x929
    x990 = x21 * x943 + x989
    x991 = x20 * x957 + x990
    x992 = x70 * (x102 * x751 + x689 * x83)
    x993 = x21 * x945 + x992
    x994 = x20 * x959 + x993
    x995 = x70 * (x102 * x755 + x693 * x83)
    x996 = x21 * x947 + x995
    x997 = x20 * x962 + x996
    x998 = x70 * (x108 * x755 + x672)
    x999 = x21 * x949 + x998
    x1000 = x20 * x964 + x999
    x1001 = x765 * x926
    x1002 = x1001 + x21 * x951
    x1003 = x1002 + x21 * x953
    x1004 = x772 * x929
    x1005 = x1004 + x21 * x954
    x1006 = x1005 + x21 * x955
    x1007 = x777 * x929
    x1008 = x1007 + x21 * x956
    x1009 = x1008 + x21 * x957
    x1010 = x70 * (x102 * x772 + x709 * x87)
    x1011 = x1010 + x21 * x958
    x1012 = x1011 + x21 * x959
    x1013 = x70 * (x102 * x777 + x713 * x87)
    x1014 = x1013 + x21 * x961
    x1015 = x1014 + x21 * x962
    x1016 = x70 * (x108 * x777 + x693 * x87)
    x1017 = x1016 + x21 * x963
    x1018 = x1017 + x21 * x964
    x1019 = x128 * x726 - x324 * x728 + 4.0 * x490
    x1020 = x1019 * x9
    x1021 = 5.0 * x727
    x1022 = x1020 + x1021
    x1023 = x128 * x745 - x324 * x747 + 3.0 * x521
    x1024 = x1023 * x926
    x1025 = x1023 * x9 + 4.0 * x746
    x1026 = x1025 * x929
    x1027 = x1023 * x12 + x727
    x1028 = x1027 * x929
    x1029 = x70 * (x102 * x1025 + x751 * x77)
    x1030 = x70 * (x102 * x1027 + x755 * x77)
    x1031 = x70 * (x1027 * x108 + x740)
    x1032 = x128 * x765 - x324 * x767 + 2.0 * x557
    x1033 = x1032 * x926
    x1034 = x1033 + x21 * x983
    x1035 = 3.0 * x766
    x1036 = x1032 * x9 + x1035
    x1037 = x1036 * x929
    x1038 = x1037 + x21 * x986
    x1039 = x1032 * x12 + 2.0 * x746
    x1040 = x1039 * x929
    x1041 = x1040 + x21 * x989
    x1042 = x70 * (x102 * x1036 + x772 * x83)
    x1043 = x1042 + x21 * x992
    x1044 = x777 * x83
    x1045 = x70 * (x102 * x1039 + x1044)
    x1046 = x1045 + x21 * x995
    x1047 = x70 * (x1039 * x108 + x755 * x87)
    x1048 = x1047 + x21 * x998
    x1049 = x128 * x791 - x324 * x793 + x592
    x1050 = x1001 * x21 + x1049 * x926
    x1051 = x1002 * x21 + x1050
    x1052 = x1049 * x9 + 2.0 * x792
    x1053 = x1004 * x21 + x1052 * x929
    x1054 = x1005 * x21 + x1053
    x1055 = x1035 + x1049 * x12
    x1056 = x1007 * x21 + x1055 * x929
    x1057 = x1008 * x21 + x1056
    x1058 = x1010 * x21 + x70 * (x102 * x1052 + x797 * x87)
    x1059 = x1011 * x21 + x1058
    x1060 = x1013 * x21 + x70 * (x102 * x1055 + x801 * x87)
    x1061 = x1014 * x21 + x1060
    x1062 = x1016 * x21 + x70 * (x1044 + x1055 * x108)
    x1063 = x1017 * x21 + x1062
    x1064 = x0 * x649 + x384
    x1065 = x372 * x926
    x1066 = x0 * x652 + x395
    x1067 = x0 * x929
    x1068 = x0 * x655 + x405
    x1069 = x0 * x657 + x411
    x1070 = x102 * x651 + x814
    x1071 = x0 * x659 + x416
    x1072 = x102 * x654 + x818
    x1073 = x0 * x661 + x421
    x1074 = x108 * x654 + x624
    x1075 = x1065 * x20 + x951
    x1076 = x20 * x929
    x1077 = x1076 * x651 + x954
    x1078 = x1076 * x654 + x956
    x1079 = x1070 * x168 + x958
    x1080 = x1072 * x168 + x961
    x1081 = x1074 * x168 + x963
    x1082 = x558 * x926
    x1083 = x1065 * x21 + x1082
    x1084 = x709 * x929
    x1085 = x21 * x929
    x1086 = x1084 + x1085 * x651
    x1087 = x713 * x929
    x1088 = x1085 * x654 + x1087
    x1089 = x70 * (x102 * x709 + x840)
    x1090 = x1070 * x259 + x1089
    x1091 = x70 * (x102 * x713 + x844)
    x1092 = x1072 * x259 + x1091
    x1093 = x70 * (x108 * x713 + x960)
    x1094 = x1074 * x259 + x1093
    x1095 = x20 * x951 + x983
    x1096 = x1075 * x20 + x1095
    x1097 = x20 * x954 + x986
    x1098 = x1077 * x20 + x1097
    x1099 = x20 * x956 + x989
    x1100 = x1078 * x20 + x1099
    x1101 = x20 * x958 + x992
    x1102 = x1079 * x20 + x1101
    x1103 = x20 * x961 + x995
    x1104 = x1080 * x20 + x1103
    x1105 = x20 * x963 + x998
    x1106 = x1081 * x20 + x1105
    x1107 = x1002 + x1083 * x20
    x1108 = x1005 + x1086 * x20
    x1109 = x1008 + x1088 * x20
    x1110 = x1011 + x1090 * x20
    x1111 = x1014 + x1092 * x20
    x1112 = x1017 + x1094 * x20
    x1113 = x791 * x926
    x1114 = x1082 * x21 + x1113
    x1115 = x1083 * x21 + x1114
    x1116 = x797 * x929
    x1117 = x1084 * x21 + x1116
    x1118 = x1086 * x21 + x1117
    x1119 = x801 * x929
    x1120 = x1087 * x21 + x1119
    x1121 = x1088 * x21 + x1120
    x1122 = x70 * (x102 * x797 + x880)
    x1123 = x1089 * x21 + x1122
    x1124 = x1090 * x21 + x1123
    x1125 = x70 * (x102 * x801 + x885)
    x1126 = x1091 * x21 + x1125
    x1127 = x1092 * x21 + x1126
    x1128 = x70 * (x108 * x801 + x713 * x83)
    x1129 = x1093 * x21 + x1128
    x1130 = x1094 * x21 + x1129
    x1131 = x128 * x910 - x324 * x912
    x1132 = x1113 * x21 + x1114 * x21 + x1131 * x926
    x1133 = x1131 * x9 + x911
    x1134 = x1116 * x21 + x1117 * x21 + x1133 * x929
    x1135 = x1131 * x12 + 4.0 * x792
    x1136 = x1119 * x21 + x1120 * x21 + x1135 * x929
    x1137 = x1122 * x21 + x1123 * x21 + x70 * (x102 * x1133 + x916)
    x1138 = x1125 * x21 + x1126 * x21 + x70 * (x102 * x1135 + x919)
    x1139 = x1128 * x21 + x1129 * x21 + x70 * (x108 * x1135 + x77 * x801)
    x1140 = x0 * x838 + x446
    x1141 = x0 * x431
    x1142 = x0 * x841 + x458
    x1143 = x119 * x4
    x1144 = x0 * x845 + x465
    x1145 = x0 * x847 + x472
    x1146 = x0 * x849 + x477
    x1147 = x119 * x843
    x1148 = x0 * x851 + x482
    x1149 = x108 * x843 + x817 * x87
    x1150 = x20 * x838 + x706
    x1151 = x20 * x431
    x1152 = x1082 + x1151 * x926
    x1153 = x20 * x841 + x710
    x1154 = x1084 + x1143 * x1151
    x1155 = x20 * x845 + x714
    x1156 = x1076 * x843 + x1087
    x1157 = x20 * x847 + x717
    x1158 = x1089 + x114 * x1151
    x1159 = x20 * x849 + x720
    x1160 = x1091 + x1147 * x20
    x1161 = x20 * x851 + x723
    x1162 = x1093 + x1149 * x168
    x1163 = x593 * x926
    x1164 = x21 * x431
    x1165 = x1163 + x1164 * x926
    x1166 = x1143 * x593
    x1167 = x1143 * x1164 + x1166
    x1168 = x884 * x929
    x1169 = x1085 * x843 + x1168
    x1170 = x114 * x593
    x1171 = x114 * x1164 + x1170
    x1172 = x119 * x884
    x1173 = x1147 * x21 + x1172
    x1174 = x70 * (x108 * x884 + x83 * x843)
    x1175 = x1149 * x259 + x1174
    x1176 = x1001 + x1082 * x20
    x1177 = x1152 * x20 + x1176
    x1178 = x1004 + x1084 * x20
    x1179 = x1154 * x20 + x1178
    x1180 = x1007 + x1087 * x20
    x1181 = x1156 * x20 + x1180
    x1182 = x1010 + x1089 * x20
    x1183 = x1158 * x20 + x1182
    x1184 = x1013 + x1091 * x20
    x1185 = x1160 * x20 + x1184
    x1186 = x1016 + x1093 * x20
    x1187 = x1162 * x20 + x1186
    x1188 = x1114 + x1165 * x20
    x1189 = x1117 + x1167 * x20
    x1190 = x1120 + x1169 * x20
    x1191 = x1123 + x1171 * x20
    x1192 = x1126 + x1173 * x20
    x1193 = x1129 + x1175 * x20
    x1194 = x910 * x926
    x1195 = x1163 * x21 + x1194
    x1196 = x1165 * x21 + x1195
    x1197 = x1143 * x910
    x1198 = x1166 * x21 + x1197
    x1199 = x1167 * x21 + x1198
    x1200 = x918 * x929
    x1201 = x1168 * x21 + x1200
    x1202 = x1169 * x21 + x1201
    x1203 = x114 * x910
    x1204 = x1170 * x21 + x1203
    x1205 = x1171 * x21 + x1204
    x1206 = x119 * x918
    x1207 = x1172 * x21 + x1206
    x1208 = x1173 * x21 + x1207
    x1209 = x70 * (x108 * x918 + x77 * x884)
    x1210 = x1174 * x21 + x1209
    x1211 = x1175 * x21 + x1210
    x1212 = x219 * x910 - x450 * x912 + 4.0 * x592
    x1213 = x12 * x1212 + 5.0 * x911

    # 360 item(s)
    result[0, 0, 0] = numpy.sum(
        x101
        * (
            x0 * x78
            + x0 * x85
            + x0 * (x0 * (x84 + x88 * x89) + x85)
            + x70 * (5.0 * x69 * x98 + x71 * (x95 + x97))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x107
        * (
            x0 * x103
            + x0 * x105
            + x0 * (x0 * (x104 + x106 * x89) + x105)
            + x102 * x70 * (x95 + x97)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x107
        * (
            x0 * x109
            + x0 * x111
            + x0 * (x0 * (x110 + x112 * x89) + x111)
            + x108 * x70 * (x95 + x97)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x101
        * (x0 * x115 + x0 * x117 + x0 * (x0 * (x114 * x118 + x116) + x117) + x114 * x94)
    )
    result[0, 0, 4] = numpy.sum(
        x107
        * (x0 * x121 + x0 * x123 + x0 * (x0 * (x118 * x120 + x122) + x123) + x120 * x94)
    )
    result[0, 0, 5] = numpy.sum(
        x101
        * (x0 * x125 + x0 * x127 + x0 * (x0 * (x118 * x124 + x126) + x127) + x124 * x94)
    )
    result[0, 1, 0] = numpy.sum(
        x178 * (x0 * x163 + x0 * (x0 * x169 + x163) + x176 + x20 * x78)
    )
    result[0, 1, 1] = numpy.sum(
        x193 * (x0 * x184 + x0 * (x0 * x189 + x184) + x103 * x20 + x192)
    )
    result[0, 1, 2] = numpy.sum(
        x193 * (x0 * x195 + x0 * (x0 * x198 + x195) + x109 * x20 + x199)
    )
    result[0, 1, 3] = numpy.sum(
        x178 * (x0 * x201 + x0 * (x0 * x204 + x201) + x115 * x20 + x205)
    )
    result[0, 1, 4] = numpy.sum(
        x193 * (x0 * x208 + x0 * (x0 * x211 + x208) + x121 * x20 + x213)
    )
    result[0, 1, 5] = numpy.sum(
        x178 * (x0 * x215 + x0 * (x0 * x217 + x215) + x125 * x20 + x218)
    )
    result[0, 2, 0] = numpy.sum(
        x178 * (x0 * x254 + x0 * (x0 * x260 + x254) + x21 * x78 + x268)
    )
    result[0, 2, 1] = numpy.sum(
        x193 * (x0 * x270 + x0 * (x0 * x272 + x270) + x103 * x21 + x273)
    )
    result[0, 2, 2] = numpy.sum(
        x193 * (x0 * x277 + x0 * (x0 * x281 + x277) + x109 * x21 + x283)
    )
    result[0, 2, 3] = numpy.sum(
        x178 * (x0 * x285 + x0 * (x0 * x288 + x285) + x115 * x21 + x289)
    )
    result[0, 2, 4] = numpy.sum(
        x193 * (x0 * x291 + x0 * (x0 * x293 + x291) + x121 * x21 + x294)
    )
    result[0, 2, 5] = numpy.sum(
        x178 * (x0 * x296 + x0 * (x0 * x298 + x296) + x125 * x21 + x299)
    )
    result[0, 3, 0] = numpy.sum(x178 * (x0 * x322 + x163 * x20 + x331))
    result[0, 3, 1] = numpy.sum(x193 * (x0 * x339 + x184 * x20 + x345))
    result[0, 3, 2] = numpy.sum(x193 * (x0 * x348 + x195 * x20 + x351))
    result[0, 3, 3] = numpy.sum(x178 * (x0 * x354 + x20 * x201 + x356))
    result[0, 3, 4] = numpy.sum(x193 * (x0 * x359 + x20 * x208 + x361))
    result[0, 3, 5] = numpy.sum(x178 * (x0 * x364 + x20 * x215 + x366))
    result[0, 4, 0] = numpy.sum(x193 * (x0 * x386 + x20 * x254 + x391))
    result[0, 4, 1] = numpy.sum(x401 * (x0 * x397 + x20 * x270 + x400))
    result[0, 4, 2] = numpy.sum(x401 * (x0 * x407 + x20 * x277 + x410))
    result[0, 4, 3] = numpy.sum(x193 * (x0 * x413 + x20 * x285 + x415))
    result[0, 4, 4] = numpy.sum(x401 * (x0 * x418 + x20 * x291 + x420))
    result[0, 4, 5] = numpy.sum(x193 * (x0 * x423 + x20 * x296 + x425))
    result[0, 5, 0] = numpy.sum(x178 * (x0 * x448 + x21 * x254 + x457))
    result[0, 5, 1] = numpy.sum(x193 * (x0 * x460 + x21 * x270 + x462))
    result[0, 5, 2] = numpy.sum(x193 * (x0 * x467 + x21 * x277 + x471))
    result[0, 5, 3] = numpy.sum(x178 * (x0 * x474 + x21 * x285 + x476))
    result[0, 5, 4] = numpy.sum(x193 * (x0 * x479 + x21 * x291 + x481))
    result[0, 5, 5] = numpy.sum(x178 * (x0 * x484 + x21 * x296 + x486))
    result[0, 6, 0] = numpy.sum(x101 * (x20 * x322 + x502))
    result[0, 6, 1] = numpy.sum(x107 * (x20 * x339 + x509))
    result[0, 6, 2] = numpy.sum(x107 * (x20 * x348 + x511))
    result[0, 6, 3] = numpy.sum(x101 * (x20 * x354 + x513))
    result[0, 6, 4] = numpy.sum(x107 * (x20 * x359 + x515))
    result[0, 6, 5] = numpy.sum(x101 * (x20 * x364 + x517))
    result[0, 7, 0] = numpy.sum(x178 * (x20 * x386 + x531))
    result[0, 7, 1] = numpy.sum(x193 * (x20 * x397 + x537))
    result[0, 7, 2] = numpy.sum(x193 * (x20 * x407 + x543))
    result[0, 7, 3] = numpy.sum(x178 * (x20 * x413 + x546))
    result[0, 7, 4] = numpy.sum(x193 * (x20 * x418 + x550))
    result[0, 7, 5] = numpy.sum(x178 * (x20 * x423 + x553))
    result[0, 8, 0] = numpy.sum(x178 * (x20 * x448 + x567))
    result[0, 8, 1] = numpy.sum(x193 * (x20 * x460 + x573))
    result[0, 8, 2] = numpy.sum(x193 * (x20 * x467 + x579))
    result[0, 8, 3] = numpy.sum(x178 * (x20 * x474 + x582))
    result[0, 8, 4] = numpy.sum(x193 * (x20 * x479 + x585))
    result[0, 8, 5] = numpy.sum(x178 * (x20 * x484 + x588))
    result[0, 9, 0] = numpy.sum(x101 * (x21 * x448 + x604))
    result[0, 9, 1] = numpy.sum(x107 * (x21 * x460 + x606))
    result[0, 9, 2] = numpy.sum(x107 * (x21 * x467 + x610))
    result[0, 9, 3] = numpy.sum(x101 * (x21 * x474 + x612))
    result[0, 9, 4] = numpy.sum(x107 * (x21 * x479 + x614))
    result[0, 9, 5] = numpy.sum(x101 * (x21 * x484 + x616))
    result[1, 0, 0] = numpy.sum(
        x107 * (x0 * x162 + x0 * x617 + x0 * (x0 * (x167 + x618 * x89) + x617) + x176)
    )
    result[1, 0, 1] = numpy.sum(
        x622 * (x0 * x183 + x0 * x619 + x0 * (x0 * (x188 + x621 * x89) + x619) + x192)
    )
    result[1, 0, 2] = numpy.sum(
        x622 * (x0 * x194 + x0 * x623 + x0 * (x0 * (x197 + x625 * x89) + x623) + x199)
    )
    result[1, 0, 3] = numpy.sum(
        x107 * (x0 * x200 + x0 * x626 + x0 * (x0 * (x202 + x627 * x89) + x626) + x205)
    )
    result[1, 0, 4] = numpy.sum(
        x622 * (x0 * x207 + x0 * x628 + x0 * (x0 * (x210 + x630 * x89) + x628) + x213)
    )
    result[1, 0, 5] = numpy.sum(
        x107 * (x0 * x214 + x0 * x631 + x0 * (x0 * (x0 * x632 + x216) + x631) + x218)
    )
    result[1, 1, 0] = numpy.sum(x193 * (x0 * x321 + x0 * (x0 * x634 + x321) + x331))
    result[1, 1, 1] = numpy.sum(x401 * (x0 * x338 + x0 * (x0 * x639 + x338) + x345))
    result[1, 1, 2] = numpy.sum(x401 * (x0 * x347 + x0 * (x0 * x642 + x347) + x351))
    result[1, 1, 3] = numpy.sum(x193 * (x0 * x353 + x0 * (x0 * x644 + x353) + x356))
    result[1, 1, 4] = numpy.sum(x401 * (x0 * x358 + x0 * (x0 * x646 + x358) + x361))
    result[1, 1, 5] = numpy.sum(x193 * (x0 * x363 + x0 * (x0 * x648 + x363) + x366))
    result[1, 2, 0] = numpy.sum(x193 * (x0 * x385 + x0 * (x0 * x650 + x385) + x391))
    result[1, 2, 1] = numpy.sum(x401 * (x0 * x396 + x0 * (x0 * x653 + x396) + x400))
    result[1, 2, 2] = numpy.sum(x401 * (x0 * x406 + x0 * (x0 * x656 + x406) + x410))
    result[1, 2, 3] = numpy.sum(x193 * (x0 * x412 + x0 * (x0 * x658 + x412) + x415))
    result[1, 2, 4] = numpy.sum(x401 * (x0 * x417 + x0 * (x0 * x660 + x417) + x420))
    result[1, 2, 5] = numpy.sum(x193 * (x0 * x422 + x0 * (x0 * x662 + x422) + x425))
    result[1, 3, 0] = numpy.sum(x193 * (x0 * x665 + x502))
    result[1, 3, 1] = numpy.sum(x401 * (x0 * x671 + x509))
    result[1, 3, 2] = numpy.sum(x401 * (x0 * x675 + x511))
    result[1, 3, 3] = numpy.sum(x193 * (x0 * x678 + x513))
    result[1, 3, 4] = numpy.sum(x401 * (x0 * x681 + x515))
    result[1, 3, 5] = numpy.sum(x193 * (x0 * x684 + x517))
    result[1, 4, 0] = numpy.sum(x401 * (x0 * x687 + x531))
    result[1, 4, 1] = numpy.sum(x99 * (x0 * x692 + x537))
    result[1, 4, 2] = numpy.sum(x99 * (x0 * x696 + x543))
    result[1, 4, 3] = numpy.sum(x401 * (x0 * x699 + x546))
    result[1, 4, 4] = numpy.sum(x99 * (x0 * x702 + x550))
    result[1, 4, 5] = numpy.sum(x401 * (x0 * x705 + x553))
    result[1, 5, 0] = numpy.sum(x193 * (x0 * x708 + x567))
    result[1, 5, 1] = numpy.sum(x401 * (x0 * x712 + x573))
    result[1, 5, 2] = numpy.sum(x401 * (x0 * x716 + x579))
    result[1, 5, 3] = numpy.sum(x193 * (x0 * x719 + x582))
    result[1, 5, 4] = numpy.sum(x401 * (x0 * x722 + x585))
    result[1, 5, 5] = numpy.sum(x193 * (x0 * x725 + x588))
    result[1, 6, 0] = numpy.sum(x107 * (x20 * x665 + x731))
    result[1, 6, 1] = numpy.sum(x622 * (x20 * x671 + x739))
    result[1, 6, 2] = numpy.sum(x622 * (x20 * x675 + x741))
    result[1, 6, 3] = numpy.sum(x107 * (x20 * x678 + x742))
    result[1, 6, 4] = numpy.sum(x622 * (x20 * x681 + x743))
    result[1, 6, 5] = numpy.sum(x107 * (x20 * x684 + x744))
    result[1, 7, 0] = numpy.sum(x193 * (x20 * x687 + x750))
    result[1, 7, 1] = numpy.sum(x401 * (x20 * x692 + x754))
    result[1, 7, 2] = numpy.sum(x401 * (x20 * x696 + x758))
    result[1, 7, 3] = numpy.sum(x193 * (x20 * x699 + x760))
    result[1, 7, 4] = numpy.sum(x401 * (x20 * x702 + x762))
    result[1, 7, 5] = numpy.sum(x193 * (x20 * x705 + x764))
    result[1, 8, 0] = numpy.sum(x193 * (x20 * x708 + x771))
    result[1, 8, 1] = numpy.sum(x401 * (x20 * x712 + x776))
    result[1, 8, 2] = numpy.sum(x401 * (x20 * x716 + x781))
    result[1, 8, 3] = numpy.sum(x193 * (x20 * x719 + x784))
    result[1, 8, 4] = numpy.sum(x401 * (x20 * x722 + x787))
    result[1, 8, 5] = numpy.sum(x193 * (x20 * x725 + x790))
    result[1, 9, 0] = numpy.sum(x107 * (x21 * x708 + x796))
    result[1, 9, 1] = numpy.sum(x622 * (x21 * x712 + x800))
    result[1, 9, 2] = numpy.sum(x622 * (x21 * x716 + x804))
    result[1, 9, 3] = numpy.sum(x107 * (x21 * x719 + x806))
    result[1, 9, 4] = numpy.sum(x622 * (x21 * x722 + x808))
    result[1, 9, 5] = numpy.sum(x107 * (x21 * x725 + x810))
    result[2, 0, 0] = numpy.sum(
        x107 * (x0 * x253 + x0 * x811 + x0 * (x0 * (x258 + x812 * x89) + x811) + x268)
    )
    result[2, 0, 1] = numpy.sum(
        x622 * (x0 * x269 + x0 * x813 + x0 * (x0 * (x271 + x815 * x89) + x813) + x273)
    )
    result[2, 0, 2] = numpy.sum(
        x622 * (x0 * x276 + x0 * x816 + x0 * (x0 * (x280 + x819 * x89) + x816) + x283)
    )
    result[2, 0, 3] = numpy.sum(
        x107 * (x0 * x284 + x0 * x820 + x0 * (x0 * (x0 * x821 + x286) + x820) + x289)
    )
    result[2, 0, 4] = numpy.sum(
        x622 * (x0 * x290 + x0 * x822 + x0 * (x0 * (x0 * x823 + x292) + x822) + x294)
    )
    result[2, 0, 5] = numpy.sum(
        x107 * (x0 * x295 + x0 * x824 + x0 * (x0 * (x297 + x825 * x89) + x824) + x299)
    )
    result[2, 1, 0] = numpy.sum(
        x193 * (x0 * x826 + x0 * (x0 * x827 + x826) + x20 * x253 + x390)
    )
    result[2, 1, 1] = numpy.sum(
        x401 * (x0 * x828 + x0 * (x0 * x829 + x828) + x20 * x269 + x399)
    )
    result[2, 1, 2] = numpy.sum(
        x401 * (x0 * x830 + x0 * (x0 * x831 + x830) + x20 * x276 + x409)
    )
    result[2, 1, 3] = numpy.sum(
        x193 * (x0 * x832 + x0 * (x0 * x833 + x832) + x20 * x284 + x414)
    )
    result[2, 1, 4] = numpy.sum(
        x401 * (x0 * x834 + x0 * (x0 * x835 + x834) + x20 * x290 + x419)
    )
    result[2, 1, 5] = numpy.sum(
        x193 * (x0 * x836 + x0 * (x0 * x837 + x836) + x20 * x295 + x424)
    )
    result[2, 2, 0] = numpy.sum(x193 * (x0 * x447 + x0 * (x0 * x839 + x447) + x457))
    result[2, 2, 1] = numpy.sum(x401 * (x0 * x459 + x0 * (x0 * x842 + x459) + x462))
    result[2, 2, 2] = numpy.sum(x401 * (x0 * x466 + x0 * (x0 * x846 + x466) + x471))
    result[2, 2, 3] = numpy.sum(x193 * (x0 * x473 + x0 * (x0 * x848 + x473) + x476))
    result[2, 2, 4] = numpy.sum(x401 * (x0 * x478 + x0 * (x0 * x850 + x478) + x481))
    result[2, 2, 5] = numpy.sum(x193 * (x0 * x483 + x0 * (x0 * x852 + x483) + x486))
    result[2, 3, 0] = numpy.sum(x193 * (x0 * x854 + x20 * x826 + x855))
    result[2, 3, 1] = numpy.sum(x401 * (x0 * x857 + x20 * x828 + x858))
    result[2, 3, 2] = numpy.sum(x401 * (x0 * x860 + x20 * x830 + x861))
    result[2, 3, 3] = numpy.sum(x193 * (x0 * x863 + x20 * x832 + x864))
    result[2, 3, 4] = numpy.sum(x401 * (x0 * x866 + x20 * x834 + x867))
    result[2, 3, 5] = numpy.sum(x193 * (x0 * x869 + x20 * x836 + x870))
    result[2, 4, 0] = numpy.sum(x401 * (x0 * x871 + x20 * x447 + x566))
    result[2, 4, 1] = numpy.sum(x99 * (x0 * x872 + x20 * x459 + x572))
    result[2, 4, 2] = numpy.sum(x99 * (x0 * x873 + x20 * x466 + x578))
    result[2, 4, 3] = numpy.sum(x401 * (x0 * x874 + x20 * x473 + x581))
    result[2, 4, 4] = numpy.sum(x99 * (x0 * x875 + x20 * x478 + x584))
    result[2, 4, 5] = numpy.sum(x401 * (x0 * x876 + x20 * x483 + x587))
    result[2, 5, 0] = numpy.sum(x193 * (x0 * x879 + x604))
    result[2, 5, 1] = numpy.sum(x401 * (x0 * x883 + x606))
    result[2, 5, 2] = numpy.sum(x401 * (x0 * x888 + x610))
    result[2, 5, 3] = numpy.sum(x193 * (x0 * x891 + x612))
    result[2, 5, 4] = numpy.sum(x401 * (x0 * x894 + x614))
    result[2, 5, 5] = numpy.sum(x193 * (x0 * x897 + x616))
    result[2, 6, 0] = numpy.sum(x107 * (x20 * x854 + x898))
    result[2, 6, 1] = numpy.sum(x622 * (x20 * x857 + x899))
    result[2, 6, 2] = numpy.sum(x622 * (x20 * x860 + x900))
    result[2, 6, 3] = numpy.sum(x107 * (x20 * x863 + x901))
    result[2, 6, 4] = numpy.sum(x622 * (x20 * x866 + x902))
    result[2, 6, 5] = numpy.sum(x107 * (x20 * x869 + x903))
    result[2, 7, 0] = numpy.sum(x193 * (x20 * x871 + x904))
    result[2, 7, 1] = numpy.sum(x401 * (x20 * x872 + x905))
    result[2, 7, 2] = numpy.sum(x401 * (x20 * x873 + x906))
    result[2, 7, 3] = numpy.sum(x193 * (x20 * x874 + x907))
    result[2, 7, 4] = numpy.sum(x401 * (x20 * x875 + x908))
    result[2, 7, 5] = numpy.sum(x193 * (x20 * x876 + x909))
    result[2, 8, 0] = numpy.sum(x193 * (x20 * x879 + x796))
    result[2, 8, 1] = numpy.sum(x401 * (x20 * x883 + x800))
    result[2, 8, 2] = numpy.sum(x401 * (x20 * x888 + x804))
    result[2, 8, 3] = numpy.sum(x193 * (x20 * x891 + x806))
    result[2, 8, 4] = numpy.sum(x401 * (x20 * x894 + x808))
    result[2, 8, 5] = numpy.sum(x193 * (x20 * x897 + x810))
    result[2, 9, 0] = numpy.sum(x107 * (x21 * x879 + x915))
    result[2, 9, 1] = numpy.sum(x622 * (x21 * x883 + x917))
    result[2, 9, 2] = numpy.sum(x622 * (x21 * x888 + x921))
    result[2, 9, 3] = numpy.sum(x107 * (x21 * x891 + x922))
    result[2, 9, 4] = numpy.sum(x622 * (x21 * x894 + x923))
    result[2, 9, 5] = numpy.sum(x107 * (x21 * x897 + x924))
    result[3, 0, 0] = numpy.sum(
        x101 * (x0 * x320 + x0 * x925 + x0 * (x0 * (x633 + x926 * x927) + x925) + x330)
    )
    result[3, 0, 1] = numpy.sum(
        x107 * (x0 * x337 + x0 * x928 + x0 * (x0 * (x0 * x930 + x638) + x928) + x344)
    )
    result[3, 0, 2] = numpy.sum(
        x107 * (x0 * x346 + x0 * x931 + x0 * (x0 * (x641 + x927 * x932) + x931) + x350)
    )
    result[3, 0, 3] = numpy.sum(
        x101 * (x0 * x352 + x0 * x933 + x0 * (x0 * (x643 + x89 * x934) + x933) + x355)
    )
    result[3, 0, 4] = numpy.sum(
        x107 * (x0 * x357 + x0 * x935 + x0 * (x0 * (x645 + x89 * x936) + x935) + x360)
    )
    result[3, 0, 5] = numpy.sum(
        x101 * (x0 * x362 + x0 * x937 + x0 * (x0 * (x124 * x927 + x647) + x937) + x365)
    )
    result[3, 1, 0] = numpy.sum(x178 * (x0 * x664 + x0 * (x0 * x940 + x664) + x501))
    result[3, 1, 1] = numpy.sum(x193 * (x0 * x670 + x0 * (x0 * x942 + x670) + x508))
    result[3, 1, 2] = numpy.sum(x193 * (x0 * x674 + x0 * (x0 * x944 + x674) + x510))
    result[3, 1, 3] = numpy.sum(x178 * (x0 * x677 + x0 * (x0 * x946 + x677) + x512))
    result[3, 1, 4] = numpy.sum(x193 * (x0 * x680 + x0 * (x0 * x948 + x680) + x514))
    result[3, 1, 5] = numpy.sum(x178 * (x0 * x683 + x0 * (x0 * x950 + x683) + x516))
    result[3, 2, 0] = numpy.sum(x178 * (x0 * x686 + x0 * (x0 * x953 + x686) + x530))
    result[3, 2, 1] = numpy.sum(x193 * (x0 * x691 + x0 * (x0 * x955 + x691) + x536))
    result[3, 2, 2] = numpy.sum(x193 * (x0 * x695 + x0 * (x0 * x957 + x695) + x542))
    result[3, 2, 3] = numpy.sum(x178 * (x0 * x698 + x0 * (x0 * x959 + x698) + x545))
    result[3, 2, 4] = numpy.sum(x193 * (x0 * x701 + x0 * (x0 * x962 + x701) + x549))
    result[3, 2, 5] = numpy.sum(x178 * (x0 * x704 + x0 * (x0 * x964 + x704) + x552))
    result[3, 3, 0] = numpy.sum(x178 * (x0 * x967 + x731))
    result[3, 3, 1] = numpy.sum(x193 * (x0 * x970 + x739))
    result[3, 3, 2] = numpy.sum(x193 * (x0 * x973 + x741))
    result[3, 3, 3] = numpy.sum(x178 * (x0 * x976 + x742))
    result[3, 3, 4] = numpy.sum(x193 * (x0 * x979 + x743))
    result[3, 3, 5] = numpy.sum(x178 * (x0 * x982 + x744))
    result[3, 4, 0] = numpy.sum(x193 * (x0 * x985 + x750))
    result[3, 4, 1] = numpy.sum(x401 * (x0 * x988 + x754))
    result[3, 4, 2] = numpy.sum(x401 * (x0 * x991 + x758))
    result[3, 4, 3] = numpy.sum(x193 * (x0 * x994 + x760))
    result[3, 4, 4] = numpy.sum(x401 * (x0 * x997 + x762))
    result[3, 4, 5] = numpy.sum(x193 * (x0 * x1000 + x764))
    result[3, 5, 0] = numpy.sum(x178 * (x0 * x1003 + x771))
    result[3, 5, 1] = numpy.sum(x193 * (x0 * x1006 + x776))
    result[3, 5, 2] = numpy.sum(x193 * (x0 * x1009 + x781))
    result[3, 5, 3] = numpy.sum(x178 * (x0 * x1012 + x784))
    result[3, 5, 4] = numpy.sum(x193 * (x0 * x1015 + x787))
    result[3, 5, 5] = numpy.sum(x178 * (x0 * x1018 + x790))
    result[3, 6, 0] = numpy.sum(
        x101 * (x1019 * x926 + x20 * x965 + x20 * x966 + x20 * x967)
    )
    result[3, 6, 1] = numpy.sum(
        x107 * (x1022 * x929 + x20 * x968 + x20 * x969 + x20 * x970)
    )
    result[3, 6, 2] = numpy.sum(
        x107 * (x1019 * x932 + x20 * x971 + x20 * x972 + x20 * x973)
    )
    result[3, 6, 3] = numpy.sum(
        x101 * (x20 * x974 + x20 * x975 + x20 * x976 + x70 * (x102 * x1022 + 5.0 * x735))
    )
    result[3, 6, 4] = numpy.sum(
        x107 * (x108 * x70 * (x1020 + x1021) + x20 * x977 + x20 * x978 + x20 * x979)
    )
    result[3, 6, 5] = numpy.sum(
        x101 * (x1019 * x124 + x20 * x980 + x20 * x981 + x20 * x982)
    )
    result[3, 7, 0] = numpy.sum(x178 * (x1024 + x20 * x984 + x20 * x985 + x21 * x965))
    result[3, 7, 1] = numpy.sum(x193 * (x1026 + x20 * x987 + x20 * x988 + x21 * x968))
    result[3, 7, 2] = numpy.sum(x193 * (x1028 + x20 * x990 + x20 * x991 + x21 * x971))
    result[3, 7, 3] = numpy.sum(x178 * (x1029 + x20 * x993 + x20 * x994 + x21 * x974))
    result[3, 7, 4] = numpy.sum(x193 * (x1030 + x20 * x996 + x20 * x997 + x21 * x977))
    result[3, 7, 5] = numpy.sum(x178 * (x1000 * x20 + x1031 + x20 * x999 + x21 * x980))
    result[3, 8, 0] = numpy.sum(x178 * (x1003 * x20 + x1034 + x21 * x984))
    result[3, 8, 1] = numpy.sum(x193 * (x1006 * x20 + x1038 + x21 * x987))
    result[3, 8, 2] = numpy.sum(x193 * (x1009 * x20 + x1041 + x21 * x990))
    result[3, 8, 3] = numpy.sum(x178 * (x1012 * x20 + x1043 + x21 * x993))
    result[3, 8, 4] = numpy.sum(x193 * (x1015 * x20 + x1046 + x21 * x996))
    result[3, 8, 5] = numpy.sum(x178 * (x1018 * x20 + x1048 + x21 * x999))
    result[3, 9, 0] = numpy.sum(x101 * (x1003 * x21 + x1051))
    result[3, 9, 1] = numpy.sum(x107 * (x1006 * x21 + x1054))
    result[3, 9, 2] = numpy.sum(x107 * (x1009 * x21 + x1057))
    result[3, 9, 3] = numpy.sum(x101 * (x1012 * x21 + x1059))
    result[3, 9, 4] = numpy.sum(x107 * (x1015 * x21 + x1061))
    result[3, 9, 5] = numpy.sum(x101 * (x1018 * x21 + x1063))
    result[4, 0, 0] = numpy.sum(
        x107 * (x0 * x1064 + x0 * x384 + x0 * (x0 * (x0 * x1065 + x649) + x1064) + x390)
    )
    result[4, 0, 1] = numpy.sum(
        x622 * (x0 * x1066 + x0 * x395 + x0 * (x0 * (x1067 * x651 + x652) + x1066) + x399)
    )
    result[4, 0, 2] = numpy.sum(
        x622 * (x0 * x1068 + x0 * x405 + x0 * (x0 * (x1067 * x654 + x655) + x1068) + x409)
    )
    result[4, 0, 3] = numpy.sum(
        x107 * (x0 * x1069 + x0 * x411 + x0 * (x0 * (x1070 * x89 + x657) + x1069) + x414)
    )
    result[4, 0, 4] = numpy.sum(
        x622 * (x0 * x1071 + x0 * x416 + x0 * (x0 * (x1072 * x89 + x659) + x1071) + x419)
    )
    result[4, 0, 5] = numpy.sum(
        x107 * (x0 * x1073 + x0 * x421 + x0 * (x0 * (x1074 * x89 + x661) + x1073) + x424)
    )
    result[4, 1, 0] = numpy.sum(x193 * (x0 * x853 + x0 * (x0 * x1075 + x853) + x855))
    result[4, 1, 1] = numpy.sum(x401 * (x0 * x856 + x0 * (x0 * x1077 + x856) + x858))
    result[4, 1, 2] = numpy.sum(x401 * (x0 * x859 + x0 * (x0 * x1078 + x859) + x861))
    result[4, 1, 3] = numpy.sum(x193 * (x0 * x862 + x0 * (x0 * x1079 + x862) + x864))
    result[4, 1, 4] = numpy.sum(x401 * (x0 * x865 + x0 * (x0 * x1080 + x865) + x867))
    result[4, 1, 5] = numpy.sum(x193 * (x0 * x868 + x0 * (x0 * x1081 + x868) + x870))
    result[4, 2, 0] = numpy.sum(x193 * (x0 * x707 + x0 * (x0 * x1083 + x707) + x566))
    result[4, 2, 1] = numpy.sum(x401 * (x0 * x711 + x0 * (x0 * x1086 + x711) + x572))
    result[4, 2, 2] = numpy.sum(x401 * (x0 * x715 + x0 * (x0 * x1088 + x715) + x578))
    result[4, 2, 3] = numpy.sum(x193 * (x0 * x718 + x0 * (x0 * x1090 + x718) + x581))
    result[4, 2, 4] = numpy.sum(x401 * (x0 * x721 + x0 * (x0 * x1092 + x721) + x584))
    result[4, 2, 5] = numpy.sum(x193 * (x0 * x724 + x0 * (x0 * x1094 + x724) + x587))
    result[4, 3, 0] = numpy.sum(x193 * (x0 * x1096 + x898))
    result[4, 3, 1] = numpy.sum(x401 * (x0 * x1098 + x899))
    result[4, 3, 2] = numpy.sum(x401 * (x0 * x1100 + x900))
    result[4, 3, 3] = numpy.sum(x193 * (x0 * x1102 + x901))
    result[4, 3, 4] = numpy.sum(x401 * (x0 * x1104 + x902))
    result[4, 3, 5] = numpy.sum(x193 * (x0 * x1106 + x903))
    result[4, 4, 0] = numpy.sum(x401 * (x0 * x1107 + x904))
    result[4, 4, 1] = numpy.sum(x99 * (x0 * x1108 + x905))
    result[4, 4, 2] = numpy.sum(x99 * (x0 * x1109 + x906))
    result[4, 4, 3] = numpy.sum(x401 * (x0 * x1110 + x907))
    result[4, 4, 4] = numpy.sum(x99 * (x0 * x1111 + x908))
    result[4, 4, 5] = numpy.sum(x401 * (x0 * x1112 + x909))
    result[4, 5, 0] = numpy.sum(x193 * (x0 * x1115 + x796))
    result[4, 5, 1] = numpy.sum(x401 * (x0 * x1118 + x800))
    result[4, 5, 2] = numpy.sum(x401 * (x0 * x1121 + x804))
    result[4, 5, 3] = numpy.sum(x193 * (x0 * x1124 + x806))
    result[4, 5, 4] = numpy.sum(x401 * (x0 * x1127 + x808))
    result[4, 5, 5] = numpy.sum(x193 * (x0 * x1130 + x810))
    result[4, 6, 0] = numpy.sum(x107 * (x1024 + x1095 * x20 + x1096 * x20 + x20 * x983))
    result[4, 6, 1] = numpy.sum(x622 * (x1026 + x1097 * x20 + x1098 * x20 + x20 * x986))
    result[4, 6, 2] = numpy.sum(x622 * (x1028 + x1099 * x20 + x1100 * x20 + x20 * x989))
    result[4, 6, 3] = numpy.sum(x107 * (x1029 + x1101 * x20 + x1102 * x20 + x20 * x992))
    result[4, 6, 4] = numpy.sum(x622 * (x1030 + x1103 * x20 + x1104 * x20 + x20 * x995))
    result[4, 6, 5] = numpy.sum(x107 * (x1031 + x1105 * x20 + x1106 * x20 + x20 * x998))
    result[4, 7, 0] = numpy.sum(x193 * (x1002 * x20 + x1034 + x1107 * x20))
    result[4, 7, 1] = numpy.sum(x401 * (x1005 * x20 + x1038 + x1108 * x20))
    result[4, 7, 2] = numpy.sum(x401 * (x1008 * x20 + x1041 + x1109 * x20))
    result[4, 7, 3] = numpy.sum(x193 * (x1011 * x20 + x1043 + x1110 * x20))
    result[4, 7, 4] = numpy.sum(x401 * (x1014 * x20 + x1046 + x1111 * x20))
    result[4, 7, 5] = numpy.sum(x193 * (x1017 * x20 + x1048 + x1112 * x20))
    result[4, 8, 0] = numpy.sum(x193 * (x1051 + x1115 * x20))
    result[4, 8, 1] = numpy.sum(x401 * (x1054 + x1118 * x20))
    result[4, 8, 2] = numpy.sum(x401 * (x1057 + x1121 * x20))
    result[4, 8, 3] = numpy.sum(x193 * (x1059 + x1124 * x20))
    result[4, 8, 4] = numpy.sum(x401 * (x1061 + x1127 * x20))
    result[4, 8, 5] = numpy.sum(x193 * (x1063 + x1130 * x20))
    result[4, 9, 0] = numpy.sum(x107 * (x1115 * x21 + x1132))
    result[4, 9, 1] = numpy.sum(x622 * (x1118 * x21 + x1134))
    result[4, 9, 2] = numpy.sum(x622 * (x1121 * x21 + x1136))
    result[4, 9, 3] = numpy.sum(x107 * (x1124 * x21 + x1137))
    result[4, 9, 4] = numpy.sum(x622 * (x1127 * x21 + x1138))
    result[4, 9, 5] = numpy.sum(x107 * (x1130 * x21 + x1139))
    result[5, 0, 0] = numpy.sum(
        x101 * (x0 * x1140 + x0 * x446 + x0 * (x0 * (x1141 * x926 + x838) + x1140) + x456)
    )
    result[5, 0, 1] = numpy.sum(
        x107
        * (x0 * x1142 + x0 * x458 + x0 * (x0 * (x1141 * x1143 + x841) + x1142) + x461)
    )
    result[5, 0, 2] = numpy.sum(
        x107 * (x0 * x1144 + x0 * x465 + x0 * (x0 * (x1067 * x843 + x845) + x1144) + x470)
    )
    result[5, 0, 3] = numpy.sum(
        x101 * (x0 * x1145 + x0 * x472 + x0 * (x0 * (x114 * x1141 + x847) + x1145) + x475)
    )
    result[5, 0, 4] = numpy.sum(
        x107 * (x0 * x1146 + x0 * x477 + x0 * (x0 * (x0 * x1147 + x849) + x1146) + x480)
    )
    result[5, 0, 5] = numpy.sum(
        x101 * (x0 * x1148 + x0 * x482 + x0 * (x0 * (x1149 * x89 + x851) + x1148) + x485)
    )
    result[5, 1, 0] = numpy.sum(
        x178 * (x0 * x1150 + x0 * (x0 * x1152 + x1150) + x20 * x446 + x565)
    )
    result[5, 1, 1] = numpy.sum(
        x193 * (x0 * x1153 + x0 * (x0 * x1154 + x1153) + x20 * x458 + x571)
    )
    result[5, 1, 2] = numpy.sum(
        x193 * (x0 * x1155 + x0 * (x0 * x1156 + x1155) + x20 * x465 + x577)
    )
    result[5, 1, 3] = numpy.sum(
        x178 * (x0 * x1157 + x0 * (x0 * x1158 + x1157) + x20 * x472 + x580)
    )
    result[5, 1, 4] = numpy.sum(
        x193 * (x0 * x1159 + x0 * (x0 * x1160 + x1159) + x20 * x477 + x583)
    )
    result[5, 1, 5] = numpy.sum(
        x178 * (x0 * x1161 + x0 * (x0 * x1162 + x1161) + x20 * x482 + x586)
    )
    result[5, 2, 0] = numpy.sum(x178 * (x0 * x878 + x0 * (x0 * x1165 + x878) + x603))
    result[5, 2, 1] = numpy.sum(x193 * (x0 * x882 + x0 * (x0 * x1167 + x882) + x605))
    result[5, 2, 2] = numpy.sum(x193 * (x0 * x887 + x0 * (x0 * x1169 + x887) + x609))
    result[5, 2, 3] = numpy.sum(x178 * (x0 * x890 + x0 * (x0 * x1171 + x890) + x611))
    result[5, 2, 4] = numpy.sum(x193 * (x0 * x893 + x0 * (x0 * x1173 + x893) + x613))
    result[5, 2, 5] = numpy.sum(x178 * (x0 * x896 + x0 * (x0 * x1175 + x896) + x615))
    result[5, 3, 0] = numpy.sum(x178 * (x0 * x1177 + x1150 * x20 + x20 * x706 + x769))
    result[5, 3, 1] = numpy.sum(x193 * (x0 * x1179 + x1153 * x20 + x20 * x710 + x774))
    result[5, 3, 2] = numpy.sum(x193 * (x0 * x1181 + x1155 * x20 + x20 * x714 + x779))
    result[5, 3, 3] = numpy.sum(x178 * (x0 * x1183 + x1157 * x20 + x20 * x717 + x782))
    result[5, 3, 4] = numpy.sum(x193 * (x0 * x1185 + x1159 * x20 + x20 * x720 + x785))
    result[5, 3, 5] = numpy.sum(x178 * (x0 * x1187 + x1161 * x20 + x20 * x723 + x788))
    result[5, 4, 0] = numpy.sum(x193 * (x0 * x1188 + x20 * x878 + x795))
    result[5, 4, 1] = numpy.sum(x401 * (x0 * x1189 + x20 * x882 + x799))
    result[5, 4, 2] = numpy.sum(x401 * (x0 * x1190 + x20 * x887 + x803))
    result[5, 4, 3] = numpy.sum(x193 * (x0 * x1191 + x20 * x890 + x805))
    result[5, 4, 4] = numpy.sum(x401 * (x0 * x1192 + x20 * x893 + x807))
    result[5, 4, 5] = numpy.sum(x193 * (x0 * x1193 + x20 * x896 + x809))
    result[5, 5, 0] = numpy.sum(x178 * (x0 * x1196 + x915))
    result[5, 5, 1] = numpy.sum(x193 * (x0 * x1199 + x917))
    result[5, 5, 2] = numpy.sum(x193 * (x0 * x1202 + x921))
    result[5, 5, 3] = numpy.sum(x178 * (x0 * x1205 + x922))
    result[5, 5, 4] = numpy.sum(x193 * (x0 * x1208 + x923))
    result[5, 5, 5] = numpy.sum(x178 * (x0 * x1211 + x924))
    result[5, 6, 0] = numpy.sum(x101 * (x1001 * x20 + x1033 + x1176 * x20 + x1177 * x20))
    result[5, 6, 1] = numpy.sum(x107 * (x1004 * x20 + x1037 + x1178 * x20 + x1179 * x20))
    result[5, 6, 2] = numpy.sum(x107 * (x1007 * x20 + x1040 + x1180 * x20 + x1181 * x20))
    result[5, 6, 3] = numpy.sum(x101 * (x1010 * x20 + x1042 + x1182 * x20 + x1183 * x20))
    result[5, 6, 4] = numpy.sum(x107 * (x1013 * x20 + x1045 + x1184 * x20 + x1185 * x20))
    result[5, 6, 5] = numpy.sum(x101 * (x1016 * x20 + x1047 + x1186 * x20 + x1187 * x20))
    result[5, 7, 0] = numpy.sum(x178 * (x1050 + x1114 * x20 + x1188 * x20))
    result[5, 7, 1] = numpy.sum(x193 * (x1053 + x1117 * x20 + x1189 * x20))
    result[5, 7, 2] = numpy.sum(x193 * (x1056 + x1120 * x20 + x1190 * x20))
    result[5, 7, 3] = numpy.sum(x178 * (x1058 + x1123 * x20 + x1191 * x20))
    result[5, 7, 4] = numpy.sum(x193 * (x1060 + x1126 * x20 + x1192 * x20))
    result[5, 7, 5] = numpy.sum(x178 * (x1062 + x1129 * x20 + x1193 * x20))
    result[5, 8, 0] = numpy.sum(x178 * (x1132 + x1196 * x20))
    result[5, 8, 1] = numpy.sum(x193 * (x1134 + x1199 * x20))
    result[5, 8, 2] = numpy.sum(x193 * (x1136 + x1202 * x20))
    result[5, 8, 3] = numpy.sum(x178 * (x1137 + x1205 * x20))
    result[5, 8, 4] = numpy.sum(x193 * (x1138 + x1208 * x20))
    result[5, 8, 5] = numpy.sum(x178 * (x1139 + x1211 * x20))
    result[5, 9, 0] = numpy.sum(
        x101 * (x1194 * x21 + x1195 * x21 + x1196 * x21 + x1212 * x926)
    )
    result[5, 9, 1] = numpy.sum(
        x107 * (x1143 * x1212 + x1197 * x21 + x1198 * x21 + x1199 * x21)
    )
    result[5, 9, 2] = numpy.sum(
        x107 * (x1200 * x21 + x1201 * x21 + x1202 * x21 + x1213 * x929)
    )
    result[5, 9, 3] = numpy.sum(
        x101 * (x114 * x1212 + x1203 * x21 + x1204 * x21 + x1205 * x21)
    )
    result[5, 9, 4] = numpy.sum(
        x107 * (x119 * x1213 + x1206 * x21 + x1207 * x21 + x1208 * x21)
    )
    result[5, 9, 5] = numpy.sum(
        x101
        * (x1209 * x21 + x1210 * x21 + x1211 * x21 + x70 * (x108 * x1213 + 5.0 * x919))
    )
    return result


def int3c2e3d_sph_233(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (df|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 10, 10), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(4, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x2 * x20 * x23
    x25 = 2.0 * x19 * x24
    x26 = x18 * x25
    x27 = cx ** (-1.0)
    x28 = x14 ** (-0.5)
    x29 = boys(3, x17)
    x30 = 2.0 * x2 * x20 * x23 * x27 * x28 * x29 - x26
    x31 = x30 * x6
    x32 = -2.0 * x2 * x20 * x23 * x27 * x28 * x29 * x5 + x26 * x4
    x33 = -x32
    x34 = boys(5, x17)
    x35 = x25 * x34
    x36 = -2.0 * x18 * x2 * x20 * x23 * x27 * x28 * x5 + x35 * x4
    x37 = -x36
    x38 = x16 * x37
    x39 = x38 * x4
    x40 = x31 + x33 * x5 - x39
    x41 = -x32 - x38
    x42 = 2.0 * x6
    x43 = 2.0 * x18 * x2 * x20 * x23 * x27 * x28 - x35
    x44 = x43 * x6
    x45 = boys(6, x17)
    x46 = x25 * x45
    x47 = -2.0 * x2 * x20 * x23 * x27 * x28 * x34 * x5 + x4 * x46
    x48 = -x47
    x49 = x16 * x48
    x50 = x4 * x49
    x51 = x37 * x5 + x44 - x50
    x52 = x16 * x51
    x53 = x4 * x52
    x54 = x40 * x5 + x41 * x42 - x53
    x55 = -x30 * x6
    x56 = 3.0 * x6
    x57 = x6 * (2.0 * x2 * x20 * x23 * x27 * x28 * x34 - x46)
    x58 = boys(7, x17)
    x59 = x25 * x58
    x60 = 2.0 * x2 * x20 * x23 * x27 * x28 * x45 * x5 - x4 * x59
    x61 = x16 * x60
    x62 = -x4 * x61 + x48 * x5 + x57
    x63 = x16 * x62
    x64 = -x4 * x63 - x42 * (x36 + x49) + x5 * x51
    x65 = x16 * x64
    x66 = -x4 * x65 + x5 * x54 - x56 * (-x33 * x5 + x39 + x52 + x55)
    x67 = x4 * x66
    x68 = x54 * x6
    x69 = 4.0 * x68
    x70 = x67 + x69
    x71 = x1 * x15
    x72 = x4 * x71
    x73 = x4 * x54
    x74 = x40 * x6
    x75 = 3.0 * x74
    x76 = x73 + x75
    x77 = 4.0 * x6
    x78 = x71 * x77
    x79 = x70 * x72 + x76 * x78
    x80 = x4 * x40
    x81 = x33 * x6
    x82 = 2.0 * x81
    x83 = x80 + x82
    x84 = x56 * x71
    x85 = x72 * x76 + x83 * x84
    x86 = x71 * (x72 * x79 + x78 * x85)
    x87 = x33 * x4
    x88 = x27 * x29 * x42
    x89 = x24 * x28 * x88
    x90 = x87 + x89
    x91 = x42 * x71
    x92 = x72 * x83 + x90 * x91
    x93 = x71 * (x72 * x85 + x84 * x92)
    x94 = x0 * x93 + x86
    x95 = x19 * x20 * x23 * x88
    x96 = x72 * x92 + x91 * (x4 * x95 + x72 * x90)
    x97 = x0 * x71
    x98 = -x43 * x6
    x99 = x6 * (2.0 * x2 * x20 * x23 * x27 * x28 * x45 - x59)
    x100 = x25 * boys(8, x17)
    x101 = x16 * x4
    x102 = (
        -x101
        * (
            x101
            * (
                x101
                * (
                    x101 * (x100 * x4 - 2.0 * x2 * x20 * x23 * x27 * x28 * x5 * x58)
                    + x5 * x60
                    + x99
                )
                + x42 * (x47 + x61)
                - x5 * x62
            )
            + x5 * x64
            - x56 * (-x37 * x5 + x50 + x63 + x98)
        )
        + x5 * x66
        + x77 * (x40 * x5 + 2.0 * x41 * x6 - x53 - x65)
    )
    x103 = x102 * x4
    x104 = x6 * x66
    x105 = 5.0 * x104
    x106 = x6 * x71
    x107 = 5.0 * x106
    x108 = 1.732050807568877
    x109 = da * db * dc
    x110 = 0.02222222222222222 * x109
    x111 = x108 * x110
    x112 = x71 * x9
    x113 = x112 * (x67 + x69)
    x114 = x112 * (x73 + x75)
    x115 = x71 * (x113 * x72 + x114 * x78)
    x116 = x112 * (x80 + x82)
    x117 = x71 * (x114 * x72 + x116 * x84)
    x118 = x0 * x117 + x115
    x119 = x9 * x95
    x120 = x116 * x72 + x91 * (x112 * x87 + x119)
    x121 = 3.872983346207417
    x122 = x110 * x121
    x123 = x12 * x71
    x124 = x123 * (x67 + x69)
    x125 = x123 * (x73 + x75)
    x126 = x71 * (x124 * x72 + x125 * x78)
    x127 = x123 * (x80 + x82)
    x128 = x71 * (x125 * x72 + x127 * x84)
    x129 = x0 * x128 + x126
    x130 = x12 * x95
    x131 = x127 * x72 + x91 * (x123 * x87 + x130)
    x132 = x1**2 / x14**2
    x133 = x10 * x132
    x134 = x133 * x71 * (x67 + x69)
    x135 = x133 * x71 * (x73 + x75)
    x136 = x0 * x135 + x134
    x137 = x133 * (x80 + x82)
    x138 = x132 * x9
    x139 = x12 * x138
    x140 = x139 * x71 * (x67 + x69)
    x141 = x139 * x71 * (x73 + x75)
    x142 = x0 * x141 + x140
    x143 = x139 * (x80 + x82)
    x144 = 0.06666666666666667 * x109
    x145 = 2.23606797749979 * x144
    x146 = x13 * x132
    x147 = x146 * x71 * (x67 + x69)
    x148 = x146 * x71 * (x73 + x75)
    x149 = x0 * x148 + x147
    x150 = x146 * (x80 + x82)
    x151 = x1**3 / x14**3
    x152 = x151 * x9**3
    x153 = x152 * x66
    x154 = x152 * x54
    x155 = x0 * x154 + x153
    x156 = x0 * x40
    x157 = x10 * x151
    x158 = x12 * x157
    x159 = x158 * x66
    x160 = x158 * x54
    x161 = x0 * x160 + x159
    x162 = x13 * x151
    x163 = x162 * x9
    x164 = x163 * x66
    x165 = x163 * x54
    x166 = x0 * x165 + x164
    x167 = x12**3 * x151
    x168 = x167 * x66
    x169 = x167 * x54
    x170 = x0 * x169 + x168
    x171 = -x8 - A[1]
    x172 = -2.0 * x171 * x18 * x2 * x20 * x23 * x27 * x28 + x35 * x9
    x173 = -x172
    x174 = x16 * x173
    x175 = -2.0 * x171 * x2 * x20 * x23 * x27 * x28 * x29 + x26 * x9
    x176 = -x174 - x175
    x177 = x176 * x6
    x178 = -x175
    x179 = x174 * x4 - x178 * x5
    x180 = -x179
    x181 = -2.0 * x171 * x2 * x20 * x23 * x27 * x28 * x34 + x46 * x9
    x182 = -x181
    x183 = x16 * x182
    x184 = -x173 * x5 + x183 * x4
    x185 = -x184
    x186 = x16 * x185
    x187 = x186 * x4
    x188 = x177 + x180 * x5 - x187
    x189 = -x6 * (x172 + x183)
    x190 = 2.0 * x171 * x2 * x20 * x23 * x27 * x28 * x45 - x59 * x9
    x191 = x16 * x190
    x192 = x182 * x5 - x191 * x4
    x193 = x16 * x192
    x194 = x185 * x5 + x189 - x193 * x4
    x195 = x16 * x194
    x196 = x188 * x5 - x195 * x4 - x42 * (x179 + x186)
    x197 = x196 * x4
    x198 = x188 * x6
    x199 = 3.0 * x198
    x200 = x197 + x199
    x201 = x188 * x4
    x202 = x180 * x6
    x203 = 2.0 * x202
    x204 = x201 + x203
    x205 = x200 * x72 + x204 * x84
    x206 = x178 * x6
    x207 = x180 * x4
    x208 = x206 + x207
    x209 = x204 * x72 + x208 * x91
    x210 = x71 * (x205 * x72 + x209 * x84)
    x211 = x21 * x93 + x210
    x212 = x72 * (x206 + x208)
    x213 = x71 * (x209 * x72 + x212 * x91)
    x214 = x21 * x71
    x215 = x213 + x214 * x96
    x216 = -x6 * (x181 + x191)
    x217 = -x100 * x9 + 2.0 * x171 * x2 * x20 * x23 * x27 * x28 * x58
    x218 = (
        x101
        * (
            x101 * (x101 * (x101 * x217 - x190 * x5) + x192 * x5 + x216)
            - x194 * x5
            + x42 * (x184 + x193)
        )
        + x196 * x5
        + x56 * (x176 * x6 + x180 * x5 - x187 - x195)
    )
    x219 = x218 * x4
    x220 = x196 * x6
    x221 = 4.0 * x220
    x222 = x71 * (x205 * x78 + x72 * (x200 * x78 + x72 * (x219 + x221)))
    x223 = x196 * x9
    x224 = x223 + x68
    x225 = x188 * x9
    x226 = x225 + x74
    x227 = x224 * x72 + x226 * x84
    x228 = x180 * x9
    x229 = x228 + x81
    x230 = x229 * x91
    x231 = x226 * x72 + x230
    x232 = x71 * (x227 * x72 + x231 * x84)
    x233 = x117 * x21 + x232
    x234 = x178 * x9
    x235 = x234 + x89
    x236 = x106 * x235 + x229 * x72
    x237 = x71 * (x231 * x72 + x236 * x91)
    x238 = x120 * x214 + x237
    x239 = x218 * x9
    x240 = x104 + x239
    x241 = x71 * (x227 * x78 + x72 * (x224 * x78 + x240 * x72))
    x242 = 0.1111111111111111 * x108 * x109
    x243 = x123 * (x197 + x199)
    x244 = x123 * x203
    x245 = x123 * x201 + x244
    x246 = x71 * (x243 * x72 + x245 * x84)
    x247 = x128 * x21 + x246
    x248 = x123 * x206
    x249 = x123 * x207 + x248
    x250 = x71 * (x245 * x72 + x249 * x91)
    x251 = x131 * x214 + x250
    x252 = x71 * (x123 * x72 * (x219 + x221) + x243 * x78)
    x253 = x112 * (x224 + x68)
    x254 = x112 * (x226 + x74)
    x255 = x71 * (x253 * x72 + x254 * x84)
    x256 = x135 * x21 + x255
    x257 = x112 * (x229 + x81)
    x258 = x257 * x91
    x259 = x71 * (x254 * x72 + x258)
    x260 = x137 * x214 + x259
    x261 = x112 * (x104 + x240)
    x262 = x71 * (x253 * x78 + x261 * x72)
    x263 = x123 * x68
    x264 = x123 * x223 + x263
    x265 = x123 * x74
    x266 = x123 * x225 + x265
    x267 = x71 * (x264 * x72 + x266 * x84)
    x268 = x141 * x21 + x267
    x269 = x123 * x81
    x270 = x123 * x228 + x269
    x271 = x270 * x91
    x272 = x71 * (x266 * x72 + x271)
    x273 = x143 * x214 + x272
    x274 = x104 * x123
    x275 = x123 * x239 + x274
    x276 = x71 * (x264 * x78 + x275 * x72)
    x277 = 0.3333333333333333 * x109
    x278 = x146 * x71 * (x197 + x199)
    x279 = x148 * x21 + x278
    x280 = x146 * x203
    x281 = x71 * (x146 * x201 + x280)
    x282 = x150 * x214 + x281
    x283 = x146 * x71 * (x219 + x221)
    x284 = x71 * (x112 * x253 + x133 * x68)
    x285 = x154 * x21 + x284
    x286 = x71 * (x112 * x254 + x133 * x74)
    x287 = x21 * x40
    x288 = x152 * x287 + x286
    x289 = x71 * (x104 * x133 + x112 * x261)
    x290 = x71 * (x112 * x264 + x139 * x68)
    x291 = x160 * x21 + x290
    x292 = x71 * (x112 * x266 + x139 * x74)
    x293 = x158 * x287 + x292
    x294 = x71 * (x104 * x139 + x112 * x275)
    x295 = x146 * x68
    x296 = x71 * (x146 * x223 + x295)
    x297 = x165 * x21 + x296
    x298 = x146 * x74
    x299 = x71 * (x146 * x225 + x298)
    x300 = x163 * x287 + x299
    x301 = x104 * x146
    x302 = x71 * (x146 * x239 + x301)
    x303 = x167 * x196
    x304 = x169 * x21 + x303
    x305 = x167 * x188
    x306 = x167 * x287 + x305
    x307 = x167 * x218
    x308 = -x11 - A[2]
    x309 = x12 * x35 - 2.0 * x18 * x2 * x20 * x23 * x27 * x28 * x308
    x310 = -x309
    x311 = x16 * x310
    x312 = x12 * x26 - 2.0 * x2 * x20 * x23 * x27 * x28 * x29 * x308
    x313 = -x311 - x312
    x314 = x313 * x6
    x315 = -x312
    x316 = x311 * x4 - x315 * x5
    x317 = -x316
    x318 = x12 * x46 - 2.0 * x2 * x20 * x23 * x27 * x28 * x308 * x34
    x319 = -x318
    x320 = x16 * x319
    x321 = -x310 * x5 + x320 * x4
    x322 = -x321
    x323 = x16 * x322
    x324 = x323 * x4
    x325 = x314 + x317 * x5 - x324
    x326 = -x6 * (x309 + x320)
    x327 = -x12 * x59 + 2.0 * x2 * x20 * x23 * x27 * x28 * x308 * x45
    x328 = x16 * x327
    x329 = x319 * x5 - x328 * x4
    x330 = x16 * x329
    x331 = x322 * x5 + x326 - x330 * x4
    x332 = x16 * x331
    x333 = x325 * x5 - x332 * x4 - x42 * (x316 + x323)
    x334 = x333 * x4
    x335 = x325 * x6
    x336 = 3.0 * x335
    x337 = x334 + x336
    x338 = x325 * x4
    x339 = x317 * x6
    x340 = 2.0 * x339
    x341 = x338 + x340
    x342 = x337 * x72 + x341 * x84
    x343 = x315 * x6
    x344 = x317 * x4
    x345 = x343 + x344
    x346 = x341 * x72 + x345 * x91
    x347 = x71 * (x342 * x72 + x346 * x84)
    x348 = x22 * x93 + x347
    x349 = x72 * (x343 + x345)
    x350 = x71 * (x346 * x72 + x349 * x91)
    x351 = x22 * x71
    x352 = x350 + x351 * x96
    x353 = -x313 * x6
    x354 = -x6 * (x318 + x328)
    x355 = -x100 * x12 + 2.0 * x2 * x20 * x23 * x27 * x28 * x308 * x58
    x356 = (
        x101
        * (
            x101 * (x101 * (x101 * x355 - x327 * x5) + x329 * x5 + x354)
            - x331 * x5
            + x42 * (x321 + x330)
        )
        + x333 * x5
        - x56 * (-x317 * x5 + x324 + x332 + x353)
    )
    x357 = x356 * x4
    x358 = x333 * x6
    x359 = 4.0 * x358
    x360 = x71 * (x342 * x78 + x72 * (x337 * x78 + x72 * (x357 + x359)))
    x361 = x112 * (x334 + x336)
    x362 = x112 * (x338 + x340)
    x363 = x71 * (x361 * x72 + x362 * x84)
    x364 = x117 * x22 + x363
    x365 = x112 * x343
    x366 = x112 * x344 + x365
    x367 = x71 * (x362 * x72 + x366 * x91)
    x368 = x120 * x351 + x367
    x369 = x71 * (x112 * x72 * (x357 + x359) + x361 * x78)
    x370 = x12 * x333 + x68
    x371 = x12 * x325 + x74
    x372 = x370 * x72 + x371 * x84
    x373 = x12 * x317 + x81
    x374 = x373 * x91
    x375 = x371 * x72 + x374
    x376 = x71 * (x372 * x72 + x375 * x84)
    x377 = x128 * x22 + x376
    x378 = x12 * x315 + x89
    x379 = x106 * x378
    x380 = x373 * x72 + x379
    x381 = x71 * (x375 * x72 + x380 * x91)
    x382 = x131 * x351 + x381
    x383 = x104 + x12 * x356
    x384 = x71 * (x372 * x78 + x72 * (x370 * x78 + x383 * x72))
    x385 = x133 * x71 * (x334 + x336)
    x386 = x135 * x22 + x385
    x387 = x133 * x71 * (x338 + x340)
    x388 = x137 * x351 + x387
    x389 = x133 * x71 * (x357 + x359)
    x390 = x138 * x4
    x391 = x138 * x56
    x392 = x71 * (x370 * x390 + x371 * x391)
    x393 = x141 * x22 + x392
    x394 = x138 * x42
    x395 = x71 * (x371 * x390 + x373 * x394)
    x396 = x143 * x351 + x395
    x397 = x71 * (x138 * x370 * x77 + x383 * x390)
    x398 = x123 * x370 + x263
    x399 = x123 * x371 + x265
    x400 = x71 * (x398 * x72 + x399 * x84)
    x401 = x148 * x22 + x400
    x402 = x123 * x373 + x269
    x403 = x402 * x91
    x404 = x71 * (x399 * x72 + x403)
    x405 = x150 * x351 + x404
    x406 = x123 * x383 + x274
    x407 = x71 * (x398 * x78 + x406 * x72)
    x408 = x152 * x333
    x409 = x154 * x22 + x408
    x410 = x152 * x325
    x411 = x22 * x40
    x412 = x152 * x411 + x410
    x413 = x152 * x356
    x414 = x157 * x370
    x415 = x160 * x22 + x414
    x416 = x157 * x371
    x417 = x158 * x411 + x416
    x418 = x157 * x383
    x419 = x138 * x398
    x420 = x165 * x22 + x419
    x421 = x138 * x399
    x422 = x163 * x411 + x421
    x423 = x138 * x406
    x424 = x71 * (x123 * x398 + x295)
    x425 = x169 * x22 + x424
    x426 = x71 * (x123 * x399 + x298)
    x427 = x167 * x411 + x426
    x428 = x71 * (x123 * x406 + x301)
    x429 = x183 * x9
    x430 = x171 * x173 - x429 + x44
    x431 = x16 * x430
    x432 = x174 * x9
    x433 = x6 * (x171 * x178 - x431 - x432 - x55)
    x434 = x171 * x178 + x31 - x432
    x435 = x4 * x431 - x434 * x5
    x436 = -x435
    x437 = x171 * x182 - x191 * x9 + x57
    x438 = x16 * x437
    x439 = -x4 * x438 + x430 * x5
    x440 = x16 * x439
    x441 = -x4 * x440 + x433 + x436 * x5
    x442 = x4 * x441
    x443 = x436 * x6
    x444 = 2.0 * x443
    x445 = x442 + x444
    x446 = x434 * x6
    x447 = x4 * x436
    x448 = x446 + x447
    x449 = x445 * x72 + x448 * x91
    x450 = x72 * (x446 + x448)
    x451 = x71 * (x449 * x72 + x450 * x91)
    x452 = x21 * x213 + x451
    x453 = x21 * x215 + x452
    x454 = x6 * (x171 * x173 - x429 - x438 - x98)
    x455 = x16 * x9
    x456 = x171 * x190 - x217 * x455 + x99
    x457 = (
        -x101 * (x101 * (x101 * x456 - x437 * x5) + x439 * x5 + x454)
        - x42 * (x435 + x440)
        + x441 * x5
    )
    x458 = x4 * x457
    x459 = x441 * x6
    x460 = 3.0 * x459
    x461 = x71 * (x449 * x84 + x72 * (x445 * x84 + x72 * (x458 + x460)))
    x462 = x21 * x210 + x461
    x463 = x441 * x9
    x464 = 2.0 * x198
    x465 = x463 + x464
    x466 = x436 * x9
    x467 = x203 + x466
    x468 = x465 * x72 + x467 * x91
    x469 = x434 * x9
    x470 = 2.0 * x206
    x471 = x469 + x470
    x472 = x106 * x471 + x467 * x72
    x473 = x71 * (x468 * x72 + x472 * x91)
    x474 = x21 * x237 + x473
    x475 = x21 * x238 + x474
    x476 = x457 * x9
    x477 = 2.0 * x220
    x478 = x476 + x477
    x479 = x465 * x84
    x480 = x71 * (x468 * x84 + x72 * (x478 * x72 + x479))
    x481 = x21 * x232 + x480
    x482 = x123 * (x442 + x444)
    x483 = x123 * x446
    x484 = x123 * x447 + x483
    x485 = x71 * (x482 * x72 + x484 * x91)
    x486 = x21 * x250 + x485
    x487 = x21 * x251 + x486
    x488 = x123 * x460
    x489 = x71 * (x482 * x84 + x72 * (x123 * x458 + x488))
    x490 = x21 * x246 + x489
    x491 = x112 * x465 + x226 * x91
    x492 = x112 * x467 + x230
    x493 = x71 * (x491 * x72 + x492 * x91)
    x494 = x21 * x259 + x493
    x495 = x21 * x260 + x494
    x496 = x112 * x478 + x224 * x91
    x497 = x491 * x84
    x498 = x71 * (x496 * x72 + x497)
    x499 = x21 * x255 + x498
    x500 = x123 * (x463 + x464)
    x501 = x123 * x466 + x244
    x502 = x71 * (x500 * x72 + x501 * x91)
    x503 = x21 * x272 + x502
    x504 = x21 * x273 + x503
    x505 = x123 * (x476 + x477)
    x506 = x500 * x84
    x507 = x71 * (x505 * x72 + x506)
    x508 = x21 * x267 + x507
    x509 = x146 * x71 * (x442 + x444)
    x510 = x21 * x281 + x509
    x511 = x21 * x282 + x510
    x512 = x146 * x460
    x513 = x71 * (x146 * x458 + x512)
    x514 = x21 * x278 + x513
    x515 = x71 * (x112 * x491 + x254 * x91)
    x516 = x21 * x286 + x515
    x517 = x21 * x288 + x516
    x518 = x71 * (x112 * x496 + x253 * x91)
    x519 = x21 * x284 + x518
    x520 = x71 * (x112 * x500 + x266 * x91)
    x521 = x21 * x292 + x520
    x522 = x21 * x293 + x521
    x523 = x71 * (x112 * x505 + x264 * x91)
    x524 = x21 * x290 + x523
    x525 = x146 * x71 * (x463 + x464)
    x526 = x21 * x299 + x525
    x527 = x21 * x300 + x526
    x528 = x146 * x71 * (x476 + x477)
    x529 = x21 * x296 + x528
    x530 = x167 * x441
    x531 = x21 * x305 + x530
    x532 = x21 * x306 + x531
    x533 = x167 * x457
    x534 = x21 * x303 + x533
    x535 = -x171 * x310 + x320 * x9
    x536 = -x535
    x537 = x16 * x536
    x538 = -x171 * x315 + x311 * x9
    x539 = -x6 * (x537 + x538)
    x540 = -x538
    x541 = x4 * x537 - x5 * x540
    x542 = -x541
    x543 = x171 * x319 - x328 * x9
    x544 = x16 * x543
    x545 = -x4 * x544 + x5 * x536
    x546 = x16 * x545
    x547 = -x4 * x546 + x5 * x542 + x539
    x548 = x42 * x542
    x549 = x4 * x547 + x548
    x550 = x540 * x6
    x551 = x4 * x542 + x550
    x552 = x549 * x72 + x551 * x91
    x553 = x72 * (x550 + x551)
    x554 = x71 * (x552 * x72 + x553 * x91)
    x555 = x213 * x22 + x554
    x556 = x21 * x352 + x555
    x557 = -x6 * (x535 + x544)
    x558 = x171 * x327 - x355 * x455
    x559 = (
        -x101 * (x101 * (x101 * x558 - x5 * x543) + x5 * x545 + x557)
        - x42 * (x541 + x546)
        + x5 * x547
    )
    x560 = x71 * (x552 * x84 + x72 * (x549 * x84 + x72 * (x4 * x559 + x547 * x56)))
    x561 = x210 * x22 + x560
    x562 = x335 + x547 * x9
    x563 = x339 + x542 * x9
    x564 = x563 * x91
    x565 = x562 * x72 + x564
    x566 = x343 + x540 * x9
    x567 = x106 * x566 + x563 * x72
    x568 = x71 * (x565 * x72 + x567 * x91)
    x569 = x22 * x237 + x568
    x570 = x21 * x368 + x569
    x571 = x358 + x559 * x9
    x572 = x71 * (x565 * x84 + x72 * (x562 * x84 + x571 * x72))
    x573 = x22 * x232 + x572
    x574 = x12 * x547 + x198
    x575 = x12 * x542 + x202
    x576 = x575 * x91
    x577 = x574 * x72 + x576
    x578 = x12 * x540 + x206
    x579 = x106 * x578 + x575 * x72
    x580 = x71 * (x577 * x72 + x579 * x91)
    x581 = x22 * x250 + x580
    x582 = x21 * x382 + x581
    x583 = x12 * x559 + x220
    x584 = x71 * (x577 * x84 + x72 * (x574 * x84 + x583 * x72))
    x585 = x22 * x246 + x584
    x586 = x112 * (x335 + x562)
    x587 = x112 * (x339 + x563)
    x588 = x587 * x91
    x589 = x71 * (x586 * x72 + x588)
    x590 = x22 * x259 + x589
    x591 = x21 * x388 + x590
    x592 = x112 * (x358 + x571)
    x593 = x71 * (x586 * x84 + x592 * x72)
    x594 = x22 * x255 + x593
    x595 = x106 * x371 + x112 * x574
    x596 = x106 * x373 + x112 * x575
    x597 = x596 * x91
    x598 = x71 * (x595 * x72 + x597)
    x599 = x22 * x272 + x598
    x600 = x21 * x396 + x599
    x601 = x106 * x370 + x112 * x583
    x602 = x71 * (x595 * x84 + x601 * x72)
    x603 = x22 * x267 + x602
    x604 = x108 * x277
    x605 = x123 * (x198 + x574)
    x606 = x123 * (x202 + x575)
    x607 = x606 * x91
    x608 = x71 * (x605 * x72 + x607)
    x609 = x22 * x281 + x608
    x610 = x21 * x405 + x609
    x611 = x123 * (x220 + x583)
    x612 = x71 * (x605 * x84 + x611 * x72)
    x613 = x22 * x278 + x612
    x614 = x71 * (x112 * x586 + x133 * x335)
    x615 = x22 * x286 + x614
    x616 = x21 * x412 + x615
    x617 = x71 * (x112 * x592 + x133 * x358)
    x618 = x22 * x284 + x617
    x619 = x138 * x6
    x620 = x71 * (x112 * x595 + x371 * x619)
    x621 = x22 * x292 + x620
    x622 = x21 * x417 + x621
    x623 = x71 * (x112 * x601 + x370 * x619)
    x624 = x22 * x290 + x623
    x625 = x71 * (x106 * x399 + x112 * x605)
    x626 = x22 * x299 + x625
    x627 = x21 * x422 + x626
    x628 = x71 * (x106 * x398 + x112 * x611)
    x629 = x22 * x296 + x628
    x630 = x71 * (x123 * x605 + x146 * x198)
    x631 = x22 * x305 + x630
    x632 = x21 * x427 + x631
    x633 = x71 * (x123 * x611 + x146 * x220)
    x634 = x22 * x303 + x633
    x635 = x12 * x320
    x636 = x308 * x310 + x44 - x635
    x637 = x16 * x636
    x638 = x12 * x311
    x639 = x6 * (x308 * x315 - x55 - x637 - x638)
    x640 = x308 * x315 + x31 - x638
    x641 = x4 * x637 - x5 * x640
    x642 = -x641
    x643 = -x12 * x328 + x308 * x319 + x57
    x644 = x16 * x643
    x645 = -x4 * x644 + x5 * x636
    x646 = x16 * x645
    x647 = -x4 * x646 + x5 * x642 + x639
    x648 = x4 * x647
    x649 = x6 * x642
    x650 = 2.0 * x649
    x651 = x648 + x650
    x652 = x6 * x640
    x653 = x4 * x642
    x654 = x652 + x653
    x655 = x651 * x72 + x654 * x91
    x656 = x72 * (x652 + x654)
    x657 = x71 * (x655 * x72 + x656 * x91)
    x658 = x22 * x350 + x657
    x659 = x22 * x352 + x658
    x660 = x6 * (x308 * x310 - x635 - x644 - x98)
    x661 = x12 * x16
    x662 = x308 * x327 - x355 * x661 + x99
    x663 = (
        -x101 * (x101 * (x101 * x662 - x5 * x643) + x5 * x645 + x660)
        - x42 * (x641 + x646)
        + x5 * x647
    )
    x664 = x4 * x663
    x665 = x6 * x647
    x666 = 3.0 * x665
    x667 = x71 * (x655 * x84 + x72 * (x651 * x84 + x72 * (x664 + x666)))
    x668 = x22 * x347 + x667
    x669 = x112 * (x648 + x650)
    x670 = x112 * x652
    x671 = x112 * x653 + x670
    x672 = x71 * (x669 * x72 + x671 * x91)
    x673 = x22 * x367 + x672
    x674 = x22 * x368 + x673
    x675 = x71 * (x112 * x72 * (x664 + x666) + x669 * x84)
    x676 = x22 * x363 + x675
    x677 = x12 * x647 + 2.0 * x335
    x678 = x12 * x642 + x340
    x679 = x677 * x72 + x678 * x91
    x680 = x12 * x640 + 2.0 * x343
    x681 = x106 * x680
    x682 = x678 * x72 + x681
    x683 = x71 * (x679 * x72 + x682 * x91)
    x684 = x22 * x381 + x683
    x685 = x22 * x382 + x684
    x686 = x12 * x663 + 2.0 * x358
    x687 = x677 * x84
    x688 = x71 * (x679 * x84 + x72 * (x686 * x72 + x687))
    x689 = x22 * x376 + x688
    x690 = x133 * x71 * (x648 + x650)
    x691 = x22 * x387 + x690
    x692 = x22 * x388 + x691
    x693 = x133 * x71 * (x664 + x666)
    x694 = x22 * x385 + x693
    x695 = x71 * (x390 * x677 + x394 * x678)
    x696 = x22 * x395 + x695
    x697 = x22 * x396 + x696
    x698 = x71 * (x390 * x686 + x391 * x677)
    x699 = x22 * x392 + x698
    x700 = x123 * x677 + x371 * x91
    x701 = x123 * x678 + x374
    x702 = x71 * (x700 * x72 + x701 * x91)
    x703 = x22 * x404 + x702
    x704 = x22 * x405 + x703
    x705 = x123 * x686 + x370 * x91
    x706 = x700 * x84
    x707 = x71 * (x705 * x72 + x706)
    x708 = x22 * x400 + x707
    x709 = x152 * x647
    x710 = x22 * x410 + x709
    x711 = x22 * x412 + x710
    x712 = x152 * x663
    x713 = x22 * x408 + x712
    x714 = x157 * x677
    x715 = x22 * x416 + x714
    x716 = x22 * x417 + x715
    x717 = x157 * x686
    x718 = x22 * x414 + x717
    x719 = x138 * x700
    x720 = x22 * x421 + x719
    x721 = x22 * x422 + x720
    x722 = x138 * x705
    x723 = x22 * x419 + x722
    x724 = x71 * (x123 * x700 + x399 * x91)
    x725 = x22 * x426 + x724
    x726 = x22 * x427 + x725
    x727 = x71 * (x123 * x705 + x398 * x91)
    x728 = x22 * x424 + x727
    x729 = x171 * x430 + 2.0 * x189 - x438 * x9
    x730 = x16 * x729
    x731 = x431 * x9
    x732 = x6 * (x171 * x434 + 2.0 * x176 * x6 - x730 - x731)
    x733 = x171 * x434 + 2.0 * x177 - x731
    x734 = -x4 * x730 + x5 * x733
    x735 = x171 * x437 + 2.0 * x216 - x455 * x456
    x736 = x101 * (x101 * x735 - x5 * x729) + x5 * x734 + x732
    x737 = x4 * x736
    x738 = x6 * x734
    x739 = 2.0 * x738
    x740 = x6 * x733
    x741 = x4 * x734
    x742 = x740 + x741
    x743 = x72 * (x740 + x742)
    x744 = x21 * x451 + x71 * (x72 * (x72 * (x737 + x739) + x742 * x91) + x743 * x91)
    x745 = x21 * x452 + x744
    x746 = x736 * x9
    x747 = x460 + x746
    x748 = x734 * x9
    x749 = 3.0 * x443
    x750 = x748 + x749
    x751 = x733 * x9
    x752 = 3.0 * x446
    x753 = x751 + x752
    x754 = x106 * x753 + x72 * x750
    x755 = x21 * x473 + x71 * (x72 * (x72 * x747 + x750 * x91) + x754 * x91)
    x756 = x21 * x474 + x755
    x757 = x123 * x740
    x758 = x123 * x741 + x757
    x759 = x21 * x485 + x71 * (x123 * x72 * (x737 + x739) + x758 * x91)
    x760 = x21 * x486 + x759
    x761 = x112 * x747 + x479
    x762 = x112 * x750 + x467 * x84
    x763 = x21 * x493 + x71 * (x72 * x761 + x762 * x91)
    x764 = x21 * x494 + x763
    x765 = x123 * x746 + x488
    x766 = x123 * (x748 + x749)
    x767 = x21 * x502 + x71 * (x72 * x765 + x766 * x91)
    x768 = x21 * x503 + x767
    x769 = x146 * x71 * (x737 + x739) + x21 * x509
    x770 = x21 * x510 + x769
    x771 = x21 * x515 + x71 * (x112 * x761 + x497)
    x772 = x21 * x516 + x771
    x773 = x21 * x520 + x71 * (x112 * x765 + x506)
    x774 = x21 * x521 + x773
    x775 = x21 * x525 + x71 * (x146 * x746 + x512)
    x776 = x21 * x526 + x775
    x777 = x167 * x736 + x21 * x530
    x778 = x21 * x531 + x777
    x779 = x171 * x536 + x326 - x544 * x9
    x780 = x16 * x779
    x781 = x537 * x9
    x782 = x6 * (x171 * x540 - x353 - x780 - x781)
    x783 = x171 * x540 + x314 - x781
    x784 = -x4 * x780 + x5 * x783
    x785 = x171 * x543 + x354 - x455 * x558
    x786 = x101 * (x101 * x785 - x5 * x779) + x5 * x784 + x782
    x787 = x42 * x784
    x788 = x6 * x783
    x789 = x4 * x784 + x788
    x790 = x72 * (x788 + x789)
    x791 = x71 * (x72 * (x72 * (x4 * x786 + x787) + x789 * x91) + x790 * x91)
    x792 = x22 * x451 + x791
    x793 = x21 * x555 + x792
    x794 = x42 * x547
    x795 = x786 * x9 + x794
    x796 = x548 + x784 * x9
    x797 = 2.0 * x550
    x798 = x783 * x9 + x797
    x799 = x106 * x798 + x72 * x796
    x800 = x71 * (x72 * (x72 * x795 + x796 * x91) + x799 * x91)
    x801 = x22 * x473 + x800
    x802 = x21 * x569 + x801
    x803 = x12 * x786 + x459
    x804 = x12 * x784 + x443
    x805 = x804 * x91
    x806 = x12 * x783 + x446
    x807 = x106 * x806 + x72 * x804
    x808 = x71 * (x72 * (x72 * x803 + x805) + x807 * x91)
    x809 = x22 * x485 + x808
    x810 = x21 * x581 + x809
    x811 = x112 * x795 + x562 * x91
    x812 = x112 * x796 + x564
    x813 = x71 * (x72 * x811 + x812 * x91)
    x814 = x22 * x493 + x813
    x815 = x21 * x590 + x814
    x816 = x574 * x91
    x817 = x112 * x803 + x816
    x818 = x112 * x804 + x576
    x819 = x71 * (x72 * x817 + x818 * x91)
    x820 = x22 * x502 + x819
    x821 = x21 * x599 + x820
    x822 = x123 * (x459 + x803)
    x823 = x123 * (x443 + x804)
    x824 = x823 * x91
    x825 = x71 * (x72 * x822 + x824)
    x826 = x22 * x509 + x825
    x827 = x21 * x609 + x826
    x828 = x71 * (x112 * x811 + x586 * x91)
    x829 = x22 * x515 + x828
    x830 = x21 * x615 + x829
    x831 = x71 * (x112 * x817 + x595 * x91)
    x832 = x22 * x520 + x831
    x833 = x21 * x621 + x832
    x834 = x605 * x91
    x835 = x71 * (x112 * x822 + x834)
    x836 = x22 * x525 + x835
    x837 = x21 * x626 + x836
    x838 = x71 * (x123 * x822 + x146 * x459)
    x839 = x22 * x530 + x838
    x840 = x21 * x631 + x839
    x841 = x171 * x636 - x644 * x9
    x842 = x16 * x841
    x843 = -x171 * x640 + x637 * x9
    x844 = -x6 * (x842 + x843)
    x845 = -x843
    x846 = -x4 * x842 + x5 * x845
    x847 = x171 * x643 - x455 * x662
    x848 = x101 * (x101 * x847 - x5 * x841) + x5 * x846 + x844
    x849 = x42 * x846
    x850 = x6 * x845
    x851 = x4 * x846 + x850
    x852 = x72 * (x850 + x851)
    x853 = x71 * (x72 * (x72 * (x4 * x848 + x849) + x851 * x91) + x852 * x91)
    x854 = x22 * x554 + x853
    x855 = x22 * x555 + x854
    x856 = x665 + x848 * x9
    x857 = x649 + x846 * x9
    x858 = x857 * x91
    x859 = x652 + x845 * x9
    x860 = x106 * x859 + x72 * x857
    x861 = x71 * (x72 * (x72 * x856 + x858) + x860 * x91)
    x862 = x22 * x568 + x861
    x863 = x22 * x569 + x862
    x864 = x12 * x848 + x794
    x865 = x12 * x846 + x548
    x866 = x865 * x91
    x867 = x12 * x845 + x797
    x868 = x106 * x867 + x72 * x865
    x869 = x71 * (x72 * (x72 * x864 + x866) + x868 * x91)
    x870 = x22 * x580 + x869
    x871 = x22 * x581 + x870
    x872 = x112 * (x665 + x856)
    x873 = x112 * (x649 + x857)
    x874 = x873 * x91
    x875 = x71 * (x72 * x872 + x874)
    x876 = x22 * x589 + x875
    x877 = x22 * x590 + x876
    x878 = x106 * x677 + x112 * x864
    x879 = x106 * x678 + x112 * x865
    x880 = x879 * x91
    x881 = x71 * (x72 * x878 + x880)
    x882 = x22 * x598 + x881
    x883 = x22 * x599 + x882
    x884 = x123 * x864 + x816
    x885 = x123 * x865 + x576
    x886 = x885 * x91
    x887 = x71 * (x72 * x884 + x886)
    x888 = x22 * x608 + x887
    x889 = x22 * x609 + x888
    x890 = x71 * (x112 * x872 + x133 * x665)
    x891 = x22 * x614 + x890
    x892 = x22 * x615 + x891
    x893 = x71 * (x112 * x878 + x619 * x677)
    x894 = x22 * x620 + x893
    x895 = x22 * x621 + x894
    x896 = x71 * (x106 * x700 + x112 * x884)
    x897 = x22 * x625 + x896
    x898 = x22 * x626 + x897
    x899 = x71 * (x123 * x884 + x834)
    x900 = x22 * x630 + x899
    x901 = x22 * x631 + x900
    x902 = -x12 * x644 + x308 * x636 + 2.0 * x326
    x903 = x16 * x902
    x904 = x12 * x637
    x905 = x6 * (x308 * x640 + 2.0 * x313 * x6 - x903 - x904)
    x906 = x308 * x640 + 2.0 * x314 - x904
    x907 = -x4 * x903 + x5 * x906
    x908 = x308 * x643 + 2.0 * x354 - x661 * x662
    x909 = x101 * (x101 * x908 - x5 * x902) + x5 * x907 + x905
    x910 = x4 * x909
    x911 = x6 * x907
    x912 = 2.0 * x911
    x913 = x6 * x906
    x914 = x4 * x907
    x915 = x913 + x914
    x916 = x72 * (x913 + x915)
    x917 = x22 * x657 + x71 * (x72 * (x72 * (x910 + x912) + x91 * x915) + x91 * x916)
    x918 = x22 * x658 + x917
    x919 = x112 * x913
    x920 = x112 * x914 + x919
    x921 = x22 * x672 + x71 * (x112 * x72 * (x910 + x912) + x91 * x920)
    x922 = x22 * x673 + x921
    x923 = x12 * x909 + x666
    x924 = x12 * x907 + 3.0 * x649
    x925 = x12 * x906 + 3.0 * x652
    x926 = x106 * x925
    x927 = x72 * x924 + x926
    x928 = x22 * x683 + x71 * (x72 * (x72 * x923 + x91 * x924) + x91 * x927)
    x929 = x22 * x684 + x928
    x930 = x133 * x71 * (x910 + x912) + x22 * x690
    x931 = x22 * x691 + x930
    x932 = x22 * x695 + x71 * (x390 * x923 + x394 * x924)
    x933 = x22 * x696 + x932
    x934 = x123 * x923 + x687
    x935 = x123 * x924 + x678 * x84
    x936 = x22 * x702 + x71 * (x72 * x934 + x91 * x935)
    x937 = x22 * x703 + x936
    x938 = x152 * x909 + x22 * x709
    x939 = x22 * x710 + x938
    x940 = x157 * x923 + x22 * x714
    x941 = x22 * x715 + x940
    x942 = x138 * x934 + x22 * x719
    x943 = x22 * x720 + x942
    x944 = x22 * x724 + x71 * (x123 * x934 + x706)
    x945 = x22 * x725 + x944
    x946 = x0 * x213 + x210
    x947 = x132 * x7
    x948 = x206 * x947 + x212 * x72
    x949 = x0 * x237 + x232
    x950 = x132 * x4
    x951 = x6 * x950
    x952 = x235 * x951 + x236 * x72
    x953 = x0 * x250 + x246
    x954 = x12 * x950
    x955 = x206 * x954 + x249 * x72
    x956 = x0 * x259 + x255
    x957 = x112 * x235 + x119
    x958 = x106 * x957 + x257 * x72
    x959 = x0 * x272 + x267
    x960 = x123 * x234 + x130
    x961 = x106 * x960 + x270 * x72
    x962 = x121 * x144
    x963 = x0 * x281 + x278
    x964 = x146 * x206
    x965 = x146 * x207 + x964
    x966 = x0 * x286 + x284
    x967 = x112 * x257 + x133 * x81
    x968 = x0 * x292 + x290
    x969 = x112 * x270 + x139 * x81
    x970 = x0 * x299 + x296
    x971 = x146 * x81
    x972 = x146 * x228 + x971
    x973 = x0 * x305 + x303
    x974 = x167 * x180
    x975 = x71 * (x446 * x947 + x450 * x72)
    x976 = x214 * x948 + x975
    x977 = x71 * (x471 * x951 + x472 * x72)
    x978 = x214 * x952 + x977
    x979 = x71 * (x446 * x954 + x484 * x72)
    x980 = x214 * x955 + x979
    x981 = x112 * x471 + x235 * x91
    x982 = x71 * (x106 * x981 + x492 * x72)
    x983 = x214 * x958 + x982
    x984 = x123 * (x469 + x470)
    x985 = x71 * (x106 * x984 + x501 * x72)
    x986 = x214 * x961 + x985
    x987 = x146 * x446
    x988 = x71 * (x146 * x447 + x987)
    x989 = x214 * x965 + x988
    x990 = x71 * (x112 * x492 + x258)
    x991 = x214 * x967 + x990
    x992 = x71 * (x112 * x501 + x271)
    x993 = x214 * x969 + x992
    x994 = x71 * (x146 * x466 + x280)
    x995 = x214 * x972 + x994
    x996 = x167 * x436
    x997 = x21 * x974 + x996
    x998 = x71 * (x550 * x947 + x553 * x72)
    x999 = x351 * x948 + x998
    x1000 = x71 * (x566 * x951 + x567 * x72)
    x1001 = x1000 + x351 * x952
    x1002 = x71 * (x578 * x951 + x579 * x72)
    x1003 = x1002 + x351 * x955
    x1004 = x112 * x566 + x365
    x1005 = x71 * (x1004 * x106 + x587 * x72)
    x1006 = x1005 + x351 * x958
    x1007 = x112 * x578 + x379
    x1008 = x71 * (x1007 * x106 + x596 * x72)
    x1009 = x1008 + x351 * x961
    x1010 = x123 * x578 + x248
    x1011 = x71 * (x1010 * x106 + x606 * x72)
    x1012 = x1011 + x351 * x965
    x1013 = x71 * (x112 * x587 + x133 * x339)
    x1014 = x1013 + x351 * x967
    x1015 = x71 * (x112 * x596 + x373 * x619)
    x1016 = x1015 + x351 * x969
    x1017 = x71 * (x106 * x402 + x112 * x606)
    x1018 = x1017 + x351 * x972
    x1019 = x71 * (x123 * x606 + x146 * x202)
    x1020 = x1019 + x22 * x974
    x1021 = x71 * (x72 * x743 + x740 * x947)
    x1022 = x1021 + x21 * x975
    x1023 = x1022 + x21 * x976
    x1024 = x71 * (x72 * x754 + x753 * x951)
    x1025 = x1024 + x21 * x977
    x1026 = x1025 + x21 * x978
    x1027 = x71 * (x72 * x758 + x740 * x954)
    x1028 = x1027 + x21 * x979
    x1029 = x1028 + x21 * x980
    x1030 = x112 * x753 + x471 * x84
    x1031 = x71 * (x1030 * x106 + x72 * x762)
    x1032 = x1031 + x21 * x982
    x1033 = x1032 + x21 * x983
    x1034 = x123 * (x751 + x752)
    x1035 = x71 * (x1034 * x106 + x72 * x766)
    x1036 = x1035 + x21 * x985
    x1037 = x1036 + x21 * x986
    x1038 = x146 * x740
    x1039 = x71 * (x1038 + x146 * x741)
    x1040 = x1039 + x21 * x988
    x1041 = x1040 + x21 * x989
    x1042 = x71 * (x112 * x762 + x492 * x84)
    x1043 = x1042 + x21 * x990
    x1044 = x1043 + x21 * x991
    x1045 = x71 * (x112 * x766 + x501 * x84)
    x1046 = x1045 + x21 * x992
    x1047 = x1046 + x21 * x993
    x1048 = x146 * x71 * (x748 + x749)
    x1049 = x1048 + x21 * x994
    x1050 = x1049 + x21 * x995
    x1051 = x167 * x734
    x1052 = x1051 + x21 * x996
    x1053 = x1052 + x21 * x997
    x1054 = x71 * (x72 * x790 + x788 * x947)
    x1055 = x1054 + x22 * x975
    x1056 = x1055 + x21 * x999
    x1057 = x71 * (x72 * x799 + x798 * x951)
    x1058 = x1057 + x22 * x977
    x1059 = x1001 * x21 + x1058
    x1060 = x71 * (x72 * x807 + x806 * x951)
    x1061 = x1060 + x22 * x979
    x1062 = x1003 * x21 + x1061
    x1063 = x112 * x798 + x566 * x91
    x1064 = x71 * (x106 * x1063 + x72 * x812)
    x1065 = x1064 + x22 * x982
    x1066 = x1006 * x21 + x1065
    x1067 = x578 * x91
    x1068 = x1067 + x112 * x806
    x1069 = x71 * (x106 * x1068 + x72 * x818)
    x1070 = x1069 + x22 * x985
    x1071 = x1009 * x21 + x1070
    x1072 = x123 * x806 + x483
    x1073 = x71 * (x106 * x1072 + x72 * x823)
    x1074 = x1073 + x22 * x988
    x1075 = x1012 * x21 + x1074
    x1076 = x71 * (x112 * x812 + x588)
    x1077 = x1076 + x22 * x990
    x1078 = x1014 * x21 + x1077
    x1079 = x71 * (x112 * x818 + x597)
    x1080 = x1079 + x22 * x992
    x1081 = x1016 * x21 + x1080
    x1082 = x71 * (x112 * x823 + x607)
    x1083 = x1082 + x22 * x994
    x1084 = x1018 * x21 + x1083
    x1085 = x71 * (x123 * x823 + x146 * x443)
    x1086 = x1085 + x22 * x996
    x1087 = x1020 * x21 + x1086
    x1088 = x71 * (x72 * x852 + x850 * x947)
    x1089 = x1088 + x22 * x998
    x1090 = x1089 + x22 * x999
    x1091 = x71 * (x72 * x860 + x859 * x951)
    x1092 = x1000 * x22 + x1091
    x1093 = x1001 * x22 + x1092
    x1094 = x71 * (x72 * x868 + x867 * x951)
    x1095 = x1002 * x22 + x1094
    x1096 = x1003 * x22 + x1095
    x1097 = x112 * x859 + x670
    x1098 = x71 * (x106 * x1097 + x72 * x873)
    x1099 = x1005 * x22 + x1098
    x1100 = x1006 * x22 + x1099
    x1101 = x112 * x867 + x681
    x1102 = x71 * (x106 * x1101 + x72 * x879)
    x1103 = x1008 * x22 + x1102
    x1104 = x1009 * x22 + x1103
    x1105 = x1067 + x123 * x867
    x1106 = x71 * (x106 * x1105 + x72 * x885)
    x1107 = x1011 * x22 + x1106
    x1108 = x1012 * x22 + x1107
    x1109 = x71 * (x112 * x873 + x133 * x649)
    x1110 = x1013 * x22 + x1109
    x1111 = x1014 * x22 + x1110
    x1112 = x71 * (x112 * x879 + x619 * x678)
    x1113 = x1015 * x22 + x1112
    x1114 = x1016 * x22 + x1113
    x1115 = x71 * (x106 * x701 + x112 * x885)
    x1116 = x1017 * x22 + x1115
    x1117 = x1018 * x22 + x1116
    x1118 = x71 * (x123 * x885 + x607)
    x1119 = x1019 * x22 + x1118
    x1120 = x1020 * x22 + x1119
    x1121 = x171 * x733 + 3.0 * x433 - x730 * x9
    x1122 = x1121 * x6
    x1123 = x171 * x729 + 3.0 * x454 - x455 * x735
    x1124 = -x101 * x1123 + x1121 * x5
    x1125 = x1124 * x4
    x1126 = (
        x1021 * x21
        + x1022 * x21
        + x71 * (x1122 * x947 + x72**2 * (2.0 * x1122 + x1125))
    )
    x1127 = x1121 * x9
    x1128 = 4.0 * x740
    x1129 = x1127 + x1128
    x1130 = x106 * x1129
    x1131 = x1124 * x9
    x1132 = 4.0 * x738
    x1133 = x1131 + x1132
    x1134 = x1024 * x21 + x1025 * x21 + x71 * (x1129 * x951 + x72 * (x1130 + x1133 * x72))
    x1135 = x1122 * x123
    x1136 = (
        x1027 * x21 + x1028 * x21 + x71 * (x1122 * x954 + x72 * (x1125 * x123 + x1135))
    )
    x1137 = x112 * x1129 + x753 * x78
    x1138 = x106 * x1137
    x1139 = x112 * x1133 + x750 * x78
    x1140 = x1031 * x21 + x1032 * x21 + x71 * (x1138 + x1139 * x72)
    x1141 = x123 * (x1127 + x1128)
    x1142 = x106 * x1141
    x1143 = x123 * (x1131 + x1132)
    x1144 = x1035 * x21 + x1036 * x21 + x71 * (x1142 + x1143 * x72)
    x1145 = x1122 * x146
    x1146 = x1039 * x21 + x1040 * x21 + x71 * (x1125 * x146 + x1145)
    x1147 = x1042 * x21 + x1043 * x21 + x71 * (x112 * x1139 + x762 * x78)
    x1148 = x1045 * x21 + x1046 * x21 + x71 * (x112 * x1143 + x766 * x78)
    x1149 = x1048 * x21 + x1049 * x21 + x146 * x71 * (x1131 + x1132)
    x1150 = x1051 * x21 + x1052 * x21 + x1124 * x167
    x1151 = x171 * x783 + 2.0 * x539 - x780 * x9
    x1152 = x1151 * x6
    x1153 = x171 * x779 - x455 * x785 + 2.0 * x557
    x1154 = -x101 * x1153 + x1151 * x5
    x1155 = x71 * (x1152 * x947 + x72**2 * (2.0 * x1152 + x1154 * x4))
    x1156 = x1021 * x22 + x1055 * x21 + x1155
    x1157 = x1151 * x9 + 3.0 * x788
    x1158 = x1154 * x9 + x56 * x784
    x1159 = x71 * (x1157 * x951 + x72 * (x106 * x1157 + x1158 * x72))
    x1160 = x1024 * x22 + x1058 * x21 + x1159
    x1161 = x1151 * x12 + x740
    x1162 = x1154 * x12 + x738
    x1163 = x71 * (x1161 * x951 + x72 * (x106 * x1161 + x1162 * x72))
    x1164 = x1027 * x22 + x1061 * x21 + x1163
    x1165 = x112 * x1157 + x798 * x84
    x1166 = x112 * x1158 + x796 * x84
    x1167 = x71 * (x106 * x1165 + x1166 * x72)
    x1168 = x1031 * x22 + x1065 * x21 + x1167
    x1169 = x112 * x1161 + x806 * x84
    x1170 = x112 * x1162 + x804 * x84
    x1171 = x71 * (x106 * x1169 + x1170 * x72)
    x1172 = x1035 * x22 + x1070 * x21 + x1171
    x1173 = x1161 * x123 + x757
    x1174 = x123 * (x1162 + x738)
    x1175 = x71 * (x106 * x1173 + x1174 * x72)
    x1176 = x1039 * x22 + x1074 * x21 + x1175
    x1177 = x71 * (x112 * x1166 + x812 * x84)
    x1178 = x1042 * x22 + x1077 * x21 + x1177
    x1179 = x71 * (x112 * x1170 + x818 * x84)
    x1180 = x1045 * x22 + x1080 * x21 + x1179
    x1181 = x71 * (x112 * x1174 + x823 * x84)
    x1182 = x1048 * x22 + x1083 * x21 + x1181
    x1183 = x71 * (x1174 * x123 + x146 * x738)
    x1184 = x1051 * x22 + x1086 * x21 + x1183
    x1185 = x171 * x845 + x639 - x842 * x9
    x1186 = x1185 * x6
    x1187 = x171 * x841 - x455 * x847 + x660
    x1188 = -x101 * x1187 + x1185 * x5
    x1189 = x71 * (x1186 * x947 + x72**2 * (2.0 * x1186 + x1188 * x4))
    x1190 = x1054 * x22 + x1189
    x1191 = x1055 * x22 + x1190
    x1192 = x1185 * x9 + 2.0 * x850
    x1193 = x1188 * x9 + x849
    x1194 = x71 * (x1192 * x951 + x72 * (x106 * x1192 + x1193 * x72))
    x1195 = x1057 * x22 + x1194
    x1196 = x1058 * x22 + x1195
    x1197 = x1185 * x12 + 2.0 * x788
    x1198 = x1188 * x12 + x787
    x1199 = x71 * (x1197 * x951 + x72 * (x106 * x1197 + x1198 * x72))
    x1200 = x1060 * x22 + x1199
    x1201 = x1061 * x22 + x1200
    x1202 = x112 * x1192 + x859 * x91
    x1203 = x112 * x1193 + x858
    x1204 = x71 * (x106 * x1202 + x1203 * x72)
    x1205 = x1064 * x22 + x1204
    x1206 = x1065 * x22 + x1205
    x1207 = x112 * x1197 + x867 * x91
    x1208 = x112 * x1198 + x866
    x1209 = x71 * (x106 * x1207 + x1208 * x72)
    x1210 = x1069 * x22 + x1209
    x1211 = x1070 * x22 + x1210
    x1212 = x1197 * x123 + x806 * x91
    x1213 = x1198 * x123 + x805
    x1214 = x71 * (x106 * x1212 + x1213 * x72)
    x1215 = x1073 * x22 + x1214
    x1216 = x1074 * x22 + x1215
    x1217 = x71 * (x112 * x1203 + x874)
    x1218 = x1076 * x22 + x1217
    x1219 = x1077 * x22 + x1218
    x1220 = x71 * (x112 * x1208 + x880)
    x1221 = x1079 * x22 + x1220
    x1222 = x1080 * x22 + x1221
    x1223 = x71 * (x112 * x1213 + x886)
    x1224 = x1082 * x22 + x1223
    x1225 = x1083 * x22 + x1224
    x1226 = x71 * (x1213 * x123 + x824)
    x1227 = x1085 * x22 + x1226
    x1228 = x1086 * x22 + x1227
    x1229 = x171 * x906 - x9 * x903
    x1230 = x1229 * x6
    x1231 = x171 * x902 - x455 * x908
    x1232 = -x101 * x1231 + x1229 * x5
    x1233 = x1088 * x22 + x71 * (x1230 * x947 + x72**2 * (2.0 * x1230 + x1232 * x4))
    x1234 = x1089 * x22 + x1233
    x1235 = x1229 * x9 + x913
    x1236 = x1232 * x9 + x911
    x1237 = x1091 * x22 + x71 * (x1235 * x951 + x72 * (x106 * x1235 + x1236 * x72))
    x1238 = x1092 * x22 + x1237
    x1239 = x12 * x1229 + 3.0 * x850
    x1240 = x12 * x1232 + x56 * x846
    x1241 = x1094 * x22 + x71 * (x1239 * x951 + x72 * (x106 * x1239 + x1240 * x72))
    x1242 = x1095 * x22 + x1241
    x1243 = x112 * x1235 + x919
    x1244 = x112 * (x1236 + x911)
    x1245 = x1098 * x22 + x71 * (x106 * x1243 + x1244 * x72)
    x1246 = x1099 * x22 + x1245
    x1247 = x112 * x1239 + x926
    x1248 = x106 * x924 + x112 * x1240
    x1249 = x1102 * x22 + x71 * (x106 * x1247 + x1248 * x72)
    x1250 = x1103 * x22 + x1249
    x1251 = x123 * x1239 + x84 * x867
    x1252 = x123 * x1240 + x84 * x865
    x1253 = x1106 * x22 + x71 * (x106 * x1251 + x1252 * x72)
    x1254 = x1107 * x22 + x1253
    x1255 = x1109 * x22 + x71 * (x112 * x1244 + x133 * x911)
    x1256 = x1110 * x22 + x1255
    x1257 = x1112 * x22 + x71 * (x112 * x1248 + x619 * x924)
    x1258 = x1113 * x22 + x1257
    x1259 = x1115 * x22 + x71 * (x106 * x935 + x112 * x1252)
    x1260 = x1116 * x22 + x1259
    x1261 = x1118 * x22 + x71 * (x123 * x1252 + x84 * x885)
    x1262 = x1119 * x22 + x1261
    x1263 = x0 * x350 + x347
    x1264 = x343 * x947 + x349 * x72
    x1265 = x0 * x367 + x363
    x1266 = x343 * x390 + x366 * x72
    x1267 = x0 * x381 + x376
    x1268 = x378 * x951 + x380 * x72
    x1269 = x0 * x387 + x385
    x1270 = x133 * x343
    x1271 = x1270 + x133 * x344
    x1272 = x0 * x395 + x392
    x1273 = x378 * x619
    x1274 = x1273 + x373 * x390
    x1275 = x0 * x404 + x400
    x1276 = x123 * x378 + x130
    x1277 = x106 * x1276
    x1278 = x1277 + x402 * x72
    x1279 = x0 * x410 + x408
    x1280 = x152 * x317
    x1281 = x0 * x416 + x414
    x1282 = x157 * x373
    x1283 = x0 * x421 + x419
    x1284 = x138 * x402
    x1285 = x0 * x426 + x424
    x1286 = x123 * x402 + x971
    x1287 = x21 * x350 + x554
    x1288 = x1264 * x214 + x998
    x1289 = x21 * x367 + x568
    x1290 = x1000 + x1266 * x214
    x1291 = x21 * x381 + x580
    x1292 = x1002 + x1268 * x214
    x1293 = x21 * x387 + x589
    x1294 = x1005 + x1271 * x214
    x1295 = x21 * x395 + x598
    x1296 = x1008 + x1274 * x214
    x1297 = x21 * x404 + x608
    x1298 = x1011 + x1278 * x214
    x1299 = x21 * x410 + x614
    x1300 = x1013 + x1280 * x21
    x1301 = x21 * x416 + x620
    x1302 = x1015 + x1282 * x21
    x1303 = x21 * x421 + x625
    x1304 = x1017 + x1284 * x21
    x1305 = x21 * x426 + x630
    x1306 = x1019 + x1286 * x214
    x1307 = x71 * (x652 * x947 + x656 * x72)
    x1308 = x1264 * x351 + x1307
    x1309 = x71 * (x390 * x652 + x671 * x72)
    x1310 = x1266 * x351 + x1309
    x1311 = x71 * (x680 * x951 + x682 * x72)
    x1312 = x1268 * x351 + x1311
    x1313 = x133 * x652
    x1314 = x71 * (x1313 + x133 * x653)
    x1315 = x1271 * x351 + x1314
    x1316 = x619 * x680
    x1317 = x71 * (x1316 + x390 * x678)
    x1318 = x1274 * x351 + x1317
    x1319 = x123 * x680 + x378 * x91
    x1320 = x106 * x1319
    x1321 = x71 * (x1320 + x701 * x72)
    x1322 = x1278 * x351 + x1321
    x1323 = x152 * x642
    x1324 = x1280 * x22 + x1323
    x1325 = x157 * x678
    x1326 = x1282 * x22 + x1325
    x1327 = x138 * x701
    x1328 = x1284 * x22 + x1327
    x1329 = x71 * (x123 * x701 + x403)
    x1330 = x1286 * x351 + x1329
    x1331 = x1054 + x21 * x998
    x1332 = x1288 * x21 + x1331
    x1333 = x21 * x554 + x791
    x1334 = x1000 * x21 + x1057
    x1335 = x1290 * x21 + x1334
    x1336 = x21 * x568 + x800
    x1337 = x1002 * x21 + x1060
    x1338 = x1292 * x21 + x1337
    x1339 = x21 * x580 + x808
    x1340 = x1005 * x21 + x1064
    x1341 = x1294 * x21 + x1340
    x1342 = x21 * x589 + x813
    x1343 = x1008 * x21 + x1069
    x1344 = x1296 * x21 + x1343
    x1345 = x21 * x598 + x819
    x1346 = x1011 * x21 + x1073
    x1347 = x1298 * x21 + x1346
    x1348 = x21 * x608 + x825
    x1349 = x1013 * x21 + x1076
    x1350 = x1300 * x21 + x1349
    x1351 = x21 * x614 + x828
    x1352 = x1015 * x21 + x1079
    x1353 = x1302 * x21 + x1352
    x1354 = x21 * x620 + x831
    x1355 = x1017 * x21 + x1082
    x1356 = x1304 * x21 + x1355
    x1357 = x21 * x625 + x835
    x1358 = x1019 * x21 + x1085
    x1359 = x1306 * x21 + x1358
    x1360 = x21 * x630 + x838
    x1361 = x1089 + x1308 * x21
    x1362 = x1092 + x1310 * x21
    x1363 = x1095 + x1312 * x21
    x1364 = x1099 + x1315 * x21
    x1365 = x1103 + x1318 * x21
    x1366 = x1107 + x1322 * x21
    x1367 = x1110 + x1324 * x21
    x1368 = x1113 + x1326 * x21
    x1369 = x1116 + x1328 * x21
    x1370 = x1119 + x1330 * x21
    x1371 = x71 * (x72 * x916 + x913 * x947)
    x1372 = x1307 * x22 + x1371
    x1373 = x1308 * x22 + x1372
    x1374 = x71 * (x390 * x913 + x72 * x920)
    x1375 = x1309 * x22 + x1374
    x1376 = x1310 * x22 + x1375
    x1377 = x71 * (x72 * x927 + x925 * x951)
    x1378 = x1311 * x22 + x1377
    x1379 = x1312 * x22 + x1378
    x1380 = x133 * x913
    x1381 = x71 * (x133 * x914 + x1380)
    x1382 = x1314 * x22 + x1381
    x1383 = x1315 * x22 + x1382
    x1384 = x619 * x925
    x1385 = x71 * (x1384 + x390 * x924)
    x1386 = x1317 * x22 + x1385
    x1387 = x1318 * x22 + x1386
    x1388 = x123 * x925 + x680 * x84
    x1389 = x106 * x1388
    x1390 = x71 * (x1389 + x72 * x935)
    x1391 = x1321 * x22 + x1390
    x1392 = x1322 * x22 + x1391
    x1393 = x152 * x907
    x1394 = x1323 * x22 + x1393
    x1395 = x1324 * x22 + x1394
    x1396 = x157 * x924
    x1397 = x1325 * x22 + x1396
    x1398 = x1326 * x22 + x1397
    x1399 = x138 * x935
    x1400 = x1327 * x22 + x1399
    x1401 = x1328 * x22 + x1400
    x1402 = x71 * (x123 * x935 + x701 * x84)
    x1403 = x1329 * x22 + x1402
    x1404 = x1330 * x22 + x1403
    x1405 = x1054 * x21 + x1155 + x1331 * x21
    x1406 = x1057 * x21 + x1159 + x1334 * x21
    x1407 = x1060 * x21 + x1163 + x1337 * x21
    x1408 = x1064 * x21 + x1167 + x1340 * x21
    x1409 = x1069 * x21 + x1171 + x1343 * x21
    x1410 = x1073 * x21 + x1175 + x1346 * x21
    x1411 = x1076 * x21 + x1177 + x1349 * x21
    x1412 = x1079 * x21 + x1179 + x1352 * x21
    x1413 = x1082 * x21 + x1181 + x1355 * x21
    x1414 = x1085 * x21 + x1183 + x1358 * x21
    x1415 = x1089 * x21 + x1190
    x1416 = x1092 * x21 + x1195
    x1417 = x1095 * x21 + x1200
    x1418 = x1099 * x21 + x1205
    x1419 = x1103 * x21 + x1210
    x1420 = x1107 * x21 + x1215
    x1421 = x1110 * x21 + x1218
    x1422 = x1113 * x21 + x1221
    x1423 = x1116 * x21 + x1224
    x1424 = x1119 * x21 + x1227
    x1425 = -x12 * x903 + x308 * x906 + 3.0 * x639
    x1426 = x1425 * x6
    x1427 = x308 * x902 + 3.0 * x660 - x661 * x908
    x1428 = -x101 * x1427 + x1425 * x5
    x1429 = x1428 * x4
    x1430 = (
        x1371 * x22
        + x1372 * x22
        + x71 * (x1426 * x947 + x72**2 * (2.0 * x1426 + x1429))
    )
    x1431 = x112 * x1426
    x1432 = (
        x1374 * x22 + x1375 * x22 + x71 * (x1426 * x390 + x72 * (x112 * x1429 + x1431))
    )
    x1433 = x12 * x1425 + 4.0 * x913
    x1434 = x106 * x1433
    x1435 = x12 * x1428 + 4.0 * x911
    x1436 = x1377 * x22 + x1378 * x22 + x71 * (x1433 * x951 + x72 * (x1434 + x1435 * x72))
    x1437 = x133 * x1426
    x1438 = x1381 * x22 + x1382 * x22 + x71 * (x133 * x1429 + x1437)
    x1439 = x1433 * x619
    x1440 = x1385 * x22 + x1386 * x22 + x71 * (x1435 * x390 + x1439)
    x1441 = x123 * x1433 + x78 * x925
    x1442 = x106 * x1441
    x1443 = x123 * x1435 + x78 * x924
    x1444 = x1390 * x22 + x1391 * x22 + x71 * (x1442 + x1443 * x72)
    x1445 = x1393 * x22 + x1394 * x22 + x1428 * x152
    x1446 = x1396 * x22 + x1397 * x22 + x1435 * x157
    x1447 = x138 * x1443 + x1399 * x22 + x1400 * x22
    x1448 = x1402 * x22 + x1403 * x22 + x71 * (x123 * x1443 + x78 * x935)
    x1449 = x0 * x975 + x451
    x1450 = x151 * x4**3
    x1451 = x0 * x434
    x1452 = x0 * x977 + x473
    x1453 = x151 * x7
    x1454 = x1453 * x471
    x1455 = x0 * x979 + x485
    x1456 = x12 * x1453
    x1457 = x0 * x982 + x493
    x1458 = x0 * x950
    x1459 = x0 * x985 + x502
    x1460 = x0 * x988 + x509
    x1461 = x162 * x4
    x1462 = x0 * x990 + x515
    x1463 = x112 * x981 + x91 * x957
    x1464 = x0 * x992 + x520
    x1465 = x112 * x984 + x91 * x960
    x1466 = x0 * x994 + x525
    x1467 = x146 * (x469 + x470)
    x1468 = x0 * x996 + x530
    x1469 = x1450 * x733
    x1470 = x21 * x434
    x1471 = x1450 * x1470 + x1469
    x1472 = x1453 * x753
    x1473 = x1454 * x21 + x1472
    x1474 = x1456 * x733
    x1475 = x1456 * x1470 + x1474
    x1476 = x1030 * x950
    x1477 = x21 * x950
    x1478 = x1476 + x1477 * x981
    x1479 = x1034 * x950
    x1480 = x1477 * x984 + x1479
    x1481 = x1461 * x733
    x1482 = x1461 * x1470 + x1481
    x1483 = x71 * (x1030 * x112 + x84 * x981)
    x1484 = x1463 * x214 + x1483
    x1485 = x71 * (x1034 * x112 + x84 * x984)
    x1486 = x1465 * x214 + x1485
    x1487 = x146 * x71 * (x751 + x752)
    x1488 = x1467 * x214 + x1487
    x1489 = x167 * x733
    x1490 = x1470 * x167 + x1489
    x1491 = x1450 * x783
    x1492 = x22 * x434
    x1493 = x1450 * x1492 + x1491
    x1494 = x1453 * x798
    x1495 = x1454 * x22 + x1494
    x1496 = x1453 * x806
    x1497 = x1456 * x1492 + x1496
    x1498 = x1063 * x950
    x1499 = x22 * x950
    x1500 = x1498 + x1499 * x981
    x1501 = x1068 * x950
    x1502 = x1499 * x984 + x1501
    x1503 = x1072 * x950
    x1504 = x1461 * x1492 + x1503
    x1505 = x71 * (x1004 * x91 + x1063 * x112)
    x1506 = x1463 * x351 + x1505
    x1507 = x71 * (x1007 * x91 + x1068 * x112)
    x1508 = x1465 * x351 + x1507
    x1509 = x1010 * x91
    x1510 = x71 * (x1072 * x112 + x1509)
    x1511 = x1467 * x351 + x1510
    x1512 = x71 * (x1072 * x123 + x987)
    x1513 = x1492 * x167 + x1512
    x1514 = x1121 * x1450
    x1515 = x1469 * x21 + x1514
    x1516 = x1471 * x21 + x1515
    x1517 = x1129 * x1453
    x1518 = x1472 * x21 + x1517
    x1519 = x1473 * x21 + x1518
    x1520 = x1121 * x1456
    x1521 = x1474 * x21 + x1520
    x1522 = x1475 * x21 + x1521
    x1523 = x1137 * x950
    x1524 = x1476 * x21 + x1523
    x1525 = x1478 * x21 + x1524
    x1526 = x1141 * x950
    x1527 = x1479 * x21 + x1526
    x1528 = x1480 * x21 + x1527
    x1529 = x1121 * x1461
    x1530 = x1481 * x21 + x1529
    x1531 = x1482 * x21 + x1530
    x1532 = x71 * (x1030 * x78 + x112 * x1137)
    x1533 = x1483 * x21 + x1532
    x1534 = x1484 * x21 + x1533
    x1535 = x71 * (x1034 * x78 + x112 * x1141)
    x1536 = x1485 * x21 + x1535
    x1537 = x1486 * x21 + x1536
    x1538 = x146 * x71 * (x1127 + x1128)
    x1539 = x1487 * x21 + x1538
    x1540 = x1488 * x21 + x1539
    x1541 = x1121 * x167
    x1542 = x1489 * x21 + x1541
    x1543 = x1490 * x21 + x1542
    x1544 = x1151 * x1450
    x1545 = x1469 * x22 + x1544
    x1546 = x1493 * x21 + x1545
    x1547 = x1157 * x1453
    x1548 = x1472 * x22 + x1547
    x1549 = x1495 * x21 + x1548
    x1550 = x1161 * x1453
    x1551 = x1474 * x22 + x1550
    x1552 = x1497 * x21 + x1551
    x1553 = x1165 * x950
    x1554 = x1476 * x22 + x1553
    x1555 = x1500 * x21 + x1554
    x1556 = x1169 * x950
    x1557 = x1479 * x22 + x1556
    x1558 = x1502 * x21 + x1557
    x1559 = x1173 * x950
    x1560 = x1481 * x22 + x1559
    x1561 = x1504 * x21 + x1560
    x1562 = x71 * (x1063 * x84 + x112 * x1165)
    x1563 = x1483 * x22 + x1562
    x1564 = x1506 * x21 + x1563
    x1565 = x71 * (x1068 * x84 + x112 * x1169)
    x1566 = x1485 * x22 + x1565
    x1567 = x1508 * x21 + x1566
    x1568 = x71 * (x1072 * x84 + x112 * x1173)
    x1569 = x1487 * x22 + x1568
    x1570 = x1511 * x21 + x1569
    x1571 = x71 * (x1038 + x1173 * x123)
    x1572 = x1489 * x22 + x1571
    x1573 = x1513 * x21 + x1572
    x1574 = x1185 * x1450
    x1575 = x1491 * x22 + x1574
    x1576 = x1493 * x22 + x1575
    x1577 = x1192 * x1453
    x1578 = x1494 * x22 + x1577
    x1579 = x1495 * x22 + x1578
    x1580 = x1197 * x1453
    x1581 = x1496 * x22 + x1580
    x1582 = x1497 * x22 + x1581
    x1583 = x1202 * x950
    x1584 = x1498 * x22 + x1583
    x1585 = x1500 * x22 + x1584
    x1586 = x1207 * x950
    x1587 = x1501 * x22 + x1586
    x1588 = x1502 * x22 + x1587
    x1589 = x1212 * x950
    x1590 = x1503 * x22 + x1589
    x1591 = x1504 * x22 + x1590
    x1592 = x71 * (x1097 * x91 + x112 * x1202)
    x1593 = x1505 * x22 + x1592
    x1594 = x1506 * x22 + x1593
    x1595 = x71 * (x1101 * x91 + x112 * x1207)
    x1596 = x1507 * x22 + x1595
    x1597 = x1508 * x22 + x1596
    x1598 = x71 * (x1105 * x91 + x112 * x1212)
    x1599 = x1510 * x22 + x1598
    x1600 = x1511 * x22 + x1599
    x1601 = x71 * (x1072 * x91 + x1212 * x123)
    x1602 = x1512 * x22 + x1601
    x1603 = x1513 * x22 + x1602
    x1604 = x1121 * x171 - x1123 * x455 + 4.0 * x732
    x1605 = x1604 * x9
    x1606 = 5.0 * x1122
    x1607 = x1605 + x1606
    x1608 = x112 * x1607 + 5.0 * x1130
    x1609 = x123 * (x1605 + x1606)
    x1610 = x1151 * x171 - x1153 * x455 + 3.0 * x782
    x1611 = x1450 * x1610
    x1612 = 4.0 * x1152 + x1610 * x9
    x1613 = x1453 * x1612
    x1614 = x1122 + x12 * x1610
    x1615 = x1453 * x1614
    x1616 = x112 * x1612 + x1157 * x78
    x1617 = x1616 * x950
    x1618 = x112 * x1614 + x1161 * x78
    x1619 = x1618 * x950
    x1620 = x1135 + x123 * x1614
    x1621 = x1620 * x950
    x1622 = x71 * (x112 * x1616 + x1165 * x78)
    x1623 = x71 * (x112 * x1618 + x1169 * x78)
    x1624 = x71 * (x112 * x1620 + x1173 * x78)
    x1625 = x71 * (x1145 + x123 * x1620)
    x1626 = x1185 * x171 - x1187 * x455 + 2.0 * x844
    x1627 = x1450 * x1626
    x1628 = x1544 * x22 + x1627
    x1629 = 3.0 * x1186
    x1630 = x1626 * x9 + x1629
    x1631 = x1453 * x1630
    x1632 = x1547 * x22 + x1631
    x1633 = 2.0 * x1152 + x12 * x1626
    x1634 = x1453 * x1633
    x1635 = x1550 * x22 + x1634
    x1636 = x112 * x1630 + x1192 * x84
    x1637 = x1636 * x950
    x1638 = x1553 * x22 + x1637
    x1639 = x1197 * x84
    x1640 = x112 * x1633 + x1639
    x1641 = x1640 * x950
    x1642 = x1556 * x22 + x1641
    x1643 = x1161 * x91 + x123 * x1633
    x1644 = x1643 * x950
    x1645 = x1559 * x22 + x1644
    x1646 = x71 * (x112 * x1636 + x1202 * x84)
    x1647 = x1562 * x22 + x1646
    x1648 = x71 * (x112 * x1640 + x1207 * x84)
    x1649 = x1565 * x22 + x1648
    x1650 = x1212 * x84
    x1651 = x71 * (x112 * x1643 + x1650)
    x1652 = x1568 * x22 + x1651
    x1653 = x71 * (x1173 * x91 + x123 * x1643)
    x1654 = x1571 * x22 + x1653
    x1655 = x1229 * x171 - x1231 * x455 + x905
    x1656 = x1450 * x1655 + x1574 * x22
    x1657 = x1575 * x22 + x1656
    x1658 = 2.0 * x1230 + x1655 * x9
    x1659 = x1453 * x1658 + x1577 * x22
    x1660 = x1578 * x22 + x1659
    x1661 = x12 * x1655 + x1629
    x1662 = x1453 * x1661 + x1580 * x22
    x1663 = x1581 * x22 + x1662
    x1664 = x112 * x1658 + x1235 * x91
    x1665 = x1583 * x22 + x1664 * x950
    x1666 = x1584 * x22 + x1665
    x1667 = x112 * x1661 + x1239 * x91
    x1668 = x1586 * x22 + x1667 * x950
    x1669 = x1587 * x22 + x1668
    x1670 = x123 * x1661 + x1639
    x1671 = x1589 * x22 + x1670 * x950
    x1672 = x1590 * x22 + x1671
    x1673 = x1592 * x22 + x71 * (x112 * x1664 + x1243 * x91)
    x1674 = x1593 * x22 + x1673
    x1675 = x1595 * x22 + x71 * (x112 * x1667 + x1247 * x91)
    x1676 = x1596 * x22 + x1675
    x1677 = x1598 * x22 + x71 * (x112 * x1670 + x1251 * x91)
    x1678 = x1599 * x22 + x1677
    x1679 = x1601 * x22 + x71 * (x123 * x1670 + x1650)
    x1680 = x1602 * x22 + x1679
    x1681 = x0 * x998 + x554
    x1682 = x1450 * x540
    x1683 = x0 * x1000 + x568
    x1684 = x0 * x1453
    x1685 = x0 * x1002 + x580
    x1686 = x0 * x1005 + x589
    x1687 = x0 * x1008 + x598
    x1688 = x0 * x1011 + x608
    x1689 = x0 * x1013 + x614
    x1690 = x1004 * x112 + x1270
    x1691 = x0 * x1015 + x620
    x1692 = x1007 * x112 + x1273
    x1693 = x0 * x1017 + x625
    x1694 = x1010 * x112 + x1277
    x1695 = x0 * x1019 + x630
    x1696 = x1010 * x123 + x964
    x1697 = x1491 + x1682 * x21
    x1698 = x1453 * x21
    x1699 = x1494 + x1698 * x566
    x1700 = x1496 + x1698 * x578
    x1701 = x1004 * x1477 + x1498
    x1702 = x1007 * x1477 + x1501
    x1703 = x1010 * x1477 + x1503
    x1704 = x1505 + x1690 * x214
    x1705 = x1507 + x1692 * x214
    x1706 = x1510 + x1694 * x214
    x1707 = x1512 + x1696 * x214
    x1708 = x1450 * x845
    x1709 = x1682 * x22 + x1708
    x1710 = x1453 * x859
    x1711 = x1453 * x22
    x1712 = x1710 + x1711 * x566
    x1713 = x1453 * x867
    x1714 = x1711 * x578 + x1713
    x1715 = x1097 * x950
    x1716 = x1004 * x1499 + x1715
    x1717 = x1101 * x950
    x1718 = x1007 * x1499 + x1717
    x1719 = x1105 * x950
    x1720 = x1010 * x1499 + x1719
    x1721 = x71 * (x1097 * x112 + x1313)
    x1722 = x1690 * x351 + x1721
    x1723 = x71 * (x1101 * x112 + x1316)
    x1724 = x1692 * x351 + x1723
    x1725 = x71 * (x1105 * x112 + x1320)
    x1726 = x1694 * x351 + x1725
    x1727 = x71 * (x1105 * x123 + x1509)
    x1728 = x1696 * x351 + x1727
    x1729 = x1491 * x21 + x1544
    x1730 = x1697 * x21 + x1729
    x1731 = x1494 * x21 + x1547
    x1732 = x1699 * x21 + x1731
    x1733 = x1496 * x21 + x1550
    x1734 = x1700 * x21 + x1733
    x1735 = x1498 * x21 + x1553
    x1736 = x1701 * x21 + x1735
    x1737 = x1501 * x21 + x1556
    x1738 = x1702 * x21 + x1737
    x1739 = x1503 * x21 + x1559
    x1740 = x1703 * x21 + x1739
    x1741 = x1505 * x21 + x1562
    x1742 = x1704 * x21 + x1741
    x1743 = x1507 * x21 + x1565
    x1744 = x1705 * x21 + x1743
    x1745 = x1510 * x21 + x1568
    x1746 = x1706 * x21 + x1745
    x1747 = x1512 * x21 + x1571
    x1748 = x1707 * x21 + x1747
    x1749 = x1575 + x1709 * x21
    x1750 = x1578 + x1712 * x21
    x1751 = x1581 + x1714 * x21
    x1752 = x1584 + x1716 * x21
    x1753 = x1587 + x1718 * x21
    x1754 = x1590 + x1720 * x21
    x1755 = x1593 + x1722 * x21
    x1756 = x1596 + x1724 * x21
    x1757 = x1599 + x1726 * x21
    x1758 = x1602 + x1728 * x21
    x1759 = x1229 * x1450
    x1760 = x1708 * x22 + x1759
    x1761 = x1709 * x22 + x1760
    x1762 = x1235 * x1453
    x1763 = x1710 * x22 + x1762
    x1764 = x1712 * x22 + x1763
    x1765 = x1239 * x1453
    x1766 = x1713 * x22 + x1765
    x1767 = x1714 * x22 + x1766
    x1768 = x1243 * x950
    x1769 = x1715 * x22 + x1768
    x1770 = x1716 * x22 + x1769
    x1771 = x1247 * x950
    x1772 = x1717 * x22 + x1771
    x1773 = x1718 * x22 + x1772
    x1774 = x1251 * x950
    x1775 = x1719 * x22 + x1774
    x1776 = x1720 * x22 + x1775
    x1777 = x71 * (x112 * x1243 + x1380)
    x1778 = x1721 * x22 + x1777
    x1779 = x1722 * x22 + x1778
    x1780 = x71 * (x112 * x1247 + x1384)
    x1781 = x1723 * x22 + x1780
    x1782 = x1724 * x22 + x1781
    x1783 = x71 * (x112 * x1251 + x1389)
    x1784 = x1725 * x22 + x1783
    x1785 = x1726 * x22 + x1784
    x1786 = x71 * (x1105 * x84 + x123 * x1251)
    x1787 = x1727 * x22 + x1786
    x1788 = x1728 * x22 + x1787
    x1789 = x1425 * x171 - x1427 * x455
    x1790 = x1450 * x1789 + x1759 * x22 + x1760 * x22
    x1791 = x1426 + x1789 * x9
    x1792 = x1453 * x1791 + x1762 * x22 + x1763 * x22
    x1793 = x12 * x1789 + 4.0 * x1230
    x1794 = x1453 * x1793 + x1765 * x22 + x1766 * x22
    x1795 = x112 * x1791 + x1431
    x1796 = x1768 * x22 + x1769 * x22 + x1795 * x950
    x1797 = x112 * x1793 + x1434
    x1798 = x1771 * x22 + x1772 * x22 + x1797 * x950
    x1799 = x123 * x1793 + x1239 * x78
    x1800 = x1774 * x22 + x1775 * x22 + x1799 * x950
    x1801 = x1777 * x22 + x1778 * x22 + x71 * (x112 * x1795 + x1437)
    x1802 = x1780 * x22 + x1781 * x22 + x71 * (x112 * x1797 + x1439)
    x1803 = x1783 * x22 + x1784 * x22 + x71 * (x112 * x1799 + x1442)
    x1804 = x1786 * x22 + x1787 * x22 + x71 * (x123 * x1799 + x1251 * x78)
    x1805 = x0 * x1307 + x657
    x1806 = x0 * x640
    x1807 = x0 * x1309 + x672
    x1808 = x640 * x9
    x1809 = x0 * x1311 + x683
    x1810 = x0 * x1314 + x690
    x1811 = x157 * x4
    x1812 = x0 * x1317 + x695
    x1813 = x151 * x4 * x9
    x1814 = x1813 * x680
    x1815 = x0 * x1321 + x702
    x1816 = x0 * x1323 + x709
    x1817 = x0 * x1325 + x714
    x1818 = x157 * x680
    x1819 = x0 * x1327 + x719
    x1820 = x1319 * x138
    x1821 = x0 * x1329 + x724
    x1822 = x123 * x1319 + x1276 * x91
    x1823 = x1088 + x1307 * x21
    x1824 = x21 * x640
    x1825 = x1450 * x1824 + x1708
    x1826 = x1091 + x1309 * x21
    x1827 = x1698 * x1808 + x1710
    x1828 = x1094 + x1311 * x21
    x1829 = x1698 * x680 + x1713
    x1830 = x1098 + x1314 * x21
    x1831 = x1715 + x1811 * x1824
    x1832 = x1102 + x1317 * x21
    x1833 = x1717 + x1814 * x21
    x1834 = x1106 + x1321 * x21
    x1835 = x1319 * x1477 + x1719
    x1836 = x1109 + x1323 * x21
    x1837 = x152 * x1824 + x1721
    x1838 = x1112 + x1325 * x21
    x1839 = x1723 + x1818 * x21
    x1840 = x1115 + x1327 * x21
    x1841 = x1725 + x1820 * x21
    x1842 = x1118 + x1329 * x21
    x1843 = x1727 + x1822 * x214
    x1844 = x1450 * x906
    x1845 = x22 * x640
    x1846 = x1450 * x1845 + x1844
    x1847 = x1453 * x9
    x1848 = x1711 * x1808 + x1847 * x906
    x1849 = x1453 * x925
    x1850 = x1711 * x680 + x1849
    x1851 = x1811 * x906
    x1852 = x1811 * x1845 + x1851
    x1853 = x1813 * x925
    x1854 = x1814 * x22 + x1853
    x1855 = x1388 * x950
    x1856 = x1319 * x1499 + x1855
    x1857 = x152 * x906
    x1858 = x152 * x1845 + x1857
    x1859 = x157 * x925
    x1860 = x1818 * x22 + x1859
    x1861 = x138 * x1388
    x1862 = x1820 * x22 + x1861
    x1863 = x71 * (x123 * x1388 + x1319 * x84)
    x1864 = x1822 * x351 + x1863
    x1865 = x1574 + x1708 * x21
    x1866 = x1825 * x21 + x1865
    x1867 = x1577 + x1710 * x21
    x1868 = x1827 * x21 + x1867
    x1869 = x1580 + x1713 * x21
    x1870 = x1829 * x21 + x1869
    x1871 = x1583 + x1715 * x21
    x1872 = x1831 * x21 + x1871
    x1873 = x1586 + x1717 * x21
    x1874 = x1833 * x21 + x1873
    x1875 = x1589 + x1719 * x21
    x1876 = x1835 * x21 + x1875
    x1877 = x1592 + x1721 * x21
    x1878 = x1837 * x21 + x1877
    x1879 = x1595 + x1723 * x21
    x1880 = x1839 * x21 + x1879
    x1881 = x1598 + x1725 * x21
    x1882 = x1841 * x21 + x1881
    x1883 = x1601 + x1727 * x21
    x1884 = x1843 * x21 + x1883
    x1885 = x1760 + x1846 * x21
    x1886 = x1763 + x1848 * x21
    x1887 = x1766 + x1850 * x21
    x1888 = x1769 + x1852 * x21
    x1889 = x1772 + x1854 * x21
    x1890 = x1775 + x1856 * x21
    x1891 = x1778 + x1858 * x21
    x1892 = x1781 + x1860 * x21
    x1893 = x1784 + x1862 * x21
    x1894 = x1787 + x1864 * x21
    x1895 = x1425 * x1450
    x1896 = x1844 * x22 + x1895
    x1897 = x1846 * x22 + x1896
    x1898 = x1711 * x9
    x1899 = x1425 * x1847 + x1898 * x906
    x1900 = x1848 * x22 + x1899
    x1901 = x1433 * x1453
    x1902 = x1849 * x22 + x1901
    x1903 = x1850 * x22 + x1902
    x1904 = x1425 * x1811
    x1905 = x1851 * x22 + x1904
    x1906 = x1852 * x22 + x1905
    x1907 = x1433 * x1813
    x1908 = x1853 * x22 + x1907
    x1909 = x1854 * x22 + x1908
    x1910 = x1441 * x950
    x1911 = x1855 * x22 + x1910
    x1912 = x1856 * x22 + x1911
    x1913 = x1425 * x152
    x1914 = x1857 * x22 + x1913
    x1915 = x1858 * x22 + x1914
    x1916 = x1433 * x157
    x1917 = x1859 * x22 + x1916
    x1918 = x1860 * x22 + x1917
    x1919 = x138 * x1441
    x1920 = x1861 * x22 + x1919
    x1921 = x1862 * x22 + x1920
    x1922 = x71 * (x123 * x1441 + x1388 * x78)
    x1923 = x1863 * x22 + x1922
    x1924 = x1864 * x22 + x1923
    x1925 = x1425 * x308 - x1427 * x661 + 4.0 * x905
    x1926 = x12 * x1925 + 5.0 * x1426
    x1927 = x123 * x1926 + 5.0 * x1434

    # 600 item(s)
    result[0, 0, 0] = numpy.sum(
        x111
        * (
            x0 * x86
            + x0 * x94
            + x0 * (x0 * (x93 + x96 * x97) + x94)
            + x71 * (x107 * x79 + x72 * (x107 * x70 + x72 * (x103 + x105)))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x122
        * (
            x0 * x115
            + x0 * x118
            + x0 * (x0 * (x117 + x120 * x97) + x118)
            + x71 * (x107 * x113 + x112 * x72 * (x103 + x105))
        )
    )
    result[0, 0, 2] = numpy.sum(
        x122
        * (
            x0 * x126
            + x0 * x129
            + x0 * (x0 * (x128 + x131 * x97) + x129)
            + x71 * (x107 * x124 + x123 * x72 * (x103 + x105))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x122
        * (
            x0 * x134
            + x0 * x136
            + x0 * (x0 * (x135 + x137 * x97) + x136)
            + x133 * x71 * (x103 + x105)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x145
        * (
            x0 * x140
            + x0 * x142
            + x0 * (x0 * (x141 + x143 * x97) + x142)
            + x139 * x71 * (x103 + x105)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x122
        * (
            x0 * x147
            + x0 * x149
            + x0 * (x0 * (x148 + x150 * x97) + x149)
            + x146 * x71 * (x103 + x105)
        )
    )
    result[0, 0, 6] = numpy.sum(
        x111
        * (x0 * x153 + x0 * x155 + x0 * (x0 * (x152 * x156 + x154) + x155) + x102 * x152)
    )
    result[0, 0, 7] = numpy.sum(
        x122
        * (x0 * x159 + x0 * x161 + x0 * (x0 * (x156 * x158 + x160) + x161) + x102 * x158)
    )
    result[0, 0, 8] = numpy.sum(
        x122
        * (x0 * x164 + x0 * x166 + x0 * (x0 * (x156 * x163 + x165) + x166) + x102 * x163)
    )
    result[0, 0, 9] = numpy.sum(
        x111
        * (x0 * x168 + x0 * x170 + x0 * (x0 * (x156 * x167 + x169) + x170) + x102 * x167)
    )
    result[0, 1, 0] = numpy.sum(
        x122 * (x0 * x211 + x0 * (x0 * x215 + x211) + x21 * x86 + x222)
    )
    result[0, 1, 1] = numpy.sum(
        x242 * (x0 * x233 + x0 * (x0 * x238 + x233) + x115 * x21 + x241)
    )
    result[0, 1, 2] = numpy.sum(
        x242 * (x0 * x247 + x0 * (x0 * x251 + x247) + x126 * x21 + x252)
    )
    result[0, 1, 3] = numpy.sum(
        x242 * (x0 * x256 + x0 * (x0 * x260 + x256) + x134 * x21 + x262)
    )
    result[0, 1, 4] = numpy.sum(
        x277 * (x0 * x268 + x0 * (x0 * x273 + x268) + x140 * x21 + x276)
    )
    result[0, 1, 5] = numpy.sum(
        x242 * (x0 * x279 + x0 * (x0 * x282 + x279) + x147 * x21 + x283)
    )
    result[0, 1, 6] = numpy.sum(
        x122 * (x0 * x285 + x0 * (x0 * x288 + x285) + x153 * x21 + x289)
    )
    result[0, 1, 7] = numpy.sum(
        x242 * (x0 * x291 + x0 * (x0 * x293 + x291) + x159 * x21 + x294)
    )
    result[0, 1, 8] = numpy.sum(
        x242 * (x0 * x297 + x0 * (x0 * x300 + x297) + x164 * x21 + x302)
    )
    result[0, 1, 9] = numpy.sum(
        x122 * (x0 * x304 + x0 * (x0 * x306 + x304) + x168 * x21 + x307)
    )
    result[0, 2, 0] = numpy.sum(
        x122 * (x0 * x348 + x0 * (x0 * x352 + x348) + x22 * x86 + x360)
    )
    result[0, 2, 1] = numpy.sum(
        x242 * (x0 * x364 + x0 * (x0 * x368 + x364) + x115 * x22 + x369)
    )
    result[0, 2, 2] = numpy.sum(
        x242 * (x0 * x377 + x0 * (x0 * x382 + x377) + x126 * x22 + x384)
    )
    result[0, 2, 3] = numpy.sum(
        x242 * (x0 * x386 + x0 * (x0 * x388 + x386) + x134 * x22 + x389)
    )
    result[0, 2, 4] = numpy.sum(
        x277 * (x0 * x393 + x0 * (x0 * x396 + x393) + x140 * x22 + x397)
    )
    result[0, 2, 5] = numpy.sum(
        x242 * (x0 * x401 + x0 * (x0 * x405 + x401) + x147 * x22 + x407)
    )
    result[0, 2, 6] = numpy.sum(
        x122 * (x0 * x409 + x0 * (x0 * x412 + x409) + x153 * x22 + x413)
    )
    result[0, 2, 7] = numpy.sum(
        x242 * (x0 * x415 + x0 * (x0 * x417 + x415) + x159 * x22 + x418)
    )
    result[0, 2, 8] = numpy.sum(
        x242 * (x0 * x420 + x0 * (x0 * x422 + x420) + x164 * x22 + x423)
    )
    result[0, 2, 9] = numpy.sum(
        x122 * (x0 * x425 + x0 * (x0 * x427 + x425) + x168 * x22 + x428)
    )
    result[0, 3, 0] = numpy.sum(x122 * (x0 * x453 + x21 * x211 + x462))
    result[0, 3, 1] = numpy.sum(x242 * (x0 * x475 + x21 * x233 + x481))
    result[0, 3, 2] = numpy.sum(x242 * (x0 * x487 + x21 * x247 + x490))
    result[0, 3, 3] = numpy.sum(x242 * (x0 * x495 + x21 * x256 + x499))
    result[0, 3, 4] = numpy.sum(x277 * (x0 * x504 + x21 * x268 + x508))
    result[0, 3, 5] = numpy.sum(x242 * (x0 * x511 + x21 * x279 + x514))
    result[0, 3, 6] = numpy.sum(x122 * (x0 * x517 + x21 * x285 + x519))
    result[0, 3, 7] = numpy.sum(x242 * (x0 * x522 + x21 * x291 + x524))
    result[0, 3, 8] = numpy.sum(x242 * (x0 * x527 + x21 * x297 + x529))
    result[0, 3, 9] = numpy.sum(x122 * (x0 * x532 + x21 * x304 + x534))
    result[0, 4, 0] = numpy.sum(x145 * (x0 * x556 + x21 * x348 + x561))
    result[0, 4, 1] = numpy.sum(x277 * (x0 * x570 + x21 * x364 + x573))
    result[0, 4, 2] = numpy.sum(x277 * (x0 * x582 + x21 * x377 + x585))
    result[0, 4, 3] = numpy.sum(x277 * (x0 * x591 + x21 * x386 + x594))
    result[0, 4, 4] = numpy.sum(x604 * (x0 * x600 + x21 * x393 + x603))
    result[0, 4, 5] = numpy.sum(x277 * (x0 * x610 + x21 * x401 + x613))
    result[0, 4, 6] = numpy.sum(x145 * (x0 * x616 + x21 * x409 + x618))
    result[0, 4, 7] = numpy.sum(x277 * (x0 * x622 + x21 * x415 + x624))
    result[0, 4, 8] = numpy.sum(x277 * (x0 * x627 + x21 * x420 + x629))
    result[0, 4, 9] = numpy.sum(x145 * (x0 * x632 + x21 * x425 + x634))
    result[0, 5, 0] = numpy.sum(x122 * (x0 * x659 + x22 * x348 + x668))
    result[0, 5, 1] = numpy.sum(x242 * (x0 * x674 + x22 * x364 + x676))
    result[0, 5, 2] = numpy.sum(x242 * (x0 * x685 + x22 * x377 + x689))
    result[0, 5, 3] = numpy.sum(x242 * (x0 * x692 + x22 * x386 + x694))
    result[0, 5, 4] = numpy.sum(x277 * (x0 * x697 + x22 * x393 + x699))
    result[0, 5, 5] = numpy.sum(x242 * (x0 * x704 + x22 * x401 + x708))
    result[0, 5, 6] = numpy.sum(x122 * (x0 * x711 + x22 * x409 + x713))
    result[0, 5, 7] = numpy.sum(x242 * (x0 * x716 + x22 * x415 + x718))
    result[0, 5, 8] = numpy.sum(x242 * (x0 * x721 + x22 * x420 + x723))
    result[0, 5, 9] = numpy.sum(x122 * (x0 * x726 + x22 * x425 + x728))
    result[0, 6, 0] = numpy.sum(x111 * (x21 * x453 + x745))
    result[0, 6, 1] = numpy.sum(x122 * (x21 * x475 + x756))
    result[0, 6, 2] = numpy.sum(x122 * (x21 * x487 + x760))
    result[0, 6, 3] = numpy.sum(x122 * (x21 * x495 + x764))
    result[0, 6, 4] = numpy.sum(x145 * (x21 * x504 + x768))
    result[0, 6, 5] = numpy.sum(x122 * (x21 * x511 + x770))
    result[0, 6, 6] = numpy.sum(x111 * (x21 * x517 + x772))
    result[0, 6, 7] = numpy.sum(x122 * (x21 * x522 + x774))
    result[0, 6, 8] = numpy.sum(x122 * (x21 * x527 + x776))
    result[0, 6, 9] = numpy.sum(x111 * (x21 * x532 + x778))
    result[0, 7, 0] = numpy.sum(x122 * (x21 * x556 + x793))
    result[0, 7, 1] = numpy.sum(x242 * (x21 * x570 + x802))
    result[0, 7, 2] = numpy.sum(x242 * (x21 * x582 + x810))
    result[0, 7, 3] = numpy.sum(x242 * (x21 * x591 + x815))
    result[0, 7, 4] = numpy.sum(x277 * (x21 * x600 + x821))
    result[0, 7, 5] = numpy.sum(x242 * (x21 * x610 + x827))
    result[0, 7, 6] = numpy.sum(x122 * (x21 * x616 + x830))
    result[0, 7, 7] = numpy.sum(x242 * (x21 * x622 + x833))
    result[0, 7, 8] = numpy.sum(x242 * (x21 * x627 + x837))
    result[0, 7, 9] = numpy.sum(x122 * (x21 * x632 + x840))
    result[0, 8, 0] = numpy.sum(x122 * (x21 * x659 + x855))
    result[0, 8, 1] = numpy.sum(x242 * (x21 * x674 + x863))
    result[0, 8, 2] = numpy.sum(x242 * (x21 * x685 + x871))
    result[0, 8, 3] = numpy.sum(x242 * (x21 * x692 + x877))
    result[0, 8, 4] = numpy.sum(x277 * (x21 * x697 + x883))
    result[0, 8, 5] = numpy.sum(x242 * (x21 * x704 + x889))
    result[0, 8, 6] = numpy.sum(x122 * (x21 * x711 + x892))
    result[0, 8, 7] = numpy.sum(x242 * (x21 * x716 + x895))
    result[0, 8, 8] = numpy.sum(x242 * (x21 * x721 + x898))
    result[0, 8, 9] = numpy.sum(x122 * (x21 * x726 + x901))
    result[0, 9, 0] = numpy.sum(x111 * (x22 * x659 + x918))
    result[0, 9, 1] = numpy.sum(x122 * (x22 * x674 + x922))
    result[0, 9, 2] = numpy.sum(x122 * (x22 * x685 + x929))
    result[0, 9, 3] = numpy.sum(x122 * (x22 * x692 + x931))
    result[0, 9, 4] = numpy.sum(x145 * (x22 * x697 + x933))
    result[0, 9, 5] = numpy.sum(x122 * (x22 * x704 + x937))
    result[0, 9, 6] = numpy.sum(x111 * (x22 * x711 + x939))
    result[0, 9, 7] = numpy.sum(x122 * (x22 * x716 + x941))
    result[0, 9, 8] = numpy.sum(x122 * (x22 * x721 + x943))
    result[0, 9, 9] = numpy.sum(x111 * (x22 * x726 + x945))
    result[1, 0, 0] = numpy.sum(
        x144 * (x0 * x210 + x0 * x946 + x0 * (x0 * (x213 + x948 * x97) + x946) + x222)
    )
    result[1, 0, 1] = numpy.sum(
        x145 * (x0 * x232 + x0 * x949 + x0 * (x0 * (x237 + x952 * x97) + x949) + x241)
    )
    result[1, 0, 2] = numpy.sum(
        x145 * (x0 * x246 + x0 * x953 + x0 * (x0 * (x250 + x955 * x97) + x953) + x252)
    )
    result[1, 0, 3] = numpy.sum(
        x145 * (x0 * x255 + x0 * x956 + x0 * (x0 * (x259 + x958 * x97) + x956) + x262)
    )
    result[1, 0, 4] = numpy.sum(
        x962 * (x0 * x267 + x0 * x959 + x0 * (x0 * (x272 + x961 * x97) + x959) + x276)
    )
    result[1, 0, 5] = numpy.sum(
        x145 * (x0 * x278 + x0 * x963 + x0 * (x0 * (x281 + x965 * x97) + x963) + x283)
    )
    result[1, 0, 6] = numpy.sum(
        x144 * (x0 * x284 + x0 * x966 + x0 * (x0 * (x286 + x967 * x97) + x966) + x289)
    )
    result[1, 0, 7] = numpy.sum(
        x145 * (x0 * x290 + x0 * x968 + x0 * (x0 * (x292 + x969 * x97) + x968) + x294)
    )
    result[1, 0, 8] = numpy.sum(
        x145 * (x0 * x296 + x0 * x970 + x0 * (x0 * (x299 + x97 * x972) + x970) + x302)
    )
    result[1, 0, 9] = numpy.sum(
        x144 * (x0 * x303 + x0 * x973 + x0 * (x0 * (x0 * x974 + x305) + x973) + x307)
    )
    result[1, 1, 0] = numpy.sum(x145 * (x0 * x452 + x0 * (x0 * x976 + x452) + x462))
    result[1, 1, 1] = numpy.sum(x277 * (x0 * x474 + x0 * (x0 * x978 + x474) + x481))
    result[1, 1, 2] = numpy.sum(x277 * (x0 * x486 + x0 * (x0 * x980 + x486) + x490))
    result[1, 1, 3] = numpy.sum(x277 * (x0 * x494 + x0 * (x0 * x983 + x494) + x499))
    result[1, 1, 4] = numpy.sum(x604 * (x0 * x503 + x0 * (x0 * x986 + x503) + x508))
    result[1, 1, 5] = numpy.sum(x277 * (x0 * x510 + x0 * (x0 * x989 + x510) + x514))
    result[1, 1, 6] = numpy.sum(x145 * (x0 * x516 + x0 * (x0 * x991 + x516) + x519))
    result[1, 1, 7] = numpy.sum(x277 * (x0 * x521 + x0 * (x0 * x993 + x521) + x524))
    result[1, 1, 8] = numpy.sum(x277 * (x0 * x526 + x0 * (x0 * x995 + x526) + x529))
    result[1, 1, 9] = numpy.sum(x145 * (x0 * x531 + x0 * (x0 * x997 + x531) + x534))
    result[1, 2, 0] = numpy.sum(x145 * (x0 * x555 + x0 * (x0 * x999 + x555) + x561))
    result[1, 2, 1] = numpy.sum(x277 * (x0 * x569 + x0 * (x0 * x1001 + x569) + x573))
    result[1, 2, 2] = numpy.sum(x277 * (x0 * x581 + x0 * (x0 * x1003 + x581) + x585))
    result[1, 2, 3] = numpy.sum(x277 * (x0 * x590 + x0 * (x0 * x1006 + x590) + x594))
    result[1, 2, 4] = numpy.sum(x604 * (x0 * x599 + x0 * (x0 * x1009 + x599) + x603))
    result[1, 2, 5] = numpy.sum(x277 * (x0 * x609 + x0 * (x0 * x1012 + x609) + x613))
    result[1, 2, 6] = numpy.sum(x145 * (x0 * x615 + x0 * (x0 * x1014 + x615) + x618))
    result[1, 2, 7] = numpy.sum(x277 * (x0 * x621 + x0 * (x0 * x1016 + x621) + x624))
    result[1, 2, 8] = numpy.sum(x277 * (x0 * x626 + x0 * (x0 * x1018 + x626) + x629))
    result[1, 2, 9] = numpy.sum(x145 * (x0 * x631 + x0 * (x0 * x1020 + x631) + x634))
    result[1, 3, 0] = numpy.sum(x145 * (x0 * x1023 + x745))
    result[1, 3, 1] = numpy.sum(x277 * (x0 * x1026 + x756))
    result[1, 3, 2] = numpy.sum(x277 * (x0 * x1029 + x760))
    result[1, 3, 3] = numpy.sum(x277 * (x0 * x1033 + x764))
    result[1, 3, 4] = numpy.sum(x604 * (x0 * x1037 + x768))
    result[1, 3, 5] = numpy.sum(x277 * (x0 * x1041 + x770))
    result[1, 3, 6] = numpy.sum(x145 * (x0 * x1044 + x772))
    result[1, 3, 7] = numpy.sum(x277 * (x0 * x1047 + x774))
    result[1, 3, 8] = numpy.sum(x277 * (x0 * x1050 + x776))
    result[1, 3, 9] = numpy.sum(x145 * (x0 * x1053 + x778))
    result[1, 4, 0] = numpy.sum(x962 * (x0 * x1056 + x793))
    result[1, 4, 1] = numpy.sum(x604 * (x0 * x1059 + x802))
    result[1, 4, 2] = numpy.sum(x604 * (x0 * x1062 + x810))
    result[1, 4, 3] = numpy.sum(x604 * (x0 * x1066 + x815))
    result[1, 4, 4] = numpy.sum(x109 * (x0 * x1071 + x821))
    result[1, 4, 5] = numpy.sum(x604 * (x0 * x1075 + x827))
    result[1, 4, 6] = numpy.sum(x962 * (x0 * x1078 + x830))
    result[1, 4, 7] = numpy.sum(x604 * (x0 * x1081 + x833))
    result[1, 4, 8] = numpy.sum(x604 * (x0 * x1084 + x837))
    result[1, 4, 9] = numpy.sum(x962 * (x0 * x1087 + x840))
    result[1, 5, 0] = numpy.sum(x145 * (x0 * x1090 + x855))
    result[1, 5, 1] = numpy.sum(x277 * (x0 * x1093 + x863))
    result[1, 5, 2] = numpy.sum(x277 * (x0 * x1096 + x871))
    result[1, 5, 3] = numpy.sum(x277 * (x0 * x1100 + x877))
    result[1, 5, 4] = numpy.sum(x604 * (x0 * x1104 + x883))
    result[1, 5, 5] = numpy.sum(x277 * (x0 * x1108 + x889))
    result[1, 5, 6] = numpy.sum(x145 * (x0 * x1111 + x892))
    result[1, 5, 7] = numpy.sum(x277 * (x0 * x1114 + x895))
    result[1, 5, 8] = numpy.sum(x277 * (x0 * x1117 + x898))
    result[1, 5, 9] = numpy.sum(x145 * (x0 * x1120 + x901))
    result[1, 6, 0] = numpy.sum(x144 * (x1023 * x21 + x1126))
    result[1, 6, 1] = numpy.sum(x145 * (x1026 * x21 + x1134))
    result[1, 6, 2] = numpy.sum(x145 * (x1029 * x21 + x1136))
    result[1, 6, 3] = numpy.sum(x145 * (x1033 * x21 + x1140))
    result[1, 6, 4] = numpy.sum(x962 * (x1037 * x21 + x1144))
    result[1, 6, 5] = numpy.sum(x145 * (x1041 * x21 + x1146))
    result[1, 6, 6] = numpy.sum(x144 * (x1044 * x21 + x1147))
    result[1, 6, 7] = numpy.sum(x145 * (x1047 * x21 + x1148))
    result[1, 6, 8] = numpy.sum(x145 * (x1050 * x21 + x1149))
    result[1, 6, 9] = numpy.sum(x144 * (x1053 * x21 + x1150))
    result[1, 7, 0] = numpy.sum(x145 * (x1056 * x21 + x1156))
    result[1, 7, 1] = numpy.sum(x277 * (x1059 * x21 + x1160))
    result[1, 7, 2] = numpy.sum(x277 * (x1062 * x21 + x1164))
    result[1, 7, 3] = numpy.sum(x277 * (x1066 * x21 + x1168))
    result[1, 7, 4] = numpy.sum(x604 * (x1071 * x21 + x1172))
    result[1, 7, 5] = numpy.sum(x277 * (x1075 * x21 + x1176))
    result[1, 7, 6] = numpy.sum(x145 * (x1078 * x21 + x1178))
    result[1, 7, 7] = numpy.sum(x277 * (x1081 * x21 + x1180))
    result[1, 7, 8] = numpy.sum(x277 * (x1084 * x21 + x1182))
    result[1, 7, 9] = numpy.sum(x145 * (x1087 * x21 + x1184))
    result[1, 8, 0] = numpy.sum(x145 * (x1090 * x21 + x1191))
    result[1, 8, 1] = numpy.sum(x277 * (x1093 * x21 + x1196))
    result[1, 8, 2] = numpy.sum(x277 * (x1096 * x21 + x1201))
    result[1, 8, 3] = numpy.sum(x277 * (x1100 * x21 + x1206))
    result[1, 8, 4] = numpy.sum(x604 * (x1104 * x21 + x1211))
    result[1, 8, 5] = numpy.sum(x277 * (x1108 * x21 + x1216))
    result[1, 8, 6] = numpy.sum(x145 * (x1111 * x21 + x1219))
    result[1, 8, 7] = numpy.sum(x277 * (x1114 * x21 + x1222))
    result[1, 8, 8] = numpy.sum(x277 * (x1117 * x21 + x1225))
    result[1, 8, 9] = numpy.sum(x145 * (x1120 * x21 + x1228))
    result[1, 9, 0] = numpy.sum(x144 * (x1090 * x22 + x1234))
    result[1, 9, 1] = numpy.sum(x145 * (x1093 * x22 + x1238))
    result[1, 9, 2] = numpy.sum(x145 * (x1096 * x22 + x1242))
    result[1, 9, 3] = numpy.sum(x145 * (x1100 * x22 + x1246))
    result[1, 9, 4] = numpy.sum(x962 * (x1104 * x22 + x1250))
    result[1, 9, 5] = numpy.sum(x145 * (x1108 * x22 + x1254))
    result[1, 9, 6] = numpy.sum(x144 * (x1111 * x22 + x1256))
    result[1, 9, 7] = numpy.sum(x145 * (x1114 * x22 + x1258))
    result[1, 9, 8] = numpy.sum(x145 * (x1117 * x22 + x1260))
    result[1, 9, 9] = numpy.sum(x144 * (x1120 * x22 + x1262))
    result[2, 0, 0] = numpy.sum(
        x144 * (x0 * x1263 + x0 * x347 + x0 * (x0 * (x1264 * x97 + x350) + x1263) + x360)
    )
    result[2, 0, 1] = numpy.sum(
        x145 * (x0 * x1265 + x0 * x363 + x0 * (x0 * (x1266 * x97 + x367) + x1265) + x369)
    )
    result[2, 0, 2] = numpy.sum(
        x145 * (x0 * x1267 + x0 * x376 + x0 * (x0 * (x1268 * x97 + x381) + x1267) + x384)
    )
    result[2, 0, 3] = numpy.sum(
        x145 * (x0 * x1269 + x0 * x385 + x0 * (x0 * (x1271 * x97 + x387) + x1269) + x389)
    )
    result[2, 0, 4] = numpy.sum(
        x962 * (x0 * x1272 + x0 * x392 + x0 * (x0 * (x1274 * x97 + x395) + x1272) + x397)
    )
    result[2, 0, 5] = numpy.sum(
        x145 * (x0 * x1275 + x0 * x400 + x0 * (x0 * (x1278 * x97 + x404) + x1275) + x407)
    )
    result[2, 0, 6] = numpy.sum(
        x144 * (x0 * x1279 + x0 * x408 + x0 * (x0 * (x0 * x1280 + x410) + x1279) + x413)
    )
    result[2, 0, 7] = numpy.sum(
        x145 * (x0 * x1281 + x0 * x414 + x0 * (x0 * (x0 * x1282 + x416) + x1281) + x418)
    )
    result[2, 0, 8] = numpy.sum(
        x145 * (x0 * x1283 + x0 * x419 + x0 * (x0 * (x0 * x1284 + x421) + x1283) + x423)
    )
    result[2, 0, 9] = numpy.sum(
        x144 * (x0 * x1285 + x0 * x424 + x0 * (x0 * (x1286 * x97 + x426) + x1285) + x428)
    )
    result[2, 1, 0] = numpy.sum(
        x145 * (x0 * x1287 + x0 * (x0 * x1288 + x1287) + x21 * x347 + x560)
    )
    result[2, 1, 1] = numpy.sum(
        x277 * (x0 * x1289 + x0 * (x0 * x1290 + x1289) + x21 * x363 + x572)
    )
    result[2, 1, 2] = numpy.sum(
        x277 * (x0 * x1291 + x0 * (x0 * x1292 + x1291) + x21 * x376 + x584)
    )
    result[2, 1, 3] = numpy.sum(
        x277 * (x0 * x1293 + x0 * (x0 * x1294 + x1293) + x21 * x385 + x593)
    )
    result[2, 1, 4] = numpy.sum(
        x604 * (x0 * x1295 + x0 * (x0 * x1296 + x1295) + x21 * x392 + x602)
    )
    result[2, 1, 5] = numpy.sum(
        x277 * (x0 * x1297 + x0 * (x0 * x1298 + x1297) + x21 * x400 + x612)
    )
    result[2, 1, 6] = numpy.sum(
        x145 * (x0 * x1299 + x0 * (x0 * x1300 + x1299) + x21 * x408 + x617)
    )
    result[2, 1, 7] = numpy.sum(
        x277 * (x0 * x1301 + x0 * (x0 * x1302 + x1301) + x21 * x414 + x623)
    )
    result[2, 1, 8] = numpy.sum(
        x277 * (x0 * x1303 + x0 * (x0 * x1304 + x1303) + x21 * x419 + x628)
    )
    result[2, 1, 9] = numpy.sum(
        x145 * (x0 * x1305 + x0 * (x0 * x1306 + x1305) + x21 * x424 + x633)
    )
    result[2, 2, 0] = numpy.sum(x145 * (x0 * x658 + x0 * (x0 * x1308 + x658) + x668))
    result[2, 2, 1] = numpy.sum(x277 * (x0 * x673 + x0 * (x0 * x1310 + x673) + x676))
    result[2, 2, 2] = numpy.sum(x277 * (x0 * x684 + x0 * (x0 * x1312 + x684) + x689))
    result[2, 2, 3] = numpy.sum(x277 * (x0 * x691 + x0 * (x0 * x1315 + x691) + x694))
    result[2, 2, 4] = numpy.sum(x604 * (x0 * x696 + x0 * (x0 * x1318 + x696) + x699))
    result[2, 2, 5] = numpy.sum(x277 * (x0 * x703 + x0 * (x0 * x1322 + x703) + x708))
    result[2, 2, 6] = numpy.sum(x145 * (x0 * x710 + x0 * (x0 * x1324 + x710) + x713))
    result[2, 2, 7] = numpy.sum(x277 * (x0 * x715 + x0 * (x0 * x1326 + x715) + x718))
    result[2, 2, 8] = numpy.sum(x277 * (x0 * x720 + x0 * (x0 * x1328 + x720) + x723))
    result[2, 2, 9] = numpy.sum(x145 * (x0 * x725 + x0 * (x0 * x1330 + x725) + x728))
    result[2, 3, 0] = numpy.sum(x145 * (x0 * x1332 + x1287 * x21 + x1333))
    result[2, 3, 1] = numpy.sum(x277 * (x0 * x1335 + x1289 * x21 + x1336))
    result[2, 3, 2] = numpy.sum(x277 * (x0 * x1338 + x1291 * x21 + x1339))
    result[2, 3, 3] = numpy.sum(x277 * (x0 * x1341 + x1293 * x21 + x1342))
    result[2, 3, 4] = numpy.sum(x604 * (x0 * x1344 + x1295 * x21 + x1345))
    result[2, 3, 5] = numpy.sum(x277 * (x0 * x1347 + x1297 * x21 + x1348))
    result[2, 3, 6] = numpy.sum(x145 * (x0 * x1350 + x1299 * x21 + x1351))
    result[2, 3, 7] = numpy.sum(x277 * (x0 * x1353 + x1301 * x21 + x1354))
    result[2, 3, 8] = numpy.sum(x277 * (x0 * x1356 + x1303 * x21 + x1357))
    result[2, 3, 9] = numpy.sum(x145 * (x0 * x1359 + x1305 * x21 + x1360))
    result[2, 4, 0] = numpy.sum(x962 * (x0 * x1361 + x21 * x658 + x854))
    result[2, 4, 1] = numpy.sum(x604 * (x0 * x1362 + x21 * x673 + x862))
    result[2, 4, 2] = numpy.sum(x604 * (x0 * x1363 + x21 * x684 + x870))
    result[2, 4, 3] = numpy.sum(x604 * (x0 * x1364 + x21 * x691 + x876))
    result[2, 4, 4] = numpy.sum(x109 * (x0 * x1365 + x21 * x696 + x882))
    result[2, 4, 5] = numpy.sum(x604 * (x0 * x1366 + x21 * x703 + x888))
    result[2, 4, 6] = numpy.sum(x962 * (x0 * x1367 + x21 * x710 + x891))
    result[2, 4, 7] = numpy.sum(x604 * (x0 * x1368 + x21 * x715 + x894))
    result[2, 4, 8] = numpy.sum(x604 * (x0 * x1369 + x21 * x720 + x897))
    result[2, 4, 9] = numpy.sum(x962 * (x0 * x1370 + x21 * x725 + x900))
    result[2, 5, 0] = numpy.sum(x145 * (x0 * x1373 + x918))
    result[2, 5, 1] = numpy.sum(x277 * (x0 * x1376 + x922))
    result[2, 5, 2] = numpy.sum(x277 * (x0 * x1379 + x929))
    result[2, 5, 3] = numpy.sum(x277 * (x0 * x1383 + x931))
    result[2, 5, 4] = numpy.sum(x604 * (x0 * x1387 + x933))
    result[2, 5, 5] = numpy.sum(x277 * (x0 * x1392 + x937))
    result[2, 5, 6] = numpy.sum(x145 * (x0 * x1395 + x939))
    result[2, 5, 7] = numpy.sum(x277 * (x0 * x1398 + x941))
    result[2, 5, 8] = numpy.sum(x277 * (x0 * x1401 + x943))
    result[2, 5, 9] = numpy.sum(x145 * (x0 * x1404 + x945))
    result[2, 6, 0] = numpy.sum(x144 * (x1332 * x21 + x1405))
    result[2, 6, 1] = numpy.sum(x145 * (x1335 * x21 + x1406))
    result[2, 6, 2] = numpy.sum(x145 * (x1338 * x21 + x1407))
    result[2, 6, 3] = numpy.sum(x145 * (x1341 * x21 + x1408))
    result[2, 6, 4] = numpy.sum(x962 * (x1344 * x21 + x1409))
    result[2, 6, 5] = numpy.sum(x145 * (x1347 * x21 + x1410))
    result[2, 6, 6] = numpy.sum(x144 * (x1350 * x21 + x1411))
    result[2, 6, 7] = numpy.sum(x145 * (x1353 * x21 + x1412))
    result[2, 6, 8] = numpy.sum(x145 * (x1356 * x21 + x1413))
    result[2, 6, 9] = numpy.sum(x144 * (x1359 * x21 + x1414))
    result[2, 7, 0] = numpy.sum(x145 * (x1361 * x21 + x1415))
    result[2, 7, 1] = numpy.sum(x277 * (x1362 * x21 + x1416))
    result[2, 7, 2] = numpy.sum(x277 * (x1363 * x21 + x1417))
    result[2, 7, 3] = numpy.sum(x277 * (x1364 * x21 + x1418))
    result[2, 7, 4] = numpy.sum(x604 * (x1365 * x21 + x1419))
    result[2, 7, 5] = numpy.sum(x277 * (x1366 * x21 + x1420))
    result[2, 7, 6] = numpy.sum(x145 * (x1367 * x21 + x1421))
    result[2, 7, 7] = numpy.sum(x277 * (x1368 * x21 + x1422))
    result[2, 7, 8] = numpy.sum(x277 * (x1369 * x21 + x1423))
    result[2, 7, 9] = numpy.sum(x145 * (x1370 * x21 + x1424))
    result[2, 8, 0] = numpy.sum(x145 * (x1234 + x1373 * x21))
    result[2, 8, 1] = numpy.sum(x277 * (x1238 + x1376 * x21))
    result[2, 8, 2] = numpy.sum(x277 * (x1242 + x1379 * x21))
    result[2, 8, 3] = numpy.sum(x277 * (x1246 + x1383 * x21))
    result[2, 8, 4] = numpy.sum(x604 * (x1250 + x1387 * x21))
    result[2, 8, 5] = numpy.sum(x277 * (x1254 + x1392 * x21))
    result[2, 8, 6] = numpy.sum(x145 * (x1256 + x1395 * x21))
    result[2, 8, 7] = numpy.sum(x277 * (x1258 + x1398 * x21))
    result[2, 8, 8] = numpy.sum(x277 * (x1260 + x1401 * x21))
    result[2, 8, 9] = numpy.sum(x145 * (x1262 + x1404 * x21))
    result[2, 9, 0] = numpy.sum(x144 * (x1373 * x22 + x1430))
    result[2, 9, 1] = numpy.sum(x145 * (x1376 * x22 + x1432))
    result[2, 9, 2] = numpy.sum(x145 * (x1379 * x22 + x1436))
    result[2, 9, 3] = numpy.sum(x145 * (x1383 * x22 + x1438))
    result[2, 9, 4] = numpy.sum(x962 * (x1387 * x22 + x1440))
    result[2, 9, 5] = numpy.sum(x145 * (x1392 * x22 + x1444))
    result[2, 9, 6] = numpy.sum(x144 * (x1395 * x22 + x1445))
    result[2, 9, 7] = numpy.sum(x145 * (x1398 * x22 + x1446))
    result[2, 9, 8] = numpy.sum(x145 * (x1401 * x22 + x1447))
    result[2, 9, 9] = numpy.sum(x144 * (x1404 * x22 + x1448))
    result[3, 0, 0] = numpy.sum(
        x111
        * (x0 * x1449 + x0 * x451 + x0 * (x0 * (x1450 * x1451 + x975) + x1449) + x461)
    )
    result[3, 0, 1] = numpy.sum(
        x122 * (x0 * x1452 + x0 * x473 + x0 * (x0 * (x0 * x1454 + x977) + x1452) + x480)
    )
    result[3, 0, 2] = numpy.sum(
        x122
        * (x0 * x1455 + x0 * x485 + x0 * (x0 * (x1451 * x1456 + x979) + x1455) + x489)
    )
    result[3, 0, 3] = numpy.sum(
        x122 * (x0 * x1457 + x0 * x493 + x0 * (x0 * (x1458 * x981 + x982) + x1457) + x498)
    )
    result[3, 0, 4] = numpy.sum(
        x145 * (x0 * x1459 + x0 * x502 + x0 * (x0 * (x1458 * x984 + x985) + x1459) + x507)
    )
    result[3, 0, 5] = numpy.sum(
        x122
        * (x0 * x1460 + x0 * x509 + x0 * (x0 * (x1451 * x1461 + x988) + x1460) + x513)
    )
    result[3, 0, 6] = numpy.sum(
        x111 * (x0 * x1462 + x0 * x515 + x0 * (x0 * (x1463 * x97 + x990) + x1462) + x518)
    )
    result[3, 0, 7] = numpy.sum(
        x122 * (x0 * x1464 + x0 * x520 + x0 * (x0 * (x1465 * x97 + x992) + x1464) + x523)
    )
    result[3, 0, 8] = numpy.sum(
        x122 * (x0 * x1466 + x0 * x525 + x0 * (x0 * (x1467 * x97 + x994) + x1466) + x528)
    )
    result[3, 0, 9] = numpy.sum(
        x111 * (x0 * x1468 + x0 * x530 + x0 * (x0 * (x1451 * x167 + x996) + x1468) + x533)
    )
    result[3, 1, 0] = numpy.sum(x122 * (x0 * x1022 + x0 * (x0 * x1471 + x1022) + x744))
    result[3, 1, 1] = numpy.sum(x242 * (x0 * x1025 + x0 * (x0 * x1473 + x1025) + x755))
    result[3, 1, 2] = numpy.sum(x242 * (x0 * x1028 + x0 * (x0 * x1475 + x1028) + x759))
    result[3, 1, 3] = numpy.sum(x242 * (x0 * x1032 + x0 * (x0 * x1478 + x1032) + x763))
    result[3, 1, 4] = numpy.sum(x277 * (x0 * x1036 + x0 * (x0 * x1480 + x1036) + x767))
    result[3, 1, 5] = numpy.sum(x242 * (x0 * x1040 + x0 * (x0 * x1482 + x1040) + x769))
    result[3, 1, 6] = numpy.sum(x122 * (x0 * x1043 + x0 * (x0 * x1484 + x1043) + x771))
    result[3, 1, 7] = numpy.sum(x242 * (x0 * x1046 + x0 * (x0 * x1486 + x1046) + x773))
    result[3, 1, 8] = numpy.sum(x242 * (x0 * x1049 + x0 * (x0 * x1488 + x1049) + x775))
    result[3, 1, 9] = numpy.sum(x122 * (x0 * x1052 + x0 * (x0 * x1490 + x1052) + x777))
    result[3, 2, 0] = numpy.sum(x122 * (x0 * x1055 + x0 * (x0 * x1493 + x1055) + x792))
    result[3, 2, 1] = numpy.sum(x242 * (x0 * x1058 + x0 * (x0 * x1495 + x1058) + x801))
    result[3, 2, 2] = numpy.sum(x242 * (x0 * x1061 + x0 * (x0 * x1497 + x1061) + x809))
    result[3, 2, 3] = numpy.sum(x242 * (x0 * x1065 + x0 * (x0 * x1500 + x1065) + x814))
    result[3, 2, 4] = numpy.sum(x277 * (x0 * x1070 + x0 * (x0 * x1502 + x1070) + x820))
    result[3, 2, 5] = numpy.sum(x242 * (x0 * x1074 + x0 * (x0 * x1504 + x1074) + x826))
    result[3, 2, 6] = numpy.sum(x122 * (x0 * x1077 + x0 * (x0 * x1506 + x1077) + x829))
    result[3, 2, 7] = numpy.sum(x242 * (x0 * x1080 + x0 * (x0 * x1508 + x1080) + x832))
    result[3, 2, 8] = numpy.sum(x242 * (x0 * x1083 + x0 * (x0 * x1511 + x1083) + x836))
    result[3, 2, 9] = numpy.sum(x122 * (x0 * x1086 + x0 * (x0 * x1513 + x1086) + x839))
    result[3, 3, 0] = numpy.sum(x122 * (x0 * x1516 + x1126))
    result[3, 3, 1] = numpy.sum(x242 * (x0 * x1519 + x1134))
    result[3, 3, 2] = numpy.sum(x242 * (x0 * x1522 + x1136))
    result[3, 3, 3] = numpy.sum(x242 * (x0 * x1525 + x1140))
    result[3, 3, 4] = numpy.sum(x277 * (x0 * x1528 + x1144))
    result[3, 3, 5] = numpy.sum(x242 * (x0 * x1531 + x1146))
    result[3, 3, 6] = numpy.sum(x122 * (x0 * x1534 + x1147))
    result[3, 3, 7] = numpy.sum(x242 * (x0 * x1537 + x1148))
    result[3, 3, 8] = numpy.sum(x242 * (x0 * x1540 + x1149))
    result[3, 3, 9] = numpy.sum(x122 * (x0 * x1543 + x1150))
    result[3, 4, 0] = numpy.sum(x145 * (x0 * x1546 + x1156))
    result[3, 4, 1] = numpy.sum(x277 * (x0 * x1549 + x1160))
    result[3, 4, 2] = numpy.sum(x277 * (x0 * x1552 + x1164))
    result[3, 4, 3] = numpy.sum(x277 * (x0 * x1555 + x1168))
    result[3, 4, 4] = numpy.sum(x604 * (x0 * x1558 + x1172))
    result[3, 4, 5] = numpy.sum(x277 * (x0 * x1561 + x1176))
    result[3, 4, 6] = numpy.sum(x145 * (x0 * x1564 + x1178))
    result[3, 4, 7] = numpy.sum(x277 * (x0 * x1567 + x1180))
    result[3, 4, 8] = numpy.sum(x277 * (x0 * x1570 + x1182))
    result[3, 4, 9] = numpy.sum(x145 * (x0 * x1573 + x1184))
    result[3, 5, 0] = numpy.sum(x122 * (x0 * x1576 + x1191))
    result[3, 5, 1] = numpy.sum(x242 * (x0 * x1579 + x1196))
    result[3, 5, 2] = numpy.sum(x242 * (x0 * x1582 + x1201))
    result[3, 5, 3] = numpy.sum(x242 * (x0 * x1585 + x1206))
    result[3, 5, 4] = numpy.sum(x277 * (x0 * x1588 + x1211))
    result[3, 5, 5] = numpy.sum(x242 * (x0 * x1591 + x1216))
    result[3, 5, 6] = numpy.sum(x122 * (x0 * x1594 + x1219))
    result[3, 5, 7] = numpy.sum(x242 * (x0 * x1597 + x1222))
    result[3, 5, 8] = numpy.sum(x242 * (x0 * x1600 + x1225))
    result[3, 5, 9] = numpy.sum(x122 * (x0 * x1603 + x1228))
    result[3, 6, 0] = numpy.sum(
        x111 * (x1450 * x1604 + x1514 * x21 + x1515 * x21 + x1516 * x21)
    )
    result[3, 6, 1] = numpy.sum(
        x122 * (x1453 * x1607 + x1517 * x21 + x1518 * x21 + x1519 * x21)
    )
    result[3, 6, 2] = numpy.sum(
        x122 * (x1456 * x1604 + x1520 * x21 + x1521 * x21 + x1522 * x21)
    )
    result[3, 6, 3] = numpy.sum(
        x122 * (x1523 * x21 + x1524 * x21 + x1525 * x21 + x1608 * x950)
    )
    result[3, 6, 4] = numpy.sum(
        x145 * (x1526 * x21 + x1527 * x21 + x1528 * x21 + x1609 * x950)
    )
    result[3, 6, 5] = numpy.sum(
        x122 * (x1461 * x1604 + x1529 * x21 + x1530 * x21 + x1531 * x21)
    )
    result[3, 6, 6] = numpy.sum(
        x111
        * (x1532 * x21 + x1533 * x21 + x1534 * x21 + x71 * (x112 * x1608 + 5.0 * x1138))
    )
    result[3, 6, 7] = numpy.sum(
        x122
        * (x1535 * x21 + x1536 * x21 + x1537 * x21 + x71 * (x112 * x1609 + 5.0 * x1142))
    )
    result[3, 6, 8] = numpy.sum(
        x122 * (x146 * x71 * (x1605 + x1606) + x1538 * x21 + x1539 * x21 + x1540 * x21)
    )
    result[3, 6, 9] = numpy.sum(
        x111 * (x1541 * x21 + x1542 * x21 + x1543 * x21 + x1604 * x167)
    )
    result[3, 7, 0] = numpy.sum(x122 * (x1514 * x22 + x1545 * x21 + x1546 * x21 + x1611))
    result[3, 7, 1] = numpy.sum(x242 * (x1517 * x22 + x1548 * x21 + x1549 * x21 + x1613))
    result[3, 7, 2] = numpy.sum(x242 * (x1520 * x22 + x1551 * x21 + x1552 * x21 + x1615))
    result[3, 7, 3] = numpy.sum(x242 * (x1523 * x22 + x1554 * x21 + x1555 * x21 + x1617))
    result[3, 7, 4] = numpy.sum(x277 * (x1526 * x22 + x1557 * x21 + x1558 * x21 + x1619))
    result[3, 7, 5] = numpy.sum(x242 * (x1529 * x22 + x1560 * x21 + x1561 * x21 + x1621))
    result[3, 7, 6] = numpy.sum(x122 * (x1532 * x22 + x1563 * x21 + x1564 * x21 + x1622))
    result[3, 7, 7] = numpy.sum(x242 * (x1535 * x22 + x1566 * x21 + x1567 * x21 + x1623))
    result[3, 7, 8] = numpy.sum(x242 * (x1538 * x22 + x1569 * x21 + x1570 * x21 + x1624))
    result[3, 7, 9] = numpy.sum(x122 * (x1541 * x22 + x1572 * x21 + x1573 * x21 + x1625))
    result[3, 8, 0] = numpy.sum(x122 * (x1545 * x22 + x1576 * x21 + x1628))
    result[3, 8, 1] = numpy.sum(x242 * (x1548 * x22 + x1579 * x21 + x1632))
    result[3, 8, 2] = numpy.sum(x242 * (x1551 * x22 + x1582 * x21 + x1635))
    result[3, 8, 3] = numpy.sum(x242 * (x1554 * x22 + x1585 * x21 + x1638))
    result[3, 8, 4] = numpy.sum(x277 * (x1557 * x22 + x1588 * x21 + x1642))
    result[3, 8, 5] = numpy.sum(x242 * (x1560 * x22 + x1591 * x21 + x1645))
    result[3, 8, 6] = numpy.sum(x122 * (x1563 * x22 + x1594 * x21 + x1647))
    result[3, 8, 7] = numpy.sum(x242 * (x1566 * x22 + x1597 * x21 + x1649))
    result[3, 8, 8] = numpy.sum(x242 * (x1569 * x22 + x1600 * x21 + x1652))
    result[3, 8, 9] = numpy.sum(x122 * (x1572 * x22 + x1603 * x21 + x1654))
    result[3, 9, 0] = numpy.sum(x111 * (x1576 * x22 + x1657))
    result[3, 9, 1] = numpy.sum(x122 * (x1579 * x22 + x1660))
    result[3, 9, 2] = numpy.sum(x122 * (x1582 * x22 + x1663))
    result[3, 9, 3] = numpy.sum(x122 * (x1585 * x22 + x1666))
    result[3, 9, 4] = numpy.sum(x145 * (x1588 * x22 + x1669))
    result[3, 9, 5] = numpy.sum(x122 * (x1591 * x22 + x1672))
    result[3, 9, 6] = numpy.sum(x111 * (x1594 * x22 + x1674))
    result[3, 9, 7] = numpy.sum(x122 * (x1597 * x22 + x1676))
    result[3, 9, 8] = numpy.sum(x122 * (x1600 * x22 + x1678))
    result[3, 9, 9] = numpy.sum(x111 * (x1603 * x22 + x1680))
    result[4, 0, 0] = numpy.sum(
        x144 * (x0 * x1681 + x0 * x554 + x0 * (x0 * (x0 * x1682 + x998) + x1681) + x560)
    )
    result[4, 0, 1] = numpy.sum(
        x145
        * (x0 * x1683 + x0 * x568 + x0 * (x0 * (x1000 + x1684 * x566) + x1683) + x572)
    )
    result[4, 0, 2] = numpy.sum(
        x145
        * (x0 * x1685 + x0 * x580 + x0 * (x0 * (x1002 + x1684 * x578) + x1685) + x584)
    )
    result[4, 0, 3] = numpy.sum(
        x145
        * (x0 * x1686 + x0 * x589 + x0 * (x0 * (x1004 * x1458 + x1005) + x1686) + x593)
    )
    result[4, 0, 4] = numpy.sum(
        x962
        * (x0 * x1687 + x0 * x598 + x0 * (x0 * (x1007 * x1458 + x1008) + x1687) + x602)
    )
    result[4, 0, 5] = numpy.sum(
        x145
        * (x0 * x1688 + x0 * x608 + x0 * (x0 * (x1010 * x1458 + x1011) + x1688) + x612)
    )
    result[4, 0, 6] = numpy.sum(
        x144 * (x0 * x1689 + x0 * x614 + x0 * (x0 * (x1013 + x1690 * x97) + x1689) + x617)
    )
    result[4, 0, 7] = numpy.sum(
        x145 * (x0 * x1691 + x0 * x620 + x0 * (x0 * (x1015 + x1692 * x97) + x1691) + x623)
    )
    result[4, 0, 8] = numpy.sum(
        x145 * (x0 * x1693 + x0 * x625 + x0 * (x0 * (x1017 + x1694 * x97) + x1693) + x628)
    )
    result[4, 0, 9] = numpy.sum(
        x144 * (x0 * x1695 + x0 * x630 + x0 * (x0 * (x1019 + x1696 * x97) + x1695) + x633)
    )
    result[4, 1, 0] = numpy.sum(x145 * (x0 * x1331 + x0 * (x0 * x1697 + x1331) + x1333))
    result[4, 1, 1] = numpy.sum(x277 * (x0 * x1334 + x0 * (x0 * x1699 + x1334) + x1336))
    result[4, 1, 2] = numpy.sum(x277 * (x0 * x1337 + x0 * (x0 * x1700 + x1337) + x1339))
    result[4, 1, 3] = numpy.sum(x277 * (x0 * x1340 + x0 * (x0 * x1701 + x1340) + x1342))
    result[4, 1, 4] = numpy.sum(x604 * (x0 * x1343 + x0 * (x0 * x1702 + x1343) + x1345))
    result[4, 1, 5] = numpy.sum(x277 * (x0 * x1346 + x0 * (x0 * x1703 + x1346) + x1348))
    result[4, 1, 6] = numpy.sum(x145 * (x0 * x1349 + x0 * (x0 * x1704 + x1349) + x1351))
    result[4, 1, 7] = numpy.sum(x277 * (x0 * x1352 + x0 * (x0 * x1705 + x1352) + x1354))
    result[4, 1, 8] = numpy.sum(x277 * (x0 * x1355 + x0 * (x0 * x1706 + x1355) + x1357))
    result[4, 1, 9] = numpy.sum(x145 * (x0 * x1358 + x0 * (x0 * x1707 + x1358) + x1360))
    result[4, 2, 0] = numpy.sum(x145 * (x0 * x1089 + x0 * (x0 * x1709 + x1089) + x854))
    result[4, 2, 1] = numpy.sum(x277 * (x0 * x1092 + x0 * (x0 * x1712 + x1092) + x862))
    result[4, 2, 2] = numpy.sum(x277 * (x0 * x1095 + x0 * (x0 * x1714 + x1095) + x870))
    result[4, 2, 3] = numpy.sum(x277 * (x0 * x1099 + x0 * (x0 * x1716 + x1099) + x876))
    result[4, 2, 4] = numpy.sum(x604 * (x0 * x1103 + x0 * (x0 * x1718 + x1103) + x882))
    result[4, 2, 5] = numpy.sum(x277 * (x0 * x1107 + x0 * (x0 * x1720 + x1107) + x888))
    result[4, 2, 6] = numpy.sum(x145 * (x0 * x1110 + x0 * (x0 * x1722 + x1110) + x891))
    result[4, 2, 7] = numpy.sum(x277 * (x0 * x1113 + x0 * (x0 * x1724 + x1113) + x894))
    result[4, 2, 8] = numpy.sum(x277 * (x0 * x1116 + x0 * (x0 * x1726 + x1116) + x897))
    result[4, 2, 9] = numpy.sum(x145 * (x0 * x1119 + x0 * (x0 * x1728 + x1119) + x900))
    result[4, 3, 0] = numpy.sum(x145 * (x0 * x1730 + x1405))
    result[4, 3, 1] = numpy.sum(x277 * (x0 * x1732 + x1406))
    result[4, 3, 2] = numpy.sum(x277 * (x0 * x1734 + x1407))
    result[4, 3, 3] = numpy.sum(x277 * (x0 * x1736 + x1408))
    result[4, 3, 4] = numpy.sum(x604 * (x0 * x1738 + x1409))
    result[4, 3, 5] = numpy.sum(x277 * (x0 * x1740 + x1410))
    result[4, 3, 6] = numpy.sum(x145 * (x0 * x1742 + x1411))
    result[4, 3, 7] = numpy.sum(x277 * (x0 * x1744 + x1412))
    result[4, 3, 8] = numpy.sum(x277 * (x0 * x1746 + x1413))
    result[4, 3, 9] = numpy.sum(x145 * (x0 * x1748 + x1414))
    result[4, 4, 0] = numpy.sum(x962 * (x0 * x1749 + x1415))
    result[4, 4, 1] = numpy.sum(x604 * (x0 * x1750 + x1416))
    result[4, 4, 2] = numpy.sum(x604 * (x0 * x1751 + x1417))
    result[4, 4, 3] = numpy.sum(x604 * (x0 * x1752 + x1418))
    result[4, 4, 4] = numpy.sum(x109 * (x0 * x1753 + x1419))
    result[4, 4, 5] = numpy.sum(x604 * (x0 * x1754 + x1420))
    result[4, 4, 6] = numpy.sum(x962 * (x0 * x1755 + x1421))
    result[4, 4, 7] = numpy.sum(x604 * (x0 * x1756 + x1422))
    result[4, 4, 8] = numpy.sum(x604 * (x0 * x1757 + x1423))
    result[4, 4, 9] = numpy.sum(x962 * (x0 * x1758 + x1424))
    result[4, 5, 0] = numpy.sum(x145 * (x0 * x1761 + x1234))
    result[4, 5, 1] = numpy.sum(x277 * (x0 * x1764 + x1238))
    result[4, 5, 2] = numpy.sum(x277 * (x0 * x1767 + x1242))
    result[4, 5, 3] = numpy.sum(x277 * (x0 * x1770 + x1246))
    result[4, 5, 4] = numpy.sum(x604 * (x0 * x1773 + x1250))
    result[4, 5, 5] = numpy.sum(x277 * (x0 * x1776 + x1254))
    result[4, 5, 6] = numpy.sum(x145 * (x0 * x1779 + x1256))
    result[4, 5, 7] = numpy.sum(x277 * (x0 * x1782 + x1258))
    result[4, 5, 8] = numpy.sum(x277 * (x0 * x1785 + x1260))
    result[4, 5, 9] = numpy.sum(x145 * (x0 * x1788 + x1262))
    result[4, 6, 0] = numpy.sum(x144 * (x1544 * x21 + x1611 + x1729 * x21 + x1730 * x21))
    result[4, 6, 1] = numpy.sum(x145 * (x1547 * x21 + x1613 + x1731 * x21 + x1732 * x21))
    result[4, 6, 2] = numpy.sum(x145 * (x1550 * x21 + x1615 + x1733 * x21 + x1734 * x21))
    result[4, 6, 3] = numpy.sum(x145 * (x1553 * x21 + x1617 + x1735 * x21 + x1736 * x21))
    result[4, 6, 4] = numpy.sum(x962 * (x1556 * x21 + x1619 + x1737 * x21 + x1738 * x21))
    result[4, 6, 5] = numpy.sum(x145 * (x1559 * x21 + x1621 + x1739 * x21 + x1740 * x21))
    result[4, 6, 6] = numpy.sum(x144 * (x1562 * x21 + x1622 + x1741 * x21 + x1742 * x21))
    result[4, 6, 7] = numpy.sum(x145 * (x1565 * x21 + x1623 + x1743 * x21 + x1744 * x21))
    result[4, 6, 8] = numpy.sum(x145 * (x1568 * x21 + x1624 + x1745 * x21 + x1746 * x21))
    result[4, 6, 9] = numpy.sum(x144 * (x1571 * x21 + x1625 + x1747 * x21 + x1748 * x21))
    result[4, 7, 0] = numpy.sum(x145 * (x1575 * x21 + x1628 + x1749 * x21))
    result[4, 7, 1] = numpy.sum(x277 * (x1578 * x21 + x1632 + x1750 * x21))
    result[4, 7, 2] = numpy.sum(x277 * (x1581 * x21 + x1635 + x1751 * x21))
    result[4, 7, 3] = numpy.sum(x277 * (x1584 * x21 + x1638 + x1752 * x21))
    result[4, 7, 4] = numpy.sum(x604 * (x1587 * x21 + x1642 + x1753 * x21))
    result[4, 7, 5] = numpy.sum(x277 * (x1590 * x21 + x1645 + x1754 * x21))
    result[4, 7, 6] = numpy.sum(x145 * (x1593 * x21 + x1647 + x1755 * x21))
    result[4, 7, 7] = numpy.sum(x277 * (x1596 * x21 + x1649 + x1756 * x21))
    result[4, 7, 8] = numpy.sum(x277 * (x1599 * x21 + x1652 + x1757 * x21))
    result[4, 7, 9] = numpy.sum(x145 * (x1602 * x21 + x1654 + x1758 * x21))
    result[4, 8, 0] = numpy.sum(x145 * (x1657 + x1761 * x21))
    result[4, 8, 1] = numpy.sum(x277 * (x1660 + x1764 * x21))
    result[4, 8, 2] = numpy.sum(x277 * (x1663 + x1767 * x21))
    result[4, 8, 3] = numpy.sum(x277 * (x1666 + x1770 * x21))
    result[4, 8, 4] = numpy.sum(x604 * (x1669 + x1773 * x21))
    result[4, 8, 5] = numpy.sum(x277 * (x1672 + x1776 * x21))
    result[4, 8, 6] = numpy.sum(x145 * (x1674 + x1779 * x21))
    result[4, 8, 7] = numpy.sum(x277 * (x1676 + x1782 * x21))
    result[4, 8, 8] = numpy.sum(x277 * (x1678 + x1785 * x21))
    result[4, 8, 9] = numpy.sum(x145 * (x1680 + x1788 * x21))
    result[4, 9, 0] = numpy.sum(x144 * (x1761 * x22 + x1790))
    result[4, 9, 1] = numpy.sum(x145 * (x1764 * x22 + x1792))
    result[4, 9, 2] = numpy.sum(x145 * (x1767 * x22 + x1794))
    result[4, 9, 3] = numpy.sum(x145 * (x1770 * x22 + x1796))
    result[4, 9, 4] = numpy.sum(x962 * (x1773 * x22 + x1798))
    result[4, 9, 5] = numpy.sum(x145 * (x1776 * x22 + x1800))
    result[4, 9, 6] = numpy.sum(x144 * (x1779 * x22 + x1801))
    result[4, 9, 7] = numpy.sum(x145 * (x1782 * x22 + x1802))
    result[4, 9, 8] = numpy.sum(x145 * (x1785 * x22 + x1803))
    result[4, 9, 9] = numpy.sum(x144 * (x1788 * x22 + x1804))
    result[5, 0, 0] = numpy.sum(
        x111
        * (x0 * x1805 + x0 * x657 + x0 * (x0 * (x1307 + x1450 * x1806) + x1805) + x667)
    )
    result[5, 0, 1] = numpy.sum(
        x122
        * (x0 * x1807 + x0 * x672 + x0 * (x0 * (x1309 + x1684 * x1808) + x1807) + x675)
    )
    result[5, 0, 2] = numpy.sum(
        x122
        * (x0 * x1809 + x0 * x683 + x0 * (x0 * (x1311 + x1684 * x680) + x1809) + x688)
    )
    result[5, 0, 3] = numpy.sum(
        x122
        * (x0 * x1810 + x0 * x690 + x0 * (x0 * (x1314 + x1806 * x1811) + x1810) + x693)
    )
    result[5, 0, 4] = numpy.sum(
        x145 * (x0 * x1812 + x0 * x695 + x0 * (x0 * (x0 * x1814 + x1317) + x1812) + x698)
    )
    result[5, 0, 5] = numpy.sum(
        x122
        * (x0 * x1815 + x0 * x702 + x0 * (x0 * (x1319 * x1458 + x1321) + x1815) + x707)
    )
    result[5, 0, 6] = numpy.sum(
        x111
        * (x0 * x1816 + x0 * x709 + x0 * (x0 * (x1323 + x152 * x1806) + x1816) + x712)
    )
    result[5, 0, 7] = numpy.sum(
        x122 * (x0 * x1817 + x0 * x714 + x0 * (x0 * (x0 * x1818 + x1325) + x1817) + x717)
    )
    result[5, 0, 8] = numpy.sum(
        x122 * (x0 * x1819 + x0 * x719 + x0 * (x0 * (x0 * x1820 + x1327) + x1819) + x722)
    )
    result[5, 0, 9] = numpy.sum(
        x111 * (x0 * x1821 + x0 * x724 + x0 * (x0 * (x1329 + x1822 * x97) + x1821) + x727)
    )
    result[5, 1, 0] = numpy.sum(
        x122 * (x0 * x1823 + x0 * (x0 * x1825 + x1823) + x21 * x657 + x853)
    )
    result[5, 1, 1] = numpy.sum(
        x242 * (x0 * x1826 + x0 * (x0 * x1827 + x1826) + x21 * x672 + x861)
    )
    result[5, 1, 2] = numpy.sum(
        x242 * (x0 * x1828 + x0 * (x0 * x1829 + x1828) + x21 * x683 + x869)
    )
    result[5, 1, 3] = numpy.sum(
        x242 * (x0 * x1830 + x0 * (x0 * x1831 + x1830) + x21 * x690 + x875)
    )
    result[5, 1, 4] = numpy.sum(
        x277 * (x0 * x1832 + x0 * (x0 * x1833 + x1832) + x21 * x695 + x881)
    )
    result[5, 1, 5] = numpy.sum(
        x242 * (x0 * x1834 + x0 * (x0 * x1835 + x1834) + x21 * x702 + x887)
    )
    result[5, 1, 6] = numpy.sum(
        x122 * (x0 * x1836 + x0 * (x0 * x1837 + x1836) + x21 * x709 + x890)
    )
    result[5, 1, 7] = numpy.sum(
        x242 * (x0 * x1838 + x0 * (x0 * x1839 + x1838) + x21 * x714 + x893)
    )
    result[5, 1, 8] = numpy.sum(
        x242 * (x0 * x1840 + x0 * (x0 * x1841 + x1840) + x21 * x719 + x896)
    )
    result[5, 1, 9] = numpy.sum(
        x122 * (x0 * x1842 + x0 * (x0 * x1843 + x1842) + x21 * x724 + x899)
    )
    result[5, 2, 0] = numpy.sum(x122 * (x0 * x1372 + x0 * (x0 * x1846 + x1372) + x917))
    result[5, 2, 1] = numpy.sum(x242 * (x0 * x1375 + x0 * (x0 * x1848 + x1375) + x921))
    result[5, 2, 2] = numpy.sum(x242 * (x0 * x1378 + x0 * (x0 * x1850 + x1378) + x928))
    result[5, 2, 3] = numpy.sum(x242 * (x0 * x1382 + x0 * (x0 * x1852 + x1382) + x930))
    result[5, 2, 4] = numpy.sum(x277 * (x0 * x1386 + x0 * (x0 * x1854 + x1386) + x932))
    result[5, 2, 5] = numpy.sum(x242 * (x0 * x1391 + x0 * (x0 * x1856 + x1391) + x936))
    result[5, 2, 6] = numpy.sum(x122 * (x0 * x1394 + x0 * (x0 * x1858 + x1394) + x938))
    result[5, 2, 7] = numpy.sum(x242 * (x0 * x1397 + x0 * (x0 * x1860 + x1397) + x940))
    result[5, 2, 8] = numpy.sum(x242 * (x0 * x1400 + x0 * (x0 * x1862 + x1400) + x942))
    result[5, 2, 9] = numpy.sum(x122 * (x0 * x1403 + x0 * (x0 * x1864 + x1403) + x944))
    result[5, 3, 0] = numpy.sum(x122 * (x0 * x1866 + x1088 * x21 + x1189 + x1823 * x21))
    result[5, 3, 1] = numpy.sum(x242 * (x0 * x1868 + x1091 * x21 + x1194 + x1826 * x21))
    result[5, 3, 2] = numpy.sum(x242 * (x0 * x1870 + x1094 * x21 + x1199 + x1828 * x21))
    result[5, 3, 3] = numpy.sum(x242 * (x0 * x1872 + x1098 * x21 + x1204 + x1830 * x21))
    result[5, 3, 4] = numpy.sum(x277 * (x0 * x1874 + x1102 * x21 + x1209 + x1832 * x21))
    result[5, 3, 5] = numpy.sum(x242 * (x0 * x1876 + x1106 * x21 + x1214 + x1834 * x21))
    result[5, 3, 6] = numpy.sum(x122 * (x0 * x1878 + x1109 * x21 + x1217 + x1836 * x21))
    result[5, 3, 7] = numpy.sum(x242 * (x0 * x1880 + x1112 * x21 + x1220 + x1838 * x21))
    result[5, 3, 8] = numpy.sum(x242 * (x0 * x1882 + x1115 * x21 + x1223 + x1840 * x21))
    result[5, 3, 9] = numpy.sum(x122 * (x0 * x1884 + x1118 * x21 + x1226 + x1842 * x21))
    result[5, 4, 0] = numpy.sum(x145 * (x0 * x1885 + x1233 + x1372 * x21))
    result[5, 4, 1] = numpy.sum(x277 * (x0 * x1886 + x1237 + x1375 * x21))
    result[5, 4, 2] = numpy.sum(x277 * (x0 * x1887 + x1241 + x1378 * x21))
    result[5, 4, 3] = numpy.sum(x277 * (x0 * x1888 + x1245 + x1382 * x21))
    result[5, 4, 4] = numpy.sum(x604 * (x0 * x1889 + x1249 + x1386 * x21))
    result[5, 4, 5] = numpy.sum(x277 * (x0 * x1890 + x1253 + x1391 * x21))
    result[5, 4, 6] = numpy.sum(x145 * (x0 * x1891 + x1255 + x1394 * x21))
    result[5, 4, 7] = numpy.sum(x277 * (x0 * x1892 + x1257 + x1397 * x21))
    result[5, 4, 8] = numpy.sum(x277 * (x0 * x1893 + x1259 + x1400 * x21))
    result[5, 4, 9] = numpy.sum(x145 * (x0 * x1894 + x1261 + x1403 * x21))
    result[5, 5, 0] = numpy.sum(x122 * (x0 * x1897 + x1430))
    result[5, 5, 1] = numpy.sum(x242 * (x0 * x1900 + x1432))
    result[5, 5, 2] = numpy.sum(x242 * (x0 * x1903 + x1436))
    result[5, 5, 3] = numpy.sum(x242 * (x0 * x1906 + x1438))
    result[5, 5, 4] = numpy.sum(x277 * (x0 * x1909 + x1440))
    result[5, 5, 5] = numpy.sum(x242 * (x0 * x1912 + x1444))
    result[5, 5, 6] = numpy.sum(x122 * (x0 * x1915 + x1445))
    result[5, 5, 7] = numpy.sum(x242 * (x0 * x1918 + x1446))
    result[5, 5, 8] = numpy.sum(x242 * (x0 * x1921 + x1447))
    result[5, 5, 9] = numpy.sum(x122 * (x0 * x1924 + x1448))
    result[5, 6, 0] = numpy.sum(x111 * (x1574 * x21 + x1627 + x1865 * x21 + x1866 * x21))
    result[5, 6, 1] = numpy.sum(x122 * (x1577 * x21 + x1631 + x1867 * x21 + x1868 * x21))
    result[5, 6, 2] = numpy.sum(x122 * (x1580 * x21 + x1634 + x1869 * x21 + x1870 * x21))
    result[5, 6, 3] = numpy.sum(x122 * (x1583 * x21 + x1637 + x1871 * x21 + x1872 * x21))
    result[5, 6, 4] = numpy.sum(x145 * (x1586 * x21 + x1641 + x1873 * x21 + x1874 * x21))
    result[5, 6, 5] = numpy.sum(x122 * (x1589 * x21 + x1644 + x1875 * x21 + x1876 * x21))
    result[5, 6, 6] = numpy.sum(x111 * (x1592 * x21 + x1646 + x1877 * x21 + x1878 * x21))
    result[5, 6, 7] = numpy.sum(x122 * (x1595 * x21 + x1648 + x1879 * x21 + x1880 * x21))
    result[5, 6, 8] = numpy.sum(x122 * (x1598 * x21 + x1651 + x1881 * x21 + x1882 * x21))
    result[5, 6, 9] = numpy.sum(x111 * (x1601 * x21 + x1653 + x1883 * x21 + x1884 * x21))
    result[5, 7, 0] = numpy.sum(x122 * (x1656 + x1760 * x21 + x1885 * x21))
    result[5, 7, 1] = numpy.sum(x242 * (x1659 + x1763 * x21 + x1886 * x21))
    result[5, 7, 2] = numpy.sum(x242 * (x1662 + x1766 * x21 + x1887 * x21))
    result[5, 7, 3] = numpy.sum(x242 * (x1665 + x1769 * x21 + x1888 * x21))
    result[5, 7, 4] = numpy.sum(x277 * (x1668 + x1772 * x21 + x1889 * x21))
    result[5, 7, 5] = numpy.sum(x242 * (x1671 + x1775 * x21 + x1890 * x21))
    result[5, 7, 6] = numpy.sum(x122 * (x1673 + x1778 * x21 + x1891 * x21))
    result[5, 7, 7] = numpy.sum(x242 * (x1675 + x1781 * x21 + x1892 * x21))
    result[5, 7, 8] = numpy.sum(x242 * (x1677 + x1784 * x21 + x1893 * x21))
    result[5, 7, 9] = numpy.sum(x122 * (x1679 + x1787 * x21 + x1894 * x21))
    result[5, 8, 0] = numpy.sum(x122 * (x1790 + x1897 * x21))
    result[5, 8, 1] = numpy.sum(x242 * (x1792 + x1900 * x21))
    result[5, 8, 2] = numpy.sum(x242 * (x1794 + x1903 * x21))
    result[5, 8, 3] = numpy.sum(x242 * (x1796 + x1906 * x21))
    result[5, 8, 4] = numpy.sum(x277 * (x1798 + x1909 * x21))
    result[5, 8, 5] = numpy.sum(x242 * (x1800 + x1912 * x21))
    result[5, 8, 6] = numpy.sum(x122 * (x1801 + x1915 * x21))
    result[5, 8, 7] = numpy.sum(x242 * (x1802 + x1918 * x21))
    result[5, 8, 8] = numpy.sum(x242 * (x1803 + x1921 * x21))
    result[5, 8, 9] = numpy.sum(x122 * (x1804 + x1924 * x21))
    result[5, 9, 0] = numpy.sum(
        x111 * (x1450 * x1925 + x1895 * x22 + x1896 * x22 + x1897 * x22)
    )
    result[5, 9, 1] = numpy.sum(
        x122 * (x1425 * x1898 + x1847 * x1925 + x1899 * x22 + x1900 * x22)
    )
    result[5, 9, 2] = numpy.sum(
        x122 * (x1453 * x1926 + x1901 * x22 + x1902 * x22 + x1903 * x22)
    )
    result[5, 9, 3] = numpy.sum(
        x122 * (x1811 * x1925 + x1904 * x22 + x1905 * x22 + x1906 * x22)
    )
    result[5, 9, 4] = numpy.sum(
        x145 * (x1813 * x1926 + x1907 * x22 + x1908 * x22 + x1909 * x22)
    )
    result[5, 9, 5] = numpy.sum(
        x122 * (x1910 * x22 + x1911 * x22 + x1912 * x22 + x1927 * x950)
    )
    result[5, 9, 6] = numpy.sum(
        x111 * (x152 * x1925 + x1913 * x22 + x1914 * x22 + x1915 * x22)
    )
    result[5, 9, 7] = numpy.sum(
        x122 * (x157 * x1926 + x1916 * x22 + x1917 * x22 + x1918 * x22)
    )
    result[5, 9, 8] = numpy.sum(
        x122 * (x138 * x1927 + x1919 * x22 + x1920 * x22 + x1921 * x22)
    )
    result[5, 9, 9] = numpy.sum(
        x111
        * (x1922 * x22 + x1923 * x22 + x1924 * x22 + x71 * (x123 * x1927 + 5.0 * x1442))
    )
    return result


def int3c2e3d_sph_234(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (df|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((6, 10, 15), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(5, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x20 * x23
    x25 = x2 * x24
    x26 = 2.0 * x19 * x25
    x27 = x18 * x26
    x28 = cx ** (-1.0)
    x29 = x14 ** (-0.5)
    x30 = boys(4, x17)
    x31 = 2.0 * x2 * x20 * x23 * x28 * x29 * x30 - x27
    x32 = x31 * x6
    x33 = -2.0 * x2 * x20 * x23 * x28 * x29 * x30 * x5 + x27 * x4
    x34 = -x33
    x35 = boys(6, x17)
    x36 = x26 * x35
    x37 = -2.0 * x18 * x2 * x20 * x23 * x28 * x29 * x5 + x36 * x4
    x38 = -x37
    x39 = x16 * x38
    x40 = x39 * x4
    x41 = x32 + x34 * x5 - x40
    x42 = -x33 - x39
    x43 = 2.0 * x6
    x44 = 2.0 * x18 * x2 * x20 * x23 * x28 * x29 - x36
    x45 = x44 * x6
    x46 = boys(7, x17)
    x47 = x26 * x46
    x48 = -2.0 * x2 * x20 * x23 * x28 * x29 * x35 * x5 + x4 * x47
    x49 = -x48
    x50 = x16 * x49
    x51 = x4 * x50
    x52 = x38 * x5 + x45 - x51
    x53 = x16 * x52
    x54 = x4 * x53
    x55 = x41 * x5 + x42 * x43 - x54
    x56 = -x31 * x6
    x57 = 3.0 * x6
    x58 = x6 * (2.0 * x2 * x20 * x23 * x28 * x29 * x35 - x47)
    x59 = boys(8, x17)
    x60 = x26 * x59
    x61 = 2.0 * x2 * x20 * x23 * x28 * x29 * x46 * x5 - x4 * x60
    x62 = x16 * x61
    x63 = -x4 * x62 + x49 * x5 + x58
    x64 = x16 * x63
    x65 = -x4 * x64 - x43 * (x37 + x50) + x5 * x52
    x66 = x16 * x65
    x67 = -x4 * x66 + x5 * x55 - x57 * (-x34 * x5 + x40 + x53 + x56)
    x68 = x4 * x67
    x69 = x55 * x6
    x70 = 4.0 * x69
    x71 = x68 + x70
    x72 = x1 * x15
    x73 = x4 * x72
    x74 = x4 * x55
    x75 = x41 * x6
    x76 = 3.0 * x75
    x77 = x74 + x76
    x78 = 4.0 * x6
    x79 = x72 * x78
    x80 = x71 * x73 + x77 * x79
    x81 = x4 * x41
    x82 = x34 * x6
    x83 = 2.0 * x82
    x84 = x81 + x83
    x85 = x57 * x72
    x86 = x73 * x77 + x84 * x85
    x87 = x73 * x80 + x79 * x86
    x88 = x34 * x4
    x89 = x28 * x30 * x43
    x90 = x25 * x29 * x89
    x91 = x88 + x90
    x92 = x43 * x72
    x93 = x73 * x84 + x91 * x92
    x94 = x73 * x86 + x85 * x93
    x95 = x72 * (x73 * x87 + x79 * x94)
    x96 = x24 * x89
    x97 = x19 * x96
    x98 = x4 * x97 + x73 * x91
    x99 = x73 * x93 + x92 * x98
    x100 = x72 * (x73 * x94 + x85 * x99)
    x101 = x0 * x100 + x95
    x102 = x1 * x14 ** (-2.5) * x96
    x103 = x73 * x99 + x92 * (x102 * x7 + x73 * x98)
    x104 = x0 * x72
    x105 = -x44 * x6
    x106 = x6 * (2.0 * x2 * x20 * x23 * x28 * x29 * x46 - x60)
    x107 = x26 * boys(9, x17)
    x108 = x16 * x4
    x109 = (
        -x108
        * (
            x108
            * (
                x108
                * (
                    x106
                    + x108 * (x107 * x4 - 2.0 * x2 * x20 * x23 * x28 * x29 * x5 * x59)
                    + x5 * x61
                )
                + x43 * (x48 + x62)
                - x5 * x63
            )
            + x5 * x65
            - x57 * (x105 - x38 * x5 + x51 + x64)
        )
        + x5 * x67
        + x78 * (x41 * x5 + 2.0 * x42 * x6 - x54 - x66)
    )
    x110 = x109 * x4
    x111 = x6 * x67
    x112 = 5.0 * x111
    x113 = x6 * x72
    x114 = 5.0 * x113
    x115 = da * db * dc
    x116 = 0.003174603174603175 * x115
    x117 = 4.58257569495584 * x116
    x118 = x72 * x9
    x119 = x118 * (x68 + x70)
    x120 = x118 * (x74 + x76)
    x121 = x119 * x73 + x120 * x79
    x122 = x118 * (x81 + x83)
    x123 = x120 * x73 + x122 * x85
    x124 = x72 * (x121 * x73 + x123 * x79)
    x125 = x9 * x97
    x126 = x118 * x88 + x125
    x127 = x122 * x73 + x126 * x92
    x128 = x72 * (x123 * x73 + x127 * x85)
    x129 = x0 * x128 + x124
    x130 = x102 * x4
    x131 = x127 * x73 + x92 * (x126 * x73 + x130 * x9)
    x132 = 1.732050807568877
    x133 = 0.02222222222222222 * x115
    x134 = x132 * x133
    x135 = x12 * x72
    x136 = x135 * (x68 + x70)
    x137 = x135 * (x74 + x76)
    x138 = x136 * x73 + x137 * x79
    x139 = x135 * (x81 + x83)
    x140 = x137 * x73 + x139 * x85
    x141 = x72 * (x138 * x73 + x140 * x79)
    x142 = x12 * x97
    x143 = x135 * x88 + x142
    x144 = x139 * x73 + x143 * x92
    x145 = x72 * (x140 * x73 + x144 * x85)
    x146 = x0 * x145 + x141
    x147 = x144 * x73 + x92 * (x12 * x130 + x143 * x73)
    x148 = x1**2 / x14**2
    x149 = x10 * x148
    x150 = x149 * (x68 + x70)
    x151 = x149 * (x74 + x76)
    x152 = x72 * (x150 * x73 + x151 * x79)
    x153 = x149 * (x81 + x83)
    x154 = x72 * (x151 * x73 + x153 * x85)
    x155 = x0 * x154 + x152
    x156 = x10 * x102
    x157 = x153 * x73 + x92 * (x149 * x88 + x156)
    x158 = 2.23606797749979
    x159 = x133 * x158
    x160 = x148 * x9
    x161 = x12 * x160
    x162 = x161 * (x68 + x70)
    x163 = x161 * (x74 + x76)
    x164 = x72 * (x162 * x73 + x163 * x79)
    x165 = x161 * (x81 + x83)
    x166 = x72 * (x163 * x73 + x165 * x85)
    x167 = x0 * x166 + x164
    x168 = x102 * x12 * x9
    x169 = x165 * x73 + x92 * (x161 * x88 + x168)
    x170 = 3.872983346207417
    x171 = x133 * x170
    x172 = x13 * x148
    x173 = x172 * (x68 + x70)
    x174 = x172 * (x74 + x76)
    x175 = x72 * (x173 * x73 + x174 * x79)
    x176 = x172 * (x81 + x83)
    x177 = x72 * (x174 * x73 + x176 * x85)
    x178 = x0 * x177 + x175
    x179 = x102 * x13
    x180 = x176 * x73 + x92 * (x172 * x88 + x179)
    x181 = x9**3
    x182 = x1**3 / x14**3
    x183 = x181 * x182
    x184 = x183 * x72 * (x68 + x70)
    x185 = x183 * x72 * (x74 + x76)
    x186 = x0 * x185 + x184
    x187 = x183 * (x81 + x83)
    x188 = x10 * x182
    x189 = x12 * x188
    x190 = x189 * x72 * (x68 + x70)
    x191 = x189 * x72 * (x74 + x76)
    x192 = x0 * x191 + x190
    x193 = x189 * (x81 + x83)
    x194 = x182 * x9
    x195 = x13 * x194
    x196 = x195 * x72 * (x68 + x70)
    x197 = x195 * x72 * (x74 + x76)
    x198 = x0 * x197 + x196
    x199 = x195 * (x81 + x83)
    x200 = x12**3
    x201 = x182 * x200
    x202 = x201 * x72 * (x68 + x70)
    x203 = x201 * x72 * (x74 + x76)
    x204 = x0 * x203 + x202
    x205 = x201 * (x81 + x83)
    x206 = x1**4 / x14**4
    x207 = x206 * x9**4
    x208 = x207 * x67
    x209 = x207 * x55
    x210 = x0 * x209 + x208
    x211 = x0 * x41
    x212 = x181 * x206
    x213 = x12 * x212
    x214 = x213 * x67
    x215 = x213 * x55
    x216 = x0 * x215 + x214
    x217 = x206 * x67
    x218 = x10 * x13
    x219 = x217 * x218
    x220 = x206 * x218
    x221 = x220 * x55
    x222 = x0 * x221 + x219
    x223 = x200 * x9
    x224 = x217 * x223
    x225 = x206 * x223
    x226 = x225 * x55
    x227 = x0 * x226 + x224
    x228 = x12**4 * x206
    x229 = x228 * x67
    x230 = x228 * x55
    x231 = x0 * x230 + x229
    x232 = -x8 - A[1]
    x233 = -2.0 * x18 * x2 * x20 * x23 * x232 * x28 * x29 + x36 * x9
    x234 = -x233
    x235 = x16 * x234
    x236 = -2.0 * x2 * x20 * x23 * x232 * x28 * x29 * x30 + x27 * x9
    x237 = -x235 - x236
    x238 = x237 * x6
    x239 = -x236
    x240 = x235 * x4 - x239 * x5
    x241 = -x240
    x242 = -2.0 * x2 * x20 * x23 * x232 * x28 * x29 * x35 + x47 * x9
    x243 = -x242
    x244 = x16 * x243
    x245 = -x234 * x5 + x244 * x4
    x246 = -x245
    x247 = x16 * x246
    x248 = x247 * x4
    x249 = x238 + x241 * x5 - x248
    x250 = -x6 * (x233 + x244)
    x251 = 2.0 * x2 * x20 * x23 * x232 * x28 * x29 * x46 - x60 * x9
    x252 = x16 * x251
    x253 = x243 * x5 - x252 * x4
    x254 = x16 * x253
    x255 = x246 * x5 + x250 - x254 * x4
    x256 = x16 * x255
    x257 = x249 * x5 - x256 * x4 - x43 * (x240 + x247)
    x258 = x257 * x4
    x259 = x249 * x6
    x260 = 3.0 * x259
    x261 = x258 + x260
    x262 = x249 * x4
    x263 = x241 * x6
    x264 = 2.0 * x263
    x265 = x262 + x264
    x266 = x261 * x73 + x265 * x85
    x267 = x239 * x6
    x268 = x241 * x4
    x269 = x267 + x268
    x270 = x265 * x73 + x269 * x92
    x271 = x266 * x73 + x270 * x85
    x272 = x73 * (x267 + x269)
    x273 = x270 * x73 + x272 * x92
    x274 = x72 * (x271 * x73 + x273 * x85)
    x275 = x100 * x21 + x274
    x276 = x148 * x7
    x277 = x267 * x276 + x272 * x73
    x278 = x72 * (x273 * x73 + x277 * x92)
    x279 = x21 * x72
    x280 = x103 * x279 + x278
    x281 = -x6 * (x242 + x252)
    x282 = -x107 * x9 + 2.0 * x2 * x20 * x23 * x232 * x28 * x29 * x59
    x283 = (
        x108
        * (
            x108 * (x108 * (x108 * x282 - x251 * x5) + x253 * x5 + x281)
            - x255 * x5
            + x43 * (x245 + x254)
        )
        + x257 * x5
        + x57 * (x237 * x6 + x241 * x5 - x248 - x256)
    )
    x284 = x283 * x4
    x285 = x257 * x6
    x286 = 4.0 * x285
    x287 = x72 * (
        x271 * x79 + x73 * (x266 * x79 + x73 * (x261 * x79 + x73 * (x284 + x286)))
    )
    x288 = 10.2469507659596
    x289 = x116 * x288
    x290 = x257 * x9
    x291 = x290 + x69
    x292 = x249 * x9
    x293 = x292 + x75
    x294 = x291 * x73 + x293 * x85
    x295 = x241 * x9
    x296 = x295 + x82
    x297 = x296 * x92
    x298 = x293 * x73 + x297
    x299 = x294 * x73 + x298 * x85
    x300 = x239 * x9
    x301 = x300 + x90
    x302 = x301 * x72
    x303 = x296 * x73 + x302 * x6
    x304 = x298 * x73 + x303 * x92
    x305 = x72 * (x299 * x73 + x304 * x85)
    x306 = x128 * x21 + x305
    x307 = x148 * x4
    x308 = x307 * x6
    x309 = x301 * x308 + x303 * x73
    x310 = x72 * (x304 * x73 + x309 * x92)
    x311 = x131 * x279 + x310
    x312 = x283 * x9
    x313 = x111 + x312
    x314 = x72 * (x299 * x79 + x73 * (x294 * x79 + x73 * (x291 * x79 + x313 * x73)))
    x315 = x135 * (x258 + x260)
    x316 = x135 * x264
    x317 = x135 * x262 + x316
    x318 = x315 * x73 + x317 * x85
    x319 = x135 * x267
    x320 = x135 * x268 + x319
    x321 = x317 * x73 + x320 * x92
    x322 = x72 * (x318 * x73 + x321 * x85)
    x323 = x145 * x21 + x322
    x324 = x12 * x307
    x325 = x267 * x324 + x320 * x73
    x326 = x72 * (x321 * x73 + x325 * x92)
    x327 = x147 * x279 + x326
    x328 = x72 * (x318 * x79 + x73 * (x135 * x73 * (x284 + x286) + x315 * x79))
    x329 = x118 * (x291 + x69)
    x330 = x118 * (x293 + x75)
    x331 = x329 * x73 + x330 * x85
    x332 = x118 * (x296 + x82)
    x333 = x332 * x92
    x334 = x330 * x73 + x333
    x335 = x72 * (x331 * x73 + x334 * x85)
    x336 = x154 * x21 + x335
    x337 = x125 + x302 * x9
    x338 = x113 * x337 + x332 * x73
    x339 = x72 * (x334 * x73 + x338 * x92)
    x340 = x157 * x279 + x339
    x341 = x118 * (x111 + x313)
    x342 = x72 * (x331 * x79 + x73 * (x329 * x79 + x341 * x73))
    x343 = 0.1111111111111111 * x115
    x344 = x135 * x69
    x345 = x135 * x290 + x344
    x346 = x135 * x75
    x347 = x135 * x292 + x346
    x348 = x345 * x73 + x347 * x85
    x349 = x135 * x82
    x350 = x135 * x295 + x349
    x351 = x350 * x92
    x352 = x347 * x73 + x351
    x353 = x72 * (x348 * x73 + x352 * x85)
    x354 = x166 * x21 + x353
    x355 = x135 * x300 + x142
    x356 = x113 * x355 + x350 * x73
    x357 = x72 * (x352 * x73 + x356 * x92)
    x358 = x169 * x279 + x357
    x359 = x111 * x135
    x360 = x135 * x312 + x359
    x361 = x72 * (x348 * x79 + x73 * (x345 * x79 + x360 * x73))
    x362 = x132 * x343
    x363 = x172 * (x258 + x260)
    x364 = x172 * x264
    x365 = x172 * x262 + x364
    x366 = x72 * (x363 * x73 + x365 * x85)
    x367 = x177 * x21 + x366
    x368 = x172 * x267
    x369 = x172 * x268 + x368
    x370 = x72 * (x365 * x73 + x369 * x92)
    x371 = x180 * x279 + x370
    x372 = x72 * (x172 * x73 * (x284 + x286) + x363 * x79)
    x373 = x118 * x329 + x149 * x69
    x374 = x118 * x330 + x149 * x75
    x375 = x72 * (x373 * x73 + x374 * x85)
    x376 = x185 * x21 + x375
    x377 = x118 * x332 + x149 * x82
    x378 = x377 * x92
    x379 = x72 * (x374 * x73 + x378)
    x380 = x187 * x279 + x379
    x381 = x111 * x149 + x118 * x341
    x382 = x72 * (x373 * x79 + x381 * x73)
    x383 = x118 * x345 + x161 * x69
    x384 = x118 * x347 + x161 * x75
    x385 = x72 * (x383 * x73 + x384 * x85)
    x386 = x191 * x21 + x385
    x387 = x118 * x350 + x161 * x82
    x388 = x387 * x92
    x389 = x72 * (x384 * x73 + x388)
    x390 = x193 * x279 + x389
    x391 = x111 * x161 + x118 * x360
    x392 = x72 * (x383 * x79 + x391 * x73)
    x393 = x172 * x69
    x394 = x172 * x290 + x393
    x395 = x172 * x75
    x396 = x172 * x292 + x395
    x397 = x72 * (x394 * x73 + x396 * x85)
    x398 = x197 * x21 + x397
    x399 = x172 * x82
    x400 = x172 * x295 + x399
    x401 = x400 * x92
    x402 = x72 * (x396 * x73 + x401)
    x403 = x199 * x279 + x402
    x404 = x111 * x172
    x405 = x172 * x312 + x404
    x406 = x72 * (x394 * x79 + x405 * x73)
    x407 = x201 * x72 * (x258 + x260)
    x408 = x203 * x21 + x407
    x409 = x201 * x264
    x410 = x72 * (x201 * x262 + x409)
    x411 = x205 * x279 + x410
    x412 = x201 * x72 * (x284 + x286)
    x413 = x72 * (x118 * x373 + x183 * x69)
    x414 = x209 * x21 + x413
    x415 = x72 * (x118 * x374 + x183 * x75)
    x416 = x21 * x41
    x417 = x207 * x416 + x415
    x418 = x72 * (x111 * x183 + x118 * x381)
    x419 = x72 * (x118 * x383 + x189 * x69)
    x420 = x21 * x215 + x419
    x421 = x72 * (x118 * x384 + x189 * x75)
    x422 = x213 * x416 + x421
    x423 = x72 * (x111 * x189 + x118 * x391)
    x424 = x72 * (x118 * x394 + x195 * x69)
    x425 = x21 * x221 + x424
    x426 = x72 * (x118 * x396 + x195 * x75)
    x427 = x220 * x416 + x426
    x428 = x72 * (x111 * x195 + x118 * x405)
    x429 = x201 * x69
    x430 = x72 * (x201 * x290 + x429)
    x431 = x21 * x226 + x430
    x432 = x201 * x75
    x433 = x72 * (x201 * x292 + x432)
    x434 = x225 * x416 + x433
    x435 = x111 * x201
    x436 = x72 * (x201 * x312 + x435)
    x437 = x228 * x257
    x438 = x21 * x230 + x437
    x439 = x228 * x249
    x440 = x228 * x416 + x439
    x441 = x228 * x283
    x442 = -x11 - A[2]
    x443 = x12 * x36 - 2.0 * x18 * x2 * x20 * x23 * x28 * x29 * x442
    x444 = -x443
    x445 = x16 * x444
    x446 = x12 * x27 - 2.0 * x2 * x20 * x23 * x28 * x29 * x30 * x442
    x447 = -x445 - x446
    x448 = x447 * x6
    x449 = -x446
    x450 = x4 * x445 - x449 * x5
    x451 = -x450
    x452 = x12 * x47 - 2.0 * x2 * x20 * x23 * x28 * x29 * x35 * x442
    x453 = -x452
    x454 = x16 * x453
    x455 = x4 * x454 - x444 * x5
    x456 = -x455
    x457 = x16 * x456
    x458 = x4 * x457
    x459 = x448 + x451 * x5 - x458
    x460 = -x6 * (x443 + x454)
    x461 = -x12 * x60 + 2.0 * x2 * x20 * x23 * x28 * x29 * x442 * x46
    x462 = x16 * x461
    x463 = -x4 * x462 + x453 * x5
    x464 = x16 * x463
    x465 = -x4 * x464 + x456 * x5 + x460
    x466 = x16 * x465
    x467 = -x4 * x466 - x43 * (x450 + x457) + x459 * x5
    x468 = x4 * x467
    x469 = x459 * x6
    x470 = 3.0 * x469
    x471 = x468 + x470
    x472 = x4 * x459
    x473 = x451 * x6
    x474 = 2.0 * x473
    x475 = x472 + x474
    x476 = x471 * x73 + x475 * x85
    x477 = x449 * x6
    x478 = x4 * x451
    x479 = x477 + x478
    x480 = x475 * x73 + x479 * x92
    x481 = x476 * x73 + x480 * x85
    x482 = x73 * (x477 + x479)
    x483 = x480 * x73 + x482 * x92
    x484 = x72 * (x481 * x73 + x483 * x85)
    x485 = x100 * x22 + x484
    x486 = x276 * x477 + x482 * x73
    x487 = x72 * (x483 * x73 + x486 * x92)
    x488 = x22 * x72
    x489 = x103 * x488 + x487
    x490 = -x447 * x6
    x491 = -x6 * (x452 + x462)
    x492 = -x107 * x12 + 2.0 * x2 * x20 * x23 * x28 * x29 * x442 * x59
    x493 = (
        x108
        * (
            x108 * (x108 * (x108 * x492 - x461 * x5) + x463 * x5 + x491)
            + x43 * (x455 + x464)
            - x465 * x5
        )
        + x467 * x5
        - x57 * (-x451 * x5 + x458 + x466 + x490)
    )
    x494 = x4 * x493
    x495 = x467 * x6
    x496 = 4.0 * x495
    x497 = x72 * (
        x481 * x79 + x73 * (x476 * x79 + x73 * (x471 * x79 + x73 * (x494 + x496)))
    )
    x498 = x118 * (x468 + x470)
    x499 = x118 * (x472 + x474)
    x500 = x498 * x73 + x499 * x85
    x501 = x118 * x477
    x502 = x118 * x478 + x501
    x503 = x499 * x73 + x502 * x92
    x504 = x72 * (x500 * x73 + x503 * x85)
    x505 = x128 * x22 + x504
    x506 = x160 * x4
    x507 = x477 * x506 + x502 * x73
    x508 = x72 * (x503 * x73 + x507 * x92)
    x509 = x131 * x488 + x508
    x510 = x72 * (x500 * x79 + x73 * (x118 * x73 * (x494 + x496) + x498 * x79))
    x511 = x12 * x467 + x69
    x512 = x12 * x459 + x75
    x513 = x511 * x73 + x512 * x85
    x514 = x12 * x451 + x82
    x515 = x514 * x92
    x516 = x512 * x73 + x515
    x517 = x513 * x73 + x516 * x85
    x518 = x12 * x449 + x90
    x519 = x113 * x518
    x520 = x514 * x73 + x519
    x521 = x516 * x73 + x520 * x92
    x522 = x72 * (x517 * x73 + x521 * x85)
    x523 = x145 * x22 + x522
    x524 = x308 * x518 + x520 * x73
    x525 = x72 * (x521 * x73 + x524 * x92)
    x526 = x147 * x488 + x525
    x527 = x111 + x12 * x493
    x528 = x72 * (x517 * x79 + x73 * (x513 * x79 + x73 * (x511 * x79 + x527 * x73)))
    x529 = x149 * (x468 + x470)
    x530 = x149 * (x472 + x474)
    x531 = x72 * (x529 * x73 + x530 * x85)
    x532 = x154 * x22 + x531
    x533 = x149 * x477
    x534 = x149 * x478 + x533
    x535 = x72 * (x530 * x73 + x534 * x92)
    x536 = x157 * x488 + x535
    x537 = x72 * (x149 * x73 * (x494 + x496) + x529 * x79)
    x538 = x512 * x57
    x539 = x160 * x538 + x506 * x511
    x540 = x43 * x514
    x541 = x160 * x540 + x506 * x512
    x542 = x72 * (x539 * x73 + x541 * x85)
    x543 = x166 * x22 + x542
    x544 = x160 * x6
    x545 = x518 * x544
    x546 = x506 * x514 + x545
    x547 = x72 * (x541 * x73 + x546 * x92)
    x548 = x169 * x488 + x547
    x549 = x511 * x78
    x550 = x72 * (x539 * x79 + x73 * (x160 * x549 + x506 * x527))
    x551 = x135 * x511 + x344
    x552 = x135 * x512 + x346
    x553 = x551 * x73 + x552 * x85
    x554 = x135 * x514 + x349
    x555 = x554 * x92
    x556 = x552 * x73 + x555
    x557 = x72 * (x553 * x73 + x556 * x85)
    x558 = x177 * x22 + x557
    x559 = x135 * x518 + x142
    x560 = x113 * x559
    x561 = x554 * x73 + x560
    x562 = x72 * (x556 * x73 + x561 * x92)
    x563 = x180 * x488 + x562
    x564 = x135 * x527 + x359
    x565 = x72 * (x553 * x79 + x73 * (x551 * x79 + x564 * x73))
    x566 = x183 * x72 * (x468 + x470)
    x567 = x185 * x22 + x566
    x568 = x183 * x72 * (x472 + x474)
    x569 = x187 * x488 + x568
    x570 = x183 * x72 * (x494 + x496)
    x571 = x188 * x4
    x572 = x72 * (x188 * x538 + x511 * x571)
    x573 = x191 * x22 + x572
    x574 = x72 * (x188 * x540 + x512 * x571)
    x575 = x193 * x488 + x574
    x576 = x72 * (x188 * x549 + x527 * x571)
    x577 = x160 * x57
    x578 = x72 * (x506 * x551 + x552 * x577)
    x579 = x197 * x22 + x578
    x580 = x160 * x43
    x581 = x72 * (x506 * x552 + x554 * x580)
    x582 = x199 * x488 + x581
    x583 = x72 * (x160 * x551 * x78 + x506 * x564)
    x584 = x135 * x551 + x393
    x585 = x135 * x552 + x395
    x586 = x72 * (x584 * x73 + x585 * x85)
    x587 = x203 * x22 + x586
    x588 = x135 * x554 + x399
    x589 = x588 * x92
    x590 = x72 * (x585 * x73 + x589)
    x591 = x205 * x488 + x590
    x592 = x135 * x564 + x404
    x593 = x72 * (x584 * x79 + x592 * x73)
    x594 = x207 * x467
    x595 = x209 * x22 + x594
    x596 = x207 * x459
    x597 = x22 * x41
    x598 = x207 * x597 + x596
    x599 = x207 * x493
    x600 = x212 * x511
    x601 = x215 * x22 + x600
    x602 = x212 * x512
    x603 = x213 * x597 + x602
    x604 = x212 * x527
    x605 = x188 * x551
    x606 = x22 * x221 + x605
    x607 = x188 * x552
    x608 = x220 * x597 + x607
    x609 = x188 * x564
    x610 = x160 * x584
    x611 = x22 * x226 + x610
    x612 = x160 * x585
    x613 = x225 * x597 + x612
    x614 = x160 * x592
    x615 = x72 * (x135 * x584 + x429)
    x616 = x22 * x230 + x615
    x617 = x72 * (x135 * x585 + x432)
    x618 = x228 * x597 + x617
    x619 = x72 * (x135 * x592 + x435)
    x620 = x244 * x9
    x621 = x232 * x234 + x45 - x620
    x622 = x16 * x621
    x623 = x235 * x9
    x624 = x6 * (x232 * x239 - x56 - x622 - x623)
    x625 = x232 * x239 + x32 - x623
    x626 = x4 * x622 - x5 * x625
    x627 = -x626
    x628 = x232 * x243 - x252 * x9 + x58
    x629 = x16 * x628
    x630 = -x4 * x629 + x5 * x621
    x631 = x16 * x630
    x632 = -x4 * x631 + x5 * x627 + x624
    x633 = x4 * x632
    x634 = x6 * x627
    x635 = 2.0 * x634
    x636 = x633 + x635
    x637 = x6 * x625
    x638 = x4 * x627
    x639 = x637 + x638
    x640 = x636 * x73 + x639 * x92
    x641 = x73 * (x637 + x639)
    x642 = x640 * x73 + x641 * x92
    x643 = x276 * x637 + x641 * x73
    x644 = x72 * (x642 * x73 + x643 * x92)
    x645 = x21 * x278 + x644
    x646 = x21 * x280 + x645
    x647 = x6 * (-x105 + x232 * x234 - x620 - x629)
    x648 = x16 * x9
    x649 = x106 + x232 * x251 - x282 * x648
    x650 = (
        -x108 * (x108 * (x108 * x649 - x5 * x628) + x5 * x630 + x647)
        - x43 * (x626 + x631)
        + x5 * x632
    )
    x651 = x4 * x650
    x652 = x6 * x632
    x653 = 3.0 * x652
    x654 = x72 * (
        x642 * x85 + x73 * (x640 * x85 + x73 * (x636 * x85 + x73 * (x651 + x653)))
    )
    x655 = x21 * x274 + x654
    x656 = x632 * x9
    x657 = 2.0 * x259
    x658 = x656 + x657
    x659 = x627 * x9
    x660 = x264 + x659
    x661 = x658 * x73 + x660 * x92
    x662 = x625 * x9
    x663 = 2.0 * x267
    x664 = x662 + x663
    x665 = x113 * x664 + x660 * x73
    x666 = x661 * x73 + x665 * x92
    x667 = x308 * x664 + x665 * x73
    x668 = x72 * (x666 * x73 + x667 * x92)
    x669 = x21 * x310 + x668
    x670 = x21 * x311 + x669
    x671 = x650 * x9
    x672 = 2.0 * x285
    x673 = x671 + x672
    x674 = x658 * x85
    x675 = x72 * (x666 * x85 + x73 * (x661 * x85 + x73 * (x673 * x73 + x674)))
    x676 = x21 * x305 + x675
    x677 = x135 * (x633 + x635)
    x678 = x135 * x637
    x679 = x135 * x638 + x678
    x680 = x677 * x73 + x679 * x92
    x681 = x324 * x637 + x679 * x73
    x682 = x72 * (x680 * x73 + x681 * x92)
    x683 = x21 * x326 + x682
    x684 = x21 * x327 + x683
    x685 = x135 * x653
    x686 = x72 * (x680 * x85 + x73 * (x677 * x85 + x73 * (x135 * x651 + x685)))
    x687 = x21 * x322 + x686
    x688 = x118 * x658 + x293 * x92
    x689 = x118 * x660 + x297
    x690 = x688 * x73 + x689 * x92
    x691 = x118 * x664 + x302 * x43
    x692 = x113 * x691 + x689 * x73
    x693 = x72 * (x690 * x73 + x692 * x92)
    x694 = x21 * x339 + x693
    x695 = x21 * x340 + x694
    x696 = x118 * x673 + x291 * x92
    x697 = x688 * x85
    x698 = x72 * (x690 * x85 + x73 * (x696 * x73 + x697))
    x699 = x21 * x335 + x698
    x700 = x135 * (x656 + x657)
    x701 = x135 * x659 + x316
    x702 = x700 * x73 + x701 * x92
    x703 = x135 * (x662 + x663)
    x704 = x113 * x703 + x701 * x73
    x705 = x72 * (x702 * x73 + x704 * x92)
    x706 = x21 * x357 + x705
    x707 = x21 * x358 + x706
    x708 = x135 * (x671 + x672)
    x709 = x700 * x85
    x710 = x72 * (x702 * x85 + x73 * (x708 * x73 + x709))
    x711 = x21 * x353 + x710
    x712 = x172 * (x633 + x635)
    x713 = x172 * x637
    x714 = x172 * x638 + x713
    x715 = x72 * (x712 * x73 + x714 * x92)
    x716 = x21 * x370 + x715
    x717 = x21 * x371 + x716
    x718 = x172 * x653
    x719 = x72 * (x712 * x85 + x73 * (x172 * x651 + x718))
    x720 = x21 * x366 + x719
    x721 = x118 * x688 + x330 * x92
    x722 = x118 * x689 + x333
    x723 = x72 * (x721 * x73 + x722 * x92)
    x724 = x21 * x379 + x723
    x725 = x21 * x380 + x724
    x726 = x118 * x696 + x329 * x92
    x727 = x721 * x85
    x728 = x72 * (x726 * x73 + x727)
    x729 = x21 * x375 + x728
    x730 = x118 * x700 + x347 * x92
    x731 = x118 * x701 + x351
    x732 = x72 * (x73 * x730 + x731 * x92)
    x733 = x21 * x389 + x732
    x734 = x21 * x390 + x733
    x735 = x118 * x708 + x345 * x92
    x736 = x730 * x85
    x737 = x72 * (x73 * x735 + x736)
    x738 = x21 * x385 + x737
    x739 = x172 * (x656 + x657)
    x740 = x172 * x659 + x364
    x741 = x72 * (x73 * x739 + x740 * x92)
    x742 = x21 * x402 + x741
    x743 = x21 * x403 + x742
    x744 = x172 * (x671 + x672)
    x745 = x739 * x85
    x746 = x72 * (x73 * x744 + x745)
    x747 = x21 * x397 + x746
    x748 = x201 * x72 * (x633 + x635)
    x749 = x21 * x410 + x748
    x750 = x21 * x411 + x749
    x751 = x201 * x653
    x752 = x72 * (x201 * x651 + x751)
    x753 = x21 * x407 + x752
    x754 = x72 * (x118 * x721 + x374 * x92)
    x755 = x21 * x415 + x754
    x756 = x21 * x417 + x755
    x757 = x72 * (x118 * x726 + x373 * x92)
    x758 = x21 * x413 + x757
    x759 = x72 * (x118 * x730 + x384 * x92)
    x760 = x21 * x421 + x759
    x761 = x21 * x422 + x760
    x762 = x72 * (x118 * x735 + x383 * x92)
    x763 = x21 * x419 + x762
    x764 = x72 * (x118 * x739 + x396 * x92)
    x765 = x21 * x426 + x764
    x766 = x21 * x427 + x765
    x767 = x72 * (x118 * x744 + x394 * x92)
    x768 = x21 * x424 + x767
    x769 = x201 * x72 * (x656 + x657)
    x770 = x21 * x433 + x769
    x771 = x21 * x434 + x770
    x772 = x201 * x72 * (x671 + x672)
    x773 = x21 * x430 + x772
    x774 = x228 * x632
    x775 = x21 * x439 + x774
    x776 = x21 * x440 + x775
    x777 = x228 * x650
    x778 = x21 * x437 + x777
    x779 = -x232 * x444 + x454 * x9
    x780 = -x779
    x781 = x16 * x780
    x782 = -x232 * x449 + x445 * x9
    x783 = -x6 * (x781 + x782)
    x784 = -x782
    x785 = x4 * x781 - x5 * x784
    x786 = -x785
    x787 = x232 * x453 - x462 * x9
    x788 = x16 * x787
    x789 = -x4 * x788 + x5 * x780
    x790 = x16 * x789
    x791 = -x4 * x790 + x5 * x786 + x783
    x792 = x43 * x786
    x793 = x4 * x791 + x792
    x794 = x6 * x784
    x795 = x4 * x786 + x794
    x796 = x73 * x793 + x795 * x92
    x797 = x73 * (x794 + x795)
    x798 = x73 * x796 + x797 * x92
    x799 = x276 * x794 + x73 * x797
    x800 = x72 * (x73 * x798 + x799 * x92)
    x801 = x22 * x278 + x800
    x802 = x21 * x489 + x801
    x803 = -x6 * (x779 + x788)
    x804 = x232 * x461 - x492 * x648
    x805 = (
        -x108 * (x108 * (x108 * x804 - x5 * x787) + x5 * x789 + x803)
        - x43 * (x785 + x790)
        + x5 * x791
    )
    x806 = x72 * (
        x73 * (x73 * (x73 * (x4 * x805 + x57 * x791) + x793 * x85) + x796 * x85)
        + x798 * x85
    )
    x807 = x22 * x274 + x806
    x808 = 0.009523809523809524 * x115
    x809 = 5.916079783099616 * x808
    x810 = x469 + x791 * x9
    x811 = x473 + x786 * x9
    x812 = x811 * x92
    x813 = x73 * x810 + x812
    x814 = x477 + x784 * x9
    x815 = x113 * x814 + x73 * x811
    x816 = x73 * x813 + x815 * x92
    x817 = x308 * x814 + x73 * x815
    x818 = x72 * (x73 * x816 + x817 * x92)
    x819 = x22 * x310 + x818
    x820 = x21 * x509 + x819
    x821 = x495 + x805 * x9
    x822 = x72 * (x73 * (x73 * (x73 * x821 + x810 * x85) + x813 * x85) + x816 * x85)
    x823 = x22 * x305 + x822
    x824 = 0.06666666666666667 * x115
    x825 = x158 * x824
    x826 = x12 * x791 + x259
    x827 = x12 * x786 + x263
    x828 = x827 * x92
    x829 = x73 * x826 + x828
    x830 = x12 * x784 + x267
    x831 = x113 * x830 + x73 * x827
    x832 = x73 * x829 + x831 * x92
    x833 = x308 * x830 + x73 * x831
    x834 = x72 * (x73 * x832 + x833 * x92)
    x835 = x22 * x326 + x834
    x836 = x21 * x526 + x835
    x837 = x12 * x805 + x285
    x838 = x72 * (x73 * (x73 * (x73 * x837 + x826 * x85) + x829 * x85) + x832 * x85)
    x839 = x22 * x322 + x838
    x840 = x118 * (x469 + x810)
    x841 = x118 * (x473 + x811)
    x842 = x841 * x92
    x843 = x73 * x840 + x842
    x844 = x118 * x814 + x501
    x845 = x113 * x844 + x73 * x841
    x846 = x72 * (x73 * x843 + x845 * x92)
    x847 = x22 * x339 + x846
    x848 = x21 * x536 + x847
    x849 = x118 * (x495 + x821)
    x850 = x72 * (x73 * (x73 * x849 + x840 * x85) + x843 * x85)
    x851 = x22 * x335 + x850
    x852 = x113 * x512 + x118 * x826
    x853 = x113 * x514 + x118 * x827
    x854 = x853 * x92
    x855 = x73 * x852 + x854
    x856 = x118 * x830 + x519
    x857 = x113 * x856 + x73 * x853
    x858 = x72 * (x73 * x855 + x857 * x92)
    x859 = x22 * x357 + x858
    x860 = x21 * x548 + x859
    x861 = x113 * x511 + x118 * x837
    x862 = x72 * (x73 * (x73 * x861 + x85 * x852) + x85 * x855)
    x863 = x22 * x353 + x862
    x864 = 0.3333333333333333 * x115
    x865 = x135 * (x259 + x826)
    x866 = x135 * (x263 + x827)
    x867 = x866 * x92
    x868 = x73 * x865 + x867
    x869 = x135 * x830 + x319
    x870 = x113 * x869 + x73 * x866
    x871 = x72 * (x73 * x868 + x870 * x92)
    x872 = x22 * x370 + x871
    x873 = x21 * x563 + x872
    x874 = x135 * (x285 + x837)
    x875 = x72 * (x73 * (x73 * x874 + x85 * x865) + x85 * x868)
    x876 = x22 * x366 + x875
    x877 = x118 * x840 + x149 * x469
    x878 = x118 * x841 + x149 * x473
    x879 = x878 * x92
    x880 = x72 * (x73 * x877 + x879)
    x881 = x22 * x379 + x880
    x882 = x21 * x569 + x881
    x883 = x118 * x849 + x149 * x495
    x884 = x72 * (x73 * x883 + x85 * x877)
    x885 = x22 * x375 + x884
    x886 = x118 * x852 + x512 * x544
    x887 = x118 * x853 + x514 * x544
    x888 = x887 * x92
    x889 = x72 * (x73 * x886 + x888)
    x890 = x22 * x389 + x889
    x891 = x21 * x575 + x890
    x892 = x118 * x861 + x511 * x544
    x893 = x72 * (x73 * x892 + x85 * x886)
    x894 = x22 * x385 + x893
    x895 = x113 * x552 + x118 * x865
    x896 = x113 * x554 + x118 * x866
    x897 = x896 * x92
    x898 = x72 * (x73 * x895 + x897)
    x899 = x22 * x402 + x898
    x900 = x21 * x582 + x899
    x901 = x113 * x551 + x118 * x874
    x902 = x72 * (x73 * x901 + x85 * x895)
    x903 = x22 * x397 + x902
    x904 = x135 * x865 + x172 * x259
    x905 = x135 * x866 + x172 * x263
    x906 = x905 * x92
    x907 = x72 * (x73 * x904 + x906)
    x908 = x22 * x410 + x907
    x909 = x21 * x591 + x908
    x910 = x135 * x874 + x172 * x285
    x911 = x72 * (x73 * x910 + x85 * x904)
    x912 = x22 * x407 + x911
    x913 = x72 * (x118 * x877 + x183 * x469)
    x914 = x22 * x415 + x913
    x915 = x21 * x598 + x914
    x916 = x72 * (x118 * x883 + x183 * x495)
    x917 = x22 * x413 + x916
    x918 = x188 * x6
    x919 = x72 * (x118 * x886 + x512 * x918)
    x920 = x22 * x421 + x919
    x921 = x21 * x603 + x920
    x922 = x72 * (x118 * x892 + x511 * x918)
    x923 = x22 * x419 + x922
    x924 = x72 * (x118 * x895 + x544 * x552)
    x925 = x22 * x426 + x924
    x926 = x21 * x608 + x925
    x927 = x72 * (x118 * x901 + x544 * x551)
    x928 = x22 * x424 + x927
    x929 = x72 * (x113 * x585 + x118 * x904)
    x930 = x22 * x433 + x929
    x931 = x21 * x613 + x930
    x932 = x72 * (x113 * x584 + x118 * x910)
    x933 = x22 * x430 + x932
    x934 = x72 * (x135 * x904 + x201 * x259)
    x935 = x22 * x439 + x934
    x936 = x21 * x618 + x935
    x937 = x72 * (x135 * x910 + x201 * x285)
    x938 = x22 * x437 + x937
    x939 = x12 * x454
    x940 = x442 * x444 + x45 - x939
    x941 = x16 * x940
    x942 = x12 * x445
    x943 = x6 * (x442 * x449 - x56 - x941 - x942)
    x944 = x32 + x442 * x449 - x942
    x945 = x4 * x941 - x5 * x944
    x946 = -x945
    x947 = -x12 * x462 + x442 * x453 + x58
    x948 = x16 * x947
    x949 = -x4 * x948 + x5 * x940
    x950 = x16 * x949
    x951 = -x4 * x950 + x5 * x946 + x943
    x952 = x4 * x951
    x953 = x6 * x946
    x954 = 2.0 * x953
    x955 = x952 + x954
    x956 = x6 * x944
    x957 = x4 * x946
    x958 = x956 + x957
    x959 = x73 * x955 + x92 * x958
    x960 = x73 * (x956 + x958)
    x961 = x73 * x959 + x92 * x960
    x962 = x276 * x956 + x73 * x960
    x963 = x72 * (x73 * x961 + x92 * x962)
    x964 = x22 * x487 + x963
    x965 = x22 * x489 + x964
    x966 = x6 * (-x105 + x442 * x444 - x939 - x948)
    x967 = x12 * x16
    x968 = x106 + x442 * x461 - x492 * x967
    x969 = (
        -x108 * (x108 * (x108 * x968 - x5 * x947) + x5 * x949 + x966)
        - x43 * (x945 + x950)
        + x5 * x951
    )
    x970 = x4 * x969
    x971 = x6 * x951
    x972 = 3.0 * x971
    x973 = x72 * (
        x73 * (x73 * (x73 * (x970 + x972) + x85 * x955) + x85 * x959) + x85 * x961
    )
    x974 = x22 * x484 + x973
    x975 = x118 * (x952 + x954)
    x976 = x118 * x956
    x977 = x118 * x957 + x976
    x978 = x73 * x975 + x92 * x977
    x979 = x506 * x956 + x73 * x977
    x980 = x72 * (x73 * x978 + x92 * x979)
    x981 = x22 * x508 + x980
    x982 = x22 * x509 + x981
    x983 = x72 * (x73 * (x118 * x73 * (x970 + x972) + x85 * x975) + x85 * x978)
    x984 = x22 * x504 + x983
    x985 = x12 * x951 + 2.0 * x469
    x986 = x12 * x946 + x474
    x987 = x73 * x985 + x92 * x986
    x988 = x12 * x944 + 2.0 * x477
    x989 = x113 * x988
    x990 = x73 * x986 + x989
    x991 = x73 * x987 + x92 * x990
    x992 = x308 * x988 + x73 * x990
    x993 = x72 * (x73 * x991 + x92 * x992)
    x994 = x22 * x525 + x993
    x995 = x22 * x526 + x994
    x996 = x12 * x969 + 2.0 * x495
    x997 = x85 * x985
    x998 = x72 * (x73 * (x73 * (x73 * x996 + x997) + x85 * x987) + x85 * x991)
    x999 = x22 * x522 + x998
    x1000 = x149 * (x952 + x954)
    x1001 = x149 * x956
    x1002 = x1001 + x149 * x957
    x1003 = x72 * (x1000 * x73 + x1002 * x92)
    x1004 = x1003 + x22 * x535
    x1005 = x1004 + x22 * x536
    x1006 = x72 * (x1000 * x85 + x149 * x73 * (x970 + x972))
    x1007 = x1006 + x22 * x531
    x1008 = x506 * x985 + x580 * x986
    x1009 = x544 * x988
    x1010 = x1009 + x506 * x986
    x1011 = x72 * (x1008 * x73 + x1010 * x92)
    x1012 = x1011 + x22 * x547
    x1013 = x1012 + x22 * x548
    x1014 = x72 * (x1008 * x85 + x73 * (x506 * x996 + x577 * x985))
    x1015 = x1014 + x22 * x542
    x1016 = x135 * x985 + x512 * x92
    x1017 = x135 * x986 + x515
    x1018 = x1016 * x73 + x1017 * x92
    x1019 = x135 * x988 + x518 * x92
    x1020 = x1019 * x113
    x1021 = x1017 * x73 + x1020
    x1022 = x72 * (x1018 * x73 + x1021 * x92)
    x1023 = x1022 + x22 * x562
    x1024 = x1023 + x22 * x563
    x1025 = x135 * x996 + x511 * x92
    x1026 = x1016 * x85
    x1027 = x72 * (x1018 * x85 + x73 * (x1025 * x73 + x1026))
    x1028 = x1027 + x22 * x557
    x1029 = x183 * x72 * (x952 + x954)
    x1030 = x1029 + x22 * x568
    x1031 = x1030 + x22 * x569
    x1032 = x183 * x72 * (x970 + x972)
    x1033 = x1032 + x22 * x566
    x1034 = x188 * x43
    x1035 = x72 * (x1034 * x986 + x571 * x985)
    x1036 = x1035 + x22 * x574
    x1037 = x1036 + x22 * x575
    x1038 = x72 * (x188 * x57 * x985 + x571 * x996)
    x1039 = x1038 + x22 * x572
    x1040 = x72 * (x1016 * x506 + x1017 * x580)
    x1041 = x1040 + x22 * x581
    x1042 = x1041 + x22 * x582
    x1043 = x72 * (x1016 * x577 + x1025 * x506)
    x1044 = x1043 + x22 * x578
    x1045 = x1016 * x135 + x552 * x92
    x1046 = x1017 * x135 + x555
    x1047 = x72 * (x1045 * x73 + x1046 * x92)
    x1048 = x1047 + x22 * x590
    x1049 = x1048 + x22 * x591
    x1050 = x1025 * x135 + x551 * x92
    x1051 = x1045 * x85
    x1052 = x72 * (x1050 * x73 + x1051)
    x1053 = x1052 + x22 * x586
    x1054 = x207 * x951
    x1055 = x1054 + x22 * x596
    x1056 = x1055 + x22 * x598
    x1057 = x207 * x969
    x1058 = x1057 + x22 * x594
    x1059 = x212 * x985
    x1060 = x1059 + x22 * x602
    x1061 = x1060 + x22 * x603
    x1062 = x212 * x996
    x1063 = x1062 + x22 * x600
    x1064 = x1016 * x188
    x1065 = x1064 + x22 * x607
    x1066 = x1065 + x22 * x608
    x1067 = x1025 * x188
    x1068 = x1067 + x22 * x605
    x1069 = x1045 * x160
    x1070 = x1069 + x22 * x612
    x1071 = x1070 + x22 * x613
    x1072 = x1050 * x160
    x1073 = x1072 + x22 * x610
    x1074 = x72 * (x1045 * x135 + x585 * x92)
    x1075 = x1074 + x22 * x617
    x1076 = x1075 + x22 * x618
    x1077 = x72 * (x1050 * x135 + x584 * x92)
    x1078 = x1077 + x22 * x615
    x1079 = x232 * x621 + 2.0 * x250 - x629 * x9
    x1080 = x1079 * x16
    x1081 = x622 * x9
    x1082 = x6 * (-x1080 - x1081 + x232 * x625 + 2.0 * x237 * x6)
    x1083 = -x1081 + x232 * x625 + 2.0 * x238
    x1084 = -x1080 * x4 + x1083 * x5
    x1085 = x232 * x628 + 2.0 * x281 - x648 * x649
    x1086 = -x108 * (x1079 * x5 - x108 * x1085) + x1082 + x1084 * x5
    x1087 = x1086 * x4
    x1088 = x1084 * x6
    x1089 = 2.0 * x1088
    x1090 = x1083 * x6
    x1091 = x1084 * x4
    x1092 = x1090 + x1091
    x1093 = x73 * (x1090 + x1092)
    x1094 = x1090 * x276 + x1093 * x73
    x1095 = x21 * x644 + x72 * (
        x1094 * x92 + x73 * (x1093 * x92 + x73 * (x1092 * x92 + x73 * (x1087 + x1089)))
    )
    x1096 = x1095 + x21 * x645
    x1097 = x1086 * x9
    x1098 = x1097 + x653
    x1099 = x1084 * x9
    x1100 = 3.0 * x634
    x1101 = x1099 + x1100
    x1102 = x1083 * x9
    x1103 = 3.0 * x637
    x1104 = x1102 + x1103
    x1105 = x1101 * x73 + x1104 * x113
    x1106 = x1104 * x308 + x1105 * x73
    x1107 = x21 * x668 + x72 * (
        x1106 * x92 + x73 * (x1105 * x92 + x73 * (x1098 * x73 + x1101 * x92))
    )
    x1108 = x1107 + x21 * x669
    x1109 = x1090 * x135
    x1110 = x1091 * x135 + x1109
    x1111 = x1090 * x324 + x1110 * x73
    x1112 = x21 * x682 + x72 * (
        x1111 * x92 + x73 * (x1110 * x92 + x135 * x73 * (x1087 + x1089))
    )
    x1113 = x1112 + x21 * x683
    x1114 = x1098 * x118 + x674
    x1115 = x1101 * x118 + x660 * x85
    x1116 = x1104 * x118 + x664 * x85
    x1117 = x1115 * x73 + x1116 * x113
    x1118 = x21 * x693 + x72 * (x1117 * x92 + x73 * (x1114 * x73 + x1115 * x92))
    x1119 = x1118 + x21 * x694
    x1120 = x1097 * x135 + x685
    x1121 = x135 * (x1099 + x1100)
    x1122 = x135 * (x1102 + x1103)
    x1123 = x1121 * x73 + x1122 * x113
    x1124 = x21 * x705 + x72 * (x1123 * x92 + x73 * (x1120 * x73 + x1121 * x92))
    x1125 = x1124 + x21 * x706
    x1126 = x1090 * x172
    x1127 = x1091 * x172 + x1126
    x1128 = x21 * x715 + x72 * (x1127 * x92 + x172 * x73 * (x1087 + x1089))
    x1129 = x1128 + x21 * x716
    x1130 = x1114 * x118 + x697
    x1131 = x1115 * x118 + x689 * x85
    x1132 = x21 * x723 + x72 * (x1130 * x73 + x1131 * x92)
    x1133 = x1132 + x21 * x724
    x1134 = x1120 * x118 + x709
    x1135 = x1121 * x118 + x701 * x85
    x1136 = x21 * x732 + x72 * (x1134 * x73 + x1135 * x92)
    x1137 = x1136 + x21 * x733
    x1138 = x1097 * x172 + x718
    x1139 = x172 * (x1099 + x1100)
    x1140 = x21 * x741 + x72 * (x1138 * x73 + x1139 * x92)
    x1141 = x1140 + x21 * x742
    x1142 = x201 * x72 * (x1087 + x1089) + x21 * x748
    x1143 = x1142 + x21 * x749
    x1144 = x21 * x754 + x72 * (x1130 * x118 + x727)
    x1145 = x1144 + x21 * x755
    x1146 = x21 * x759 + x72 * (x1134 * x118 + x736)
    x1147 = x1146 + x21 * x760
    x1148 = x21 * x764 + x72 * (x1138 * x118 + x745)
    x1149 = x1148 + x21 * x765
    x1150 = x21 * x769 + x72 * (x1097 * x201 + x751)
    x1151 = x1150 + x21 * x770
    x1152 = x1086 * x228 + x21 * x774
    x1153 = x1152 + x21 * x775
    x1154 = x232 * x780 + x460 - x788 * x9
    x1155 = x1154 * x16
    x1156 = x781 * x9
    x1157 = x6 * (-x1155 - x1156 + x232 * x784 - x490)
    x1158 = -x1156 + x232 * x784 + x448
    x1159 = -x1155 * x4 + x1158 * x5
    x1160 = x232 * x787 + x491 - x648 * x804
    x1161 = x108 * (x108 * x1160 - x1154 * x5) + x1157 + x1159 * x5
    x1162 = x1159 * x43
    x1163 = x1158 * x6
    x1164 = x1159 * x4 + x1163
    x1165 = x73 * (x1163 + x1164)
    x1166 = x1163 * x276 + x1165 * x73
    x1167 = x72 * (
        x1166 * x92
        + x73 * (x1165 * x92 + x73 * (x1164 * x92 + x73 * (x1161 * x4 + x1162)))
    )
    x1168 = x1167 + x22 * x644
    x1169 = x1168 + x21 * x801
    x1170 = x43 * x791
    x1171 = x1161 * x9 + x1170
    x1172 = x1159 * x9 + x792
    x1173 = 2.0 * x794
    x1174 = x1158 * x9 + x1173
    x1175 = x113 * x1174 + x1172 * x73
    x1176 = x1174 * x308 + x1175 * x73
    x1177 = x72 * (x1176 * x92 + x73 * (x1175 * x92 + x73 * (x1171 * x73 + x1172 * x92)))
    x1178 = x1177 + x22 * x668
    x1179 = x1178 + x21 * x819
    x1180 = x1161 * x12 + x652
    x1181 = x1159 * x12 + x634
    x1182 = x1181 * x92
    x1183 = x1158 * x12 + x637
    x1184 = x113 * x1183 + x1181 * x73
    x1185 = x1183 * x308 + x1184 * x73
    x1186 = x72 * (x1185 * x92 + x73 * (x1184 * x92 + x73 * (x1180 * x73 + x1182)))
    x1187 = x1186 + x22 * x682
    x1188 = x1187 + x21 * x835
    x1189 = x1171 * x118 + x810 * x92
    x1190 = x1172 * x118 + x812
    x1191 = x1174 * x118 + x814 * x92
    x1192 = x113 * x1191 + x1190 * x73
    x1193 = x72 * (x1192 * x92 + x73 * (x1189 * x73 + x1190 * x92))
    x1194 = x1193 + x22 * x693
    x1195 = x1194 + x21 * x847
    x1196 = x826 * x92
    x1197 = x118 * x1180 + x1196
    x1198 = x118 * x1181 + x828
    x1199 = x830 * x92
    x1200 = x118 * x1183 + x1199
    x1201 = x113 * x1200 + x1198 * x73
    x1202 = x72 * (x1201 * x92 + x73 * (x1197 * x73 + x1198 * x92))
    x1203 = x1202 + x22 * x705
    x1204 = x1203 + x21 * x859
    x1205 = x135 * (x1180 + x652)
    x1206 = x135 * (x1181 + x634)
    x1207 = x1206 * x92
    x1208 = x1183 * x135 + x678
    x1209 = x113 * x1208 + x1206 * x73
    x1210 = x72 * (x1209 * x92 + x73 * (x1205 * x73 + x1207))
    x1211 = x1210 + x22 * x715
    x1212 = x1211 + x21 * x872
    x1213 = x118 * x1189 + x840 * x92
    x1214 = x118 * x1190 + x842
    x1215 = x72 * (x1213 * x73 + x1214 * x92)
    x1216 = x1215 + x22 * x723
    x1217 = x1216 + x21 * x881
    x1218 = x118 * x1197 + x852 * x92
    x1219 = x118 * x1198 + x854
    x1220 = x72 * (x1218 * x73 + x1219 * x92)
    x1221 = x1220 + x22 * x732
    x1222 = x1221 + x21 * x890
    x1223 = x865 * x92
    x1224 = x118 * x1205 + x1223
    x1225 = x118 * x1206 + x867
    x1226 = x72 * (x1224 * x73 + x1225 * x92)
    x1227 = x1226 + x22 * x741
    x1228 = x1227 + x21 * x899
    x1229 = x1205 * x135 + x172 * x652
    x1230 = x1206 * x135 + x172 * x634
    x1231 = x1230 * x92
    x1232 = x72 * (x1229 * x73 + x1231)
    x1233 = x1232 + x22 * x748
    x1234 = x1233 + x21 * x908
    x1235 = x72 * (x118 * x1213 + x877 * x92)
    x1236 = x1235 + x22 * x754
    x1237 = x1236 + x21 * x914
    x1238 = x72 * (x118 * x1218 + x886 * x92)
    x1239 = x1238 + x22 * x759
    x1240 = x1239 + x21 * x920
    x1241 = x72 * (x118 * x1224 + x895 * x92)
    x1242 = x1241 + x22 * x764
    x1243 = x1242 + x21 * x925
    x1244 = x904 * x92
    x1245 = x72 * (x118 * x1229 + x1244)
    x1246 = x1245 + x22 * x769
    x1247 = x1246 + x21 * x930
    x1248 = x72 * (x1229 * x135 + x201 * x652)
    x1249 = x1248 + x22 * x774
    x1250 = x1249 + x21 * x935
    x1251 = x232 * x940 - x9 * x948
    x1252 = x1251 * x16
    x1253 = -x232 * x944 + x9 * x941
    x1254 = -x6 * (x1252 + x1253)
    x1255 = -x1253
    x1256 = -x1252 * x4 + x1255 * x5
    x1257 = x232 * x947 - x648 * x968
    x1258 = x108 * (x108 * x1257 - x1251 * x5) + x1254 + x1256 * x5
    x1259 = x1256 * x43
    x1260 = x1255 * x6
    x1261 = x1256 * x4 + x1260
    x1262 = x73 * (x1260 + x1261)
    x1263 = x1260 * x276 + x1262 * x73
    x1264 = x72 * (
        x1263 * x92
        + x73 * (x1262 * x92 + x73 * (x1261 * x92 + x73 * (x1258 * x4 + x1259)))
    )
    x1265 = x1264 + x22 * x800
    x1266 = x1265 + x22 * x801
    x1267 = x1258 * x9 + x971
    x1268 = x1256 * x9 + x953
    x1269 = x1268 * x92
    x1270 = x1255 * x9 + x956
    x1271 = x113 * x1270 + x1268 * x73
    x1272 = x1270 * x308 + x1271 * x73
    x1273 = x72 * (x1272 * x92 + x73 * (x1271 * x92 + x73 * (x1267 * x73 + x1269)))
    x1274 = x1273 + x22 * x818
    x1275 = x1274 + x22 * x819
    x1276 = x1170 + x12 * x1258
    x1277 = x12 * x1256 + x792
    x1278 = x1277 * x92
    x1279 = x1173 + x12 * x1255
    x1280 = x113 * x1279 + x1277 * x73
    x1281 = x1279 * x308 + x1280 * x73
    x1282 = x72 * (x1281 * x92 + x73 * (x1280 * x92 + x73 * (x1276 * x73 + x1278)))
    x1283 = x1282 + x22 * x834
    x1284 = x1283 + x22 * x835
    x1285 = x118 * (x1267 + x971)
    x1286 = x118 * (x1268 + x953)
    x1287 = x1286 * x92
    x1288 = x118 * x1270 + x976
    x1289 = x113 * x1288 + x1286 * x73
    x1290 = x72 * (x1289 * x92 + x73 * (x1285 * x73 + x1287))
    x1291 = x1290 + x22 * x846
    x1292 = x1291 + x22 * x847
    x1293 = x113 * x985 + x118 * x1276
    x1294 = x113 * x986 + x118 * x1277
    x1295 = x1294 * x92
    x1296 = x118 * x1279 + x989
    x1297 = x113 * x1296 + x1294 * x73
    x1298 = x72 * (x1297 * x92 + x73 * (x1293 * x73 + x1295))
    x1299 = x1298 + x22 * x858
    x1300 = x1299 + x22 * x859
    x1301 = x1196 + x1276 * x135
    x1302 = x1277 * x135 + x828
    x1303 = x1302 * x92
    x1304 = x1199 + x1279 * x135
    x1305 = x113 * x1304 + x1302 * x73
    x1306 = x72 * (x1305 * x92 + x73 * (x1301 * x73 + x1303))
    x1307 = x1306 + x22 * x871
    x1308 = x1307 + x22 * x872
    x1309 = x118 * x1285 + x149 * x971
    x1310 = x118 * x1286 + x149 * x953
    x1311 = x1310 * x92
    x1312 = x72 * (x1309 * x73 + x1311)
    x1313 = x1312 + x22 * x880
    x1314 = x1313 + x22 * x881
    x1315 = x118 * x1293 + x544 * x985
    x1316 = x118 * x1294 + x544 * x986
    x1317 = x1316 * x92
    x1318 = x72 * (x1315 * x73 + x1317)
    x1319 = x1318 + x22 * x889
    x1320 = x1319 + x22 * x890
    x1321 = x1016 * x113 + x118 * x1301
    x1322 = x1017 * x113 + x118 * x1302
    x1323 = x1322 * x92
    x1324 = x72 * (x1321 * x73 + x1323)
    x1325 = x1324 + x22 * x898
    x1326 = x1325 + x22 * x899
    x1327 = x1223 + x1301 * x135
    x1328 = x1302 * x135 + x867
    x1329 = x1328 * x92
    x1330 = x72 * (x1327 * x73 + x1329)
    x1331 = x1330 + x22 * x907
    x1332 = x1331 + x22 * x908
    x1333 = x72 * (x118 * x1309 + x183 * x971)
    x1334 = x1333 + x22 * x913
    x1335 = x1334 + x22 * x914
    x1336 = x72 * (x118 * x1315 + x918 * x985)
    x1337 = x1336 + x22 * x919
    x1338 = x1337 + x22 * x920
    x1339 = x72 * (x1016 * x544 + x118 * x1321)
    x1340 = x1339 + x22 * x924
    x1341 = x1340 + x22 * x925
    x1342 = x72 * (x1045 * x113 + x118 * x1327)
    x1343 = x1342 + x22 * x929
    x1344 = x1343 + x22 * x930
    x1345 = x72 * (x1244 + x1327 * x135)
    x1346 = x1345 + x22 * x934
    x1347 = x1346 + x22 * x935
    x1348 = -x12 * x948 + x442 * x940 + 2.0 * x460
    x1349 = x1348 * x16
    x1350 = x12 * x941
    x1351 = x6 * (-x1349 - x1350 + x442 * x944 + 2.0 * x447 * x6)
    x1352 = -x1350 + x442 * x944 + 2.0 * x448
    x1353 = -x1349 * x4 + x1352 * x5
    x1354 = x442 * x947 + 2.0 * x491 - x967 * x968
    x1355 = x108 * (x108 * x1354 - x1348 * x5) + x1351 + x1353 * x5
    x1356 = x1355 * x4
    x1357 = x1353 * x6
    x1358 = 2.0 * x1357
    x1359 = x1352 * x6
    x1360 = x1353 * x4
    x1361 = x1359 + x1360
    x1362 = x73 * (x1359 + x1361)
    x1363 = x1359 * x276 + x1362 * x73
    x1364 = x22 * x963 + x72 * (
        x1363 * x92 + x73 * (x1362 * x92 + x73 * (x1361 * x92 + x73 * (x1356 + x1358)))
    )
    x1365 = x1364 + x22 * x964
    x1366 = x118 * x1359
    x1367 = x118 * x1360 + x1366
    x1368 = x1359 * x506 + x1367 * x73
    x1369 = x22 * x980 + x72 * (
        x1368 * x92 + x73 * (x118 * x73 * (x1356 + x1358) + x1367 * x92)
    )
    x1370 = x1369 + x22 * x981
    x1371 = x12 * x1355 + x972
    x1372 = x12 * x1353 + 3.0 * x953
    x1373 = x12 * x1352 + 3.0 * x956
    x1374 = x113 * x1373
    x1375 = x1372 * x73 + x1374
    x1376 = x1373 * x308 + x1375 * x73
    x1377 = x22 * x993 + x72 * (
        x1376 * x92 + x73 * (x1375 * x92 + x73 * (x1371 * x73 + x1372 * x92))
    )
    x1378 = x1377 + x22 * x994
    x1379 = x1359 * x149
    x1380 = x1360 * x149 + x1379
    x1381 = x1003 * x22 + x72 * (x1380 * x92 + x149 * x73 * (x1356 + x1358))
    x1382 = x1004 * x22 + x1381
    x1383 = x1373 * x544
    x1384 = x1372 * x506 + x1383
    x1385 = x1011 * x22 + x72 * (x1384 * x92 + x73 * (x1371 * x506 + x1372 * x580))
    x1386 = x1012 * x22 + x1385
    x1387 = x135 * x1371 + x997
    x1388 = x135 * x1372 + x85 * x986
    x1389 = x135 * x1373 + x85 * x988
    x1390 = x113 * x1389
    x1391 = x1388 * x73 + x1390
    x1392 = x1022 * x22 + x72 * (x1391 * x92 + x73 * (x1387 * x73 + x1388 * x92))
    x1393 = x1023 * x22 + x1392
    x1394 = x1029 * x22 + x183 * x72 * (x1356 + x1358)
    x1395 = x1030 * x22 + x1394
    x1396 = x1035 * x22 + x72 * (x1034 * x1372 + x1371 * x571)
    x1397 = x1036 * x22 + x1396
    x1398 = x1040 * x22 + x72 * (x1387 * x506 + x1388 * x580)
    x1399 = x1041 * x22 + x1398
    x1400 = x1026 + x135 * x1387
    x1401 = x1017 * x85 + x135 * x1388
    x1402 = x1047 * x22 + x72 * (x1400 * x73 + x1401 * x92)
    x1403 = x1048 * x22 + x1402
    x1404 = x1054 * x22 + x1355 * x207
    x1405 = x1055 * x22 + x1404
    x1406 = x1059 * x22 + x1371 * x212
    x1407 = x1060 * x22 + x1406
    x1408 = x1064 * x22 + x1387 * x188
    x1409 = x1065 * x22 + x1408
    x1410 = x1069 * x22 + x1400 * x160
    x1411 = x1070 * x22 + x1410
    x1412 = x1074 * x22 + x72 * (x1051 + x135 * x1400)
    x1413 = x1075 * x22 + x1412
    x1414 = x0 * x278 + x274
    x1415 = x4**3
    x1416 = x1415 * x182
    x1417 = x1416 * x267 + x277 * x73
    x1418 = 2.645751311064591 * x808
    x1419 = x0 * x310 + x305
    x1420 = x182 * x7
    x1421 = x1420 * x6
    x1422 = x1421 * x301 + x309 * x73
    x1423 = x0 * x326 + x322
    x1424 = x12 * x1420
    x1425 = x1424 * x267 + x325 * x73
    x1426 = x0 * x339 + x335
    x1427 = x308 * x337 + x338 * x73
    x1428 = x0 * x357 + x353
    x1429 = x308 * x355 + x356 * x73
    x1430 = x0 * x370 + x366
    x1431 = x13 * x182 * x4
    x1432 = x1431 * x267 + x369 * x73
    x1433 = x0 * x379 + x375
    x1434 = x118 * x337 + x156
    x1435 = x113 * x1434 + x377 * x73
    x1436 = x0 * x389 + x385
    x1437 = x118 * x355 + x168
    x1438 = x113 * x1437 + x387 * x73
    x1439 = x0 * x402 + x397
    x1440 = x172 * x300 + x179
    x1441 = x113 * x1440 + x400 * x73
    x1442 = x0 * x410 + x407
    x1443 = x201 * x267
    x1444 = x1443 + x201 * x268
    x1445 = x0 * x415 + x413
    x1446 = x118 * x377 + x183 * x82
    x1447 = x0 * x421 + x419
    x1448 = x118 * x387 + x189 * x82
    x1449 = x0 * x426 + x424
    x1450 = x118 * x400 + x195 * x82
    x1451 = x0 * x433 + x430
    x1452 = x201 * x82
    x1453 = x1452 + x201 * x295
    x1454 = x0 * x439 + x437
    x1455 = x228 * x241
    x1456 = x72 * (x1416 * x637 + x643 * x73)
    x1457 = x1417 * x279 + x1456
    x1458 = x72 * (x1421 * x664 + x667 * x73)
    x1459 = x1422 * x279 + x1458
    x1460 = x72 * (x1424 * x637 + x681 * x73)
    x1461 = x1425 * x279 + x1460
    x1462 = x72 * (x308 * x691 + x692 * x73)
    x1463 = x1427 * x279 + x1462
    x1464 = x72 * (x308 * x703 + x704 * x73)
    x1465 = x1429 * x279 + x1464
    x1466 = x72 * (x1431 * x637 + x714 * x73)
    x1467 = x1432 * x279 + x1466
    x1468 = x118 * x691 + x337 * x92
    x1469 = x72 * (x113 * x1468 + x722 * x73)
    x1470 = x1435 * x279 + x1469
    x1471 = x118 * x703 + x355 * x92
    x1472 = x72 * (x113 * x1471 + x73 * x731)
    x1473 = x1438 * x279 + x1472
    x1474 = x172 * (x662 + x663)
    x1475 = x72 * (x113 * x1474 + x73 * x740)
    x1476 = x1441 * x279 + x1475
    x1477 = x201 * x637
    x1478 = x72 * (x1477 + x201 * x638)
    x1479 = x1444 * x279 + x1478
    x1480 = x72 * (x118 * x722 + x378)
    x1481 = x1446 * x279 + x1480
    x1482 = x72 * (x118 * x731 + x388)
    x1483 = x1448 * x279 + x1482
    x1484 = x72 * (x118 * x740 + x401)
    x1485 = x1450 * x279 + x1484
    x1486 = x72 * (x201 * x659 + x409)
    x1487 = x1453 * x279 + x1486
    x1488 = x228 * x627
    x1489 = x1455 * x21 + x1488
    x1490 = x72 * (x1416 * x794 + x73 * x799)
    x1491 = x1417 * x488 + x1490
    x1492 = x72 * (x1421 * x814 + x73 * x817)
    x1493 = x1422 * x488 + x1492
    x1494 = x72 * (x1421 * x830 + x73 * x833)
    x1495 = x1425 * x488 + x1494
    x1496 = x72 * (x308 * x844 + x73 * x845)
    x1497 = x1427 * x488 + x1496
    x1498 = x72 * (x308 * x856 + x73 * x857)
    x1499 = x1429 * x488 + x1498
    x1500 = x72 * (x308 * x869 + x73 * x870)
    x1501 = x1432 * x488 + x1500
    x1502 = x118 * x844 + x533
    x1503 = x72 * (x113 * x1502 + x73 * x878)
    x1504 = x1435 * x488 + x1503
    x1505 = x118 * x856 + x545
    x1506 = x72 * (x113 * x1505 + x73 * x887)
    x1507 = x1438 * x488 + x1506
    x1508 = x118 * x869 + x560
    x1509 = x72 * (x113 * x1508 + x73 * x896)
    x1510 = x1441 * x488 + x1509
    x1511 = x135 * x869 + x368
    x1512 = x72 * (x113 * x1511 + x73 * x905)
    x1513 = x1444 * x488 + x1512
    x1514 = x72 * (x118 * x878 + x183 * x473)
    x1515 = x1446 * x488 + x1514
    x1516 = x72 * (x118 * x887 + x514 * x918)
    x1517 = x1448 * x488 + x1516
    x1518 = x72 * (x118 * x896 + x544 * x554)
    x1519 = x1450 * x488 + x1518
    x1520 = x72 * (x113 * x588 + x118 * x905)
    x1521 = x1453 * x488 + x1520
    x1522 = x72 * (x135 * x905 + x201 * x263)
    x1523 = x1455 * x22 + x1522
    x1524 = x72 * (x1090 * x1416 + x1094 * x73)
    x1525 = x1456 * x21 + x1524
    x1526 = x1457 * x21 + x1525
    x1527 = x72 * (x1104 * x1421 + x1106 * x73)
    x1528 = x1458 * x21 + x1527
    x1529 = x1459 * x21 + x1528
    x1530 = x72 * (x1090 * x1424 + x1111 * x73)
    x1531 = x1460 * x21 + x1530
    x1532 = x1461 * x21 + x1531
    x1533 = x72 * (x1116 * x308 + x1117 * x73)
    x1534 = x1462 * x21 + x1533
    x1535 = x1463 * x21 + x1534
    x1536 = x72 * (x1122 * x308 + x1123 * x73)
    x1537 = x1464 * x21 + x1536
    x1538 = x1465 * x21 + x1537
    x1539 = x72 * (x1090 * x1431 + x1127 * x73)
    x1540 = x1466 * x21 + x1539
    x1541 = x1467 * x21 + x1540
    x1542 = x1116 * x118 + x691 * x85
    x1543 = x72 * (x113 * x1542 + x1131 * x73)
    x1544 = x1469 * x21 + x1543
    x1545 = x1470 * x21 + x1544
    x1546 = x1122 * x118 + x703 * x85
    x1547 = x72 * (x113 * x1546 + x1135 * x73)
    x1548 = x1472 * x21 + x1547
    x1549 = x1473 * x21 + x1548
    x1550 = x172 * (x1102 + x1103)
    x1551 = x72 * (x113 * x1550 + x1139 * x73)
    x1552 = x1475 * x21 + x1551
    x1553 = x1476 * x21 + x1552
    x1554 = x1090 * x201
    x1555 = x72 * (x1091 * x201 + x1554)
    x1556 = x1478 * x21 + x1555
    x1557 = x1479 * x21 + x1556
    x1558 = x72 * (x1131 * x118 + x722 * x85)
    x1559 = x1480 * x21 + x1558
    x1560 = x1481 * x21 + x1559
    x1561 = x72 * (x1135 * x118 + x731 * x85)
    x1562 = x1482 * x21 + x1561
    x1563 = x1483 * x21 + x1562
    x1564 = x72 * (x1139 * x118 + x740 * x85)
    x1565 = x1484 * x21 + x1564
    x1566 = x1485 * x21 + x1565
    x1567 = x201 * x72 * (x1099 + x1100)
    x1568 = x1486 * x21 + x1567
    x1569 = x1487 * x21 + x1568
    x1570 = x1084 * x228
    x1571 = x1488 * x21 + x1570
    x1572 = x1489 * x21 + x1571
    x1573 = x72 * (x1163 * x1416 + x1166 * x73)
    x1574 = x1456 * x22 + x1573
    x1575 = x1491 * x21 + x1574
    x1576 = x288 * x808
    x1577 = x72 * (x1174 * x1421 + x1176 * x73)
    x1578 = x1458 * x22 + x1577
    x1579 = x1493 * x21 + x1578
    x1580 = x170 * x824
    x1581 = x72 * (x1183 * x1421 + x1185 * x73)
    x1582 = x1460 * x22 + x1581
    x1583 = x1495 * x21 + x1582
    x1584 = x72 * (x1191 * x308 + x1192 * x73)
    x1585 = x1462 * x22 + x1584
    x1586 = x1497 * x21 + x1585
    x1587 = x72 * (x1200 * x308 + x1201 * x73)
    x1588 = x1464 * x22 + x1587
    x1589 = x1499 * x21 + x1588
    x1590 = x132 * x864
    x1591 = x72 * (x1208 * x308 + x1209 * x73)
    x1592 = x1466 * x22 + x1591
    x1593 = x1501 * x21 + x1592
    x1594 = x118 * x1191 + x844 * x92
    x1595 = x72 * (x113 * x1594 + x1214 * x73)
    x1596 = x1469 * x22 + x1595
    x1597 = x1504 * x21 + x1596
    x1598 = x118 * x1200 + x856 * x92
    x1599 = x72 * (x113 * x1598 + x1219 * x73)
    x1600 = x1472 * x22 + x1599
    x1601 = x1507 * x21 + x1600
    x1602 = x869 * x92
    x1603 = x118 * x1208 + x1602
    x1604 = x72 * (x113 * x1603 + x1225 * x73)
    x1605 = x1475 * x22 + x1604
    x1606 = x1510 * x21 + x1605
    x1607 = x1208 * x135 + x713
    x1608 = x72 * (x113 * x1607 + x1230 * x73)
    x1609 = x1478 * x22 + x1608
    x1610 = x1513 * x21 + x1609
    x1611 = x72 * (x118 * x1214 + x879)
    x1612 = x1480 * x22 + x1611
    x1613 = x1515 * x21 + x1612
    x1614 = x72 * (x118 * x1219 + x888)
    x1615 = x1482 * x22 + x1614
    x1616 = x1517 * x21 + x1615
    x1617 = x72 * (x118 * x1225 + x897)
    x1618 = x1484 * x22 + x1617
    x1619 = x1519 * x21 + x1618
    x1620 = x72 * (x118 * x1230 + x906)
    x1621 = x1486 * x22 + x1620
    x1622 = x1521 * x21 + x1621
    x1623 = x72 * (x1230 * x135 + x201 * x634)
    x1624 = x1488 * x22 + x1623
    x1625 = x1523 * x21 + x1624
    x1626 = x72 * (x1260 * x1416 + x1263 * x73)
    x1627 = x1490 * x22 + x1626
    x1628 = x1491 * x22 + x1627
    x1629 = x72 * (x1270 * x1421 + x1272 * x73)
    x1630 = x1492 * x22 + x1629
    x1631 = x1493 * x22 + x1630
    x1632 = x72 * (x1279 * x1421 + x1281 * x73)
    x1633 = x1494 * x22 + x1632
    x1634 = x1495 * x22 + x1633
    x1635 = x72 * (x1288 * x308 + x1289 * x73)
    x1636 = x1496 * x22 + x1635
    x1637 = x1497 * x22 + x1636
    x1638 = x72 * (x1296 * x308 + x1297 * x73)
    x1639 = x1498 * x22 + x1638
    x1640 = x1499 * x22 + x1639
    x1641 = x72 * (x1304 * x308 + x1305 * x73)
    x1642 = x1500 * x22 + x1641
    x1643 = x1501 * x22 + x1642
    x1644 = x1001 + x118 * x1288
    x1645 = x72 * (x113 * x1644 + x1310 * x73)
    x1646 = x1503 * x22 + x1645
    x1647 = x1504 * x22 + x1646
    x1648 = x1009 + x118 * x1296
    x1649 = x72 * (x113 * x1648 + x1316 * x73)
    x1650 = x1506 * x22 + x1649
    x1651 = x1507 * x22 + x1650
    x1652 = x1020 + x118 * x1304
    x1653 = x72 * (x113 * x1652 + x1322 * x73)
    x1654 = x1509 * x22 + x1653
    x1655 = x1510 * x22 + x1654
    x1656 = x1304 * x135 + x1602
    x1657 = x72 * (x113 * x1656 + x1328 * x73)
    x1658 = x1512 * x22 + x1657
    x1659 = x1513 * x22 + x1658
    x1660 = x72 * (x118 * x1310 + x183 * x953)
    x1661 = x1514 * x22 + x1660
    x1662 = x1515 * x22 + x1661
    x1663 = x72 * (x118 * x1316 + x918 * x986)
    x1664 = x1516 * x22 + x1663
    x1665 = x1517 * x22 + x1664
    x1666 = x72 * (x1017 * x544 + x118 * x1322)
    x1667 = x1518 * x22 + x1666
    x1668 = x1519 * x22 + x1667
    x1669 = x72 * (x1046 * x113 + x118 * x1328)
    x1670 = x1520 * x22 + x1669
    x1671 = x1521 * x22 + x1670
    x1672 = x72 * (x1328 * x135 + x906)
    x1673 = x1522 * x22 + x1672
    x1674 = x1523 * x22 + x1673
    x1675 = -x1080 * x9 + x1083 * x232 + 3.0 * x624
    x1676 = x1675 * x6
    x1677 = x1079 * x232 - x1085 * x648 + 3.0 * x647
    x1678 = -x108 * x1677 + x1675 * x5
    x1679 = x1678 * x4
    x1680 = (
        x1524 * x21
        + x1525 * x21
        + x72 * (x1416 * x1676 + x73 * (x1676 * x276 + x73**2 * (2.0 * x1676 + x1679)))
    )
    x1681 = x1675 * x9
    x1682 = 4.0 * x1090
    x1683 = x1681 + x1682
    x1684 = x113 * x1683
    x1685 = x1678 * x9
    x1686 = 4.0 * x1088
    x1687 = x1685 + x1686
    x1688 = (
        x1527 * x21
        + x1528 * x21
        + x72 * (x1421 * x1683 + x73 * (x1683 * x308 + x73 * (x1684 + x1687 * x73)))
    )
    x1689 = x135 * x1676
    x1690 = (
        x1530 * x21
        + x1531 * x21
        + x72 * (x1424 * x1676 + x73 * (x1676 * x324 + x73 * (x135 * x1679 + x1689)))
    )
    x1691 = x1104 * x79 + x118 * x1683
    x1692 = x113 * x1691
    x1693 = x1101 * x79 + x118 * x1687
    x1694 = x1533 * x21 + x1534 * x21 + x72 * (x1691 * x308 + x73 * (x1692 + x1693 * x73))
    x1695 = x135 * (x1681 + x1682)
    x1696 = x113 * x1695
    x1697 = x135 * (x1685 + x1686)
    x1698 = x1536 * x21 + x1537 * x21 + x72 * (x1695 * x308 + x73 * (x1696 + x1697 * x73))
    x1699 = x1676 * x172
    x1700 = (
        x1539 * x21 + x1540 * x21 + x72 * (x1431 * x1676 + x73 * (x1679 * x172 + x1699))
    )
    x1701 = x1116 * x79 + x118 * x1691
    x1702 = x113 * x1701
    x1703 = x1115 * x79 + x118 * x1693
    x1704 = x1543 * x21 + x1544 * x21 + x72 * (x1702 + x1703 * x73)
    x1705 = x1122 * x79 + x118 * x1695
    x1706 = x113 * x1705
    x1707 = x1121 * x79 + x118 * x1697
    x1708 = x1547 * x21 + x1548 * x21 + x72 * (x1706 + x1707 * x73)
    x1709 = x172 * (x1681 + x1682)
    x1710 = x113 * x1709
    x1711 = x172 * (x1685 + x1686)
    x1712 = x1551 * x21 + x1552 * x21 + x72 * (x1710 + x1711 * x73)
    x1713 = x1676 * x201
    x1714 = x1555 * x21 + x1556 * x21 + x72 * (x1679 * x201 + x1713)
    x1715 = x1558 * x21 + x1559 * x21 + x72 * (x1131 * x79 + x118 * x1703)
    x1716 = x1561 * x21 + x1562 * x21 + x72 * (x1135 * x79 + x118 * x1707)
    x1717 = x1564 * x21 + x1565 * x21 + x72 * (x1139 * x79 + x118 * x1711)
    x1718 = x1567 * x21 + x1568 * x21 + x201 * x72 * (x1685 + x1686)
    x1719 = x1570 * x21 + x1571 * x21 + x1678 * x228
    x1720 = -x1155 * x9 + x1158 * x232 + 2.0 * x783
    x1721 = x1720 * x6
    x1722 = x1154 * x232 - x1160 * x648 + 2.0 * x803
    x1723 = -x108 * x1722 + x1720 * x5
    x1724 = x72 * (
        x1416 * x1721 + x73 * (x1721 * x276 + x73**2 * (2.0 * x1721 + x1723 * x4))
    )
    x1725 = x1524 * x22 + x1574 * x21 + x1724
    x1726 = 3.0 * x1163 + x1720 * x9
    x1727 = x1159 * x57 + x1723 * x9
    x1728 = x72 * (
        x1421 * x1726 + x73 * (x1726 * x308 + x73 * (x113 * x1726 + x1727 * x73))
    )
    x1729 = x1527 * x22 + x1578 * x21 + x1728
    x1730 = x1090 + x12 * x1720
    x1731 = x1088 + x12 * x1723
    x1732 = x72 * (
        x1421 * x1730 + x73 * (x1730 * x308 + x73 * (x113 * x1730 + x1731 * x73))
    )
    x1733 = x1530 * x22 + x1582 * x21 + x1732
    x1734 = x1174 * x85 + x118 * x1726
    x1735 = x1172 * x85 + x118 * x1727
    x1736 = x72 * (x1734 * x308 + x73 * (x113 * x1734 + x1735 * x73))
    x1737 = x1533 * x22 + x1585 * x21 + x1736
    x1738 = x118 * x1730 + x1183 * x85
    x1739 = x118 * x1731 + x1181 * x85
    x1740 = x72 * (x1738 * x308 + x73 * (x113 * x1738 + x1739 * x73))
    x1741 = x1536 * x22 + x1588 * x21 + x1740
    x1742 = x1109 + x135 * x1730
    x1743 = x135 * (x1088 + x1731)
    x1744 = x72 * (x1742 * x308 + x73 * (x113 * x1742 + x1743 * x73))
    x1745 = x1539 * x22 + x1592 * x21 + x1744
    x1746 = x118 * x1734 + x1191 * x85
    x1747 = x118 * x1735 + x1190 * x85
    x1748 = x72 * (x113 * x1746 + x1747 * x73)
    x1749 = x1543 * x22 + x1596 * x21 + x1748
    x1750 = x118 * x1738 + x1200 * x85
    x1751 = x118 * x1739 + x1198 * x85
    x1752 = x72 * (x113 * x1750 + x1751 * x73)
    x1753 = x1547 * x22 + x1600 * x21 + x1752
    x1754 = x118 * x1742 + x1208 * x85
    x1755 = x118 * x1743 + x1206 * x85
    x1756 = x72 * (x113 * x1754 + x1755 * x73)
    x1757 = x1551 * x22 + x1605 * x21 + x1756
    x1758 = x1126 + x135 * x1742
    x1759 = x1088 * x172 + x135 * x1743
    x1760 = x72 * (x113 * x1758 + x1759 * x73)
    x1761 = x1555 * x22 + x1609 * x21 + x1760
    x1762 = x72 * (x118 * x1747 + x1214 * x85)
    x1763 = x1558 * x22 + x1612 * x21 + x1762
    x1764 = x72 * (x118 * x1751 + x1219 * x85)
    x1765 = x1561 * x22 + x1615 * x21 + x1764
    x1766 = x72 * (x118 * x1755 + x1225 * x85)
    x1767 = x1564 * x22 + x1618 * x21 + x1766
    x1768 = x72 * (x118 * x1759 + x1230 * x85)
    x1769 = x1567 * x22 + x1621 * x21 + x1768
    x1770 = x72 * (x1088 * x201 + x135 * x1759)
    x1771 = x1570 * x22 + x1624 * x21 + x1770
    x1772 = -x1252 * x9 + x1255 * x232 + x943
    x1773 = x1772 * x6
    x1774 = x1251 * x232 - x1257 * x648 + x966
    x1775 = -x108 * x1774 + x1772 * x5
    x1776 = x72 * (
        x1416 * x1773 + x73 * (x1773 * x276 + x73**2 * (2.0 * x1773 + x1775 * x4))
    )
    x1777 = x1573 * x22 + x1776
    x1778 = x1574 * x22 + x1777
    x1779 = 2.0 * x1260 + x1772 * x9
    x1780 = x1259 + x1775 * x9
    x1781 = x72 * (
        x1421 * x1779 + x73 * (x1779 * x308 + x73 * (x113 * x1779 + x1780 * x73))
    )
    x1782 = x1577 * x22 + x1781
    x1783 = x1578 * x22 + x1782
    x1784 = 2.0 * x1163 + x12 * x1772
    x1785 = x1162 + x12 * x1775
    x1786 = x72 * (
        x1421 * x1784 + x73 * (x1784 * x308 + x73 * (x113 * x1784 + x1785 * x73))
    )
    x1787 = x1581 * x22 + x1786
    x1788 = x1582 * x22 + x1787
    x1789 = x118 * x1779 + x1270 * x92
    x1790 = x118 * x1780 + x1269
    x1791 = x72 * (x1789 * x308 + x73 * (x113 * x1789 + x1790 * x73))
    x1792 = x1584 * x22 + x1791
    x1793 = x1585 * x22 + x1792
    x1794 = x118 * x1784 + x1279 * x92
    x1795 = x118 * x1785 + x1278
    x1796 = x72 * (x1794 * x308 + x73 * (x113 * x1794 + x1795 * x73))
    x1797 = x1587 * x22 + x1796
    x1798 = x1588 * x22 + x1797
    x1799 = x1183 * x92 + x135 * x1784
    x1800 = x1182 + x135 * x1785
    x1801 = x72 * (x1799 * x308 + x73 * (x113 * x1799 + x1800 * x73))
    x1802 = x1591 * x22 + x1801
    x1803 = x1592 * x22 + x1802
    x1804 = x118 * x1789 + x1288 * x92
    x1805 = x118 * x1790 + x1287
    x1806 = x72 * (x113 * x1804 + x1805 * x73)
    x1807 = x1595 * x22 + x1806
    x1808 = x1596 * x22 + x1807
    x1809 = x118 * x1794 + x1296 * x92
    x1810 = x118 * x1795 + x1295
    x1811 = x72 * (x113 * x1809 + x1810 * x73)
    x1812 = x1599 * x22 + x1811
    x1813 = x1600 * x22 + x1812
    x1814 = x118 * x1799 + x1304 * x92
    x1815 = x118 * x1800 + x1303
    x1816 = x72 * (x113 * x1814 + x1815 * x73)
    x1817 = x1604 * x22 + x1816
    x1818 = x1605 * x22 + x1817
    x1819 = x1208 * x92 + x135 * x1799
    x1820 = x1207 + x135 * x1800
    x1821 = x72 * (x113 * x1819 + x1820 * x73)
    x1822 = x1608 * x22 + x1821
    x1823 = x1609 * x22 + x1822
    x1824 = x72 * (x118 * x1805 + x1311)
    x1825 = x1611 * x22 + x1824
    x1826 = x1612 * x22 + x1825
    x1827 = x72 * (x118 * x1810 + x1317)
    x1828 = x1614 * x22 + x1827
    x1829 = x1615 * x22 + x1828
    x1830 = x72 * (x118 * x1815 + x1323)
    x1831 = x1617 * x22 + x1830
    x1832 = x1618 * x22 + x1831
    x1833 = x72 * (x118 * x1820 + x1329)
    x1834 = x1620 * x22 + x1833
    x1835 = x1621 * x22 + x1834
    x1836 = x72 * (x1231 + x135 * x1820)
    x1837 = x1623 * x22 + x1836
    x1838 = x1624 * x22 + x1837
    x1839 = -x1349 * x9 + x1352 * x232
    x1840 = x1839 * x6
    x1841 = x1348 * x232 - x1354 * x648
    x1842 = -x108 * x1841 + x1839 * x5
    x1843 = x1626 * x22 + x72 * (
        x1416 * x1840 + x73 * (x1840 * x276 + x73**2 * (2.0 * x1840 + x1842 * x4))
    )
    x1844 = x1627 * x22 + x1843
    x1845 = x1359 + x1839 * x9
    x1846 = x1357 + x1842 * x9
    x1847 = x1629 * x22 + x72 * (
        x1421 * x1845 + x73 * (x1845 * x308 + x73 * (x113 * x1845 + x1846 * x73))
    )
    x1848 = x1630 * x22 + x1847
    x1849 = x12 * x1839 + 3.0 * x1260
    x1850 = x12 * x1842 + x1256 * x57
    x1851 = x1632 * x22 + x72 * (
        x1421 * x1849 + x73 * (x1849 * x308 + x73 * (x113 * x1849 + x1850 * x73))
    )
    x1852 = x1633 * x22 + x1851
    x1853 = x118 * x1845 + x1366
    x1854 = x118 * (x1357 + x1846)
    x1855 = x1635 * x22 + x72 * (x1853 * x308 + x73 * (x113 * x1853 + x1854 * x73))
    x1856 = x1636 * x22 + x1855
    x1857 = x118 * x1849 + x1374
    x1858 = x113 * x1372 + x118 * x1850
    x1859 = x1638 * x22 + x72 * (x1857 * x308 + x73 * (x113 * x1857 + x1858 * x73))
    x1860 = x1639 * x22 + x1859
    x1861 = x1279 * x85 + x135 * x1849
    x1862 = x1277 * x85 + x135 * x1850
    x1863 = x1641 * x22 + x72 * (x1861 * x308 + x73 * (x113 * x1861 + x1862 * x73))
    x1864 = x1642 * x22 + x1863
    x1865 = x118 * x1853 + x1379
    x1866 = x118 * x1854 + x1357 * x149
    x1867 = x1645 * x22 + x72 * (x113 * x1865 + x1866 * x73)
    x1868 = x1646 * x22 + x1867
    x1869 = x118 * x1857 + x1383
    x1870 = x118 * x1858 + x1372 * x544
    x1871 = x1649 * x22 + x72 * (x113 * x1869 + x1870 * x73)
    x1872 = x1650 * x22 + x1871
    x1873 = x118 * x1861 + x1390
    x1874 = x113 * x1388 + x118 * x1862
    x1875 = x1653 * x22 + x72 * (x113 * x1873 + x1874 * x73)
    x1876 = x1654 * x22 + x1875
    x1877 = x1304 * x85 + x135 * x1861
    x1878 = x1302 * x85 + x135 * x1862
    x1879 = x1657 * x22 + x72 * (x113 * x1877 + x1878 * x73)
    x1880 = x1658 * x22 + x1879
    x1881 = x1660 * x22 + x72 * (x118 * x1866 + x1357 * x183)
    x1882 = x1661 * x22 + x1881
    x1883 = x1663 * x22 + x72 * (x118 * x1870 + x1372 * x918)
    x1884 = x1664 * x22 + x1883
    x1885 = x1666 * x22 + x72 * (x118 * x1874 + x1388 * x544)
    x1886 = x1667 * x22 + x1885
    x1887 = x1669 * x22 + x72 * (x113 * x1401 + x118 * x1878)
    x1888 = x1670 * x22 + x1887
    x1889 = x1672 * x22 + x72 * (x1328 * x85 + x135 * x1878)
    x1890 = x1673 * x22 + x1889
    x1891 = x0 * x487 + x484
    x1892 = x1416 * x477 + x486 * x73
    x1893 = x0 * x508 + x504
    x1894 = x1420 * x9
    x1895 = x1894 * x477 + x507 * x73
    x1896 = x0 * x525 + x522
    x1897 = x1421 * x518 + x524 * x73
    x1898 = x0 * x535 + x531
    x1899 = x477 * x571 + x534 * x73
    x1900 = x0 * x547 + x542
    x1901 = x194 * x4
    x1902 = x1901 * x6
    x1903 = x1902 * x518 + x546 * x73
    x1904 = x0 * x562 + x557
    x1905 = x308 * x559 + x561 * x73
    x1906 = x0 * x568 + x566
    x1907 = x183 * x477
    x1908 = x183 * x478 + x1907
    x1909 = x0 * x574 + x572
    x1910 = x518 * x918
    x1911 = x1910 + x514 * x571
    x1912 = x0 * x581 + x578
    x1913 = x544 * x559
    x1914 = x1913 + x506 * x554
    x1915 = x0 * x590 + x586
    x1916 = x135 * x559 + x179
    x1917 = x113 * x1916
    x1918 = x1917 + x588 * x73
    x1919 = x0 * x596 + x594
    x1920 = x207 * x451
    x1921 = x0 * x602 + x600
    x1922 = x212 * x514
    x1923 = x0 * x607 + x605
    x1924 = x188 * x554
    x1925 = x0 * x612 + x610
    x1926 = x160 * x588
    x1927 = x0 * x617 + x615
    x1928 = x135 * x588 + x1452
    x1929 = x21 * x487 + x800
    x1930 = x1490 + x1892 * x279
    x1931 = x21 * x508 + x818
    x1932 = x1492 + x1895 * x279
    x1933 = x21 * x525 + x834
    x1934 = x1494 + x1897 * x279
    x1935 = x21 * x535 + x846
    x1936 = x1496 + x1899 * x279
    x1937 = x21 * x547 + x858
    x1938 = x1498 + x1903 * x279
    x1939 = x21 * x562 + x871
    x1940 = x1500 + x1905 * x279
    x1941 = x21 * x568 + x880
    x1942 = x1503 + x1908 * x279
    x1943 = x21 * x574 + x889
    x1944 = x1506 + x1911 * x279
    x1945 = x21 * x581 + x898
    x1946 = x1509 + x1914 * x279
    x1947 = x21 * x590 + x907
    x1948 = x1512 + x1918 * x279
    x1949 = x21 * x596 + x913
    x1950 = x1514 + x1920 * x21
    x1951 = x21 * x602 + x919
    x1952 = x1516 + x1922 * x21
    x1953 = x21 * x607 + x924
    x1954 = x1518 + x1924 * x21
    x1955 = x21 * x612 + x929
    x1956 = x1520 + x1926 * x21
    x1957 = x21 * x617 + x934
    x1958 = x1522 + x1928 * x279
    x1959 = x72 * (x1416 * x956 + x73 * x962)
    x1960 = x1892 * x488 + x1959
    x1961 = x72 * (x1894 * x956 + x73 * x979)
    x1962 = x1895 * x488 + x1961
    x1963 = x72 * (x1421 * x988 + x73 * x992)
    x1964 = x1897 * x488 + x1963
    x1965 = x72 * (x1002 * x73 + x571 * x956)
    x1966 = x1899 * x488 + x1965
    x1967 = x72 * (x1010 * x73 + x1902 * x988)
    x1968 = x1903 * x488 + x1967
    x1969 = x72 * (x1019 * x308 + x1021 * x73)
    x1970 = x1905 * x488 + x1969
    x1971 = x183 * x956
    x1972 = x72 * (x183 * x957 + x1971)
    x1973 = x1908 * x488 + x1972
    x1974 = x918 * x988
    x1975 = x72 * (x1974 + x571 * x986)
    x1976 = x1911 * x488 + x1975
    x1977 = x1019 * x544
    x1978 = x72 * (x1017 * x506 + x1977)
    x1979 = x1914 * x488 + x1978
    x1980 = x1019 * x135 + x559 * x92
    x1981 = x113 * x1980
    x1982 = x72 * (x1046 * x73 + x1981)
    x1983 = x1918 * x488 + x1982
    x1984 = x207 * x946
    x1985 = x1920 * x22 + x1984
    x1986 = x212 * x986
    x1987 = x1922 * x22 + x1986
    x1988 = x1017 * x188
    x1989 = x1924 * x22 + x1988
    x1990 = x1046 * x160
    x1991 = x1926 * x22 + x1990
    x1992 = x72 * (x1046 * x135 + x589)
    x1993 = x1928 * x488 + x1992
    x1994 = x1490 * x21 + x1573
    x1995 = x1930 * x21 + x1994
    x1996 = x1167 + x21 * x800
    x1997 = x1492 * x21 + x1577
    x1998 = x1932 * x21 + x1997
    x1999 = x1177 + x21 * x818
    x2000 = x1494 * x21 + x1581
    x2001 = x1934 * x21 + x2000
    x2002 = x1186 + x21 * x834
    x2003 = x1496 * x21 + x1584
    x2004 = x1936 * x21 + x2003
    x2005 = x1193 + x21 * x846
    x2006 = x1498 * x21 + x1587
    x2007 = x1938 * x21 + x2006
    x2008 = x1202 + x21 * x858
    x2009 = x1500 * x21 + x1591
    x2010 = x1940 * x21 + x2009
    x2011 = x1210 + x21 * x871
    x2012 = x1503 * x21 + x1595
    x2013 = x1942 * x21 + x2012
    x2014 = x1215 + x21 * x880
    x2015 = x1506 * x21 + x1599
    x2016 = x1944 * x21 + x2015
    x2017 = x1220 + x21 * x889
    x2018 = x1509 * x21 + x1604
    x2019 = x1946 * x21 + x2018
    x2020 = x1226 + x21 * x898
    x2021 = x1512 * x21 + x1608
    x2022 = x1948 * x21 + x2021
    x2023 = x1232 + x21 * x907
    x2024 = x1514 * x21 + x1611
    x2025 = x1950 * x21 + x2024
    x2026 = x1235 + x21 * x913
    x2027 = x1516 * x21 + x1614
    x2028 = x1952 * x21 + x2027
    x2029 = x1238 + x21 * x919
    x2030 = x1518 * x21 + x1617
    x2031 = x1954 * x21 + x2030
    x2032 = x1241 + x21 * x924
    x2033 = x1520 * x21 + x1620
    x2034 = x1956 * x21 + x2033
    x2035 = x1245 + x21 * x929
    x2036 = x1522 * x21 + x1623
    x2037 = x1958 * x21 + x2036
    x2038 = x1248 + x21 * x934
    x2039 = x1627 + x1960 * x21
    x2040 = x1630 + x1962 * x21
    x2041 = x1633 + x1964 * x21
    x2042 = x1636 + x1966 * x21
    x2043 = x1639 + x1968 * x21
    x2044 = x1642 + x1970 * x21
    x2045 = x1646 + x1973 * x21
    x2046 = x1650 + x1976 * x21
    x2047 = x1654 + x1979 * x21
    x2048 = x1658 + x1983 * x21
    x2049 = x1661 + x1985 * x21
    x2050 = x1664 + x1987 * x21
    x2051 = x1667 + x1989 * x21
    x2052 = x1670 + x1991 * x21
    x2053 = x1673 + x1993 * x21
    x2054 = x72 * (x1359 * x1416 + x1363 * x73)
    x2055 = x1959 * x22 + x2054
    x2056 = x1960 * x22 + x2055
    x2057 = x72 * (x1359 * x1894 + x1368 * x73)
    x2058 = x1961 * x22 + x2057
    x2059 = x1962 * x22 + x2058
    x2060 = x72 * (x1373 * x1421 + x1376 * x73)
    x2061 = x1963 * x22 + x2060
    x2062 = x1964 * x22 + x2061
    x2063 = x72 * (x1359 * x571 + x1380 * x73)
    x2064 = x1965 * x22 + x2063
    x2065 = x1966 * x22 + x2064
    x2066 = x1373 * x4
    x2067 = x72 * (x1384 * x73 + x194 * x2066 * x6)
    x2068 = x1967 * x22 + x2067
    x2069 = x1968 * x22 + x2068
    x2070 = x72 * (x1389 * x308 + x1391 * x73)
    x2071 = x1969 * x22 + x2070
    x2072 = x1970 * x22 + x2071
    x2073 = x1359 * x183
    x2074 = x72 * (x1360 * x183 + x2073)
    x2075 = x1972 * x22 + x2074
    x2076 = x1973 * x22 + x2075
    x2077 = x1373 * x918
    x2078 = x72 * (x1372 * x571 + x2077)
    x2079 = x1975 * x22 + x2078
    x2080 = x1976 * x22 + x2079
    x2081 = x1389 * x544
    x2082 = x72 * (x1388 * x506 + x2081)
    x2083 = x1978 * x22 + x2082
    x2084 = x1979 * x22 + x2083
    x2085 = x1019 * x85 + x135 * x1389
    x2086 = x113 * x2085
    x2087 = x72 * (x1401 * x73 + x2086)
    x2088 = x1982 * x22 + x2087
    x2089 = x1983 * x22 + x2088
    x2090 = x1353 * x207
    x2091 = x1984 * x22 + x2090
    x2092 = x1985 * x22 + x2091
    x2093 = x1372 * x212
    x2094 = x1986 * x22 + x2093
    x2095 = x1987 * x22 + x2094
    x2096 = x1388 * x188
    x2097 = x1988 * x22 + x2096
    x2098 = x1989 * x22 + x2097
    x2099 = x1401 * x160
    x2100 = x1990 * x22 + x2099
    x2101 = x1991 * x22 + x2100
    x2102 = x72 * (x1046 * x85 + x135 * x1401)
    x2103 = x1992 * x22 + x2102
    x2104 = x1993 * x22 + x2103
    x2105 = x1573 * x21 + x1724 + x1994 * x21
    x2106 = x1577 * x21 + x1728 + x1997 * x21
    x2107 = x1581 * x21 + x1732 + x2000 * x21
    x2108 = x1584 * x21 + x1736 + x2003 * x21
    x2109 = x1587 * x21 + x1740 + x2006 * x21
    x2110 = x1591 * x21 + x1744 + x2009 * x21
    x2111 = x1595 * x21 + x1748 + x2012 * x21
    x2112 = x1599 * x21 + x1752 + x2015 * x21
    x2113 = x1604 * x21 + x1756 + x2018 * x21
    x2114 = x1608 * x21 + x1760 + x2021 * x21
    x2115 = x1611 * x21 + x1762 + x2024 * x21
    x2116 = x1614 * x21 + x1764 + x2027 * x21
    x2117 = x1617 * x21 + x1766 + x2030 * x21
    x2118 = x1620 * x21 + x1768 + x2033 * x21
    x2119 = x1623 * x21 + x1770 + x2036 * x21
    x2120 = x1627 * x21 + x1777
    x2121 = x1630 * x21 + x1782
    x2122 = x1633 * x21 + x1787
    x2123 = x1636 * x21 + x1792
    x2124 = x1639 * x21 + x1797
    x2125 = x1642 * x21 + x1802
    x2126 = x1646 * x21 + x1807
    x2127 = x1650 * x21 + x1812
    x2128 = x1654 * x21 + x1817
    x2129 = x1658 * x21 + x1822
    x2130 = x1661 * x21 + x1825
    x2131 = x1664 * x21 + x1828
    x2132 = x1667 * x21 + x1831
    x2133 = x1670 * x21 + x1834
    x2134 = x1673 * x21 + x1837
    x2135 = -x12 * x1349 + x1352 * x442 + 3.0 * x943
    x2136 = x2135 * x6
    x2137 = x1348 * x442 - x1354 * x967 + 3.0 * x966
    x2138 = -x108 * x2137 + x2135 * x5
    x2139 = x2138 * x4
    x2140 = (
        x2054 * x22
        + x2055 * x22
        + x72 * (x1416 * x2136 + x73 * (x2136 * x276 + x73**2 * (2.0 * x2136 + x2139)))
    )
    x2141 = x118 * x2136
    x2142 = (
        x2057 * x22
        + x2058 * x22
        + x72 * (x1894 * x2136 + x73 * (x2136 * x506 + x73 * (x118 * x2139 + x2141)))
    )
    x2143 = x12 * x2135 + 4.0 * x1359
    x2144 = x113 * x2143
    x2145 = x12 * x2138 + 4.0 * x1357
    x2146 = (
        x2060 * x22
        + x2061 * x22
        + x72 * (x1421 * x2143 + x73 * (x2143 * x308 + x73 * (x2144 + x2145 * x73)))
    )
    x2147 = x149 * x2136
    x2148 = (
        x2063 * x22 + x2064 * x22 + x72 * (x2136 * x571 + x73 * (x149 * x2139 + x2147))
    )
    x2149 = x2143 * x544
    x2150 = (
        x2067 * x22 + x2068 * x22 + x72 * (x1902 * x2143 + x73 * (x2145 * x506 + x2149))
    )
    x2151 = x135 * x2143 + x1373 * x79
    x2152 = x113 * x2151
    x2153 = x135 * x2145 + x1372 * x79
    x2154 = x2070 * x22 + x2071 * x22 + x72 * (x2151 * x308 + x73 * (x2152 + x2153 * x73))
    x2155 = x183 * x2136
    x2156 = x2074 * x22 + x2075 * x22 + x72 * (x183 * x2139 + x2155)
    x2157 = x2143 * x918
    x2158 = x2078 * x22 + x2079 * x22 + x72 * (x2145 * x571 + x2157)
    x2159 = x2151 * x544
    x2160 = x2082 * x22 + x2083 * x22 + x72 * (x2153 * x506 + x2159)
    x2161 = x135 * x2151 + x1389 * x79
    x2162 = x113 * x2161
    x2163 = x135 * x2153 + x1388 * x79
    x2164 = x2087 * x22 + x2088 * x22 + x72 * (x2162 + x2163 * x73)
    x2165 = x207 * x2138 + x2090 * x22 + x2091 * x22
    x2166 = x2093 * x22 + x2094 * x22 + x212 * x2145
    x2167 = x188 * x2153 + x2096 * x22 + x2097 * x22
    x2168 = x160 * x2163 + x2099 * x22 + x2100 * x22
    x2169 = x2102 * x22 + x2103 * x22 + x72 * (x135 * x2163 + x1401 * x79)
    x2170 = x0 * x1456 + x644
    x2171 = x206 * x4**4
    x2172 = x0 * x625
    x2173 = x0 * x1458 + x668
    x2174 = x1415 * x206
    x2175 = x2174 * x664
    x2176 = x0 * x1460 + x682
    x2177 = x12 * x2174
    x2178 = x0 * x1462 + x693
    x2179 = x0 * x1420
    x2180 = x0 * x1464 + x705
    x2181 = x0 * x1466 + x715
    x2182 = x13 * x7
    x2183 = x206 * x2172
    x2184 = x0 * x1469 + x723
    x2185 = x0 * x307
    x2186 = x0 * x1472 + x732
    x2187 = x0 * x1475 + x741
    x2188 = x0 * x1478 + x748
    x2189 = x200 * x4
    x2190 = x0 * x1480 + x754
    x2191 = x118 * x1468 + x1434 * x92
    x2192 = x0 * x1482 + x759
    x2193 = x118 * x1471 + x1437 * x92
    x2194 = x0 * x1484 + x764
    x2195 = x118 * x1474 + x1440 * x92
    x2196 = x0 * x1486 + x769
    x2197 = x201 * (x662 + x663)
    x2198 = x0 * x1488 + x774
    x2199 = x1083 * x2171
    x2200 = x21 * x625
    x2201 = x2171 * x2200 + x2199
    x2202 = x1104 * x2174
    x2203 = x21 * x2175 + x2202
    x2204 = x1083 * x2177
    x2205 = x2177 * x2200 + x2204
    x2206 = x1116 * x1420
    x2207 = x1420 * x21
    x2208 = x2206 + x2207 * x691
    x2209 = x1122 * x1420
    x2210 = x2207 * x703 + x2209
    x2211 = x1083 * x206
    x2212 = x2182 * x2211
    x2213 = x206 * x2200
    x2214 = x2182 * x2213 + x2212
    x2215 = x1542 * x307
    x2216 = x21 * x307
    x2217 = x1468 * x2216 + x2215
    x2218 = x1546 * x307
    x2219 = x1471 * x2216 + x2218
    x2220 = x1550 * x307
    x2221 = x1474 * x2216 + x2220
    x2222 = x2189 * x2211
    x2223 = x2189 * x2213 + x2222
    x2224 = x72 * (x118 * x1542 + x1468 * x85)
    x2225 = x2191 * x279 + x2224
    x2226 = x72 * (x118 * x1546 + x1471 * x85)
    x2227 = x2193 * x279 + x2226
    x2228 = x72 * (x118 * x1550 + x1474 * x85)
    x2229 = x2195 * x279 + x2228
    x2230 = x201 * x72 * (x1102 + x1103)
    x2231 = x2197 * x279 + x2230
    x2232 = x1083 * x228
    x2233 = x2200 * x228 + x2232
    x2234 = x1158 * x2171
    x2235 = x22 * x625
    x2236 = x2171 * x2235 + x2234
    x2237 = x1174 * x2174
    x2238 = x2175 * x22 + x2237
    x2239 = x1183 * x2174
    x2240 = x2177 * x2235 + x2239
    x2241 = x1191 * x1420
    x2242 = x1420 * x22
    x2243 = x2241 + x2242 * x691
    x2244 = x1200 * x1420
    x2245 = x2242 * x703 + x2244
    x2246 = x1208 * x1420
    x2247 = x206 * x2235
    x2248 = x2182 * x2247 + x2246
    x2249 = x1594 * x307
    x2250 = x22 * x307
    x2251 = x1468 * x2250 + x2249
    x2252 = x1598 * x307
    x2253 = x1471 * x2250 + x2252
    x2254 = x1603 * x307
    x2255 = x1474 * x2250 + x2254
    x2256 = x1607 * x307
    x2257 = x2189 * x2247 + x2256
    x2258 = x72 * (x118 * x1594 + x1502 * x92)
    x2259 = x2191 * x488 + x2258
    x2260 = x72 * (x118 * x1598 + x1505 * x92)
    x2261 = x2193 * x488 + x2260
    x2262 = x72 * (x118 * x1603 + x1508 * x92)
    x2263 = x2195 * x488 + x2262
    x2264 = x1511 * x92
    x2265 = x72 * (x118 * x1607 + x2264)
    x2266 = x2197 * x488 + x2265
    x2267 = x72 * (x135 * x1607 + x1477)
    x2268 = x2235 * x228 + x2267
    x2269 = x1675 * x2171
    x2270 = x21 * x2199 + x2269
    x2271 = x21 * x2201 + x2270
    x2272 = x1683 * x2174
    x2273 = x21 * x2202 + x2272
    x2274 = x21 * x2203 + x2273
    x2275 = x1675 * x2177
    x2276 = x21 * x2204 + x2275
    x2277 = x21 * x2205 + x2276
    x2278 = x1420 * x1691
    x2279 = x21 * x2206 + x2278
    x2280 = x21 * x2208 + x2279
    x2281 = x1420 * x1695
    x2282 = x21 * x2209 + x2281
    x2283 = x21 * x2210 + x2282
    x2284 = x1675 * x206
    x2285 = x2182 * x2284
    x2286 = x21 * x2212 + x2285
    x2287 = x21 * x2214 + x2286
    x2288 = x1701 * x307
    x2289 = x21 * x2215 + x2288
    x2290 = x21 * x2217 + x2289
    x2291 = x1705 * x307
    x2292 = x21 * x2218 + x2291
    x2293 = x21 * x2219 + x2292
    x2294 = x1709 * x307
    x2295 = x21 * x2220 + x2294
    x2296 = x21 * x2221 + x2295
    x2297 = x2189 * x2284
    x2298 = x21 * x2222 + x2297
    x2299 = x21 * x2223 + x2298
    x2300 = x72 * (x118 * x1701 + x1542 * x79)
    x2301 = x21 * x2224 + x2300
    x2302 = x21 * x2225 + x2301
    x2303 = x72 * (x118 * x1705 + x1546 * x79)
    x2304 = x21 * x2226 + x2303
    x2305 = x21 * x2227 + x2304
    x2306 = x72 * (x118 * x1709 + x1550 * x79)
    x2307 = x21 * x2228 + x2306
    x2308 = x21 * x2229 + x2307
    x2309 = x201 * x72 * (x1681 + x1682)
    x2310 = x21 * x2230 + x2309
    x2311 = x21 * x2231 + x2310
    x2312 = x1675 * x228
    x2313 = x21 * x2232 + x2312
    x2314 = x21 * x2233 + x2313
    x2315 = x1720 * x2171
    x2316 = x2199 * x22 + x2315
    x2317 = x21 * x2236 + x2316
    x2318 = x1726 * x2174
    x2319 = x22 * x2202 + x2318
    x2320 = x21 * x2238 + x2319
    x2321 = x1730 * x2174
    x2322 = x22 * x2204 + x2321
    x2323 = x21 * x2240 + x2322
    x2324 = x1420 * x1734
    x2325 = x22 * x2206 + x2324
    x2326 = x21 * x2243 + x2325
    x2327 = x1420 * x1738
    x2328 = x22 * x2209 + x2327
    x2329 = x21 * x2245 + x2328
    x2330 = x1420 * x1742
    x2331 = x22 * x2212 + x2330
    x2332 = x21 * x2248 + x2331
    x2333 = x1746 * x307
    x2334 = x22 * x2215 + x2333
    x2335 = x21 * x2251 + x2334
    x2336 = x1750 * x307
    x2337 = x22 * x2218 + x2336
    x2338 = x21 * x2253 + x2337
    x2339 = x1754 * x307
    x2340 = x22 * x2220 + x2339
    x2341 = x21 * x2255 + x2340
    x2342 = x1758 * x307
    x2343 = x22 * x2222 + x2342
    x2344 = x21 * x2257 + x2343
    x2345 = x72 * (x118 * x1746 + x1594 * x85)
    x2346 = x22 * x2224 + x2345
    x2347 = x21 * x2259 + x2346
    x2348 = x72 * (x118 * x1750 + x1598 * x85)
    x2349 = x22 * x2226 + x2348
    x2350 = x21 * x2261 + x2349
    x2351 = x72 * (x118 * x1754 + x1603 * x85)
    x2352 = x22 * x2228 + x2351
    x2353 = x21 * x2263 + x2352
    x2354 = x72 * (x118 * x1758 + x1607 * x85)
    x2355 = x22 * x2230 + x2354
    x2356 = x21 * x2266 + x2355
    x2357 = x72 * (x135 * x1758 + x1554)
    x2358 = x22 * x2232 + x2357
    x2359 = x21 * x2268 + x2358
    x2360 = x1772 * x2171
    x2361 = x22 * x2234 + x2360
    x2362 = x22 * x2236 + x2361
    x2363 = x1779 * x2174
    x2364 = x22 * x2237 + x2363
    x2365 = x22 * x2238 + x2364
    x2366 = x1784 * x2174
    x2367 = x22 * x2239 + x2366
    x2368 = x22 * x2240 + x2367
    x2369 = x1420 * x1789
    x2370 = x22 * x2241 + x2369
    x2371 = x22 * x2243 + x2370
    x2372 = x1420 * x1794
    x2373 = x22 * x2244 + x2372
    x2374 = x22 * x2245 + x2373
    x2375 = x1420 * x1799
    x2376 = x22 * x2246 + x2375
    x2377 = x22 * x2248 + x2376
    x2378 = x1804 * x307
    x2379 = x22 * x2249 + x2378
    x2380 = x22 * x2251 + x2379
    x2381 = x1809 * x307
    x2382 = x22 * x2252 + x2381
    x2383 = x22 * x2253 + x2382
    x2384 = x1814 * x307
    x2385 = x22 * x2254 + x2384
    x2386 = x22 * x2255 + x2385
    x2387 = x1819 * x307
    x2388 = x22 * x2256 + x2387
    x2389 = x22 * x2257 + x2388
    x2390 = x72 * (x118 * x1804 + x1644 * x92)
    x2391 = x22 * x2258 + x2390
    x2392 = x22 * x2259 + x2391
    x2393 = x72 * (x118 * x1809 + x1648 * x92)
    x2394 = x22 * x2260 + x2393
    x2395 = x22 * x2261 + x2394
    x2396 = x72 * (x118 * x1814 + x1652 * x92)
    x2397 = x22 * x2262 + x2396
    x2398 = x22 * x2263 + x2397
    x2399 = x72 * (x118 * x1819 + x1656 * x92)
    x2400 = x22 * x2265 + x2399
    x2401 = x22 * x2266 + x2400
    x2402 = x72 * (x135 * x1819 + x1607 * x92)
    x2403 = x22 * x2267 + x2402
    x2404 = x22 * x2268 + x2403
    x2405 = 4.0 * x1082 + x1675 * x232 - x1677 * x648
    x2406 = x2405 * x9
    x2407 = 5.0 * x1676
    x2408 = x2406 + x2407
    x2409 = x118 * x2408 + 5.0 * x1684
    x2410 = x135 * (x2406 + x2407)
    x2411 = x206 * x2405
    x2412 = x118 * x2409 + 5.0 * x1692
    x2413 = x118 * x2410 + 5.0 * x1696
    x2414 = x172 * (x2406 + x2407)
    x2415 = 3.0 * x1157 + x1720 * x232 - x1722 * x648
    x2416 = x2171 * x2415
    x2417 = 4.0 * x1721 + x2415 * x9
    x2418 = x2174 * x2417
    x2419 = x12 * x2415 + x1676
    x2420 = x2174 * x2419
    x2421 = x118 * x2417 + x1726 * x79
    x2422 = x1420 * x2421
    x2423 = x118 * x2419 + x1730 * x79
    x2424 = x1420 * x2423
    x2425 = x135 * x2419 + x1689
    x2426 = x1420 * x2425
    x2427 = x118 * x2421 + x1734 * x79
    x2428 = x2427 * x307
    x2429 = x118 * x2423 + x1738 * x79
    x2430 = x2429 * x307
    x2431 = x118 * x2425 + x1742 * x79
    x2432 = x2431 * x307
    x2433 = x135 * x2425 + x1699
    x2434 = x2433 * x307
    x2435 = x72 * (x118 * x2427 + x1746 * x79)
    x2436 = x72 * (x118 * x2429 + x1750 * x79)
    x2437 = x72 * (x118 * x2431 + x1754 * x79)
    x2438 = x72 * (x118 * x2433 + x1758 * x79)
    x2439 = x72 * (x135 * x2433 + x1713)
    x2440 = 2.0 * x1254 + x1772 * x232 - x1774 * x648
    x2441 = x2171 * x2440
    x2442 = x22 * x2315 + x2441
    x2443 = 3.0 * x1773
    x2444 = x2440 * x9 + x2443
    x2445 = x2174 * x2444
    x2446 = x22 * x2318 + x2445
    x2447 = x12 * x2440 + 2.0 * x1721
    x2448 = x2174 * x2447
    x2449 = x22 * x2321 + x2448
    x2450 = x118 * x2444 + x1779 * x85
    x2451 = x1420 * x2450
    x2452 = x22 * x2324 + x2451
    x2453 = x1784 * x85
    x2454 = x118 * x2447 + x2453
    x2455 = x1420 * x2454
    x2456 = x22 * x2327 + x2455
    x2457 = x135 * x2447 + x1730 * x92
    x2458 = x1420 * x2457
    x2459 = x22 * x2330 + x2458
    x2460 = x118 * x2450 + x1789 * x85
    x2461 = x2460 * x307
    x2462 = x22 * x2333 + x2461
    x2463 = x118 * x2454 + x1794 * x85
    x2464 = x2463 * x307
    x2465 = x22 * x2336 + x2464
    x2466 = x1799 * x85
    x2467 = x118 * x2457 + x2466
    x2468 = x2467 * x307
    x2469 = x22 * x2339 + x2468
    x2470 = x135 * x2457 + x1742 * x92
    x2471 = x2470 * x307
    x2472 = x22 * x2342 + x2471
    x2473 = x72 * (x118 * x2460 + x1804 * x85)
    x2474 = x22 * x2345 + x2473
    x2475 = x72 * (x118 * x2463 + x1809 * x85)
    x2476 = x22 * x2348 + x2475
    x2477 = x72 * (x118 * x2467 + x1814 * x85)
    x2478 = x22 * x2351 + x2477
    x2479 = x1819 * x85
    x2480 = x72 * (x118 * x2470 + x2479)
    x2481 = x22 * x2354 + x2480
    x2482 = x72 * (x135 * x2470 + x1758 * x92)
    x2483 = x22 * x2357 + x2482
    x2484 = x1351 + x1839 * x232 - x1841 * x648
    x2485 = x2171 * x2484 + x22 * x2360
    x2486 = x22 * x2361 + x2485
    x2487 = 2.0 * x1840 + x2484 * x9
    x2488 = x2174 * x2487 + x22 * x2363
    x2489 = x22 * x2364 + x2488
    x2490 = x12 * x2484 + x2443
    x2491 = x2174 * x2490 + x22 * x2366
    x2492 = x22 * x2367 + x2491
    x2493 = x118 * x2487 + x1845 * x92
    x2494 = x1420 * x2493 + x22 * x2369
    x2495 = x22 * x2370 + x2494
    x2496 = x118 * x2490 + x1849 * x92
    x2497 = x1420 * x2496 + x22 * x2372
    x2498 = x22 * x2373 + x2497
    x2499 = x135 * x2490 + x2453
    x2500 = x1420 * x2499 + x22 * x2375
    x2501 = x22 * x2376 + x2500
    x2502 = x118 * x2493 + x1853 * x92
    x2503 = x22 * x2378 + x2502 * x307
    x2504 = x22 * x2379 + x2503
    x2505 = x118 * x2496 + x1857 * x92
    x2506 = x22 * x2381 + x2505 * x307
    x2507 = x22 * x2382 + x2506
    x2508 = x118 * x2499 + x1861 * x92
    x2509 = x22 * x2384 + x2508 * x307
    x2510 = x22 * x2385 + x2509
    x2511 = x135 * x2499 + x2466
    x2512 = x22 * x2387 + x2511 * x307
    x2513 = x22 * x2388 + x2512
    x2514 = x22 * x2390 + x72 * (x118 * x2502 + x1865 * x92)
    x2515 = x22 * x2391 + x2514
    x2516 = x22 * x2393 + x72 * (x118 * x2505 + x1869 * x92)
    x2517 = x22 * x2394 + x2516
    x2518 = x22 * x2396 + x72 * (x118 * x2508 + x1873 * x92)
    x2519 = x22 * x2397 + x2518
    x2520 = x22 * x2399 + x72 * (x118 * x2511 + x1877 * x92)
    x2521 = x22 * x2400 + x2520
    x2522 = x22 * x2402 + x72 * (x135 * x2511 + x2479)
    x2523 = x22 * x2403 + x2522
    x2524 = x0 * x1490 + x800
    x2525 = x2171 * x784
    x2526 = x0 * x1492 + x818
    x2527 = x0 * x2174
    x2528 = x0 * x1494 + x834
    x2529 = x0 * x1496 + x846
    x2530 = x0 * x1498 + x858
    x2531 = x0 * x1500 + x871
    x2532 = x0 * x1503 + x880
    x2533 = x0 * x1506 + x889
    x2534 = x0 * x1509 + x898
    x2535 = x0 * x1512 + x907
    x2536 = x0 * x1514 + x913
    x2537 = x118 * x1502 + x1907
    x2538 = x0 * x1516 + x919
    x2539 = x118 * x1505 + x1910
    x2540 = x0 * x1518 + x924
    x2541 = x118 * x1508 + x1913
    x2542 = x0 * x1520 + x929
    x2543 = x118 * x1511 + x1917
    x2544 = x0 * x1522 + x934
    x2545 = x135 * x1511 + x1443
    x2546 = x21 * x2525 + x2234
    x2547 = x21 * x2174
    x2548 = x2237 + x2547 * x814
    x2549 = x2239 + x2547 * x830
    x2550 = x2207 * x844 + x2241
    x2551 = x2207 * x856 + x2244
    x2552 = x2207 * x869 + x2246
    x2553 = x1502 * x2216 + x2249
    x2554 = x1505 * x2216 + x2252
    x2555 = x1508 * x2216 + x2254
    x2556 = x1511 * x2216 + x2256
    x2557 = x2258 + x2537 * x279
    x2558 = x2260 + x2539 * x279
    x2559 = x2262 + x2541 * x279
    x2560 = x2265 + x2543 * x279
    x2561 = x2267 + x2545 * x279
    x2562 = x1255 * x2171
    x2563 = x22 * x2525 + x2562
    x2564 = x1270 * x2174
    x2565 = x2174 * x22
    x2566 = x2564 + x2565 * x814
    x2567 = x1279 * x2174
    x2568 = x2565 * x830 + x2567
    x2569 = x1288 * x1420
    x2570 = x2242 * x844 + x2569
    x2571 = x1296 * x1420
    x2572 = x2242 * x856 + x2571
    x2573 = x1304 * x1420
    x2574 = x2242 * x869 + x2573
    x2575 = x1644 * x307
    x2576 = x1502 * x2250 + x2575
    x2577 = x1648 * x307
    x2578 = x1505 * x2250 + x2577
    x2579 = x1652 * x307
    x2580 = x1508 * x2250 + x2579
    x2581 = x1656 * x307
    x2582 = x1511 * x2250 + x2581
    x2583 = x72 * (x118 * x1644 + x1971)
    x2584 = x2537 * x488 + x2583
    x2585 = x72 * (x118 * x1648 + x1974)
    x2586 = x2539 * x488 + x2585
    x2587 = x72 * (x118 * x1652 + x1977)
    x2588 = x2541 * x488 + x2587
    x2589 = x72 * (x118 * x1656 + x1981)
    x2590 = x2543 * x488 + x2589
    x2591 = x72 * (x135 * x1656 + x2264)
    x2592 = x2545 * x488 + x2591
    x2593 = x21 * x2234 + x2315
    x2594 = x21 * x2546 + x2593
    x2595 = x21 * x2237 + x2318
    x2596 = x21 * x2548 + x2595
    x2597 = x21 * x2239 + x2321
    x2598 = x21 * x2549 + x2597
    x2599 = x21 * x2241 + x2324
    x2600 = x21 * x2550 + x2599
    x2601 = x21 * x2244 + x2327
    x2602 = x21 * x2551 + x2601
    x2603 = x21 * x2246 + x2330
    x2604 = x21 * x2552 + x2603
    x2605 = x21 * x2249 + x2333
    x2606 = x21 * x2553 + x2605
    x2607 = x21 * x2252 + x2336
    x2608 = x21 * x2554 + x2607
    x2609 = x21 * x2254 + x2339
    x2610 = x21 * x2555 + x2609
    x2611 = x21 * x2256 + x2342
    x2612 = x21 * x2556 + x2611
    x2613 = x21 * x2258 + x2345
    x2614 = x21 * x2557 + x2613
    x2615 = x21 * x2260 + x2348
    x2616 = x21 * x2558 + x2615
    x2617 = x21 * x2262 + x2351
    x2618 = x21 * x2559 + x2617
    x2619 = x21 * x2265 + x2354
    x2620 = x21 * x2560 + x2619
    x2621 = x21 * x2267 + x2357
    x2622 = x21 * x2561 + x2621
    x2623 = x21 * x2563 + x2361
    x2624 = x21 * x2566 + x2364
    x2625 = x21 * x2568 + x2367
    x2626 = x21 * x2570 + x2370
    x2627 = x21 * x2572 + x2373
    x2628 = x21 * x2574 + x2376
    x2629 = x21 * x2576 + x2379
    x2630 = x21 * x2578 + x2382
    x2631 = x21 * x2580 + x2385
    x2632 = x21 * x2582 + x2388
    x2633 = x21 * x2584 + x2391
    x2634 = x21 * x2586 + x2394
    x2635 = x21 * x2588 + x2397
    x2636 = x21 * x2590 + x2400
    x2637 = x21 * x2592 + x2403
    x2638 = x1839 * x2171
    x2639 = x22 * x2562 + x2638
    x2640 = x22 * x2563 + x2639
    x2641 = x1845 * x2174
    x2642 = x22 * x2564 + x2641
    x2643 = x22 * x2566 + x2642
    x2644 = x1849 * x2174
    x2645 = x22 * x2567 + x2644
    x2646 = x22 * x2568 + x2645
    x2647 = x1420 * x1853
    x2648 = x22 * x2569 + x2647
    x2649 = x22 * x2570 + x2648
    x2650 = x1420 * x1857
    x2651 = x22 * x2571 + x2650
    x2652 = x22 * x2572 + x2651
    x2653 = x1420 * x1861
    x2654 = x22 * x2573 + x2653
    x2655 = x22 * x2574 + x2654
    x2656 = x1865 * x307
    x2657 = x22 * x2575 + x2656
    x2658 = x22 * x2576 + x2657
    x2659 = x1869 * x307
    x2660 = x22 * x2577 + x2659
    x2661 = x22 * x2578 + x2660
    x2662 = x1873 * x307
    x2663 = x22 * x2579 + x2662
    x2664 = x22 * x2580 + x2663
    x2665 = x1877 * x307
    x2666 = x22 * x2581 + x2665
    x2667 = x22 * x2582 + x2666
    x2668 = x72 * (x118 * x1865 + x2073)
    x2669 = x22 * x2583 + x2668
    x2670 = x22 * x2584 + x2669
    x2671 = x72 * (x118 * x1869 + x2077)
    x2672 = x22 * x2585 + x2671
    x2673 = x22 * x2586 + x2672
    x2674 = x72 * (x118 * x1873 + x2081)
    x2675 = x22 * x2587 + x2674
    x2676 = x22 * x2588 + x2675
    x2677 = x72 * (x118 * x1877 + x2086)
    x2678 = x22 * x2589 + x2677
    x2679 = x22 * x2590 + x2678
    x2680 = x72 * (x135 * x1877 + x1656 * x85)
    x2681 = x22 * x2591 + x2680
    x2682 = x22 * x2592 + x2681
    x2683 = x2135 * x232 - x2137 * x648
    x2684 = x2171 * x2683 + x22 * x2638 + x22 * x2639
    x2685 = x2136 + x2683 * x9
    x2686 = x2174 * x2685 + x22 * x2641 + x22 * x2642
    x2687 = x12 * x2683 + 4.0 * x1840
    x2688 = x2174 * x2687 + x22 * x2644 + x22 * x2645
    x2689 = x118 * x2685 + x2141
    x2690 = x1420 * x2689 + x22 * x2647 + x22 * x2648
    x2691 = x118 * x2687 + x2144
    x2692 = x1420 * x2691 + x22 * x2650 + x22 * x2651
    x2693 = x135 * x2687 + x1849 * x79
    x2694 = x1420 * x2693 + x22 * x2653 + x22 * x2654
    x2695 = x118 * x2689 + x2147
    x2696 = x22 * x2656 + x22 * x2657 + x2695 * x307
    x2697 = x118 * x2691 + x2149
    x2698 = x22 * x2659 + x22 * x2660 + x2697 * x307
    x2699 = x118 * x2693 + x2152
    x2700 = x22 * x2662 + x22 * x2663 + x2699 * x307
    x2701 = x135 * x2693 + x1861 * x79
    x2702 = x22 * x2665 + x22 * x2666 + x2701 * x307
    x2703 = x22 * x2668 + x22 * x2669 + x72 * (x118 * x2695 + x2155)
    x2704 = x22 * x2671 + x22 * x2672 + x72 * (x118 * x2697 + x2157)
    x2705 = x22 * x2674 + x22 * x2675 + x72 * (x118 * x2699 + x2159)
    x2706 = x22 * x2677 + x22 * x2678 + x72 * (x118 * x2701 + x2162)
    x2707 = x22 * x2680 + x22 * x2681 + x72 * (x135 * x2701 + x1877 * x79)
    x2708 = x0 * x1959 + x963
    x2709 = x0 * x944
    x2710 = x0 * x1961 + x980
    x2711 = x9 * x944
    x2712 = x0 * x1963 + x993
    x2713 = x0 * x1965 + x1003
    x2714 = x206 * x7
    x2715 = x10 * x2714
    x2716 = x0 * x1967 + x1011
    x2717 = x2714 * x9
    x2718 = x0 * x988
    x2719 = x0 * x1969 + x1022
    x2720 = x0 * x1972 + x1029
    x2721 = x212 * x4
    x2722 = x0 * x1975 + x1035
    x2723 = x10 * x206
    x2724 = x2723 * x4
    x2725 = x0 * x1978 + x1040
    x2726 = x1019 * x1901
    x2727 = x0 * x1982 + x1047
    x2728 = x0 * x1984 + x1054
    x2729 = x0 * x1986 + x1059
    x2730 = x212 * x988
    x2731 = x0 * x1988 + x1064
    x2732 = x1019 * x188
    x2733 = x0 * x1990 + x1069
    x2734 = x160 * x1980
    x2735 = x0 * x1992 + x1074
    x2736 = x135 * x1980 + x1916 * x92
    x2737 = x1626 + x1959 * x21
    x2738 = x21 * x944
    x2739 = x2171 * x2738 + x2562
    x2740 = x1629 + x1961 * x21
    x2741 = x2547 * x2711 + x2564
    x2742 = x1632 + x1963 * x21
    x2743 = x2547 * x988 + x2567
    x2744 = x1635 + x1965 * x21
    x2745 = x2569 + x2715 * x2738
    x2746 = x1638 + x1967 * x21
    x2747 = x21 * x988
    x2748 = x2571 + x2717 * x2747
    x2749 = x1641 + x1969 * x21
    x2750 = x1019 * x2207 + x2573
    x2751 = x1645 + x1972 * x21
    x2752 = x2575 + x2721 * x2738
    x2753 = x1649 + x1975 * x21
    x2754 = x2577 + x2724 * x2747
    x2755 = x1653 + x1978 * x21
    x2756 = x21 * x2726 + x2579
    x2757 = x1657 + x1982 * x21
    x2758 = x1980 * x2216 + x2581
    x2759 = x1660 + x1984 * x21
    x2760 = x207 * x2738 + x2583
    x2761 = x1663 + x1986 * x21
    x2762 = x21 * x2730 + x2585
    x2763 = x1666 + x1988 * x21
    x2764 = x21 * x2732 + x2587
    x2765 = x1669 + x1990 * x21
    x2766 = x21 * x2734 + x2589
    x2767 = x1672 + x1992 * x21
    x2768 = x2591 + x2736 * x279
    x2769 = x1352 * x2171
    x2770 = x22 * x944
    x2771 = x2171 * x2770 + x2769
    x2772 = x2174 * x9
    x2773 = x1352 * x2772 + x2565 * x2711
    x2774 = x1373 * x2174
    x2775 = x2565 * x988 + x2774
    x2776 = x1352 * x2715
    x2777 = x2715 * x2770 + x2776
    x2778 = x1373 * x2717
    x2779 = x22 * x988
    x2780 = x2717 * x2779 + x2778
    x2781 = x1389 * x1420
    x2782 = x1019 * x2242 + x2781
    x2783 = x1352 * x2721
    x2784 = x2721 * x2770 + x2783
    x2785 = x2066 * x2723
    x2786 = x2724 * x2779 + x2785
    x2787 = x1389 * x1901
    x2788 = x22 * x2726 + x2787
    x2789 = x2085 * x307
    x2790 = x1980 * x2250 + x2789
    x2791 = x1352 * x207
    x2792 = x207 * x2770 + x2791
    x2793 = x1373 * x212
    x2794 = x22 * x2730 + x2793
    x2795 = x1389 * x188
    x2796 = x22 * x2732 + x2795
    x2797 = x160 * x2085
    x2798 = x22 * x2734 + x2797
    x2799 = x72 * (x135 * x2085 + x1980 * x85)
    x2800 = x2736 * x488 + x2799
    x2801 = x21 * x2562 + x2360
    x2802 = x21 * x2739 + x2801
    x2803 = x21 * x2564 + x2363
    x2804 = x21 * x2741 + x2803
    x2805 = x21 * x2567 + x2366
    x2806 = x21 * x2743 + x2805
    x2807 = x21 * x2569 + x2369
    x2808 = x21 * x2745 + x2807
    x2809 = x21 * x2571 + x2372
    x2810 = x21 * x2748 + x2809
    x2811 = x21 * x2573 + x2375
    x2812 = x21 * x2750 + x2811
    x2813 = x21 * x2575 + x2378
    x2814 = x21 * x2752 + x2813
    x2815 = x21 * x2577 + x2381
    x2816 = x21 * x2754 + x2815
    x2817 = x21 * x2579 + x2384
    x2818 = x21 * x2756 + x2817
    x2819 = x21 * x2581 + x2387
    x2820 = x21 * x2758 + x2819
    x2821 = x21 * x2583 + x2390
    x2822 = x21 * x2760 + x2821
    x2823 = x21 * x2585 + x2393
    x2824 = x21 * x2762 + x2823
    x2825 = x21 * x2587 + x2396
    x2826 = x21 * x2764 + x2825
    x2827 = x21 * x2589 + x2399
    x2828 = x21 * x2766 + x2827
    x2829 = x21 * x2591 + x2402
    x2830 = x21 * x2768 + x2829
    x2831 = x21 * x2771 + x2639
    x2832 = x21 * x2773 + x2642
    x2833 = x21 * x2775 + x2645
    x2834 = x21 * x2777 + x2648
    x2835 = x21 * x2780 + x2651
    x2836 = x21 * x2782 + x2654
    x2837 = x21 * x2784 + x2657
    x2838 = x21 * x2786 + x2660
    x2839 = x21 * x2788 + x2663
    x2840 = x21 * x2790 + x2666
    x2841 = x21 * x2792 + x2669
    x2842 = x21 * x2794 + x2672
    x2843 = x21 * x2796 + x2675
    x2844 = x21 * x2798 + x2678
    x2845 = x21 * x2800 + x2681
    x2846 = x2135 * x2171
    x2847 = x22 * x2769 + x2846
    x2848 = x22 * x2771 + x2847
    x2849 = x2565 * x9
    x2850 = x1352 * x2849 + x2135 * x2772
    x2851 = x22 * x2773 + x2850
    x2852 = x2143 * x2174
    x2853 = x22 * x2774 + x2852
    x2854 = x22 * x2775 + x2853
    x2855 = x2135 * x2715
    x2856 = x22 * x2776 + x2855
    x2857 = x22 * x2777 + x2856
    x2858 = x2143 * x2717
    x2859 = x22 * x2778 + x2858
    x2860 = x22 * x2780 + x2859
    x2861 = x1420 * x2151
    x2862 = x22 * x2781 + x2861
    x2863 = x22 * x2782 + x2862
    x2864 = x2135 * x2721
    x2865 = x22 * x2783 + x2864
    x2866 = x22 * x2784 + x2865
    x2867 = x2143 * x2724
    x2868 = x22 * x2785 + x2867
    x2869 = x22 * x2786 + x2868
    x2870 = x1901 * x2151
    x2871 = x22 * x2787 + x2870
    x2872 = x22 * x2788 + x2871
    x2873 = x2161 * x307
    x2874 = x22 * x2789 + x2873
    x2875 = x22 * x2790 + x2874
    x2876 = x207 * x2135
    x2877 = x22 * x2791 + x2876
    x2878 = x22 * x2792 + x2877
    x2879 = x212 * x2143
    x2880 = x22 * x2793 + x2879
    x2881 = x22 * x2794 + x2880
    x2882 = x188 * x2151
    x2883 = x22 * x2795 + x2882
    x2884 = x22 * x2796 + x2883
    x2885 = x160 * x2161
    x2886 = x22 * x2797 + x2885
    x2887 = x22 * x2798 + x2886
    x2888 = x72 * (x135 * x2161 + x2085 * x79)
    x2889 = x22 * x2799 + x2888
    x2890 = x22 * x2800 + x2889
    x2891 = 4.0 * x1351 + x2135 * x442 - x2137 * x967
    x2892 = x12 * x2891 + 5.0 * x2136
    x2893 = x135 * x2892 + 5.0 * x2144
    x2894 = x135 * x2893 + 5.0 * x2152

    # 900 item(s)
    result[0, 0, 0] = numpy.sum(
        x117
        * (
            x0 * x101
            + x0 * x95
            + x0 * (x0 * (x100 + x103 * x104) + x101)
            + x72
            * (x114 * x87 + x73 * (x114 * x80 + x73 * (x114 * x71 + x73 * (x110 + x112))))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x134
        * (
            x0 * x124
            + x0 * x129
            + x0 * (x0 * (x104 * x131 + x128) + x129)
            + x72 * (x114 * x121 + x73 * (x114 * x119 + x118 * x73 * (x110 + x112)))
        )
    )
    result[0, 0, 2] = numpy.sum(
        x134
        * (
            x0 * x141
            + x0 * x146
            + x0 * (x0 * (x104 * x147 + x145) + x146)
            + x72 * (x114 * x138 + x73 * (x114 * x136 + x135 * x73 * (x110 + x112)))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x159
        * (
            x0 * x152
            + x0 * x155
            + x0 * (x0 * (x104 * x157 + x154) + x155)
            + x72 * (x114 * x150 + x149 * x73 * (x110 + x112))
        )
    )
    result[0, 0, 4] = numpy.sum(
        x171
        * (
            x0 * x164
            + x0 * x167
            + x0 * (x0 * (x104 * x169 + x166) + x167)
            + x72 * (x114 * x162 + x161 * x73 * (x110 + x112))
        )
    )
    result[0, 0, 5] = numpy.sum(
        x159
        * (
            x0 * x175
            + x0 * x178
            + x0 * (x0 * (x104 * x180 + x177) + x178)
            + x72 * (x114 * x173 + x172 * x73 * (x110 + x112))
        )
    )
    result[0, 0, 6] = numpy.sum(
        x134
        * (
            x0 * x184
            + x0 * x186
            + x0 * (x0 * (x104 * x187 + x185) + x186)
            + x183 * x72 * (x110 + x112)
        )
    )
    result[0, 0, 7] = numpy.sum(
        x171
        * (
            x0 * x190
            + x0 * x192
            + x0 * (x0 * (x104 * x193 + x191) + x192)
            + x189 * x72 * (x110 + x112)
        )
    )
    result[0, 0, 8] = numpy.sum(
        x171
        * (
            x0 * x196
            + x0 * x198
            + x0 * (x0 * (x104 * x199 + x197) + x198)
            + x195 * x72 * (x110 + x112)
        )
    )
    result[0, 0, 9] = numpy.sum(
        x134
        * (
            x0 * x202
            + x0 * x204
            + x0 * (x0 * (x104 * x205 + x203) + x204)
            + x201 * x72 * (x110 + x112)
        )
    )
    result[0, 0, 10] = numpy.sum(
        x117
        * (x0 * x208 + x0 * x210 + x0 * (x0 * (x207 * x211 + x209) + x210) + x109 * x207)
    )
    result[0, 0, 11] = numpy.sum(
        x134
        * (x0 * x214 + x0 * x216 + x0 * (x0 * (x211 * x213 + x215) + x216) + x109 * x213)
    )
    result[0, 0, 12] = numpy.sum(
        x159
        * (x0 * x219 + x0 * x222 + x0 * (x0 * (x211 * x220 + x221) + x222) + x109 * x220)
    )
    result[0, 0, 13] = numpy.sum(
        x134
        * (x0 * x224 + x0 * x227 + x0 * (x0 * (x211 * x225 + x226) + x227) + x109 * x225)
    )
    result[0, 0, 14] = numpy.sum(
        x117
        * (x0 * x229 + x0 * x231 + x0 * (x0 * (x211 * x228 + x230) + x231) + x109 * x228)
    )
    result[0, 1, 0] = numpy.sum(
        x289 * (x0 * x275 + x0 * (x0 * x280 + x275) + x21 * x95 + x287)
    )
    result[0, 1, 1] = numpy.sum(
        x171 * (x0 * x306 + x0 * (x0 * x311 + x306) + x124 * x21 + x314)
    )
    result[0, 1, 2] = numpy.sum(
        x171 * (x0 * x323 + x0 * (x0 * x327 + x323) + x141 * x21 + x328)
    )
    result[0, 1, 3] = numpy.sum(
        x343 * (x0 * x336 + x0 * (x0 * x340 + x336) + x152 * x21 + x342)
    )
    result[0, 1, 4] = numpy.sum(
        x362 * (x0 * x354 + x0 * (x0 * x358 + x354) + x164 * x21 + x361)
    )
    result[0, 1, 5] = numpy.sum(
        x343 * (x0 * x367 + x0 * (x0 * x371 + x367) + x175 * x21 + x372)
    )
    result[0, 1, 6] = numpy.sum(
        x171 * (x0 * x376 + x0 * (x0 * x380 + x376) + x184 * x21 + x382)
    )
    result[0, 1, 7] = numpy.sum(
        x362 * (x0 * x386 + x0 * (x0 * x390 + x386) + x190 * x21 + x392)
    )
    result[0, 1, 8] = numpy.sum(
        x362 * (x0 * x398 + x0 * (x0 * x403 + x398) + x196 * x21 + x406)
    )
    result[0, 1, 9] = numpy.sum(
        x171 * (x0 * x408 + x0 * (x0 * x411 + x408) + x202 * x21 + x412)
    )
    result[0, 1, 10] = numpy.sum(
        x289 * (x0 * x414 + x0 * (x0 * x417 + x414) + x208 * x21 + x418)
    )
    result[0, 1, 11] = numpy.sum(
        x171 * (x0 * x420 + x0 * (x0 * x422 + x420) + x21 * x214 + x423)
    )
    result[0, 1, 12] = numpy.sum(
        x343 * (x0 * x425 + x0 * (x0 * x427 + x425) + x21 * x219 + x428)
    )
    result[0, 1, 13] = numpy.sum(
        x171 * (x0 * x431 + x0 * (x0 * x434 + x431) + x21 * x224 + x436)
    )
    result[0, 1, 14] = numpy.sum(
        x289 * (x0 * x438 + x0 * (x0 * x440 + x438) + x21 * x229 + x441)
    )
    result[0, 2, 0] = numpy.sum(
        x289 * (x0 * x485 + x0 * (x0 * x489 + x485) + x22 * x95 + x497)
    )
    result[0, 2, 1] = numpy.sum(
        x171 * (x0 * x505 + x0 * (x0 * x509 + x505) + x124 * x22 + x510)
    )
    result[0, 2, 2] = numpy.sum(
        x171 * (x0 * x523 + x0 * (x0 * x526 + x523) + x141 * x22 + x528)
    )
    result[0, 2, 3] = numpy.sum(
        x343 * (x0 * x532 + x0 * (x0 * x536 + x532) + x152 * x22 + x537)
    )
    result[0, 2, 4] = numpy.sum(
        x362 * (x0 * x543 + x0 * (x0 * x548 + x543) + x164 * x22 + x550)
    )
    result[0, 2, 5] = numpy.sum(
        x343 * (x0 * x558 + x0 * (x0 * x563 + x558) + x175 * x22 + x565)
    )
    result[0, 2, 6] = numpy.sum(
        x171 * (x0 * x567 + x0 * (x0 * x569 + x567) + x184 * x22 + x570)
    )
    result[0, 2, 7] = numpy.sum(
        x362 * (x0 * x573 + x0 * (x0 * x575 + x573) + x190 * x22 + x576)
    )
    result[0, 2, 8] = numpy.sum(
        x362 * (x0 * x579 + x0 * (x0 * x582 + x579) + x196 * x22 + x583)
    )
    result[0, 2, 9] = numpy.sum(
        x171 * (x0 * x587 + x0 * (x0 * x591 + x587) + x202 * x22 + x593)
    )
    result[0, 2, 10] = numpy.sum(
        x289 * (x0 * x595 + x0 * (x0 * x598 + x595) + x208 * x22 + x599)
    )
    result[0, 2, 11] = numpy.sum(
        x171 * (x0 * x601 + x0 * (x0 * x603 + x601) + x214 * x22 + x604)
    )
    result[0, 2, 12] = numpy.sum(
        x343 * (x0 * x606 + x0 * (x0 * x608 + x606) + x219 * x22 + x609)
    )
    result[0, 2, 13] = numpy.sum(
        x171 * (x0 * x611 + x0 * (x0 * x613 + x611) + x22 * x224 + x614)
    )
    result[0, 2, 14] = numpy.sum(
        x289 * (x0 * x616 + x0 * (x0 * x618 + x616) + x22 * x229 + x619)
    )
    result[0, 3, 0] = numpy.sum(x289 * (x0 * x646 + x21 * x275 + x655))
    result[0, 3, 1] = numpy.sum(x171 * (x0 * x670 + x21 * x306 + x676))
    result[0, 3, 2] = numpy.sum(x171 * (x0 * x684 + x21 * x323 + x687))
    result[0, 3, 3] = numpy.sum(x343 * (x0 * x695 + x21 * x336 + x699))
    result[0, 3, 4] = numpy.sum(x362 * (x0 * x707 + x21 * x354 + x711))
    result[0, 3, 5] = numpy.sum(x343 * (x0 * x717 + x21 * x367 + x720))
    result[0, 3, 6] = numpy.sum(x171 * (x0 * x725 + x21 * x376 + x729))
    result[0, 3, 7] = numpy.sum(x362 * (x0 * x734 + x21 * x386 + x738))
    result[0, 3, 8] = numpy.sum(x362 * (x0 * x743 + x21 * x398 + x747))
    result[0, 3, 9] = numpy.sum(x171 * (x0 * x750 + x21 * x408 + x753))
    result[0, 3, 10] = numpy.sum(x289 * (x0 * x756 + x21 * x414 + x758))
    result[0, 3, 11] = numpy.sum(x171 * (x0 * x761 + x21 * x420 + x763))
    result[0, 3, 12] = numpy.sum(x343 * (x0 * x766 + x21 * x425 + x768))
    result[0, 3, 13] = numpy.sum(x171 * (x0 * x771 + x21 * x431 + x773))
    result[0, 3, 14] = numpy.sum(x289 * (x0 * x776 + x21 * x438 + x778))
    result[0, 4, 0] = numpy.sum(x809 * (x0 * x802 + x21 * x485 + x807))
    result[0, 4, 1] = numpy.sum(x825 * (x0 * x820 + x21 * x505 + x823))
    result[0, 4, 2] = numpy.sum(x825 * (x0 * x836 + x21 * x523 + x839))
    result[0, 4, 3] = numpy.sum(x362 * (x0 * x848 + x21 * x532 + x851))
    result[0, 4, 4] = numpy.sum(x864 * (x0 * x860 + x21 * x543 + x863))
    result[0, 4, 5] = numpy.sum(x362 * (x0 * x873 + x21 * x558 + x876))
    result[0, 4, 6] = numpy.sum(x825 * (x0 * x882 + x21 * x567 + x885))
    result[0, 4, 7] = numpy.sum(x864 * (x0 * x891 + x21 * x573 + x894))
    result[0, 4, 8] = numpy.sum(x864 * (x0 * x900 + x21 * x579 + x903))
    result[0, 4, 9] = numpy.sum(x825 * (x0 * x909 + x21 * x587 + x912))
    result[0, 4, 10] = numpy.sum(x809 * (x0 * x915 + x21 * x595 + x917))
    result[0, 4, 11] = numpy.sum(x825 * (x0 * x921 + x21 * x601 + x923))
    result[0, 4, 12] = numpy.sum(x362 * (x0 * x926 + x21 * x606 + x928))
    result[0, 4, 13] = numpy.sum(x825 * (x0 * x931 + x21 * x611 + x933))
    result[0, 4, 14] = numpy.sum(x809 * (x0 * x936 + x21 * x616 + x938))
    result[0, 5, 0] = numpy.sum(x289 * (x0 * x965 + x22 * x485 + x974))
    result[0, 5, 1] = numpy.sum(x171 * (x0 * x982 + x22 * x505 + x984))
    result[0, 5, 2] = numpy.sum(x171 * (x0 * x995 + x22 * x523 + x999))
    result[0, 5, 3] = numpy.sum(x343 * (x0 * x1005 + x1007 + x22 * x532))
    result[0, 5, 4] = numpy.sum(x362 * (x0 * x1013 + x1015 + x22 * x543))
    result[0, 5, 5] = numpy.sum(x343 * (x0 * x1024 + x1028 + x22 * x558))
    result[0, 5, 6] = numpy.sum(x171 * (x0 * x1031 + x1033 + x22 * x567))
    result[0, 5, 7] = numpy.sum(x362 * (x0 * x1037 + x1039 + x22 * x573))
    result[0, 5, 8] = numpy.sum(x362 * (x0 * x1042 + x1044 + x22 * x579))
    result[0, 5, 9] = numpy.sum(x171 * (x0 * x1049 + x1053 + x22 * x587))
    result[0, 5, 10] = numpy.sum(x289 * (x0 * x1056 + x1058 + x22 * x595))
    result[0, 5, 11] = numpy.sum(x171 * (x0 * x1061 + x1063 + x22 * x601))
    result[0, 5, 12] = numpy.sum(x343 * (x0 * x1066 + x1068 + x22 * x606))
    result[0, 5, 13] = numpy.sum(x171 * (x0 * x1071 + x1073 + x22 * x611))
    result[0, 5, 14] = numpy.sum(x289 * (x0 * x1076 + x1078 + x22 * x616))
    result[0, 6, 0] = numpy.sum(x117 * (x1096 + x21 * x646))
    result[0, 6, 1] = numpy.sum(x134 * (x1108 + x21 * x670))
    result[0, 6, 2] = numpy.sum(x134 * (x1113 + x21 * x684))
    result[0, 6, 3] = numpy.sum(x159 * (x1119 + x21 * x695))
    result[0, 6, 4] = numpy.sum(x171 * (x1125 + x21 * x707))
    result[0, 6, 5] = numpy.sum(x159 * (x1129 + x21 * x717))
    result[0, 6, 6] = numpy.sum(x134 * (x1133 + x21 * x725))
    result[0, 6, 7] = numpy.sum(x171 * (x1137 + x21 * x734))
    result[0, 6, 8] = numpy.sum(x171 * (x1141 + x21 * x743))
    result[0, 6, 9] = numpy.sum(x134 * (x1143 + x21 * x750))
    result[0, 6, 10] = numpy.sum(x117 * (x1145 + x21 * x756))
    result[0, 6, 11] = numpy.sum(x134 * (x1147 + x21 * x761))
    result[0, 6, 12] = numpy.sum(x159 * (x1149 + x21 * x766))
    result[0, 6, 13] = numpy.sum(x134 * (x1151 + x21 * x771))
    result[0, 6, 14] = numpy.sum(x117 * (x1153 + x21 * x776))
    result[0, 7, 0] = numpy.sum(x289 * (x1169 + x21 * x802))
    result[0, 7, 1] = numpy.sum(x171 * (x1179 + x21 * x820))
    result[0, 7, 2] = numpy.sum(x171 * (x1188 + x21 * x836))
    result[0, 7, 3] = numpy.sum(x343 * (x1195 + x21 * x848))
    result[0, 7, 4] = numpy.sum(x362 * (x1204 + x21 * x860))
    result[0, 7, 5] = numpy.sum(x343 * (x1212 + x21 * x873))
    result[0, 7, 6] = numpy.sum(x171 * (x1217 + x21 * x882))
    result[0, 7, 7] = numpy.sum(x362 * (x1222 + x21 * x891))
    result[0, 7, 8] = numpy.sum(x362 * (x1228 + x21 * x900))
    result[0, 7, 9] = numpy.sum(x171 * (x1234 + x21 * x909))
    result[0, 7, 10] = numpy.sum(x289 * (x1237 + x21 * x915))
    result[0, 7, 11] = numpy.sum(x171 * (x1240 + x21 * x921))
    result[0, 7, 12] = numpy.sum(x343 * (x1243 + x21 * x926))
    result[0, 7, 13] = numpy.sum(x171 * (x1247 + x21 * x931))
    result[0, 7, 14] = numpy.sum(x289 * (x1250 + x21 * x936))
    result[0, 8, 0] = numpy.sum(x289 * (x1266 + x21 * x965))
    result[0, 8, 1] = numpy.sum(x171 * (x1275 + x21 * x982))
    result[0, 8, 2] = numpy.sum(x171 * (x1284 + x21 * x995))
    result[0, 8, 3] = numpy.sum(x343 * (x1005 * x21 + x1292))
    result[0, 8, 4] = numpy.sum(x362 * (x1013 * x21 + x1300))
    result[0, 8, 5] = numpy.sum(x343 * (x1024 * x21 + x1308))
    result[0, 8, 6] = numpy.sum(x171 * (x1031 * x21 + x1314))
    result[0, 8, 7] = numpy.sum(x362 * (x1037 * x21 + x1320))
    result[0, 8, 8] = numpy.sum(x362 * (x1042 * x21 + x1326))
    result[0, 8, 9] = numpy.sum(x171 * (x1049 * x21 + x1332))
    result[0, 8, 10] = numpy.sum(x289 * (x1056 * x21 + x1335))
    result[0, 8, 11] = numpy.sum(x171 * (x1061 * x21 + x1338))
    result[0, 8, 12] = numpy.sum(x343 * (x1066 * x21 + x1341))
    result[0, 8, 13] = numpy.sum(x171 * (x1071 * x21 + x1344))
    result[0, 8, 14] = numpy.sum(x289 * (x1076 * x21 + x1347))
    result[0, 9, 0] = numpy.sum(x117 * (x1365 + x22 * x965))
    result[0, 9, 1] = numpy.sum(x134 * (x1370 + x22 * x982))
    result[0, 9, 2] = numpy.sum(x134 * (x1378 + x22 * x995))
    result[0, 9, 3] = numpy.sum(x159 * (x1005 * x22 + x1382))
    result[0, 9, 4] = numpy.sum(x171 * (x1013 * x22 + x1386))
    result[0, 9, 5] = numpy.sum(x159 * (x1024 * x22 + x1393))
    result[0, 9, 6] = numpy.sum(x134 * (x1031 * x22 + x1395))
    result[0, 9, 7] = numpy.sum(x171 * (x1037 * x22 + x1397))
    result[0, 9, 8] = numpy.sum(x171 * (x1042 * x22 + x1399))
    result[0, 9, 9] = numpy.sum(x134 * (x1049 * x22 + x1403))
    result[0, 9, 10] = numpy.sum(x117 * (x1056 * x22 + x1405))
    result[0, 9, 11] = numpy.sum(x134 * (x1061 * x22 + x1407))
    result[0, 9, 12] = numpy.sum(x159 * (x1066 * x22 + x1409))
    result[0, 9, 13] = numpy.sum(x134 * (x1071 * x22 + x1411))
    result[0, 9, 14] = numpy.sum(x117 * (x1076 * x22 + x1413))
    result[1, 0, 0] = numpy.sum(
        x1418
        * (x0 * x1414 + x0 * x274 + x0 * (x0 * (x104 * x1417 + x278) + x1414) + x287)
    )
    result[1, 0, 1] = numpy.sum(
        x824 * (x0 * x1419 + x0 * x305 + x0 * (x0 * (x104 * x1422 + x310) + x1419) + x314)
    )
    result[1, 0, 2] = numpy.sum(
        x824 * (x0 * x1423 + x0 * x322 + x0 * (x0 * (x104 * x1425 + x326) + x1423) + x328)
    )
    result[1, 0, 3] = numpy.sum(
        x171 * (x0 * x1426 + x0 * x335 + x0 * (x0 * (x104 * x1427 + x339) + x1426) + x342)
    )
    result[1, 0, 4] = numpy.sum(
        x825 * (x0 * x1428 + x0 * x353 + x0 * (x0 * (x104 * x1429 + x357) + x1428) + x361)
    )
    result[1, 0, 5] = numpy.sum(
        x171 * (x0 * x1430 + x0 * x366 + x0 * (x0 * (x104 * x1432 + x370) + x1430) + x372)
    )
    result[1, 0, 6] = numpy.sum(
        x824 * (x0 * x1433 + x0 * x375 + x0 * (x0 * (x104 * x1435 + x379) + x1433) + x382)
    )
    result[1, 0, 7] = numpy.sum(
        x825 * (x0 * x1436 + x0 * x385 + x0 * (x0 * (x104 * x1438 + x389) + x1436) + x392)
    )
    result[1, 0, 8] = numpy.sum(
        x825 * (x0 * x1439 + x0 * x397 + x0 * (x0 * (x104 * x1441 + x402) + x1439) + x406)
    )
    result[1, 0, 9] = numpy.sum(
        x824 * (x0 * x1442 + x0 * x407 + x0 * (x0 * (x104 * x1444 + x410) + x1442) + x412)
    )
    result[1, 0, 10] = numpy.sum(
        x1418
        * (x0 * x1445 + x0 * x413 + x0 * (x0 * (x104 * x1446 + x415) + x1445) + x418)
    )
    result[1, 0, 11] = numpy.sum(
        x824 * (x0 * x1447 + x0 * x419 + x0 * (x0 * (x104 * x1448 + x421) + x1447) + x423)
    )
    result[1, 0, 12] = numpy.sum(
        x171 * (x0 * x1449 + x0 * x424 + x0 * (x0 * (x104 * x1450 + x426) + x1449) + x428)
    )
    result[1, 0, 13] = numpy.sum(
        x824 * (x0 * x1451 + x0 * x430 + x0 * (x0 * (x104 * x1453 + x433) + x1451) + x436)
    )
    result[1, 0, 14] = numpy.sum(
        x1418 * (x0 * x1454 + x0 * x437 + x0 * (x0 * (x0 * x1455 + x439) + x1454) + x441)
    )
    result[1, 1, 0] = numpy.sum(x809 * (x0 * x645 + x0 * (x0 * x1457 + x645) + x655))
    result[1, 1, 1] = numpy.sum(x825 * (x0 * x669 + x0 * (x0 * x1459 + x669) + x676))
    result[1, 1, 2] = numpy.sum(x825 * (x0 * x683 + x0 * (x0 * x1461 + x683) + x687))
    result[1, 1, 3] = numpy.sum(x362 * (x0 * x694 + x0 * (x0 * x1463 + x694) + x699))
    result[1, 1, 4] = numpy.sum(x864 * (x0 * x706 + x0 * (x0 * x1465 + x706) + x711))
    result[1, 1, 5] = numpy.sum(x362 * (x0 * x716 + x0 * (x0 * x1467 + x716) + x720))
    result[1, 1, 6] = numpy.sum(x825 * (x0 * x724 + x0 * (x0 * x1470 + x724) + x729))
    result[1, 1, 7] = numpy.sum(x864 * (x0 * x733 + x0 * (x0 * x1473 + x733) + x738))
    result[1, 1, 8] = numpy.sum(x864 * (x0 * x742 + x0 * (x0 * x1476 + x742) + x747))
    result[1, 1, 9] = numpy.sum(x825 * (x0 * x749 + x0 * (x0 * x1479 + x749) + x753))
    result[1, 1, 10] = numpy.sum(x809 * (x0 * x755 + x0 * (x0 * x1481 + x755) + x758))
    result[1, 1, 11] = numpy.sum(x825 * (x0 * x760 + x0 * (x0 * x1483 + x760) + x763))
    result[1, 1, 12] = numpy.sum(x362 * (x0 * x765 + x0 * (x0 * x1485 + x765) + x768))
    result[1, 1, 13] = numpy.sum(x825 * (x0 * x770 + x0 * (x0 * x1487 + x770) + x773))
    result[1, 1, 14] = numpy.sum(x809 * (x0 * x775 + x0 * (x0 * x1489 + x775) + x778))
    result[1, 2, 0] = numpy.sum(x809 * (x0 * x801 + x0 * (x0 * x1491 + x801) + x807))
    result[1, 2, 1] = numpy.sum(x825 * (x0 * x819 + x0 * (x0 * x1493 + x819) + x823))
    result[1, 2, 2] = numpy.sum(x825 * (x0 * x835 + x0 * (x0 * x1495 + x835) + x839))
    result[1, 2, 3] = numpy.sum(x362 * (x0 * x847 + x0 * (x0 * x1497 + x847) + x851))
    result[1, 2, 4] = numpy.sum(x864 * (x0 * x859 + x0 * (x0 * x1499 + x859) + x863))
    result[1, 2, 5] = numpy.sum(x362 * (x0 * x872 + x0 * (x0 * x1501 + x872) + x876))
    result[1, 2, 6] = numpy.sum(x825 * (x0 * x881 + x0 * (x0 * x1504 + x881) + x885))
    result[1, 2, 7] = numpy.sum(x864 * (x0 * x890 + x0 * (x0 * x1507 + x890) + x894))
    result[1, 2, 8] = numpy.sum(x864 * (x0 * x899 + x0 * (x0 * x1510 + x899) + x903))
    result[1, 2, 9] = numpy.sum(x825 * (x0 * x908 + x0 * (x0 * x1513 + x908) + x912))
    result[1, 2, 10] = numpy.sum(x809 * (x0 * x914 + x0 * (x0 * x1515 + x914) + x917))
    result[1, 2, 11] = numpy.sum(x825 * (x0 * x920 + x0 * (x0 * x1517 + x920) + x923))
    result[1, 2, 12] = numpy.sum(x362 * (x0 * x925 + x0 * (x0 * x1519 + x925) + x928))
    result[1, 2, 13] = numpy.sum(x825 * (x0 * x930 + x0 * (x0 * x1521 + x930) + x933))
    result[1, 2, 14] = numpy.sum(x809 * (x0 * x935 + x0 * (x0 * x1523 + x935) + x938))
    result[1, 3, 0] = numpy.sum(x809 * (x0 * x1526 + x1096))
    result[1, 3, 1] = numpy.sum(x825 * (x0 * x1529 + x1108))
    result[1, 3, 2] = numpy.sum(x825 * (x0 * x1532 + x1113))
    result[1, 3, 3] = numpy.sum(x362 * (x0 * x1535 + x1119))
    result[1, 3, 4] = numpy.sum(x864 * (x0 * x1538 + x1125))
    result[1, 3, 5] = numpy.sum(x362 * (x0 * x1541 + x1129))
    result[1, 3, 6] = numpy.sum(x825 * (x0 * x1545 + x1133))
    result[1, 3, 7] = numpy.sum(x864 * (x0 * x1549 + x1137))
    result[1, 3, 8] = numpy.sum(x864 * (x0 * x1553 + x1141))
    result[1, 3, 9] = numpy.sum(x825 * (x0 * x1557 + x1143))
    result[1, 3, 10] = numpy.sum(x809 * (x0 * x1560 + x1145))
    result[1, 3, 11] = numpy.sum(x825 * (x0 * x1563 + x1147))
    result[1, 3, 12] = numpy.sum(x362 * (x0 * x1566 + x1149))
    result[1, 3, 13] = numpy.sum(x825 * (x0 * x1569 + x1151))
    result[1, 3, 14] = numpy.sum(x809 * (x0 * x1572 + x1153))
    result[1, 4, 0] = numpy.sum(x1576 * (x0 * x1575 + x1169))
    result[1, 4, 1] = numpy.sum(x1580 * (x0 * x1579 + x1179))
    result[1, 4, 2] = numpy.sum(x1580 * (x0 * x1583 + x1188))
    result[1, 4, 3] = numpy.sum(x864 * (x0 * x1586 + x1195))
    result[1, 4, 4] = numpy.sum(x1590 * (x0 * x1589 + x1204))
    result[1, 4, 5] = numpy.sum(x864 * (x0 * x1593 + x1212))
    result[1, 4, 6] = numpy.sum(x1580 * (x0 * x1597 + x1217))
    result[1, 4, 7] = numpy.sum(x1590 * (x0 * x1601 + x1222))
    result[1, 4, 8] = numpy.sum(x1590 * (x0 * x1606 + x1228))
    result[1, 4, 9] = numpy.sum(x1580 * (x0 * x1610 + x1234))
    result[1, 4, 10] = numpy.sum(x1576 * (x0 * x1613 + x1237))
    result[1, 4, 11] = numpy.sum(x1580 * (x0 * x1616 + x1240))
    result[1, 4, 12] = numpy.sum(x864 * (x0 * x1619 + x1243))
    result[1, 4, 13] = numpy.sum(x1580 * (x0 * x1622 + x1247))
    result[1, 4, 14] = numpy.sum(x1576 * (x0 * x1625 + x1250))
    result[1, 5, 0] = numpy.sum(x809 * (x0 * x1628 + x1266))
    result[1, 5, 1] = numpy.sum(x825 * (x0 * x1631 + x1275))
    result[1, 5, 2] = numpy.sum(x825 * (x0 * x1634 + x1284))
    result[1, 5, 3] = numpy.sum(x362 * (x0 * x1637 + x1292))
    result[1, 5, 4] = numpy.sum(x864 * (x0 * x1640 + x1300))
    result[1, 5, 5] = numpy.sum(x362 * (x0 * x1643 + x1308))
    result[1, 5, 6] = numpy.sum(x825 * (x0 * x1647 + x1314))
    result[1, 5, 7] = numpy.sum(x864 * (x0 * x1651 + x1320))
    result[1, 5, 8] = numpy.sum(x864 * (x0 * x1655 + x1326))
    result[1, 5, 9] = numpy.sum(x825 * (x0 * x1659 + x1332))
    result[1, 5, 10] = numpy.sum(x809 * (x0 * x1662 + x1335))
    result[1, 5, 11] = numpy.sum(x825 * (x0 * x1665 + x1338))
    result[1, 5, 12] = numpy.sum(x362 * (x0 * x1668 + x1341))
    result[1, 5, 13] = numpy.sum(x825 * (x0 * x1671 + x1344))
    result[1, 5, 14] = numpy.sum(x809 * (x0 * x1674 + x1347))
    result[1, 6, 0] = numpy.sum(x1418 * (x1526 * x21 + x1680))
    result[1, 6, 1] = numpy.sum(x824 * (x1529 * x21 + x1688))
    result[1, 6, 2] = numpy.sum(x824 * (x1532 * x21 + x1690))
    result[1, 6, 3] = numpy.sum(x171 * (x1535 * x21 + x1694))
    result[1, 6, 4] = numpy.sum(x825 * (x1538 * x21 + x1698))
    result[1, 6, 5] = numpy.sum(x171 * (x1541 * x21 + x1700))
    result[1, 6, 6] = numpy.sum(x824 * (x1545 * x21 + x1704))
    result[1, 6, 7] = numpy.sum(x825 * (x1549 * x21 + x1708))
    result[1, 6, 8] = numpy.sum(x825 * (x1553 * x21 + x1712))
    result[1, 6, 9] = numpy.sum(x824 * (x1557 * x21 + x1714))
    result[1, 6, 10] = numpy.sum(x1418 * (x1560 * x21 + x1715))
    result[1, 6, 11] = numpy.sum(x824 * (x1563 * x21 + x1716))
    result[1, 6, 12] = numpy.sum(x171 * (x1566 * x21 + x1717))
    result[1, 6, 13] = numpy.sum(x824 * (x1569 * x21 + x1718))
    result[1, 6, 14] = numpy.sum(x1418 * (x1572 * x21 + x1719))
    result[1, 7, 0] = numpy.sum(x809 * (x1575 * x21 + x1725))
    result[1, 7, 1] = numpy.sum(x825 * (x1579 * x21 + x1729))
    result[1, 7, 2] = numpy.sum(x825 * (x1583 * x21 + x1733))
    result[1, 7, 3] = numpy.sum(x362 * (x1586 * x21 + x1737))
    result[1, 7, 4] = numpy.sum(x864 * (x1589 * x21 + x1741))
    result[1, 7, 5] = numpy.sum(x362 * (x1593 * x21 + x1745))
    result[1, 7, 6] = numpy.sum(x825 * (x1597 * x21 + x1749))
    result[1, 7, 7] = numpy.sum(x864 * (x1601 * x21 + x1753))
    result[1, 7, 8] = numpy.sum(x864 * (x1606 * x21 + x1757))
    result[1, 7, 9] = numpy.sum(x825 * (x1610 * x21 + x1761))
    result[1, 7, 10] = numpy.sum(x809 * (x1613 * x21 + x1763))
    result[1, 7, 11] = numpy.sum(x825 * (x1616 * x21 + x1765))
    result[1, 7, 12] = numpy.sum(x362 * (x1619 * x21 + x1767))
    result[1, 7, 13] = numpy.sum(x825 * (x1622 * x21 + x1769))
    result[1, 7, 14] = numpy.sum(x809 * (x1625 * x21 + x1771))
    result[1, 8, 0] = numpy.sum(x809 * (x1628 * x21 + x1778))
    result[1, 8, 1] = numpy.sum(x825 * (x1631 * x21 + x1783))
    result[1, 8, 2] = numpy.sum(x825 * (x1634 * x21 + x1788))
    result[1, 8, 3] = numpy.sum(x362 * (x1637 * x21 + x1793))
    result[1, 8, 4] = numpy.sum(x864 * (x1640 * x21 + x1798))
    result[1, 8, 5] = numpy.sum(x362 * (x1643 * x21 + x1803))
    result[1, 8, 6] = numpy.sum(x825 * (x1647 * x21 + x1808))
    result[1, 8, 7] = numpy.sum(x864 * (x1651 * x21 + x1813))
    result[1, 8, 8] = numpy.sum(x864 * (x1655 * x21 + x1818))
    result[1, 8, 9] = numpy.sum(x825 * (x1659 * x21 + x1823))
    result[1, 8, 10] = numpy.sum(x809 * (x1662 * x21 + x1826))
    result[1, 8, 11] = numpy.sum(x825 * (x1665 * x21 + x1829))
    result[1, 8, 12] = numpy.sum(x362 * (x1668 * x21 + x1832))
    result[1, 8, 13] = numpy.sum(x825 * (x1671 * x21 + x1835))
    result[1, 8, 14] = numpy.sum(x809 * (x1674 * x21 + x1838))
    result[1, 9, 0] = numpy.sum(x1418 * (x1628 * x22 + x1844))
    result[1, 9, 1] = numpy.sum(x824 * (x1631 * x22 + x1848))
    result[1, 9, 2] = numpy.sum(x824 * (x1634 * x22 + x1852))
    result[1, 9, 3] = numpy.sum(x171 * (x1637 * x22 + x1856))
    result[1, 9, 4] = numpy.sum(x825 * (x1640 * x22 + x1860))
    result[1, 9, 5] = numpy.sum(x171 * (x1643 * x22 + x1864))
    result[1, 9, 6] = numpy.sum(x824 * (x1647 * x22 + x1868))
    result[1, 9, 7] = numpy.sum(x825 * (x1651 * x22 + x1872))
    result[1, 9, 8] = numpy.sum(x825 * (x1655 * x22 + x1876))
    result[1, 9, 9] = numpy.sum(x824 * (x1659 * x22 + x1880))
    result[1, 9, 10] = numpy.sum(x1418 * (x1662 * x22 + x1882))
    result[1, 9, 11] = numpy.sum(x824 * (x1665 * x22 + x1884))
    result[1, 9, 12] = numpy.sum(x171 * (x1668 * x22 + x1886))
    result[1, 9, 13] = numpy.sum(x824 * (x1671 * x22 + x1888))
    result[1, 9, 14] = numpy.sum(x1418 * (x1674 * x22 + x1890))
    result[2, 0, 0] = numpy.sum(
        x1418
        * (x0 * x1891 + x0 * x484 + x0 * (x0 * (x104 * x1892 + x487) + x1891) + x497)
    )
    result[2, 0, 1] = numpy.sum(
        x824 * (x0 * x1893 + x0 * x504 + x0 * (x0 * (x104 * x1895 + x508) + x1893) + x510)
    )
    result[2, 0, 2] = numpy.sum(
        x824 * (x0 * x1896 + x0 * x522 + x0 * (x0 * (x104 * x1897 + x525) + x1896) + x528)
    )
    result[2, 0, 3] = numpy.sum(
        x171 * (x0 * x1898 + x0 * x531 + x0 * (x0 * (x104 * x1899 + x535) + x1898) + x537)
    )
    result[2, 0, 4] = numpy.sum(
        x825 * (x0 * x1900 + x0 * x542 + x0 * (x0 * (x104 * x1903 + x547) + x1900) + x550)
    )
    result[2, 0, 5] = numpy.sum(
        x171 * (x0 * x1904 + x0 * x557 + x0 * (x0 * (x104 * x1905 + x562) + x1904) + x565)
    )
    result[2, 0, 6] = numpy.sum(
        x824 * (x0 * x1906 + x0 * x566 + x0 * (x0 * (x104 * x1908 + x568) + x1906) + x570)
    )
    result[2, 0, 7] = numpy.sum(
        x825 * (x0 * x1909 + x0 * x572 + x0 * (x0 * (x104 * x1911 + x574) + x1909) + x576)
    )
    result[2, 0, 8] = numpy.sum(
        x825 * (x0 * x1912 + x0 * x578 + x0 * (x0 * (x104 * x1914 + x581) + x1912) + x583)
    )
    result[2, 0, 9] = numpy.sum(
        x824 * (x0 * x1915 + x0 * x586 + x0 * (x0 * (x104 * x1918 + x590) + x1915) + x593)
    )
    result[2, 0, 10] = numpy.sum(
        x1418 * (x0 * x1919 + x0 * x594 + x0 * (x0 * (x0 * x1920 + x596) + x1919) + x599)
    )
    result[2, 0, 11] = numpy.sum(
        x824 * (x0 * x1921 + x0 * x600 + x0 * (x0 * (x0 * x1922 + x602) + x1921) + x604)
    )
    result[2, 0, 12] = numpy.sum(
        x171 * (x0 * x1923 + x0 * x605 + x0 * (x0 * (x0 * x1924 + x607) + x1923) + x609)
    )
    result[2, 0, 13] = numpy.sum(
        x824 * (x0 * x1925 + x0 * x610 + x0 * (x0 * (x0 * x1926 + x612) + x1925) + x614)
    )
    result[2, 0, 14] = numpy.sum(
        x1418
        * (x0 * x1927 + x0 * x615 + x0 * (x0 * (x104 * x1928 + x617) + x1927) + x619)
    )
    result[2, 1, 0] = numpy.sum(
        x809 * (x0 * x1929 + x0 * (x0 * x1930 + x1929) + x21 * x484 + x806)
    )
    result[2, 1, 1] = numpy.sum(
        x825 * (x0 * x1931 + x0 * (x0 * x1932 + x1931) + x21 * x504 + x822)
    )
    result[2, 1, 2] = numpy.sum(
        x825 * (x0 * x1933 + x0 * (x0 * x1934 + x1933) + x21 * x522 + x838)
    )
    result[2, 1, 3] = numpy.sum(
        x362 * (x0 * x1935 + x0 * (x0 * x1936 + x1935) + x21 * x531 + x850)
    )
    result[2, 1, 4] = numpy.sum(
        x864 * (x0 * x1937 + x0 * (x0 * x1938 + x1937) + x21 * x542 + x862)
    )
    result[2, 1, 5] = numpy.sum(
        x362 * (x0 * x1939 + x0 * (x0 * x1940 + x1939) + x21 * x557 + x875)
    )
    result[2, 1, 6] = numpy.sum(
        x825 * (x0 * x1941 + x0 * (x0 * x1942 + x1941) + x21 * x566 + x884)
    )
    result[2, 1, 7] = numpy.sum(
        x864 * (x0 * x1943 + x0 * (x0 * x1944 + x1943) + x21 * x572 + x893)
    )
    result[2, 1, 8] = numpy.sum(
        x864 * (x0 * x1945 + x0 * (x0 * x1946 + x1945) + x21 * x578 + x902)
    )
    result[2, 1, 9] = numpy.sum(
        x825 * (x0 * x1947 + x0 * (x0 * x1948 + x1947) + x21 * x586 + x911)
    )
    result[2, 1, 10] = numpy.sum(
        x809 * (x0 * x1949 + x0 * (x0 * x1950 + x1949) + x21 * x594 + x916)
    )
    result[2, 1, 11] = numpy.sum(
        x825 * (x0 * x1951 + x0 * (x0 * x1952 + x1951) + x21 * x600 + x922)
    )
    result[2, 1, 12] = numpy.sum(
        x362 * (x0 * x1953 + x0 * (x0 * x1954 + x1953) + x21 * x605 + x927)
    )
    result[2, 1, 13] = numpy.sum(
        x825 * (x0 * x1955 + x0 * (x0 * x1956 + x1955) + x21 * x610 + x932)
    )
    result[2, 1, 14] = numpy.sum(
        x809 * (x0 * x1957 + x0 * (x0 * x1958 + x1957) + x21 * x615 + x937)
    )
    result[2, 2, 0] = numpy.sum(x809 * (x0 * x964 + x0 * (x0 * x1960 + x964) + x974))
    result[2, 2, 1] = numpy.sum(x825 * (x0 * x981 + x0 * (x0 * x1962 + x981) + x984))
    result[2, 2, 2] = numpy.sum(x825 * (x0 * x994 + x0 * (x0 * x1964 + x994) + x999))
    result[2, 2, 3] = numpy.sum(x362 * (x0 * x1004 + x0 * (x0 * x1966 + x1004) + x1007))
    result[2, 2, 4] = numpy.sum(x864 * (x0 * x1012 + x0 * (x0 * x1968 + x1012) + x1015))
    result[2, 2, 5] = numpy.sum(x362 * (x0 * x1023 + x0 * (x0 * x1970 + x1023) + x1028))
    result[2, 2, 6] = numpy.sum(x825 * (x0 * x1030 + x0 * (x0 * x1973 + x1030) + x1033))
    result[2, 2, 7] = numpy.sum(x864 * (x0 * x1036 + x0 * (x0 * x1976 + x1036) + x1039))
    result[2, 2, 8] = numpy.sum(x864 * (x0 * x1041 + x0 * (x0 * x1979 + x1041) + x1044))
    result[2, 2, 9] = numpy.sum(x825 * (x0 * x1048 + x0 * (x0 * x1983 + x1048) + x1053))
    result[2, 2, 10] = numpy.sum(x809 * (x0 * x1055 + x0 * (x0 * x1985 + x1055) + x1058))
    result[2, 2, 11] = numpy.sum(x825 * (x0 * x1060 + x0 * (x0 * x1987 + x1060) + x1063))
    result[2, 2, 12] = numpy.sum(x362 * (x0 * x1065 + x0 * (x0 * x1989 + x1065) + x1068))
    result[2, 2, 13] = numpy.sum(x825 * (x0 * x1070 + x0 * (x0 * x1991 + x1070) + x1073))
    result[2, 2, 14] = numpy.sum(x809 * (x0 * x1075 + x0 * (x0 * x1993 + x1075) + x1078))
    result[2, 3, 0] = numpy.sum(x809 * (x0 * x1995 + x1929 * x21 + x1996))
    result[2, 3, 1] = numpy.sum(x825 * (x0 * x1998 + x1931 * x21 + x1999))
    result[2, 3, 2] = numpy.sum(x825 * (x0 * x2001 + x1933 * x21 + x2002))
    result[2, 3, 3] = numpy.sum(x362 * (x0 * x2004 + x1935 * x21 + x2005))
    result[2, 3, 4] = numpy.sum(x864 * (x0 * x2007 + x1937 * x21 + x2008))
    result[2, 3, 5] = numpy.sum(x362 * (x0 * x2010 + x1939 * x21 + x2011))
    result[2, 3, 6] = numpy.sum(x825 * (x0 * x2013 + x1941 * x21 + x2014))
    result[2, 3, 7] = numpy.sum(x864 * (x0 * x2016 + x1943 * x21 + x2017))
    result[2, 3, 8] = numpy.sum(x864 * (x0 * x2019 + x1945 * x21 + x2020))
    result[2, 3, 9] = numpy.sum(x825 * (x0 * x2022 + x1947 * x21 + x2023))
    result[2, 3, 10] = numpy.sum(x809 * (x0 * x2025 + x1949 * x21 + x2026))
    result[2, 3, 11] = numpy.sum(x825 * (x0 * x2028 + x1951 * x21 + x2029))
    result[2, 3, 12] = numpy.sum(x362 * (x0 * x2031 + x1953 * x21 + x2032))
    result[2, 3, 13] = numpy.sum(x825 * (x0 * x2034 + x1955 * x21 + x2035))
    result[2, 3, 14] = numpy.sum(x809 * (x0 * x2037 + x1957 * x21 + x2038))
    result[2, 4, 0] = numpy.sum(x1576 * (x0 * x2039 + x1265 + x21 * x964))
    result[2, 4, 1] = numpy.sum(x1580 * (x0 * x2040 + x1274 + x21 * x981))
    result[2, 4, 2] = numpy.sum(x1580 * (x0 * x2041 + x1283 + x21 * x994))
    result[2, 4, 3] = numpy.sum(x864 * (x0 * x2042 + x1004 * x21 + x1291))
    result[2, 4, 4] = numpy.sum(x1590 * (x0 * x2043 + x1012 * x21 + x1299))
    result[2, 4, 5] = numpy.sum(x864 * (x0 * x2044 + x1023 * x21 + x1307))
    result[2, 4, 6] = numpy.sum(x1580 * (x0 * x2045 + x1030 * x21 + x1313))
    result[2, 4, 7] = numpy.sum(x1590 * (x0 * x2046 + x1036 * x21 + x1319))
    result[2, 4, 8] = numpy.sum(x1590 * (x0 * x2047 + x1041 * x21 + x1325))
    result[2, 4, 9] = numpy.sum(x1580 * (x0 * x2048 + x1048 * x21 + x1331))
    result[2, 4, 10] = numpy.sum(x1576 * (x0 * x2049 + x1055 * x21 + x1334))
    result[2, 4, 11] = numpy.sum(x1580 * (x0 * x2050 + x1060 * x21 + x1337))
    result[2, 4, 12] = numpy.sum(x864 * (x0 * x2051 + x1065 * x21 + x1340))
    result[2, 4, 13] = numpy.sum(x1580 * (x0 * x2052 + x1070 * x21 + x1343))
    result[2, 4, 14] = numpy.sum(x1576 * (x0 * x2053 + x1075 * x21 + x1346))
    result[2, 5, 0] = numpy.sum(x809 * (x0 * x2056 + x1365))
    result[2, 5, 1] = numpy.sum(x825 * (x0 * x2059 + x1370))
    result[2, 5, 2] = numpy.sum(x825 * (x0 * x2062 + x1378))
    result[2, 5, 3] = numpy.sum(x362 * (x0 * x2065 + x1382))
    result[2, 5, 4] = numpy.sum(x864 * (x0 * x2069 + x1386))
    result[2, 5, 5] = numpy.sum(x362 * (x0 * x2072 + x1393))
    result[2, 5, 6] = numpy.sum(x825 * (x0 * x2076 + x1395))
    result[2, 5, 7] = numpy.sum(x864 * (x0 * x2080 + x1397))
    result[2, 5, 8] = numpy.sum(x864 * (x0 * x2084 + x1399))
    result[2, 5, 9] = numpy.sum(x825 * (x0 * x2089 + x1403))
    result[2, 5, 10] = numpy.sum(x809 * (x0 * x2092 + x1405))
    result[2, 5, 11] = numpy.sum(x825 * (x0 * x2095 + x1407))
    result[2, 5, 12] = numpy.sum(x362 * (x0 * x2098 + x1409))
    result[2, 5, 13] = numpy.sum(x825 * (x0 * x2101 + x1411))
    result[2, 5, 14] = numpy.sum(x809 * (x0 * x2104 + x1413))
    result[2, 6, 0] = numpy.sum(x1418 * (x1995 * x21 + x2105))
    result[2, 6, 1] = numpy.sum(x824 * (x1998 * x21 + x2106))
    result[2, 6, 2] = numpy.sum(x824 * (x2001 * x21 + x2107))
    result[2, 6, 3] = numpy.sum(x171 * (x2004 * x21 + x2108))
    result[2, 6, 4] = numpy.sum(x825 * (x2007 * x21 + x2109))
    result[2, 6, 5] = numpy.sum(x171 * (x2010 * x21 + x2110))
    result[2, 6, 6] = numpy.sum(x824 * (x2013 * x21 + x2111))
    result[2, 6, 7] = numpy.sum(x825 * (x2016 * x21 + x2112))
    result[2, 6, 8] = numpy.sum(x825 * (x2019 * x21 + x2113))
    result[2, 6, 9] = numpy.sum(x824 * (x2022 * x21 + x2114))
    result[2, 6, 10] = numpy.sum(x1418 * (x2025 * x21 + x2115))
    result[2, 6, 11] = numpy.sum(x824 * (x2028 * x21 + x2116))
    result[2, 6, 12] = numpy.sum(x171 * (x2031 * x21 + x2117))
    result[2, 6, 13] = numpy.sum(x824 * (x2034 * x21 + x2118))
    result[2, 6, 14] = numpy.sum(x1418 * (x2037 * x21 + x2119))
    result[2, 7, 0] = numpy.sum(x809 * (x2039 * x21 + x2120))
    result[2, 7, 1] = numpy.sum(x825 * (x2040 * x21 + x2121))
    result[2, 7, 2] = numpy.sum(x825 * (x2041 * x21 + x2122))
    result[2, 7, 3] = numpy.sum(x362 * (x2042 * x21 + x2123))
    result[2, 7, 4] = numpy.sum(x864 * (x2043 * x21 + x2124))
    result[2, 7, 5] = numpy.sum(x362 * (x2044 * x21 + x2125))
    result[2, 7, 6] = numpy.sum(x825 * (x2045 * x21 + x2126))
    result[2, 7, 7] = numpy.sum(x864 * (x2046 * x21 + x2127))
    result[2, 7, 8] = numpy.sum(x864 * (x2047 * x21 + x2128))
    result[2, 7, 9] = numpy.sum(x825 * (x2048 * x21 + x2129))
    result[2, 7, 10] = numpy.sum(x809 * (x2049 * x21 + x2130))
    result[2, 7, 11] = numpy.sum(x825 * (x2050 * x21 + x2131))
    result[2, 7, 12] = numpy.sum(x362 * (x2051 * x21 + x2132))
    result[2, 7, 13] = numpy.sum(x825 * (x2052 * x21 + x2133))
    result[2, 7, 14] = numpy.sum(x809 * (x2053 * x21 + x2134))
    result[2, 8, 0] = numpy.sum(x809 * (x1844 + x2056 * x21))
    result[2, 8, 1] = numpy.sum(x825 * (x1848 + x2059 * x21))
    result[2, 8, 2] = numpy.sum(x825 * (x1852 + x2062 * x21))
    result[2, 8, 3] = numpy.sum(x362 * (x1856 + x2065 * x21))
    result[2, 8, 4] = numpy.sum(x864 * (x1860 + x2069 * x21))
    result[2, 8, 5] = numpy.sum(x362 * (x1864 + x2072 * x21))
    result[2, 8, 6] = numpy.sum(x825 * (x1868 + x2076 * x21))
    result[2, 8, 7] = numpy.sum(x864 * (x1872 + x2080 * x21))
    result[2, 8, 8] = numpy.sum(x864 * (x1876 + x2084 * x21))
    result[2, 8, 9] = numpy.sum(x825 * (x1880 + x2089 * x21))
    result[2, 8, 10] = numpy.sum(x809 * (x1882 + x2092 * x21))
    result[2, 8, 11] = numpy.sum(x825 * (x1884 + x2095 * x21))
    result[2, 8, 12] = numpy.sum(x362 * (x1886 + x2098 * x21))
    result[2, 8, 13] = numpy.sum(x825 * (x1888 + x21 * x2101))
    result[2, 8, 14] = numpy.sum(x809 * (x1890 + x21 * x2104))
    result[2, 9, 0] = numpy.sum(x1418 * (x2056 * x22 + x2140))
    result[2, 9, 1] = numpy.sum(x824 * (x2059 * x22 + x2142))
    result[2, 9, 2] = numpy.sum(x824 * (x2062 * x22 + x2146))
    result[2, 9, 3] = numpy.sum(x171 * (x2065 * x22 + x2148))
    result[2, 9, 4] = numpy.sum(x825 * (x2069 * x22 + x2150))
    result[2, 9, 5] = numpy.sum(x171 * (x2072 * x22 + x2154))
    result[2, 9, 6] = numpy.sum(x824 * (x2076 * x22 + x2156))
    result[2, 9, 7] = numpy.sum(x825 * (x2080 * x22 + x2158))
    result[2, 9, 8] = numpy.sum(x825 * (x2084 * x22 + x2160))
    result[2, 9, 9] = numpy.sum(x824 * (x2089 * x22 + x2164))
    result[2, 9, 10] = numpy.sum(x1418 * (x2092 * x22 + x2165))
    result[2, 9, 11] = numpy.sum(x824 * (x2095 * x22 + x2166))
    result[2, 9, 12] = numpy.sum(x171 * (x2098 * x22 + x2167))
    result[2, 9, 13] = numpy.sum(x824 * (x2101 * x22 + x2168))
    result[2, 9, 14] = numpy.sum(x1418 * (x2104 * x22 + x2169))
    result[3, 0, 0] = numpy.sum(
        x117
        * (x0 * x2170 + x0 * x644 + x0 * (x0 * (x1456 + x2171 * x2172) + x2170) + x654)
    )
    result[3, 0, 1] = numpy.sum(
        x134 * (x0 * x2173 + x0 * x668 + x0 * (x0 * (x0 * x2175 + x1458) + x2173) + x675)
    )
    result[3, 0, 2] = numpy.sum(
        x134
        * (x0 * x2176 + x0 * x682 + x0 * (x0 * (x1460 + x2172 * x2177) + x2176) + x686)
    )
    result[3, 0, 3] = numpy.sum(
        x159
        * (x0 * x2178 + x0 * x693 + x0 * (x0 * (x1462 + x2179 * x691) + x2178) + x698)
    )
    result[3, 0, 4] = numpy.sum(
        x171
        * (x0 * x2180 + x0 * x705 + x0 * (x0 * (x1464 + x2179 * x703) + x2180) + x710)
    )
    result[3, 0, 5] = numpy.sum(
        x159
        * (x0 * x2181 + x0 * x715 + x0 * (x0 * (x1466 + x2182 * x2183) + x2181) + x719)
    )
    result[3, 0, 6] = numpy.sum(
        x134
        * (x0 * x2184 + x0 * x723 + x0 * (x0 * (x1468 * x2185 + x1469) + x2184) + x728)
    )
    result[3, 0, 7] = numpy.sum(
        x171
        * (x0 * x2186 + x0 * x732 + x0 * (x0 * (x1471 * x2185 + x1472) + x2186) + x737)
    )
    result[3, 0, 8] = numpy.sum(
        x171
        * (x0 * x2187 + x0 * x741 + x0 * (x0 * (x1474 * x2185 + x1475) + x2187) + x746)
    )
    result[3, 0, 9] = numpy.sum(
        x134
        * (x0 * x2188 + x0 * x748 + x0 * (x0 * (x1478 + x2183 * x2189) + x2188) + x752)
    )
    result[3, 0, 10] = numpy.sum(
        x117
        * (x0 * x2190 + x0 * x754 + x0 * (x0 * (x104 * x2191 + x1480) + x2190) + x757)
    )
    result[3, 0, 11] = numpy.sum(
        x134
        * (x0 * x2192 + x0 * x759 + x0 * (x0 * (x104 * x2193 + x1482) + x2192) + x762)
    )
    result[3, 0, 12] = numpy.sum(
        x159
        * (x0 * x2194 + x0 * x764 + x0 * (x0 * (x104 * x2195 + x1484) + x2194) + x767)
    )
    result[3, 0, 13] = numpy.sum(
        x134
        * (x0 * x2196 + x0 * x769 + x0 * (x0 * (x104 * x2197 + x1486) + x2196) + x772)
    )
    result[3, 0, 14] = numpy.sum(
        x117
        * (x0 * x2198 + x0 * x774 + x0 * (x0 * (x1488 + x2172 * x228) + x2198) + x777)
    )
    result[3, 1, 0] = numpy.sum(x289 * (x0 * x1525 + x0 * (x0 * x2201 + x1525) + x1095))
    result[3, 1, 1] = numpy.sum(x171 * (x0 * x1528 + x0 * (x0 * x2203 + x1528) + x1107))
    result[3, 1, 2] = numpy.sum(x171 * (x0 * x1531 + x0 * (x0 * x2205 + x1531) + x1112))
    result[3, 1, 3] = numpy.sum(x343 * (x0 * x1534 + x0 * (x0 * x2208 + x1534) + x1118))
    result[3, 1, 4] = numpy.sum(x362 * (x0 * x1537 + x0 * (x0 * x2210 + x1537) + x1124))
    result[3, 1, 5] = numpy.sum(x343 * (x0 * x1540 + x0 * (x0 * x2214 + x1540) + x1128))
    result[3, 1, 6] = numpy.sum(x171 * (x0 * x1544 + x0 * (x0 * x2217 + x1544) + x1132))
    result[3, 1, 7] = numpy.sum(x362 * (x0 * x1548 + x0 * (x0 * x2219 + x1548) + x1136))
    result[3, 1, 8] = numpy.sum(x362 * (x0 * x1552 + x0 * (x0 * x2221 + x1552) + x1140))
    result[3, 1, 9] = numpy.sum(x171 * (x0 * x1556 + x0 * (x0 * x2223 + x1556) + x1142))
    result[3, 1, 10] = numpy.sum(x289 * (x0 * x1559 + x0 * (x0 * x2225 + x1559) + x1144))
    result[3, 1, 11] = numpy.sum(x171 * (x0 * x1562 + x0 * (x0 * x2227 + x1562) + x1146))
    result[3, 1, 12] = numpy.sum(x343 * (x0 * x1565 + x0 * (x0 * x2229 + x1565) + x1148))
    result[3, 1, 13] = numpy.sum(x171 * (x0 * x1568 + x0 * (x0 * x2231 + x1568) + x1150))
    result[3, 1, 14] = numpy.sum(x289 * (x0 * x1571 + x0 * (x0 * x2233 + x1571) + x1152))
    result[3, 2, 0] = numpy.sum(x289 * (x0 * x1574 + x0 * (x0 * x2236 + x1574) + x1168))
    result[3, 2, 1] = numpy.sum(x171 * (x0 * x1578 + x0 * (x0 * x2238 + x1578) + x1178))
    result[3, 2, 2] = numpy.sum(x171 * (x0 * x1582 + x0 * (x0 * x2240 + x1582) + x1187))
    result[3, 2, 3] = numpy.sum(x343 * (x0 * x1585 + x0 * (x0 * x2243 + x1585) + x1194))
    result[3, 2, 4] = numpy.sum(x362 * (x0 * x1588 + x0 * (x0 * x2245 + x1588) + x1203))
    result[3, 2, 5] = numpy.sum(x343 * (x0 * x1592 + x0 * (x0 * x2248 + x1592) + x1211))
    result[3, 2, 6] = numpy.sum(x171 * (x0 * x1596 + x0 * (x0 * x2251 + x1596) + x1216))
    result[3, 2, 7] = numpy.sum(x362 * (x0 * x1600 + x0 * (x0 * x2253 + x1600) + x1221))
    result[3, 2, 8] = numpy.sum(x362 * (x0 * x1605 + x0 * (x0 * x2255 + x1605) + x1227))
    result[3, 2, 9] = numpy.sum(x171 * (x0 * x1609 + x0 * (x0 * x2257 + x1609) + x1233))
    result[3, 2, 10] = numpy.sum(x289 * (x0 * x1612 + x0 * (x0 * x2259 + x1612) + x1236))
    result[3, 2, 11] = numpy.sum(x171 * (x0 * x1615 + x0 * (x0 * x2261 + x1615) + x1239))
    result[3, 2, 12] = numpy.sum(x343 * (x0 * x1618 + x0 * (x0 * x2263 + x1618) + x1242))
    result[3, 2, 13] = numpy.sum(x171 * (x0 * x1621 + x0 * (x0 * x2266 + x1621) + x1246))
    result[3, 2, 14] = numpy.sum(x289 * (x0 * x1624 + x0 * (x0 * x2268 + x1624) + x1249))
    result[3, 3, 0] = numpy.sum(x289 * (x0 * x2271 + x1680))
    result[3, 3, 1] = numpy.sum(x171 * (x0 * x2274 + x1688))
    result[3, 3, 2] = numpy.sum(x171 * (x0 * x2277 + x1690))
    result[3, 3, 3] = numpy.sum(x343 * (x0 * x2280 + x1694))
    result[3, 3, 4] = numpy.sum(x362 * (x0 * x2283 + x1698))
    result[3, 3, 5] = numpy.sum(x343 * (x0 * x2287 + x1700))
    result[3, 3, 6] = numpy.sum(x171 * (x0 * x2290 + x1704))
    result[3, 3, 7] = numpy.sum(x362 * (x0 * x2293 + x1708))
    result[3, 3, 8] = numpy.sum(x362 * (x0 * x2296 + x1712))
    result[3, 3, 9] = numpy.sum(x171 * (x0 * x2299 + x1714))
    result[3, 3, 10] = numpy.sum(x289 * (x0 * x2302 + x1715))
    result[3, 3, 11] = numpy.sum(x171 * (x0 * x2305 + x1716))
    result[3, 3, 12] = numpy.sum(x343 * (x0 * x2308 + x1717))
    result[3, 3, 13] = numpy.sum(x171 * (x0 * x2311 + x1718))
    result[3, 3, 14] = numpy.sum(x289 * (x0 * x2314 + x1719))
    result[3, 4, 0] = numpy.sum(x809 * (x0 * x2317 + x1725))
    result[3, 4, 1] = numpy.sum(x825 * (x0 * x2320 + x1729))
    result[3, 4, 2] = numpy.sum(x825 * (x0 * x2323 + x1733))
    result[3, 4, 3] = numpy.sum(x362 * (x0 * x2326 + x1737))
    result[3, 4, 4] = numpy.sum(x864 * (x0 * x2329 + x1741))
    result[3, 4, 5] = numpy.sum(x362 * (x0 * x2332 + x1745))
    result[3, 4, 6] = numpy.sum(x825 * (x0 * x2335 + x1749))
    result[3, 4, 7] = numpy.sum(x864 * (x0 * x2338 + x1753))
    result[3, 4, 8] = numpy.sum(x864 * (x0 * x2341 + x1757))
    result[3, 4, 9] = numpy.sum(x825 * (x0 * x2344 + x1761))
    result[3, 4, 10] = numpy.sum(x809 * (x0 * x2347 + x1763))
    result[3, 4, 11] = numpy.sum(x825 * (x0 * x2350 + x1765))
    result[3, 4, 12] = numpy.sum(x362 * (x0 * x2353 + x1767))
    result[3, 4, 13] = numpy.sum(x825 * (x0 * x2356 + x1769))
    result[3, 4, 14] = numpy.sum(x809 * (x0 * x2359 + x1771))
    result[3, 5, 0] = numpy.sum(x289 * (x0 * x2362 + x1778))
    result[3, 5, 1] = numpy.sum(x171 * (x0 * x2365 + x1783))
    result[3, 5, 2] = numpy.sum(x171 * (x0 * x2368 + x1788))
    result[3, 5, 3] = numpy.sum(x343 * (x0 * x2371 + x1793))
    result[3, 5, 4] = numpy.sum(x362 * (x0 * x2374 + x1798))
    result[3, 5, 5] = numpy.sum(x343 * (x0 * x2377 + x1803))
    result[3, 5, 6] = numpy.sum(x171 * (x0 * x2380 + x1808))
    result[3, 5, 7] = numpy.sum(x362 * (x0 * x2383 + x1813))
    result[3, 5, 8] = numpy.sum(x362 * (x0 * x2386 + x1818))
    result[3, 5, 9] = numpy.sum(x171 * (x0 * x2389 + x1823))
    result[3, 5, 10] = numpy.sum(x289 * (x0 * x2392 + x1826))
    result[3, 5, 11] = numpy.sum(x171 * (x0 * x2395 + x1829))
    result[3, 5, 12] = numpy.sum(x343 * (x0 * x2398 + x1832))
    result[3, 5, 13] = numpy.sum(x171 * (x0 * x2401 + x1835))
    result[3, 5, 14] = numpy.sum(x289 * (x0 * x2404 + x1838))
    result[3, 6, 0] = numpy.sum(
        x117 * (x21 * x2269 + x21 * x2270 + x21 * x2271 + x2171 * x2405)
    )
    result[3, 6, 1] = numpy.sum(
        x134 * (x21 * x2272 + x21 * x2273 + x21 * x2274 + x2174 * x2408)
    )
    result[3, 6, 2] = numpy.sum(
        x134 * (x21 * x2275 + x21 * x2276 + x21 * x2277 + x2177 * x2405)
    )
    result[3, 6, 3] = numpy.sum(
        x159 * (x1420 * x2409 + x21 * x2278 + x21 * x2279 + x21 * x2280)
    )
    result[3, 6, 4] = numpy.sum(
        x171 * (x1420 * x2410 + x21 * x2281 + x21 * x2282 + x21 * x2283)
    )
    result[3, 6, 5] = numpy.sum(
        x159 * (x21 * x2285 + x21 * x2286 + x21 * x2287 + x2182 * x2411)
    )
    result[3, 6, 6] = numpy.sum(
        x134 * (x21 * x2288 + x21 * x2289 + x21 * x2290 + x2412 * x307)
    )
    result[3, 6, 7] = numpy.sum(
        x171 * (x21 * x2291 + x21 * x2292 + x21 * x2293 + x2413 * x307)
    )
    result[3, 6, 8] = numpy.sum(
        x171 * (x21 * x2294 + x21 * x2295 + x21 * x2296 + x2414 * x307)
    )
    result[3, 6, 9] = numpy.sum(
        x134 * (x21 * x2297 + x21 * x2298 + x21 * x2299 + x2189 * x2411)
    )
    result[3, 6, 10] = numpy.sum(
        x117
        * (x21 * x2300 + x21 * x2301 + x21 * x2302 + x72 * (x118 * x2412 + 5.0 * x1702))
    )
    result[3, 6, 11] = numpy.sum(
        x134
        * (x21 * x2303 + x21 * x2304 + x21 * x2305 + x72 * (x118 * x2413 + 5.0 * x1706))
    )
    result[3, 6, 12] = numpy.sum(
        x159
        * (x21 * x2306 + x21 * x2307 + x21 * x2308 + x72 * (x118 * x2414 + 5.0 * x1710))
    )
    result[3, 6, 13] = numpy.sum(
        x134 * (x201 * x72 * (x2406 + x2407) + x21 * x2309 + x21 * x2310 + x21 * x2311)
    )
    result[3, 6, 14] = numpy.sum(
        x117 * (x21 * x2312 + x21 * x2313 + x21 * x2314 + x228 * x2405)
    )
    result[3, 7, 0] = numpy.sum(x289 * (x21 * x2316 + x21 * x2317 + x22 * x2269 + x2416))
    result[3, 7, 1] = numpy.sum(x171 * (x21 * x2319 + x21 * x2320 + x22 * x2272 + x2418))
    result[3, 7, 2] = numpy.sum(x171 * (x21 * x2322 + x21 * x2323 + x22 * x2275 + x2420))
    result[3, 7, 3] = numpy.sum(x343 * (x21 * x2325 + x21 * x2326 + x22 * x2278 + x2422))
    result[3, 7, 4] = numpy.sum(x362 * (x21 * x2328 + x21 * x2329 + x22 * x2281 + x2424))
    result[3, 7, 5] = numpy.sum(x343 * (x21 * x2331 + x21 * x2332 + x22 * x2285 + x2426))
    result[3, 7, 6] = numpy.sum(x171 * (x21 * x2334 + x21 * x2335 + x22 * x2288 + x2428))
    result[3, 7, 7] = numpy.sum(x362 * (x21 * x2337 + x21 * x2338 + x22 * x2291 + x2430))
    result[3, 7, 8] = numpy.sum(x362 * (x21 * x2340 + x21 * x2341 + x22 * x2294 + x2432))
    result[3, 7, 9] = numpy.sum(x171 * (x21 * x2343 + x21 * x2344 + x22 * x2297 + x2434))
    result[3, 7, 10] = numpy.sum(x289 * (x21 * x2346 + x21 * x2347 + x22 * x2300 + x2435))
    result[3, 7, 11] = numpy.sum(x171 * (x21 * x2349 + x21 * x2350 + x22 * x2303 + x2436))
    result[3, 7, 12] = numpy.sum(x343 * (x21 * x2352 + x21 * x2353 + x22 * x2306 + x2437))
    result[3, 7, 13] = numpy.sum(x171 * (x21 * x2355 + x21 * x2356 + x22 * x2309 + x2438))
    result[3, 7, 14] = numpy.sum(x289 * (x21 * x2358 + x21 * x2359 + x22 * x2312 + x2439))
    result[3, 8, 0] = numpy.sum(x289 * (x21 * x2362 + x22 * x2316 + x2442))
    result[3, 8, 1] = numpy.sum(x171 * (x21 * x2365 + x22 * x2319 + x2446))
    result[3, 8, 2] = numpy.sum(x171 * (x21 * x2368 + x22 * x2322 + x2449))
    result[3, 8, 3] = numpy.sum(x343 * (x21 * x2371 + x22 * x2325 + x2452))
    result[3, 8, 4] = numpy.sum(x362 * (x21 * x2374 + x22 * x2328 + x2456))
    result[3, 8, 5] = numpy.sum(x343 * (x21 * x2377 + x22 * x2331 + x2459))
    result[3, 8, 6] = numpy.sum(x171 * (x21 * x2380 + x22 * x2334 + x2462))
    result[3, 8, 7] = numpy.sum(x362 * (x21 * x2383 + x22 * x2337 + x2465))
    result[3, 8, 8] = numpy.sum(x362 * (x21 * x2386 + x22 * x2340 + x2469))
    result[3, 8, 9] = numpy.sum(x171 * (x21 * x2389 + x22 * x2343 + x2472))
    result[3, 8, 10] = numpy.sum(x289 * (x21 * x2392 + x22 * x2346 + x2474))
    result[3, 8, 11] = numpy.sum(x171 * (x21 * x2395 + x22 * x2349 + x2476))
    result[3, 8, 12] = numpy.sum(x343 * (x21 * x2398 + x22 * x2352 + x2478))
    result[3, 8, 13] = numpy.sum(x171 * (x21 * x2401 + x22 * x2355 + x2481))
    result[3, 8, 14] = numpy.sum(x289 * (x21 * x2404 + x22 * x2358 + x2483))
    result[3, 9, 0] = numpy.sum(x117 * (x22 * x2362 + x2486))
    result[3, 9, 1] = numpy.sum(x134 * (x22 * x2365 + x2489))
    result[3, 9, 2] = numpy.sum(x134 * (x22 * x2368 + x2492))
    result[3, 9, 3] = numpy.sum(x159 * (x22 * x2371 + x2495))
    result[3, 9, 4] = numpy.sum(x171 * (x22 * x2374 + x2498))
    result[3, 9, 5] = numpy.sum(x159 * (x22 * x2377 + x2501))
    result[3, 9, 6] = numpy.sum(x134 * (x22 * x2380 + x2504))
    result[3, 9, 7] = numpy.sum(x171 * (x22 * x2383 + x2507))
    result[3, 9, 8] = numpy.sum(x171 * (x22 * x2386 + x2510))
    result[3, 9, 9] = numpy.sum(x134 * (x22 * x2389 + x2513))
    result[3, 9, 10] = numpy.sum(x117 * (x22 * x2392 + x2515))
    result[3, 9, 11] = numpy.sum(x134 * (x22 * x2395 + x2517))
    result[3, 9, 12] = numpy.sum(x159 * (x22 * x2398 + x2519))
    result[3, 9, 13] = numpy.sum(x134 * (x22 * x2401 + x2521))
    result[3, 9, 14] = numpy.sum(x117 * (x22 * x2404 + x2523))
    result[4, 0, 0] = numpy.sum(
        x1418 * (x0 * x2524 + x0 * x800 + x0 * (x0 * (x0 * x2525 + x1490) + x2524) + x806)
    )
    result[4, 0, 1] = numpy.sum(
        x824
        * (x0 * x2526 + x0 * x818 + x0 * (x0 * (x1492 + x2527 * x814) + x2526) + x822)
    )
    result[4, 0, 2] = numpy.sum(
        x824
        * (x0 * x2528 + x0 * x834 + x0 * (x0 * (x1494 + x2527 * x830) + x2528) + x838)
    )
    result[4, 0, 3] = numpy.sum(
        x171
        * (x0 * x2529 + x0 * x846 + x0 * (x0 * (x1496 + x2179 * x844) + x2529) + x850)
    )
    result[4, 0, 4] = numpy.sum(
        x825
        * (x0 * x2530 + x0 * x858 + x0 * (x0 * (x1498 + x2179 * x856) + x2530) + x862)
    )
    result[4, 0, 5] = numpy.sum(
        x171
        * (x0 * x2531 + x0 * x871 + x0 * (x0 * (x1500 + x2179 * x869) + x2531) + x875)
    )
    result[4, 0, 6] = numpy.sum(
        x824
        * (x0 * x2532 + x0 * x880 + x0 * (x0 * (x1502 * x2185 + x1503) + x2532) + x884)
    )
    result[4, 0, 7] = numpy.sum(
        x825
        * (x0 * x2533 + x0 * x889 + x0 * (x0 * (x1505 * x2185 + x1506) + x2533) + x893)
    )
    result[4, 0, 8] = numpy.sum(
        x825
        * (x0 * x2534 + x0 * x898 + x0 * (x0 * (x1508 * x2185 + x1509) + x2534) + x902)
    )
    result[4, 0, 9] = numpy.sum(
        x824
        * (x0 * x2535 + x0 * x907 + x0 * (x0 * (x1511 * x2185 + x1512) + x2535) + x911)
    )
    result[4, 0, 10] = numpy.sum(
        x1418
        * (x0 * x2536 + x0 * x913 + x0 * (x0 * (x104 * x2537 + x1514) + x2536) + x916)
    )
    result[4, 0, 11] = numpy.sum(
        x824
        * (x0 * x2538 + x0 * x919 + x0 * (x0 * (x104 * x2539 + x1516) + x2538) + x922)
    )
    result[4, 0, 12] = numpy.sum(
        x171
        * (x0 * x2540 + x0 * x924 + x0 * (x0 * (x104 * x2541 + x1518) + x2540) + x927)
    )
    result[4, 0, 13] = numpy.sum(
        x824
        * (x0 * x2542 + x0 * x929 + x0 * (x0 * (x104 * x2543 + x1520) + x2542) + x932)
    )
    result[4, 0, 14] = numpy.sum(
        x1418
        * (x0 * x2544 + x0 * x934 + x0 * (x0 * (x104 * x2545 + x1522) + x2544) + x937)
    )
    result[4, 1, 0] = numpy.sum(x809 * (x0 * x1994 + x0 * (x0 * x2546 + x1994) + x1996))
    result[4, 1, 1] = numpy.sum(x825 * (x0 * x1997 + x0 * (x0 * x2548 + x1997) + x1999))
    result[4, 1, 2] = numpy.sum(x825 * (x0 * x2000 + x0 * (x0 * x2549 + x2000) + x2002))
    result[4, 1, 3] = numpy.sum(x362 * (x0 * x2003 + x0 * (x0 * x2550 + x2003) + x2005))
    result[4, 1, 4] = numpy.sum(x864 * (x0 * x2006 + x0 * (x0 * x2551 + x2006) + x2008))
    result[4, 1, 5] = numpy.sum(x362 * (x0 * x2009 + x0 * (x0 * x2552 + x2009) + x2011))
    result[4, 1, 6] = numpy.sum(x825 * (x0 * x2012 + x0 * (x0 * x2553 + x2012) + x2014))
    result[4, 1, 7] = numpy.sum(x864 * (x0 * x2015 + x0 * (x0 * x2554 + x2015) + x2017))
    result[4, 1, 8] = numpy.sum(x864 * (x0 * x2018 + x0 * (x0 * x2555 + x2018) + x2020))
    result[4, 1, 9] = numpy.sum(x825 * (x0 * x2021 + x0 * (x0 * x2556 + x2021) + x2023))
    result[4, 1, 10] = numpy.sum(x809 * (x0 * x2024 + x0 * (x0 * x2557 + x2024) + x2026))
    result[4, 1, 11] = numpy.sum(x825 * (x0 * x2027 + x0 * (x0 * x2558 + x2027) + x2029))
    result[4, 1, 12] = numpy.sum(x362 * (x0 * x2030 + x0 * (x0 * x2559 + x2030) + x2032))
    result[4, 1, 13] = numpy.sum(x825 * (x0 * x2033 + x0 * (x0 * x2560 + x2033) + x2035))
    result[4, 1, 14] = numpy.sum(x809 * (x0 * x2036 + x0 * (x0 * x2561 + x2036) + x2038))
    result[4, 2, 0] = numpy.sum(x809 * (x0 * x1627 + x0 * (x0 * x2563 + x1627) + x1265))
    result[4, 2, 1] = numpy.sum(x825 * (x0 * x1630 + x0 * (x0 * x2566 + x1630) + x1274))
    result[4, 2, 2] = numpy.sum(x825 * (x0 * x1633 + x0 * (x0 * x2568 + x1633) + x1283))
    result[4, 2, 3] = numpy.sum(x362 * (x0 * x1636 + x0 * (x0 * x2570 + x1636) + x1291))
    result[4, 2, 4] = numpy.sum(x864 * (x0 * x1639 + x0 * (x0 * x2572 + x1639) + x1299))
    result[4, 2, 5] = numpy.sum(x362 * (x0 * x1642 + x0 * (x0 * x2574 + x1642) + x1307))
    result[4, 2, 6] = numpy.sum(x825 * (x0 * x1646 + x0 * (x0 * x2576 + x1646) + x1313))
    result[4, 2, 7] = numpy.sum(x864 * (x0 * x1650 + x0 * (x0 * x2578 + x1650) + x1319))
    result[4, 2, 8] = numpy.sum(x864 * (x0 * x1654 + x0 * (x0 * x2580 + x1654) + x1325))
    result[4, 2, 9] = numpy.sum(x825 * (x0 * x1658 + x0 * (x0 * x2582 + x1658) + x1331))
    result[4, 2, 10] = numpy.sum(x809 * (x0 * x1661 + x0 * (x0 * x2584 + x1661) + x1334))
    result[4, 2, 11] = numpy.sum(x825 * (x0 * x1664 + x0 * (x0 * x2586 + x1664) + x1337))
    result[4, 2, 12] = numpy.sum(x362 * (x0 * x1667 + x0 * (x0 * x2588 + x1667) + x1340))
    result[4, 2, 13] = numpy.sum(x825 * (x0 * x1670 + x0 * (x0 * x2590 + x1670) + x1343))
    result[4, 2, 14] = numpy.sum(x809 * (x0 * x1673 + x0 * (x0 * x2592 + x1673) + x1346))
    result[4, 3, 0] = numpy.sum(x809 * (x0 * x2594 + x2105))
    result[4, 3, 1] = numpy.sum(x825 * (x0 * x2596 + x2106))
    result[4, 3, 2] = numpy.sum(x825 * (x0 * x2598 + x2107))
    result[4, 3, 3] = numpy.sum(x362 * (x0 * x2600 + x2108))
    result[4, 3, 4] = numpy.sum(x864 * (x0 * x2602 + x2109))
    result[4, 3, 5] = numpy.sum(x362 * (x0 * x2604 + x2110))
    result[4, 3, 6] = numpy.sum(x825 * (x0 * x2606 + x2111))
    result[4, 3, 7] = numpy.sum(x864 * (x0 * x2608 + x2112))
    result[4, 3, 8] = numpy.sum(x864 * (x0 * x2610 + x2113))
    result[4, 3, 9] = numpy.sum(x825 * (x0 * x2612 + x2114))
    result[4, 3, 10] = numpy.sum(x809 * (x0 * x2614 + x2115))
    result[4, 3, 11] = numpy.sum(x825 * (x0 * x2616 + x2116))
    result[4, 3, 12] = numpy.sum(x362 * (x0 * x2618 + x2117))
    result[4, 3, 13] = numpy.sum(x825 * (x0 * x2620 + x2118))
    result[4, 3, 14] = numpy.sum(x809 * (x0 * x2622 + x2119))
    result[4, 4, 0] = numpy.sum(x1576 * (x0 * x2623 + x2120))
    result[4, 4, 1] = numpy.sum(x1580 * (x0 * x2624 + x2121))
    result[4, 4, 2] = numpy.sum(x1580 * (x0 * x2625 + x2122))
    result[4, 4, 3] = numpy.sum(x864 * (x0 * x2626 + x2123))
    result[4, 4, 4] = numpy.sum(x1590 * (x0 * x2627 + x2124))
    result[4, 4, 5] = numpy.sum(x864 * (x0 * x2628 + x2125))
    result[4, 4, 6] = numpy.sum(x1580 * (x0 * x2629 + x2126))
    result[4, 4, 7] = numpy.sum(x1590 * (x0 * x2630 + x2127))
    result[4, 4, 8] = numpy.sum(x1590 * (x0 * x2631 + x2128))
    result[4, 4, 9] = numpy.sum(x1580 * (x0 * x2632 + x2129))
    result[4, 4, 10] = numpy.sum(x1576 * (x0 * x2633 + x2130))
    result[4, 4, 11] = numpy.sum(x1580 * (x0 * x2634 + x2131))
    result[4, 4, 12] = numpy.sum(x864 * (x0 * x2635 + x2132))
    result[4, 4, 13] = numpy.sum(x1580 * (x0 * x2636 + x2133))
    result[4, 4, 14] = numpy.sum(x1576 * (x0 * x2637 + x2134))
    result[4, 5, 0] = numpy.sum(x809 * (x0 * x2640 + x1844))
    result[4, 5, 1] = numpy.sum(x825 * (x0 * x2643 + x1848))
    result[4, 5, 2] = numpy.sum(x825 * (x0 * x2646 + x1852))
    result[4, 5, 3] = numpy.sum(x362 * (x0 * x2649 + x1856))
    result[4, 5, 4] = numpy.sum(x864 * (x0 * x2652 + x1860))
    result[4, 5, 5] = numpy.sum(x362 * (x0 * x2655 + x1864))
    result[4, 5, 6] = numpy.sum(x825 * (x0 * x2658 + x1868))
    result[4, 5, 7] = numpy.sum(x864 * (x0 * x2661 + x1872))
    result[4, 5, 8] = numpy.sum(x864 * (x0 * x2664 + x1876))
    result[4, 5, 9] = numpy.sum(x825 * (x0 * x2667 + x1880))
    result[4, 5, 10] = numpy.sum(x809 * (x0 * x2670 + x1882))
    result[4, 5, 11] = numpy.sum(x825 * (x0 * x2673 + x1884))
    result[4, 5, 12] = numpy.sum(x362 * (x0 * x2676 + x1886))
    result[4, 5, 13] = numpy.sum(x825 * (x0 * x2679 + x1888))
    result[4, 5, 14] = numpy.sum(x809 * (x0 * x2682 + x1890))
    result[4, 6, 0] = numpy.sum(x1418 * (x21 * x2315 + x21 * x2593 + x21 * x2594 + x2416))
    result[4, 6, 1] = numpy.sum(x824 * (x21 * x2318 + x21 * x2595 + x21 * x2596 + x2418))
    result[4, 6, 2] = numpy.sum(x824 * (x21 * x2321 + x21 * x2597 + x21 * x2598 + x2420))
    result[4, 6, 3] = numpy.sum(x171 * (x21 * x2324 + x21 * x2599 + x21 * x2600 + x2422))
    result[4, 6, 4] = numpy.sum(x825 * (x21 * x2327 + x21 * x2601 + x21 * x2602 + x2424))
    result[4, 6, 5] = numpy.sum(x171 * (x21 * x2330 + x21 * x2603 + x21 * x2604 + x2426))
    result[4, 6, 6] = numpy.sum(x824 * (x21 * x2333 + x21 * x2605 + x21 * x2606 + x2428))
    result[4, 6, 7] = numpy.sum(x825 * (x21 * x2336 + x21 * x2607 + x21 * x2608 + x2430))
    result[4, 6, 8] = numpy.sum(x825 * (x21 * x2339 + x21 * x2609 + x21 * x2610 + x2432))
    result[4, 6, 9] = numpy.sum(x824 * (x21 * x2342 + x21 * x2611 + x21 * x2612 + x2434))
    result[4, 6, 10] = numpy.sum(
        x1418 * (x21 * x2345 + x21 * x2613 + x21 * x2614 + x2435)
    )
    result[4, 6, 11] = numpy.sum(x824 * (x21 * x2348 + x21 * x2615 + x21 * x2616 + x2436))
    result[4, 6, 12] = numpy.sum(x171 * (x21 * x2351 + x21 * x2617 + x21 * x2618 + x2437))
    result[4, 6, 13] = numpy.sum(x824 * (x21 * x2354 + x21 * x2619 + x21 * x2620 + x2438))
    result[4, 6, 14] = numpy.sum(
        x1418 * (x21 * x2357 + x21 * x2621 + x21 * x2622 + x2439)
    )
    result[4, 7, 0] = numpy.sum(x809 * (x21 * x2361 + x21 * x2623 + x2442))
    result[4, 7, 1] = numpy.sum(x825 * (x21 * x2364 + x21 * x2624 + x2446))
    result[4, 7, 2] = numpy.sum(x825 * (x21 * x2367 + x21 * x2625 + x2449))
    result[4, 7, 3] = numpy.sum(x362 * (x21 * x2370 + x21 * x2626 + x2452))
    result[4, 7, 4] = numpy.sum(x864 * (x21 * x2373 + x21 * x2627 + x2456))
    result[4, 7, 5] = numpy.sum(x362 * (x21 * x2376 + x21 * x2628 + x2459))
    result[4, 7, 6] = numpy.sum(x825 * (x21 * x2379 + x21 * x2629 + x2462))
    result[4, 7, 7] = numpy.sum(x864 * (x21 * x2382 + x21 * x2630 + x2465))
    result[4, 7, 8] = numpy.sum(x864 * (x21 * x2385 + x21 * x2631 + x2469))
    result[4, 7, 9] = numpy.sum(x825 * (x21 * x2388 + x21 * x2632 + x2472))
    result[4, 7, 10] = numpy.sum(x809 * (x21 * x2391 + x21 * x2633 + x2474))
    result[4, 7, 11] = numpy.sum(x825 * (x21 * x2394 + x21 * x2634 + x2476))
    result[4, 7, 12] = numpy.sum(x362 * (x21 * x2397 + x21 * x2635 + x2478))
    result[4, 7, 13] = numpy.sum(x825 * (x21 * x2400 + x21 * x2636 + x2481))
    result[4, 7, 14] = numpy.sum(x809 * (x21 * x2403 + x21 * x2637 + x2483))
    result[4, 8, 0] = numpy.sum(x809 * (x21 * x2640 + x2486))
    result[4, 8, 1] = numpy.sum(x825 * (x21 * x2643 + x2489))
    result[4, 8, 2] = numpy.sum(x825 * (x21 * x2646 + x2492))
    result[4, 8, 3] = numpy.sum(x362 * (x21 * x2649 + x2495))
    result[4, 8, 4] = numpy.sum(x864 * (x21 * x2652 + x2498))
    result[4, 8, 5] = numpy.sum(x362 * (x21 * x2655 + x2501))
    result[4, 8, 6] = numpy.sum(x825 * (x21 * x2658 + x2504))
    result[4, 8, 7] = numpy.sum(x864 * (x21 * x2661 + x2507))
    result[4, 8, 8] = numpy.sum(x864 * (x21 * x2664 + x2510))
    result[4, 8, 9] = numpy.sum(x825 * (x21 * x2667 + x2513))
    result[4, 8, 10] = numpy.sum(x809 * (x21 * x2670 + x2515))
    result[4, 8, 11] = numpy.sum(x825 * (x21 * x2673 + x2517))
    result[4, 8, 12] = numpy.sum(x362 * (x21 * x2676 + x2519))
    result[4, 8, 13] = numpy.sum(x825 * (x21 * x2679 + x2521))
    result[4, 8, 14] = numpy.sum(x809 * (x21 * x2682 + x2523))
    result[4, 9, 0] = numpy.sum(x1418 * (x22 * x2640 + x2684))
    result[4, 9, 1] = numpy.sum(x824 * (x22 * x2643 + x2686))
    result[4, 9, 2] = numpy.sum(x824 * (x22 * x2646 + x2688))
    result[4, 9, 3] = numpy.sum(x171 * (x22 * x2649 + x2690))
    result[4, 9, 4] = numpy.sum(x825 * (x22 * x2652 + x2692))
    result[4, 9, 5] = numpy.sum(x171 * (x22 * x2655 + x2694))
    result[4, 9, 6] = numpy.sum(x824 * (x22 * x2658 + x2696))
    result[4, 9, 7] = numpy.sum(x825 * (x22 * x2661 + x2698))
    result[4, 9, 8] = numpy.sum(x825 * (x22 * x2664 + x2700))
    result[4, 9, 9] = numpy.sum(x824 * (x22 * x2667 + x2702))
    result[4, 9, 10] = numpy.sum(x1418 * (x22 * x2670 + x2703))
    result[4, 9, 11] = numpy.sum(x824 * (x22 * x2673 + x2704))
    result[4, 9, 12] = numpy.sum(x171 * (x22 * x2676 + x2705))
    result[4, 9, 13] = numpy.sum(x824 * (x22 * x2679 + x2706))
    result[4, 9, 14] = numpy.sum(x1418 * (x22 * x2682 + x2707))
    result[5, 0, 0] = numpy.sum(
        x117
        * (x0 * x2708 + x0 * x963 + x0 * (x0 * (x1959 + x2171 * x2709) + x2708) + x973)
    )
    result[5, 0, 1] = numpy.sum(
        x134
        * (x0 * x2710 + x0 * x980 + x0 * (x0 * (x1961 + x2527 * x2711) + x2710) + x983)
    )
    result[5, 0, 2] = numpy.sum(
        x134
        * (x0 * x2712 + x0 * x993 + x0 * (x0 * (x1963 + x2527 * x988) + x2712) + x998)
    )
    result[5, 0, 3] = numpy.sum(
        x159
        * (x0 * x1003 + x0 * x2713 + x0 * (x0 * (x1965 + x2709 * x2715) + x2713) + x1006)
    )
    result[5, 0, 4] = numpy.sum(
        x171
        * (x0 * x1011 + x0 * x2716 + x0 * (x0 * (x1967 + x2717 * x2718) + x2716) + x1014)
    )
    result[5, 0, 5] = numpy.sum(
        x159
        * (x0 * x1022 + x0 * x2719 + x0 * (x0 * (x1019 * x2179 + x1969) + x2719) + x1027)
    )
    result[5, 0, 6] = numpy.sum(
        x134
        * (x0 * x1029 + x0 * x2720 + x0 * (x0 * (x1972 + x2709 * x2721) + x2720) + x1032)
    )
    result[5, 0, 7] = numpy.sum(
        x171
        * (x0 * x1035 + x0 * x2722 + x0 * (x0 * (x1975 + x2718 * x2724) + x2722) + x1038)
    )
    result[5, 0, 8] = numpy.sum(
        x171
        * (x0 * x1040 + x0 * x2725 + x0 * (x0 * (x0 * x2726 + x1978) + x2725) + x1043)
    )
    result[5, 0, 9] = numpy.sum(
        x134
        * (x0 * x1047 + x0 * x2727 + x0 * (x0 * (x1980 * x2185 + x1982) + x2727) + x1052)
    )
    result[5, 0, 10] = numpy.sum(
        x117
        * (x0 * x1054 + x0 * x2728 + x0 * (x0 * (x1984 + x207 * x2709) + x2728) + x1057)
    )
    result[5, 0, 11] = numpy.sum(
        x134
        * (x0 * x1059 + x0 * x2729 + x0 * (x0 * (x0 * x2730 + x1986) + x2729) + x1062)
    )
    result[5, 0, 12] = numpy.sum(
        x159
        * (x0 * x1064 + x0 * x2731 + x0 * (x0 * (x0 * x2732 + x1988) + x2731) + x1067)
    )
    result[5, 0, 13] = numpy.sum(
        x134
        * (x0 * x1069 + x0 * x2733 + x0 * (x0 * (x0 * x2734 + x1990) + x2733) + x1072)
    )
    result[5, 0, 14] = numpy.sum(
        x117
        * (x0 * x1074 + x0 * x2735 + x0 * (x0 * (x104 * x2736 + x1992) + x2735) + x1077)
    )
    result[5, 1, 0] = numpy.sum(
        x289 * (x0 * x2737 + x0 * (x0 * x2739 + x2737) + x1264 + x21 * x963)
    )
    result[5, 1, 1] = numpy.sum(
        x171 * (x0 * x2740 + x0 * (x0 * x2741 + x2740) + x1273 + x21 * x980)
    )
    result[5, 1, 2] = numpy.sum(
        x171 * (x0 * x2742 + x0 * (x0 * x2743 + x2742) + x1282 + x21 * x993)
    )
    result[5, 1, 3] = numpy.sum(
        x343 * (x0 * x2744 + x0 * (x0 * x2745 + x2744) + x1003 * x21 + x1290)
    )
    result[5, 1, 4] = numpy.sum(
        x362 * (x0 * x2746 + x0 * (x0 * x2748 + x2746) + x1011 * x21 + x1298)
    )
    result[5, 1, 5] = numpy.sum(
        x343 * (x0 * x2749 + x0 * (x0 * x2750 + x2749) + x1022 * x21 + x1306)
    )
    result[5, 1, 6] = numpy.sum(
        x171 * (x0 * x2751 + x0 * (x0 * x2752 + x2751) + x1029 * x21 + x1312)
    )
    result[5, 1, 7] = numpy.sum(
        x362 * (x0 * x2753 + x0 * (x0 * x2754 + x2753) + x1035 * x21 + x1318)
    )
    result[5, 1, 8] = numpy.sum(
        x362 * (x0 * x2755 + x0 * (x0 * x2756 + x2755) + x1040 * x21 + x1324)
    )
    result[5, 1, 9] = numpy.sum(
        x171 * (x0 * x2757 + x0 * (x0 * x2758 + x2757) + x1047 * x21 + x1330)
    )
    result[5, 1, 10] = numpy.sum(
        x289 * (x0 * x2759 + x0 * (x0 * x2760 + x2759) + x1054 * x21 + x1333)
    )
    result[5, 1, 11] = numpy.sum(
        x171 * (x0 * x2761 + x0 * (x0 * x2762 + x2761) + x1059 * x21 + x1336)
    )
    result[5, 1, 12] = numpy.sum(
        x343 * (x0 * x2763 + x0 * (x0 * x2764 + x2763) + x1064 * x21 + x1339)
    )
    result[5, 1, 13] = numpy.sum(
        x171 * (x0 * x2765 + x0 * (x0 * x2766 + x2765) + x1069 * x21 + x1342)
    )
    result[5, 1, 14] = numpy.sum(
        x289 * (x0 * x2767 + x0 * (x0 * x2768 + x2767) + x1074 * x21 + x1345)
    )
    result[5, 2, 0] = numpy.sum(x289 * (x0 * x2055 + x0 * (x0 * x2771 + x2055) + x1364))
    result[5, 2, 1] = numpy.sum(x171 * (x0 * x2058 + x0 * (x0 * x2773 + x2058) + x1369))
    result[5, 2, 2] = numpy.sum(x171 * (x0 * x2061 + x0 * (x0 * x2775 + x2061) + x1377))
    result[5, 2, 3] = numpy.sum(x343 * (x0 * x2064 + x0 * (x0 * x2777 + x2064) + x1381))
    result[5, 2, 4] = numpy.sum(x362 * (x0 * x2068 + x0 * (x0 * x2780 + x2068) + x1385))
    result[5, 2, 5] = numpy.sum(x343 * (x0 * x2071 + x0 * (x0 * x2782 + x2071) + x1392))
    result[5, 2, 6] = numpy.sum(x171 * (x0 * x2075 + x0 * (x0 * x2784 + x2075) + x1394))
    result[5, 2, 7] = numpy.sum(x362 * (x0 * x2079 + x0 * (x0 * x2786 + x2079) + x1396))
    result[5, 2, 8] = numpy.sum(x362 * (x0 * x2083 + x0 * (x0 * x2788 + x2083) + x1398))
    result[5, 2, 9] = numpy.sum(x171 * (x0 * x2088 + x0 * (x0 * x2790 + x2088) + x1402))
    result[5, 2, 10] = numpy.sum(x289 * (x0 * x2091 + x0 * (x0 * x2792 + x2091) + x1404))
    result[5, 2, 11] = numpy.sum(x171 * (x0 * x2094 + x0 * (x0 * x2794 + x2094) + x1406))
    result[5, 2, 12] = numpy.sum(x343 * (x0 * x2097 + x0 * (x0 * x2796 + x2097) + x1408))
    result[5, 2, 13] = numpy.sum(x171 * (x0 * x2100 + x0 * (x0 * x2798 + x2100) + x1410))
    result[5, 2, 14] = numpy.sum(x289 * (x0 * x2103 + x0 * (x0 * x2800 + x2103) + x1412))
    result[5, 3, 0] = numpy.sum(x289 * (x0 * x2802 + x1626 * x21 + x1776 + x21 * x2737))
    result[5, 3, 1] = numpy.sum(x171 * (x0 * x2804 + x1629 * x21 + x1781 + x21 * x2740))
    result[5, 3, 2] = numpy.sum(x171 * (x0 * x2806 + x1632 * x21 + x1786 + x21 * x2742))
    result[5, 3, 3] = numpy.sum(x343 * (x0 * x2808 + x1635 * x21 + x1791 + x21 * x2744))
    result[5, 3, 4] = numpy.sum(x362 * (x0 * x2810 + x1638 * x21 + x1796 + x21 * x2746))
    result[5, 3, 5] = numpy.sum(x343 * (x0 * x2812 + x1641 * x21 + x1801 + x21 * x2749))
    result[5, 3, 6] = numpy.sum(x171 * (x0 * x2814 + x1645 * x21 + x1806 + x21 * x2751))
    result[5, 3, 7] = numpy.sum(x362 * (x0 * x2816 + x1649 * x21 + x1811 + x21 * x2753))
    result[5, 3, 8] = numpy.sum(x362 * (x0 * x2818 + x1653 * x21 + x1816 + x21 * x2755))
    result[5, 3, 9] = numpy.sum(x171 * (x0 * x2820 + x1657 * x21 + x1821 + x21 * x2757))
    result[5, 3, 10] = numpy.sum(x289 * (x0 * x2822 + x1660 * x21 + x1824 + x21 * x2759))
    result[5, 3, 11] = numpy.sum(x171 * (x0 * x2824 + x1663 * x21 + x1827 + x21 * x2761))
    result[5, 3, 12] = numpy.sum(x343 * (x0 * x2826 + x1666 * x21 + x1830 + x21 * x2763))
    result[5, 3, 13] = numpy.sum(x171 * (x0 * x2828 + x1669 * x21 + x1833 + x21 * x2765))
    result[5, 3, 14] = numpy.sum(x289 * (x0 * x2830 + x1672 * x21 + x1836 + x21 * x2767))
    result[5, 4, 0] = numpy.sum(x809 * (x0 * x2831 + x1843 + x2055 * x21))
    result[5, 4, 1] = numpy.sum(x825 * (x0 * x2832 + x1847 + x2058 * x21))
    result[5, 4, 2] = numpy.sum(x825 * (x0 * x2833 + x1851 + x2061 * x21))
    result[5, 4, 3] = numpy.sum(x362 * (x0 * x2834 + x1855 + x2064 * x21))
    result[5, 4, 4] = numpy.sum(x864 * (x0 * x2835 + x1859 + x2068 * x21))
    result[5, 4, 5] = numpy.sum(x362 * (x0 * x2836 + x1863 + x2071 * x21))
    result[5, 4, 6] = numpy.sum(x825 * (x0 * x2837 + x1867 + x2075 * x21))
    result[5, 4, 7] = numpy.sum(x864 * (x0 * x2838 + x1871 + x2079 * x21))
    result[5, 4, 8] = numpy.sum(x864 * (x0 * x2839 + x1875 + x2083 * x21))
    result[5, 4, 9] = numpy.sum(x825 * (x0 * x2840 + x1879 + x2088 * x21))
    result[5, 4, 10] = numpy.sum(x809 * (x0 * x2841 + x1881 + x2091 * x21))
    result[5, 4, 11] = numpy.sum(x825 * (x0 * x2842 + x1883 + x2094 * x21))
    result[5, 4, 12] = numpy.sum(x362 * (x0 * x2843 + x1885 + x2097 * x21))
    result[5, 4, 13] = numpy.sum(x825 * (x0 * x2844 + x1887 + x21 * x2100))
    result[5, 4, 14] = numpy.sum(x809 * (x0 * x2845 + x1889 + x21 * x2103))
    result[5, 5, 0] = numpy.sum(x289 * (x0 * x2848 + x2140))
    result[5, 5, 1] = numpy.sum(x171 * (x0 * x2851 + x2142))
    result[5, 5, 2] = numpy.sum(x171 * (x0 * x2854 + x2146))
    result[5, 5, 3] = numpy.sum(x343 * (x0 * x2857 + x2148))
    result[5, 5, 4] = numpy.sum(x362 * (x0 * x2860 + x2150))
    result[5, 5, 5] = numpy.sum(x343 * (x0 * x2863 + x2154))
    result[5, 5, 6] = numpy.sum(x171 * (x0 * x2866 + x2156))
    result[5, 5, 7] = numpy.sum(x362 * (x0 * x2869 + x2158))
    result[5, 5, 8] = numpy.sum(x362 * (x0 * x2872 + x2160))
    result[5, 5, 9] = numpy.sum(x171 * (x0 * x2875 + x2164))
    result[5, 5, 10] = numpy.sum(x289 * (x0 * x2878 + x2165))
    result[5, 5, 11] = numpy.sum(x171 * (x0 * x2881 + x2166))
    result[5, 5, 12] = numpy.sum(x343 * (x0 * x2884 + x2167))
    result[5, 5, 13] = numpy.sum(x171 * (x0 * x2887 + x2168))
    result[5, 5, 14] = numpy.sum(x289 * (x0 * x2890 + x2169))
    result[5, 6, 0] = numpy.sum(x117 * (x21 * x2360 + x21 * x2801 + x21 * x2802 + x2441))
    result[5, 6, 1] = numpy.sum(x134 * (x21 * x2363 + x21 * x2803 + x21 * x2804 + x2445))
    result[5, 6, 2] = numpy.sum(x134 * (x21 * x2366 + x21 * x2805 + x21 * x2806 + x2448))
    result[5, 6, 3] = numpy.sum(x159 * (x21 * x2369 + x21 * x2807 + x21 * x2808 + x2451))
    result[5, 6, 4] = numpy.sum(x171 * (x21 * x2372 + x21 * x2809 + x21 * x2810 + x2455))
    result[5, 6, 5] = numpy.sum(x159 * (x21 * x2375 + x21 * x2811 + x21 * x2812 + x2458))
    result[5, 6, 6] = numpy.sum(x134 * (x21 * x2378 + x21 * x2813 + x21 * x2814 + x2461))
    result[5, 6, 7] = numpy.sum(x171 * (x21 * x2381 + x21 * x2815 + x21 * x2816 + x2464))
    result[5, 6, 8] = numpy.sum(x171 * (x21 * x2384 + x21 * x2817 + x21 * x2818 + x2468))
    result[5, 6, 9] = numpy.sum(x134 * (x21 * x2387 + x21 * x2819 + x21 * x2820 + x2471))
    result[5, 6, 10] = numpy.sum(x117 * (x21 * x2390 + x21 * x2821 + x21 * x2822 + x2473))
    result[5, 6, 11] = numpy.sum(x134 * (x21 * x2393 + x21 * x2823 + x21 * x2824 + x2475))
    result[5, 6, 12] = numpy.sum(x159 * (x21 * x2396 + x21 * x2825 + x21 * x2826 + x2477))
    result[5, 6, 13] = numpy.sum(x134 * (x21 * x2399 + x21 * x2827 + x21 * x2828 + x2480))
    result[5, 6, 14] = numpy.sum(x117 * (x21 * x2402 + x21 * x2829 + x21 * x2830 + x2482))
    result[5, 7, 0] = numpy.sum(x289 * (x21 * x2639 + x21 * x2831 + x2485))
    result[5, 7, 1] = numpy.sum(x171 * (x21 * x2642 + x21 * x2832 + x2488))
    result[5, 7, 2] = numpy.sum(x171 * (x21 * x2645 + x21 * x2833 + x2491))
    result[5, 7, 3] = numpy.sum(x343 * (x21 * x2648 + x21 * x2834 + x2494))
    result[5, 7, 4] = numpy.sum(x362 * (x21 * x2651 + x21 * x2835 + x2497))
    result[5, 7, 5] = numpy.sum(x343 * (x21 * x2654 + x21 * x2836 + x2500))
    result[5, 7, 6] = numpy.sum(x171 * (x21 * x2657 + x21 * x2837 + x2503))
    result[5, 7, 7] = numpy.sum(x362 * (x21 * x2660 + x21 * x2838 + x2506))
    result[5, 7, 8] = numpy.sum(x362 * (x21 * x2663 + x21 * x2839 + x2509))
    result[5, 7, 9] = numpy.sum(x171 * (x21 * x2666 + x21 * x2840 + x2512))
    result[5, 7, 10] = numpy.sum(x289 * (x21 * x2669 + x21 * x2841 + x2514))
    result[5, 7, 11] = numpy.sum(x171 * (x21 * x2672 + x21 * x2842 + x2516))
    result[5, 7, 12] = numpy.sum(x343 * (x21 * x2675 + x21 * x2843 + x2518))
    result[5, 7, 13] = numpy.sum(x171 * (x21 * x2678 + x21 * x2844 + x2520))
    result[5, 7, 14] = numpy.sum(x289 * (x21 * x2681 + x21 * x2845 + x2522))
    result[5, 8, 0] = numpy.sum(x289 * (x21 * x2848 + x2684))
    result[5, 8, 1] = numpy.sum(x171 * (x21 * x2851 + x2686))
    result[5, 8, 2] = numpy.sum(x171 * (x21 * x2854 + x2688))
    result[5, 8, 3] = numpy.sum(x343 * (x21 * x2857 + x2690))
    result[5, 8, 4] = numpy.sum(x362 * (x21 * x2860 + x2692))
    result[5, 8, 5] = numpy.sum(x343 * (x21 * x2863 + x2694))
    result[5, 8, 6] = numpy.sum(x171 * (x21 * x2866 + x2696))
    result[5, 8, 7] = numpy.sum(x362 * (x21 * x2869 + x2698))
    result[5, 8, 8] = numpy.sum(x362 * (x21 * x2872 + x2700))
    result[5, 8, 9] = numpy.sum(x171 * (x21 * x2875 + x2702))
    result[5, 8, 10] = numpy.sum(x289 * (x21 * x2878 + x2703))
    result[5, 8, 11] = numpy.sum(x171 * (x21 * x2881 + x2704))
    result[5, 8, 12] = numpy.sum(x343 * (x21 * x2884 + x2705))
    result[5, 8, 13] = numpy.sum(x171 * (x21 * x2887 + x2706))
    result[5, 8, 14] = numpy.sum(x289 * (x21 * x2890 + x2707))
    result[5, 9, 0] = numpy.sum(
        x117 * (x2171 * x2891 + x22 * x2846 + x22 * x2847 + x22 * x2848)
    )
    result[5, 9, 1] = numpy.sum(
        x134 * (x2135 * x2849 + x22 * x2850 + x22 * x2851 + x2772 * x2891)
    )
    result[5, 9, 2] = numpy.sum(
        x134 * (x2174 * x2892 + x22 * x2852 + x22 * x2853 + x22 * x2854)
    )
    result[5, 9, 3] = numpy.sum(
        x159 * (x22 * x2855 + x22 * x2856 + x22 * x2857 + x2715 * x2891)
    )
    result[5, 9, 4] = numpy.sum(
        x171 * (x22 * x2858 + x22 * x2859 + x22 * x2860 + x2717 * x2892)
    )
    result[5, 9, 5] = numpy.sum(
        x159 * (x1420 * x2893 + x22 * x2861 + x22 * x2862 + x22 * x2863)
    )
    result[5, 9, 6] = numpy.sum(
        x134 * (x22 * x2864 + x22 * x2865 + x22 * x2866 + x2721 * x2891)
    )
    result[5, 9, 7] = numpy.sum(
        x171 * (x22 * x2867 + x22 * x2868 + x22 * x2869 + x2724 * x2892)
    )
    result[5, 9, 8] = numpy.sum(
        x171 * (x1901 * x2893 + x22 * x2870 + x22 * x2871 + x22 * x2872)
    )
    result[5, 9, 9] = numpy.sum(
        x134 * (x22 * x2873 + x22 * x2874 + x22 * x2875 + x2894 * x307)
    )
    result[5, 9, 10] = numpy.sum(
        x117 * (x207 * x2891 + x22 * x2876 + x22 * x2877 + x22 * x2878)
    )
    result[5, 9, 11] = numpy.sum(
        x134 * (x212 * x2892 + x22 * x2879 + x22 * x2880 + x22 * x2881)
    )
    result[5, 9, 12] = numpy.sum(
        x159 * (x188 * x2893 + x22 * x2882 + x22 * x2883 + x22 * x2884)
    )
    result[5, 9, 13] = numpy.sum(
        x134 * (x160 * x2894 + x22 * x2885 + x22 * x2886 + x22 * x2887)
    )
    result[5, 9, 14] = numpy.sum(
        x117
        * (x22 * x2888 + x22 * x2889 + x22 * x2890 + x72 * (x135 * x2894 + 5.0 * x2162))
    )
    return result


def int3c2e3d_sph_300(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fs|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 1, 1), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - A[0]
    x4 = 0.5 / (ax + bx)
    x5 = -x2 - C[0]
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = -x1 * (ax * A[2] + bx * B[2])
    x9 = -x8 - C[2]
    x10 = cx + x0
    x11 = cx / x10
    x12 = x0 * x11 * (x5**2 + x7**2 + x9**2)
    x13 = boys(1, x12)
    x14 = 17.49341832762486
    x15 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x16 = 2.0 * x1 * x10 ** (-1.5) * x14 * x15
    x17 = x13 * x16
    x18 = cx ** (-1.0)
    x19 = x10 ** (-0.5)
    x20 = boys(0, x12)
    x21 = x4 * (2.0 * x1 * x14 * x15 * x18 * x19 * x20 - x17)
    x22 = -2.0 * x1 * x14 * x15 * x18 * x19 * x20 * x3 + x17 * x5
    x23 = boys(2, x12)
    x24 = x16 * x23
    x25 = 2.0 * x1 * x13 * x14 * x15 * x18 * x19 * x3 - x24 * x5
    x26 = x11 * x25
    x27 = x4 * (2.0 * x1 * x13 * x14 * x15 * x18 * x19 - x24)
    x28 = x16 * boys(3, x12)
    x29 = x11 * x5
    x30 = da * db * dc
    x31 = 0.2581988897471611 * x30
    x32 = -x6 - A[1]
    x33 = 2.0 * x1 * x13 * x14 * x15 * x18 * x19 * x32 - x24 * x7
    x34 = x11 * x33
    x35 = -2.0 * x1 * x14 * x15 * x18 * x19 * x20 * x32 + x17 * x7
    x36 = -x4 * (x34 + x35)
    x37 = -x35
    x38 = 2.0 * x1 * x14 * x15 * x18 * x19 * x23 * x32 - x28 * x7
    x39 = 0.5773502691896258 * x30
    x40 = -x8 - A[2]
    x41 = 2.0 * x1 * x13 * x14 * x15 * x18 * x19 * x40 - x24 * x9
    x42 = x11 * x41
    x43 = -2.0 * x1 * x14 * x15 * x18 * x19 * x20 * x40 + x17 * x9
    x44 = -x4 * (x42 + x43)
    x45 = -x43
    x46 = 2.0 * x1 * x14 * x15 * x18 * x19 * x23 * x40 - x28 * x9
    x47 = x21 + x32 * x37 - x34 * x7
    x48 = x11 * x7
    x49 = x27 + x32 * x33 - x38 * x48
    x50 = x32 * x45 - x42 * x7
    x51 = x32 * x41 - x46 * x48
    x52 = x21 + x40 * x45 - x42 * x9
    x53 = x11 * x9
    x54 = x27 + x40 * x41 - x46 * x53

    # 10 item(s)
    result[0, 0, 0] = numpy.sum(
        -x31
        * (
            x29
            * (
                x25 * x3
                + x27
                - x29 * (2.0 * x1 * x14 * x15 * x18 * x19 * x23 * x3 - x28 * x5)
            )
            + x3 * (-x21 + x22 * x3 + x26 * x5)
            + 2.0 * x4 * (x22 + x26)
        )
    )
    result[1, 0, 0] = numpy.sum(
        x39 * (x29 * (x29 * x38 - x3 * x33) + x3 * (x3 * x37 - x34 * x5) + x36)
    )
    result[2, 0, 0] = numpy.sum(
        x39 * (x29 * (x29 * x46 - x3 * x41) + x3 * (x3 * x45 - x42 * x5) + x44)
    )
    result[3, 0, 0] = numpy.sum(x39 * (-x29 * x49 + x3 * x47))
    result[4, 0, 0] = numpy.sum(x30 * (-x29 * x51 + x3 * x50))
    result[5, 0, 0] = numpy.sum(x39 * (-x29 * x54 + x3 * x52))
    result[6, 0, 0] = numpy.sum(x31 * (x32 * x47 + 2.0 * x36 - x48 * x49))
    result[7, 0, 0] = numpy.sum(x39 * (x32 * x50 + x44 - x48 * x51))
    result[8, 0, 0] = numpy.sum(x39 * (x32 * x52 - x48 * x54))
    result[9, 0, 0] = numpy.sum(x31 * (x40 * x52 + 2.0 * x44 - x53 * x54))
    return result


def int3c2e3d_sph_301(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fs|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 1, 3), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = -x1 * (ax * A[2] + bx * B[2])
    x9 = -x8 - C[2]
    x10 = cx + x0
    x11 = x10 ** (-1.0)
    x12 = cx * x11
    x13 = x0 * x12 * (x3**2 + x7**2 + x9**2)
    x14 = boys(2, x13)
    x15 = 17.49341832762486
    x16 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x17 = 2.0 * x1 * x10 ** (-1.5) * x15 * x16
    x18 = x14 * x17
    x19 = cx ** (-1.0)
    x20 = x10 ** (-0.5)
    x21 = boys(1, x13)
    x22 = x5 * (2.0 * x1 * x15 * x16 * x19 * x20 * x21 - x18)
    x23 = -2.0 * x1 * x15 * x16 * x19 * x20 * x21 * x4 + x18 * x3
    x24 = boys(3, x13)
    x25 = x17 * x24
    x26 = 2.0 * x1 * x14 * x15 * x16 * x19 * x20 * x4 - x25 * x3
    x27 = x12 * x26
    x28 = x22 - x23 * x4 - x27 * x3
    x29 = x5 * (2.0 * x1 * x14 * x15 * x16 * x19 * x20 - x25)
    x30 = x17 * boys(4, x13)
    x31 = x12 * x3
    x32 = (
        x28 * x4
        - x31
        * (
            x26 * x4
            + x29
            - x31 * (2.0 * x1 * x15 * x16 * x19 * x20 * x24 * x4 - x3 * x30)
        )
        - 2.0 * x5 * (x23 + x27)
    )
    x33 = x28 * x5
    x34 = da * db * dc * x0 * x11
    x35 = 0.2581988897471611 * x34
    x36 = x32 * x35
    x37 = -x6 - A[1]
    x38 = 2.0 * x1 * x14 * x15 * x16 * x19 * x20 * x37 - x25 * x7
    x39 = x12 * x38
    x40 = -2.0 * x1 * x15 * x16 * x19 * x20 * x21 * x37 + x18 * x7
    x41 = -x5 * (x39 + x40)
    x42 = -x40
    x43 = -x3 * x39 + x4 * x42
    x44 = 2.0 * x1 * x15 * x16 * x19 * x20 * x24 * x37 - x30 * x7
    x45 = x31 * (x31 * x44 - x38 * x4) + x4 * x43 + x41
    x46 = x43 * x5
    x47 = 2.0 * x46
    x48 = 0.5773502691896258 * x34
    x49 = x48 * x9
    x50 = -x8 - A[2]
    x51 = 2.0 * x1 * x14 * x15 * x16 * x19 * x20 * x50 - x25 * x9
    x52 = x12 * x51
    x53 = -2.0 * x1 * x15 * x16 * x19 * x20 * x21 * x50 + x18 * x9
    x54 = -x5 * (x52 + x53)
    x55 = -x53
    x56 = -x3 * x52 + x4 * x55
    x57 = 2.0 * x1 * x15 * x16 * x19 * x20 * x24 * x50 - x30 * x9
    x58 = x31 * (x31 * x57 - x4 * x51) + x4 * x56 + x54
    x59 = x5 * x56
    x60 = 2.0 * x59
    x61 = x48 * x7
    x62 = x22 + x37 * x42 - x39 * x7
    x63 = x5 * x62
    x64 = x12 * x7
    x65 = x29 + x37 * x38 - x44 * x64
    x66 = -x31 * x65 + x4 * x62
    x67 = x37 * x55 - x52 * x7
    x68 = x5 * x67
    x69 = x37 * x51 - x57 * x64
    x70 = -x31 * x69 + x4 * x67
    x71 = x22 + x50 * x55 - x52 * x9
    x72 = x5 * x71
    x73 = x12 * x9
    x74 = x29 + x50 * x51 - x57 * x73
    x75 = -x31 * x74 + x4 * x71
    x76 = x37 * x62 + 2.0 * x41 - x64 * x65
    x77 = x35 * x76
    x78 = x37 * x67 + x54 - x64 * x69
    x79 = x3 * x48
    x80 = 2.0 * x68
    x81 = x37 * x71 - x64 * x74
    x82 = x50 * x71 + 2.0 * x54 - x73 * x74
    x83 = x35 * x82

    # 30 item(s)
    result[0, 0, 0] = numpy.sum(x35 * (x3 * x32 + 3.0 * x33))
    result[0, 0, 1] = numpy.sum(x36 * x7)
    result[0, 0, 2] = numpy.sum(x36 * x9)
    result[1, 0, 0] = numpy.sum(x48 * (x3 * x45 + x47))
    result[1, 0, 1] = numpy.sum(x48 * (x33 + x45 * x7))
    result[1, 0, 2] = numpy.sum(x45 * x49)
    result[2, 0, 0] = numpy.sum(x48 * (x3 * x58 + x60))
    result[2, 0, 1] = numpy.sum(x58 * x61)
    result[2, 0, 2] = numpy.sum(x48 * (x33 + x58 * x9))
    result[3, 0, 0] = numpy.sum(x48 * (x3 * x66 + x63))
    result[3, 0, 1] = numpy.sum(x48 * (x47 + x66 * x7))
    result[3, 0, 2] = numpy.sum(x49 * x66)
    result[4, 0, 0] = numpy.sum(x34 * (x3 * x70 + x68))
    result[4, 0, 1] = numpy.sum(x34 * (x59 + x7 * x70))
    result[4, 0, 2] = numpy.sum(x34 * (x46 + x70 * x9))
    result[5, 0, 0] = numpy.sum(x48 * (x3 * x75 + x72))
    result[5, 0, 1] = numpy.sum(x61 * x75)
    result[5, 0, 2] = numpy.sum(x48 * (x60 + x75 * x9))
    result[6, 0, 0] = numpy.sum(x3 * x77)
    result[6, 0, 1] = numpy.sum(x35 * (3.0 * x63 + x7 * x76))
    result[6, 0, 2] = numpy.sum(x77 * x9)
    result[7, 0, 0] = numpy.sum(x78 * x79)
    result[7, 0, 1] = numpy.sum(x48 * (x7 * x78 + x80))
    result[7, 0, 2] = numpy.sum(x48 * (x63 + x78 * x9))
    result[8, 0, 0] = numpy.sum(x79 * x81)
    result[8, 0, 1] = numpy.sum(x48 * (x7 * x81 + x72))
    result[8, 0, 2] = numpy.sum(x48 * (x80 + x81 * x9))
    result[9, 0, 0] = numpy.sum(x3 * x83)
    result[9, 0, 1] = numpy.sum(x7 * x83)
    result[9, 0, 2] = numpy.sum(x35 * (3.0 * x72 + x82 * x9))
    return result


def int3c2e3d_sph_302(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fs|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 1, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = x3**2
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x0
    x14 = x13 ** (-1.0)
    x15 = cx * x14
    x16 = x0 * x15 * (x12 + x6 + x9)
    x17 = boys(3, x16)
    x18 = 17.49341832762486
    x19 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x20 = 2.0 * x1 * x13 ** (-1.5) * x18 * x19
    x21 = x17 * x20
    x22 = cx ** (-1.0)
    x23 = x13 ** (-0.5)
    x24 = boys(2, x16)
    x25 = x5 * (2.0 * x1 * x18 * x19 * x22 * x23 * x24 - x21)
    x26 = -2.0 * x1 * x18 * x19 * x22 * x23 * x24 * x4 + x21 * x3
    x27 = -x26
    x28 = boys(4, x16)
    x29 = x20 * x28
    x30 = 2.0 * x1 * x17 * x18 * x19 * x22 * x23 * x4 - x29 * x3
    x31 = x15 * x30
    x32 = x25 + x27 * x4 - x3 * x31
    x33 = 2.0 * x5
    x34 = x5 * (2.0 * x1 * x17 * x18 * x19 * x22 * x23 - x29)
    x35 = x20 * boys(5, x16)
    x36 = x15 * x3
    x37 = (
        x32 * x4
        - x33 * (x26 + x31)
        - x36
        * (
            x30 * x4
            + x34
            - x36 * (2.0 * x1 * x18 * x19 * x22 * x23 * x28 * x4 - x3 * x35)
        )
    )
    x38 = x3 * x37
    x39 = x32 * x5
    x40 = 3.0 * x39
    x41 = x0 * x14
    x42 = x3 * x41
    x43 = x27 * x5
    x44 = x41 * x5
    x45 = 2.23606797749979
    x46 = da * db * dc
    x47 = x41 * x46
    x48 = 0.06666666666666667 * x47
    x49 = x45 * x48
    x50 = x41 * x8
    x51 = 3.872983346207417
    x52 = x48 * x51
    x53 = x11 * x41
    x54 = x0**2 * x46 / x13**2
    x55 = 0.06666666666666667 * x54
    x56 = x45 * x55
    x57 = x37 * x56
    x58 = x51 * x55
    x59 = x58 * x8
    x60 = -x7 - A[1]
    x61 = 2.0 * x1 * x17 * x18 * x19 * x22 * x23 * x60 - x29 * x8
    x62 = x15 * x61
    x63 = -2.0 * x1 * x18 * x19 * x22 * x23 * x24 * x60 + x21 * x8
    x64 = -x5 * (x62 + x63)
    x65 = -x63
    x66 = -x3 * x62 + x4 * x65
    x67 = 2.0 * x1 * x18 * x19 * x22 * x23 * x28 * x60 - x35 * x8
    x68 = x36 * (x36 * x67 - x4 * x61) + x4 * x66 + x64
    x69 = x3 * x68
    x70 = x5 * x66
    x71 = 2.0 * x70
    x72 = x5 * x65
    x73 = x33 * x41
    x74 = 0.3333333333333333 * x47
    x75 = x68 * x8
    x76 = x39 + x75
    x77 = x73 * (x43 + x66 * x8)
    x78 = 1.732050807568877
    x79 = x74 * x78
    x80 = x53 * x71
    x81 = x39 * x53
    x82 = 0.3333333333333333 * x54
    x83 = x12 * x82
    x84 = -x10 - A[2]
    x85 = 2.0 * x1 * x17 * x18 * x19 * x22 * x23 * x84 - x11 * x29
    x86 = x15 * x85
    x87 = -2.0 * x1 * x18 * x19 * x22 * x23 * x24 * x84 + x11 * x21
    x88 = -x5 * (x86 + x87)
    x89 = -x87
    x90 = -x3 * x86 + x4 * x89
    x91 = 2.0 * x1 * x18 * x19 * x22 * x23 * x28 * x84 - x11 * x35
    x92 = x36 * (x36 * x91 - x4 * x85) + x4 * x90 + x88
    x93 = x3 * x92
    x94 = x5 * x90
    x95 = 2.0 * x94
    x96 = x5 * x89
    x97 = x11 * x92 + x39
    x98 = x11 * x90 + x43
    x99 = x73 * x98
    x100 = x82 * x9
    x101 = x78 * x82
    x102 = x101 * x8
    x103 = x25 + x60 * x65 - x62 * x8
    x104 = x103 * x5
    x105 = x15 * x8
    x106 = -x105 * x67 + x34 + x60 * x61
    x107 = x103 * x4 - x106 * x36
    x108 = x107 * x3
    x109 = x44 * (x103 * x8 + 2.0 * x72)
    x110 = x107 * x8
    x111 = x110 + x71
    x112 = x104 * x53
    x113 = x60 * x89 - x8 * x86
    x114 = x113 * x5
    x115 = -x105 * x91 + x60 * x85
    x116 = x113 * x4 - x115 * x36
    x117 = x113 * x8 + x96
    x118 = x116 * x8 + x94
    x119 = x11 * x113 + x72
    x120 = x11 * x116 + x70
    x121 = -x11 * x86 + x25 + x84 * x89
    x122 = x121 * x5
    x123 = x11 * x15
    x124 = -x123 * x91 + x34 + x84 * x85
    x125 = x121 * x4 - x124 * x36
    x126 = x125 * x3
    x127 = x122 * x50
    x128 = x44 * (x11 * x121 + 2.0 * x96)
    x129 = x11 * x125 + x95
    x130 = x103 * x60 - x105 * x106 + 2.0 * x64
    x131 = x130 * x56
    x132 = x130 * x8
    x133 = 3.0 * x104
    x134 = x132 + x133
    x135 = x3 * x58
    x136 = -x105 * x115 + x113 * x60 + x88
    x137 = x6 * x82
    x138 = 2.0 * x114
    x139 = x136 * x8 + x138
    x140 = x101 * x3
    x141 = x104 + x11 * x136
    x142 = x119 * x73
    x143 = -x105 * x124 + x121 * x60
    x144 = x122 + x143 * x8
    x145 = x11 * x143 + x138
    x146 = x121 * x84 - x123 * x124 + 2.0 * x88
    x147 = x146 * x56
    x148 = x11 * x146 + 3.0 * x122

    # 60 item(s)
    result[0, 0, 0] = numpy.sum(
        x49 * (x42 * (x38 + x40) + 3.0 * x44 * (x3 * x32 + 2.0 * x43))
    )
    result[0, 0, 1] = numpy.sum(x50 * x52 * (x38 + x40))
    result[0, 0, 2] = numpy.sum(x52 * x53 * (x38 + x40))
    result[0, 0, 3] = numpy.sum(x57 * x9)
    result[0, 0, 4] = numpy.sum(x11 * x37 * x59)
    result[0, 0, 5] = numpy.sum(x12 * x57)
    result[1, 0, 0] = numpy.sum(x74 * (x42 * (x69 + x71) + x73 * (x3 * x66 + x72)))
    result[1, 0, 1] = numpy.sum(x79 * (x42 * x76 + x77))
    result[1, 0, 2] = numpy.sum(x79 * (x53 * x69 + x80))
    result[1, 0, 3] = numpy.sum(x50 * x74 * (x39 + x76))
    result[1, 0, 4] = numpy.sum(x79 * (x53 * x75 + x81))
    result[1, 0, 5] = numpy.sum(x68 * x83)
    result[2, 0, 0] = numpy.sum(x74 * (x42 * (x93 + x95) + x73 * (x3 * x90 + x96)))
    result[2, 0, 1] = numpy.sum(x50 * x79 * (x93 + x95))
    result[2, 0, 2] = numpy.sum(x79 * (x42 * x97 + x99))
    result[2, 0, 3] = numpy.sum(x100 * x92)
    result[2, 0, 4] = numpy.sum(x102 * x97)
    result[2, 0, 5] = numpy.sum(x74 * (x53 * x97 + x81))
    result[3, 0, 0] = numpy.sum(x42 * x74 * (2.0 * x104 + x108))
    result[3, 0, 1] = numpy.sum(x79 * (x109 + x111 * x42))
    result[3, 0, 2] = numpy.sum(x79 * (x108 * x53 + x112))
    result[3, 0, 3] = numpy.sum(x74 * (x111 * x50 + x77))
    result[3, 0, 4] = numpy.sum(x79 * (x110 * x53 + x80))
    result[3, 0, 5] = numpy.sum(x107 * x83)
    result[4, 0, 0] = numpy.sum(x42 * x79 * (2.0 * x114 + x116 * x3))
    result[4, 0, 1] = numpy.sum(x47 * (x117 * x44 + x118 * x42))
    result[4, 0, 2] = numpy.sum(x47 * (x119 * x44 + x120 * x42))
    result[4, 0, 3] = numpy.sum(x50 * x79 * (x118 + x94))
    result[4, 0, 4] = numpy.sum(x47 * (x120 * x50 + x44 * x98))
    result[4, 0, 5] = numpy.sum(x53 * x79 * (x120 + x70))
    result[5, 0, 0] = numpy.sum(x42 * x74 * (2.0 * x122 + x126))
    result[5, 0, 1] = numpy.sum(x79 * (x126 * x50 + x127))
    result[5, 0, 2] = numpy.sum(x79 * (x128 + x129 * x42))
    result[5, 0, 3] = numpy.sum(x100 * x125)
    result[5, 0, 4] = numpy.sum(x102 * x129)
    result[5, 0, 5] = numpy.sum(x74 * (x129 * x53 + x99))
    result[6, 0, 0] = numpy.sum(x131 * x6)
    result[6, 0, 1] = numpy.sum(x134 * x135)
    result[6, 0, 2] = numpy.sum(x11 * x130 * x135)
    result[6, 0, 3] = numpy.sum(x49 * (3.0 * x109 + x134 * x50))
    result[6, 0, 4] = numpy.sum(x52 * x53 * (x132 + x133))
    result[6, 0, 5] = numpy.sum(x12 * x131)
    result[7, 0, 0] = numpy.sum(x136 * x137)
    result[7, 0, 1] = numpy.sum(x139 * x140)
    result[7, 0, 2] = numpy.sum(x140 * x141)
    result[7, 0, 3] = numpy.sum(x74 * (x117 * x73 + x139 * x50))
    result[7, 0, 4] = numpy.sum(x79 * (x141 * x50 + x142))
    result[7, 0, 5] = numpy.sum(x74 * (x112 + x141 * x53))
    result[8, 0, 0] = numpy.sum(x137 * x143)
    result[8, 0, 1] = numpy.sum(x140 * x144)
    result[8, 0, 2] = numpy.sum(x140 * x145)
    result[8, 0, 3] = numpy.sum(x74 * (x127 + x144 * x50))
    result[8, 0, 4] = numpy.sum(x79 * (x128 + x145 * x50))
    result[8, 0, 5] = numpy.sum(x74 * (x142 + x145 * x53))
    result[9, 0, 0] = numpy.sum(x147 * x6)
    result[9, 0, 1] = numpy.sum(x135 * x146 * x8)
    result[9, 0, 2] = numpy.sum(x135 * x148)
    result[9, 0, 3] = numpy.sum(x147 * x9)
    result[9, 0, 4] = numpy.sum(x148 * x59)
    result[9, 0, 5] = numpy.sum(x49 * (3.0 * x128 + x148 * x53))
    return result


def int3c2e3d_sph_303(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fs|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 1, 10), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = x3**2
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x0
    x14 = x13 ** (-1.0)
    x15 = cx * x14
    x16 = x0 * x15 * (x12 + x6 + x9)
    x17 = boys(4, x16)
    x18 = 17.49341832762486
    x19 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x20 = x1 * x18 * x19
    x21 = 2.0 * x13 ** (-1.5) * x20
    x22 = x17 * x21
    x23 = cx ** (-1.0)
    x24 = x13 ** (-0.5)
    x25 = boys(3, x16)
    x26 = x5 * (2.0 * x1 * x18 * x19 * x23 * x24 * x25 - x22)
    x27 = -2.0 * x1 * x18 * x19 * x23 * x24 * x25 * x4 + x22 * x3
    x28 = -x27
    x29 = boys(5, x16)
    x30 = x21 * x29
    x31 = 2.0 * x1 * x17 * x18 * x19 * x23 * x24 * x4 - x3 * x30
    x32 = x15 * x31
    x33 = x26 + x28 * x4 - x3 * x32
    x34 = 2.0 * x5
    x35 = x5 * (2.0 * x1 * x17 * x18 * x19 * x23 * x24 - x30)
    x36 = x21 * boys(6, x16)
    x37 = x15 * x3
    x38 = (
        x33 * x4
        - x34 * (x27 + x32)
        - x37
        * (
            x31 * x4
            + x35
            - x37 * (2.0 * x1 * x18 * x19 * x23 * x24 * x29 * x4 - x3 * x36)
        )
    )
    x39 = x3 * x38
    x40 = x33 * x5
    x41 = 3.0 * x40
    x42 = x0 * x14
    x43 = x3 * x42
    x44 = x3 * x33
    x45 = x28 * x5
    x46 = 2.0 * x45
    x47 = x44 + x46
    x48 = x42 * x5
    x49 = 3.0 * x48
    x50 = x20 * x23 * x24 * x25 * x34
    x51 = x34 * x42
    x52 = da * db * dc
    x53 = x42 * x52
    x54 = 0.06666666666666667 * x53
    x55 = x42 * x8
    x56 = 2.23606797749979
    x57 = x54 * x56
    x58 = x11 * x42
    x59 = x0**2 / x13**2
    x60 = x39 * x59
    x61 = x59 * x9
    x62 = x59 * x8
    x63 = x11 * x62
    x64 = 3.872983346207417
    x65 = x54 * x64
    x66 = x12 * x59
    x67 = x8**3
    x68 = 0.06666666666666667 * x52
    x69 = x0**3 / x13**3
    x70 = x68 * x69
    x71 = x38 * x70
    x72 = x56 * x71
    x73 = x11**3
    x74 = -x7 - A[1]
    x75 = 2.0 * x1 * x17 * x18 * x19 * x23 * x24 * x74 - x30 * x8
    x76 = x15 * x75
    x77 = -2.0 * x1 * x18 * x19 * x23 * x24 * x25 * x74 + x22 * x8
    x78 = -x5 * (x76 + x77)
    x79 = -x77
    x80 = -x3 * x76 + x4 * x79
    x81 = 2.0 * x1 * x18 * x19 * x23 * x24 * x29 * x74 - x36 * x8
    x82 = x37 * (x37 * x81 - x4 * x75) + x4 * x80 + x78
    x83 = x3 * x82
    x84 = x5 * x80
    x85 = 2.0 * x84
    x86 = x5 * x79
    x87 = x3 * x80
    x88 = x86 + x87
    x89 = x8 * x82
    x90 = x40 + x89
    x91 = x8 * x80
    x92 = x45 + x91
    x93 = x51 * x92
    x94 = x50 + x79 * x8
    x95 = 0.3333333333333333 * x53
    x96 = x58 * x85
    x97 = x58 * x86
    x98 = x55 * (x40 + x90)
    x99 = x51 * x55 * (x45 + x92)
    x100 = x40 * x58
    x101 = x100 + x58 * x89
    x102 = x45 * x58
    x103 = x51 * (x102 + x58 * x91)
    x104 = 1.732050807568877
    x105 = x104 * x95
    x106 = x66 * x85
    x107 = x40 * x66
    x108 = x56 * x70
    x109 = x108 * x73
    x110 = -x10 - A[2]
    x111 = 2.0 * x1 * x110 * x17 * x18 * x19 * x23 * x24 - x11 * x30
    x112 = x111 * x15
    x113 = -2.0 * x1 * x110 * x18 * x19 * x23 * x24 * x25 + x11 * x22
    x114 = -x5 * (x112 + x113)
    x115 = -x113
    x116 = -x112 * x3 + x115 * x4
    x117 = 2.0 * x1 * x110 * x18 * x19 * x23 * x24 * x29 - x11 * x36
    x118 = x114 + x116 * x4 - x37 * (x111 * x4 - x117 * x37)
    x119 = x118 * x3
    x120 = x116 * x5
    x121 = 2.0 * x120
    x122 = x115 * x5
    x123 = x116 * x3
    x124 = x122 + x123
    x125 = x122 * x55
    x126 = x11 * x118 + x40
    x127 = x11 * x116 + x45
    x128 = x127 * x51
    x129 = x11 * x115 + x50
    x130 = x129 * x48
    x131 = x3 * x59
    x132 = x131 * x8
    x133 = x100 + x126 * x58
    x134 = x102 + x127 * x58
    x135 = x134 * x51
    x136 = x108 * x67
    x137 = 0.3333333333333333 * x52
    x138 = x137 * x69
    x139 = x138 * x9
    x140 = x137 * x62
    x141 = x26 + x74 * x79 - x76 * x8
    x142 = x141 * x5
    x143 = x15 * x8
    x144 = -x143 * x81 + x35 + x74 * x75
    x145 = x141 * x4 - x144 * x37
    x146 = x145 * x3
    x147 = x59 * x6
    x148 = x141 * x8
    x149 = 2.0 * x86
    x150 = x148 + x149
    x151 = x150 * x48
    x152 = x145 * x8
    x153 = x152 + x85
    x154 = x131 * x5
    x155 = x142 * x58
    x156 = x48 * (x150 * x55 + x51 * x94)
    x157 = x153 * x55 + x93
    x158 = x48 * x58 * (x148 + x149)
    x159 = x152 * x58 + x96
    x160 = x142 * x66
    x161 = -x112 * x8 + x115 * x74
    x162 = x161 * x5
    x163 = x111 * x74 - x117 * x143
    x164 = x161 * x4 - x163 * x37
    x165 = x122 + x161 * x8
    x166 = x120 + x164 * x8
    x167 = x11 * x161 + x86
    x168 = x11 * x164 + x84
    x169 = x125 + x165 * x55
    x170 = x55 * (x120 + x166)
    x171 = x130 + x167 * x55
    x172 = x127 * x48 + x168 * x55
    x173 = x167 * x58 + x97
    x174 = x58 * (x168 + x84)
    x175 = x5 * x62
    x176 = -x11 * x112 + x110 * x115 + x26
    x177 = x176 * x5
    x178 = x11 * x15
    x179 = x110 * x111 - x117 * x178 + x35
    x180 = x176 * x4 - x179 * x37
    x181 = x180 * x3
    x182 = x177 * x55
    x183 = x11 * x176 + 2.0 * x122
    x184 = x183 * x48
    x185 = x11 * x180 + x121
    x186 = x177 * x61
    x187 = x175 * x183
    x188 = x48 * (x129 * x51 + x183 * x58)
    x189 = x128 + x185 * x58
    x190 = x3**3
    x191 = x141 * x74 - x143 * x144 + 2.0 * x78
    x192 = x191 * x70
    x193 = x191 * x8
    x194 = 3.0 * x142
    x195 = x193 + x194
    x196 = x108 * x6
    x197 = x192 * x56
    x198 = 3.0 * x151 + x195 * x55
    x199 = x131 * x68
    x200 = x199 * x56
    x201 = x58 * (x193 + x194)
    x202 = x114 - x143 * x163 + x161 * x74
    x203 = x108 * x190
    x204 = 2.0 * x162
    x205 = x202 * x8 + x204
    x206 = x138 * x6
    x207 = x11 * x202 + x142
    x208 = x165 * x51 + x205 * x55
    x209 = x131 * x137
    x210 = x167 * x51
    x211 = x207 * x55 + x210
    x212 = x104 * x209
    x213 = x155 + x207 * x58
    x214 = x173 * x51
    x215 = -x143 * x179 + x176 * x74
    x216 = x177 + x215 * x8
    x217 = x11 * x215 + x204
    x218 = x182 + x216 * x55
    x219 = x184 + x217 * x55
    x220 = x210 + x217 * x58
    x221 = x110 * x176 + 2.0 * x114 - x178 * x179
    x222 = x221 * x70
    x223 = x222 * x56
    x224 = x11 * x221 + 3.0 * x177
    x225 = 3.0 * x184 + x224 * x58

    # 100 item(s)
    result[0, 0, 0] = numpy.sum(
        x54
        * (
            x43 * (x43 * (x39 + x41) + x47 * x49)
            + x49 * (x43 * x47 + x51 * (x28 * x3 + x50))
        )
    )
    result[0, 0, 1] = numpy.sum(x55 * x57 * (x43 * (x39 + x41) + x49 * (x44 + x46)))
    result[0, 0, 2] = numpy.sum(x57 * x58 * (x43 * (x39 + x41) + x49 * (x44 + x46)))
    result[0, 0, 3] = numpy.sum(x57 * (x41 * x61 + x60 * x9))
    result[0, 0, 4] = numpy.sum(x65 * (x11 * x60 * x8 + x41 * x63))
    result[0, 0, 5] = numpy.sum(x57 * (x12 * x60 + x41 * x66))
    result[0, 0, 6] = numpy.sum(x67 * x71)
    result[0, 0, 7] = numpy.sum(x11 * x72 * x9)
    result[0, 0, 8] = numpy.sum(x12 * x72 * x8)
    result[0, 0, 9] = numpy.sum(x71 * x73)
    result[1, 0, 0] = numpy.sum(
        x43 * x57 * (x43 * (x83 + x85) + x51 * x88 + x51 * (x86 + x88))
    )
    result[1, 0, 1] = numpy.sum(
        x95 * (x43 * (x43 * x90 + x93) + x51 * (x43 * x92 + x48 * x94))
    )
    result[1, 0, 2] = numpy.sum(x95 * (x43 * (x58 * x83 + x96) + x51 * (x58 * x87 + x97)))
    result[1, 0, 3] = numpy.sum(x95 * (x43 * x98 + x99))
    result[1, 0, 4] = numpy.sum(x105 * (x101 * x43 + x103))
    result[1, 0, 5] = numpy.sum(x95 * (x106 + x66 * x83))
    result[1, 0, 6] = numpy.sum(x57 * (x40 * x61 + x55 * x98))
    result[1, 0, 7] = numpy.sum(x95 * (x101 * x55 + x40 * x63))
    result[1, 0, 8] = numpy.sum(x95 * (x107 + x66 * x89))
    result[1, 0, 9] = numpy.sum(x109 * x82)
    result[2, 0, 0] = numpy.sum(
        x43 * x57 * (x124 * x51 + x43 * (x119 + x121) + x51 * (x122 + x124))
    )
    result[2, 0, 1] = numpy.sum(
        x95 * (x43 * x55 * (x119 + x121) + x51 * (x123 * x55 + x125))
    )
    result[2, 0, 2] = numpy.sum(
        x95 * (x43 * (x126 * x43 + x128) + x51 * (x127 * x43 + x130))
    )
    result[2, 0, 3] = numpy.sum(x61 * x95 * (x119 + x121))
    result[2, 0, 4] = numpy.sum(x105 * (x126 * x132 + x127 * x34 * x62))
    result[2, 0, 5] = numpy.sum(x95 * (x133 * x43 + x135))
    result[2, 0, 6] = numpy.sum(x118 * x136)
    result[2, 0, 7] = numpy.sum(x126 * x139)
    result[2, 0, 8] = numpy.sum(x133 * x140)
    result[2, 0, 9] = numpy.sum(x57 * (x107 + x133 * x58))
    result[3, 0, 0] = numpy.sum(x57 * (x142 * x147 + x43**2 * (2.0 * x142 + x146)))
    result[3, 0, 1] = numpy.sum(x95 * (x150 * x154 + x43 * (x151 + x153 * x43)))
    result[3, 0, 2] = numpy.sum(x95 * (x11 * x131 * x142 + x43 * (x146 * x58 + x155)))
    result[3, 0, 3] = numpy.sum(x95 * (x156 + x157 * x43))
    result[3, 0, 4] = numpy.sum(x105 * (x158 + x159 * x43))
    result[3, 0, 5] = numpy.sum(x95 * (x146 * x66 + x160))
    result[3, 0, 6] = numpy.sum(x57 * (x157 * x55 + x99))
    result[3, 0, 7] = numpy.sum(x95 * (x103 + x159 * x55))
    result[3, 0, 8] = numpy.sum(x95 * (x106 + x152 * x66))
    result[3, 0, 9] = numpy.sum(x109 * x145)
    result[4, 0, 0] = numpy.sum(x65 * (x147 * x162 + x43**2 * (2.0 * x162 + x164 * x3)))
    result[4, 0, 1] = numpy.sum(x105 * (x154 * x165 + x43 * (x165 * x48 + x166 * x43)))
    result[4, 0, 2] = numpy.sum(x105 * (x154 * x167 + x43 * (x167 * x48 + x168 * x43)))
    result[4, 0, 3] = numpy.sum(x105 * (x169 * x48 + x170 * x43))
    result[4, 0, 4] = numpy.sum(x53 * (x171 * x48 + x172 * x43))
    result[4, 0, 5] = numpy.sum(x105 * (x173 * x48 + x174 * x43))
    result[4, 0, 6] = numpy.sum(x65 * (x120 * x61 + x170 * x55))
    result[4, 0, 7] = numpy.sum(x105 * (x127 * x175 + x172 * x55))
    result[4, 0, 8] = numpy.sum(x105 * (x134 * x48 + x174 * x55))
    result[4, 0, 9] = numpy.sum(x65 * (x174 * x58 + x66 * x84))
    result[5, 0, 0] = numpy.sum(x57 * (x147 * x177 + x43**2 * (2.0 * x177 + x181)))
    result[5, 0, 1] = numpy.sum(x95 * (x132 * x177 + x43 * (x181 * x55 + x182)))
    result[5, 0, 2] = numpy.sum(x95 * (x154 * x183 + x43 * (x184 + x185 * x43)))
    result[5, 0, 3] = numpy.sum(x95 * (x181 * x61 + x186))
    result[5, 0, 4] = numpy.sum(x105 * (x132 * x185 + x187))
    result[5, 0, 5] = numpy.sum(x95 * (x188 + x189 * x43))
    result[5, 0, 6] = numpy.sum(x136 * x180)
    result[5, 0, 7] = numpy.sum(x139 * x185)
    result[5, 0, 8] = numpy.sum(x140 * x189)
    result[5, 0, 9] = numpy.sum(x57 * (x135 + x189 * x58))
    result[6, 0, 0] = numpy.sum(x190 * x192)
    result[6, 0, 1] = numpy.sum(x195 * x196)
    result[6, 0, 2] = numpy.sum(x11 * x197 * x6)
    result[6, 0, 3] = numpy.sum(x198 * x200)
    result[6, 0, 4] = numpy.sum(x199 * x201 * x64)
    result[6, 0, 5] = numpy.sum(x12 * x197 * x3)
    result[6, 0, 6] = numpy.sum(x54 * (3.0 * x156 + x198 * x55))
    result[6, 0, 7] = numpy.sum(x57 * (3.0 * x158 + x201 * x55))
    result[6, 0, 8] = numpy.sum(x57 * x66 * (x193 + x194))
    result[6, 0, 9] = numpy.sum(x192 * x73)
    result[7, 0, 0] = numpy.sum(x202 * x203)
    result[7, 0, 1] = numpy.sum(x205 * x206)
    result[7, 0, 2] = numpy.sum(x206 * x207)
    result[7, 0, 3] = numpy.sum(x208 * x209)
    result[7, 0, 4] = numpy.sum(x211 * x212)
    result[7, 0, 5] = numpy.sum(x209 * x213)
    result[7, 0, 6] = numpy.sum(x57 * (x169 * x51 + x208 * x55))
    result[7, 0, 7] = numpy.sum(x95 * (x171 * x51 + x211 * x55))
    result[7, 0, 8] = numpy.sum(x95 * (x213 * x55 + x214))
    result[7, 0, 9] = numpy.sum(x57 * (x160 + x213 * x58))
    result[8, 0, 0] = numpy.sum(x203 * x215)
    result[8, 0, 1] = numpy.sum(x206 * x216)
    result[8, 0, 2] = numpy.sum(x206 * x217)
    result[8, 0, 3] = numpy.sum(x209 * x218)
    result[8, 0, 4] = numpy.sum(x212 * x219)
    result[8, 0, 5] = numpy.sum(x209 * x220)
    result[8, 0, 6] = numpy.sum(x57 * (x186 + x218 * x55))
    result[8, 0, 7] = numpy.sum(x95 * (x187 + x219 * x55))
    result[8, 0, 8] = numpy.sum(x95 * (x188 + x220 * x55))
    result[8, 0, 9] = numpy.sum(x57 * (x214 + x220 * x58))
    result[9, 0, 0] = numpy.sum(x190 * x222)
    result[9, 0, 1] = numpy.sum(x223 * x6 * x8)
    result[9, 0, 2] = numpy.sum(x196 * x224)
    result[9, 0, 3] = numpy.sum(x223 * x3 * x9)
    result[9, 0, 4] = numpy.sum(x224 * x3 * x64 * x70 * x8)
    result[9, 0, 5] = numpy.sum(x200 * x225)
    result[9, 0, 6] = numpy.sum(x222 * x67)
    result[9, 0, 7] = numpy.sum(x108 * x224 * x9)
    result[9, 0, 8] = numpy.sum(x225 * x56 * x62 * x68)
    result[9, 0, 9] = numpy.sum(x54 * (3.0 * x188 + x225 * x58))
    return result


def int3c2e3d_sph_304(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fs|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 1, 15), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = x3**2
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x0
    x14 = x13 ** (-1.0)
    x15 = cx * x14
    x16 = x0 * x15 * (x12 + x6 + x9)
    x17 = boys(5, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = numpy.exp(
        -ax * bx * x1 * ((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)
    )
    x21 = x1 * x19 * x20
    x22 = 2.0 * x18 * x21
    x23 = x17 * x22
    x24 = cx ** (-1.0)
    x25 = x13 ** (-0.5)
    x26 = boys(4, x16)
    x27 = x5 * (2.0 * x1 * x19 * x20 * x24 * x25 * x26 - x23)
    x28 = -2.0 * x1 * x19 * x20 * x24 * x25 * x26 * x4 + x23 * x3
    x29 = -x28
    x30 = boys(6, x16)
    x31 = x22 * x30
    x32 = 2.0 * x1 * x17 * x19 * x20 * x24 * x25 * x4 - x3 * x31
    x33 = x15 * x32
    x34 = x27 + x29 * x4 - x3 * x33
    x35 = 2.0 * x5
    x36 = x5 * (2.0 * x1 * x17 * x19 * x20 * x24 * x25 - x31)
    x37 = x22 * boys(7, x16)
    x38 = x15 * x3
    x39 = (
        x34 * x4
        - x35 * (x28 + x33)
        - x38
        * (
            x32 * x4
            + x36
            - x38 * (2.0 * x1 * x19 * x20 * x24 * x25 * x30 * x4 - x3 * x37)
        )
    )
    x40 = x3 * x39
    x41 = x34 * x5
    x42 = 3.0 * x41
    x43 = x0 * x14
    x44 = x3 * x43
    x45 = x3 * x34
    x46 = x29 * x5
    x47 = 2.0 * x46
    x48 = x45 + x47
    x49 = x43 * x5
    x50 = 3.0 * x49
    x51 = x29 * x3
    x52 = x24 * x26 * x35
    x53 = x21 * x25 * x52
    x54 = x51 + x53
    x55 = x35 * x43
    x56 = x44 * x48 + x54 * x55
    x57 = x18 * x19 * x20 * x52
    x58 = 2.645751311064591
    x59 = da * db * dc
    x60 = x43 * x59
    x61 = 0.009523809523809524 * x60
    x62 = x58 * x61
    x63 = x43 * x8
    x64 = x63 * (x45 + x47)
    x65 = x57 * x8
    x66 = 0.06666666666666667 * x60
    x67 = x11 * x43
    x68 = x67 * (x45 + x47)
    x69 = x11 * x57
    x70 = x0**2 / x13**2
    x71 = x40 * x9
    x72 = x70 * x9
    x73 = x45 * x70
    x74 = 3.872983346207417
    x75 = 0.02222222222222222 * x74
    x76 = x60 * x75
    x77 = x70 * x8
    x78 = x11 * x77
    x79 = 2.23606797749979
    x80 = x66 * x79
    x81 = x12 * x70
    x82 = x8**3
    x83 = x0**3 / x13**3
    x84 = x40 * x83
    x85 = x82 * x83
    x86 = x83 * x9
    x87 = x11 * x86
    x88 = x12 * x8
    x89 = x83 * x88
    x90 = x11**3
    x91 = x83 * x90
    x92 = x0**4 / x13**4
    x93 = x59 * x92
    x94 = 0.009523809523809524 * x93
    x95 = x8**4 * x94
    x96 = x39 * x58
    x97 = 0.06666666666666667 * x59
    x98 = x92 * x97
    x99 = x82 * x98
    x100 = x12 * x75 * x93
    x101 = x90 * x98
    x102 = x11**4 * x94
    x103 = -x7 - A[1]
    x104 = 2.0 * x1 * x103 * x17 * x19 * x20 * x24 * x25 - x31 * x8
    x105 = x104 * x15
    x106 = -2.0 * x1 * x103 * x19 * x20 * x24 * x25 * x26 + x23 * x8
    x107 = -x5 * (x105 + x106)
    x108 = -x106
    x109 = -x105 * x3 + x108 * x4
    x110 = 2.0 * x1 * x103 * x19 * x20 * x24 * x25 * x30 - x37 * x8
    x111 = x107 + x109 * x4 - x38 * (x104 * x4 - x110 * x38)
    x112 = x111 * x3
    x113 = x109 * x5
    x114 = 2.0 * x113
    x115 = x108 * x5
    x116 = x109 * x3
    x117 = x115 + x116
    x118 = x44 * (x115 + x117)
    x119 = x6 * x70
    x120 = 5.916079783099616
    x121 = x120 * x61
    x122 = x111 * x8
    x123 = x122 + x41
    x124 = x109 * x8
    x125 = x124 + x46
    x126 = x125 * x55
    x127 = x108 * x8
    x128 = x127 + x53
    x129 = x128 * x43
    x130 = x125 * x44 + x129 * x5
    x131 = x3 * x70
    x132 = x131 * x5
    x133 = x114 * x67
    x134 = x115 * x67
    x135 = x116 * x67 + x134
    x136 = x11 * x131
    x137 = x63 * (x123 + x41)
    x138 = x63 * (x125 + x46)
    x139 = x138 * x55
    x140 = x129 * x8 + x65
    x141 = 1.732050807568877
    x142 = 0.1111111111111111 * x141
    x143 = x142 * x60
    x144 = x41 * x67
    x145 = x122 * x67 + x144
    x146 = x46 * x67
    x147 = x124 * x67 + x146
    x148 = x147 * x55
    x149 = x127 * x67 + x69
    x150 = 0.3333333333333333 * x60
    x151 = x114 * x81
    x152 = x115 * x81
    x153 = x137 * x63 + x41 * x72
    x154 = x55 * (x138 * x63 + x46 * x72)
    x155 = x145 * x63 + x41 * x78
    x156 = x55 * (x147 * x63 + x46 * x78)
    x157 = x41 * x81
    x158 = x122 * x81 + x157
    x159 = x46 * x81
    x160 = x55 * (x124 * x81 + x159)
    x161 = x114 * x91
    x162 = x41 * x91
    x163 = x102 * x120
    x164 = -x10 - A[2]
    x165 = 2.0 * x1 * x164 * x17 * x19 * x20 * x24 * x25 - x11 * x31
    x166 = x15 * x165
    x167 = -2.0 * x1 * x164 * x19 * x20 * x24 * x25 * x26 + x11 * x23
    x168 = -x5 * (x166 + x167)
    x169 = -x167
    x170 = -x166 * x3 + x169 * x4
    x171 = 2.0 * x1 * x164 * x19 * x20 * x24 * x25 * x30 - x11 * x37
    x172 = x168 + x170 * x4 - x38 * (x165 * x4 - x171 * x38)
    x173 = x172 * x3
    x174 = x170 * x5
    x175 = 2.0 * x174
    x176 = x169 * x5
    x177 = x170 * x3
    x178 = x176 + x177
    x179 = x44 * (x176 + x178)
    x180 = x176 * x63
    x181 = x177 * x63 + x180
    x182 = x131 * x8
    x183 = x11 * x172 + x41
    x184 = x11 * x170 + x46
    x185 = x184 * x55
    x186 = x11 * x169 + x53
    x187 = x186 * x49
    x188 = x184 * x44 + x187
    x189 = x176 * x72
    x190 = x184 * x35
    x191 = x5 * x77
    x192 = x186 * x191
    x193 = x144 + x183 * x67
    x194 = x146 + x184 * x67
    x195 = x194 * x55
    x196 = x186 * x67 + x69
    x197 = x196 * x49
    x198 = x3 * x86
    x199 = x157 + x193 * x67
    x200 = x159 + x194 * x67
    x201 = x200 * x55
    x202 = x120 * x95
    x203 = x79 * x99
    x204 = x142 * x59
    x205 = x204 * x86
    x206 = x77 * x97
    x207 = x206 * x79
    x208 = x103 * x108 - x105 * x8 + x27
    x209 = x208 * x5
    x210 = x15 * x8
    x211 = x103 * x104 - x110 * x210 + x36
    x212 = x208 * x4 - x211 * x38
    x213 = x212 * x3
    x214 = x3**3
    x215 = x214 * x83
    x216 = x208 * x8
    x217 = 2.0 * x115
    x218 = x216 + x217
    x219 = x218 * x49
    x220 = x212 * x8
    x221 = x114 + x220
    x222 = x6 * x83
    x223 = x222 * x5
    x224 = x209 * x67
    x225 = x129 * x35 + x218 * x63
    x226 = x225 * x49
    x227 = x126 + x221 * x63
    x228 = x67 * (x216 + x217)
    x229 = x228 * x49
    x230 = x133 + x220 * x67
    x231 = x209 * x81
    x232 = x3 * x83
    x233 = x49 * (x140 * x55 + x225 * x63)
    x234 = x139 + x227 * x63
    x235 = x49 * (x149 * x55 + x228 * x63)
    x236 = x148 + x230 * x63
    x237 = x49 * x81 * (x216 + x217)
    x238 = x151 + x220 * x81
    x239 = x209 * x91
    x240 = x103 * x169 - x166 * x8
    x241 = x240 * x5
    x242 = x103 * x165 - x171 * x210
    x243 = x240 * x4 - x242 * x38
    x244 = 10.2469507659596 * x61
    x245 = x176 + x240 * x8
    x246 = x174 + x243 * x8
    x247 = x66 * x74
    x248 = x11 * x240 + x115
    x249 = x11 * x243 + x113
    x250 = x180 + x245 * x63
    x251 = x63 * (x174 + x246)
    x252 = x187 + x248 * x63
    x253 = x184 * x49 + x249 * x63
    x254 = x141 * x150
    x255 = x134 + x248 * x67
    x256 = x67 * (x113 + x249)
    x257 = x189 + x250 * x63
    x258 = x174 * x72 + x251 * x63
    x259 = x192 + x252 * x63
    x260 = x184 * x191 + x253 * x63
    x261 = x197 + x255 * x63
    x262 = x194 * x49 + x256 * x63
    x263 = x152 + x255 * x67
    x264 = x113 * x81 + x256 * x67
    x265 = x5 * x86
    x266 = -x11 * x166 + x164 * x169 + x27
    x267 = x266 * x5
    x268 = x11 * x15
    x269 = x164 * x165 - x171 * x268 + x36
    x270 = x266 * x4 - x269 * x38
    x271 = x270 * x3
    x272 = x267 * x63
    x273 = x11 * x266 + 2.0 * x176
    x274 = x273 * x49
    x275 = x11 * x270 + x175
    x276 = x267 * x72
    x277 = x191 * x273
    x278 = x232 * x8
    x279 = x186 * x55 + x273 * x67
    x280 = x279 * x49
    x281 = x185 + x275 * x67
    x282 = x267 * x85
    x283 = x265 * x273
    x284 = x191 * x279
    x285 = x49 * (x196 * x55 + x279 * x67)
    x286 = x195 + x281 * x67
    x287 = x103 * x208 + 2.0 * x107 - x210 * x211
    x288 = x287 * x58
    x289 = x3**4 * x94
    x290 = x287 * x8
    x291 = 3.0 * x209
    x292 = x290 + x291
    x293 = x214 * x98
    x294 = 3.0 * x219 + x292 * x63
    x295 = x59 * x75
    x296 = x222 * x295
    x297 = x67 * (x290 + x291)
    x298 = x79 * x97
    x299 = 3.0 * x226 + x294 * x63
    x300 = x131 * x97
    x301 = 3.0 * x229 + x297 * x63
    x302 = x300 * x79
    x303 = x81 * (x290 + x291)
    x304 = x103 * x240 + x168 - x210 * x242
    x305 = x120 * x289
    x306 = 2.0 * x241
    x307 = x304 * x8 + x306
    x308 = x293 * x79
    x309 = x11 * x304 + x209
    x310 = x245 * x55 + x307 * x63
    x311 = x204 * x222
    x312 = x248 * x55
    x313 = x309 * x63 + x312
    x314 = 0.3333333333333333 * x59
    x315 = x222 * x314
    x316 = x224 + x309 * x67
    x317 = x250 * x55 + x310 * x63
    x318 = x252 * x55 + x313 * x63
    x319 = x131 * x314
    x320 = x255 * x55
    x321 = x316 * x63 + x320
    x322 = x231 + x316 * x67
    x323 = x263 * x55
    x324 = x103 * x266 - x210 * x269
    x325 = x267 + x324 * x8
    x326 = x11 * x324 + x306
    x327 = x272 + x325 * x63
    x328 = x274 + x326 * x63
    x329 = x312 + x326 * x67
    x330 = x276 + x327 * x63
    x331 = x277 + x328 * x63
    x332 = x280 + x329 * x63
    x333 = x320 + x329 * x67
    x334 = x164 * x266 + 2.0 * x168 - x268 * x269
    x335 = x334 * x58
    x336 = x11 * x334 + 3.0 * x267
    x337 = x336 * x79 * x98
    x338 = 3.0 * x274 + x336 * x67
    x339 = 3.0 * x280 + x338 * x67

    # 150 item(s)
    result[0, 0, 0] = numpy.sum(
        x62
        * (
            x44 * (x44 * (x44 * (x40 + x42) + x48 * x50) + x50 * x56)
            + x50 * (x44 * x56 + x55 * (x3 * x57 + x44 * x54))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x66
        * (
            x44 * (x44 * x63 * (x40 + x42) + x50 * x64)
            + x50 * (x44 * x64 + x55 * (x51 * x63 + x65))
        )
    )
    result[0, 0, 2] = numpy.sum(
        x66
        * (
            x44 * (x44 * x67 * (x40 + x42) + x50 * x68)
            + x50 * (x44 * x68 + x55 * (x51 * x67 + x69))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x76 * (x44 * (x42 * x72 + x70 * x71) + x50 * (x47 * x72 + x73 * x9))
    )
    result[0, 0, 4] = numpy.sum(
        x80 * (x44 * x78 * (x40 + x42) + x50 * (x11 * x73 * x8 + x47 * x78))
    )
    result[0, 0, 5] = numpy.sum(
        x76 * (x44 * x81 * (x40 + x42) + x50 * (x12 * x73 + x47 * x81))
    )
    result[0, 0, 6] = numpy.sum(x66 * (x42 * x85 + x82 * x84))
    result[0, 0, 7] = numpy.sum(x80 * (x11 * x71 * x83 + x42 * x87))
    result[0, 0, 8] = numpy.sum(x80 * (x42 * x89 + x84 * x88))
    result[0, 0, 9] = numpy.sum(x66 * (x42 * x91 + x84 * x90))
    result[0, 0, 10] = numpy.sum(x95 * x96)
    result[0, 0, 11] = numpy.sum(x11 * x39 * x99)
    result[0, 0, 12] = numpy.sum(x100 * x39 * x9)
    result[0, 0, 13] = numpy.sum(x101 * x39 * x8)
    result[0, 0, 14] = numpy.sum(x102 * x96)
    result[1, 0, 0] = numpy.sum(
        x121
        * (
            x44 * (x118 * x55 + x44 * (x117 * x55 + x44 * (x112 + x114)))
            + x55 * (x115 * x119 + x118 * x44)
        )
    )
    result[1, 0, 1] = numpy.sum(
        x80
        * (
            x44 * (x130 * x55 + x44 * (x123 * x44 + x126))
            + x55 * (x128 * x132 + x130 * x44)
        )
    )
    result[1, 0, 2] = numpy.sum(
        x80
        * (
            x44 * (x135 * x55 + x44 * (x112 * x67 + x133))
            + x55 * (x115 * x136 + x135 * x44)
        )
    )
    result[1, 0, 3] = numpy.sum(
        x143 * (x44 * (x137 * x44 + x139) + x55 * (x138 * x44 + x140 * x49))
    )
    result[1, 0, 4] = numpy.sum(
        x150 * (x44 * (x145 * x44 + x148) + x55 * (x147 * x44 + x149 * x49))
    )
    result[1, 0, 5] = numpy.sum(
        x143 * (x44 * (x112 * x81 + x151) + x55 * (x116 * x81 + x152))
    )
    result[1, 0, 6] = numpy.sum(x80 * (x153 * x44 + x154))
    result[1, 0, 7] = numpy.sum(x150 * (x155 * x44 + x156))
    result[1, 0, 8] = numpy.sum(x150 * (x158 * x44 + x160))
    result[1, 0, 9] = numpy.sum(x80 * (x112 * x91 + x161))
    result[1, 0, 10] = numpy.sum(x121 * (x153 * x63 + x41 * x85))
    result[1, 0, 11] = numpy.sum(x80 * (x155 * x63 + x41 * x87))
    result[1, 0, 12] = numpy.sum(x143 * (x158 * x63 + x41 * x89))
    result[1, 0, 13] = numpy.sum(x80 * (x122 * x91 + x162))
    result[1, 0, 14] = numpy.sum(x111 * x163)
    result[2, 0, 0] = numpy.sum(
        x121
        * (
            x44 * (x179 * x55 + x44 * (x178 * x55 + x44 * (x173 + x175)))
            + x55 * (x119 * x176 + x179 * x44)
        )
    )
    result[2, 0, 1] = numpy.sum(
        x80
        * (
            x44 * (x181 * x55 + x44 * x63 * (x173 + x175))
            + x55 * (x176 * x182 + x181 * x44)
        )
    )
    result[2, 0, 2] = numpy.sum(
        x80
        * (
            x44 * (x188 * x55 + x44 * (x183 * x44 + x185))
            + x55 * (x132 * x186 + x188 * x44)
        )
    )
    result[2, 0, 3] = numpy.sum(
        x143 * (x44 * x72 * (x173 + x175) + x55 * (x177 * x72 + x189))
    )
    result[2, 0, 4] = numpy.sum(
        x150 * (x44 * (x182 * x183 + x190 * x77) + x55 * (x182 * x184 + x192))
    )
    result[2, 0, 5] = numpy.sum(
        x143 * (x44 * (x193 * x44 + x195) + x55 * (x194 * x44 + x197))
    )
    result[2, 0, 6] = numpy.sum(x80 * x85 * (x173 + x175))
    result[2, 0, 7] = numpy.sum(x150 * (x183 * x198 + x190 * x86))
    result[2, 0, 8] = numpy.sum(x150 * (x182 * x193 + x194 * x35 * x77))
    result[2, 0, 9] = numpy.sum(x80 * (x199 * x44 + x201))
    result[2, 0, 10] = numpy.sum(x172 * x202)
    result[2, 0, 11] = numpy.sum(x183 * x203)
    result[2, 0, 12] = numpy.sum(x193 * x205)
    result[2, 0, 13] = numpy.sum(x199 * x207)
    result[2, 0, 14] = numpy.sum(x121 * (x162 + x199 * x67))
    result[3, 0, 0] = numpy.sum(
        x121 * (x209 * x215 + x44 * (x119 * x209 + x44**2 * (2.0 * x209 + x213)))
    )
    result[3, 0, 1] = numpy.sum(
        x80 * (x218 * x223 + x44 * (x132 * x218 + x44 * (x219 + x221 * x44)))
    )
    result[3, 0, 2] = numpy.sum(
        x80 * (x11 * x209 * x222 + x44 * (x136 * x209 + x44 * (x213 * x67 + x224)))
    )
    result[3, 0, 3] = numpy.sum(x143 * (x132 * x225 + x44 * (x226 + x227 * x44)))
    result[3, 0, 4] = numpy.sum(x150 * (x132 * x228 + x44 * (x229 + x230 * x44)))
    result[3, 0, 5] = numpy.sum(x143 * (x12 * x209 * x232 + x44 * (x213 * x81 + x231)))
    result[3, 0, 6] = numpy.sum(x80 * (x233 + x234 * x44))
    result[3, 0, 7] = numpy.sum(x150 * (x235 + x236 * x44))
    result[3, 0, 8] = numpy.sum(x150 * (x237 + x238 * x44))
    result[3, 0, 9] = numpy.sum(x80 * (x213 * x91 + x239))
    result[3, 0, 10] = numpy.sum(x121 * (x154 + x234 * x63))
    result[3, 0, 11] = numpy.sum(x80 * (x156 + x236 * x63))
    result[3, 0, 12] = numpy.sum(x143 * (x160 + x238 * x63))
    result[3, 0, 13] = numpy.sum(x80 * (x161 + x220 * x91))
    result[3, 0, 14] = numpy.sum(x163 * x212)
    result[4, 0, 0] = numpy.sum(
        x244 * (x215 * x241 + x44 * (x119 * x241 + x44**2 * (2.0 * x241 + x243 * x3)))
    )
    result[4, 0, 1] = numpy.sum(
        x247 * (x223 * x245 + x44 * (x132 * x245 + x44 * (x245 * x49 + x246 * x44)))
    )
    result[4, 0, 2] = numpy.sum(
        x247 * (x223 * x248 + x44 * (x132 * x248 + x44 * (x248 * x49 + x249 * x44)))
    )
    result[4, 0, 3] = numpy.sum(x150 * (x132 * x250 + x44 * (x250 * x49 + x251 * x44)))
    result[4, 0, 4] = numpy.sum(x254 * (x132 * x252 + x44 * (x252 * x49 + x253 * x44)))
    result[4, 0, 5] = numpy.sum(x150 * (x132 * x255 + x44 * (x255 * x49 + x256 * x44)))
    result[4, 0, 6] = numpy.sum(x247 * (x257 * x49 + x258 * x44))
    result[4, 0, 7] = numpy.sum(x254 * (x259 * x49 + x260 * x44))
    result[4, 0, 8] = numpy.sum(x254 * (x261 * x49 + x262 * x44))
    result[4, 0, 9] = numpy.sum(x247 * (x263 * x49 + x264 * x44))
    result[4, 0, 10] = numpy.sum(x244 * (x174 * x85 + x258 * x63))
    result[4, 0, 11] = numpy.sum(x247 * (x184 * x265 + x260 * x63))
    result[4, 0, 12] = numpy.sum(x150 * (x191 * x194 + x262 * x63))
    result[4, 0, 13] = numpy.sum(x247 * (x200 * x49 + x264 * x63))
    result[4, 0, 14] = numpy.sum(x244 * (x113 * x91 + x264 * x67))
    result[5, 0, 0] = numpy.sum(
        x121 * (x215 * x267 + x44 * (x119 * x267 + x44**2 * (2.0 * x267 + x271)))
    )
    result[5, 0, 1] = numpy.sum(
        x80 * (x222 * x267 * x8 + x44 * (x182 * x267 + x44 * (x271 * x63 + x272)))
    )
    result[5, 0, 2] = numpy.sum(
        x80 * (x223 * x273 + x44 * (x132 * x273 + x44 * (x274 + x275 * x44)))
    )
    result[5, 0, 3] = numpy.sum(x143 * (x198 * x267 + x44 * (x271 * x72 + x276)))
    result[5, 0, 4] = numpy.sum(x150 * (x273 * x278 * x5 + x44 * (x182 * x275 + x277)))
    result[5, 0, 5] = numpy.sum(x143 * (x132 * x279 + x44 * (x280 + x281 * x44)))
    result[5, 0, 6] = numpy.sum(x80 * (x271 * x85 + x282))
    result[5, 0, 7] = numpy.sum(x150 * (x198 * x275 + x283))
    result[5, 0, 8] = numpy.sum(x150 * (x182 * x281 + x284))
    result[5, 0, 9] = numpy.sum(x80 * (x285 + x286 * x44))
    result[5, 0, 10] = numpy.sum(x202 * x270)
    result[5, 0, 11] = numpy.sum(x203 * x275)
    result[5, 0, 12] = numpy.sum(x205 * x281)
    result[5, 0, 13] = numpy.sum(x207 * x286)
    result[5, 0, 14] = numpy.sum(x121 * (x201 + x286 * x67))
    result[6, 0, 0] = numpy.sum(x288 * x289)
    result[6, 0, 1] = numpy.sum(x292 * x293)
    result[6, 0, 2] = numpy.sum(x11 * x287 * x293)
    result[6, 0, 3] = numpy.sum(x294 * x296)
    result[6, 0, 4] = numpy.sum(x222 * x297 * x298)
    result[6, 0, 5] = numpy.sum(x100 * x287 * x6)
    result[6, 0, 6] = numpy.sum(x299 * x300)
    result[6, 0, 7] = numpy.sum(x301 * x302)
    result[6, 0, 8] = numpy.sum(x302 * x303)
    result[6, 0, 9] = numpy.sum(x101 * x287 * x3)
    result[6, 0, 10] = numpy.sum(x62 * (3.0 * x233 + x299 * x63))
    result[6, 0, 11] = numpy.sum(x66 * (3.0 * x235 + x301 * x63))
    result[6, 0, 12] = numpy.sum(x76 * (3.0 * x237 + x303 * x63))
    result[6, 0, 13] = numpy.sum(x66 * x91 * (x290 + x291))
    result[6, 0, 14] = numpy.sum(x102 * x288)
    result[7, 0, 0] = numpy.sum(x304 * x305)
    result[7, 0, 1] = numpy.sum(x307 * x308)
    result[7, 0, 2] = numpy.sum(x308 * x309)
    result[7, 0, 3] = numpy.sum(x310 * x311)
    result[7, 0, 4] = numpy.sum(x313 * x315)
    result[7, 0, 5] = numpy.sum(x311 * x316)
    result[7, 0, 6] = numpy.sum(x302 * x317)
    result[7, 0, 7] = numpy.sum(x318 * x319)
    result[7, 0, 8] = numpy.sum(x319 * x321)
    result[7, 0, 9] = numpy.sum(x302 * x322)
    result[7, 0, 10] = numpy.sum(x121 * (x257 * x55 + x317 * x63))
    result[7, 0, 11] = numpy.sum(x80 * (x259 * x55 + x318 * x63))
    result[7, 0, 12] = numpy.sum(x143 * (x261 * x55 + x321 * x63))
    result[7, 0, 13] = numpy.sum(x80 * (x322 * x63 + x323))
    result[7, 0, 14] = numpy.sum(x121 * (x239 + x322 * x67))
    result[8, 0, 0] = numpy.sum(x305 * x324)
    result[8, 0, 1] = numpy.sum(x308 * x325)
    result[8, 0, 2] = numpy.sum(x308 * x326)
    result[8, 0, 3] = numpy.sum(x311 * x327)
    result[8, 0, 4] = numpy.sum(x315 * x328)
    result[8, 0, 5] = numpy.sum(x311 * x329)
    result[8, 0, 6] = numpy.sum(x302 * x330)
    result[8, 0, 7] = numpy.sum(x319 * x331)
    result[8, 0, 8] = numpy.sum(x319 * x332)
    result[8, 0, 9] = numpy.sum(x302 * x333)
    result[8, 0, 10] = numpy.sum(x121 * (x282 + x330 * x63))
    result[8, 0, 11] = numpy.sum(x80 * (x283 + x331 * x63))
    result[8, 0, 12] = numpy.sum(x143 * (x284 + x332 * x63))
    result[8, 0, 13] = numpy.sum(x80 * (x285 + x333 * x63))
    result[8, 0, 14] = numpy.sum(x121 * (x323 + x333 * x67))
    result[9, 0, 0] = numpy.sum(x289 * x335)
    result[9, 0, 1] = numpy.sum(x293 * x334 * x8)
    result[9, 0, 2] = numpy.sum(x293 * x336)
    result[9, 0, 3] = numpy.sum(x334 * x6 * x75 * x9 * x93)
    result[9, 0, 4] = numpy.sum(x337 * x6 * x8)
    result[9, 0, 5] = numpy.sum(x296 * x338)
    result[9, 0, 6] = numpy.sum(x3 * x334 * x99)
    result[9, 0, 7] = numpy.sum(x3 * x337 * x9)
    result[9, 0, 8] = numpy.sum(x278 * x298 * x338)
    result[9, 0, 9] = numpy.sum(x300 * x339)
    result[9, 0, 10] = numpy.sum(x335 * x95)
    result[9, 0, 11] = numpy.sum(x336 * x99)
    result[9, 0, 12] = numpy.sum(x295 * x338 * x86)
    result[9, 0, 13] = numpy.sum(x206 * x339)
    result[9, 0, 14] = numpy.sum(x62 * (3.0 * x285 + x339 * x67))
    return result


def int3c2e3d_sph_310(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fp|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 3, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = -x3 - C[0]
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = cx / x11
    x13 = x1 * x12 * (x10**2 + x6**2 + x8**2)
    x14 = boys(1, x13)
    x15 = 17.49341832762486
    x16 = A[1] - B[1]
    x17 = A[2] - B[2]
    x18 = numpy.exp(-ax * bx * x2 * (x0**2 + x16**2 + x17**2))
    x19 = 2.0 * x11 ** (-1.5) * x15 * x18 * x2
    x20 = x14 * x19
    x21 = cx ** (-1.0)
    x22 = x11 ** (-0.5)
    x23 = boys(0, x13)
    x24 = 2.0 * x15 * x18 * x2 * x21 * x22 * x23 - x20
    x25 = x24 * x5
    x26 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x4 + x20 * x6
    x27 = -x26
    x28 = boys(2, x13)
    x29 = x19 * x28
    x30 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x4 + x29 * x6
    x31 = -x30
    x32 = x12 * x31
    x33 = x32 * x6
    x34 = 2.0 * x5
    x35 = x5 * (2.0 * x14 * x15 * x18 * x2 * x21 * x22 - x29)
    x36 = boys(3, x13)
    x37 = x19 * x36
    x38 = 2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x4 - x37 * x6
    x39 = x12 * x38
    x40 = x31 * x4 + x35 - x39 * x6
    x41 = x12 * x40
    x42 = -x34 * (x26 + x32) + x4 * (x25 + x27 * x4 - x33) - x41 * x6
    x43 = -x24 * x5
    x44 = x5 * (2.0 * x15 * x18 * x2 * x21 * x22 * x28 - x37)
    x45 = x19 * boys(4, x13)
    x46 = x12 * x6
    x47 = da * db * dc
    x48 = 0.2581988897471611 * x47
    x49 = -x7 - A[1]
    x50 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x49 + x29 * x8
    x51 = -x50
    x52 = x12 * x51
    x53 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x49 + x20 * x8
    x54 = -x5 * (x52 + x53)
    x55 = -x53
    x56 = -x4 * x55 + x52 * x6
    x57 = 2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x49 - x37 * x8
    x58 = x12 * x57
    x59 = x4 * x51 - x58 * x6
    x60 = x12 * x59
    x61 = -x4 * x56 + x54 - x6 * x60
    x62 = -x5 * (x50 + x58)
    x63 = 2.0 * x15 * x18 * x2 * x21 * x22 * x36 * x49 - x45 * x8
    x64 = (
        -x34 * (x56 + x60)
        + x4 * x61
        - x46 * (x4 * x59 - x46 * (x4 * x57 - x46 * x63) + x62)
    )
    x65 = -x9 - A[2]
    x66 = x10 * x29 - 2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x65
    x67 = -x66
    x68 = x12 * x67
    x69 = x10 * x20 - 2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x65
    x70 = -x5 * (x68 + x69)
    x71 = -x69
    x72 = -x4 * x71 + x6 * x68
    x73 = -x10 * x37 + 2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x65
    x74 = x12 * x73
    x75 = x4 * x67 - x6 * x74
    x76 = x12 * x75
    x77 = -x4 * x72 - x6 * x76 + x70
    x78 = -x5 * (x66 + x74)
    x79 = -x10 * x45 + 2.0 * x15 * x18 * x2 * x21 * x22 * x36 * x65
    x80 = (
        -x34 * (x72 + x76)
        + x4 * x77
        - x46 * (x4 * x75 - x46 * (x4 * x73 - x46 * x79) + x78)
    )
    x81 = 0.5773502691896258 * x47
    x82 = x35 + x49 * x51 - x58 * x8
    x83 = x12 * x82
    x84 = x52 * x8
    x85 = x5 * (-x43 + x49 * x55 - x83 - x84)
    x86 = x25 + x49 * x55 - x84
    x87 = x4 * x86 - x6 * x83
    x88 = x12 * x8
    x89 = x44 + x49 * x57 - x63 * x88
    x90 = x4 * x87 - x46 * (x4 * x82 - x46 * x89) + x85
    x91 = x49 * x67 - x74 * x8
    x92 = x12 * x91
    x93 = -x49 * x71 + x68 * x8
    x94 = -x5 * (x92 + x93)
    x95 = -x93
    x96 = x4 * x95 - x6 * x92
    x97 = x49 * x73 - x79 * x88
    x98 = x4 * x96 - x46 * (x4 * x91 - x46 * x97) + x94
    x99 = -x10 * x74 + x35 + x65 * x67
    x100 = x12 * x99
    x101 = x10 * x68
    x102 = x5 * (-x100 - x101 - x43 + x65 * x71)
    x103 = -x101 + x25 + x65 * x71
    x104 = -x100 * x6 + x103 * x4
    x105 = x10 * x12
    x106 = -x105 * x79 + x44 + x65 * x73
    x107 = x102 + x104 * x4 + x46 * (x106 * x46 - x4 * x99)
    x108 = x49 * x86 + 2.0 * x54 - x8 * x83
    x109 = x49 * x82 + 2.0 * x62 - x88 * x89
    x110 = x108 * x4 - x109 * x46
    x111 = x49 * x95 + x70 - x8 * x92
    x112 = x49 * x91 + x78 - x88 * x97
    x113 = x111 * x4 - x112 * x46
    x114 = -x100 * x8 + x103 * x49
    x115 = -x106 * x88 + x49 * x99
    x116 = x114 * x4 - x115 * x46
    x117 = -x10 * x100 + x103 * x65 + 2.0 * x70
    x118 = -x105 * x106 + x65 * x99 + 2.0 * x78
    x119 = x117 * x4 - x118 * x46
    x120 = x111 * x49 - x112 * x88 + 2.0 * x94
    x121 = x102 + x114 * x49 - x115 * x88
    x122 = x117 * x49 - x118 * x88

    # 30 item(s)
    result[0, 0, 0] = numpy.sum(
        x48
        * (
            x0 * x42
            + x4 * x42
            + x46
            * (
                x34 * (x30 + x39)
                - x4 * x40
                + x46
                * (
                    x38 * x4
                    + x44
                    - x46 * (2.0 * x15 * x18 * x2 * x21 * x22 * x36 * x4 - x45 * x6)
                )
            )
            - 3.0 * x5 * (-x27 * x4 + x33 + x41 + x43)
        )
    )
    result[0, 1, 0] = numpy.sum(x48 * (x16 * x42 + x64))
    result[0, 2, 0] = numpy.sum(x48 * (x17 * x42 + x80))
    result[1, 0, 0] = numpy.sum(x81 * (x0 * x61 + x64))
    result[1, 1, 0] = numpy.sum(x81 * (x16 * x61 + x90))
    result[1, 2, 0] = numpy.sum(x81 * (x17 * x61 + x98))
    result[2, 0, 0] = numpy.sum(x81 * (x0 * x77 + x80))
    result[2, 1, 0] = numpy.sum(x81 * (x16 * x77 + x98))
    result[2, 2, 0] = numpy.sum(x81 * (x107 + x17 * x77))
    result[3, 0, 0] = numpy.sum(x81 * (x0 * x87 + x90))
    result[3, 1, 0] = numpy.sum(x81 * (x110 + x16 * x87))
    result[3, 2, 0] = numpy.sum(x81 * (x113 + x17 * x87))
    result[4, 0, 0] = numpy.sum(x47 * (x0 * x96 + x98))
    result[4, 1, 0] = numpy.sum(x47 * (x113 + x16 * x96))
    result[4, 2, 0] = numpy.sum(x47 * (x116 + x17 * x96))
    result[5, 0, 0] = numpy.sum(x81 * (x0 * x104 + x107))
    result[5, 1, 0] = numpy.sum(x81 * (x104 * x16 + x116))
    result[5, 2, 0] = numpy.sum(x81 * (x104 * x17 + x119))
    result[6, 0, 0] = numpy.sum(x48 * (x0 * x108 + x110))
    result[6, 1, 0] = numpy.sum(x48 * (x108 * x16 + x108 * x49 - x109 * x88 + 3.0 * x85))
    result[6, 2, 0] = numpy.sum(x48 * (x108 * x17 + x120))
    result[7, 0, 0] = numpy.sum(x81 * (x0 * x111 + x113))
    result[7, 1, 0] = numpy.sum(x81 * (x111 * x16 + x120))
    result[7, 2, 0] = numpy.sum(x81 * (x111 * x17 + x121))
    result[8, 0, 0] = numpy.sum(x81 * (x0 * x114 + x116))
    result[8, 1, 0] = numpy.sum(x81 * (x114 * x16 + x121))
    result[8, 2, 0] = numpy.sum(x81 * (x114 * x17 + x122))
    result[9, 0, 0] = numpy.sum(x48 * (x0 * x117 + x119))
    result[9, 1, 0] = numpy.sum(x48 * (x117 * x16 + x122))
    result[9, 2, 0] = numpy.sum(
        x48 * (3.0 * x102 - x105 * x118 + x117 * x17 + x117 * x65)
    )
    return result


def int3c2e3d_sph_311(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fp|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 3, 3), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = -x1 * (ax * A[1] + bx * B[1])
    x7 = -x6 - C[1]
    x8 = -x1 * (ax * A[2] + bx * B[2])
    x9 = -x8 - C[2]
    x10 = cx + x0
    x11 = x10 ** (-1.0)
    x12 = cx * x11
    x13 = x0 * x12 * (x3**2 + x7**2 + x9**2)
    x14 = boys(2, x13)
    x15 = 17.49341832762486
    x16 = A[0] - B[0]
    x17 = A[1] - B[1]
    x18 = A[2] - B[2]
    x19 = numpy.exp(-ax * bx * x1 * (x16**2 + x17**2 + x18**2))
    x20 = 2.0 * x1 * x10 ** (-1.5) * x15 * x19
    x21 = x14 * x20
    x22 = cx ** (-1.0)
    x23 = x10 ** (-0.5)
    x24 = boys(1, x13)
    x25 = 2.0 * x1 * x15 * x19 * x22 * x23 * x24 - x21
    x26 = x25 * x5
    x27 = -2.0 * x1 * x15 * x19 * x22 * x23 * x24 * x4 + x21 * x3
    x28 = -x27
    x29 = boys(3, x13)
    x30 = x20 * x29
    x31 = -2.0 * x1 * x14 * x15 * x19 * x22 * x23 * x4 + x3 * x30
    x32 = -x31
    x33 = x12 * x32
    x34 = x3 * x33
    x35 = x26 + x28 * x4 - x34
    x36 = 2.0 * x5
    x37 = x5 * (2.0 * x1 * x14 * x15 * x19 * x22 * x23 - x30)
    x38 = boys(4, x13)
    x39 = x20 * x38
    x40 = 2.0 * x1 * x15 * x19 * x22 * x23 * x29 * x4 - x3 * x39
    x41 = x12 * x40
    x42 = -x3 * x41 + x32 * x4 + x37
    x43 = x12 * x42
    x44 = -x3 * x43 + x35 * x4 - x36 * (x27 + x33)
    x45 = -x25 * x5
    x46 = x5 * (2.0 * x1 * x15 * x19 * x22 * x23 * x29 - x39)
    x47 = x20 * boys(5, x13)
    x48 = x12 * x3
    x49 = (
        x4 * x44
        + x48
        * (
            x36 * (x31 + x41)
            - x4 * x42
            + x48
            * (
                x4 * x40
                + x46
                - x48 * (2.0 * x1 * x15 * x19 * x22 * x23 * x38 * x4 - x3 * x47)
            )
        )
        - 3.0 * x5 * (-x28 * x4 + x34 + x43 + x45)
    )
    x50 = x44 * x5
    x51 = x0 * x11
    x52 = x35 * x5
    x53 = x51 * (x3 * x44 + 3.0 * x52)
    x54 = da * db * dc
    x55 = 0.2581988897471611 * x54
    x56 = x49 * x51
    x57 = x51 * x7
    x58 = x16 * x44
    x59 = x51 * x9
    x60 = -x6 - A[1]
    x61 = -2.0 * x1 * x14 * x15 * x19 * x22 * x23 * x60 + x30 * x7
    x62 = -x61
    x63 = x12 * x62
    x64 = -2.0 * x1 * x15 * x19 * x22 * x23 * x24 * x60 + x21 * x7
    x65 = -x5 * (x63 + x64)
    x66 = -x64
    x67 = x3 * x63 - x4 * x66
    x68 = -x67
    x69 = 2.0 * x1 * x15 * x19 * x22 * x23 * x29 * x60 - x39 * x7
    x70 = x12 * x69
    x71 = -x3 * x70 + x4 * x62
    x72 = x12 * x71
    x73 = -x3 * x72 + x4 * x68 + x65
    x74 = -x5 * (x61 + x70)
    x75 = 2.0 * x1 * x15 * x19 * x22 * x23 * x38 * x60 - x47 * x7
    x76 = (
        -x36 * (x67 + x72)
        + x4 * x73
        - x48 * (x4 * x71 - x48 * (x4 * x69 - x48 * x75) + x74)
    )
    x77 = x5 * x73
    x78 = x51 * (x3 * x76 + 3.0 * x77)
    x79 = x51 * (x50 + x7 * x76)
    x80 = x17 * x44
    x81 = x59 * x76
    x82 = -x8 - A[2]
    x83 = -2.0 * x1 * x14 * x15 * x19 * x22 * x23 * x82 + x30 * x9
    x84 = -x83
    x85 = x12 * x84
    x86 = -2.0 * x1 * x15 * x19 * x22 * x23 * x24 * x82 + x21 * x9
    x87 = -x5 * (x85 + x86)
    x88 = -x86
    x89 = x3 * x85 - x4 * x88
    x90 = -x89
    x91 = 2.0 * x1 * x15 * x19 * x22 * x23 * x29 * x82 - x39 * x9
    x92 = x12 * x91
    x93 = -x3 * x92 + x4 * x84
    x94 = x12 * x93
    x95 = -x3 * x94 + x4 * x90 + x87
    x96 = -x5 * (x83 + x92)
    x97 = 2.0 * x1 * x15 * x19 * x22 * x23 * x38 * x82 - x47 * x9
    x98 = (
        -x36 * (x89 + x94)
        + x4 * x95
        - x48 * (x4 * x93 - x48 * (x4 * x91 - x48 * x97) + x96)
    )
    x99 = x5 * x95
    x100 = x51 * (x3 * x98 + 3.0 * x99)
    x101 = x57 * x98
    x102 = x18 * x44
    x103 = x51 * (x50 + x9 * x98)
    x104 = x5 * x68
    x105 = 2.0 * x104
    x106 = x105 + x3 * x73
    x107 = x16 * x51
    x108 = 0.5773502691896258 * x54
    x109 = x52 + x7 * x73
    x110 = x59 * x73
    x111 = x37 + x60 * x62 - x7 * x70
    x112 = x111 * x12
    x113 = x63 * x7
    x114 = x5 * (-x112 - x113 - x45 + x60 * x66)
    x115 = -x113 + x26 + x60 * x66
    x116 = -x112 * x3 + x115 * x4
    x117 = x12 * x7
    x118 = -x117 * x75 + x46 + x60 * x69
    x119 = x114 + x116 * x4 - x48 * (x111 * x4 - x118 * x48)
    x120 = x116 * x5
    x121 = x51 * (x119 * x3 + 2.0 * x120)
    x122 = x17 * x51
    x123 = x51 * (x119 * x7 + 2.0 * x77)
    x124 = x119 * x59
    x125 = x60 * x84 - x7 * x92
    x126 = x12 * x125
    x127 = -x60 * x88 + x7 * x85
    x128 = -x5 * (x126 + x127)
    x129 = -x127
    x130 = -x126 * x3 + x129 * x4
    x131 = -x117 * x97 + x60 * x91
    x132 = x128 + x130 * x4 - x48 * (x125 * x4 - x131 * x48)
    x133 = x130 * x36
    x134 = x51 * (x132 * x3 + x133)
    x135 = x18 * x51
    x136 = x51 * (x132 * x7 + x99)
    x137 = x51 * (x132 * x9 + x77)
    x138 = x5 * x90
    x139 = 2.0 * x138
    x140 = x139 + x3 * x95
    x141 = x57 * x95
    x142 = x52 + x9 * x95
    x143 = x37 + x82 * x84 - x9 * x92
    x144 = x12 * x143
    x145 = x85 * x9
    x146 = x5 * (-x144 - x145 - x45 + x82 * x88)
    x147 = -x145 + x26 + x82 * x88
    x148 = -x144 * x3 + x147 * x4
    x149 = x12 * x9
    x150 = -x149 * x97 + x46 + x82 * x91
    x151 = x146 + x148 * x4 - x48 * (x143 * x4 - x150 * x48)
    x152 = x148 * x5
    x153 = x51 * (x151 * x3 + 2.0 * x152)
    x154 = x151 * x57
    x155 = x51 * (x151 * x9 + 2.0 * x99)
    x156 = x115 * x5
    x157 = x116 * x3 + x156
    x158 = x105 + x116 * x7
    x159 = x116 * x59
    x160 = -x112 * x7 + x115 * x60 + 2.0 * x65
    x161 = x160 * x5
    x162 = x111 * x60 - x117 * x118 + 2.0 * x74
    x163 = x160 * x4 - x162 * x48
    x164 = x51 * (x161 + x163 * x3)
    x165 = x51 * (3.0 * x120 + x163 * x7)
    x166 = x163 * x59
    x167 = -x126 * x7 + x129 * x60 + x87
    x168 = x167 * x5
    x169 = -x117 * x131 + x125 * x60 + x96
    x170 = x167 * x4 - x169 * x48
    x171 = x51 * (x168 + x170 * x3)
    x172 = x51 * (x133 + x170 * x7)
    x173 = x51 * (x120 + x170 * x9)
    x174 = x129 * x5
    x175 = x130 * x3 + x174
    x176 = x130 * x7 + x138
    x177 = x104 + x130 * x9
    x178 = -x144 * x7 + x147 * x60
    x179 = x178 * x5
    x180 = -x117 * x150 + x143 * x60
    x181 = x178 * x4 - x180 * x48
    x182 = x51 * (x179 + x181 * x3)
    x183 = x51 * (x152 + x181 * x7)
    x184 = x51 * (x133 + x181 * x9)
    x185 = x147 * x5
    x186 = x148 * x3 + x185
    x187 = x148 * x57
    x188 = x139 + x148 * x9
    x189 = -x144 * x9 + x147 * x82 + 2.0 * x87
    x190 = x189 * x5
    x191 = x143 * x82 - x149 * x150 + 2.0 * x96
    x192 = x189 * x4 - x191 * x48
    x193 = x51 * (x190 + x192 * x3)
    x194 = x192 * x57
    x195 = x51 * (3.0 * x152 + x192 * x9)
    x196 = x160 * x3
    x197 = 3.0 * x156 + x160 * x7
    x198 = x160 * x59
    x199 = 3.0 * x114 - x117 * x162 + x160 * x60
    x200 = x3 * x51
    x201 = -x117 * x169 + 2.0 * x128 + x167 * x60
    x202 = x200 * x201
    x203 = x51 * (3.0 * x168 + x201 * x7)
    x204 = x51 * (x161 + x201 * x9)
    x205 = x167 * x3
    x206 = 2.0 * x174
    x207 = x167 * x7 + x206
    x208 = x156 + x167 * x9
    x209 = -x117 * x180 + x146 + x178 * x60
    x210 = x200 * x209
    x211 = x51 * (2.0 * x179 + x209 * x7)
    x212 = x51 * (2.0 * x168 + x209 * x9)
    x213 = x178 * x3
    x214 = x178 * x7 + x185
    x215 = x178 * x9 + x206
    x216 = -x117 * x191 + x189 * x60
    x217 = x200 * x216
    x218 = x51 * (x190 + x216 * x7)
    x219 = x51 * (3.0 * x179 + x216 * x9)
    x220 = x189 * x3
    x221 = x189 * x57
    x222 = 3.0 * x185 + x189 * x9
    x223 = 3.0 * x146 - x149 * x191 + x189 * x82

    # 90 item(s)
    result[0, 0, 0] = numpy.sum(x55 * (x16 * x53 + x51 * (x3 * x49 + 4.0 * x50)))
    result[0, 0, 1] = numpy.sum(x55 * (x56 * x7 + x57 * x58))
    result[0, 0, 2] = numpy.sum(x55 * (x56 * x9 + x58 * x59))
    result[0, 1, 0] = numpy.sum(x55 * (x17 * x53 + x78))
    result[0, 1, 1] = numpy.sum(x55 * (x57 * x80 + x79))
    result[0, 1, 2] = numpy.sum(x55 * (x59 * x80 + x81))
    result[0, 2, 0] = numpy.sum(x55 * (x100 + x18 * x53))
    result[0, 2, 1] = numpy.sum(x55 * (x101 + x102 * x57))
    result[0, 2, 2] = numpy.sum(x55 * (x102 * x59 + x103))
    result[1, 0, 0] = numpy.sum(x108 * (x106 * x107 + x78))
    result[1, 0, 1] = numpy.sum(x108 * (x107 * x109 + x79))
    result[1, 0, 2] = numpy.sum(x108 * (x110 * x16 + x81))
    result[1, 1, 0] = numpy.sum(x108 * (x106 * x122 + x121))
    result[1, 1, 1] = numpy.sum(x108 * (x109 * x122 + x123))
    result[1, 1, 2] = numpy.sum(x108 * (x110 * x17 + x124))
    result[1, 2, 0] = numpy.sum(x108 * (x106 * x135 + x134))
    result[1, 2, 1] = numpy.sum(x108 * (x109 * x135 + x136))
    result[1, 2, 2] = numpy.sum(x108 * (x110 * x18 + x137))
    result[2, 0, 0] = numpy.sum(x108 * (x100 + x107 * x140))
    result[2, 0, 1] = numpy.sum(x108 * (x101 + x141 * x16))
    result[2, 0, 2] = numpy.sum(x108 * (x103 + x107 * x142))
    result[2, 1, 0] = numpy.sum(x108 * (x122 * x140 + x134))
    result[2, 1, 1] = numpy.sum(x108 * (x136 + x141 * x17))
    result[2, 1, 2] = numpy.sum(x108 * (x122 * x142 + x137))
    result[2, 2, 0] = numpy.sum(x108 * (x135 * x140 + x153))
    result[2, 2, 1] = numpy.sum(x108 * (x141 * x18 + x154))
    result[2, 2, 2] = numpy.sum(x108 * (x135 * x142 + x155))
    result[3, 0, 0] = numpy.sum(x108 * (x107 * x157 + x121))
    result[3, 0, 1] = numpy.sum(x108 * (x107 * x158 + x123))
    result[3, 0, 2] = numpy.sum(x108 * (x124 + x159 * x16))
    result[3, 1, 0] = numpy.sum(x108 * (x122 * x157 + x164))
    result[3, 1, 1] = numpy.sum(x108 * (x122 * x158 + x165))
    result[3, 1, 2] = numpy.sum(x108 * (x159 * x17 + x166))
    result[3, 2, 0] = numpy.sum(x108 * (x135 * x157 + x171))
    result[3, 2, 1] = numpy.sum(x108 * (x135 * x158 + x172))
    result[3, 2, 2] = numpy.sum(x108 * (x159 * x18 + x173))
    result[4, 0, 0] = numpy.sum(x54 * (x107 * x175 + x134))
    result[4, 0, 1] = numpy.sum(x54 * (x107 * x176 + x136))
    result[4, 0, 2] = numpy.sum(x54 * (x107 * x177 + x137))
    result[4, 1, 0] = numpy.sum(x54 * (x122 * x175 + x171))
    result[4, 1, 1] = numpy.sum(x54 * (x122 * x176 + x172))
    result[4, 1, 2] = numpy.sum(x54 * (x122 * x177 + x173))
    result[4, 2, 0] = numpy.sum(x54 * (x135 * x175 + x182))
    result[4, 2, 1] = numpy.sum(x54 * (x135 * x176 + x183))
    result[4, 2, 2] = numpy.sum(x54 * (x135 * x177 + x184))
    result[5, 0, 0] = numpy.sum(x108 * (x107 * x186 + x153))
    result[5, 0, 1] = numpy.sum(x108 * (x154 + x16 * x187))
    result[5, 0, 2] = numpy.sum(x108 * (x107 * x188 + x155))
    result[5, 1, 0] = numpy.sum(x108 * (x122 * x186 + x182))
    result[5, 1, 1] = numpy.sum(x108 * (x17 * x187 + x183))
    result[5, 1, 2] = numpy.sum(x108 * (x122 * x188 + x184))
    result[5, 2, 0] = numpy.sum(x108 * (x135 * x186 + x193))
    result[5, 2, 1] = numpy.sum(x108 * (x18 * x187 + x194))
    result[5, 2, 2] = numpy.sum(x108 * (x135 * x188 + x195))
    result[6, 0, 0] = numpy.sum(x55 * (x107 * x196 + x164))
    result[6, 0, 1] = numpy.sum(x55 * (x107 * x197 + x165))
    result[6, 0, 2] = numpy.sum(x55 * (x16 * x198 + x166))
    result[6, 1, 0] = numpy.sum(x55 * (x122 * x196 + x199 * x200))
    result[6, 1, 1] = numpy.sum(x55 * (x122 * x197 + x51 * (4.0 * x161 + x199 * x7)))
    result[6, 1, 2] = numpy.sum(x55 * (x17 * x198 + x199 * x59))
    result[6, 2, 0] = numpy.sum(x55 * (x135 * x196 + x202))
    result[6, 2, 1] = numpy.sum(x55 * (x135 * x197 + x203))
    result[6, 2, 2] = numpy.sum(x55 * (x18 * x198 + x204))
    result[7, 0, 0] = numpy.sum(x108 * (x107 * x205 + x171))
    result[7, 0, 1] = numpy.sum(x108 * (x107 * x207 + x172))
    result[7, 0, 2] = numpy.sum(x108 * (x107 * x208 + x173))
    result[7, 1, 0] = numpy.sum(x108 * (x122 * x205 + x202))
    result[7, 1, 1] = numpy.sum(x108 * (x122 * x207 + x203))
    result[7, 1, 2] = numpy.sum(x108 * (x122 * x208 + x204))
    result[7, 2, 0] = numpy.sum(x108 * (x135 * x205 + x210))
    result[7, 2, 1] = numpy.sum(x108 * (x135 * x207 + x211))
    result[7, 2, 2] = numpy.sum(x108 * (x135 * x208 + x212))
    result[8, 0, 0] = numpy.sum(x108 * (x107 * x213 + x182))
    result[8, 0, 1] = numpy.sum(x108 * (x107 * x214 + x183))
    result[8, 0, 2] = numpy.sum(x108 * (x107 * x215 + x184))
    result[8, 1, 0] = numpy.sum(x108 * (x122 * x213 + x210))
    result[8, 1, 1] = numpy.sum(x108 * (x122 * x214 + x211))
    result[8, 1, 2] = numpy.sum(x108 * (x122 * x215 + x212))
    result[8, 2, 0] = numpy.sum(x108 * (x135 * x213 + x217))
    result[8, 2, 1] = numpy.sum(x108 * (x135 * x214 + x218))
    result[8, 2, 2] = numpy.sum(x108 * (x135 * x215 + x219))
    result[9, 0, 0] = numpy.sum(x55 * (x107 * x220 + x193))
    result[9, 0, 1] = numpy.sum(x55 * (x16 * x221 + x194))
    result[9, 0, 2] = numpy.sum(x55 * (x107 * x222 + x195))
    result[9, 1, 0] = numpy.sum(x55 * (x122 * x220 + x217))
    result[9, 1, 1] = numpy.sum(x55 * (x17 * x221 + x218))
    result[9, 1, 2] = numpy.sum(x55 * (x122 * x222 + x219))
    result[9, 2, 0] = numpy.sum(x55 * (x135 * x220 + x200 * x223))
    result[9, 2, 1] = numpy.sum(x55 * (x18 * x221 + x223 * x57))
    result[9, 2, 2] = numpy.sum(x55 * (x135 * x222 + x51 * (4.0 * x190 + x223 * x9)))
    return result


def int3c2e3d_sph_312(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fp|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 3, 6), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = x3**2
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x0
    x14 = x13 ** (-1.0)
    x15 = cx * x14
    x16 = x0 * x15 * (x12 + x6 + x9)
    x17 = boys(3, x16)
    x18 = 17.49341832762486
    x19 = A[0] - B[0]
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x1 * (x19**2 + x20**2 + x21**2))
    x23 = 2.0 * x1 * x13 ** (-1.5) * x18 * x22
    x24 = x17 * x23
    x25 = cx ** (-1.0)
    x26 = x13 ** (-0.5)
    x27 = boys(2, x16)
    x28 = 2.0 * x1 * x18 * x22 * x25 * x26 * x27 - x24
    x29 = x28 * x5
    x30 = -2.0 * x1 * x18 * x22 * x25 * x26 * x27 * x4 + x24 * x3
    x31 = -x30
    x32 = boys(4, x16)
    x33 = x23 * x32
    x34 = -2.0 * x1 * x17 * x18 * x22 * x25 * x26 * x4 + x3 * x33
    x35 = -x34
    x36 = x15 * x35
    x37 = x3 * x36
    x38 = x29 + x31 * x4 - x37
    x39 = 2.0 * x5
    x40 = x5 * (2.0 * x1 * x17 * x18 * x22 * x25 * x26 - x33)
    x41 = boys(5, x16)
    x42 = x23 * x41
    x43 = 2.0 * x1 * x18 * x22 * x25 * x26 * x32 * x4 - x3 * x42
    x44 = x15 * x43
    x45 = -x3 * x44 + x35 * x4 + x40
    x46 = x15 * x45
    x47 = -x3 * x46 + x38 * x4 - x39 * (x30 + x36)
    x48 = -x28 * x5
    x49 = 3.0 * x5
    x50 = x5 * (2.0 * x1 * x18 * x22 * x25 * x26 * x32 - x42)
    x51 = x23 * boys(6, x16)
    x52 = x15 * x3
    x53 = (
        x4 * x47
        - x49 * (-x31 * x4 + x37 + x46 + x48)
        + x52
        * (
            x39 * (x34 + x44)
            - x4 * x45
            + x52
            * (
                x4 * x43
                + x50
                - x52 * (2.0 * x1 * x18 * x22 * x25 * x26 * x4 * x41 - x3 * x51)
            )
        )
    )
    x54 = x3 * x53
    x55 = x47 * x5
    x56 = 4.0 * x55
    x57 = x0 * x14
    x58 = x3 * x57
    x59 = x3 * x47
    x60 = x38 * x5
    x61 = 3.0 * x60
    x62 = x59 + x61
    x63 = x5 * x57
    x64 = x31 * x5
    x65 = x49 * x57
    x66 = x58 * x62 + x65 * (x3 * x38 + 2.0 * x64)
    x67 = x19 * x57
    x68 = da * db * dc
    x69 = 0.06666666666666667 * x68
    x70 = 2.23606797749979 * x69
    x71 = x57 * x8
    x72 = x71 * (x59 + x61)
    x73 = 3.872983346207417 * x69
    x74 = x11 * x57
    x75 = x74 * (x59 + x61)
    x76 = x0**2 / x13**2
    x77 = x53 * x76
    x78 = x76 * x9
    x79 = x19 * x47
    x80 = x76 * x8
    x81 = x11 * x80
    x82 = x12 * x76
    x83 = -x7 - A[1]
    x84 = -2.0 * x1 * x17 * x18 * x22 * x25 * x26 * x83 + x33 * x8
    x85 = -x84
    x86 = x15 * x85
    x87 = -2.0 * x1 * x18 * x22 * x25 * x26 * x27 * x83 + x24 * x8
    x88 = -x5 * (x86 + x87)
    x89 = -x87
    x90 = x3 * x86 - x4 * x89
    x91 = -x90
    x92 = 2.0 * x1 * x18 * x22 * x25 * x26 * x32 * x83 - x42 * x8
    x93 = x15 * x92
    x94 = -x3 * x93 + x4 * x85
    x95 = x15 * x94
    x96 = -x3 * x95 + x4 * x91 + x88
    x97 = -x5 * (x84 + x93)
    x98 = 2.0 * x1 * x18 * x22 * x25 * x26 * x41 * x83 - x51 * x8
    x99 = (
        -x39 * (x90 + x95)
        + x4 * x96
        - x52 * (x4 * x94 - x52 * (x4 * x92 - x52 * x98) + x97)
    )
    x100 = x3 * x99
    x101 = x5 * x96
    x102 = 3.0 * x101
    x103 = x3 * x96
    x104 = x5 * x91
    x105 = 2.0 * x104
    x106 = x103 + x105
    x107 = x57 * (x106 * x65 + x58 * (x100 + x102))
    x108 = x20 * x57
    x109 = x8 * x99
    x110 = x109 + x55
    x111 = x8 * x96
    x112 = x111 + x60
    x113 = x57 * (x110 * x58 + x112 * x65)
    x114 = x57 * x74 * (x100 + x102)
    x115 = x57 * x71 * (x110 + x55)
    x116 = x20 * x47
    x117 = x55 * x74
    x118 = x57 * (x109 * x74 + x117)
    x119 = x82 * x99
    x120 = -x10 - A[2]
    x121 = -2.0 * x1 * x120 * x17 * x18 * x22 * x25 * x26 + x11 * x33
    x122 = -x121
    x123 = x122 * x15
    x124 = -2.0 * x1 * x120 * x18 * x22 * x25 * x26 * x27 + x11 * x24
    x125 = -x5 * (x123 + x124)
    x126 = -x124
    x127 = x123 * x3 - x126 * x4
    x128 = -x127
    x129 = 2.0 * x1 * x120 * x18 * x22 * x25 * x26 * x32 - x11 * x42
    x130 = x129 * x15
    x131 = x122 * x4 - x130 * x3
    x132 = x131 * x15
    x133 = x125 + x128 * x4 - x132 * x3
    x134 = -x5 * (x121 + x130)
    x135 = 2.0 * x1 * x120 * x18 * x22 * x25 * x26 * x41 - x11 * x51
    x136 = (
        x133 * x4
        - x39 * (x127 + x132)
        - x52 * (x131 * x4 + x134 - x52 * (x129 * x4 - x135 * x52))
    )
    x137 = x136 * x3
    x138 = x133 * x5
    x139 = 3.0 * x138
    x140 = x133 * x3
    x141 = x128 * x5
    x142 = 2.0 * x141
    x143 = x140 + x142
    x144 = x57 * (x143 * x65 + x58 * (x137 + x139))
    x145 = x21 * x57
    x146 = x57 * x71 * (x137 + x139)
    x147 = x11 * x136 + x55
    x148 = x11 * x133 + x60
    x149 = x57 * (x147 * x58 + x148 * x65)
    x150 = x136 * x78
    x151 = x21 * x47
    x152 = x147 * x80
    x153 = x57 * (x117 + x147 * x74)
    x154 = x5 * x89
    x155 = x39 * x57
    x156 = x106 * x58 + x155 * (x154 + x3 * x91)
    x157 = 0.3333333333333333 * x68
    x158 = x155 * (x64 + x8 * x91)
    x159 = x112 * x58 + x158
    x160 = 1.732050807568877 * x157
    x161 = x105 * x74
    x162 = x103 * x74 + x161
    x163 = x71 * (x112 + x60)
    x164 = x60 * x74
    x165 = x111 * x74 + x164
    x166 = x82 * x96
    x167 = x40 - x8 * x93 + x83 * x85
    x168 = x15 * x167
    x169 = x8 * x86
    x170 = x5 * (-x168 - x169 - x48 + x83 * x89)
    x171 = -x169 + x29 + x83 * x89
    x172 = -x168 * x3 + x171 * x4
    x173 = x15 * x8
    x174 = -x173 * x98 + x50 + x83 * x92
    x175 = x170 + x172 * x4 - x52 * (x167 * x4 - x174 * x52)
    x176 = x175 * x3
    x177 = x172 * x5
    x178 = 2.0 * x177
    x179 = x171 * x5
    x180 = x172 * x3
    x181 = x179 + x180
    x182 = x57 * (x155 * x181 + x58 * (x176 + x178))
    x183 = x175 * x8
    x184 = 2.0 * x101
    x185 = x183 + x184
    x186 = x172 * x8
    x187 = x105 + x186
    x188 = x57 * (x155 * x187 + x185 * x58)
    x189 = x57 * x74 * (x176 + x178)
    x190 = x57 * (x112 * x155 + x185 * x71)
    x191 = x57 * x74 * (x183 + x184)
    x192 = x175 * x82
    x193 = x122 * x83 - x130 * x8
    x194 = x15 * x193
    x195 = x123 * x8 - x126 * x83
    x196 = -x5 * (x194 + x195)
    x197 = -x195
    x198 = -x194 * x3 + x197 * x4
    x199 = x129 * x83 - x135 * x173
    x200 = x196 + x198 * x4 - x52 * (x193 * x4 - x199 * x52)
    x201 = x198 * x39
    x202 = x197 * x5
    x203 = x198 * x3 + x202
    x204 = x57 * (x155 * x203 + x58 * (x200 * x3 + x201))
    x205 = x138 + x200 * x8
    x206 = x141 + x198 * x8
    x207 = x155 * x206
    x208 = x57 * (x205 * x58 + x207)
    x209 = x101 + x11 * x200
    x210 = x104 + x11 * x198
    x211 = x155 * x210
    x212 = x57 * (x209 * x58 + x211)
    x213 = x57 * x71 * (x138 + x205)
    x214 = x57 * (x148 * x63 + x209 * x71)
    x215 = x57 * x74 * (x101 + x209)
    x216 = x126 * x5
    x217 = x143 * x58 + x155 * (x128 * x3 + x216)
    x218 = x71 * (x140 + x142)
    x219 = x11 * x128 + x64
    x220 = x155 * x219
    x221 = x148 * x58 + x220
    x222 = x133 * x78
    x223 = x148 * x80
    x224 = x148 * x74 + x164
    x225 = -x11 * x130 + x120 * x122 + x40
    x226 = x15 * x225
    x227 = x11 * x123
    x228 = x5 * (x120 * x126 - x226 - x227 - x48)
    x229 = x120 * x126 - x227 + x29
    x230 = -x226 * x3 + x229 * x4
    x231 = x11 * x15
    x232 = x120 * x129 - x135 * x231 + x50
    x233 = x228 + x230 * x4 - x52 * (x225 * x4 - x232 * x52)
    x234 = x233 * x3
    x235 = x230 * x5
    x236 = 2.0 * x235
    x237 = x229 * x5
    x238 = x230 * x3
    x239 = x237 + x238
    x240 = x57 * (x155 * x239 + x58 * (x234 + x236))
    x241 = x57 * x71 * (x234 + x236)
    x242 = x11 * x233 + 2.0 * x138
    x243 = x11 * x230 + x142
    x244 = x57 * (x155 * x243 + x242 * x58)
    x245 = x233 * x78
    x246 = x242 * x80
    x247 = x57 * (x148 * x155 + x242 * x74)
    x248 = x58 * (x179 + x181)
    x249 = 2.0 * x154 + x171 * x8
    x250 = x187 * x58 + x249 * x63
    x251 = x179 * x74
    x252 = x180 * x74 + x251
    x253 = x158 + x187 * x71
    x254 = x161 + x186 * x74
    x255 = x172 * x82
    x256 = -x168 * x8 + x171 * x83 + 2.0 * x88
    x257 = x256 * x5
    x258 = x167 * x83 - x173 * x174 + 2.0 * x97
    x259 = x256 * x4 - x258 * x52
    x260 = x259 * x3
    x261 = x57 * x58 * (2.0 * x257 + x260)
    x262 = x256 * x8
    x263 = 3.0 * x179
    x264 = x262 + x263
    x265 = x264 * x63
    x266 = x259 * x8
    x267 = 3.0 * x177
    x268 = x266 + x267
    x269 = x57 * (x265 + x268 * x58)
    x270 = x257 * x74
    x271 = x57 * (x260 * x74 + x270)
    x272 = x57 * (x187 * x65 + x268 * x71)
    x273 = x57 * x74 * (x266 + x267)
    x274 = x259 * x82
    x275 = x125 - x194 * x8 + x197 * x83
    x276 = x275 * x5
    x277 = x134 - x173 * x199 + x193 * x83
    x278 = x275 * x4 - x277 * x52
    x279 = x57 * x58 * (2.0 * x276 + x278 * x3)
    x280 = 2.0 * x202
    x281 = x275 * x8 + x280
    x282 = x201 + x278 * x8
    x283 = x57 * (x281 * x63 + x282 * x58)
    x284 = x11 * x275 + x179
    x285 = x11 * x278 + x177
    x286 = x57 * (x284 * x63 + x285 * x58)
    x287 = x57 * (x207 + x282 * x71)
    x288 = x57 * (x211 + x285 * x71)
    x289 = x57 * x74 * (x177 + x285)
    x290 = x58 * (x202 + x203)
    x291 = x197 * x8 + x216
    x292 = x206 * x58 + x291 * x63
    x293 = x11 * x197 + x154
    x294 = x210 * x58 + x293 * x63
    x295 = x71 * (x141 + x206)
    x296 = x210 * x71 + x219 * x63
    x297 = x74 * (x104 + x210)
    x298 = -x226 * x8 + x229 * x83
    x299 = x298 * x5
    x300 = -x173 * x232 + x225 * x83
    x301 = x298 * x4 - x300 * x52
    x302 = x57 * x58 * (2.0 * x299 + x3 * x301)
    x303 = x237 + x298 * x8
    x304 = x235 + x301 * x8
    x305 = x57 * (x303 * x63 + x304 * x58)
    x306 = x11 * x298 + x280
    x307 = x11 * x301 + x201
    x308 = x57 * (x306 * x63 + x307 * x58)
    x309 = x57 * x71 * (x235 + x304)
    x310 = x57 * (x243 * x63 + x307 * x71)
    x311 = x57 * (x211 + x307 * x74)
    x312 = x58 * (x237 + x239)
    x313 = x237 * x71
    x314 = x238 * x71 + x313
    x315 = x11 * x229 + 2.0 * x216
    x316 = x315 * x63
    x317 = x243 * x58 + x316
    x318 = x230 * x78
    x319 = x243 * x80
    x320 = x220 + x243 * x74
    x321 = -x11 * x226 + x120 * x229 + 2.0 * x125
    x322 = x321 * x5
    x323 = x120 * x225 + 2.0 * x134 - x231 * x232
    x324 = x321 * x4 - x323 * x52
    x325 = x3 * x324
    x326 = x57 * x58 * (2.0 * x322 + x325)
    x327 = x322 * x71
    x328 = x57 * (x325 * x71 + x327)
    x329 = x11 * x321 + 3.0 * x237
    x330 = x329 * x63
    x331 = x11 * x324 + 3.0 * x235
    x332 = x57 * (x330 + x331 * x58)
    x333 = x324 * x78
    x334 = x331 * x80
    x335 = x57 * (x243 * x65 + x331 * x74)
    x336 = x6 * x76
    x337 = x19 * x256
    x338 = x3 * x76
    x339 = x264 * x338
    x340 = x11 * x338
    x341 = x249 * x65 + x264 * x71
    x342 = x74 * (x262 + x263)
    x343 = 3.0 * x170 - x173 * x258 + x256 * x83
    x344 = x20 * x256
    x345 = x343 * x8
    x346 = 4.0 * x257
    x347 = x345 + x346
    x348 = -x173 * x277 + 2.0 * x196 + x275 * x83
    x349 = x336 * x348
    x350 = x21 * x256
    x351 = 3.0 * x276 + x348 * x8
    x352 = x338 * x351
    x353 = x11 * x348 + x257
    x354 = x338 * x353
    x355 = x57 * (x281 * x65 + x351 * x71)
    x356 = x57 * (x284 * x65 + x353 * x71)
    x357 = x57 * (x270 + x353 * x74)
    x358 = x275 * x336
    x359 = x19 * x338
    x360 = x155 * x291 + x281 * x71
    x361 = x155 * x293
    x362 = x284 * x71 + x361
    x363 = x251 + x284 * x74
    x364 = x20 * x338
    x365 = -x173 * x300 + x228 + x298 * x83
    x366 = x336 * x365
    x367 = 2.0 * x299 + x365 * x8
    x368 = x338 * x367
    x369 = x21 * x338
    x370 = x11 * x365 + 2.0 * x276
    x371 = x338 * x370
    x372 = x57 * (x155 * x303 + x367 * x71)
    x373 = x57 * (x155 * x306 + x370 * x71)
    x374 = x57 * (x155 * x284 + x370 * x74)
    x375 = x298 * x336
    x376 = x303 * x71 + x313
    x377 = x306 * x71 + x316
    x378 = x306 * x74 + x361
    x379 = -x173 * x323 + x321 * x83
    x380 = x336 * x379
    x381 = x322 + x379 * x8
    x382 = x338 * x381
    x383 = x11 * x379 + 3.0 * x299
    x384 = x338 * x383
    x385 = x57 * (x327 + x381 * x71)
    x386 = x57 * (x330 + x383 * x71)
    x387 = x57 * (x306 * x65 + x383 * x74)
    x388 = x19 * x321
    x389 = x3 * x80
    x390 = x329 * x80
    x391 = x315 * x65 + x329 * x74
    x392 = x20 * x321
    x393 = x120 * x321 + 3.0 * x228 - x231 * x323
    x394 = x21 * x321
    x395 = x11 * x393 + 4.0 * x322

    # 180 item(s)
    result[0, 0, 0] = numpy.sum(
        x70 * (x57 * (x58 * (x54 + x56) + 4.0 * x62 * x63) + x66 * x67)
    )
    result[0, 0, 1] = numpy.sum(x73 * (x57 * x71 * (x54 + x56) + x67 * x72))
    result[0, 0, 2] = numpy.sum(x73 * (x57 * x74 * (x54 + x56) + x67 * x75))
    result[0, 0, 3] = numpy.sum(x70 * (x77 * x9 + x78 * x79))
    result[0, 0, 4] = numpy.sum(x73 * (x11 * x77 * x8 + x79 * x81))
    result[0, 0, 5] = numpy.sum(x70 * (x12 * x77 + x79 * x82))
    result[0, 1, 0] = numpy.sum(x70 * (x107 + x108 * x66))
    result[0, 1, 1] = numpy.sum(x73 * (x108 * x72 + x113))
    result[0, 1, 2] = numpy.sum(x73 * (x108 * x75 + x114))
    result[0, 1, 3] = numpy.sum(x70 * (x115 + x116 * x78))
    result[0, 1, 4] = numpy.sum(x73 * (x116 * x81 + x118))
    result[0, 1, 5] = numpy.sum(x70 * (x116 * x82 + x119))
    result[0, 2, 0] = numpy.sum(x70 * (x144 + x145 * x66))
    result[0, 2, 1] = numpy.sum(x73 * (x145 * x72 + x146))
    result[0, 2, 2] = numpy.sum(x73 * (x145 * x75 + x149))
    result[0, 2, 3] = numpy.sum(x70 * (x150 + x151 * x78))
    result[0, 2, 4] = numpy.sum(x73 * (x151 * x81 + x152))
    result[0, 2, 5] = numpy.sum(x70 * (x151 * x82 + x153))
    result[1, 0, 0] = numpy.sum(x157 * (x107 + x156 * x67))
    result[1, 0, 1] = numpy.sum(x160 * (x113 + x159 * x67))
    result[1, 0, 2] = numpy.sum(x160 * (x114 + x162 * x67))
    result[1, 0, 3] = numpy.sum(x157 * (x115 + x163 * x67))
    result[1, 0, 4] = numpy.sum(x160 * (x118 + x165 * x67))
    result[1, 0, 5] = numpy.sum(x157 * (x119 + x166 * x19))
    result[1, 1, 0] = numpy.sum(x157 * (x108 * x156 + x182))
    result[1, 1, 1] = numpy.sum(x160 * (x108 * x159 + x188))
    result[1, 1, 2] = numpy.sum(x160 * (x108 * x162 + x189))
    result[1, 1, 3] = numpy.sum(x157 * (x108 * x163 + x190))
    result[1, 1, 4] = numpy.sum(x160 * (x108 * x165 + x191))
    result[1, 1, 5] = numpy.sum(x157 * (x166 * x20 + x192))
    result[1, 2, 0] = numpy.sum(x157 * (x145 * x156 + x204))
    result[1, 2, 1] = numpy.sum(x160 * (x145 * x159 + x208))
    result[1, 2, 2] = numpy.sum(x160 * (x145 * x162 + x212))
    result[1, 2, 3] = numpy.sum(x157 * (x145 * x163 + x213))
    result[1, 2, 4] = numpy.sum(x160 * (x145 * x165 + x214))
    result[1, 2, 5] = numpy.sum(x157 * (x166 * x21 + x215))
    result[2, 0, 0] = numpy.sum(x157 * (x144 + x217 * x67))
    result[2, 0, 1] = numpy.sum(x160 * (x146 + x218 * x67))
    result[2, 0, 2] = numpy.sum(x160 * (x149 + x221 * x67))
    result[2, 0, 3] = numpy.sum(x157 * (x150 + x19 * x222))
    result[2, 0, 4] = numpy.sum(x160 * (x152 + x19 * x223))
    result[2, 0, 5] = numpy.sum(x157 * (x153 + x224 * x67))
    result[2, 1, 0] = numpy.sum(x157 * (x108 * x217 + x204))
    result[2, 1, 1] = numpy.sum(x160 * (x108 * x218 + x208))
    result[2, 1, 2] = numpy.sum(x160 * (x108 * x221 + x212))
    result[2, 1, 3] = numpy.sum(x157 * (x20 * x222 + x213))
    result[2, 1, 4] = numpy.sum(x160 * (x20 * x223 + x214))
    result[2, 1, 5] = numpy.sum(x157 * (x108 * x224 + x215))
    result[2, 2, 0] = numpy.sum(x157 * (x145 * x217 + x240))
    result[2, 2, 1] = numpy.sum(x160 * (x145 * x218 + x241))
    result[2, 2, 2] = numpy.sum(x160 * (x145 * x221 + x244))
    result[2, 2, 3] = numpy.sum(x157 * (x21 * x222 + x245))
    result[2, 2, 4] = numpy.sum(x160 * (x21 * x223 + x246))
    result[2, 2, 5] = numpy.sum(x157 * (x145 * x224 + x247))
    result[3, 0, 0] = numpy.sum(x157 * (x182 + x248 * x67))
    result[3, 0, 1] = numpy.sum(x160 * (x188 + x250 * x67))
    result[3, 0, 2] = numpy.sum(x160 * (x189 + x252 * x67))
    result[3, 0, 3] = numpy.sum(x157 * (x190 + x253 * x67))
    result[3, 0, 4] = numpy.sum(x160 * (x191 + x254 * x67))
    result[3, 0, 5] = numpy.sum(x157 * (x19 * x255 + x192))
    result[3, 1, 0] = numpy.sum(x157 * (x108 * x248 + x261))
    result[3, 1, 1] = numpy.sum(x160 * (x108 * x250 + x269))
    result[3, 1, 2] = numpy.sum(x160 * (x108 * x252 + x271))
    result[3, 1, 3] = numpy.sum(x157 * (x108 * x253 + x272))
    result[3, 1, 4] = numpy.sum(x160 * (x108 * x254 + x273))
    result[3, 1, 5] = numpy.sum(x157 * (x20 * x255 + x274))
    result[3, 2, 0] = numpy.sum(x157 * (x145 * x248 + x279))
    result[3, 2, 1] = numpy.sum(x160 * (x145 * x250 + x283))
    result[3, 2, 2] = numpy.sum(x160 * (x145 * x252 + x286))
    result[3, 2, 3] = numpy.sum(x157 * (x145 * x253 + x287))
    result[3, 2, 4] = numpy.sum(x160 * (x145 * x254 + x288))
    result[3, 2, 5] = numpy.sum(x157 * (x21 * x255 + x289))
    result[4, 0, 0] = numpy.sum(x160 * (x204 + x290 * x67))
    result[4, 0, 1] = numpy.sum(x68 * (x208 + x292 * x67))
    result[4, 0, 2] = numpy.sum(x68 * (x212 + x294 * x67))
    result[4, 0, 3] = numpy.sum(x160 * (x213 + x295 * x67))
    result[4, 0, 4] = numpy.sum(x68 * (x214 + x296 * x67))
    result[4, 0, 5] = numpy.sum(x160 * (x215 + x297 * x67))
    result[4, 1, 0] = numpy.sum(x160 * (x108 * x290 + x279))
    result[4, 1, 1] = numpy.sum(x68 * (x108 * x292 + x283))
    result[4, 1, 2] = numpy.sum(x68 * (x108 * x294 + x286))
    result[4, 1, 3] = numpy.sum(x160 * (x108 * x295 + x287))
    result[4, 1, 4] = numpy.sum(x68 * (x108 * x296 + x288))
    result[4, 1, 5] = numpy.sum(x160 * (x108 * x297 + x289))
    result[4, 2, 0] = numpy.sum(x160 * (x145 * x290 + x302))
    result[4, 2, 1] = numpy.sum(x68 * (x145 * x292 + x305))
    result[4, 2, 2] = numpy.sum(x68 * (x145 * x294 + x308))
    result[4, 2, 3] = numpy.sum(x160 * (x145 * x295 + x309))
    result[4, 2, 4] = numpy.sum(x68 * (x145 * x296 + x310))
    result[4, 2, 5] = numpy.sum(x160 * (x145 * x297 + x311))
    result[5, 0, 0] = numpy.sum(x157 * (x240 + x312 * x67))
    result[5, 0, 1] = numpy.sum(x160 * (x241 + x314 * x67))
    result[5, 0, 2] = numpy.sum(x160 * (x244 + x317 * x67))
    result[5, 0, 3] = numpy.sum(x157 * (x19 * x318 + x245))
    result[5, 0, 4] = numpy.sum(x160 * (x19 * x319 + x246))
    result[5, 0, 5] = numpy.sum(x157 * (x247 + x320 * x67))
    result[5, 1, 0] = numpy.sum(x157 * (x108 * x312 + x302))
    result[5, 1, 1] = numpy.sum(x160 * (x108 * x314 + x305))
    result[5, 1, 2] = numpy.sum(x160 * (x108 * x317 + x308))
    result[5, 1, 3] = numpy.sum(x157 * (x20 * x318 + x309))
    result[5, 1, 4] = numpy.sum(x160 * (x20 * x319 + x310))
    result[5, 1, 5] = numpy.sum(x157 * (x108 * x320 + x311))
    result[5, 2, 0] = numpy.sum(x157 * (x145 * x312 + x326))
    result[5, 2, 1] = numpy.sum(x160 * (x145 * x314 + x328))
    result[5, 2, 2] = numpy.sum(x160 * (x145 * x317 + x332))
    result[5, 2, 3] = numpy.sum(x157 * (x21 * x318 + x333))
    result[5, 2, 4] = numpy.sum(x160 * (x21 * x319 + x334))
    result[5, 2, 5] = numpy.sum(x157 * (x145 * x320 + x335))
    result[6, 0, 0] = numpy.sum(x70 * (x261 + x336 * x337))
    result[6, 0, 1] = numpy.sum(x73 * (x19 * x339 + x269))
    result[6, 0, 2] = numpy.sum(x73 * (x271 + x337 * x340))
    result[6, 0, 3] = numpy.sum(x70 * (x272 + x341 * x67))
    result[6, 0, 4] = numpy.sum(x73 * (x273 + x342 * x67))
    result[6, 0, 5] = numpy.sum(x70 * (x274 + x337 * x82))
    result[6, 1, 0] = numpy.sum(x336 * x70 * (x343 + x344))
    result[6, 1, 1] = numpy.sum(x73 * (x20 * x339 + x338 * x347))
    result[6, 1, 2] = numpy.sum(x340 * x73 * (x343 + x344))
    result[6, 1, 3] = numpy.sum(x70 * (x108 * x341 + x57 * (4.0 * x265 + x347 * x71)))
    result[6, 1, 4] = numpy.sum(x73 * (x108 * x342 + x57 * x74 * (x345 + x346)))
    result[6, 1, 5] = numpy.sum(x70 * x82 * (x343 + x344))
    result[6, 2, 0] = numpy.sum(x70 * (x336 * x350 + x349))
    result[6, 2, 1] = numpy.sum(x73 * (x21 * x339 + x352))
    result[6, 2, 2] = numpy.sum(x73 * (x340 * x350 + x354))
    result[6, 2, 3] = numpy.sum(x70 * (x145 * x341 + x355))
    result[6, 2, 4] = numpy.sum(x73 * (x145 * x342 + x356))
    result[6, 2, 5] = numpy.sum(x70 * (x350 * x82 + x357))
    result[7, 0, 0] = numpy.sum(x157 * (x19 * x358 + x279))
    result[7, 0, 1] = numpy.sum(x160 * (x281 * x359 + x283))
    result[7, 0, 2] = numpy.sum(x160 * (x284 * x359 + x286))
    result[7, 0, 3] = numpy.sum(x157 * (x287 + x360 * x67))
    result[7, 0, 4] = numpy.sum(x160 * (x288 + x362 * x67))
    result[7, 0, 5] = numpy.sum(x157 * (x289 + x363 * x67))
    result[7, 1, 0] = numpy.sum(x157 * (x20 * x358 + x349))
    result[7, 1, 1] = numpy.sum(x160 * (x281 * x364 + x352))
    result[7, 1, 2] = numpy.sum(x160 * (x284 * x364 + x354))
    result[7, 1, 3] = numpy.sum(x157 * (x108 * x360 + x355))
    result[7, 1, 4] = numpy.sum(x160 * (x108 * x362 + x356))
    result[7, 1, 5] = numpy.sum(x157 * (x108 * x363 + x357))
    result[7, 2, 0] = numpy.sum(x157 * (x21 * x358 + x366))
    result[7, 2, 1] = numpy.sum(x160 * (x281 * x369 + x368))
    result[7, 2, 2] = numpy.sum(x160 * (x284 * x369 + x371))
    result[7, 2, 3] = numpy.sum(x157 * (x145 * x360 + x372))
    result[7, 2, 4] = numpy.sum(x160 * (x145 * x362 + x373))
    result[7, 2, 5] = numpy.sum(x157 * (x145 * x363 + x374))
    result[8, 0, 0] = numpy.sum(x157 * (x19 * x375 + x302))
    result[8, 0, 1] = numpy.sum(x160 * (x303 * x359 + x305))
    result[8, 0, 2] = numpy.sum(x160 * (x306 * x359 + x308))
    result[8, 0, 3] = numpy.sum(x157 * (x309 + x376 * x67))
    result[8, 0, 4] = numpy.sum(x160 * (x310 + x377 * x67))
    result[8, 0, 5] = numpy.sum(x157 * (x311 + x378 * x67))
    result[8, 1, 0] = numpy.sum(x157 * (x20 * x375 + x366))
    result[8, 1, 1] = numpy.sum(x160 * (x303 * x364 + x368))
    result[8, 1, 2] = numpy.sum(x160 * (x306 * x364 + x371))
    result[8, 1, 3] = numpy.sum(x157 * (x108 * x376 + x372))
    result[8, 1, 4] = numpy.sum(x160 * (x108 * x377 + x373))
    result[8, 1, 5] = numpy.sum(x157 * (x108 * x378 + x374))
    result[8, 2, 0] = numpy.sum(x157 * (x21 * x375 + x380))
    result[8, 2, 1] = numpy.sum(x160 * (x303 * x369 + x382))
    result[8, 2, 2] = numpy.sum(x160 * (x306 * x369 + x384))
    result[8, 2, 3] = numpy.sum(x157 * (x145 * x376 + x385))
    result[8, 2, 4] = numpy.sum(x160 * (x145 * x377 + x386))
    result[8, 2, 5] = numpy.sum(x157 * (x145 * x378 + x387))
    result[9, 0, 0] = numpy.sum(x70 * (x326 + x336 * x388))
    result[9, 0, 1] = numpy.sum(x73 * (x328 + x388 * x389))
    result[9, 0, 2] = numpy.sum(x73 * (x329 * x359 + x332))
    result[9, 0, 3] = numpy.sum(x70 * (x333 + x388 * x78))
    result[9, 0, 4] = numpy.sum(x73 * (x19 * x390 + x334))
    result[9, 0, 5] = numpy.sum(x70 * (x335 + x391 * x67))
    result[9, 1, 0] = numpy.sum(x70 * (x336 * x392 + x380))
    result[9, 1, 1] = numpy.sum(x73 * (x382 + x389 * x392))
    result[9, 1, 2] = numpy.sum(x73 * (x329 * x364 + x384))
    result[9, 1, 3] = numpy.sum(x70 * (x385 + x392 * x78))
    result[9, 1, 4] = numpy.sum(x73 * (x20 * x390 + x386))
    result[9, 1, 5] = numpy.sum(x70 * (x108 * x391 + x387))
    result[9, 2, 0] = numpy.sum(x336 * x70 * (x393 + x394))
    result[9, 2, 1] = numpy.sum(x389 * x73 * (x393 + x394))
    result[9, 2, 2] = numpy.sum(x73 * (x329 * x369 + x338 * x395))
    result[9, 2, 3] = numpy.sum(x70 * x78 * (x393 + x394))
    result[9, 2, 4] = numpy.sum(x73 * (x21 * x390 + x395 * x80))
    result[9, 2, 5] = numpy.sum(x70 * (x145 * x391 + x57 * (4.0 * x330 + x395 * x74)))
    return result


def int3c2e3d_sph_313(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fp|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 3, 10), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = x3**2
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x0
    x14 = x13 ** (-1.0)
    x15 = cx * x14
    x16 = x0 * x15 * (x12 + x6 + x9)
    x17 = boys(4, x16)
    x18 = 17.49341832762486
    x19 = A[0] - B[0]
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x1 * (x19**2 + x20**2 + x21**2))
    x23 = x1 * x18 * x22
    x24 = 2.0 * x13 ** (-1.5) * x23
    x25 = x17 * x24
    x26 = cx ** (-1.0)
    x27 = x13 ** (-0.5)
    x28 = boys(3, x16)
    x29 = 2.0 * x1 * x18 * x22 * x26 * x27 * x28 - x25
    x30 = x29 * x5
    x31 = -2.0 * x1 * x18 * x22 * x26 * x27 * x28 * x4 + x25 * x3
    x32 = -x31
    x33 = boys(5, x16)
    x34 = x24 * x33
    x35 = -2.0 * x1 * x17 * x18 * x22 * x26 * x27 * x4 + x3 * x34
    x36 = -x35
    x37 = x15 * x36
    x38 = x3 * x37
    x39 = x30 + x32 * x4 - x38
    x40 = 2.0 * x5
    x41 = x5 * (2.0 * x1 * x17 * x18 * x22 * x26 * x27 - x34)
    x42 = boys(6, x16)
    x43 = x24 * x42
    x44 = 2.0 * x1 * x18 * x22 * x26 * x27 * x33 * x4 - x3 * x43
    x45 = x15 * x44
    x46 = -x3 * x45 + x36 * x4 + x41
    x47 = x15 * x46
    x48 = -x3 * x47 + x39 * x4 - x40 * (x31 + x37)
    x49 = -x29 * x5
    x50 = 3.0 * x5
    x51 = x5 * (2.0 * x1 * x18 * x22 * x26 * x27 * x33 - x43)
    x52 = x24 * boys(7, x16)
    x53 = x15 * x3
    x54 = (
        x4 * x48
        - x50 * (-x32 * x4 + x38 + x47 + x49)
        + x53
        * (
            -x4 * x46
            + x40 * (x35 + x45)
            + x53
            * (
                x4 * x44
                + x51
                - x53 * (2.0 * x1 * x18 * x22 * x26 * x27 * x4 * x42 - x3 * x52)
            )
        )
    )
    x55 = x3 * x54
    x56 = x48 * x5
    x57 = 4.0 * x56
    x58 = x0 * x14
    x59 = x3 * x58
    x60 = x3 * x48
    x61 = x39 * x5
    x62 = 3.0 * x61
    x63 = x60 + x62
    x64 = x5 * x58
    x65 = 4.0 * x64
    x66 = x3 * x39
    x67 = x32 * x5
    x68 = 2.0 * x67
    x69 = x66 + x68
    x70 = x50 * x58
    x71 = x59 * x63 + x69 * x70
    x72 = x23 * x26 * x27 * x28 * x40
    x73 = x40 * x58
    x74 = x59 * x71 + x70 * (x59 * x69 + x73 * (x3 * x32 + x72))
    x75 = x19 * x58
    x76 = da * db * dc
    x77 = 0.06666666666666667 * x76
    x78 = x58 * x8
    x79 = x78 * (x60 + x62)
    x80 = x59 * x79 + x70 * x78 * (x66 + x68)
    x81 = 2.23606797749979 * x77
    x82 = x11 * x58
    x83 = x82 * (x60 + x62)
    x84 = x59 * x83 + x70 * x82 * (x66 + x68)
    x85 = x0**2 / x13**2
    x86 = x85 * x9
    x87 = x86 * (x60 + x62)
    x88 = x8 * x85
    x89 = x11 * x88
    x90 = x89 * (x60 + x62)
    x91 = 3.872983346207417 * x77
    x92 = x12 * x85
    x93 = x92 * (x60 + x62)
    x94 = x8**3
    x95 = x0**3 / x13**3
    x96 = x54 * x95
    x97 = x94 * x95
    x98 = x19 * x48
    x99 = x9 * x95
    x100 = x11 * x99
    x101 = x12 * x8
    x102 = x101 * x95
    x103 = x11**3
    x104 = x103 * x95
    x105 = -x7 - A[1]
    x106 = -2.0 * x1 * x105 * x17 * x18 * x22 * x26 * x27 + x34 * x8
    x107 = -x106
    x108 = x107 * x15
    x109 = -2.0 * x1 * x105 * x18 * x22 * x26 * x27 * x28 + x25 * x8
    x110 = -x5 * (x108 + x109)
    x111 = -x109
    x112 = x108 * x3 - x111 * x4
    x113 = -x112
    x114 = 2.0 * x1 * x105 * x18 * x22 * x26 * x27 * x33 - x43 * x8
    x115 = x114 * x15
    x116 = x107 * x4 - x115 * x3
    x117 = x116 * x15
    x118 = x110 + x113 * x4 - x117 * x3
    x119 = -x5 * (x106 + x115)
    x120 = 2.0 * x1 * x105 * x18 * x22 * x26 * x27 * x42 - x52 * x8
    x121 = (
        x118 * x4
        - x40 * (x112 + x117)
        - x53 * (x116 * x4 + x119 - x53 * (x114 * x4 - x120 * x53))
    )
    x122 = x121 * x3
    x123 = x118 * x5
    x124 = 3.0 * x123
    x125 = x118 * x3
    x126 = x113 * x5
    x127 = 2.0 * x126
    x128 = x125 + x127
    x129 = x111 * x5
    x130 = x113 * x3
    x131 = x129 + x130
    x132 = x128 * x59 + x131 * x73
    x133 = x58 * (x132 * x70 + x59 * (x128 * x70 + x59 * (x122 + x124)))
    x134 = x20 * x58
    x135 = x121 * x8
    x136 = x135 + x56
    x137 = x118 * x8
    x138 = x137 + x61
    x139 = x113 * x8
    x140 = x139 + x67
    x141 = x140 * x73
    x142 = x138 * x59 + x141
    x143 = x58 * (x142 * x70 + x59 * (x136 * x59 + x138 * x70))
    x144 = x127 * x82
    x145 = x125 * x82 + x144
    x146 = x58 * (x145 * x70 + x59 * x82 * (x122 + x124))
    x147 = x78 * (x136 + x56)
    x148 = x78 * (x138 + x61)
    x149 = x58 * (x147 * x59 + x148 * x70)
    x150 = x56 * x82
    x151 = x135 * x82 + x150
    x152 = x61 * x82
    x153 = x137 * x82 + x152
    x154 = x58 * (x151 * x59 + x153 * x70)
    x155 = x58 * x92 * (x122 + x124)
    x156 = x58 * (x147 * x78 + x56 * x86)
    x157 = x20 * x48
    x158 = x58 * (x151 * x78 + x56 * x89)
    x159 = x56 * x92
    x160 = x58 * (x135 * x92 + x159)
    x161 = x104 * x121
    x162 = -x10 - A[2]
    x163 = -2.0 * x1 * x162 * x17 * x18 * x22 * x26 * x27 + x11 * x34
    x164 = -x163
    x165 = x15 * x164
    x166 = -2.0 * x1 * x162 * x18 * x22 * x26 * x27 * x28 + x11 * x25
    x167 = -x5 * (x165 + x166)
    x168 = -x166
    x169 = x165 * x3 - x168 * x4
    x170 = -x169
    x171 = 2.0 * x1 * x162 * x18 * x22 * x26 * x27 * x33 - x11 * x43
    x172 = x15 * x171
    x173 = x164 * x4 - x172 * x3
    x174 = x15 * x173
    x175 = x167 + x170 * x4 - x174 * x3
    x176 = -x5 * (x163 + x172)
    x177 = 2.0 * x1 * x162 * x18 * x22 * x26 * x27 * x42 - x11 * x52
    x178 = (
        x175 * x4
        - x40 * (x169 + x174)
        - x53 * (x173 * x4 + x176 - x53 * (x171 * x4 - x177 * x53))
    )
    x179 = x178 * x3
    x180 = x175 * x5
    x181 = 3.0 * x180
    x182 = x175 * x3
    x183 = x170 * x5
    x184 = 2.0 * x183
    x185 = x182 + x184
    x186 = x168 * x5
    x187 = x170 * x3
    x188 = x186 + x187
    x189 = x185 * x59 + x188 * x73
    x190 = x58 * (x189 * x70 + x59 * (x185 * x70 + x59 * (x179 + x181)))
    x191 = x21 * x58
    x192 = x78 * (x182 + x184)
    x193 = x58 * (x192 * x70 + x59 * x78 * (x179 + x181))
    x194 = x11 * x178 + x56
    x195 = x11 * x175 + x61
    x196 = x11 * x170 + x67
    x197 = x196 * x73
    x198 = x195 * x59 + x197
    x199 = x58 * (x198 * x70 + x59 * (x194 * x59 + x195 * x70))
    x200 = x58 * x86 * (x179 + x181)
    x201 = x3 * x88
    x202 = x58 * (x194 * x201 + x195 * x50 * x88)
    x203 = x150 + x194 * x82
    x204 = x152 + x195 * x82
    x205 = x58 * (x203 * x59 + x204 * x70)
    x206 = x178 * x97
    x207 = x21 * x48
    x208 = x194 * x99
    x209 = x203 * x88
    x210 = x58 * (x159 + x203 * x82)
    x211 = x59 * (x132 + x73 * (x129 + x131))
    x212 = x111 * x8 + x72
    x213 = x142 * x59 + x73 * (x140 * x59 + x212 * x64)
    x214 = 0.3333333333333333 * x76
    x215 = x129 * x82
    x216 = x145 * x59 + x73 * (x130 * x82 + x215)
    x217 = x73 * x78 * (x140 + x67)
    x218 = x148 * x59 + x217
    x219 = x67 * x82
    x220 = x73 * (x139 * x82 + x219)
    x221 = x153 * x59 + x220
    x222 = 1.732050807568877 * x214
    x223 = x127 * x92
    x224 = x125 * x92 + x223
    x225 = x148 * x78 + x61 * x86
    x226 = x153 * x78 + x61 * x89
    x227 = x61 * x92
    x228 = x137 * x92 + x227
    x229 = x104 * x118
    x230 = x105 * x107 - x115 * x8 + x41
    x231 = x15 * x230
    x232 = x108 * x8
    x233 = x5 * (x105 * x111 - x231 - x232 - x49)
    x234 = x105 * x111 - x232 + x30
    x235 = -x231 * x3 + x234 * x4
    x236 = x15 * x8
    x237 = x105 * x114 - x120 * x236 + x51
    x238 = x233 + x235 * x4 - x53 * (x230 * x4 - x237 * x53)
    x239 = x238 * x3
    x240 = x235 * x5
    x241 = 2.0 * x240
    x242 = x234 * x5
    x243 = x235 * x3
    x244 = x242 + x243
    x245 = x59 * (x242 + x244)
    x246 = x58 * (x245 * x73 + x59 * (x244 * x73 + x59 * (x239 + x241)))
    x247 = x238 * x8
    x248 = 2.0 * x123
    x249 = x247 + x248
    x250 = x235 * x8
    x251 = x127 + x250
    x252 = x234 * x8
    x253 = 2.0 * x129
    x254 = x252 + x253
    x255 = x251 * x59 + x254 * x64
    x256 = x58 * (x255 * x73 + x59 * (x249 * x59 + x251 * x73))
    x257 = x242 * x82
    x258 = x243 * x82 + x257
    x259 = x58 * (x258 * x73 + x59 * x82 * (x239 + x241))
    x260 = x138 * x73 + x249 * x78
    x261 = x141 + x251 * x78
    x262 = x58 * (x260 * x59 + x261 * x73)
    x263 = x82 * (x247 + x248)
    x264 = x144 + x250 * x82
    x265 = x58 * (x263 * x59 + x264 * x73)
    x266 = x58 * x92 * (x239 + x241)
    x267 = x58 * (x148 * x73 + x260 * x78)
    x268 = x58 * (x153 * x73 + x263 * x78)
    x269 = x58 * x92 * (x247 + x248)
    x270 = x104 * x238
    x271 = x105 * x164 - x172 * x8
    x272 = x15 * x271
    x273 = -x105 * x168 + x165 * x8
    x274 = -x5 * (x272 + x273)
    x275 = -x273
    x276 = -x272 * x3 + x275 * x4
    x277 = x105 * x171 - x177 * x236
    x278 = x274 + x276 * x4 - x53 * (x271 * x4 - x277 * x53)
    x279 = x276 * x40
    x280 = x275 * x5
    x281 = x276 * x3 + x280
    x282 = x59 * (x280 + x281)
    x283 = x58 * (x282 * x73 + x59 * (x281 * x73 + x59 * (x278 * x3 + x279)))
    x284 = x180 + x278 * x8
    x285 = x183 + x276 * x8
    x286 = x285 * x73
    x287 = x186 + x275 * x8
    x288 = x285 * x59 + x287 * x64
    x289 = x58 * (x288 * x73 + x59 * (x284 * x59 + x286))
    x290 = x11 * x278 + x123
    x291 = x11 * x276 + x126
    x292 = x291 * x73
    x293 = x11 * x275 + x129
    x294 = x291 * x59 + x293 * x64
    x295 = x58 * (x294 * x73 + x59 * (x290 * x59 + x292))
    x296 = x78 * (x180 + x284)
    x297 = x78 * (x183 + x285)
    x298 = x297 * x73
    x299 = x58 * (x296 * x59 + x298)
    x300 = x195 * x64 + x290 * x78
    x301 = x196 * x64 + x291 * x78
    x302 = x301 * x73
    x303 = x58 * (x300 * x59 + x302)
    x304 = x82 * (x123 + x290)
    x305 = x82 * (x126 + x291)
    x306 = x305 * x73
    x307 = x58 * (x304 * x59 + x306)
    x308 = x58 * (x180 * x86 + x296 * x78)
    x309 = x5 * x88
    x310 = x58 * (x195 * x309 + x300 * x78)
    x311 = x58 * (x204 * x64 + x304 * x78)
    x312 = x58 * (x123 * x92 + x304 * x82)
    x313 = x59 * (x189 + x73 * (x186 + x188))
    x314 = x186 * x78
    x315 = x192 * x59 + x73 * (x187 * x78 + x314)
    x316 = x11 * x168 + x72
    x317 = x316 * x64
    x318 = x198 * x59 + x73 * (x196 * x59 + x317)
    x319 = x86 * (x182 + x184)
    x320 = x40 * x88
    x321 = x195 * x201 + x196 * x320
    x322 = x196 * x82 + x219
    x323 = x322 * x73
    x324 = x204 * x59 + x323
    x325 = x175 * x97
    x326 = x195 * x99
    x327 = x204 * x88
    x328 = x204 * x82 + x227
    x329 = -x11 * x172 + x162 * x164 + x41
    x330 = x15 * x329
    x331 = x11 * x165
    x332 = x5 * (x162 * x168 - x330 - x331 - x49)
    x333 = x162 * x168 + x30 - x331
    x334 = -x3 * x330 + x333 * x4
    x335 = x11 * x15
    x336 = x162 * x171 - x177 * x335 + x51
    x337 = x332 + x334 * x4 - x53 * (x329 * x4 - x336 * x53)
    x338 = x3 * x337
    x339 = x334 * x5
    x340 = 2.0 * x339
    x341 = x333 * x5
    x342 = x3 * x334
    x343 = x341 + x342
    x344 = x59 * (x341 + x343)
    x345 = x58 * (x344 * x73 + x59 * (x343 * x73 + x59 * (x338 + x340)))
    x346 = x341 * x78
    x347 = x342 * x78 + x346
    x348 = x58 * (x347 * x73 + x59 * x78 * (x338 + x340))
    x349 = x11 * x337 + 2.0 * x180
    x350 = x11 * x334 + x184
    x351 = x11 * x333 + 2.0 * x186
    x352 = x351 * x64
    x353 = x350 * x59 + x352
    x354 = x58 * (x353 * x73 + x59 * (x349 * x59 + x350 * x73))
    x355 = x58 * x86 * (x338 + x340)
    x356 = x58 * (x201 * x349 + x320 * x350)
    x357 = x195 * x73 + x349 * x82
    x358 = x197 + x350 * x82
    x359 = x58 * (x357 * x59 + x358 * x73)
    x360 = x337 * x97
    x361 = x349 * x99
    x362 = x357 * x88
    x363 = x58 * (x204 * x73 + x357 * x82)
    x364 = x6 * x85
    x365 = x242 * x364 + x245 * x59
    x366 = x3 * x85
    x367 = x366 * x5
    x368 = x254 * x367 + x255 * x59
    x369 = x11 * x366
    x370 = x242 * x369 + x258 * x59
    x371 = x212 * x73 + x254 * x78
    x372 = x261 * x59 + x371 * x64
    x373 = x82 * (x252 + x253)
    x374 = x264 * x59 + x373 * x64
    x375 = x242 * x92
    x376 = x243 * x92 + x375
    x377 = x217 + x261 * x78
    x378 = x220 + x264 * x78
    x379 = x223 + x250 * x92
    x380 = x104 * x235
    x381 = x105 * x234 + 2.0 * x110 - x231 * x8
    x382 = x381 * x5
    x383 = x105 * x230 + 2.0 * x119 - x236 * x237
    x384 = x381 * x4 - x383 * x53
    x385 = x3 * x384
    x386 = x58 * (x364 * x382 + x59**2 * (2.0 * x382 + x385))
    x387 = x381 * x8
    x388 = 3.0 * x242
    x389 = x387 + x388
    x390 = x389 * x64
    x391 = x384 * x8
    x392 = 3.0 * x240
    x393 = x391 + x392
    x394 = x58 * (x367 * x389 + x59 * (x390 + x393 * x59))
    x395 = x382 * x82
    x396 = x58 * (x369 * x382 + x59 * (x385 * x82 + x395))
    x397 = x254 * x70 + x389 * x78
    x398 = x397 * x64
    x399 = x251 * x70 + x393 * x78
    x400 = x58 * (x398 + x399 * x59)
    x401 = x82 * (x387 + x388)
    x402 = x401 * x64
    x403 = x82 * (x391 + x392)
    x404 = x58 * (x402 + x403 * x59)
    x405 = x382 * x92
    x406 = x58 * (x385 * x92 + x405)
    x407 = x58 * (x261 * x70 + x399 * x78)
    x408 = x58 * (x264 * x70 + x403 * x78)
    x409 = x58 * x92 * (x391 + x392)
    x410 = x104 * x384
    x411 = x105 * x275 + x167 - x272 * x8
    x412 = x411 * x5
    x413 = x105 * x271 + x176 - x236 * x277
    x414 = x4 * x411 - x413 * x53
    x415 = x58 * (x364 * x412 + x59**2 * (x3 * x414 + 2.0 * x412))
    x416 = 2.0 * x280
    x417 = x411 * x8 + x416
    x418 = x279 + x414 * x8
    x419 = x58 * (x367 * x417 + x59 * (x417 * x64 + x418 * x59))
    x420 = x11 * x411 + x242
    x421 = x11 * x414 + x240
    x422 = x58 * (x367 * x420 + x59 * (x420 * x64 + x421 * x59))
    x423 = x287 * x73 + x417 * x78
    x424 = x286 + x418 * x78
    x425 = x58 * (x423 * x64 + x424 * x59)
    x426 = x293 * x73
    x427 = x420 * x78 + x426
    x428 = x292 + x421 * x78
    x429 = x58 * (x427 * x64 + x428 * x59)
    x430 = x257 + x420 * x82
    x431 = x82 * (x240 + x421)
    x432 = x58 * (x430 * x64 + x431 * x59)
    x433 = x58 * (x298 + x424 * x78)
    x434 = x58 * (x302 + x428 * x78)
    x435 = x58 * (x306 + x431 * x78)
    x436 = x58 * (x240 * x92 + x431 * x82)
    x437 = x280 * x364 + x282 * x59
    x438 = x287 * x367 + x288 * x59
    x439 = x293 * x367 + x294 * x59
    x440 = x287 * x78 + x314
    x441 = x297 * x59 + x440 * x64
    x442 = x293 * x78 + x317
    x443 = x301 * x59 + x442 * x64
    x444 = x215 + x293 * x82
    x445 = x305 * x59 + x444 * x64
    x446 = x183 * x86 + x297 * x78
    x447 = x196 * x309 + x301 * x78
    x448 = x305 * x78 + x322 * x64
    x449 = x126 * x92 + x305 * x82
    x450 = x105 * x333 - x330 * x8
    x451 = x450 * x5
    x452 = x105 * x329 - x236 * x336
    x453 = x4 * x450 - x452 * x53
    x454 = x58 * (x364 * x451 + x59**2 * (x3 * x453 + 2.0 * x451))
    x455 = x341 + x450 * x8
    x456 = x339 + x453 * x8
    x457 = x58 * (x367 * x455 + x59 * (x455 * x64 + x456 * x59))
    x458 = x11 * x450 + x416
    x459 = x11 * x453 + x279
    x460 = x58 * (x367 * x458 + x59 * (x458 * x64 + x459 * x59))
    x461 = x346 + x455 * x78
    x462 = x78 * (x339 + x456)
    x463 = x58 * (x461 * x64 + x462 * x59)
    x464 = x352 + x458 * x78
    x465 = x350 * x64 + x459 * x78
    x466 = x58 * (x464 * x64 + x465 * x59)
    x467 = x426 + x458 * x82
    x468 = x292 + x459 * x82
    x469 = x58 * (x467 * x64 + x468 * x59)
    x470 = x58 * (x339 * x86 + x462 * x78)
    x471 = x58 * (x309 * x350 + x465 * x78)
    x472 = x58 * (x358 * x64 + x468 * x78)
    x473 = x58 * (x306 + x468 * x82)
    x474 = x341 * x364 + x344 * x59
    x475 = x201 * x341 + x347 * x59
    x476 = x351 * x367 + x353 * x59
    x477 = x341 * x86
    x478 = x342 * x86 + x477
    x479 = x309 * x351
    x480 = x201 * x350 + x479
    x481 = x316 * x73 + x351 * x82
    x482 = x481 * x64
    x483 = x358 * x59 + x482
    x484 = x334 * x97
    x485 = x350 * x99
    x486 = x358 * x88
    x487 = x323 + x358 * x82
    x488 = -x11 * x330 + x162 * x333 + 2.0 * x167
    x489 = x488 * x5
    x490 = x162 * x329 + 2.0 * x176 - x335 * x336
    x491 = x4 * x488 - x490 * x53
    x492 = x3 * x491
    x493 = x58 * (x364 * x489 + x59**2 * (2.0 * x489 + x492))
    x494 = x489 * x78
    x495 = x58 * (x201 * x489 + x59 * (x492 * x78 + x494))
    x496 = x11 * x488 + 3.0 * x341
    x497 = x496 * x64
    x498 = x11 * x491 + 3.0 * x339
    x499 = x58 * (x367 * x496 + x59 * (x497 + x498 * x59))
    x500 = x489 * x86
    x501 = x58 * (x492 * x86 + x500)
    x502 = x309 * x496
    x503 = x58 * (x201 * x498 + x502)
    x504 = x351 * x70 + x496 * x82
    x505 = x504 * x64
    x506 = x350 * x70 + x498 * x82
    x507 = x58 * (x505 + x506 * x59)
    x508 = x491 * x97
    x509 = x498 * x99
    x510 = x506 * x88
    x511 = x58 * (x358 * x70 + x506 * x82)
    x512 = x3**3 * x95
    x513 = x19 * x381
    x514 = x6 * x95
    x515 = x389 * x514
    x516 = x11 * x514
    x517 = x19 * x366
    x518 = x3 * x95
    x519 = x12 * x518
    x520 = x371 * x70 + x397 * x78
    x521 = x373 * x70 + x401 * x78
    x522 = x92 * (x387 + x388)
    x523 = x105 * x381 + 3.0 * x233 - x236 * x383
    x524 = x20 * x381
    x525 = x523 * x8
    x526 = 4.0 * x382
    x527 = x525 + x526
    x528 = 4.0 * x390 + x527 * x78
    x529 = x20 * x366
    x530 = x82 * (x525 + x526)
    x531 = x105 * x411 - x236 * x413 + 2.0 * x274
    x532 = x512 * x531
    x533 = x21 * x381
    x534 = 3.0 * x412 + x531 * x8
    x535 = x514 * x534
    x536 = x11 * x531 + x382
    x537 = x514 * x536
    x538 = x417 * x70 + x534 * x78
    x539 = x366 * x538
    x540 = x21 * x366
    x541 = x420 * x70 + x536 * x78
    x542 = x366 * x541
    x543 = x395 + x536 * x82
    x544 = x366 * x543
    x545 = x58 * (x423 * x70 + x538 * x78)
    x546 = x58 * (x427 * x70 + x541 * x78)
    x547 = x58 * (x430 * x70 + x543 * x78)
    x548 = x58 * (x405 + x543 * x82)
    x549 = x411 * x512
    x550 = x19 * x514
    x551 = x423 * x78 + x440 * x73
    x552 = x427 * x78 + x442 * x73
    x553 = x444 * x73
    x554 = x430 * x78 + x553
    x555 = x375 + x430 * x82
    x556 = x20 * x514
    x557 = x105 * x450 - x236 * x452 + x332
    x558 = x512 * x557
    x559 = 2.0 * x451 + x557 * x8
    x560 = x514 * x559
    x561 = x21 * x514
    x562 = x11 * x557 + 2.0 * x412
    x563 = x514 * x562
    x564 = x455 * x73 + x559 * x78
    x565 = x366 * x564
    x566 = x458 * x73 + x562 * x78
    x567 = x366 * x566
    x568 = x420 * x73 + x562 * x82
    x569 = x366 * x568
    x570 = x58 * (x461 * x73 + x564 * x78)
    x571 = x58 * (x464 * x73 + x566 * x78)
    x572 = x58 * (x467 * x73 + x568 * x78)
    x573 = x58 * (x430 * x73 + x568 * x82)
    x574 = x450 * x512
    x575 = x461 * x78 + x477
    x576 = x464 * x78 + x479
    x577 = x467 * x78 + x482
    x578 = x467 * x82 + x553
    x579 = x105 * x488 - x236 * x490
    x580 = x512 * x579
    x581 = x489 + x579 * x8
    x582 = x514 * x581
    x583 = x11 * x579 + 3.0 * x451
    x584 = x514 * x583
    x585 = x494 + x581 * x78
    x586 = x366 * x585
    x587 = x497 + x583 * x78
    x588 = x366 * x587
    x589 = x458 * x70 + x583 * x82
    x590 = x366 * x589
    x591 = x58 * (x500 + x585 * x78)
    x592 = x58 * (x502 + x587 * x78)
    x593 = x58 * (x505 + x589 * x78)
    x594 = x58 * (x467 * x70 + x589 * x82)
    x595 = x19 * x488
    x596 = x488 * x8
    x597 = x3 * x99
    x598 = x518 * x8
    x599 = x496 * x598
    x600 = x496 * x99
    x601 = x504 * x88
    x602 = x481 * x70 + x504 * x82
    x603 = x20 * x488
    x604 = x162 * x488 + 3.0 * x332 - x335 * x490
    x605 = x21 * x488
    x606 = x11 * x604 + 4.0 * x489
    x607 = 4.0 * x497 + x606 * x82

    # 300 item(s)
    result[0, 0, 0] = numpy.sum(
        x77 * (x58 * (x59 * (x59 * (x55 + x57) + x63 * x65) + x65 * x71) + x74 * x75)
    )
    result[0, 0, 1] = numpy.sum(
        x81 * (x58 * (x59 * x78 * (x55 + x57) + x65 * x79) + x75 * x80)
    )
    result[0, 0, 2] = numpy.sum(
        x81 * (x58 * (x59 * x82 * (x55 + x57) + x65 * x83) + x75 * x84)
    )
    result[0, 0, 3] = numpy.sum(x81 * (x58 * x86 * (x55 + x57) + x75 * x87))
    result[0, 0, 4] = numpy.sum(x91 * (x58 * x89 * (x55 + x57) + x75 * x90))
    result[0, 0, 5] = numpy.sum(x81 * (x58 * x92 * (x55 + x57) + x75 * x93))
    result[0, 0, 6] = numpy.sum(x77 * (x94 * x96 + x97 * x98))
    result[0, 0, 7] = numpy.sum(x81 * (x100 * x98 + x11 * x9 * x96))
    result[0, 0, 8] = numpy.sum(x81 * (x101 * x96 + x102 * x98))
    result[0, 0, 9] = numpy.sum(x77 * (x103 * x96 + x104 * x98))
    result[0, 1, 0] = numpy.sum(x77 * (x133 + x134 * x74))
    result[0, 1, 1] = numpy.sum(x81 * (x134 * x80 + x143))
    result[0, 1, 2] = numpy.sum(x81 * (x134 * x84 + x146))
    result[0, 1, 3] = numpy.sum(x81 * (x134 * x87 + x149))
    result[0, 1, 4] = numpy.sum(x91 * (x134 * x90 + x154))
    result[0, 1, 5] = numpy.sum(x81 * (x134 * x93 + x155))
    result[0, 1, 6] = numpy.sum(x77 * (x156 + x157 * x97))
    result[0, 1, 7] = numpy.sum(x81 * (x100 * x157 + x158))
    result[0, 1, 8] = numpy.sum(x81 * (x102 * x157 + x160))
    result[0, 1, 9] = numpy.sum(x77 * (x104 * x157 + x161))
    result[0, 2, 0] = numpy.sum(x77 * (x190 + x191 * x74))
    result[0, 2, 1] = numpy.sum(x81 * (x191 * x80 + x193))
    result[0, 2, 2] = numpy.sum(x81 * (x191 * x84 + x199))
    result[0, 2, 3] = numpy.sum(x81 * (x191 * x87 + x200))
    result[0, 2, 4] = numpy.sum(x91 * (x191 * x90 + x202))
    result[0, 2, 5] = numpy.sum(x81 * (x191 * x93 + x205))
    result[0, 2, 6] = numpy.sum(x77 * (x206 + x207 * x97))
    result[0, 2, 7] = numpy.sum(x81 * (x100 * x207 + x208))
    result[0, 2, 8] = numpy.sum(x81 * (x102 * x207 + x209))
    result[0, 2, 9] = numpy.sum(x77 * (x104 * x207 + x210))
    result[1, 0, 0] = numpy.sum(x81 * (x133 + x211 * x75))
    result[1, 0, 1] = numpy.sum(x214 * (x143 + x213 * x75))
    result[1, 0, 2] = numpy.sum(x214 * (x146 + x216 * x75))
    result[1, 0, 3] = numpy.sum(x214 * (x149 + x218 * x75))
    result[1, 0, 4] = numpy.sum(x222 * (x154 + x221 * x75))
    result[1, 0, 5] = numpy.sum(x214 * (x155 + x224 * x75))
    result[1, 0, 6] = numpy.sum(x81 * (x156 + x225 * x75))
    result[1, 0, 7] = numpy.sum(x214 * (x158 + x226 * x75))
    result[1, 0, 8] = numpy.sum(x214 * (x160 + x228 * x75))
    result[1, 0, 9] = numpy.sum(x81 * (x161 + x19 * x229))
    result[1, 1, 0] = numpy.sum(x81 * (x134 * x211 + x246))
    result[1, 1, 1] = numpy.sum(x214 * (x134 * x213 + x256))
    result[1, 1, 2] = numpy.sum(x214 * (x134 * x216 + x259))
    result[1, 1, 3] = numpy.sum(x214 * (x134 * x218 + x262))
    result[1, 1, 4] = numpy.sum(x222 * (x134 * x221 + x265))
    result[1, 1, 5] = numpy.sum(x214 * (x134 * x224 + x266))
    result[1, 1, 6] = numpy.sum(x81 * (x134 * x225 + x267))
    result[1, 1, 7] = numpy.sum(x214 * (x134 * x226 + x268))
    result[1, 1, 8] = numpy.sum(x214 * (x134 * x228 + x269))
    result[1, 1, 9] = numpy.sum(x81 * (x20 * x229 + x270))
    result[1, 2, 0] = numpy.sum(x81 * (x191 * x211 + x283))
    result[1, 2, 1] = numpy.sum(x214 * (x191 * x213 + x289))
    result[1, 2, 2] = numpy.sum(x214 * (x191 * x216 + x295))
    result[1, 2, 3] = numpy.sum(x214 * (x191 * x218 + x299))
    result[1, 2, 4] = numpy.sum(x222 * (x191 * x221 + x303))
    result[1, 2, 5] = numpy.sum(x214 * (x191 * x224 + x307))
    result[1, 2, 6] = numpy.sum(x81 * (x191 * x225 + x308))
    result[1, 2, 7] = numpy.sum(x214 * (x191 * x226 + x310))
    result[1, 2, 8] = numpy.sum(x214 * (x191 * x228 + x311))
    result[1, 2, 9] = numpy.sum(x81 * (x21 * x229 + x312))
    result[2, 0, 0] = numpy.sum(x81 * (x190 + x313 * x75))
    result[2, 0, 1] = numpy.sum(x214 * (x193 + x315 * x75))
    result[2, 0, 2] = numpy.sum(x214 * (x199 + x318 * x75))
    result[2, 0, 3] = numpy.sum(x214 * (x200 + x319 * x75))
    result[2, 0, 4] = numpy.sum(x222 * (x202 + x321 * x75))
    result[2, 0, 5] = numpy.sum(x214 * (x205 + x324 * x75))
    result[2, 0, 6] = numpy.sum(x81 * (x19 * x325 + x206))
    result[2, 0, 7] = numpy.sum(x214 * (x19 * x326 + x208))
    result[2, 0, 8] = numpy.sum(x214 * (x19 * x327 + x209))
    result[2, 0, 9] = numpy.sum(x81 * (x210 + x328 * x75))
    result[2, 1, 0] = numpy.sum(x81 * (x134 * x313 + x283))
    result[2, 1, 1] = numpy.sum(x214 * (x134 * x315 + x289))
    result[2, 1, 2] = numpy.sum(x214 * (x134 * x318 + x295))
    result[2, 1, 3] = numpy.sum(x214 * (x134 * x319 + x299))
    result[2, 1, 4] = numpy.sum(x222 * (x134 * x321 + x303))
    result[2, 1, 5] = numpy.sum(x214 * (x134 * x324 + x307))
    result[2, 1, 6] = numpy.sum(x81 * (x20 * x325 + x308))
    result[2, 1, 7] = numpy.sum(x214 * (x20 * x326 + x310))
    result[2, 1, 8] = numpy.sum(x214 * (x20 * x327 + x311))
    result[2, 1, 9] = numpy.sum(x81 * (x134 * x328 + x312))
    result[2, 2, 0] = numpy.sum(x81 * (x191 * x313 + x345))
    result[2, 2, 1] = numpy.sum(x214 * (x191 * x315 + x348))
    result[2, 2, 2] = numpy.sum(x214 * (x191 * x318 + x354))
    result[2, 2, 3] = numpy.sum(x214 * (x191 * x319 + x355))
    result[2, 2, 4] = numpy.sum(x222 * (x191 * x321 + x356))
    result[2, 2, 5] = numpy.sum(x214 * (x191 * x324 + x359))
    result[2, 2, 6] = numpy.sum(x81 * (x21 * x325 + x360))
    result[2, 2, 7] = numpy.sum(x214 * (x21 * x326 + x361))
    result[2, 2, 8] = numpy.sum(x214 * (x21 * x327 + x362))
    result[2, 2, 9] = numpy.sum(x81 * (x191 * x328 + x363))
    result[3, 0, 0] = numpy.sum(x81 * (x246 + x365 * x75))
    result[3, 0, 1] = numpy.sum(x214 * (x256 + x368 * x75))
    result[3, 0, 2] = numpy.sum(x214 * (x259 + x370 * x75))
    result[3, 0, 3] = numpy.sum(x214 * (x262 + x372 * x75))
    result[3, 0, 4] = numpy.sum(x222 * (x265 + x374 * x75))
    result[3, 0, 5] = numpy.sum(x214 * (x266 + x376 * x75))
    result[3, 0, 6] = numpy.sum(x81 * (x267 + x377 * x75))
    result[3, 0, 7] = numpy.sum(x214 * (x268 + x378 * x75))
    result[3, 0, 8] = numpy.sum(x214 * (x269 + x379 * x75))
    result[3, 0, 9] = numpy.sum(x81 * (x19 * x380 + x270))
    result[3, 1, 0] = numpy.sum(x81 * (x134 * x365 + x386))
    result[3, 1, 1] = numpy.sum(x214 * (x134 * x368 + x394))
    result[3, 1, 2] = numpy.sum(x214 * (x134 * x370 + x396))
    result[3, 1, 3] = numpy.sum(x214 * (x134 * x372 + x400))
    result[3, 1, 4] = numpy.sum(x222 * (x134 * x374 + x404))
    result[3, 1, 5] = numpy.sum(x214 * (x134 * x376 + x406))
    result[3, 1, 6] = numpy.sum(x81 * (x134 * x377 + x407))
    result[3, 1, 7] = numpy.sum(x214 * (x134 * x378 + x408))
    result[3, 1, 8] = numpy.sum(x214 * (x134 * x379 + x409))
    result[3, 1, 9] = numpy.sum(x81 * (x20 * x380 + x410))
    result[3, 2, 0] = numpy.sum(x81 * (x191 * x365 + x415))
    result[3, 2, 1] = numpy.sum(x214 * (x191 * x368 + x419))
    result[3, 2, 2] = numpy.sum(x214 * (x191 * x370 + x422))
    result[3, 2, 3] = numpy.sum(x214 * (x191 * x372 + x425))
    result[3, 2, 4] = numpy.sum(x222 * (x191 * x374 + x429))
    result[3, 2, 5] = numpy.sum(x214 * (x191 * x376 + x432))
    result[3, 2, 6] = numpy.sum(x81 * (x191 * x377 + x433))
    result[3, 2, 7] = numpy.sum(x214 * (x191 * x378 + x434))
    result[3, 2, 8] = numpy.sum(x214 * (x191 * x379 + x435))
    result[3, 2, 9] = numpy.sum(x81 * (x21 * x380 + x436))
    result[4, 0, 0] = numpy.sum(x91 * (x283 + x437 * x75))
    result[4, 0, 1] = numpy.sum(x222 * (x289 + x438 * x75))
    result[4, 0, 2] = numpy.sum(x222 * (x295 + x439 * x75))
    result[4, 0, 3] = numpy.sum(x222 * (x299 + x441 * x75))
    result[4, 0, 4] = numpy.sum(x76 * (x303 + x443 * x75))
    result[4, 0, 5] = numpy.sum(x222 * (x307 + x445 * x75))
    result[4, 0, 6] = numpy.sum(x91 * (x308 + x446 * x75))
    result[4, 0, 7] = numpy.sum(x222 * (x310 + x447 * x75))
    result[4, 0, 8] = numpy.sum(x222 * (x311 + x448 * x75))
    result[4, 0, 9] = numpy.sum(x91 * (x312 + x449 * x75))
    result[4, 1, 0] = numpy.sum(x91 * (x134 * x437 + x415))
    result[4, 1, 1] = numpy.sum(x222 * (x134 * x438 + x419))
    result[4, 1, 2] = numpy.sum(x222 * (x134 * x439 + x422))
    result[4, 1, 3] = numpy.sum(x222 * (x134 * x441 + x425))
    result[4, 1, 4] = numpy.sum(x76 * (x134 * x443 + x429))
    result[4, 1, 5] = numpy.sum(x222 * (x134 * x445 + x432))
    result[4, 1, 6] = numpy.sum(x91 * (x134 * x446 + x433))
    result[4, 1, 7] = numpy.sum(x222 * (x134 * x447 + x434))
    result[4, 1, 8] = numpy.sum(x222 * (x134 * x448 + x435))
    result[4, 1, 9] = numpy.sum(x91 * (x134 * x449 + x436))
    result[4, 2, 0] = numpy.sum(x91 * (x191 * x437 + x454))
    result[4, 2, 1] = numpy.sum(x222 * (x191 * x438 + x457))
    result[4, 2, 2] = numpy.sum(x222 * (x191 * x439 + x460))
    result[4, 2, 3] = numpy.sum(x222 * (x191 * x441 + x463))
    result[4, 2, 4] = numpy.sum(x76 * (x191 * x443 + x466))
    result[4, 2, 5] = numpy.sum(x222 * (x191 * x445 + x469))
    result[4, 2, 6] = numpy.sum(x91 * (x191 * x446 + x470))
    result[4, 2, 7] = numpy.sum(x222 * (x191 * x447 + x471))
    result[4, 2, 8] = numpy.sum(x222 * (x191 * x448 + x472))
    result[4, 2, 9] = numpy.sum(x91 * (x191 * x449 + x473))
    result[5, 0, 0] = numpy.sum(x81 * (x345 + x474 * x75))
    result[5, 0, 1] = numpy.sum(x214 * (x348 + x475 * x75))
    result[5, 0, 2] = numpy.sum(x214 * (x354 + x476 * x75))
    result[5, 0, 3] = numpy.sum(x214 * (x355 + x478 * x75))
    result[5, 0, 4] = numpy.sum(x222 * (x356 + x480 * x75))
    result[5, 0, 5] = numpy.sum(x214 * (x359 + x483 * x75))
    result[5, 0, 6] = numpy.sum(x81 * (x19 * x484 + x360))
    result[5, 0, 7] = numpy.sum(x214 * (x19 * x485 + x361))
    result[5, 0, 8] = numpy.sum(x214 * (x19 * x486 + x362))
    result[5, 0, 9] = numpy.sum(x81 * (x363 + x487 * x75))
    result[5, 1, 0] = numpy.sum(x81 * (x134 * x474 + x454))
    result[5, 1, 1] = numpy.sum(x214 * (x134 * x475 + x457))
    result[5, 1, 2] = numpy.sum(x214 * (x134 * x476 + x460))
    result[5, 1, 3] = numpy.sum(x214 * (x134 * x478 + x463))
    result[5, 1, 4] = numpy.sum(x222 * (x134 * x480 + x466))
    result[5, 1, 5] = numpy.sum(x214 * (x134 * x483 + x469))
    result[5, 1, 6] = numpy.sum(x81 * (x20 * x484 + x470))
    result[5, 1, 7] = numpy.sum(x214 * (x20 * x485 + x471))
    result[5, 1, 8] = numpy.sum(x214 * (x20 * x486 + x472))
    result[5, 1, 9] = numpy.sum(x81 * (x134 * x487 + x473))
    result[5, 2, 0] = numpy.sum(x81 * (x191 * x474 + x493))
    result[5, 2, 1] = numpy.sum(x214 * (x191 * x475 + x495))
    result[5, 2, 2] = numpy.sum(x214 * (x191 * x476 + x499))
    result[5, 2, 3] = numpy.sum(x214 * (x191 * x478 + x501))
    result[5, 2, 4] = numpy.sum(x222 * (x191 * x480 + x503))
    result[5, 2, 5] = numpy.sum(x214 * (x191 * x483 + x507))
    result[5, 2, 6] = numpy.sum(x81 * (x21 * x484 + x508))
    result[5, 2, 7] = numpy.sum(x214 * (x21 * x485 + x509))
    result[5, 2, 8] = numpy.sum(x214 * (x21 * x486 + x510))
    result[5, 2, 9] = numpy.sum(x81 * (x191 * x487 + x511))
    result[6, 0, 0] = numpy.sum(x77 * (x386 + x512 * x513))
    result[6, 0, 1] = numpy.sum(x81 * (x19 * x515 + x394))
    result[6, 0, 2] = numpy.sum(x81 * (x396 + x513 * x516))
    result[6, 0, 3] = numpy.sum(x81 * (x397 * x517 + x400))
    result[6, 0, 4] = numpy.sum(x91 * (x401 * x517 + x404))
    result[6, 0, 5] = numpy.sum(x81 * (x406 + x513 * x519))
    result[6, 0, 6] = numpy.sum(x77 * (x407 + x520 * x75))
    result[6, 0, 7] = numpy.sum(x81 * (x408 + x521 * x75))
    result[6, 0, 8] = numpy.sum(x81 * (x409 + x522 * x75))
    result[6, 0, 9] = numpy.sum(x77 * (x104 * x513 + x410))
    result[6, 1, 0] = numpy.sum(x512 * x77 * (x523 + x524))
    result[6, 1, 1] = numpy.sum(x81 * (x20 * x515 + x514 * x527))
    result[6, 1, 2] = numpy.sum(x516 * x81 * (x523 + x524))
    result[6, 1, 3] = numpy.sum(x81 * (x366 * x528 + x397 * x529))
    result[6, 1, 4] = numpy.sum(x91 * (x366 * x530 + x401 * x529))
    result[6, 1, 5] = numpy.sum(x519 * x81 * (x523 + x524))
    result[6, 1, 6] = numpy.sum(x77 * (x134 * x520 + x58 * (4.0 * x398 + x528 * x78)))
    result[6, 1, 7] = numpy.sum(x81 * (x134 * x521 + x58 * (4.0 * x402 + x530 * x78)))
    result[6, 1, 8] = numpy.sum(x81 * (x134 * x522 + x58 * x92 * (x525 + x526)))
    result[6, 1, 9] = numpy.sum(x104 * x77 * (x523 + x524))
    result[6, 2, 0] = numpy.sum(x77 * (x512 * x533 + x532))
    result[6, 2, 1] = numpy.sum(x81 * (x21 * x515 + x535))
    result[6, 2, 2] = numpy.sum(x81 * (x516 * x533 + x537))
    result[6, 2, 3] = numpy.sum(x81 * (x397 * x540 + x539))
    result[6, 2, 4] = numpy.sum(x91 * (x401 * x540 + x542))
    result[6, 2, 5] = numpy.sum(x81 * (x519 * x533 + x544))
    result[6, 2, 6] = numpy.sum(x77 * (x191 * x520 + x545))
    result[6, 2, 7] = numpy.sum(x81 * (x191 * x521 + x546))
    result[6, 2, 8] = numpy.sum(x81 * (x191 * x522 + x547))
    result[6, 2, 9] = numpy.sum(x77 * (x104 * x533 + x548))
    result[7, 0, 0] = numpy.sum(x81 * (x19 * x549 + x415))
    result[7, 0, 1] = numpy.sum(x214 * (x417 * x550 + x419))
    result[7, 0, 2] = numpy.sum(x214 * (x420 * x550 + x422))
    result[7, 0, 3] = numpy.sum(x214 * (x423 * x517 + x425))
    result[7, 0, 4] = numpy.sum(x222 * (x427 * x517 + x429))
    result[7, 0, 5] = numpy.sum(x214 * (x430 * x517 + x432))
    result[7, 0, 6] = numpy.sum(x81 * (x433 + x551 * x75))
    result[7, 0, 7] = numpy.sum(x214 * (x434 + x552 * x75))
    result[7, 0, 8] = numpy.sum(x214 * (x435 + x554 * x75))
    result[7, 0, 9] = numpy.sum(x81 * (x436 + x555 * x75))
    result[7, 1, 0] = numpy.sum(x81 * (x20 * x549 + x532))
    result[7, 1, 1] = numpy.sum(x214 * (x417 * x556 + x535))
    result[7, 1, 2] = numpy.sum(x214 * (x420 * x556 + x537))
    result[7, 1, 3] = numpy.sum(x214 * (x423 * x529 + x539))
    result[7, 1, 4] = numpy.sum(x222 * (x427 * x529 + x542))
    result[7, 1, 5] = numpy.sum(x214 * (x430 * x529 + x544))
    result[7, 1, 6] = numpy.sum(x81 * (x134 * x551 + x545))
    result[7, 1, 7] = numpy.sum(x214 * (x134 * x552 + x546))
    result[7, 1, 8] = numpy.sum(x214 * (x134 * x554 + x547))
    result[7, 1, 9] = numpy.sum(x81 * (x134 * x555 + x548))
    result[7, 2, 0] = numpy.sum(x81 * (x21 * x549 + x558))
    result[7, 2, 1] = numpy.sum(x214 * (x417 * x561 + x560))
    result[7, 2, 2] = numpy.sum(x214 * (x420 * x561 + x563))
    result[7, 2, 3] = numpy.sum(x214 * (x423 * x540 + x565))
    result[7, 2, 4] = numpy.sum(x222 * (x427 * x540 + x567))
    result[7, 2, 5] = numpy.sum(x214 * (x430 * x540 + x569))
    result[7, 2, 6] = numpy.sum(x81 * (x191 * x551 + x570))
    result[7, 2, 7] = numpy.sum(x214 * (x191 * x552 + x571))
    result[7, 2, 8] = numpy.sum(x214 * (x191 * x554 + x572))
    result[7, 2, 9] = numpy.sum(x81 * (x191 * x555 + x573))
    result[8, 0, 0] = numpy.sum(x81 * (x19 * x574 + x454))
    result[8, 0, 1] = numpy.sum(x214 * (x455 * x550 + x457))
    result[8, 0, 2] = numpy.sum(x214 * (x458 * x550 + x460))
    result[8, 0, 3] = numpy.sum(x214 * (x461 * x517 + x463))
    result[8, 0, 4] = numpy.sum(x222 * (x464 * x517 + x466))
    result[8, 0, 5] = numpy.sum(x214 * (x467 * x517 + x469))
    result[8, 0, 6] = numpy.sum(x81 * (x470 + x575 * x75))
    result[8, 0, 7] = numpy.sum(x214 * (x471 + x576 * x75))
    result[8, 0, 8] = numpy.sum(x214 * (x472 + x577 * x75))
    result[8, 0, 9] = numpy.sum(x81 * (x473 + x578 * x75))
    result[8, 1, 0] = numpy.sum(x81 * (x20 * x574 + x558))
    result[8, 1, 1] = numpy.sum(x214 * (x455 * x556 + x560))
    result[8, 1, 2] = numpy.sum(x214 * (x458 * x556 + x563))
    result[8, 1, 3] = numpy.sum(x214 * (x461 * x529 + x565))
    result[8, 1, 4] = numpy.sum(x222 * (x464 * x529 + x567))
    result[8, 1, 5] = numpy.sum(x214 * (x467 * x529 + x569))
    result[8, 1, 6] = numpy.sum(x81 * (x134 * x575 + x570))
    result[8, 1, 7] = numpy.sum(x214 * (x134 * x576 + x571))
    result[8, 1, 8] = numpy.sum(x214 * (x134 * x577 + x572))
    result[8, 1, 9] = numpy.sum(x81 * (x134 * x578 + x573))
    result[8, 2, 0] = numpy.sum(x81 * (x21 * x574 + x580))
    result[8, 2, 1] = numpy.sum(x214 * (x455 * x561 + x582))
    result[8, 2, 2] = numpy.sum(x214 * (x458 * x561 + x584))
    result[8, 2, 3] = numpy.sum(x214 * (x461 * x540 + x586))
    result[8, 2, 4] = numpy.sum(x222 * (x464 * x540 + x588))
    result[8, 2, 5] = numpy.sum(x214 * (x467 * x540 + x590))
    result[8, 2, 6] = numpy.sum(x81 * (x191 * x575 + x591))
    result[8, 2, 7] = numpy.sum(x214 * (x191 * x576 + x592))
    result[8, 2, 8] = numpy.sum(x214 * (x191 * x577 + x593))
    result[8, 2, 9] = numpy.sum(x81 * (x191 * x578 + x594))
    result[9, 0, 0] = numpy.sum(x77 * (x493 + x512 * x595))
    result[9, 0, 1] = numpy.sum(x81 * (x495 + x550 * x596))
    result[9, 0, 2] = numpy.sum(x81 * (x496 * x550 + x499))
    result[9, 0, 3] = numpy.sum(x81 * (x501 + x595 * x597))
    result[9, 0, 4] = numpy.sum(x91 * (x19 * x599 + x503))
    result[9, 0, 5] = numpy.sum(x81 * (x504 * x517 + x507))
    result[9, 0, 6] = numpy.sum(x77 * (x508 + x595 * x97))
    result[9, 0, 7] = numpy.sum(x81 * (x19 * x600 + x509))
    result[9, 0, 8] = numpy.sum(x81 * (x19 * x601 + x510))
    result[9, 0, 9] = numpy.sum(x77 * (x511 + x602 * x75))
    result[9, 1, 0] = numpy.sum(x77 * (x512 * x603 + x580))
    result[9, 1, 1] = numpy.sum(x81 * (x556 * x596 + x582))
    result[9, 1, 2] = numpy.sum(x81 * (x496 * x556 + x584))
    result[9, 1, 3] = numpy.sum(x81 * (x586 + x597 * x603))
    result[9, 1, 4] = numpy.sum(x91 * (x20 * x599 + x588))
    result[9, 1, 5] = numpy.sum(x81 * (x504 * x529 + x590))
    result[9, 1, 6] = numpy.sum(x77 * (x591 + x603 * x97))
    result[9, 1, 7] = numpy.sum(x81 * (x20 * x600 + x592))
    result[9, 1, 8] = numpy.sum(x81 * (x20 * x601 + x593))
    result[9, 1, 9] = numpy.sum(x77 * (x134 * x602 + x594))
    result[9, 2, 0] = numpy.sum(x512 * x77 * (x604 + x605))
    result[9, 2, 1] = numpy.sum(x81 * (x514 * x604 * x8 + x561 * x596))
    result[9, 2, 2] = numpy.sum(x81 * (x496 * x561 + x514 * x606))
    result[9, 2, 3] = numpy.sum(x597 * x81 * (x604 + x605))
    result[9, 2, 4] = numpy.sum(x91 * (x21 * x599 + x598 * x606))
    result[9, 2, 5] = numpy.sum(x81 * (x366 * x607 + x504 * x540))
    result[9, 2, 6] = numpy.sum(x77 * x97 * (x604 + x605))
    result[9, 2, 7] = numpy.sum(x81 * (x21 * x600 + x606 * x99))
    result[9, 2, 8] = numpy.sum(x81 * (x21 * x601 + x607 * x88))
    result[9, 2, 9] = numpy.sum(x77 * (x191 * x602 + x58 * (4.0 * x505 + x607 * x82)))
    return result


def int3c2e3d_sph_314(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fp|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 3, 15), dtype=float)

    x0 = ax + bx
    x1 = x0 ** (-1.0)
    x2 = -x1 * (ax * A[0] + bx * B[0])
    x3 = -x2 - C[0]
    x4 = -x2 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = x3**2
    x7 = -x1 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = x8**2
    x10 = -x1 * (ax * A[2] + bx * B[2])
    x11 = -x10 - C[2]
    x12 = x11**2
    x13 = cx + x0
    x14 = x13 ** (-1.0)
    x15 = cx * x14
    x16 = x0 * x15 * (x12 + x6 + x9)
    x17 = boys(5, x16)
    x18 = x13 ** (-1.5)
    x19 = 17.49341832762486
    x20 = A[0] - B[0]
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x1 * (x20**2 + x21**2 + x22**2))
    x24 = x1 * x19 * x23
    x25 = 2.0 * x18 * x24
    x26 = x17 * x25
    x27 = cx ** (-1.0)
    x28 = x13 ** (-0.5)
    x29 = boys(4, x16)
    x30 = 2.0 * x1 * x19 * x23 * x27 * x28 * x29 - x26
    x31 = x30 * x5
    x32 = -2.0 * x1 * x19 * x23 * x27 * x28 * x29 * x4 + x26 * x3
    x33 = -x32
    x34 = boys(6, x16)
    x35 = x25 * x34
    x36 = -2.0 * x1 * x17 * x19 * x23 * x27 * x28 * x4 + x3 * x35
    x37 = -x36
    x38 = x15 * x37
    x39 = x3 * x38
    x40 = x31 + x33 * x4 - x39
    x41 = 2.0 * x5
    x42 = x5 * (2.0 * x1 * x17 * x19 * x23 * x27 * x28 - x35)
    x43 = boys(7, x16)
    x44 = x25 * x43
    x45 = 2.0 * x1 * x19 * x23 * x27 * x28 * x34 * x4 - x3 * x44
    x46 = x15 * x45
    x47 = -x3 * x46 + x37 * x4 + x42
    x48 = x15 * x47
    x49 = -x3 * x48 + x4 * x40 - x41 * (x32 + x38)
    x50 = -x30 * x5
    x51 = 3.0 * x5
    x52 = x5 * (2.0 * x1 * x19 * x23 * x27 * x28 * x34 - x44)
    x53 = x25 * boys(8, x16)
    x54 = x15 * x3
    x55 = (
        x4 * x49
        - x51 * (-x33 * x4 + x39 + x48 + x50)
        + x54
        * (
            -x4 * x47
            + x41 * (x36 + x46)
            + x54
            * (
                x4 * x45
                + x52
                - x54 * (2.0 * x1 * x19 * x23 * x27 * x28 * x4 * x43 - x3 * x53)
            )
        )
    )
    x56 = x3 * x55
    x57 = x49 * x5
    x58 = 4.0 * x57
    x59 = x0 * x14
    x60 = x3 * x59
    x61 = x3 * x49
    x62 = x40 * x5
    x63 = 3.0 * x62
    x64 = x61 + x63
    x65 = x5 * x59
    x66 = 4.0 * x65
    x67 = x3 * x40
    x68 = x33 * x5
    x69 = 2.0 * x68
    x70 = x67 + x69
    x71 = x51 * x59
    x72 = x60 * x64 + x70 * x71
    x73 = x3 * x33
    x74 = x27 * x29 * x41
    x75 = x24 * x28 * x74
    x76 = x73 + x75
    x77 = x41 * x59
    x78 = x60 * x70 + x76 * x77
    x79 = x60 * x72 + x71 * x78
    x80 = x18 * x19 * x23 * x74
    x81 = x60 * x79 + x71 * (x60 * x78 + x77 * (x3 * x80 + x60 * x76))
    x82 = x20 * x59
    x83 = da * db * dc
    x84 = 0.009523809523809524 * x83
    x85 = 2.645751311064591 * x84
    x86 = x59 * x8
    x87 = x86 * (x61 + x63)
    x88 = x86 * (x67 + x69)
    x89 = x60 * x87 + x71 * x88
    x90 = x8 * x80
    x91 = x60 * x89 + x71 * (x60 * x88 + x77 * (x73 * x86 + x90))
    x92 = 0.06666666666666667 * x83
    x93 = x11 * x59
    x94 = x93 * (x61 + x63)
    x95 = x93 * (x67 + x69)
    x96 = x60 * x94 + x71 * x95
    x97 = x11 * x80
    x98 = x60 * x96 + x71 * (x60 * x95 + x77 * (x73 * x93 + x97))
    x99 = x0**2 / x13**2
    x100 = x9 * x99
    x101 = x100 * (x61 + x63)
    x102 = x100 * x71 * (x67 + x69) + x101 * x60
    x103 = 3.872983346207417
    x104 = 0.02222222222222222 * x103 * x83
    x105 = x8 * x99
    x106 = x105 * x11
    x107 = x106 * (x61 + x63)
    x108 = x106 * x71 * (x67 + x69) + x107 * x60
    x109 = 2.23606797749979 * x92
    x110 = x12 * x99
    x111 = x110 * (x61 + x63)
    x112 = x110 * x71 * (x67 + x69) + x111 * x60
    x113 = x8**3
    x114 = x0**3 / x13**3
    x115 = x113 * x114
    x116 = x115 * (x61 + x63)
    x117 = x114 * x9
    x118 = x11 * x117
    x119 = x118 * (x61 + x63)
    x120 = x114 * x8
    x121 = x12 * x120
    x122 = x121 * (x61 + x63)
    x123 = x11**3
    x124 = x114 * x123
    x125 = x124 * (x61 + x63)
    x126 = x8**4
    x127 = x0**4 / x13**4
    x128 = x127 * x55
    x129 = x126 * x127
    x130 = x20 * x49
    x131 = x113 * x127
    x132 = x11 * x131
    x133 = x12 * x9
    x134 = x127 * x130
    x135 = x123 * x8
    x136 = x11**4
    x137 = x127 * x136
    x138 = -x7 - A[1]
    x139 = -2.0 * x1 * x138 * x17 * x19 * x23 * x27 * x28 + x35 * x8
    x140 = -x139
    x141 = x140 * x15
    x142 = -2.0 * x1 * x138 * x19 * x23 * x27 * x28 * x29 + x26 * x8
    x143 = -x5 * (x141 + x142)
    x144 = -x142
    x145 = x141 * x3 - x144 * x4
    x146 = -x145
    x147 = 2.0 * x1 * x138 * x19 * x23 * x27 * x28 * x34 - x44 * x8
    x148 = x147 * x15
    x149 = x140 * x4 - x148 * x3
    x150 = x149 * x15
    x151 = x143 + x146 * x4 - x150 * x3
    x152 = -x5 * (x139 + x148)
    x153 = 2.0 * x1 * x138 * x19 * x23 * x27 * x28 * x43 - x53 * x8
    x154 = (
        x151 * x4
        - x41 * (x145 + x150)
        - x54 * (x149 * x4 + x152 - x54 * (x147 * x4 - x153 * x54))
    )
    x155 = x154 * x3
    x156 = x151 * x5
    x157 = 3.0 * x156
    x158 = x151 * x3
    x159 = x146 * x5
    x160 = 2.0 * x159
    x161 = x158 + x160
    x162 = x144 * x5
    x163 = x146 * x3
    x164 = x162 + x163
    x165 = x161 * x60 + x164 * x77
    x166 = x60 * (x162 + x164)
    x167 = x165 * x60 + x166 * x77
    x168 = x59 * (
        x167 * x71 + x60 * (x165 * x71 + x60 * (x161 * x71 + x60 * (x155 + x157)))
    )
    x169 = x21 * x59
    x170 = x154 * x8
    x171 = x170 + x57
    x172 = x151 * x8
    x173 = x172 + x62
    x174 = x146 * x8
    x175 = x174 + x68
    x176 = x175 * x77
    x177 = x173 * x60 + x176
    x178 = x144 * x8
    x179 = x178 + x75
    x180 = x175 * x60 + x179 * x65
    x181 = x177 * x60 + x180 * x77
    x182 = x59 * (x181 * x71 + x60 * (x177 * x71 + x60 * (x171 * x60 + x173 * x71)))
    x183 = x160 * x93
    x184 = x158 * x93 + x183
    x185 = x162 * x93
    x186 = x163 * x93 + x185
    x187 = x184 * x60 + x186 * x77
    x188 = x59 * (x187 * x71 + x60 * (x184 * x71 + x60 * x93 * (x155 + x157)))
    x189 = x86 * (x171 + x57)
    x190 = x86 * (x173 + x62)
    x191 = x86 * (x175 + x68)
    x192 = x191 * x77
    x193 = x190 * x60 + x192
    x194 = x59 * (x193 * x71 + x60 * (x189 * x60 + x190 * x71))
    x195 = x57 * x93
    x196 = x170 * x93 + x195
    x197 = x62 * x93
    x198 = x172 * x93 + x197
    x199 = x68 * x93
    x200 = x174 * x93 + x199
    x201 = x200 * x77
    x202 = x198 * x60 + x201
    x203 = x59 * (x202 * x71 + x60 * (x196 * x60 + x198 * x71))
    x204 = x110 * x160
    x205 = x110 * x158 + x204
    x206 = x59 * (x110 * x60 * (x155 + x157) + x205 * x71)
    x207 = x100 * x57 + x189 * x86
    x208 = x100 * x62 + x190 * x86
    x209 = x59 * (x207 * x60 + x208 * x71)
    x210 = x106 * x57 + x196 * x86
    x211 = x106 * x62 + x198 * x86
    x212 = x59 * (x210 * x60 + x211 * x71)
    x213 = x110 * x57
    x214 = x110 * x170 + x213
    x215 = x110 * x62
    x216 = x110 * x172 + x215
    x217 = x59 * (x214 * x60 + x216 * x71)
    x218 = x124 * x59 * (x155 + x157)
    x219 = x59 * (x115 * x57 + x207 * x86)
    x220 = x21 * x49
    x221 = x59 * (x118 * x57 + x210 * x86)
    x222 = x59 * (x121 * x57 + x214 * x86)
    x223 = x127 * x220
    x224 = x124 * x57
    x225 = x59 * (x124 * x170 + x224)
    x226 = x137 * x154
    x227 = -x10 - A[2]
    x228 = -2.0 * x1 * x17 * x19 * x227 * x23 * x27 * x28 + x11 * x35
    x229 = -x228
    x230 = x15 * x229
    x231 = -2.0 * x1 * x19 * x227 * x23 * x27 * x28 * x29 + x11 * x26
    x232 = -x5 * (x230 + x231)
    x233 = -x231
    x234 = x230 * x3 - x233 * x4
    x235 = -x234
    x236 = 2.0 * x1 * x19 * x227 * x23 * x27 * x28 * x34 - x11 * x44
    x237 = x15 * x236
    x238 = x229 * x4 - x237 * x3
    x239 = x15 * x238
    x240 = x232 + x235 * x4 - x239 * x3
    x241 = -x5 * (x228 + x237)
    x242 = 2.0 * x1 * x19 * x227 * x23 * x27 * x28 * x43 - x11 * x53
    x243 = (
        x240 * x4
        - x41 * (x234 + x239)
        - x54 * (x238 * x4 + x241 - x54 * (x236 * x4 - x242 * x54))
    )
    x244 = x243 * x3
    x245 = x240 * x5
    x246 = 3.0 * x245
    x247 = x240 * x3
    x248 = x235 * x5
    x249 = 2.0 * x248
    x250 = x247 + x249
    x251 = x233 * x5
    x252 = x235 * x3
    x253 = x251 + x252
    x254 = x250 * x60 + x253 * x77
    x255 = x60 * (x251 + x253)
    x256 = x254 * x60 + x255 * x77
    x257 = x59 * (
        x256 * x71 + x60 * (x254 * x71 + x60 * (x250 * x71 + x60 * (x244 + x246)))
    )
    x258 = x22 * x59
    x259 = x86 * (x247 + x249)
    x260 = x251 * x86
    x261 = x252 * x86 + x260
    x262 = x259 * x60 + x261 * x77
    x263 = x59 * (x262 * x71 + x60 * (x259 * x71 + x60 * x86 * (x244 + x246)))
    x264 = x11 * x243 + x57
    x265 = x11 * x240 + x62
    x266 = x11 * x235 + x68
    x267 = x266 * x77
    x268 = x265 * x60 + x267
    x269 = x11 * x233 + x75
    x270 = x269 * x65
    x271 = x266 * x60 + x270
    x272 = x268 * x60 + x271 * x77
    x273 = x59 * (x272 * x71 + x60 * (x268 * x71 + x60 * (x264 * x60 + x265 * x71)))
    x274 = x100 * (x247 + x249)
    x275 = x59 * (x100 * x60 * (x244 + x246) + x274 * x71)
    x276 = x105 * x3
    x277 = x265 * x51
    x278 = x266 * x41
    x279 = x105 * x278 + x265 * x276
    x280 = x59 * (x279 * x71 + x60 * (x105 * x277 + x264 * x276))
    x281 = x195 + x264 * x93
    x282 = x197 + x265 * x93
    x283 = x199 + x266 * x93
    x284 = x283 * x77
    x285 = x282 * x60 + x284
    x286 = x59 * (x285 * x71 + x60 * (x281 * x60 + x282 * x71))
    x287 = x115 * x59 * (x244 + x246)
    x288 = x117 * x3
    x289 = x59 * (x117 * x277 + x264 * x288)
    x290 = x59 * (x105 * x282 * x51 + x276 * x281)
    x291 = x213 + x281 * x93
    x292 = x215 + x282 * x93
    x293 = x59 * (x291 * x60 + x292 * x71)
    x294 = x129 * x243
    x295 = x22 * x49
    x296 = x131 * x264
    x297 = x117 * x281
    x298 = x127 * x295
    x299 = x105 * x291
    x300 = x59 * (x224 + x291 * x93)
    x301 = x6 * x99
    x302 = x167 * x60 + x77 * (x162 * x301 + x166 * x60)
    x303 = 5.916079783099616 * x84
    x304 = x3 * x99
    x305 = x304 * x5
    x306 = x181 * x60 + x77 * (x179 * x305 + x180 * x60)
    x307 = x11 * x304
    x308 = x187 * x60 + x77 * (x162 * x307 + x186 * x60)
    x309 = x179 * x86 + x90
    x310 = x193 * x60 + x77 * (x191 * x60 + x309 * x65)
    x311 = 1.732050807568877
    x312 = 0.1111111111111111 * x311 * x83
    x313 = x178 * x93 + x97
    x314 = x202 * x60 + x77 * (x200 * x60 + x313 * x65)
    x315 = 0.3333333333333333 * x83
    x316 = x110 * x162
    x317 = x205 * x60 + x77 * (x110 * x163 + x316)
    x318 = x77 * (x100 * x68 + x191 * x86)
    x319 = x208 * x60 + x318
    x320 = x77 * (x106 * x68 + x200 * x86)
    x321 = x211 * x60 + x320
    x322 = x110 * x68
    x323 = x77 * (x110 * x174 + x322)
    x324 = x216 * x60 + x323
    x325 = x124 * x160
    x326 = x124 * x158 + x325
    x327 = x115 * x62 + x208 * x86
    x328 = x118 * x62 + x211 * x86
    x329 = x121 * x62 + x216 * x86
    x330 = x124 * x62
    x331 = x124 * x172 + x330
    x332 = x137 * x151
    x333 = x138 * x140 - x148 * x8 + x42
    x334 = x15 * x333
    x335 = x141 * x8
    x336 = x5 * (x138 * x144 - x334 - x335 - x50)
    x337 = x138 * x144 + x31 - x335
    x338 = -x3 * x334 + x337 * x4
    x339 = x15 * x8
    x340 = x138 * x147 - x153 * x339 + x52
    x341 = x336 + x338 * x4 - x54 * (x333 * x4 - x340 * x54)
    x342 = x3 * x341
    x343 = x338 * x5
    x344 = 2.0 * x343
    x345 = x337 * x5
    x346 = x3 * x338
    x347 = x345 + x346
    x348 = x60 * (x345 + x347)
    x349 = x301 * x345 + x348 * x60
    x350 = x59 * (
        x349 * x77 + x60 * (x348 * x77 + x60 * (x347 * x77 + x60 * (x342 + x344)))
    )
    x351 = x341 * x8
    x352 = 2.0 * x156
    x353 = x351 + x352
    x354 = x338 * x8
    x355 = x160 + x354
    x356 = x337 * x8
    x357 = 2.0 * x162
    x358 = x356 + x357
    x359 = x355 * x60 + x358 * x65
    x360 = x305 * x358 + x359 * x60
    x361 = x59 * (x360 * x77 + x60 * (x359 * x77 + x60 * (x353 * x60 + x355 * x77)))
    x362 = x345 * x93
    x363 = x346 * x93 + x362
    x364 = x307 * x345 + x363 * x60
    x365 = x59 * (x364 * x77 + x60 * (x363 * x77 + x60 * x93 * (x342 + x344)))
    x366 = x173 * x77 + x353 * x86
    x367 = x176 + x355 * x86
    x368 = x179 * x77 + x358 * x86
    x369 = x367 * x60 + x368 * x65
    x370 = x59 * (x369 * x77 + x60 * (x366 * x60 + x367 * x77))
    x371 = x93 * (x351 + x352)
    x372 = x183 + x354 * x93
    x373 = x93 * (x356 + x357)
    x374 = x372 * x60 + x373 * x65
    x375 = x59 * (x374 * x77 + x60 * (x371 * x60 + x372 * x77))
    x376 = x110 * x345
    x377 = x110 * x346 + x376
    x378 = x59 * (x110 * x60 * (x342 + x344) + x377 * x77)
    x379 = x190 * x77 + x366 * x86
    x380 = x192 + x367 * x86
    x381 = x59 * (x379 * x60 + x380 * x77)
    x382 = x198 * x77 + x371 * x86
    x383 = x201 + x372 * x86
    x384 = x59 * (x382 * x60 + x383 * x77)
    x385 = x110 * (x351 + x352)
    x386 = x110 * x354 + x204
    x387 = x59 * (x385 * x60 + x386 * x77)
    x388 = x124 * x59 * (x342 + x344)
    x389 = x59 * (x208 * x77 + x379 * x86)
    x390 = x59 * (x211 * x77 + x382 * x86)
    x391 = x59 * (x216 * x77 + x385 * x86)
    x392 = x124 * x59 * (x351 + x352)
    x393 = x137 * x341
    x394 = x138 * x229 - x237 * x8
    x395 = x15 * x394
    x396 = -x138 * x233 + x230 * x8
    x397 = -x5 * (x395 + x396)
    x398 = -x396
    x399 = -x3 * x395 + x398 * x4
    x400 = x138 * x236 - x242 * x339
    x401 = x397 + x399 * x4 - x54 * (x394 * x4 - x400 * x54)
    x402 = x399 * x41
    x403 = x398 * x5
    x404 = x3 * x399 + x403
    x405 = x60 * (x403 + x404)
    x406 = x301 * x403 + x405 * x60
    x407 = x59 * (
        x406 * x77 + x60 * (x405 * x77 + x60 * (x404 * x77 + x60 * (x3 * x401 + x402)))
    )
    x408 = x245 + x401 * x8
    x409 = x248 + x399 * x8
    x410 = x409 * x77
    x411 = x251 + x398 * x8
    x412 = x409 * x60 + x411 * x65
    x413 = x305 * x411 + x412 * x60
    x414 = x59 * (x413 * x77 + x60 * (x412 * x77 + x60 * (x408 * x60 + x410)))
    x415 = x11 * x401 + x156
    x416 = x11 * x399 + x159
    x417 = x416 * x77
    x418 = x11 * x398 + x162
    x419 = x416 * x60 + x418 * x65
    x420 = x305 * x418 + x419 * x60
    x421 = x59 * (x420 * x77 + x60 * (x419 * x77 + x60 * (x415 * x60 + x417)))
    x422 = x86 * (x245 + x408)
    x423 = x86 * (x248 + x409)
    x424 = x423 * x77
    x425 = x260 + x411 * x86
    x426 = x423 * x60 + x425 * x65
    x427 = x59 * (x426 * x77 + x60 * (x422 * x60 + x424))
    x428 = x265 * x65 + x415 * x86
    x429 = x266 * x65 + x416 * x86
    x430 = x429 * x77
    x431 = x270 + x418 * x86
    x432 = x429 * x60 + x431 * x65
    x433 = x59 * (x432 * x77 + x60 * (x428 * x60 + x430))
    x434 = x93 * (x156 + x415)
    x435 = x93 * (x159 + x416)
    x436 = x435 * x77
    x437 = x185 + x418 * x93
    x438 = x435 * x60 + x437 * x65
    x439 = x59 * (x438 * x77 + x60 * (x434 * x60 + x436))
    x440 = x100 * x245 + x422 * x86
    x441 = x100 * x248 + x423 * x86
    x442 = x441 * x77
    x443 = x59 * (x440 * x60 + x442)
    x444 = x105 * x5
    x445 = x265 * x444 + x428 * x86
    x446 = x266 * x444 + x429 * x86
    x447 = x446 * x77
    x448 = x59 * (x445 * x60 + x447)
    x449 = x282 * x65 + x434 * x86
    x450 = x283 * x65 + x435 * x86
    x451 = x450 * x77
    x452 = x59 * (x449 * x60 + x451)
    x453 = x110 * x156 + x434 * x93
    x454 = x110 * x159 + x435 * x93
    x455 = x454 * x77
    x456 = x59 * (x453 * x60 + x455)
    x457 = x59 * (x115 * x245 + x440 * x86)
    x458 = x117 * x5
    x459 = x59 * (x265 * x458 + x445 * x86)
    x460 = x59 * (x282 * x444 + x449 * x86)
    x461 = x59 * (x292 * x65 + x453 * x86)
    x462 = x59 * (x124 * x156 + x453 * x93)
    x463 = x256 * x60 + x77 * (x251 * x301 + x255 * x60)
    x464 = x262 * x60 + x77 * (x251 * x276 + x261 * x60)
    x465 = x272 * x60 + x77 * (x269 * x305 + x271 * x60)
    x466 = x100 * x251
    x467 = x274 * x60 + x77 * (x100 * x252 + x466)
    x468 = x269 * x444
    x469 = x279 * x60 + x77 * (x266 * x276 + x468)
    x470 = x269 * x93 + x97
    x471 = x470 * x65
    x472 = x285 * x60 + x77 * (x283 * x60 + x471)
    x473 = x115 * (x247 + x249)
    x474 = x117 * x278 + x265 * x288
    x475 = x105 * x41
    x476 = x276 * x282 + x283 * x475
    x477 = x283 * x93 + x322
    x478 = x477 * x77
    x479 = x292 * x60 + x478
    x480 = x129 * x240
    x481 = x131 * x265
    x482 = x117 * x282
    x483 = x105 * x292
    x484 = x292 * x93 + x330
    x485 = -x11 * x237 + x227 * x229 + x42
    x486 = x15 * x485
    x487 = x11 * x230
    x488 = x5 * (x227 * x233 - x486 - x487 - x50)
    x489 = x227 * x233 + x31 - x487
    x490 = -x3 * x486 + x4 * x489
    x491 = x11 * x15
    x492 = x227 * x236 - x242 * x491 + x52
    x493 = x4 * x490 + x488 - x54 * (x4 * x485 - x492 * x54)
    x494 = x3 * x493
    x495 = x490 * x5
    x496 = 2.0 * x495
    x497 = x489 * x5
    x498 = x3 * x490
    x499 = x497 + x498
    x500 = x60 * (x497 + x499)
    x501 = x301 * x497 + x500 * x60
    x502 = x59 * (
        x501 * x77 + x60 * (x500 * x77 + x60 * (x499 * x77 + x60 * (x494 + x496)))
    )
    x503 = x497 * x86
    x504 = x498 * x86 + x503
    x505 = x276 * x497 + x504 * x60
    x506 = x59 * (x505 * x77 + x60 * (x504 * x77 + x60 * x86 * (x494 + x496)))
    x507 = x11 * x493 + 2.0 * x245
    x508 = x11 * x490 + x249
    x509 = x11 * x489 + 2.0 * x251
    x510 = x509 * x65
    x511 = x508 * x60 + x510
    x512 = x305 * x509 + x511 * x60
    x513 = x59 * (x512 * x77 + x60 * (x511 * x77 + x60 * (x507 * x60 + x508 * x77)))
    x514 = x100 * x497
    x515 = x100 * x498 + x514
    x516 = x59 * (x100 * x60 * (x494 + x496) + x515 * x77)
    x517 = x444 * x509
    x518 = x276 * x508 + x517
    x519 = x59 * (x518 * x77 + x60 * (x276 * x507 + x475 * x508))
    x520 = x265 * x77 + x507 * x93
    x521 = x267 + x508 * x93
    x522 = x269 * x77 + x509 * x93
    x523 = x522 * x65
    x524 = x521 * x60 + x523
    x525 = x59 * (x524 * x77 + x60 * (x520 * x60 + x521 * x77))
    x526 = x115 * x59 * (x494 + x496)
    x527 = x59 * (x117 * x41 * x508 + x288 * x507)
    x528 = x59 * (x276 * x520 + x475 * x521)
    x529 = x282 * x77 + x520 * x93
    x530 = x284 + x521 * x93
    x531 = x59 * (x529 * x60 + x530 * x77)
    x532 = x129 * x493
    x533 = x131 * x507
    x534 = x117 * x520
    x535 = x105 * x529
    x536 = x59 * (x292 * x77 + x529 * x93)
    x537 = x3**3
    x538 = x114 * x537
    x539 = x345 * x538 + x349 * x60
    x540 = x114 * x6
    x541 = x5 * x540
    x542 = x358 * x541 + x360 * x60
    x543 = x11 * x540
    x544 = x345 * x543 + x364 * x60
    x545 = x305 * x368 + x369 * x60
    x546 = x305 * x373 + x374 * x60
    x547 = x114 * x12 * x3
    x548 = x345 * x547 + x377 * x60
    x549 = x309 * x77 + x368 * x86
    x550 = x380 * x60 + x549 * x65
    x551 = x313 * x77 + x373 * x86
    x552 = x383 * x60 + x551 * x65
    x553 = x110 * (x356 + x357)
    x554 = x386 * x60 + x553 * x65
    x555 = x124 * x345
    x556 = x124 * x346 + x555
    x557 = x318 + x380 * x86
    x558 = x320 + x383 * x86
    x559 = x323 + x386 * x86
    x560 = x124 * x354 + x325
    x561 = x137 * x338
    x562 = x138 * x337 + 2.0 * x143 - x334 * x8
    x563 = x5 * x562
    x564 = x138 * x333 + 2.0 * x152 - x339 * x340
    x565 = x4 * x562 - x54 * x564
    x566 = x3 * x565
    x567 = x59 * (x538 * x563 + x60 * (x301 * x563 + x60**2 * (2.0 * x563 + x566)))
    x568 = x562 * x8
    x569 = 3.0 * x345
    x570 = x568 + x569
    x571 = x570 * x65
    x572 = x565 * x8
    x573 = 3.0 * x343
    x574 = x572 + x573
    x575 = x59 * (x541 * x570 + x60 * (x305 * x570 + x60 * (x571 + x574 * x60)))
    x576 = x563 * x93
    x577 = x59 * (x543 * x563 + x60 * (x307 * x563 + x60 * (x566 * x93 + x576)))
    x578 = x358 * x71 + x570 * x86
    x579 = x578 * x65
    x580 = x355 * x71 + x574 * x86
    x581 = x59 * (x305 * x578 + x60 * (x579 + x580 * x60))
    x582 = x93 * (x568 + x569)
    x583 = x582 * x65
    x584 = x93 * (x572 + x573)
    x585 = x59 * (x305 * x582 + x60 * (x583 + x584 * x60))
    x586 = x110 * x563
    x587 = x59 * (x547 * x563 + x60 * (x110 * x566 + x586))
    x588 = x368 * x71 + x578 * x86
    x589 = x588 * x65
    x590 = x367 * x71 + x580 * x86
    x591 = x59 * (x589 + x590 * x60)
    x592 = x373 * x71 + x582 * x86
    x593 = x592 * x65
    x594 = x372 * x71 + x584 * x86
    x595 = x59 * (x593 + x594 * x60)
    x596 = x110 * (x568 + x569)
    x597 = x596 * x65
    x598 = x110 * (x572 + x573)
    x599 = x59 * (x597 + x598 * x60)
    x600 = x124 * x563
    x601 = x59 * (x124 * x566 + x600)
    x602 = x59 * (x380 * x71 + x590 * x86)
    x603 = x59 * (x383 * x71 + x594 * x86)
    x604 = x59 * (x386 * x71 + x598 * x86)
    x605 = x124 * x59 * (x572 + x573)
    x606 = x137 * x565
    x607 = x138 * x398 + x232 - x395 * x8
    x608 = x5 * x607
    x609 = x138 * x394 + x241 - x339 * x400
    x610 = x4 * x607 - x54 * x609
    x611 = x59 * (x538 * x608 + x60 * (x301 * x608 + x60**2 * (x3 * x610 + 2.0 * x608)))
    x612 = 2.0 * x403
    x613 = x607 * x8 + x612
    x614 = x402 + x610 * x8
    x615 = x59 * (x541 * x613 + x60 * (x305 * x613 + x60 * (x60 * x614 + x613 * x65)))
    x616 = x11 * x607 + x345
    x617 = x11 * x610 + x343
    x618 = x59 * (x541 * x616 + x60 * (x305 * x616 + x60 * (x60 * x617 + x616 * x65)))
    x619 = x411 * x77 + x613 * x86
    x620 = x410 + x614 * x86
    x621 = x59 * (x305 * x619 + x60 * (x60 * x620 + x619 * x65))
    x622 = x418 * x77
    x623 = x616 * x86 + x622
    x624 = x417 + x617 * x86
    x625 = x59 * (x305 * x623 + x60 * (x60 * x624 + x623 * x65))
    x626 = x362 + x616 * x93
    x627 = x93 * (x343 + x617)
    x628 = x59 * (x305 * x626 + x60 * (x60 * x627 + x626 * x65))
    x629 = x425 * x77 + x619 * x86
    x630 = x424 + x620 * x86
    x631 = x59 * (x60 * x630 + x629 * x65)
    x632 = x431 * x77 + x623 * x86
    x633 = x430 + x624 * x86
    x634 = x59 * (x60 * x633 + x632 * x65)
    x635 = x437 * x77
    x636 = x626 * x86 + x635
    x637 = x436 + x627 * x86
    x638 = x59 * (x60 * x637 + x636 * x65)
    x639 = x376 + x626 * x93
    x640 = x110 * x343 + x627 * x93
    x641 = x59 * (x60 * x640 + x639 * x65)
    x642 = x59 * (x442 + x630 * x86)
    x643 = x59 * (x447 + x633 * x86)
    x644 = x59 * (x451 + x637 * x86)
    x645 = x59 * (x455 + x640 * x86)
    x646 = x59 * (x124 * x343 + x640 * x93)
    x647 = x403 * x538 + x406 * x60
    x648 = 10.2469507659596 * x84
    x649 = x411 * x541 + x413 * x60
    x650 = x103 * x92
    x651 = x418 * x541 + x420 * x60
    x652 = x305 * x425 + x426 * x60
    x653 = x305 * x431 + x432 * x60
    x654 = x311 * x315
    x655 = x305 * x437 + x438 * x60
    x656 = x425 * x86 + x466
    x657 = x441 * x60 + x65 * x656
    x658 = x431 * x86 + x468
    x659 = x446 * x60 + x65 * x658
    x660 = x437 * x86 + x471
    x661 = x450 * x60 + x65 * x660
    x662 = x316 + x437 * x93
    x663 = x454 * x60 + x65 * x662
    x664 = x115 * x248 + x441 * x86
    x665 = x266 * x458 + x446 * x86
    x666 = x283 * x444 + x450 * x86
    x667 = x454 * x86 + x477 * x65
    x668 = x124 * x159 + x454 * x93
    x669 = x138 * x489 - x486 * x8
    x670 = x5 * x669
    x671 = x138 * x485 - x339 * x492
    x672 = x4 * x669 - x54 * x671
    x673 = x59 * (x538 * x670 + x60 * (x301 * x670 + x60**2 * (x3 * x672 + 2.0 * x670)))
    x674 = x497 + x669 * x8
    x675 = x495 + x672 * x8
    x676 = x59 * (x541 * x674 + x60 * (x305 * x674 + x60 * (x60 * x675 + x65 * x674)))
    x677 = x11 * x669 + x612
    x678 = x11 * x672 + x402
    x679 = x59 * (x541 * x677 + x60 * (x305 * x677 + x60 * (x60 * x678 + x65 * x677)))
    x680 = x503 + x674 * x86
    x681 = x86 * (x495 + x675)
    x682 = x59 * (x305 * x680 + x60 * (x60 * x681 + x65 * x680))
    x683 = x510 + x677 * x86
    x684 = x508 * x65 + x678 * x86
    x685 = x59 * (x305 * x683 + x60 * (x60 * x684 + x65 * x683))
    x686 = x622 + x677 * x93
    x687 = x417 + x678 * x93
    x688 = x59 * (x305 * x686 + x60 * (x60 * x687 + x65 * x686))
    x689 = x514 + x680 * x86
    x690 = x100 * x495 + x681 * x86
    x691 = x59 * (x60 * x690 + x65 * x689)
    x692 = x517 + x683 * x86
    x693 = x444 * x508 + x684 * x86
    x694 = x59 * (x60 * x693 + x65 * x692)
    x695 = x523 + x686 * x86
    x696 = x521 * x65 + x687 * x86
    x697 = x59 * (x60 * x696 + x65 * x695)
    x698 = x635 + x686 * x93
    x699 = x436 + x687 * x93
    x700 = x59 * (x60 * x699 + x65 * x698)
    x701 = x59 * (x115 * x495 + x690 * x86)
    x702 = x59 * (x458 * x508 + x693 * x86)
    x703 = x59 * (x444 * x521 + x696 * x86)
    x704 = x59 * (x530 * x65 + x699 * x86)
    x705 = x59 * (x455 + x699 * x93)
    x706 = x497 * x538 + x501 * x60
    x707 = x540 * x8
    x708 = x497 * x707 + x505 * x60
    x709 = x509 * x541 + x512 * x60
    x710 = x288 * x497 + x515 * x60
    x711 = x120 * x3
    x712 = x5 * x711
    x713 = x509 * x712 + x518 * x60
    x714 = x305 * x522 + x524 * x60
    x715 = x115 * x497
    x716 = x115 * x498 + x715
    x717 = x458 * x509
    x718 = x288 * x508 + x717
    x719 = x444 * x522
    x720 = x276 * x521 + x719
    x721 = x470 * x77 + x522 * x93
    x722 = x65 * x721
    x723 = x530 * x60 + x722
    x724 = x129 * x490
    x725 = x131 * x508
    x726 = x117 * x521
    x727 = x105 * x530
    x728 = x478 + x530 * x93
    x729 = -x11 * x486 + x227 * x489 + 2.0 * x232
    x730 = x5 * x729
    x731 = x227 * x485 + 2.0 * x241 - x491 * x492
    x732 = x4 * x729 - x54 * x731
    x733 = x3 * x732
    x734 = x59 * (x538 * x730 + x60 * (x301 * x730 + x60**2 * (2.0 * x730 + x733)))
    x735 = x730 * x86
    x736 = x59 * (x60 * (x276 * x730 + x60 * (x733 * x86 + x735)) + x707 * x730)
    x737 = x11 * x729 + 3.0 * x497
    x738 = x65 * x737
    x739 = x11 * x732 + 3.0 * x495
    x740 = x59 * (x541 * x737 + x60 * (x305 * x737 + x60 * (x60 * x739 + x738)))
    x741 = x100 * x730
    x742 = x59 * (x288 * x730 + x60 * (x100 * x733 + x741))
    x743 = x444 * x737
    x744 = x59 * (x60 * (x276 * x739 + x743) + x712 * x737)
    x745 = x509 * x71 + x737 * x93
    x746 = x65 * x745
    x747 = x508 * x71 + x739 * x93
    x748 = x59 * (x305 * x745 + x60 * (x60 * x747 + x746))
    x749 = x115 * x730
    x750 = x59 * (x115 * x733 + x749)
    x751 = x458 * x737
    x752 = x59 * (x288 * x739 + x751)
    x753 = x444 * x745
    x754 = x59 * (x276 * x747 + x753)
    x755 = x522 * x71 + x745 * x93
    x756 = x65 * x755
    x757 = x521 * x71 + x747 * x93
    x758 = x59 * (x60 * x757 + x756)
    x759 = x129 * x732
    x760 = x131 * x739
    x761 = x117 * x747
    x762 = x105 * x757
    x763 = x59 * (x530 * x71 + x757 * x93)
    x764 = x127 * x3**4
    x765 = x20 * x562
    x766 = x127 * x537
    x767 = x570 * x766
    x768 = x11 * x766
    x769 = x20 * x540
    x770 = x12 * x6
    x771 = x127 * x765
    x772 = x20 * x304
    x773 = x123 * x3
    x774 = x549 * x71 + x588 * x86
    x775 = x551 * x71 + x592 * x86
    x776 = x553 * x71 + x596 * x86
    x777 = x124 * (x568 + x569)
    x778 = x138 * x562 + 3.0 * x336 - x339 * x564
    x779 = x21 * x562
    x780 = x778 * x8
    x781 = 4.0 * x563
    x782 = x780 + x781
    x783 = 4.0 * x571 + x782 * x86
    x784 = x21 * x540
    x785 = x93 * (x780 + x781)
    x786 = x127 * x778
    x787 = x127 * x779
    x788 = 4.0 * x579 + x783 * x86
    x789 = x21 * x304
    x790 = 4.0 * x583 + x785 * x86
    x791 = x110 * (x780 + x781)
    x792 = x138 * x607 - x339 * x609 + 2.0 * x397
    x793 = x764 * x792
    x794 = x22 * x562
    x795 = 3.0 * x608 + x792 * x8
    x796 = x766 * x795
    x797 = x11 * x792 + x563
    x798 = x766 * x797
    x799 = x613 * x71 + x795 * x86
    x800 = x540 * x799
    x801 = x22 * x540
    x802 = x616 * x71 + x797 * x86
    x803 = x540 * x802
    x804 = x576 + x797 * x93
    x805 = x540 * x804
    x806 = x127 * x794
    x807 = x619 * x71 + x799 * x86
    x808 = x304 * x807
    x809 = x22 * x304
    x810 = x623 * x71 + x802 * x86
    x811 = x304 * x810
    x812 = x626 * x71 + x804 * x86
    x813 = x304 * x812
    x814 = x586 + x804 * x93
    x815 = x304 * x814
    x816 = x59 * (x629 * x71 + x807 * x86)
    x817 = x59 * (x632 * x71 + x810 * x86)
    x818 = x59 * (x636 * x71 + x812 * x86)
    x819 = x59 * (x639 * x71 + x814 * x86)
    x820 = x59 * (x600 + x814 * x93)
    x821 = x607 * x764
    x822 = x20 * x766
    x823 = x629 * x86 + x656 * x77
    x824 = x632 * x86 + x658 * x77
    x825 = x636 * x86 + x660 * x77
    x826 = x662 * x77
    x827 = x639 * x86 + x826
    x828 = x555 + x639 * x93
    x829 = x21 * x766
    x830 = x138 * x669 - x339 * x671 + x488
    x831 = x764 * x830
    x832 = 2.0 * x670 + x8 * x830
    x833 = x766 * x832
    x834 = x22 * x766
    x835 = x11 * x830 + 2.0 * x608
    x836 = x766 * x835
    x837 = x674 * x77 + x832 * x86
    x838 = x540 * x837
    x839 = x677 * x77 + x835 * x86
    x840 = x540 * x839
    x841 = x616 * x77 + x835 * x93
    x842 = x540 * x841
    x843 = x680 * x77 + x837 * x86
    x844 = x304 * x843
    x845 = x683 * x77 + x839 * x86
    x846 = x304 * x845
    x847 = x686 * x77 + x841 * x86
    x848 = x304 * x847
    x849 = x626 * x77 + x841 * x93
    x850 = x304 * x849
    x851 = x59 * (x689 * x77 + x843 * x86)
    x852 = x59 * (x692 * x77 + x845 * x86)
    x853 = x59 * (x695 * x77 + x847 * x86)
    x854 = x59 * (x698 * x77 + x849 * x86)
    x855 = x59 * (x639 * x77 + x849 * x93)
    x856 = x669 * x764
    x857 = x689 * x86 + x715
    x858 = x692 * x86 + x717
    x859 = x695 * x86 + x719
    x860 = x698 * x86 + x722
    x861 = x698 * x93 + x826
    x862 = x138 * x729 - x339 * x731
    x863 = x764 * x862
    x864 = x730 + x8 * x862
    x865 = x766 * x864
    x866 = x11 * x862 + 3.0 * x670
    x867 = x766 * x866
    x868 = x735 + x86 * x864
    x869 = x540 * x868
    x870 = x738 + x86 * x866
    x871 = x540 * x870
    x872 = x677 * x71 + x866 * x93
    x873 = x540 * x872
    x874 = x741 + x86 * x868
    x875 = x304 * x874
    x876 = x743 + x86 * x870
    x877 = x304 * x876
    x878 = x746 + x86 * x872
    x879 = x304 * x878
    x880 = x686 * x71 + x872 * x93
    x881 = x304 * x880
    x882 = x59 * (x749 + x86 * x874)
    x883 = x59 * (x751 + x86 * x876)
    x884 = x59 * (x753 + x86 * x878)
    x885 = x59 * (x756 + x86 * x880)
    x886 = x59 * (x698 * x71 + x880 * x93)
    x887 = x20 * x729
    x888 = x729 * x8
    x889 = x127 * x6
    x890 = x889 * x9
    x891 = x8 * x889
    x892 = x20 * x737
    x893 = x131 * x3
    x894 = x127 * x3 * x9
    x895 = x711 * x745
    x896 = x131 * x737
    x897 = x117 * x745
    x898 = x105 * x755
    x899 = x71 * x721 + x755 * x93
    x900 = x21 * x729
    x901 = x21 * x737
    x902 = x227 * x729 + 3.0 * x488 - x491 * x731
    x903 = x22 * x729
    x904 = x11 * x902 + 4.0 * x730
    x905 = x22 * x737
    x906 = 4.0 * x738 + x904 * x93
    x907 = 4.0 * x746 + x906 * x93

    # 450 item(s)
    result[0, 0, 0] = numpy.sum(
        x85
        * (
            x59 * (x60 * (x60 * (x60 * (x56 + x58) + x64 * x66) + x66 * x72) + x66 * x79)
            + x81 * x82
        )
    )
    result[0, 0, 1] = numpy.sum(
        x92
        * (x59 * (x60 * (x60 * x86 * (x56 + x58) + x66 * x87) + x66 * x89) + x82 * x91)
    )
    result[0, 0, 2] = numpy.sum(
        x92
        * (x59 * (x60 * (x60 * x93 * (x56 + x58) + x66 * x94) + x66 * x96) + x82 * x98)
    )
    result[0, 0, 3] = numpy.sum(
        x104 * (x102 * x82 + x59 * (x100 * x60 * (x56 + x58) + x101 * x66))
    )
    result[0, 0, 4] = numpy.sum(
        x109 * (x108 * x82 + x59 * (x106 * x60 * (x56 + x58) + x107 * x66))
    )
    result[0, 0, 5] = numpy.sum(
        x104 * (x112 * x82 + x59 * (x110 * x60 * (x56 + x58) + x111 * x66))
    )
    result[0, 0, 6] = numpy.sum(x92 * (x115 * x59 * (x56 + x58) + x116 * x82))
    result[0, 0, 7] = numpy.sum(x109 * (x118 * x59 * (x56 + x58) + x119 * x82))
    result[0, 0, 8] = numpy.sum(x109 * (x121 * x59 * (x56 + x58) + x122 * x82))
    result[0, 0, 9] = numpy.sum(x92 * (x124 * x59 * (x56 + x58) + x125 * x82))
    result[0, 0, 10] = numpy.sum(x85 * (x126 * x128 + x129 * x130))
    result[0, 0, 11] = numpy.sum(x92 * (x11 * x113 * x128 + x130 * x132))
    result[0, 0, 12] = numpy.sum(x104 * x133 * (x128 + x134))
    result[0, 0, 13] = numpy.sum(x135 * x92 * (x128 + x134))
    result[0, 0, 14] = numpy.sum(x85 * (x128 * x136 + x130 * x137))
    result[0, 1, 0] = numpy.sum(x85 * (x168 + x169 * x81))
    result[0, 1, 1] = numpy.sum(x92 * (x169 * x91 + x182))
    result[0, 1, 2] = numpy.sum(x92 * (x169 * x98 + x188))
    result[0, 1, 3] = numpy.sum(x104 * (x102 * x169 + x194))
    result[0, 1, 4] = numpy.sum(x109 * (x108 * x169 + x203))
    result[0, 1, 5] = numpy.sum(x104 * (x112 * x169 + x206))
    result[0, 1, 6] = numpy.sum(x92 * (x116 * x169 + x209))
    result[0, 1, 7] = numpy.sum(x109 * (x119 * x169 + x212))
    result[0, 1, 8] = numpy.sum(x109 * (x122 * x169 + x217))
    result[0, 1, 9] = numpy.sum(x92 * (x125 * x169 + x218))
    result[0, 1, 10] = numpy.sum(x85 * (x129 * x220 + x219))
    result[0, 1, 11] = numpy.sum(x92 * (x132 * x220 + x221))
    result[0, 1, 12] = numpy.sum(x104 * (x133 * x223 + x222))
    result[0, 1, 13] = numpy.sum(x92 * (x135 * x223 + x225))
    result[0, 1, 14] = numpy.sum(x85 * (x137 * x220 + x226))
    result[0, 2, 0] = numpy.sum(x85 * (x257 + x258 * x81))
    result[0, 2, 1] = numpy.sum(x92 * (x258 * x91 + x263))
    result[0, 2, 2] = numpy.sum(x92 * (x258 * x98 + x273))
    result[0, 2, 3] = numpy.sum(x104 * (x102 * x258 + x275))
    result[0, 2, 4] = numpy.sum(x109 * (x108 * x258 + x280))
    result[0, 2, 5] = numpy.sum(x104 * (x112 * x258 + x286))
    result[0, 2, 6] = numpy.sum(x92 * (x116 * x258 + x287))
    result[0, 2, 7] = numpy.sum(x109 * (x119 * x258 + x289))
    result[0, 2, 8] = numpy.sum(x109 * (x122 * x258 + x290))
    result[0, 2, 9] = numpy.sum(x92 * (x125 * x258 + x293))
    result[0, 2, 10] = numpy.sum(x85 * (x129 * x295 + x294))
    result[0, 2, 11] = numpy.sum(x92 * (x132 * x295 + x296))
    result[0, 2, 12] = numpy.sum(x104 * (x133 * x298 + x297))
    result[0, 2, 13] = numpy.sum(x92 * (x135 * x298 + x299))
    result[0, 2, 14] = numpy.sum(x85 * (x137 * x295 + x300))
    result[1, 0, 0] = numpy.sum(x303 * (x168 + x302 * x82))
    result[1, 0, 1] = numpy.sum(x109 * (x182 + x306 * x82))
    result[1, 0, 2] = numpy.sum(x109 * (x188 + x308 * x82))
    result[1, 0, 3] = numpy.sum(x312 * (x194 + x310 * x82))
    result[1, 0, 4] = numpy.sum(x315 * (x203 + x314 * x82))
    result[1, 0, 5] = numpy.sum(x312 * (x206 + x317 * x82))
    result[1, 0, 6] = numpy.sum(x109 * (x209 + x319 * x82))
    result[1, 0, 7] = numpy.sum(x315 * (x212 + x321 * x82))
    result[1, 0, 8] = numpy.sum(x315 * (x217 + x324 * x82))
    result[1, 0, 9] = numpy.sum(x109 * (x218 + x326 * x82))
    result[1, 0, 10] = numpy.sum(x303 * (x219 + x327 * x82))
    result[1, 0, 11] = numpy.sum(x109 * (x221 + x328 * x82))
    result[1, 0, 12] = numpy.sum(x312 * (x222 + x329 * x82))
    result[1, 0, 13] = numpy.sum(x109 * (x225 + x331 * x82))
    result[1, 0, 14] = numpy.sum(x303 * (x20 * x332 + x226))
    result[1, 1, 0] = numpy.sum(x303 * (x169 * x302 + x350))
    result[1, 1, 1] = numpy.sum(x109 * (x169 * x306 + x361))
    result[1, 1, 2] = numpy.sum(x109 * (x169 * x308 + x365))
    result[1, 1, 3] = numpy.sum(x312 * (x169 * x310 + x370))
    result[1, 1, 4] = numpy.sum(x315 * (x169 * x314 + x375))
    result[1, 1, 5] = numpy.sum(x312 * (x169 * x317 + x378))
    result[1, 1, 6] = numpy.sum(x109 * (x169 * x319 + x381))
    result[1, 1, 7] = numpy.sum(x315 * (x169 * x321 + x384))
    result[1, 1, 8] = numpy.sum(x315 * (x169 * x324 + x387))
    result[1, 1, 9] = numpy.sum(x109 * (x169 * x326 + x388))
    result[1, 1, 10] = numpy.sum(x303 * (x169 * x327 + x389))
    result[1, 1, 11] = numpy.sum(x109 * (x169 * x328 + x390))
    result[1, 1, 12] = numpy.sum(x312 * (x169 * x329 + x391))
    result[1, 1, 13] = numpy.sum(x109 * (x169 * x331 + x392))
    result[1, 1, 14] = numpy.sum(x303 * (x21 * x332 + x393))
    result[1, 2, 0] = numpy.sum(x303 * (x258 * x302 + x407))
    result[1, 2, 1] = numpy.sum(x109 * (x258 * x306 + x414))
    result[1, 2, 2] = numpy.sum(x109 * (x258 * x308 + x421))
    result[1, 2, 3] = numpy.sum(x312 * (x258 * x310 + x427))
    result[1, 2, 4] = numpy.sum(x315 * (x258 * x314 + x433))
    result[1, 2, 5] = numpy.sum(x312 * (x258 * x317 + x439))
    result[1, 2, 6] = numpy.sum(x109 * (x258 * x319 + x443))
    result[1, 2, 7] = numpy.sum(x315 * (x258 * x321 + x448))
    result[1, 2, 8] = numpy.sum(x315 * (x258 * x324 + x452))
    result[1, 2, 9] = numpy.sum(x109 * (x258 * x326 + x456))
    result[1, 2, 10] = numpy.sum(x303 * (x258 * x327 + x457))
    result[1, 2, 11] = numpy.sum(x109 * (x258 * x328 + x459))
    result[1, 2, 12] = numpy.sum(x312 * (x258 * x329 + x460))
    result[1, 2, 13] = numpy.sum(x109 * (x258 * x331 + x461))
    result[1, 2, 14] = numpy.sum(x303 * (x22 * x332 + x462))
    result[2, 0, 0] = numpy.sum(x303 * (x257 + x463 * x82))
    result[2, 0, 1] = numpy.sum(x109 * (x263 + x464 * x82))
    result[2, 0, 2] = numpy.sum(x109 * (x273 + x465 * x82))
    result[2, 0, 3] = numpy.sum(x312 * (x275 + x467 * x82))
    result[2, 0, 4] = numpy.sum(x315 * (x280 + x469 * x82))
    result[2, 0, 5] = numpy.sum(x312 * (x286 + x472 * x82))
    result[2, 0, 6] = numpy.sum(x109 * (x287 + x473 * x82))
    result[2, 0, 7] = numpy.sum(x315 * (x289 + x474 * x82))
    result[2, 0, 8] = numpy.sum(x315 * (x290 + x476 * x82))
    result[2, 0, 9] = numpy.sum(x109 * (x293 + x479 * x82))
    result[2, 0, 10] = numpy.sum(x303 * (x20 * x480 + x294))
    result[2, 0, 11] = numpy.sum(x109 * (x20 * x481 + x296))
    result[2, 0, 12] = numpy.sum(x312 * (x20 * x482 + x297))
    result[2, 0, 13] = numpy.sum(x109 * (x20 * x483 + x299))
    result[2, 0, 14] = numpy.sum(x303 * (x300 + x484 * x82))
    result[2, 1, 0] = numpy.sum(x303 * (x169 * x463 + x407))
    result[2, 1, 1] = numpy.sum(x109 * (x169 * x464 + x414))
    result[2, 1, 2] = numpy.sum(x109 * (x169 * x465 + x421))
    result[2, 1, 3] = numpy.sum(x312 * (x169 * x467 + x427))
    result[2, 1, 4] = numpy.sum(x315 * (x169 * x469 + x433))
    result[2, 1, 5] = numpy.sum(x312 * (x169 * x472 + x439))
    result[2, 1, 6] = numpy.sum(x109 * (x169 * x473 + x443))
    result[2, 1, 7] = numpy.sum(x315 * (x169 * x474 + x448))
    result[2, 1, 8] = numpy.sum(x315 * (x169 * x476 + x452))
    result[2, 1, 9] = numpy.sum(x109 * (x169 * x479 + x456))
    result[2, 1, 10] = numpy.sum(x303 * (x21 * x480 + x457))
    result[2, 1, 11] = numpy.sum(x109 * (x21 * x481 + x459))
    result[2, 1, 12] = numpy.sum(x312 * (x21 * x482 + x460))
    result[2, 1, 13] = numpy.sum(x109 * (x21 * x483 + x461))
    result[2, 1, 14] = numpy.sum(x303 * (x169 * x484 + x462))
    result[2, 2, 0] = numpy.sum(x303 * (x258 * x463 + x502))
    result[2, 2, 1] = numpy.sum(x109 * (x258 * x464 + x506))
    result[2, 2, 2] = numpy.sum(x109 * (x258 * x465 + x513))
    result[2, 2, 3] = numpy.sum(x312 * (x258 * x467 + x516))
    result[2, 2, 4] = numpy.sum(x315 * (x258 * x469 + x519))
    result[2, 2, 5] = numpy.sum(x312 * (x258 * x472 + x525))
    result[2, 2, 6] = numpy.sum(x109 * (x258 * x473 + x526))
    result[2, 2, 7] = numpy.sum(x315 * (x258 * x474 + x527))
    result[2, 2, 8] = numpy.sum(x315 * (x258 * x476 + x528))
    result[2, 2, 9] = numpy.sum(x109 * (x258 * x479 + x531))
    result[2, 2, 10] = numpy.sum(x303 * (x22 * x480 + x532))
    result[2, 2, 11] = numpy.sum(x109 * (x22 * x481 + x533))
    result[2, 2, 12] = numpy.sum(x312 * (x22 * x482 + x534))
    result[2, 2, 13] = numpy.sum(x109 * (x22 * x483 + x535))
    result[2, 2, 14] = numpy.sum(x303 * (x258 * x484 + x536))
    result[3, 0, 0] = numpy.sum(x303 * (x350 + x539 * x82))
    result[3, 0, 1] = numpy.sum(x109 * (x361 + x542 * x82))
    result[3, 0, 2] = numpy.sum(x109 * (x365 + x544 * x82))
    result[3, 0, 3] = numpy.sum(x312 * (x370 + x545 * x82))
    result[3, 0, 4] = numpy.sum(x315 * (x375 + x546 * x82))
    result[3, 0, 5] = numpy.sum(x312 * (x378 + x548 * x82))
    result[3, 0, 6] = numpy.sum(x109 * (x381 + x550 * x82))
    result[3, 0, 7] = numpy.sum(x315 * (x384 + x552 * x82))
    result[3, 0, 8] = numpy.sum(x315 * (x387 + x554 * x82))
    result[3, 0, 9] = numpy.sum(x109 * (x388 + x556 * x82))
    result[3, 0, 10] = numpy.sum(x303 * (x389 + x557 * x82))
    result[3, 0, 11] = numpy.sum(x109 * (x390 + x558 * x82))
    result[3, 0, 12] = numpy.sum(x312 * (x391 + x559 * x82))
    result[3, 0, 13] = numpy.sum(x109 * (x392 + x560 * x82))
    result[3, 0, 14] = numpy.sum(x303 * (x20 * x561 + x393))
    result[3, 1, 0] = numpy.sum(x303 * (x169 * x539 + x567))
    result[3, 1, 1] = numpy.sum(x109 * (x169 * x542 + x575))
    result[3, 1, 2] = numpy.sum(x109 * (x169 * x544 + x577))
    result[3, 1, 3] = numpy.sum(x312 * (x169 * x545 + x581))
    result[3, 1, 4] = numpy.sum(x315 * (x169 * x546 + x585))
    result[3, 1, 5] = numpy.sum(x312 * (x169 * x548 + x587))
    result[3, 1, 6] = numpy.sum(x109 * (x169 * x550 + x591))
    result[3, 1, 7] = numpy.sum(x315 * (x169 * x552 + x595))
    result[3, 1, 8] = numpy.sum(x315 * (x169 * x554 + x599))
    result[3, 1, 9] = numpy.sum(x109 * (x169 * x556 + x601))
    result[3, 1, 10] = numpy.sum(x303 * (x169 * x557 + x602))
    result[3, 1, 11] = numpy.sum(x109 * (x169 * x558 + x603))
    result[3, 1, 12] = numpy.sum(x312 * (x169 * x559 + x604))
    result[3, 1, 13] = numpy.sum(x109 * (x169 * x560 + x605))
    result[3, 1, 14] = numpy.sum(x303 * (x21 * x561 + x606))
    result[3, 2, 0] = numpy.sum(x303 * (x258 * x539 + x611))
    result[3, 2, 1] = numpy.sum(x109 * (x258 * x542 + x615))
    result[3, 2, 2] = numpy.sum(x109 * (x258 * x544 + x618))
    result[3, 2, 3] = numpy.sum(x312 * (x258 * x545 + x621))
    result[3, 2, 4] = numpy.sum(x315 * (x258 * x546 + x625))
    result[3, 2, 5] = numpy.sum(x312 * (x258 * x548 + x628))
    result[3, 2, 6] = numpy.sum(x109 * (x258 * x550 + x631))
    result[3, 2, 7] = numpy.sum(x315 * (x258 * x552 + x634))
    result[3, 2, 8] = numpy.sum(x315 * (x258 * x554 + x638))
    result[3, 2, 9] = numpy.sum(x109 * (x258 * x556 + x641))
    result[3, 2, 10] = numpy.sum(x303 * (x258 * x557 + x642))
    result[3, 2, 11] = numpy.sum(x109 * (x258 * x558 + x643))
    result[3, 2, 12] = numpy.sum(x312 * (x258 * x559 + x644))
    result[3, 2, 13] = numpy.sum(x109 * (x258 * x560 + x645))
    result[3, 2, 14] = numpy.sum(x303 * (x22 * x561 + x646))
    result[4, 0, 0] = numpy.sum(x648 * (x407 + x647 * x82))
    result[4, 0, 1] = numpy.sum(x650 * (x414 + x649 * x82))
    result[4, 0, 2] = numpy.sum(x650 * (x421 + x651 * x82))
    result[4, 0, 3] = numpy.sum(x315 * (x427 + x652 * x82))
    result[4, 0, 4] = numpy.sum(x654 * (x433 + x653 * x82))
    result[4, 0, 5] = numpy.sum(x315 * (x439 + x655 * x82))
    result[4, 0, 6] = numpy.sum(x650 * (x443 + x657 * x82))
    result[4, 0, 7] = numpy.sum(x654 * (x448 + x659 * x82))
    result[4, 0, 8] = numpy.sum(x654 * (x452 + x661 * x82))
    result[4, 0, 9] = numpy.sum(x650 * (x456 + x663 * x82))
    result[4, 0, 10] = numpy.sum(x648 * (x457 + x664 * x82))
    result[4, 0, 11] = numpy.sum(x650 * (x459 + x665 * x82))
    result[4, 0, 12] = numpy.sum(x315 * (x460 + x666 * x82))
    result[4, 0, 13] = numpy.sum(x650 * (x461 + x667 * x82))
    result[4, 0, 14] = numpy.sum(x648 * (x462 + x668 * x82))
    result[4, 1, 0] = numpy.sum(x648 * (x169 * x647 + x611))
    result[4, 1, 1] = numpy.sum(x650 * (x169 * x649 + x615))
    result[4, 1, 2] = numpy.sum(x650 * (x169 * x651 + x618))
    result[4, 1, 3] = numpy.sum(x315 * (x169 * x652 + x621))
    result[4, 1, 4] = numpy.sum(x654 * (x169 * x653 + x625))
    result[4, 1, 5] = numpy.sum(x315 * (x169 * x655 + x628))
    result[4, 1, 6] = numpy.sum(x650 * (x169 * x657 + x631))
    result[4, 1, 7] = numpy.sum(x654 * (x169 * x659 + x634))
    result[4, 1, 8] = numpy.sum(x654 * (x169 * x661 + x638))
    result[4, 1, 9] = numpy.sum(x650 * (x169 * x663 + x641))
    result[4, 1, 10] = numpy.sum(x648 * (x169 * x664 + x642))
    result[4, 1, 11] = numpy.sum(x650 * (x169 * x665 + x643))
    result[4, 1, 12] = numpy.sum(x315 * (x169 * x666 + x644))
    result[4, 1, 13] = numpy.sum(x650 * (x169 * x667 + x645))
    result[4, 1, 14] = numpy.sum(x648 * (x169 * x668 + x646))
    result[4, 2, 0] = numpy.sum(x648 * (x258 * x647 + x673))
    result[4, 2, 1] = numpy.sum(x650 * (x258 * x649 + x676))
    result[4, 2, 2] = numpy.sum(x650 * (x258 * x651 + x679))
    result[4, 2, 3] = numpy.sum(x315 * (x258 * x652 + x682))
    result[4, 2, 4] = numpy.sum(x654 * (x258 * x653 + x685))
    result[4, 2, 5] = numpy.sum(x315 * (x258 * x655 + x688))
    result[4, 2, 6] = numpy.sum(x650 * (x258 * x657 + x691))
    result[4, 2, 7] = numpy.sum(x654 * (x258 * x659 + x694))
    result[4, 2, 8] = numpy.sum(x654 * (x258 * x661 + x697))
    result[4, 2, 9] = numpy.sum(x650 * (x258 * x663 + x700))
    result[4, 2, 10] = numpy.sum(x648 * (x258 * x664 + x701))
    result[4, 2, 11] = numpy.sum(x650 * (x258 * x665 + x702))
    result[4, 2, 12] = numpy.sum(x315 * (x258 * x666 + x703))
    result[4, 2, 13] = numpy.sum(x650 * (x258 * x667 + x704))
    result[4, 2, 14] = numpy.sum(x648 * (x258 * x668 + x705))
    result[5, 0, 0] = numpy.sum(x303 * (x502 + x706 * x82))
    result[5, 0, 1] = numpy.sum(x109 * (x506 + x708 * x82))
    result[5, 0, 2] = numpy.sum(x109 * (x513 + x709 * x82))
    result[5, 0, 3] = numpy.sum(x312 * (x516 + x710 * x82))
    result[5, 0, 4] = numpy.sum(x315 * (x519 + x713 * x82))
    result[5, 0, 5] = numpy.sum(x312 * (x525 + x714 * x82))
    result[5, 0, 6] = numpy.sum(x109 * (x526 + x716 * x82))
    result[5, 0, 7] = numpy.sum(x315 * (x527 + x718 * x82))
    result[5, 0, 8] = numpy.sum(x315 * (x528 + x720 * x82))
    result[5, 0, 9] = numpy.sum(x109 * (x531 + x723 * x82))
    result[5, 0, 10] = numpy.sum(x303 * (x20 * x724 + x532))
    result[5, 0, 11] = numpy.sum(x109 * (x20 * x725 + x533))
    result[5, 0, 12] = numpy.sum(x312 * (x20 * x726 + x534))
    result[5, 0, 13] = numpy.sum(x109 * (x20 * x727 + x535))
    result[5, 0, 14] = numpy.sum(x303 * (x536 + x728 * x82))
    result[5, 1, 0] = numpy.sum(x303 * (x169 * x706 + x673))
    result[5, 1, 1] = numpy.sum(x109 * (x169 * x708 + x676))
    result[5, 1, 2] = numpy.sum(x109 * (x169 * x709 + x679))
    result[5, 1, 3] = numpy.sum(x312 * (x169 * x710 + x682))
    result[5, 1, 4] = numpy.sum(x315 * (x169 * x713 + x685))
    result[5, 1, 5] = numpy.sum(x312 * (x169 * x714 + x688))
    result[5, 1, 6] = numpy.sum(x109 * (x169 * x716 + x691))
    result[5, 1, 7] = numpy.sum(x315 * (x169 * x718 + x694))
    result[5, 1, 8] = numpy.sum(x315 * (x169 * x720 + x697))
    result[5, 1, 9] = numpy.sum(x109 * (x169 * x723 + x700))
    result[5, 1, 10] = numpy.sum(x303 * (x21 * x724 + x701))
    result[5, 1, 11] = numpy.sum(x109 * (x21 * x725 + x702))
    result[5, 1, 12] = numpy.sum(x312 * (x21 * x726 + x703))
    result[5, 1, 13] = numpy.sum(x109 * (x21 * x727 + x704))
    result[5, 1, 14] = numpy.sum(x303 * (x169 * x728 + x705))
    result[5, 2, 0] = numpy.sum(x303 * (x258 * x706 + x734))
    result[5, 2, 1] = numpy.sum(x109 * (x258 * x708 + x736))
    result[5, 2, 2] = numpy.sum(x109 * (x258 * x709 + x740))
    result[5, 2, 3] = numpy.sum(x312 * (x258 * x710 + x742))
    result[5, 2, 4] = numpy.sum(x315 * (x258 * x713 + x744))
    result[5, 2, 5] = numpy.sum(x312 * (x258 * x714 + x748))
    result[5, 2, 6] = numpy.sum(x109 * (x258 * x716 + x750))
    result[5, 2, 7] = numpy.sum(x315 * (x258 * x718 + x752))
    result[5, 2, 8] = numpy.sum(x315 * (x258 * x720 + x754))
    result[5, 2, 9] = numpy.sum(x109 * (x258 * x723 + x758))
    result[5, 2, 10] = numpy.sum(x303 * (x22 * x724 + x759))
    result[5, 2, 11] = numpy.sum(x109 * (x22 * x725 + x760))
    result[5, 2, 12] = numpy.sum(x312 * (x22 * x726 + x761))
    result[5, 2, 13] = numpy.sum(x109 * (x22 * x727 + x762))
    result[5, 2, 14] = numpy.sum(x303 * (x258 * x728 + x763))
    result[6, 0, 0] = numpy.sum(x85 * (x567 + x764 * x765))
    result[6, 0, 1] = numpy.sum(x92 * (x20 * x767 + x575))
    result[6, 0, 2] = numpy.sum(x92 * (x577 + x765 * x768))
    result[6, 0, 3] = numpy.sum(x104 * (x578 * x769 + x581))
    result[6, 0, 4] = numpy.sum(x109 * (x582 * x769 + x585))
    result[6, 0, 5] = numpy.sum(x104 * (x587 + x770 * x771))
    result[6, 0, 6] = numpy.sum(x92 * (x588 * x772 + x591))
    result[6, 0, 7] = numpy.sum(x109 * (x592 * x772 + x595))
    result[6, 0, 8] = numpy.sum(x109 * (x596 * x772 + x599))
    result[6, 0, 9] = numpy.sum(x92 * (x601 + x771 * x773))
    result[6, 0, 10] = numpy.sum(x85 * (x602 + x774 * x82))
    result[6, 0, 11] = numpy.sum(x92 * (x603 + x775 * x82))
    result[6, 0, 12] = numpy.sum(x104 * (x604 + x776 * x82))
    result[6, 0, 13] = numpy.sum(x92 * (x605 + x777 * x82))
    result[6, 0, 14] = numpy.sum(x85 * (x137 * x765 + x606))
    result[6, 1, 0] = numpy.sum(x764 * x85 * (x778 + x779))
    result[6, 1, 1] = numpy.sum(x92 * (x21 * x767 + x766 * x782))
    result[6, 1, 2] = numpy.sum(x768 * x92 * (x778 + x779))
    result[6, 1, 3] = numpy.sum(x104 * (x540 * x783 + x578 * x784))
    result[6, 1, 4] = numpy.sum(x109 * (x540 * x785 + x582 * x784))
    result[6, 1, 5] = numpy.sum(x104 * x770 * (x786 + x787))
    result[6, 1, 6] = numpy.sum(x92 * (x304 * x788 + x588 * x789))
    result[6, 1, 7] = numpy.sum(x109 * (x304 * x790 + x592 * x789))
    result[6, 1, 8] = numpy.sum(x109 * (x304 * x791 + x596 * x789))
    result[6, 1, 9] = numpy.sum(x773 * x92 * (x786 + x787))
    result[6, 1, 10] = numpy.sum(x85 * (x169 * x774 + x59 * (4.0 * x589 + x788 * x86)))
    result[6, 1, 11] = numpy.sum(x92 * (x169 * x775 + x59 * (4.0 * x593 + x790 * x86)))
    result[6, 1, 12] = numpy.sum(x104 * (x169 * x776 + x59 * (4.0 * x597 + x791 * x86)))
    result[6, 1, 13] = numpy.sum(x92 * (x124 * x59 * (x780 + x781) + x169 * x777))
    result[6, 1, 14] = numpy.sum(x137 * x85 * (x778 + x779))
    result[6, 2, 0] = numpy.sum(x85 * (x764 * x794 + x793))
    result[6, 2, 1] = numpy.sum(x92 * (x22 * x767 + x796))
    result[6, 2, 2] = numpy.sum(x92 * (x768 * x794 + x798))
    result[6, 2, 3] = numpy.sum(x104 * (x578 * x801 + x800))
    result[6, 2, 4] = numpy.sum(x109 * (x582 * x801 + x803))
    result[6, 2, 5] = numpy.sum(x104 * (x770 * x806 + x805))
    result[6, 2, 6] = numpy.sum(x92 * (x588 * x809 + x808))
    result[6, 2, 7] = numpy.sum(x109 * (x592 * x809 + x811))
    result[6, 2, 8] = numpy.sum(x109 * (x596 * x809 + x813))
    result[6, 2, 9] = numpy.sum(x92 * (x773 * x806 + x815))
    result[6, 2, 10] = numpy.sum(x85 * (x258 * x774 + x816))
    result[6, 2, 11] = numpy.sum(x92 * (x258 * x775 + x817))
    result[6, 2, 12] = numpy.sum(x104 * (x258 * x776 + x818))
    result[6, 2, 13] = numpy.sum(x92 * (x258 * x777 + x819))
    result[6, 2, 14] = numpy.sum(x85 * (x137 * x794 + x820))
    result[7, 0, 0] = numpy.sum(x303 * (x20 * x821 + x611))
    result[7, 0, 1] = numpy.sum(x109 * (x613 * x822 + x615))
    result[7, 0, 2] = numpy.sum(x109 * (x616 * x822 + x618))
    result[7, 0, 3] = numpy.sum(x312 * (x619 * x769 + x621))
    result[7, 0, 4] = numpy.sum(x315 * (x623 * x769 + x625))
    result[7, 0, 5] = numpy.sum(x312 * (x626 * x769 + x628))
    result[7, 0, 6] = numpy.sum(x109 * (x629 * x772 + x631))
    result[7, 0, 7] = numpy.sum(x315 * (x632 * x772 + x634))
    result[7, 0, 8] = numpy.sum(x315 * (x636 * x772 + x638))
    result[7, 0, 9] = numpy.sum(x109 * (x639 * x772 + x641))
    result[7, 0, 10] = numpy.sum(x303 * (x642 + x82 * x823))
    result[7, 0, 11] = numpy.sum(x109 * (x643 + x82 * x824))
    result[7, 0, 12] = numpy.sum(x312 * (x644 + x82 * x825))
    result[7, 0, 13] = numpy.sum(x109 * (x645 + x82 * x827))
    result[7, 0, 14] = numpy.sum(x303 * (x646 + x82 * x828))
    result[7, 1, 0] = numpy.sum(x303 * (x21 * x821 + x793))
    result[7, 1, 1] = numpy.sum(x109 * (x613 * x829 + x796))
    result[7, 1, 2] = numpy.sum(x109 * (x616 * x829 + x798))
    result[7, 1, 3] = numpy.sum(x312 * (x619 * x784 + x800))
    result[7, 1, 4] = numpy.sum(x315 * (x623 * x784 + x803))
    result[7, 1, 5] = numpy.sum(x312 * (x626 * x784 + x805))
    result[7, 1, 6] = numpy.sum(x109 * (x629 * x789 + x808))
    result[7, 1, 7] = numpy.sum(x315 * (x632 * x789 + x811))
    result[7, 1, 8] = numpy.sum(x315 * (x636 * x789 + x813))
    result[7, 1, 9] = numpy.sum(x109 * (x639 * x789 + x815))
    result[7, 1, 10] = numpy.sum(x303 * (x169 * x823 + x816))
    result[7, 1, 11] = numpy.sum(x109 * (x169 * x824 + x817))
    result[7, 1, 12] = numpy.sum(x312 * (x169 * x825 + x818))
    result[7, 1, 13] = numpy.sum(x109 * (x169 * x827 + x819))
    result[7, 1, 14] = numpy.sum(x303 * (x169 * x828 + x820))
    result[7, 2, 0] = numpy.sum(x303 * (x22 * x821 + x831))
    result[7, 2, 1] = numpy.sum(x109 * (x613 * x834 + x833))
    result[7, 2, 2] = numpy.sum(x109 * (x616 * x834 + x836))
    result[7, 2, 3] = numpy.sum(x312 * (x619 * x801 + x838))
    result[7, 2, 4] = numpy.sum(x315 * (x623 * x801 + x840))
    result[7, 2, 5] = numpy.sum(x312 * (x626 * x801 + x842))
    result[7, 2, 6] = numpy.sum(x109 * (x629 * x809 + x844))
    result[7, 2, 7] = numpy.sum(x315 * (x632 * x809 + x846))
    result[7, 2, 8] = numpy.sum(x315 * (x636 * x809 + x848))
    result[7, 2, 9] = numpy.sum(x109 * (x639 * x809 + x850))
    result[7, 2, 10] = numpy.sum(x303 * (x258 * x823 + x851))
    result[7, 2, 11] = numpy.sum(x109 * (x258 * x824 + x852))
    result[7, 2, 12] = numpy.sum(x312 * (x258 * x825 + x853))
    result[7, 2, 13] = numpy.sum(x109 * (x258 * x827 + x854))
    result[7, 2, 14] = numpy.sum(x303 * (x258 * x828 + x855))
    result[8, 0, 0] = numpy.sum(x303 * (x20 * x856 + x673))
    result[8, 0, 1] = numpy.sum(x109 * (x674 * x822 + x676))
    result[8, 0, 2] = numpy.sum(x109 * (x677 * x822 + x679))
    result[8, 0, 3] = numpy.sum(x312 * (x680 * x769 + x682))
    result[8, 0, 4] = numpy.sum(x315 * (x683 * x769 + x685))
    result[8, 0, 5] = numpy.sum(x312 * (x686 * x769 + x688))
    result[8, 0, 6] = numpy.sum(x109 * (x689 * x772 + x691))
    result[8, 0, 7] = numpy.sum(x315 * (x692 * x772 + x694))
    result[8, 0, 8] = numpy.sum(x315 * (x695 * x772 + x697))
    result[8, 0, 9] = numpy.sum(x109 * (x698 * x772 + x700))
    result[8, 0, 10] = numpy.sum(x303 * (x701 + x82 * x857))
    result[8, 0, 11] = numpy.sum(x109 * (x702 + x82 * x858))
    result[8, 0, 12] = numpy.sum(x312 * (x703 + x82 * x859))
    result[8, 0, 13] = numpy.sum(x109 * (x704 + x82 * x860))
    result[8, 0, 14] = numpy.sum(x303 * (x705 + x82 * x861))
    result[8, 1, 0] = numpy.sum(x303 * (x21 * x856 + x831))
    result[8, 1, 1] = numpy.sum(x109 * (x674 * x829 + x833))
    result[8, 1, 2] = numpy.sum(x109 * (x677 * x829 + x836))
    result[8, 1, 3] = numpy.sum(x312 * (x680 * x784 + x838))
    result[8, 1, 4] = numpy.sum(x315 * (x683 * x784 + x840))
    result[8, 1, 5] = numpy.sum(x312 * (x686 * x784 + x842))
    result[8, 1, 6] = numpy.sum(x109 * (x689 * x789 + x844))
    result[8, 1, 7] = numpy.sum(x315 * (x692 * x789 + x846))
    result[8, 1, 8] = numpy.sum(x315 * (x695 * x789 + x848))
    result[8, 1, 9] = numpy.sum(x109 * (x698 * x789 + x850))
    result[8, 1, 10] = numpy.sum(x303 * (x169 * x857 + x851))
    result[8, 1, 11] = numpy.sum(x109 * (x169 * x858 + x852))
    result[8, 1, 12] = numpy.sum(x312 * (x169 * x859 + x853))
    result[8, 1, 13] = numpy.sum(x109 * (x169 * x860 + x854))
    result[8, 1, 14] = numpy.sum(x303 * (x169 * x861 + x855))
    result[8, 2, 0] = numpy.sum(x303 * (x22 * x856 + x863))
    result[8, 2, 1] = numpy.sum(x109 * (x674 * x834 + x865))
    result[8, 2, 2] = numpy.sum(x109 * (x677 * x834 + x867))
    result[8, 2, 3] = numpy.sum(x312 * (x680 * x801 + x869))
    result[8, 2, 4] = numpy.sum(x315 * (x683 * x801 + x871))
    result[8, 2, 5] = numpy.sum(x312 * (x686 * x801 + x873))
    result[8, 2, 6] = numpy.sum(x109 * (x689 * x809 + x875))
    result[8, 2, 7] = numpy.sum(x315 * (x692 * x809 + x877))
    result[8, 2, 8] = numpy.sum(x315 * (x695 * x809 + x879))
    result[8, 2, 9] = numpy.sum(x109 * (x698 * x809 + x881))
    result[8, 2, 10] = numpy.sum(x303 * (x258 * x857 + x882))
    result[8, 2, 11] = numpy.sum(x109 * (x258 * x858 + x883))
    result[8, 2, 12] = numpy.sum(x312 * (x258 * x859 + x884))
    result[8, 2, 13] = numpy.sum(x109 * (x258 * x860 + x885))
    result[8, 2, 14] = numpy.sum(x303 * (x258 * x861 + x886))
    result[9, 0, 0] = numpy.sum(x85 * (x734 + x764 * x887))
    result[9, 0, 1] = numpy.sum(x92 * (x736 + x822 * x888))
    result[9, 0, 2] = numpy.sum(x92 * (x737 * x822 + x740))
    result[9, 0, 3] = numpy.sum(x104 * (x742 + x887 * x890))
    result[9, 0, 4] = numpy.sum(x109 * (x744 + x891 * x892))
    result[9, 0, 5] = numpy.sum(x104 * (x745 * x769 + x748))
    result[9, 0, 6] = numpy.sum(x92 * (x750 + x887 * x893))
    result[9, 0, 7] = numpy.sum(x109 * (x752 + x892 * x894))
    result[9, 0, 8] = numpy.sum(x109 * (x20 * x895 + x754))
    result[9, 0, 9] = numpy.sum(x92 * (x755 * x772 + x758))
    result[9, 0, 10] = numpy.sum(x85 * (x129 * x887 + x759))
    result[9, 0, 11] = numpy.sum(x92 * (x20 * x896 + x760))
    result[9, 0, 12] = numpy.sum(x104 * (x20 * x897 + x761))
    result[9, 0, 13] = numpy.sum(x92 * (x20 * x898 + x762))
    result[9, 0, 14] = numpy.sum(x85 * (x763 + x82 * x899))
    result[9, 1, 0] = numpy.sum(x85 * (x764 * x900 + x863))
    result[9, 1, 1] = numpy.sum(x92 * (x829 * x888 + x865))
    result[9, 1, 2] = numpy.sum(x92 * (x737 * x829 + x867))
    result[9, 1, 3] = numpy.sum(x104 * (x869 + x890 * x900))
    result[9, 1, 4] = numpy.sum(x109 * (x871 + x891 * x901))
    result[9, 1, 5] = numpy.sum(x104 * (x745 * x784 + x873))
    result[9, 1, 6] = numpy.sum(x92 * (x875 + x893 * x900))
    result[9, 1, 7] = numpy.sum(x109 * (x877 + x894 * x901))
    result[9, 1, 8] = numpy.sum(x109 * (x21 * x895 + x879))
    result[9, 1, 9] = numpy.sum(x92 * (x755 * x789 + x881))
    result[9, 1, 10] = numpy.sum(x85 * (x129 * x900 + x882))
    result[9, 1, 11] = numpy.sum(x92 * (x21 * x896 + x883))
    result[9, 1, 12] = numpy.sum(x104 * (x21 * x897 + x884))
    result[9, 1, 13] = numpy.sum(x92 * (x21 * x898 + x885))
    result[9, 1, 14] = numpy.sum(x85 * (x169 * x899 + x886))
    result[9, 2, 0] = numpy.sum(x764 * x85 * (x902 + x903))
    result[9, 2, 1] = numpy.sum(x92 * (x766 * x8 * x902 + x834 * x888))
    result[9, 2, 2] = numpy.sum(x92 * (x737 * x834 + x766 * x904))
    result[9, 2, 3] = numpy.sum(x104 * x890 * (x902 + x903))
    result[9, 2, 4] = numpy.sum(x109 * x891 * (x904 + x905))
    result[9, 2, 5] = numpy.sum(x104 * (x540 * x906 + x745 * x801))
    result[9, 2, 6] = numpy.sum(x893 * x92 * (x902 + x903))
    result[9, 2, 7] = numpy.sum(x109 * x894 * (x904 + x905))
    result[9, 2, 8] = numpy.sum(x109 * (x22 * x895 + x711 * x906))
    result[9, 2, 9] = numpy.sum(x92 * (x304 * x907 + x755 * x809))
    result[9, 2, 10] = numpy.sum(x129 * x85 * (x902 + x903))
    result[9, 2, 11] = numpy.sum(x92 * (x131 * x904 + x22 * x896))
    result[9, 2, 12] = numpy.sum(x104 * (x117 * x906 + x22 * x897))
    result[9, 2, 13] = numpy.sum(x92 * (x105 * x907 + x22 * x898))
    result[9, 2, 14] = numpy.sum(x85 * (x258 * x899 + x59 * (4.0 * x756 + x907 * x93)))
    return result


def int3c2e3d_sph_320(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fd|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 6, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = -x3 - C[0]
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = cx / x11
    x13 = x1 * x12 * (x10**2 + x6**2 + x8**2)
    x14 = boys(1, x13)
    x15 = 17.49341832762486
    x16 = A[1] - B[1]
    x17 = A[2] - B[2]
    x18 = numpy.exp(-ax * bx * x2 * (x0**2 + x16**2 + x17**2))
    x19 = 2.0 * x11 ** (-1.5) * x15 * x18 * x2
    x20 = x14 * x19
    x21 = cx ** (-1.0)
    x22 = x11 ** (-0.5)
    x23 = boys(0, x13)
    x24 = 2.0 * x15 * x18 * x2 * x21 * x22 * x23 - x20
    x25 = x24 * x5
    x26 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x4 + x20 * x6
    x27 = -x26
    x28 = boys(2, x13)
    x29 = x19 * x28
    x30 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x4 + x29 * x6
    x31 = -x30
    x32 = x12 * x31
    x33 = x32 * x6
    x34 = x25 + x27 * x4 - x33
    x35 = -x26 - x32
    x36 = 2.0 * x5
    x37 = 2.0 * x14 * x15 * x18 * x2 * x21 * x22 - x29
    x38 = x37 * x5
    x39 = boys(3, x13)
    x40 = x19 * x39
    x41 = -2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x4 + x40 * x6
    x42 = -x41
    x43 = x12 * x42
    x44 = x43 * x6
    x45 = x31 * x4 + x38 - x44
    x46 = x12 * x45
    x47 = x46 * x6
    x48 = x34 * x4 + x35 * x36 - x47
    x49 = -x24 * x5
    x50 = 3.0 * x5
    x51 = x5 * (2.0 * x15 * x18 * x2 * x21 * x22 * x28 - x40)
    x52 = boys(4, x13)
    x53 = x19 * x52
    x54 = 2.0 * x15 * x18 * x2 * x21 * x22 * x39 * x4 - x53 * x6
    x55 = x12 * x54
    x56 = x4 * x42 + x51 - x55 * x6
    x57 = x12 * x56
    x58 = -x36 * (x30 + x43) + x4 * x45 - x57 * x6
    x59 = x12 * x58
    x60 = x4 * x48 - x50 * (-x27 * x4 + x33 + x46 + x49) - x59 * x6
    x61 = -x37 * x5
    x62 = x5 * (2.0 * x15 * x18 * x2 * x21 * x22 * x39 - x53)
    x63 = x19 * boys(5, x13)
    x64 = x12 * x6
    x65 = da * db * dc
    x66 = 0.06666666666666667 * x65
    x67 = 2.23606797749979 * x66
    x68 = -x7 - A[1]
    x69 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x68 + x29 * x8
    x70 = -x69
    x71 = x12 * x70
    x72 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x68 + x20 * x8
    x73 = -x71 - x72
    x74 = x5 * x73
    x75 = -x72
    x76 = -x4 * x75 + x6 * x71
    x77 = -x76
    x78 = -2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x68 + x40 * x8
    x79 = -x78
    x80 = x12 * x79
    x81 = -x4 * x70 + x6 * x80
    x82 = -x81
    x83 = x12 * x82
    x84 = x6 * x83
    x85 = x4 * x77 + x74 - x84
    x86 = -x5 * (x69 + x80)
    x87 = 2.0 * x15 * x18 * x2 * x21 * x22 * x39 * x68 - x53 * x8
    x88 = x12 * x87
    x89 = x4 * x79 - x6 * x88
    x90 = x12 * x89
    x91 = x4 * x82 - x6 * x90 + x86
    x92 = x12 * x91
    x93 = -x36 * (x76 + x83) + x4 * x85 - x6 * x92
    x94 = x16 * x48 + x93
    x95 = -x5 * (x78 + x88)
    x96 = 2.0 * x15 * x18 * x2 * x21 * x22 * x52 * x68 - x63 * x8
    x97 = (
        x4 * x93
        + x50 * (x4 * x77 + x5 * x73 - x84 - x92)
        + x64
        * (
            x36 * (x81 + x90)
            - x4 * x91
            + x64 * (x4 * x89 - x64 * (x4 * x87 - x64 * x96) + x95)
        )
    )
    x98 = 3.872983346207417 * x66
    x99 = -x9 - A[2]
    x100 = x10 * x29 - 2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x99
    x101 = -x100
    x102 = x101 * x12
    x103 = x10 * x20 - 2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x99
    x104 = -x102 - x103
    x105 = x104 * x5
    x106 = -x103
    x107 = x102 * x6 - x106 * x4
    x108 = -x107
    x109 = x10 * x40 - 2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x99
    x110 = -x109
    x111 = x110 * x12
    x112 = -x101 * x4 + x111 * x6
    x113 = -x112
    x114 = x113 * x12
    x115 = x114 * x6
    x116 = x105 + x108 * x4 - x115
    x117 = -x5 * (x100 + x111)
    x118 = -x10 * x53 + 2.0 * x15 * x18 * x2 * x21 * x22 * x39 * x99
    x119 = x118 * x12
    x120 = x110 * x4 - x119 * x6
    x121 = x12 * x120
    x122 = x113 * x4 + x117 - x121 * x6
    x123 = x12 * x122
    x124 = x116 * x4 - x123 * x6 - x36 * (x107 + x114)
    x125 = x124 + x17 * x48
    x126 = -x104 * x5
    x127 = -x5 * (x109 + x119)
    x128 = -x10 * x63 + 2.0 * x15 * x18 * x2 * x21 * x22 * x52 * x99
    x129 = (
        x124 * x4
        - x50 * (-x108 * x4 + x115 + x123 + x126)
        + x64
        * (
            -x122 * x4
            + x36 * (x112 + x121)
            + x64 * (x120 * x4 + x127 - x64 * (x118 * x4 - x128 * x64))
        )
    )
    x130 = x8 * x80
    x131 = -x130 + x38 + x68 * x70
    x132 = x12 * x131
    x133 = x71 * x8
    x134 = x5 * (-x132 - x133 - x49 + x68 * x75)
    x135 = -x133 + x25 + x68 * x75
    x136 = x132 * x6 - x135 * x4
    x137 = -x136
    x138 = x51 + x68 * x79 - x8 * x88
    x139 = x12 * x138
    x140 = x131 * x4 - x139 * x6
    x141 = x12 * x140
    x142 = x134 + x137 * x4 - x141 * x6
    x143 = x5 * (-x130 - x139 - x61 + x68 * x70)
    x144 = x12 * x8
    x145 = -x144 * x96 + x62 + x68 * x87
    x146 = (
        x142 * x4
        - x36 * (x136 + x141)
        - x64 * (x140 * x4 + x143 - x64 * (x138 * x4 - x145 * x64))
    )
    x147 = x146 + x16 * x93
    x148 = -x101 * x68 + x111 * x8
    x149 = -x148
    x150 = x12 * x149
    x151 = x102 * x8 - x106 * x68
    x152 = -x5 * (x150 + x151)
    x153 = -x151
    x154 = x150 * x6 - x153 * x4
    x155 = -x154
    x156 = x110 * x68 - x119 * x8
    x157 = x12 * x156
    x158 = x149 * x4 - x157 * x6
    x159 = x12 * x158
    x160 = x152 + x155 * x4 - x159 * x6
    x161 = -x5 * (x148 + x157)
    x162 = x118 * x68 - x128 * x144
    x163 = (
        x160 * x4
        - x36 * (x154 + x159)
        - x64 * (x158 * x4 + x161 - x64 * (x156 * x4 - x162 * x64))
    )
    x164 = x163 + x17 * x93
    x165 = x10 * x111
    x166 = x101 * x99 - x165 + x38
    x167 = x12 * x166
    x168 = x10 * x102
    x169 = x5 * (x106 * x99 - x167 - x168 - x49)
    x170 = x106 * x99 - x168 + x25
    x171 = x167 * x6 - x170 * x4
    x172 = -x171
    x173 = -x10 * x119 + x110 * x99 + x51
    x174 = x12 * x173
    x175 = x166 * x4 - x174 * x6
    x176 = x12 * x175
    x177 = x169 + x172 * x4 - x176 * x6
    x178 = x5 * (x101 * x99 - x165 - x174 - x61)
    x179 = x10 * x12
    x180 = x118 * x99 - x128 * x179 + x62
    x181 = (
        x177 * x4
        - x36 * (x171 + x176)
        - x64 * (x175 * x4 + x178 - x64 * (x173 * x4 - x180 * x64))
    )
    x182 = x124 * x17 + x181
    x183 = 0.3333333333333333 * x65
    x184 = x142 + x16 * x85
    x185 = 1.732050807568877 * x183
    x186 = x160 + x17 * x85
    x187 = x131 * x68 - x139 * x8 + 2.0 * x86
    x188 = x12 * x187
    x189 = x132 * x8
    x190 = x5 * (x135 * x68 - x188 - x189 + 2.0 * x5 * x73)
    x191 = x135 * x68 - x189 + 2.0 * x74
    x192 = x188 * x6
    x193 = x191 * x4 - x192
    x194 = x138 * x68 - x144 * x145 + 2.0 * x95
    x195 = x190 + x193 * x4 - x64 * (x187 * x4 - x194 * x64)
    x196 = x142 * x16 + x195
    x197 = x117 + x149 * x68 - x157 * x8
    x198 = x12 * x197
    x199 = x150 * x8
    x200 = x5 * (-x126 + x153 * x68 - x198 - x199)
    x201 = x105 + x153 * x68 - x199
    x202 = x198 * x6
    x203 = x201 * x4 - x202
    x204 = x127 - x144 * x162 + x156 * x68
    x205 = x200 + x203 * x4 - x64 * (x197 * x4 - x204 * x64)
    x206 = x142 * x17 + x205
    x207 = x166 * x68 - x174 * x8
    x208 = x12 * x207
    x209 = x167 * x8 - x170 * x68
    x210 = -x5 * (x208 + x209)
    x211 = -x209
    x212 = x208 * x6
    x213 = x211 * x4 - x212
    x214 = -x144 * x180 + x173 * x68
    x215 = x210 + x213 * x4 - x64 * (x207 * x4 - x214 * x64)
    x216 = x160 * x17 + x215
    x217 = x116 * x16 + x160
    x218 = x116 * x17 + x177
    x219 = x16 * x160 + x205
    x220 = -x10 * x174 + 2.0 * x117 + x166 * x99
    x221 = x12 * x220
    x222 = x10 * x167
    x223 = x5 * (2.0 * x104 * x5 + x170 * x99 - x221 - x222)
    x224 = 2.0 * x105 + x170 * x99 - x222
    x225 = x221 * x6
    x226 = x224 * x4 - x225
    x227 = 2.0 * x127 + x173 * x99 - x179 * x180
    x228 = x223 + x226 * x4 - x64 * (x220 * x4 - x227 * x64)
    x229 = x17 * x177 + x228
    x230 = x191 * x4 - x192
    x231 = x137 * x16 + x230
    x232 = x201 * x4 - x202
    x233 = x137 * x17 + x232
    x234 = 3.0 * x134 - x188 * x8 + x191 * x68
    x235 = 3.0 * x143 - x144 * x194 + x187 * x68
    x236 = x16 * x193 + x234 * x4 - x235 * x64
    x237 = 2.0 * x152 - x198 * x8 + x201 * x68
    x238 = -x144 * x204 + 2.0 * x161 + x197 * x68
    x239 = x237 * x4 - x238 * x64
    x240 = x17 * x193 + x239
    x241 = x169 - x208 * x8 + x211 * x68
    x242 = -x144 * x214 + x178 + x207 * x68
    x243 = x241 * x4 - x242 * x64
    x244 = x17 * x203 + x243
    x245 = x155 * x16 + x232
    x246 = x211 * x4 - x212
    x247 = x155 * x17 + x246
    x248 = x16 * x203 + x239
    x249 = x221 * x8
    x250 = x224 * x68 - x249
    x251 = -x144 * x227 + x220 * x68
    x252 = x250 * x4 - x251 * x64
    x253 = x17 * x213 + x252
    x254 = x16 * x172 + x246
    x255 = x224 * x4 - x225
    x256 = x17 * x172 + x255
    x257 = x16 * x213 + x243
    x258 = -x10 * x221 + 3.0 * x169 + x224 * x99
    x259 = 3.0 * x178 - x179 * x227 + x220 * x99
    x260 = x17 * x226 + x258 * x4 - x259 * x64
    x261 = x16 * x191 + x234
    x262 = x17 * x191 + x237
    x263 = -x144 * x238 + 3.0 * x200 + x237 * x68
    x264 = -x144 * x242 + 2.0 * x210 + x241 * x68
    x265 = x17 * x237 + x264
    x266 = x16 * x201 + x237
    x267 = x17 * x201 + x241
    x268 = -x144 * x251 + x223 + x250 * x68
    x269 = x17 * x241 + x268
    x270 = x16 * x211 + x241
    x271 = x224 * x68 - x249
    x272 = x17 * x211 + x271
    x273 = -x144 * x259 + x17 * x250 + x258 * x68
    x274 = x16 * x224 + x271
    x275 = x17 * x224 + x258

    # 60 item(s)
    result[0, 0, 0] = numpy.sum(
        x67
        * (
            x0 * x60
            + x0 * (x0 * x48 + x60)
            + x4 * x60
            + 4.0 * x5 * (x34 * x4 + 2.0 * x35 * x5 - x47 - x59)
            + x64
            * (
                -x4 * x58
                + x50 * (-x31 * x4 + x44 + x57 + x61)
                + x64
                * (
                    -x36 * (x41 + x55)
                    + x4 * x56
                    - x64
                    * (
                        x4 * x54
                        + x62
                        - x64 * (2.0 * x15 * x18 * x2 * x21 * x22 * x4 * x52 - x6 * x63)
                    )
                )
            )
        )
    )
    result[0, 1, 0] = numpy.sum(x98 * (x0 * x94 + x16 * x60 + x97))
    result[0, 2, 0] = numpy.sum(x98 * (x0 * x125 + x129 + x17 * x60))
    result[0, 3, 0] = numpy.sum(x67 * (x147 + x16 * x94))
    result[0, 4, 0] = numpy.sum(x98 * (x125 * x16 + x164))
    result[0, 5, 0] = numpy.sum(x67 * (x125 * x17 + x182))
    result[1, 0, 0] = numpy.sum(x183 * (x0 * x93 + x0 * (x0 * x85 + x93) + x97))
    result[1, 1, 0] = numpy.sum(x185 * (x0 * x184 + x147))
    result[1, 2, 0] = numpy.sum(x185 * (x0 * x186 + x164))
    result[1, 3, 0] = numpy.sum(x183 * (x16 * x184 + x196))
    result[1, 4, 0] = numpy.sum(x185 * (x16 * x186 + x206))
    result[1, 5, 0] = numpy.sum(x183 * (x17 * x186 + x216))
    result[2, 0, 0] = numpy.sum(x183 * (x0 * x124 + x0 * (x0 * x116 + x124) + x129))
    result[2, 1, 0] = numpy.sum(x185 * (x0 * x217 + x124 * x16 + x163))
    result[2, 2, 0] = numpy.sum(x185 * (x0 * x218 + x182))
    result[2, 3, 0] = numpy.sum(x183 * (x16 * x217 + x219))
    result[2, 4, 0] = numpy.sum(x185 * (x16 * x218 + x216))
    result[2, 5, 0] = numpy.sum(x183 * (x17 * x218 + x229))
    result[3, 0, 0] = numpy.sum(x183 * (x0 * x142 + x0 * (x0 * x137 + x142) + x146))
    result[3, 1, 0] = numpy.sum(x185 * (x0 * x231 + x196))
    result[3, 2, 0] = numpy.sum(x185 * (x0 * x233 + x206))
    result[3, 3, 0] = numpy.sum(x183 * (x16 * x231 + x236))
    result[3, 4, 0] = numpy.sum(x185 * (x16 * x233 + x240))
    result[3, 5, 0] = numpy.sum(x183 * (x17 * x233 + x244))
    result[4, 0, 0] = numpy.sum(x185 * (x0 * x160 + x0 * (x0 * x155 + x160) + x163))
    result[4, 1, 0] = numpy.sum(x65 * (x0 * x245 + x219))
    result[4, 2, 0] = numpy.sum(x65 * (x0 * x247 + x216))
    result[4, 3, 0] = numpy.sum(x185 * (x16 * x245 + x248))
    result[4, 4, 0] = numpy.sum(x65 * (x16 * x247 + x244))
    result[4, 5, 0] = numpy.sum(x185 * (x17 * x247 + x253))
    result[5, 0, 0] = numpy.sum(x183 * (x0 * x177 + x0 * (x0 * x172 + x177) + x181))
    result[5, 1, 0] = numpy.sum(x185 * (x0 * x254 + x16 * x177 + x215))
    result[5, 2, 0] = numpy.sum(x185 * (x0 * x256 + x229))
    result[5, 3, 0] = numpy.sum(x183 * (x16 * x254 + x257))
    result[5, 4, 0] = numpy.sum(x185 * (x16 * x256 + x253))
    result[5, 5, 0] = numpy.sum(x183 * (x17 * x256 + x260))
    result[6, 0, 0] = numpy.sum(x67 * (x0 * x193 + x0 * (x0 * x191 + x230) + x195))
    result[6, 1, 0] = numpy.sum(x98 * (x0 * x261 + x236))
    result[6, 2, 0] = numpy.sum(x98 * (x0 * x262 + x240))
    result[6, 3, 0] = numpy.sum(
        x67 * (-x144 * x235 + x16 * x234 + x16 * x261 + 4.0 * x190 + x234 * x68)
    )
    result[6, 4, 0] = numpy.sum(x98 * (x16 * x262 + x17 * x234 + x263))
    result[6, 5, 0] = numpy.sum(x67 * (x17 * x262 + x265))
    result[7, 0, 0] = numpy.sum(x183 * (x0 * x203 + x0 * (x0 * x201 + x232) + x205))
    result[7, 1, 0] = numpy.sum(x185 * (x0 * x266 + x248))
    result[7, 2, 0] = numpy.sum(x185 * (x0 * x267 + x244))
    result[7, 3, 0] = numpy.sum(x183 * (x16 * x237 + x16 * x266 + x263))
    result[7, 4, 0] = numpy.sum(x185 * (x16 * x267 + x265))
    result[7, 5, 0] = numpy.sum(x183 * (x17 * x267 + x269))
    result[8, 0, 0] = numpy.sum(x183 * (x0 * x213 + x0 * (x0 * x211 + x246) + x215))
    result[8, 1, 0] = numpy.sum(x185 * (x0 * x270 + x257))
    result[8, 2, 0] = numpy.sum(x185 * (x0 * x272 + x253))
    result[8, 3, 0] = numpy.sum(x183 * (x16 * x241 + x16 * x270 + x264))
    result[8, 4, 0] = numpy.sum(x185 * (x16 * x272 + x269))
    result[8, 5, 0] = numpy.sum(x183 * (x17 * x272 + x273))
    result[9, 0, 0] = numpy.sum(x67 * (x0 * x226 + x0 * (x0 * x224 + x255) + x228))
    result[9, 1, 0] = numpy.sum(x98 * (x0 * x274 + x16 * x226 + x252))
    result[9, 2, 0] = numpy.sum(x98 * (x0 * x275 + x260))
    result[9, 3, 0] = numpy.sum(x67 * (x16 * x250 + x16 * x274 + x268))
    result[9, 4, 0] = numpy.sum(x98 * (x16 * x275 + x273))
    result[9, 5, 0] = numpy.sum(
        x67 * (x17 * x258 + x17 * x275 - x179 * x259 + 4.0 * x223 + x258 * x99)
    )
    return result


def int3c2e3d_sph_321(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fd|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 6, 3), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = x11 ** (-1.0)
    x13 = cx * x12
    x14 = x1 * x13 * (x10**2 + x4**2 + x8**2)
    x15 = boys(2, x14)
    x16 = 17.49341832762486
    x17 = A[1] - B[1]
    x18 = A[2] - B[2]
    x19 = numpy.exp(-ax * bx * x2 * (x0**2 + x17**2 + x18**2))
    x20 = 2.0 * x11 ** (-1.5) * x16 * x19 * x2
    x21 = x15 * x20
    x22 = cx ** (-1.0)
    x23 = x11 ** (-0.5)
    x24 = boys(1, x14)
    x25 = 2.0 * x16 * x19 * x2 * x22 * x23 * x24 - x21
    x26 = x25 * x6
    x27 = -2.0 * x16 * x19 * x2 * x22 * x23 * x24 * x5 + x21 * x4
    x28 = -x27
    x29 = boys(3, x14)
    x30 = x20 * x29
    x31 = -2.0 * x15 * x16 * x19 * x2 * x22 * x23 * x5 + x30 * x4
    x32 = -x31
    x33 = x13 * x32
    x34 = x33 * x4
    x35 = x26 + x28 * x5 - x34
    x36 = -x27 - x33
    x37 = 2.0 * x6
    x38 = 2.0 * x15 * x16 * x19 * x2 * x22 * x23 - x30
    x39 = x38 * x6
    x40 = boys(4, x14)
    x41 = x20 * x40
    x42 = -2.0 * x16 * x19 * x2 * x22 * x23 * x29 * x5 + x4 * x41
    x43 = -x42
    x44 = x13 * x43
    x45 = x4 * x44
    x46 = x32 * x5 + x39 - x45
    x47 = x13 * x46
    x48 = x4 * x47
    x49 = x35 * x5 + x36 * x37 - x48
    x50 = -x25 * x6
    x51 = 3.0 * x6
    x52 = x6 * (2.0 * x16 * x19 * x2 * x22 * x23 * x29 - x41)
    x53 = boys(5, x14)
    x54 = x20 * x53
    x55 = 2.0 * x16 * x19 * x2 * x22 * x23 * x40 * x5 - x4 * x54
    x56 = x13 * x55
    x57 = -x4 * x56 + x43 * x5 + x52
    x58 = x13 * x57
    x59 = -x37 * (x31 + x44) - x4 * x58 + x46 * x5
    x60 = x13 * x59
    x61 = -x4 * x60 + x49 * x5 - x51 * (-x28 * x5 + x34 + x47 + x50)
    x62 = x49 * x6
    x63 = x1 * x12
    x64 = x63 * (x4 * x61 + 4.0 * x62)
    x65 = x35 * x6
    x66 = x63 * (x4 * x49 + 3.0 * x65)
    x67 = -x38 * x6
    x68 = x6 * (2.0 * x16 * x19 * x2 * x22 * x23 * x40 - x54)
    x69 = x20 * boys(6, x14)
    x70 = x13 * x4
    x71 = (
        x5 * x61
        + 4.0 * x6 * (x35 * x5 + 2.0 * x36 * x6 - x48 - x60)
        - x70
        * (
            x5 * x59
            - x51 * (-x32 * x5 + x45 + x58 + x67)
            + x70
            * (
                x37 * (x42 + x56)
                - x5 * x57
                + x70
                * (
                    x5 * x55
                    + x68
                    - x70 * (2.0 * x16 * x19 * x2 * x22 * x23 * x5 * x53 - x4 * x69)
                )
            )
        )
    )
    x72 = x6 * x61
    x73 = da * db * dc
    x74 = 0.06666666666666667 * x73
    x75 = 2.23606797749979 * x74
    x76 = x63 * x8
    x77 = x61 * x76
    x78 = x0 * x49
    x79 = x10 * x63
    x80 = x61 * x79
    x81 = -x7 - A[1]
    x82 = -2.0 * x15 * x16 * x19 * x2 * x22 * x23 * x81 + x30 * x8
    x83 = -x82
    x84 = x13 * x83
    x85 = -2.0 * x16 * x19 * x2 * x22 * x23 * x24 * x81 + x21 * x8
    x86 = -x84 - x85
    x87 = x6 * x86
    x88 = -x85
    x89 = x4 * x84 - x5 * x88
    x90 = -x89
    x91 = -2.0 * x16 * x19 * x2 * x22 * x23 * x29 * x81 + x41 * x8
    x92 = -x91
    x93 = x13 * x92
    x94 = x4 * x93 - x5 * x83
    x95 = -x94
    x96 = x13 * x95
    x97 = x4 * x96
    x98 = x5 * x90 + x87 - x97
    x99 = -x6 * (x82 + x93)
    x100 = 2.0 * x16 * x19 * x2 * x22 * x23 * x40 * x81 - x54 * x8
    x101 = x100 * x13
    x102 = -x101 * x4 + x5 * x92
    x103 = x102 * x13
    x104 = -x103 * x4 + x5 * x95 + x99
    x105 = x104 * x13
    x106 = -x105 * x4 - x37 * (x89 + x96) + x5 * x98
    x107 = x6 * x98
    x108 = x63 * (x106 * x4 + 3.0 * x107)
    x109 = x108 + x17 * x66
    x110 = -x6 * (x101 + x91)
    x111 = 2.0 * x16 * x19 * x2 * x22 * x23 * x53 * x81 - x69 * x8
    x112 = (
        x106 * x5
        - x51 * (x105 - x5 * x90 - x6 * x86 + x97)
        + x70
        * (
            -x104 * x5
            + x37 * (x103 + x94)
            + x70 * (x102 * x5 + x110 - x70 * (x100 * x5 - x111 * x70))
        )
    )
    x113 = x106 * x6
    x114 = x63 * (x112 * x4 + 4.0 * x113)
    x115 = 3.872983346207417 * x74
    x116 = x63 * (x106 * x8 + x62)
    x117 = x17 * x49
    x118 = x116 + x117 * x76
    x119 = x63 * (x112 * x8 + x72)
    x120 = x106 * x79
    x121 = x117 * x79 + x120
    x122 = x112 * x79
    x123 = -x9 - A[2]
    x124 = x10 * x30 - 2.0 * x123 * x15 * x16 * x19 * x2 * x22 * x23
    x125 = -x124
    x126 = x125 * x13
    x127 = x10 * x21 - 2.0 * x123 * x16 * x19 * x2 * x22 * x23 * x24
    x128 = -x126 - x127
    x129 = x128 * x6
    x130 = -x127
    x131 = x126 * x4 - x130 * x5
    x132 = -x131
    x133 = x10 * x41 - 2.0 * x123 * x16 * x19 * x2 * x22 * x23 * x29
    x134 = -x133
    x135 = x13 * x134
    x136 = -x125 * x5 + x135 * x4
    x137 = -x136
    x138 = x13 * x137
    x139 = x138 * x4
    x140 = x129 + x132 * x5 - x139
    x141 = -x6 * (x124 + x135)
    x142 = -x10 * x54 + 2.0 * x123 * x16 * x19 * x2 * x22 * x23 * x40
    x143 = x13 * x142
    x144 = x134 * x5 - x143 * x4
    x145 = x13 * x144
    x146 = x137 * x5 + x141 - x145 * x4
    x147 = x13 * x146
    x148 = x140 * x5 - x147 * x4 - x37 * (x131 + x138)
    x149 = x140 * x6
    x150 = x63 * (x148 * x4 + 3.0 * x149)
    x151 = x150 + x18 * x66
    x152 = -x128 * x6
    x153 = -x6 * (x133 + x143)
    x154 = -x10 * x69 + 2.0 * x123 * x16 * x19 * x2 * x22 * x23 * x53
    x155 = (
        x148 * x5
        - x51 * (-x132 * x5 + x139 + x147 + x152)
        + x70
        * (
            -x146 * x5
            + x37 * (x136 + x145)
            + x70 * (x144 * x5 + x153 - x70 * (x142 * x5 - x154 * x70))
        )
    )
    x156 = x148 * x6
    x157 = x63 * (x155 * x4 + 4.0 * x156)
    x158 = x148 * x76
    x159 = x18 * x49
    x160 = x158 + x159 * x76
    x161 = x155 * x76
    x162 = x63 * (x10 * x148 + x62)
    x163 = x159 * x79 + x162
    x164 = x63 * (x10 * x155 + x72)
    x165 = x8 * x93
    x166 = -x165 + x39 + x81 * x83
    x167 = x13 * x166
    x168 = x8 * x84
    x169 = x6 * (-x167 - x168 - x50 + x81 * x88)
    x170 = -x168 + x26 + x81 * x88
    x171 = x167 * x4 - x170 * x5
    x172 = -x171
    x173 = -x101 * x8 + x52 + x81 * x92
    x174 = x13 * x173
    x175 = x166 * x5 - x174 * x4
    x176 = x13 * x175
    x177 = x169 + x172 * x5 - x176 * x4
    x178 = x6 * (-x165 - x174 - x67 + x81 * x83)
    x179 = x13 * x8
    x180 = x100 * x81 - x111 * x179 + x68
    x181 = (
        x177 * x5
        - x37 * (x171 + x176)
        - x70 * (x175 * x5 + x178 - x70 * (x173 * x5 - x180 * x70))
    )
    x182 = x177 * x6
    x183 = 3.0 * x182
    x184 = x63 * (x181 * x4 + x183)
    x185 = x108 * x17 + x184
    x186 = x63 * (2.0 * x113 + x181 * x8)
    x187 = x116 * x17 + x186
    x188 = x181 * x79
    x189 = x120 * x17 + x188
    x190 = -x125 * x81 + x135 * x8
    x191 = -x190
    x192 = x13 * x191
    x193 = x126 * x8 - x130 * x81
    x194 = -x6 * (x192 + x193)
    x195 = -x193
    x196 = x192 * x4 - x195 * x5
    x197 = -x196
    x198 = x134 * x81 - x143 * x8
    x199 = x13 * x198
    x200 = x191 * x5 - x199 * x4
    x201 = x13 * x200
    x202 = x194 + x197 * x5 - x201 * x4
    x203 = -x6 * (x190 + x199)
    x204 = x142 * x81 - x154 * x179
    x205 = (
        x202 * x5
        - x37 * (x196 + x201)
        - x70 * (x200 * x5 + x203 - x70 * (x198 * x5 - x204 * x70))
    )
    x206 = x63 * (x202 * x51 + x205 * x4)
    x207 = x108 * x18 + x206
    x208 = x63 * (x156 + x205 * x8)
    x209 = x116 * x18 + x208
    x210 = x63 * (x10 * x205 + x113)
    x211 = x120 * x18 + x210
    x212 = x10 * x135
    x213 = x123 * x125 - x212 + x39
    x214 = x13 * x213
    x215 = x10 * x126
    x216 = x6 * (x123 * x130 - x214 - x215 - x50)
    x217 = x123 * x130 - x215 + x26
    x218 = x214 * x4 - x217 * x5
    x219 = -x218
    x220 = -x10 * x143 + x123 * x134 + x52
    x221 = x13 * x220
    x222 = x213 * x5 - x221 * x4
    x223 = x13 * x222
    x224 = x216 + x219 * x5 - x223 * x4
    x225 = x6 * (x123 * x125 - x212 - x221 - x67)
    x226 = x10 * x13
    x227 = x123 * x142 - x154 * x226 + x68
    x228 = (
        x224 * x5
        - x37 * (x218 + x223)
        - x70 * (x222 * x5 + x225 - x70 * (x220 * x5 - x227 * x70))
    )
    x229 = x224 * x6
    x230 = 3.0 * x229
    x231 = x63 * (x228 * x4 + x230)
    x232 = x150 * x18 + x231
    x233 = x228 * x76
    x234 = x158 * x18 + x233
    x235 = x63 * (x10 * x228 + 2.0 * x156)
    x236 = x162 * x18 + x235
    x237 = x6 * x90
    x238 = 2.0 * x237
    x239 = x238 + x4 * x98
    x240 = x0 * x63
    x241 = 0.3333333333333333 * x73
    x242 = x65 + x8 * x98
    x243 = x79 * x98
    x244 = x172 * x6
    x245 = x63 * (x177 * x4 + 2.0 * x244)
    x246 = x17 * x63
    x247 = x239 * x246 + x245
    x248 = 1.732050807568877 * x241
    x249 = x63 * (2.0 * x107 + x177 * x8)
    x250 = x242 * x246 + x249
    x251 = x177 * x79
    x252 = x17 * x243 + x251
    x253 = x197 * x37
    x254 = x63 * (x202 * x4 + x253)
    x255 = x18 * x63
    x256 = x239 * x255 + x254
    x257 = x63 * (x149 + x202 * x8)
    x258 = x242 * x255 + x257
    x259 = x63 * (x10 * x202 + x107)
    x260 = x18 * x243 + x259
    x261 = x166 * x81 - x174 * x8 + 2.0 * x99
    x262 = x13 * x261
    x263 = x167 * x8
    x264 = x6 * (x170 * x81 - x262 - x263 + 2.0 * x6 * x86)
    x265 = x170 * x81 - x263 + 2.0 * x87
    x266 = -x262 * x4 + x265 * x5
    x267 = 2.0 * x110 + x173 * x81 - x179 * x180
    x268 = x264 + x266 * x5 - x70 * (x261 * x5 - x267 * x70)
    x269 = x266 * x6
    x270 = x63 * (x268 * x4 + 2.0 * x269)
    x271 = x17 * x245 + x270
    x272 = x63 * (x183 + x268 * x8)
    x273 = x17 * x249 + x272
    x274 = x268 * x79
    x275 = x17 * x251 + x274
    x276 = x141 + x191 * x81 - x199 * x8
    x277 = x13 * x276
    x278 = x192 * x8
    x279 = x6 * (-x152 + x195 * x81 - x277 - x278)
    x280 = x129 + x195 * x81 - x278
    x281 = -x277 * x4 + x280 * x5
    x282 = x153 - x179 * x204 + x198 * x81
    x283 = x279 + x281 * x5 - x70 * (x276 * x5 - x282 * x70)
    x284 = x281 * x37
    x285 = x63 * (x283 * x4 + x284)
    x286 = x18 * x245 + x285
    x287 = x202 * x37
    x288 = x63 * (x283 * x8 + x287)
    x289 = x18 * x249 + x288
    x290 = x63 * (x10 * x283 + x182)
    x291 = x18 * x251 + x290
    x292 = x213 * x81 - x221 * x8
    x293 = x13 * x292
    x294 = x214 * x8 - x217 * x81
    x295 = -x6 * (x293 + x294)
    x296 = -x294
    x297 = -x293 * x4 + x296 * x5
    x298 = -x179 * x227 + x220 * x81
    x299 = x295 + x297 * x5 - x70 * (x292 * x5 - x298 * x70)
    x300 = x297 * x37
    x301 = x63 * (x299 * x4 + x300)
    x302 = x18 * x254 + x301
    x303 = x63 * (x229 + x299 * x8)
    x304 = x18 * x257 + x303
    x305 = x63 * (x10 * x299 + x287)
    x306 = x18 * x259 + x305
    x307 = x132 * x6
    x308 = 2.0 * x307
    x309 = x140 * x4 + x308
    x310 = x140 * x76
    x311 = x10 * x140 + x65
    x312 = x246 * x309 + x254
    x313 = x17 * x310 + x257
    x314 = x246 * x311 + x259
    x315 = x219 * x6
    x316 = x63 * (x224 * x4 + 2.0 * x315)
    x317 = x255 * x309 + x316
    x318 = x224 * x76
    x319 = x18 * x310 + x318
    x320 = x63 * (x10 * x224 + 2.0 * x149)
    x321 = x255 * x311 + x320
    x322 = x17 * x254 + x285
    x323 = x17 * x257 + x288
    x324 = x17 * x259 + x290
    x325 = -x10 * x221 + x123 * x213 + 2.0 * x141
    x326 = x13 * x325
    x327 = x10 * x214
    x328 = x6 * (x123 * x217 + 2.0 * x128 * x6 - x326 - x327)
    x329 = x123 * x217 + 2.0 * x129 - x327
    x330 = -x326 * x4 + x329 * x5
    x331 = x123 * x220 + 2.0 * x153 - x226 * x227
    x332 = x328 + x330 * x5 - x70 * (x325 * x5 - x331 * x70)
    x333 = x330 * x6
    x334 = x63 * (x332 * x4 + 2.0 * x333)
    x335 = x18 * x316 + x334
    x336 = x332 * x76
    x337 = x18 * x318 + x336
    x338 = x63 * (x10 * x332 + x230)
    x339 = x18 * x320 + x338
    x340 = x170 * x6
    x341 = x172 * x4 + x340
    x342 = x172 * x8 + x238
    x343 = x172 * x79
    x344 = x265 * x6
    x345 = x63 * (x266 * x4 + x344)
    x346 = x246 * x341 + x345
    x347 = x63 * (3.0 * x244 + x266 * x8)
    x348 = x246 * x342 + x347
    x349 = x266 * x79
    x350 = x17 * x343 + x349
    x351 = x280 * x6
    x352 = x63 * (x281 * x4 + x351)
    x353 = x255 * x341 + x352
    x354 = x63 * (x253 + x281 * x8)
    x355 = x255 * x342 + x354
    x356 = x63 * (x10 * x281 + x244)
    x357 = x18 * x343 + x356
    x358 = 3.0 * x169 - x262 * x8 + x265 * x81
    x359 = x358 * x6
    x360 = 3.0 * x178 - x179 * x267 + x261 * x81
    x361 = x358 * x5 - x360 * x70
    x362 = x17 * x345 + x63 * (x359 + x361 * x4)
    x363 = x17 * x347 + x63 * (4.0 * x269 + x361 * x8)
    x364 = x17 * x349 + x361 * x79
    x365 = 2.0 * x194 - x277 * x8 + x280 * x81
    x366 = x365 * x6
    x367 = -x179 * x282 + 2.0 * x203 + x276 * x81
    x368 = x365 * x5 - x367 * x70
    x369 = x63 * (x366 + x368 * x4)
    x370 = x18 * x345 + x369
    x371 = x63 * (x281 * x51 + x368 * x8)
    x372 = x18 * x347 + x371
    x373 = x63 * (x10 * x368 + x269)
    x374 = x18 * x349 + x373
    x375 = x216 - x293 * x8 + x296 * x81
    x376 = x375 * x6
    x377 = -x179 * x298 + x225 + x292 * x81
    x378 = x375 * x5 - x377 * x70
    x379 = x63 * (x376 + x378 * x4)
    x380 = x18 * x352 + x379
    x381 = x63 * (x300 + x378 * x8)
    x382 = x18 * x354 + x381
    x383 = x63 * (x10 * x378 + x284)
    x384 = x18 * x356 + x383
    x385 = x195 * x6
    x386 = x197 * x4 + x385
    x387 = x197 * x8 + x307
    x388 = x10 * x197 + x237
    x389 = x246 * x386 + x352
    x390 = x246 * x387 + x354
    x391 = x246 * x388 + x356
    x392 = x296 * x6
    x393 = x63 * (x297 * x4 + x392)
    x394 = x255 * x386 + x393
    x395 = x63 * (x297 * x8 + x315)
    x396 = x255 * x387 + x395
    x397 = x63 * (x10 * x297 + x253)
    x398 = x255 * x388 + x397
    x399 = x17 * x352 + x369
    x400 = x17 * x354 + x371
    x401 = x17 * x356 + x373
    x402 = -x326 * x8 + x329 * x81
    x403 = x402 * x6
    x404 = -x179 * x331 + x325 * x81
    x405 = x402 * x5 - x404 * x70
    x406 = x63 * (x4 * x405 + x403)
    x407 = x18 * x393 + x406
    x408 = x63 * (x333 + x405 * x8)
    x409 = x18 * x395 + x408
    x410 = x63 * (x10 * x405 + x297 * x51)
    x411 = x18 * x397 + x410
    x412 = x217 * x6
    x413 = x219 * x4 + x412
    x414 = x219 * x76
    x415 = x10 * x219 + x308
    x416 = x246 * x413 + x393
    x417 = x17 * x414 + x395
    x418 = x246 * x415 + x397
    x419 = x329 * x6
    x420 = x63 * (x330 * x4 + x419)
    x421 = x255 * x413 + x420
    x422 = x330 * x76
    x423 = x18 * x414 + x422
    x424 = x63 * (x10 * x330 + 3.0 * x315)
    x425 = x255 * x415 + x424
    x426 = x17 * x393 + x379
    x427 = x17 * x395 + x381
    x428 = x17 * x397 + x383
    x429 = -x10 * x326 + x123 * x329 + 3.0 * x216
    x430 = x429 * x6
    x431 = x123 * x325 + 3.0 * x225 - x226 * x331
    x432 = x429 * x5 - x431 * x70
    x433 = x18 * x420 + x63 * (x4 * x432 + x430)
    x434 = x18 * x422 + x432 * x76
    x435 = x18 * x424 + x63 * (x10 * x432 + 4.0 * x333)
    x436 = x265 * x4
    x437 = x265 * x8 + 3.0 * x340
    x438 = x265 * x79
    x439 = x4 * x63
    x440 = x246 * x436 + x358 * x439
    x441 = x63 * (4.0 * x344 + x358 * x8)
    x442 = x246 * x437 + x441
    x443 = x358 * x79
    x444 = x17 * x438 + x443
    x445 = x365 * x439
    x446 = x255 * x436 + x445
    x447 = x63 * (3.0 * x351 + x365 * x8)
    x448 = x255 * x437 + x447
    x449 = x63 * (x10 * x365 + x344)
    x450 = x18 * x438 + x449
    x451 = -x179 * x360 + 4.0 * x264 + x358 * x81
    x452 = x358 * x4
    x453 = -x179 * x367 + 3.0 * x279 + x365 * x81
    x454 = x439 * x453
    x455 = x63 * (4.0 * x366 + x453 * x8)
    x456 = x63 * (x10 * x453 + x359)
    x457 = -x179 * x377 + 2.0 * x295 + x375 * x81
    x458 = x439 * x457
    x459 = x255 * x4
    x460 = x365 * x459 + x458
    x461 = 3.0 * x376
    x462 = x63 * (x457 * x8 + x461)
    x463 = x18 * x447 + x462
    x464 = x63 * (x10 * x457 + 2.0 * x366)
    x465 = x18 * x449 + x464
    x466 = x280 * x4
    x467 = 2.0 * x385
    x468 = x280 * x8 + x467
    x469 = x10 * x280 + x340
    x470 = x246 * x466 + x445
    x471 = x246 * x468 + x447
    x472 = x246 * x469 + x449
    x473 = x375 * x439
    x474 = x280 * x459 + x473
    x475 = x63 * (x375 * x8 + 2.0 * x392)
    x476 = x255 * x468 + x475
    x477 = x63 * (x10 * x375 + 2.0 * x351)
    x478 = x255 * x469 + x477
    x479 = x246 * x4
    x480 = -x179 * x404 + x328 + x402 * x81
    x481 = x439 * x480
    x482 = x375 * x459 + x481
    x483 = x63 * (2.0 * x403 + x480 * x8)
    x484 = x18 * x475 + x483
    x485 = x63 * (x10 * x480 + x461)
    x486 = x18 * x477 + x485
    x487 = x240 * x4
    x488 = x296 * x8 + x412
    x489 = x10 * x296 + x467
    x490 = x296 * x479 + x473
    x491 = x246 * x488 + x475
    x492 = x246 * x489 + x477
    x493 = x402 * x439
    x494 = x296 * x459 + x493
    x495 = x63 * (x402 * x8 + x419)
    x496 = x255 * x488 + x495
    x497 = x63 * (x10 * x402 + 3.0 * x392)
    x498 = x255 * x489 + x497
    x499 = -x179 * x431 + x429 * x81
    x500 = x402 * x459 + x439 * x499
    x501 = x18 * x495 + x63 * (x430 + x499 * x8)
    x502 = x18 * x497 + x63 * (x10 * x499 + 4.0 * x403)
    x503 = x329 * x76
    x504 = x10 * x329 + 3.0 * x412
    x505 = x329 * x479 + x493
    x506 = x17 * x503 + x495
    x507 = x246 * x504 + x497
    x508 = x329 * x459 + x429 * x439
    x509 = x429 * x76
    x510 = x18 * x503 + x509
    x511 = x63 * (x10 * x429 + 4.0 * x419)
    x512 = x255 * x504 + x511
    x513 = x123 * x429 - x226 * x431 + 4.0 * x328

    # 180 item(s)
    result[0, 0, 0] = numpy.sum(
        x75 * (x0 * x64 + x0 * (x0 * x66 + x64) + x63 * (x4 * x71 + 5.0 * x72))
    )
    result[0, 0, 1] = numpy.sum(x75 * (x0 * x77 + x0 * (x76 * x78 + x77) + x71 * x76))
    result[0, 0, 2] = numpy.sum(x75 * (x0 * x80 + x0 * (x78 * x79 + x80) + x71 * x79))
    result[0, 1, 0] = numpy.sum(x115 * (x0 * x109 + x114 + x17 * x64))
    result[0, 1, 1] = numpy.sum(x115 * (x0 * x118 + x119 + x17 * x77))
    result[0, 1, 2] = numpy.sum(x115 * (x0 * x121 + x122 + x17 * x80))
    result[0, 2, 0] = numpy.sum(x115 * (x0 * x151 + x157 + x18 * x64))
    result[0, 2, 1] = numpy.sum(x115 * (x0 * x160 + x161 + x18 * x77))
    result[0, 2, 2] = numpy.sum(x115 * (x0 * x163 + x164 + x18 * x80))
    result[0, 3, 0] = numpy.sum(x75 * (x109 * x17 + x185))
    result[0, 3, 1] = numpy.sum(x75 * (x118 * x17 + x187))
    result[0, 3, 2] = numpy.sum(x75 * (x121 * x17 + x189))
    result[0, 4, 0] = numpy.sum(x115 * (x151 * x17 + x207))
    result[0, 4, 1] = numpy.sum(x115 * (x160 * x17 + x209))
    result[0, 4, 2] = numpy.sum(x115 * (x163 * x17 + x211))
    result[0, 5, 0] = numpy.sum(x75 * (x151 * x18 + x232))
    result[0, 5, 1] = numpy.sum(x75 * (x160 * x18 + x234))
    result[0, 5, 2] = numpy.sum(x75 * (x163 * x18 + x236))
    result[1, 0, 0] = numpy.sum(x241 * (x0 * x108 + x0 * (x108 + x239 * x240) + x114))
    result[1, 0, 1] = numpy.sum(x241 * (x0 * x116 + x0 * (x116 + x240 * x242) + x119))
    result[1, 0, 2] = numpy.sum(x241 * (x0 * x120 + x0 * (x0 * x243 + x120) + x122))
    result[1, 1, 0] = numpy.sum(x248 * (x0 * x247 + x185))
    result[1, 1, 1] = numpy.sum(x248 * (x0 * x250 + x187))
    result[1, 1, 2] = numpy.sum(x248 * (x0 * x252 + x189))
    result[1, 2, 0] = numpy.sum(x248 * (x0 * x256 + x207))
    result[1, 2, 1] = numpy.sum(x248 * (x0 * x258 + x209))
    result[1, 2, 2] = numpy.sum(x248 * (x0 * x260 + x211))
    result[1, 3, 0] = numpy.sum(x241 * (x17 * x247 + x271))
    result[1, 3, 1] = numpy.sum(x241 * (x17 * x250 + x273))
    result[1, 3, 2] = numpy.sum(x241 * (x17 * x252 + x275))
    result[1, 4, 0] = numpy.sum(x248 * (x17 * x256 + x286))
    result[1, 4, 1] = numpy.sum(x248 * (x17 * x258 + x289))
    result[1, 4, 2] = numpy.sum(x248 * (x17 * x260 + x291))
    result[1, 5, 0] = numpy.sum(x241 * (x18 * x256 + x302))
    result[1, 5, 1] = numpy.sum(x241 * (x18 * x258 + x304))
    result[1, 5, 2] = numpy.sum(x241 * (x18 * x260 + x306))
    result[2, 0, 0] = numpy.sum(x241 * (x0 * x150 + x0 * (x150 + x240 * x309) + x157))
    result[2, 0, 1] = numpy.sum(x241 * (x0 * x158 + x0 * (x0 * x310 + x158) + x161))
    result[2, 0, 2] = numpy.sum(x241 * (x0 * x162 + x0 * (x162 + x240 * x311) + x164))
    result[2, 1, 0] = numpy.sum(x248 * (x0 * x312 + x150 * x17 + x206))
    result[2, 1, 1] = numpy.sum(x248 * (x0 * x313 + x158 * x17 + x208))
    result[2, 1, 2] = numpy.sum(x248 * (x0 * x314 + x162 * x17 + x210))
    result[2, 2, 0] = numpy.sum(x248 * (x0 * x317 + x232))
    result[2, 2, 1] = numpy.sum(x248 * (x0 * x319 + x234))
    result[2, 2, 2] = numpy.sum(x248 * (x0 * x321 + x236))
    result[2, 3, 0] = numpy.sum(x241 * (x17 * x312 + x322))
    result[2, 3, 1] = numpy.sum(x241 * (x17 * x313 + x323))
    result[2, 3, 2] = numpy.sum(x241 * (x17 * x314 + x324))
    result[2, 4, 0] = numpy.sum(x248 * (x17 * x317 + x302))
    result[2, 4, 1] = numpy.sum(x248 * (x17 * x319 + x304))
    result[2, 4, 2] = numpy.sum(x248 * (x17 * x321 + x306))
    result[2, 5, 0] = numpy.sum(x241 * (x18 * x317 + x335))
    result[2, 5, 1] = numpy.sum(x241 * (x18 * x319 + x337))
    result[2, 5, 2] = numpy.sum(x241 * (x18 * x321 + x339))
    result[3, 0, 0] = numpy.sum(x241 * (x0 * x245 + x0 * (x240 * x341 + x245) + x184))
    result[3, 0, 1] = numpy.sum(x241 * (x0 * x249 + x0 * (x240 * x342 + x249) + x186))
    result[3, 0, 2] = numpy.sum(x241 * (x0 * x251 + x0 * (x0 * x343 + x251) + x188))
    result[3, 1, 0] = numpy.sum(x248 * (x0 * x346 + x271))
    result[3, 1, 1] = numpy.sum(x248 * (x0 * x348 + x273))
    result[3, 1, 2] = numpy.sum(x248 * (x0 * x350 + x275))
    result[3, 2, 0] = numpy.sum(x248 * (x0 * x353 + x286))
    result[3, 2, 1] = numpy.sum(x248 * (x0 * x355 + x289))
    result[3, 2, 2] = numpy.sum(x248 * (x0 * x357 + x291))
    result[3, 3, 0] = numpy.sum(x241 * (x17 * x346 + x362))
    result[3, 3, 1] = numpy.sum(x241 * (x17 * x348 + x363))
    result[3, 3, 2] = numpy.sum(x241 * (x17 * x350 + x364))
    result[3, 4, 0] = numpy.sum(x248 * (x17 * x353 + x370))
    result[3, 4, 1] = numpy.sum(x248 * (x17 * x355 + x372))
    result[3, 4, 2] = numpy.sum(x248 * (x17 * x357 + x374))
    result[3, 5, 0] = numpy.sum(x241 * (x18 * x353 + x380))
    result[3, 5, 1] = numpy.sum(x241 * (x18 * x355 + x382))
    result[3, 5, 2] = numpy.sum(x241 * (x18 * x357 + x384))
    result[4, 0, 0] = numpy.sum(x248 * (x0 * x254 + x0 * (x240 * x386 + x254) + x206))
    result[4, 0, 1] = numpy.sum(x248 * (x0 * x257 + x0 * (x240 * x387 + x257) + x208))
    result[4, 0, 2] = numpy.sum(x248 * (x0 * x259 + x0 * (x240 * x388 + x259) + x210))
    result[4, 1, 0] = numpy.sum(x73 * (x0 * x389 + x322))
    result[4, 1, 1] = numpy.sum(x73 * (x0 * x390 + x323))
    result[4, 1, 2] = numpy.sum(x73 * (x0 * x391 + x324))
    result[4, 2, 0] = numpy.sum(x73 * (x0 * x394 + x302))
    result[4, 2, 1] = numpy.sum(x73 * (x0 * x396 + x304))
    result[4, 2, 2] = numpy.sum(x73 * (x0 * x398 + x306))
    result[4, 3, 0] = numpy.sum(x248 * (x17 * x389 + x399))
    result[4, 3, 1] = numpy.sum(x248 * (x17 * x390 + x400))
    result[4, 3, 2] = numpy.sum(x248 * (x17 * x391 + x401))
    result[4, 4, 0] = numpy.sum(x73 * (x17 * x394 + x380))
    result[4, 4, 1] = numpy.sum(x73 * (x17 * x396 + x382))
    result[4, 4, 2] = numpy.sum(x73 * (x17 * x398 + x384))
    result[4, 5, 0] = numpy.sum(x248 * (x18 * x394 + x407))
    result[4, 5, 1] = numpy.sum(x248 * (x18 * x396 + x409))
    result[4, 5, 2] = numpy.sum(x248 * (x18 * x398 + x411))
    result[5, 0, 0] = numpy.sum(x241 * (x0 * x316 + x0 * (x240 * x413 + x316) + x231))
    result[5, 0, 1] = numpy.sum(x241 * (x0 * x318 + x0 * (x0 * x414 + x318) + x233))
    result[5, 0, 2] = numpy.sum(x241 * (x0 * x320 + x0 * (x240 * x415 + x320) + x235))
    result[5, 1, 0] = numpy.sum(x248 * (x0 * x416 + x17 * x316 + x301))
    result[5, 1, 1] = numpy.sum(x248 * (x0 * x417 + x17 * x318 + x303))
    result[5, 1, 2] = numpy.sum(x248 * (x0 * x418 + x17 * x320 + x305))
    result[5, 2, 0] = numpy.sum(x248 * (x0 * x421 + x335))
    result[5, 2, 1] = numpy.sum(x248 * (x0 * x423 + x337))
    result[5, 2, 2] = numpy.sum(x248 * (x0 * x425 + x339))
    result[5, 3, 0] = numpy.sum(x241 * (x17 * x416 + x426))
    result[5, 3, 1] = numpy.sum(x241 * (x17 * x417 + x427))
    result[5, 3, 2] = numpy.sum(x241 * (x17 * x418 + x428))
    result[5, 4, 0] = numpy.sum(x248 * (x17 * x421 + x407))
    result[5, 4, 1] = numpy.sum(x248 * (x17 * x423 + x409))
    result[5, 4, 2] = numpy.sum(x248 * (x17 * x425 + x411))
    result[5, 5, 0] = numpy.sum(x241 * (x18 * x421 + x433))
    result[5, 5, 1] = numpy.sum(x241 * (x18 * x423 + x434))
    result[5, 5, 2] = numpy.sum(x241 * (x18 * x425 + x435))
    result[6, 0, 0] = numpy.sum(x75 * (x0 * x345 + x0 * (x240 * x436 + x345) + x270))
    result[6, 0, 1] = numpy.sum(x75 * (x0 * x347 + x0 * (x240 * x437 + x347) + x272))
    result[6, 0, 2] = numpy.sum(x75 * (x0 * x349 + x0 * (x0 * x438 + x349) + x274))
    result[6, 1, 0] = numpy.sum(x115 * (x0 * x440 + x362))
    result[6, 1, 1] = numpy.sum(x115 * (x0 * x442 + x363))
    result[6, 1, 2] = numpy.sum(x115 * (x0 * x444 + x364))
    result[6, 2, 0] = numpy.sum(x115 * (x0 * x446 + x370))
    result[6, 2, 1] = numpy.sum(x115 * (x0 * x448 + x372))
    result[6, 2, 2] = numpy.sum(x115 * (x0 * x450 + x374))
    result[6, 3, 0] = numpy.sum(x75 * (x17 * x440 + x246 * x452 + x439 * x451))
    result[6, 3, 1] = numpy.sum(
        x75 * (x17 * x441 + x17 * x442 + x63 * (5.0 * x359 + x451 * x8))
    )
    result[6, 3, 2] = numpy.sum(x75 * (x17 * x443 + x17 * x444 + x451 * x79))
    result[6, 4, 0] = numpy.sum(x115 * (x17 * x446 + x255 * x452 + x454))
    result[6, 4, 1] = numpy.sum(x115 * (x17 * x448 + x18 * x441 + x455))
    result[6, 4, 2] = numpy.sum(x115 * (x17 * x450 + x18 * x443 + x456))
    result[6, 5, 0] = numpy.sum(x75 * (x18 * x446 + x460))
    result[6, 5, 1] = numpy.sum(x75 * (x18 * x448 + x463))
    result[6, 5, 2] = numpy.sum(x75 * (x18 * x450 + x465))
    result[7, 0, 0] = numpy.sum(x241 * (x0 * x352 + x0 * (x240 * x466 + x352) + x285))
    result[7, 0, 1] = numpy.sum(x241 * (x0 * x354 + x0 * (x240 * x468 + x354) + x288))
    result[7, 0, 2] = numpy.sum(x241 * (x0 * x356 + x0 * (x240 * x469 + x356) + x290))
    result[7, 1, 0] = numpy.sum(x248 * (x0 * x470 + x399))
    result[7, 1, 1] = numpy.sum(x248 * (x0 * x471 + x400))
    result[7, 1, 2] = numpy.sum(x248 * (x0 * x472 + x401))
    result[7, 2, 0] = numpy.sum(x248 * (x0 * x474 + x380))
    result[7, 2, 1] = numpy.sum(x248 * (x0 * x476 + x382))
    result[7, 2, 2] = numpy.sum(x248 * (x0 * x478 + x384))
    result[7, 3, 0] = numpy.sum(x241 * (x17 * x470 + x365 * x479 + x454))
    result[7, 3, 1] = numpy.sum(x241 * (x17 * x447 + x17 * x471 + x455))
    result[7, 3, 2] = numpy.sum(x241 * (x17 * x449 + x17 * x472 + x456))
    result[7, 4, 0] = numpy.sum(x248 * (x17 * x474 + x460))
    result[7, 4, 1] = numpy.sum(x248 * (x17 * x476 + x463))
    result[7, 4, 2] = numpy.sum(x248 * (x17 * x478 + x465))
    result[7, 5, 0] = numpy.sum(x241 * (x18 * x474 + x482))
    result[7, 5, 1] = numpy.sum(x241 * (x18 * x476 + x484))
    result[7, 5, 2] = numpy.sum(x241 * (x18 * x478 + x486))
    result[8, 0, 0] = numpy.sum(x241 * (x0 * x393 + x0 * (x296 * x487 + x393) + x301))
    result[8, 0, 1] = numpy.sum(x241 * (x0 * x395 + x0 * (x240 * x488 + x395) + x303))
    result[8, 0, 2] = numpy.sum(x241 * (x0 * x397 + x0 * (x240 * x489 + x397) + x305))
    result[8, 1, 0] = numpy.sum(x248 * (x0 * x490 + x426))
    result[8, 1, 1] = numpy.sum(x248 * (x0 * x491 + x427))
    result[8, 1, 2] = numpy.sum(x248 * (x0 * x492 + x428))
    result[8, 2, 0] = numpy.sum(x248 * (x0 * x494 + x407))
    result[8, 2, 1] = numpy.sum(x248 * (x0 * x496 + x409))
    result[8, 2, 2] = numpy.sum(x248 * (x0 * x498 + x411))
    result[8, 3, 0] = numpy.sum(x241 * (x17 * x490 + x375 * x479 + x458))
    result[8, 3, 1] = numpy.sum(x241 * (x17 * x475 + x17 * x491 + x462))
    result[8, 3, 2] = numpy.sum(x241 * (x17 * x477 + x17 * x492 + x464))
    result[8, 4, 0] = numpy.sum(x248 * (x17 * x494 + x482))
    result[8, 4, 1] = numpy.sum(x248 * (x17 * x496 + x484))
    result[8, 4, 2] = numpy.sum(x248 * (x17 * x498 + x486))
    result[8, 5, 0] = numpy.sum(x241 * (x18 * x494 + x500))
    result[8, 5, 1] = numpy.sum(x241 * (x18 * x496 + x501))
    result[8, 5, 2] = numpy.sum(x241 * (x18 * x498 + x502))
    result[9, 0, 0] = numpy.sum(x75 * (x0 * x420 + x0 * (x329 * x487 + x420) + x334))
    result[9, 0, 1] = numpy.sum(x75 * (x0 * x422 + x0 * (x0 * x503 + x422) + x336))
    result[9, 0, 2] = numpy.sum(x75 * (x0 * x424 + x0 * (x240 * x504 + x424) + x338))
    result[9, 1, 0] = numpy.sum(x115 * (x0 * x505 + x17 * x420 + x406))
    result[9, 1, 1] = numpy.sum(x115 * (x0 * x506 + x17 * x422 + x408))
    result[9, 1, 2] = numpy.sum(x115 * (x0 * x507 + x17 * x424 + x410))
    result[9, 2, 0] = numpy.sum(x115 * (x0 * x508 + x433))
    result[9, 2, 1] = numpy.sum(x115 * (x0 * x510 + x434))
    result[9, 2, 2] = numpy.sum(x115 * (x0 * x512 + x435))
    result[9, 3, 0] = numpy.sum(x75 * (x17 * x505 + x402 * x479 + x481))
    result[9, 3, 1] = numpy.sum(x75 * (x17 * x495 + x17 * x506 + x483))
    result[9, 3, 2] = numpy.sum(x75 * (x17 * x497 + x17 * x507 + x485))
    result[9, 4, 0] = numpy.sum(x115 * (x17 * x508 + x500))
    result[9, 4, 1] = numpy.sum(x115 * (x17 * x510 + x501))
    result[9, 4, 2] = numpy.sum(x115 * (x17 * x512 + x502))
    result[9, 5, 0] = numpy.sum(x75 * (x18 * x508 + x429 * x459 + x439 * x513))
    result[9, 5, 1] = numpy.sum(x75 * (x18 * x509 + x18 * x510 + x513 * x76))
    result[9, 5, 2] = numpy.sum(
        x75 * (x18 * x511 + x18 * x512 + x63 * (x10 * x513 + 5.0 * x430))
    )
    return result


def int3c2e3d_sph_322(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fd|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 6, 6), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(3, x17)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = 2.0 * x14 ** (-1.5) * x19 * x2 * x22
    x24 = x18 * x23
    x25 = cx ** (-1.0)
    x26 = x14 ** (-0.5)
    x27 = boys(2, x17)
    x28 = 2.0 * x19 * x2 * x22 * x25 * x26 * x27 - x24
    x29 = x28 * x6
    x30 = -2.0 * x19 * x2 * x22 * x25 * x26 * x27 * x5 + x24 * x4
    x31 = -x30
    x32 = boys(4, x17)
    x33 = x23 * x32
    x34 = -2.0 * x18 * x19 * x2 * x22 * x25 * x26 * x5 + x33 * x4
    x35 = -x34
    x36 = x16 * x35
    x37 = x36 * x4
    x38 = x29 + x31 * x5 - x37
    x39 = -x30 - x36
    x40 = 2.0 * x6
    x41 = 2.0 * x18 * x19 * x2 * x22 * x25 * x26 - x33
    x42 = x41 * x6
    x43 = boys(5, x17)
    x44 = x23 * x43
    x45 = -2.0 * x19 * x2 * x22 * x25 * x26 * x32 * x5 + x4 * x44
    x46 = -x45
    x47 = x16 * x46
    x48 = x4 * x47
    x49 = x35 * x5 + x42 - x48
    x50 = x16 * x49
    x51 = x4 * x50
    x52 = x38 * x5 + x39 * x40 - x51
    x53 = -x28 * x6
    x54 = 3.0 * x6
    x55 = x6 * (2.0 * x19 * x2 * x22 * x25 * x26 * x32 - x44)
    x56 = boys(6, x17)
    x57 = x23 * x56
    x58 = 2.0 * x19 * x2 * x22 * x25 * x26 * x43 * x5 - x4 * x57
    x59 = x16 * x58
    x60 = -x4 * x59 + x46 * x5 + x55
    x61 = x16 * x60
    x62 = -x4 * x61 - x40 * (x34 + x47) + x49 * x5
    x63 = x16 * x62
    x64 = -x4 * x63 + x5 * x52 - x54 * (-x31 * x5 + x37 + x50 + x53)
    x65 = x4 * x64
    x66 = x52 * x6
    x67 = 4.0 * x66
    x68 = x65 + x67
    x69 = x1 * x15
    x70 = x4 * x69
    x71 = x4 * x52
    x72 = x38 * x6
    x73 = 3.0 * x72
    x74 = x71 + x73
    x75 = 4.0 * x6
    x76 = x69 * x75
    x77 = x69 * (x68 * x70 + x74 * x76)
    x78 = x31 * x6
    x79 = x54 * x69
    x80 = x70 * x74 + x79 * (x38 * x4 + 2.0 * x78)
    x81 = x0 * x69
    x82 = -x41 * x6
    x83 = x6 * (2.0 * x19 * x2 * x22 * x25 * x26 * x43 - x57)
    x84 = x23 * boys(7, x17)
    x85 = x16 * x4
    x86 = (
        x5 * x64
        + x75 * (x38 * x5 + 2.0 * x39 * x6 - x51 - x63)
        - x85
        * (
            x5 * x62
            - x54 * (-x35 * x5 + x48 + x61 + x82)
            + x85
            * (
                x40 * (x45 + x59)
                - x5 * x60
                + x85
                * (
                    x5 * x58
                    + x83
                    - x85 * (2.0 * x19 * x2 * x22 * x25 * x26 * x5 * x56 - x4 * x84)
                )
            )
        )
    )
    x87 = x4 * x86
    x88 = x6 * x64
    x89 = 5.0 * x88
    x90 = x6 * x69
    x91 = da * db * dc
    x92 = 3.872983346207417 * x91
    x93 = 0.02222222222222222 * x92
    x94 = x69 * x9
    x95 = x69 * x94 * (x65 + x67)
    x96 = x94 * (x71 + x73)
    x97 = 0.149071198499986 * x91
    x98 = x12 * x69
    x99 = x69 * x98 * (x65 + x67)
    x100 = x98 * (x71 + x73)
    x101 = x1**2 / x14**2
    x102 = x10 * x101
    x103 = x102 * x64
    x104 = x0 * x52
    x105 = x101 * x9
    x106 = x105 * x12
    x107 = x106 * x64
    x108 = x101 * x13
    x109 = x108 * x64
    x110 = -x8 - A[1]
    x111 = -2.0 * x110 * x18 * x19 * x2 * x22 * x25 * x26 + x33 * x9
    x112 = -x111
    x113 = x112 * x16
    x114 = -2.0 * x110 * x19 * x2 * x22 * x25 * x26 * x27 + x24 * x9
    x115 = -x113 - x114
    x116 = x115 * x6
    x117 = -x114
    x118 = x113 * x4 - x117 * x5
    x119 = -x118
    x120 = -2.0 * x110 * x19 * x2 * x22 * x25 * x26 * x32 + x44 * x9
    x121 = -x120
    x122 = x121 * x16
    x123 = -x112 * x5 + x122 * x4
    x124 = -x123
    x125 = x124 * x16
    x126 = x125 * x4
    x127 = x116 + x119 * x5 - x126
    x128 = -x6 * (x111 + x122)
    x129 = 2.0 * x110 * x19 * x2 * x22 * x25 * x26 * x43 - x57 * x9
    x130 = x129 * x16
    x131 = x121 * x5 - x130 * x4
    x132 = x131 * x16
    x133 = x124 * x5 + x128 - x132 * x4
    x134 = x133 * x16
    x135 = x127 * x5 - x134 * x4 - x40 * (x118 + x125)
    x136 = x135 * x4
    x137 = x127 * x6
    x138 = 3.0 * x137
    x139 = x136 + x138
    x140 = x127 * x4
    x141 = x119 * x6
    x142 = 2.0 * x141
    x143 = x140 + x142
    x144 = x69 * (x139 * x70 + x143 * x79)
    x145 = x20 * x69
    x146 = x144 + x145 * x80
    x147 = -x6 * (x120 + x130)
    x148 = 2.0 * x110 * x19 * x2 * x22 * x25 * x26 * x56 - x84 * x9
    x149 = (
        x135 * x5
        + x54 * (x115 * x6 + x119 * x5 - x126 - x134)
        + x85
        * (
            -x133 * x5
            + x40 * (x123 + x132)
            + x85 * (x131 * x5 + x147 - x85 * (x129 * x5 - x148 * x85))
        )
    )
    x150 = x149 * x4
    x151 = x135 * x6
    x152 = 4.0 * x151
    x153 = x69 * (x139 * x76 + x70 * (x150 + x152))
    x154 = x135 * x9
    x155 = x154 + x66
    x156 = x127 * x9
    x157 = x156 + x72
    x158 = x69 * (x155 * x70 + x157 * x79)
    x159 = x145 * x96 + x158
    x160 = x149 * x9
    x161 = x160 + x88
    x162 = x69 * (x155 * x76 + x161 * x70)
    x163 = 0.06666666666666667 * x92
    x164 = x69 * x98 * (x136 + x138)
    x165 = x100 * x145 + x164
    x166 = x69 * x98 * (x150 + x152)
    x167 = x69 * x94 * (x155 + x66)
    x168 = x20 * x52
    x169 = x102 * x168 + x167
    x170 = x69 * x94 * (x161 + x88)
    x171 = x66 * x98
    x172 = x69 * (x154 * x98 + x171)
    x173 = x106 * x168 + x172
    x174 = x88 * x98
    x175 = x69 * (x160 * x98 + x174)
    x176 = x108 * x135
    x177 = x108 * x168 + x176
    x178 = x108 * x149
    x179 = -x11 - A[2]
    x180 = x12 * x33 - 2.0 * x179 * x18 * x19 * x2 * x22 * x25 * x26
    x181 = -x180
    x182 = x16 * x181
    x183 = x12 * x24 - 2.0 * x179 * x19 * x2 * x22 * x25 * x26 * x27
    x184 = -x182 - x183
    x185 = x184 * x6
    x186 = -x183
    x187 = x182 * x4 - x186 * x5
    x188 = -x187
    x189 = x12 * x44 - 2.0 * x179 * x19 * x2 * x22 * x25 * x26 * x32
    x190 = -x189
    x191 = x16 * x190
    x192 = -x181 * x5 + x191 * x4
    x193 = -x192
    x194 = x16 * x193
    x195 = x194 * x4
    x196 = x185 + x188 * x5 - x195
    x197 = -x6 * (x180 + x191)
    x198 = -x12 * x57 + 2.0 * x179 * x19 * x2 * x22 * x25 * x26 * x43
    x199 = x16 * x198
    x200 = x190 * x5 - x199 * x4
    x201 = x16 * x200
    x202 = x193 * x5 + x197 - x201 * x4
    x203 = x16 * x202
    x204 = x196 * x5 - x203 * x4 - x40 * (x187 + x194)
    x205 = x204 * x4
    x206 = x196 * x6
    x207 = 3.0 * x206
    x208 = x205 + x207
    x209 = x196 * x4
    x210 = x188 * x6
    x211 = 2.0 * x210
    x212 = x209 + x211
    x213 = x69 * (x208 * x70 + x212 * x79)
    x214 = x21 * x69
    x215 = x213 + x214 * x80
    x216 = -x184 * x6
    x217 = -x6 * (x189 + x199)
    x218 = -x12 * x84 + 2.0 * x179 * x19 * x2 * x22 * x25 * x26 * x56
    x219 = (
        x204 * x5
        - x54 * (-x188 * x5 + x195 + x203 + x216)
        + x85
        * (
            -x202 * x5
            + x40 * (x192 + x201)
            + x85 * (x200 * x5 + x217 - x85 * (x198 * x5 - x218 * x85))
        )
    )
    x220 = x219 * x4
    x221 = x204 * x6
    x222 = 4.0 * x221
    x223 = x69 * (x208 * x76 + x70 * (x220 + x222))
    x224 = x69 * x94 * (x205 + x207)
    x225 = x214 * x96 + x224
    x226 = x69 * x94 * (x220 + x222)
    x227 = x12 * x204 + x66
    x228 = x12 * x196 + x72
    x229 = x69 * (x227 * x70 + x228 * x79)
    x230 = x100 * x214 + x229
    x231 = x12 * x219 + x88
    x232 = x69 * (x227 * x76 + x231 * x70)
    x233 = x102 * x204
    x234 = x21 * x52
    x235 = x102 * x234 + x233
    x236 = x102 * x219
    x237 = x105 * x227
    x238 = x106 * x234 + x237
    x239 = x105 * x231
    x240 = x69 * (x171 + x227 * x98)
    x241 = x108 * x234 + x240
    x242 = x69 * (x174 + x231 * x98)
    x243 = x122 * x9
    x244 = x110 * x112 - x243 + x42
    x245 = x16 * x244
    x246 = x113 * x9
    x247 = x6 * (x110 * x117 - x245 - x246 - x53)
    x248 = x110 * x117 - x246 + x29
    x249 = x245 * x4 - x248 * x5
    x250 = -x249
    x251 = x110 * x121 - x130 * x9 + x55
    x252 = x16 * x251
    x253 = x244 * x5 - x252 * x4
    x254 = x16 * x253
    x255 = x247 + x250 * x5 - x254 * x4
    x256 = x6 * (x110 * x112 - x243 - x252 - x82)
    x257 = x16 * x9
    x258 = x110 * x129 - x148 * x257 + x83
    x259 = (
        x255 * x5
        - x40 * (x249 + x254)
        - x85 * (x253 * x5 + x256 - x85 * (x251 * x5 - x258 * x85))
    )
    x260 = x259 * x4
    x261 = x255 * x6
    x262 = 3.0 * x261
    x263 = x255 * x4
    x264 = x250 * x6
    x265 = 2.0 * x264
    x266 = x263 + x265
    x267 = x69 * (x266 * x79 + x70 * (x260 + x262))
    x268 = x144 * x20 + x267
    x269 = x259 * x9
    x270 = 2.0 * x151
    x271 = x269 + x270
    x272 = x255 * x9
    x273 = 2.0 * x137
    x274 = x272 + x273
    x275 = x274 * x79
    x276 = x69 * (x271 * x70 + x275)
    x277 = x158 * x20 + x276
    x278 = x262 * x98
    x279 = x69 * (x260 * x98 + x278)
    x280 = x164 * x20 + x279
    x281 = x40 * x69
    x282 = x69 * (x155 * x281 + x271 * x94)
    x283 = x167 * x20 + x282
    x284 = x69 * x98 * (x269 + x270)
    x285 = x172 * x20 + x284
    x286 = x108 * x259
    x287 = x176 * x20 + x286
    x288 = -x110 * x181 + x191 * x9
    x289 = -x288
    x290 = x16 * x289
    x291 = -x110 * x186 + x182 * x9
    x292 = -x6 * (x290 + x291)
    x293 = -x291
    x294 = x290 * x4 - x293 * x5
    x295 = -x294
    x296 = x110 * x190 - x199 * x9
    x297 = x16 * x296
    x298 = x289 * x5 - x297 * x4
    x299 = x16 * x298
    x300 = x292 + x295 * x5 - x299 * x4
    x301 = -x6 * (x288 + x297)
    x302 = x110 * x198 - x218 * x257
    x303 = (
        x300 * x5
        - x40 * (x294 + x299)
        - x85 * (x298 * x5 + x301 - x85 * (x296 * x5 - x302 * x85))
    )
    x304 = x295 * x40
    x305 = x300 * x4 + x304
    x306 = x69 * (x305 * x79 + x70 * (x300 * x54 + x303 * x4))
    x307 = x144 * x21 + x306
    x308 = x221 + x303 * x9
    x309 = x206 + x300 * x9
    x310 = x69 * (x308 * x70 + x309 * x79)
    x311 = x158 * x21 + x310
    x312 = x12 * x303 + x151
    x313 = x12 * x300 + x137
    x314 = x69 * (x312 * x70 + x313 * x79)
    x315 = x164 * x21 + x314
    x316 = x69 * x94 * (x221 + x308)
    x317 = x167 * x21 + x316
    x318 = x69 * (x227 * x90 + x312 * x94)
    x319 = x172 * x21 + x318
    x320 = x69 * x98 * (x151 + x312)
    x321 = x176 * x21 + x320
    x322 = x12 * x191
    x323 = x179 * x181 - x322 + x42
    x324 = x16 * x323
    x325 = x12 * x182
    x326 = x6 * (x179 * x186 - x324 - x325 - x53)
    x327 = x179 * x186 + x29 - x325
    x328 = x324 * x4 - x327 * x5
    x329 = -x328
    x330 = -x12 * x199 + x179 * x190 + x55
    x331 = x16 * x330
    x332 = x323 * x5 - x331 * x4
    x333 = x16 * x332
    x334 = x326 + x329 * x5 - x333 * x4
    x335 = x6 * (x179 * x181 - x322 - x331 - x82)
    x336 = x12 * x16
    x337 = x179 * x198 - x218 * x336 + x83
    x338 = (
        x334 * x5
        - x40 * (x328 + x333)
        - x85 * (x332 * x5 + x335 - x85 * (x330 * x5 - x337 * x85))
    )
    x339 = x338 * x4
    x340 = x334 * x6
    x341 = 3.0 * x340
    x342 = x334 * x4
    x343 = x329 * x6
    x344 = 2.0 * x343
    x345 = x342 + x344
    x346 = x69 * (x345 * x79 + x70 * (x339 + x341))
    x347 = x21 * x213 + x346
    x348 = x69 * x94 * (x339 + x341)
    x349 = x21 * x224 + x348
    x350 = x12 * x338 + 2.0 * x221
    x351 = x12 * x334 + 2.0 * x206
    x352 = x351 * x79
    x353 = x69 * (x350 * x70 + x352)
    x354 = x21 * x229 + x353
    x355 = x102 * x338
    x356 = x21 * x233 + x355
    x357 = x105 * x350
    x358 = x21 * x237 + x357
    x359 = x69 * (x227 * x281 + x350 * x98)
    x360 = x21 * x240 + x359
    x361 = x117 * x6
    x362 = x143 * x70 + x281 * (x119 * x4 + x361)
    x363 = 1.732050807568877
    x364 = 0.1111111111111111 * x363 * x91
    x365 = x281 * (x119 * x9 + x78)
    x366 = x157 * x70 + x365
    x367 = 0.3333333333333333 * x91
    x368 = x142 * x98
    x369 = x140 * x98 + x368
    x370 = x94 * (x157 + x72)
    x371 = x72 * x98
    x372 = x156 * x98 + x371
    x373 = x108 * x127
    x374 = x248 * x6
    x375 = x250 * x4
    x376 = x374 + x375
    x377 = x69 * (x266 * x70 + x281 * x376)
    x378 = x145 * x362 + x377
    x379 = x250 * x9
    x380 = x142 + x379
    x381 = x69 * (x274 * x70 + x281 * x380)
    x382 = x145 * x366 + x381
    x383 = x363 * x367
    x384 = x69 * x98 * (x263 + x265)
    x385 = x145 * x369 + x384
    x386 = x69 * (x157 * x281 + x274 * x94)
    x387 = x145 * x370 + x386
    x388 = x69 * x98 * (x272 + x273)
    x389 = x145 * x372 + x388
    x390 = x108 * x255
    x391 = x20 * x373 + x390
    x392 = x293 * x6
    x393 = x295 * x4 + x392
    x394 = x69 * (x281 * x393 + x305 * x70)
    x395 = x214 * x362 + x394
    x396 = x210 + x295 * x9
    x397 = x281 * x396
    x398 = x69 * (x309 * x70 + x397)
    x399 = x214 * x366 + x398
    x400 = x12 * x295 + x141
    x401 = x281 * x400
    x402 = x69 * (x313 * x70 + x401)
    x403 = x214 * x369 + x402
    x404 = x69 * x94 * (x206 + x309)
    x405 = x214 * x370 + x404
    x406 = x69 * (x228 * x90 + x313 * x94)
    x407 = x214 * x372 + x406
    x408 = x69 * x98 * (x137 + x313)
    x409 = x21 * x373 + x408
    x410 = x110 * x244 + 2.0 * x128 - x252 * x9
    x411 = x16 * x410
    x412 = x245 * x9
    x413 = x6 * (x110 * x248 + 2.0 * x115 * x6 - x411 - x412)
    x414 = x110 * x248 + 2.0 * x116 - x412
    x415 = -x4 * x411 + x414 * x5
    x416 = x110 * x251 + 2.0 * x147 - x257 * x258
    x417 = x413 + x415 * x5 - x85 * (x410 * x5 - x416 * x85)
    x418 = x4 * x417
    x419 = x415 * x6
    x420 = 2.0 * x419
    x421 = x414 * x6
    x422 = x4 * x415
    x423 = x421 + x422
    x424 = x69 * (x281 * x423 + x70 * (x418 + x420))
    x425 = x20 * x377 + x424
    x426 = x417 * x9
    x427 = x262 + x426
    x428 = x415 * x9
    x429 = 3.0 * x264
    x430 = x428 + x429
    x431 = x69 * (x281 * x430 + x427 * x70)
    x432 = x20 * x381 + x431
    x433 = x69 * x98 * (x418 + x420)
    x434 = x20 * x384 + x433
    x435 = x69 * (x275 + x427 * x94)
    x436 = x20 * x386 + x435
    x437 = x69 * (x278 + x426 * x98)
    x438 = x20 * x388 + x437
    x439 = x108 * x417
    x440 = x20 * x390 + x439
    x441 = x110 * x289 + x197 - x297 * x9
    x442 = x16 * x441
    x443 = x290 * x9
    x444 = x6 * (x110 * x293 - x216 - x442 - x443)
    x445 = x110 * x293 + x185 - x443
    x446 = -x4 * x442 + x445 * x5
    x447 = x110 * x296 + x217 - x257 * x302
    x448 = x444 + x446 * x5 - x85 * (x441 * x5 - x447 * x85)
    x449 = x40 * x446
    x450 = x445 * x6
    x451 = x4 * x446 + x450
    x452 = x69 * (x281 * x451 + x70 * (x4 * x448 + x449))
    x453 = x21 * x377 + x452
    x454 = x300 * x40
    x455 = x448 * x9 + x454
    x456 = x304 + x446 * x9
    x457 = x69 * (x281 * x456 + x455 * x70)
    x458 = x21 * x381 + x457
    x459 = x12 * x448 + x261
    x460 = x12 * x446 + x264
    x461 = x281 * x460
    x462 = x69 * (x459 * x70 + x461)
    x463 = x21 * x384 + x462
    x464 = x69 * (x281 * x309 + x455 * x94)
    x465 = x21 * x386 + x464
    x466 = x281 * x313
    x467 = x69 * (x459 * x94 + x466)
    x468 = x21 * x388 + x467
    x469 = x69 * x98 * (x261 + x459)
    x470 = x21 * x390 + x469
    x471 = x110 * x323 - x331 * x9
    x472 = x16 * x471
    x473 = -x110 * x327 + x324 * x9
    x474 = -x6 * (x472 + x473)
    x475 = -x473
    x476 = -x4 * x472 + x475 * x5
    x477 = x110 * x330 - x257 * x337
    x478 = x474 + x476 * x5 - x85 * (x471 * x5 - x477 * x85)
    x479 = x40 * x476
    x480 = x475 * x6
    x481 = x4 * x476 + x480
    x482 = x69 * (x281 * x481 + x70 * (x4 * x478 + x479))
    x483 = x21 * x394 + x482
    x484 = x340 + x478 * x9
    x485 = x343 + x476 * x9
    x486 = x281 * x485
    x487 = x69 * (x484 * x70 + x486)
    x488 = x21 * x398 + x487
    x489 = x12 * x478 + x454
    x490 = x12 * x476 + x304
    x491 = x281 * x490
    x492 = x69 * (x489 * x70 + x491)
    x493 = x21 * x402 + x492
    x494 = x69 * x94 * (x340 + x484)
    x495 = x21 * x404 + x494
    x496 = x69 * (x351 * x90 + x489 * x94)
    x497 = x21 * x406 + x496
    x498 = x69 * (x466 + x489 * x98)
    x499 = x21 * x408 + x498
    x500 = x186 * x6
    x501 = x212 * x70 + x281 * (x188 * x4 + x500)
    x502 = x94 * (x209 + x211)
    x503 = x12 * x188 + x78
    x504 = x281 * x503
    x505 = x228 * x70 + x504
    x506 = x102 * x196
    x507 = x105 * x228
    x508 = x228 * x98 + x371
    x509 = x145 * x501 + x394
    x510 = x145 * x502 + x398
    x511 = x145 * x505 + x402
    x512 = x20 * x506 + x404
    x513 = x20 * x507 + x406
    x514 = x145 * x508 + x408
    x515 = x327 * x6
    x516 = x329 * x4
    x517 = x515 + x516
    x518 = x69 * (x281 * x517 + x345 * x70)
    x519 = x214 * x501 + x518
    x520 = x69 * x94 * (x342 + x344)
    x521 = x214 * x502 + x520
    x522 = x12 * x329 + x211
    x523 = x69 * (x281 * x522 + x351 * x70)
    x524 = x214 * x505 + x523
    x525 = x102 * x334
    x526 = x21 * x506 + x525
    x527 = x105 * x351
    x528 = x21 * x507 + x527
    x529 = x69 * (x228 * x281 + x351 * x98)
    x530 = x214 * x508 + x529
    x531 = x20 * x394 + x452
    x532 = x20 * x398 + x457
    x533 = x20 * x402 + x462
    x534 = x20 * x404 + x464
    x535 = x20 * x406 + x467
    x536 = x20 * x408 + x469
    x537 = -x12 * x331 + x179 * x323 + 2.0 * x197
    x538 = x16 * x537
    x539 = x12 * x324
    x540 = x6 * (x179 * x327 + 2.0 * x184 * x6 - x538 - x539)
    x541 = x179 * x327 + 2.0 * x185 - x539
    x542 = -x4 * x538 + x5 * x541
    x543 = x179 * x330 + 2.0 * x217 - x336 * x337
    x544 = x5 * x542 + x540 - x85 * (x5 * x537 - x543 * x85)
    x545 = x4 * x544
    x546 = x542 * x6
    x547 = 2.0 * x546
    x548 = x541 * x6
    x549 = x4 * x542
    x550 = x548 + x549
    x551 = x69 * (x281 * x550 + x70 * (x545 + x547))
    x552 = x21 * x518 + x551
    x553 = x69 * x94 * (x545 + x547)
    x554 = x21 * x520 + x553
    x555 = x12 * x544 + x341
    x556 = x12 * x542 + 3.0 * x343
    x557 = x69 * (x281 * x556 + x555 * x70)
    x558 = x21 * x523 + x557
    x559 = x102 * x544
    x560 = x21 * x525 + x559
    x561 = x105 * x555
    x562 = x21 * x527 + x561
    x563 = x69 * (x352 + x555 * x98)
    x564 = x21 * x529 + x563
    x565 = x70 * (x374 + x376)
    x566 = x248 * x9 + 2.0 * x361
    x567 = x380 * x70 + x566 * x90
    x568 = x374 * x98
    x569 = x375 * x98 + x568
    x570 = x365 + x380 * x94
    x571 = x368 + x379 * x98
    x572 = x108 * x250
    x573 = x69 * x70 * (x421 + x423)
    x574 = x145 * x565 + x573
    x575 = x414 * x9
    x576 = 3.0 * x374
    x577 = x575 + x576
    x578 = x69 * (x430 * x70 + x577 * x90)
    x579 = x145 * x567 + x578
    x580 = x421 * x98
    x581 = x69 * (x422 * x98 + x580)
    x582 = x145 * x569 + x581
    x583 = x69 * (x380 * x79 + x430 * x94)
    x584 = x145 * x570 + x583
    x585 = x69 * x98 * (x428 + x429)
    x586 = x145 * x571 + x585
    x587 = x108 * x415
    x588 = x20 * x572 + x587
    x589 = x69 * x70 * (x450 + x451)
    x590 = x214 * x565 + x589
    x591 = 2.0 * x392
    x592 = x445 * x9 + x591
    x593 = x69 * (x456 * x70 + x592 * x90)
    x594 = x214 * x567 + x593
    x595 = x12 * x445 + x374
    x596 = x69 * (x460 * x70 + x595 * x90)
    x597 = x214 * x569 + x596
    x598 = x69 * (x397 + x456 * x94)
    x599 = x214 * x570 + x598
    x600 = x69 * (x401 + x460 * x94)
    x601 = x214 * x571 + x600
    x602 = x69 * x98 * (x264 + x460)
    x603 = x21 * x572 + x602
    x604 = x110 * x414 + 3.0 * x247 - x411 * x9
    x605 = x6 * x604
    x606 = x110 * x410 + 3.0 * x256 - x257 * x416
    x607 = x5 * x604 - x606 * x85
    x608 = x4 * x607
    x609 = x20 * x573 + x69 * x70 * (2.0 * x605 + x608)
    x610 = x604 * x9
    x611 = 4.0 * x421
    x612 = x610 + x611
    x613 = x612 * x90
    x614 = x607 * x9
    x615 = 4.0 * x419
    x616 = x614 + x615
    x617 = x20 * x578 + x69 * (x613 + x616 * x70)
    x618 = x605 * x98
    x619 = x20 * x581 + x69 * (x608 * x98 + x618)
    x620 = x20 * x583 + x69 * (x430 * x76 + x616 * x94)
    x621 = x20 * x585 + x69 * x98 * (x614 + x615)
    x622 = x108 * x607 + x20 * x587
    x623 = x110 * x445 + 2.0 * x292 - x442 * x9
    x624 = x6 * x623
    x625 = x110 * x441 - x257 * x447 + 2.0 * x301
    x626 = x5 * x623 - x625 * x85
    x627 = x69 * x70 * (x4 * x626 + 2.0 * x624)
    x628 = x21 * x573 + x627
    x629 = 3.0 * x450 + x623 * x9
    x630 = x446 * x54 + x626 * x9
    x631 = x69 * (x629 * x90 + x630 * x70)
    x632 = x21 * x578 + x631
    x633 = x12 * x623 + x421
    x634 = x12 * x626 + x419
    x635 = x69 * (x633 * x90 + x634 * x70)
    x636 = x21 * x581 + x635
    x637 = x69 * (x456 * x79 + x630 * x94)
    x638 = x21 * x583 + x637
    x639 = x69 * (x460 * x79 + x634 * x94)
    x640 = x21 * x585 + x639
    x641 = x69 * x98 * (x419 + x634)
    x642 = x21 * x587 + x641
    x643 = x110 * x475 + x326 - x472 * x9
    x644 = x6 * x643
    x645 = x110 * x471 - x257 * x477 + x335
    x646 = x5 * x643 - x645 * x85
    x647 = x69 * x70 * (x4 * x646 + 2.0 * x644)
    x648 = x21 * x589 + x647
    x649 = 2.0 * x480 + x643 * x9
    x650 = x479 + x646 * x9
    x651 = x69 * (x649 * x90 + x650 * x70)
    x652 = x21 * x593 + x651
    x653 = x12 * x643 + 2.0 * x450
    x654 = x12 * x646 + x449
    x655 = x69 * (x653 * x90 + x654 * x70)
    x656 = x21 * x596 + x655
    x657 = x69 * (x486 + x650 * x94)
    x658 = x21 * x598 + x657
    x659 = x69 * (x491 + x654 * x94)
    x660 = x21 * x600 + x659
    x661 = x69 * (x461 + x654 * x98)
    x662 = x21 * x602 + x661
    x663 = x70 * (x392 + x393)
    x664 = x293 * x9 + x500
    x665 = x396 * x70 + x664 * x90
    x666 = x12 * x293 + x361
    x667 = x400 * x70 + x666 * x90
    x668 = x94 * (x210 + x396)
    x669 = x400 * x94 + x503 * x90
    x670 = x98 * (x141 + x400)
    x671 = x145 * x663 + x589
    x672 = x145 * x665 + x593
    x673 = x145 * x667 + x596
    x674 = x145 * x668 + x598
    x675 = x145 * x669 + x600
    x676 = x145 * x670 + x602
    x677 = x69 * x70 * (x480 + x481)
    x678 = x214 * x663 + x677
    x679 = x475 * x9 + x515
    x680 = x69 * (x485 * x70 + x679 * x90)
    x681 = x214 * x665 + x680
    x682 = x12 * x475 + x591
    x683 = x69 * (x490 * x70 + x682 * x90)
    x684 = x214 * x667 + x683
    x685 = x69 * x94 * (x343 + x485)
    x686 = x214 * x668 + x685
    x687 = x69 * (x490 * x94 + x522 * x90)
    x688 = x214 * x669 + x687
    x689 = x69 * (x401 + x490 * x98)
    x690 = x214 * x670 + x689
    x691 = x20 * x589 + x627
    x692 = x20 * x593 + x631
    x693 = x20 * x596 + x635
    x694 = x20 * x598 + x637
    x695 = x20 * x600 + x639
    x696 = x20 * x602 + x641
    x697 = x110 * x541 - x538 * x9
    x698 = x6 * x697
    x699 = x110 * x537 - x257 * x543
    x700 = x5 * x697 - x699 * x85
    x701 = x69 * x70 * (x4 * x700 + 2.0 * x698)
    x702 = x21 * x677 + x701
    x703 = x548 + x697 * x9
    x704 = x546 + x700 * x9
    x705 = x69 * (x70 * x704 + x703 * x90)
    x706 = x21 * x680 + x705
    x707 = x12 * x697 + 3.0 * x480
    x708 = x12 * x700 + x476 * x54
    x709 = x69 * (x70 * x708 + x707 * x90)
    x710 = x21 * x683 + x709
    x711 = x69 * x94 * (x546 + x704)
    x712 = x21 * x685 + x711
    x713 = x69 * (x556 * x90 + x708 * x94)
    x714 = x21 * x687 + x713
    x715 = x69 * (x490 * x79 + x708 * x98)
    x716 = x21 * x689 + x715
    x717 = x70 * (x515 + x517)
    x718 = x515 * x94
    x719 = x516 * x94 + x718
    x720 = x12 * x327 + 2.0 * x500
    x721 = x720 * x90
    x722 = x522 * x70 + x721
    x723 = x102 * x329
    x724 = x105 * x522
    x725 = x504 + x522 * x98
    x726 = x145 * x717 + x677
    x727 = x145 * x719 + x680
    x728 = x145 * x722 + x683
    x729 = x20 * x723 + x685
    x730 = x20 * x724 + x687
    x731 = x145 * x725 + x689
    x732 = x69 * x70 * (x548 + x550)
    x733 = x214 * x717 + x732
    x734 = x548 * x94
    x735 = x69 * (x549 * x94 + x734)
    x736 = x214 * x719 + x735
    x737 = x12 * x541 + 3.0 * x515
    x738 = x737 * x90
    x739 = x69 * (x556 * x70 + x738)
    x740 = x214 * x722 + x739
    x741 = x102 * x542
    x742 = x21 * x723 + x741
    x743 = x105 * x556
    x744 = x21 * x724 + x743
    x745 = x69 * (x522 * x79 + x556 * x98)
    x746 = x214 * x725 + x745
    x747 = x20 * x677 + x647
    x748 = x20 * x680 + x651
    x749 = x20 * x683 + x655
    x750 = x20 * x685 + x657
    x751 = x20 * x687 + x659
    x752 = x20 * x689 + x661
    x753 = -x12 * x538 + x179 * x541 + 3.0 * x326
    x754 = x6 * x753
    x755 = x179 * x537 + 3.0 * x335 - x336 * x543
    x756 = x5 * x753 - x755 * x85
    x757 = x4 * x756
    x758 = x21 * x732 + x69 * x70 * (2.0 * x754 + x757)
    x759 = x754 * x94
    x760 = x21 * x735 + x69 * (x757 * x94 + x759)
    x761 = x12 * x753 + 4.0 * x548
    x762 = x761 * x90
    x763 = x12 * x756 + 4.0 * x546
    x764 = x21 * x739 + x69 * (x70 * x763 + x762)
    x765 = x102 * x756 + x21 * x741
    x766 = x105 * x763 + x21 * x743
    x767 = x21 * x745 + x69 * (x556 * x76 + x763 * x98)
    x768 = x101 * x7
    x769 = x0 * x414
    x770 = x101 * x4
    x771 = x577 * x770
    x772 = x12 * x770
    x773 = x566 * x79 + x577 * x94
    x774 = x98 * (x575 + x576)
    x775 = x604 * x768
    x776 = x20 * x414
    x777 = x768 * x776 + x775
    x778 = x612 * x770
    x779 = x20 * x771 + x778
    x780 = x604 * x772
    x781 = x772 * x776 + x780
    x782 = x69 * (x577 * x76 + x612 * x94)
    x783 = x145 * x773 + x782
    x784 = x69 * x98 * (x610 + x611)
    x785 = x145 * x774 + x784
    x786 = x108 * x604
    x787 = x108 * x776 + x786
    x788 = x623 * x768
    x789 = x21 * x414
    x790 = x768 * x789 + x788
    x791 = x629 * x770
    x792 = x21 * x771 + x791
    x793 = x633 * x770
    x794 = x772 * x789 + x793
    x795 = x69 * (x592 * x79 + x629 * x94)
    x796 = x214 * x773 + x795
    x797 = x69 * (x595 * x79 + x633 * x94)
    x798 = x214 * x774 + x797
    x799 = x69 * (x580 + x633 * x98)
    x800 = x108 * x789 + x799
    x801 = x110 * x604 - x257 * x606 + 4.0 * x413
    x802 = x801 * x9
    x803 = 5.0 * x605
    x804 = x802 + x803
    x805 = x110 * x623 - x257 * x625 + 3.0 * x444
    x806 = x768 * x805
    x807 = 4.0 * x624 + x805 * x9
    x808 = x770 * x807
    x809 = x12 * x805 + x605
    x810 = x770 * x809
    x811 = x69 * (x629 * x76 + x807 * x94)
    x812 = x69 * (x633 * x76 + x809 * x94)
    x813 = x69 * (x618 + x809 * x98)
    x814 = x110 * x643 - x257 * x645 + 2.0 * x474
    x815 = x768 * x814
    x816 = x21 * x788 + x815
    x817 = 3.0 * x644
    x818 = x814 * x9 + x817
    x819 = x770 * x818
    x820 = x21 * x791 + x819
    x821 = x12 * x814 + 2.0 * x624
    x822 = x770 * x821
    x823 = x21 * x793 + x822
    x824 = x69 * (x649 * x79 + x818 * x94)
    x825 = x21 * x795 + x824
    x826 = x653 * x79
    x827 = x69 * (x821 * x94 + x826)
    x828 = x21 * x797 + x827
    x829 = x69 * (x281 * x633 + x821 * x98)
    x830 = x21 * x799 + x829
    x831 = x445 * x768
    x832 = x0 * x770
    x833 = x281 * x664 + x592 * x94
    x834 = x281 * x666
    x835 = x595 * x94 + x834
    x836 = x568 + x595 * x98
    x837 = x20 * x831 + x788
    x838 = x20 * x770
    x839 = x592 * x838 + x791
    x840 = x595 * x838 + x793
    x841 = x145 * x833 + x795
    x842 = x145 * x835 + x797
    x843 = x145 * x836 + x799
    x844 = x643 * x768
    x845 = x21 * x831 + x844
    x846 = x649 * x770
    x847 = x21 * x770
    x848 = x592 * x847 + x846
    x849 = x653 * x770
    x850 = x595 * x847 + x849
    x851 = x69 * (x281 * x679 + x649 * x94)
    x852 = x214 * x833 + x851
    x853 = x69 * (x281 * x682 + x653 * x94)
    x854 = x214 * x835 + x853
    x855 = x69 * (x281 * x595 + x653 * x98)
    x856 = x214 * x836 + x855
    x857 = x110 * x697 - x257 * x699 + x540
    x858 = x768 * x857
    x859 = x21 * x844 + x858
    x860 = 2.0 * x698 + x857 * x9
    x861 = x770 * x860
    x862 = x21 * x846 + x861
    x863 = x12 * x857 + x817
    x864 = x770 * x863
    x865 = x21 * x849 + x864
    x866 = x69 * (x281 * x703 + x860 * x94)
    x867 = x21 * x851 + x866
    x868 = x69 * (x281 * x707 + x863 * x94)
    x869 = x21 * x853 + x868
    x870 = x69 * (x826 + x863 * x98)
    x871 = x21 * x855 + x870
    x872 = x475 * x768
    x873 = x679 * x94 + x718
    x874 = x682 * x94 + x721
    x875 = x682 * x98 + x834
    x876 = x20 * x872 + x844
    x877 = x679 * x838 + x846
    x878 = x682 * x838 + x849
    x879 = x145 * x873 + x851
    x880 = x145 * x874 + x853
    x881 = x145 * x875 + x855
    x882 = x697 * x768
    x883 = x21 * x872 + x882
    x884 = x703 * x770
    x885 = x679 * x847 + x884
    x886 = x707 * x770
    x887 = x682 * x847 + x886
    x888 = x69 * (x703 * x94 + x734)
    x889 = x214 * x873 + x888
    x890 = x69 * (x707 * x94 + x738)
    x891 = x214 * x874 + x890
    x892 = x69 * (x682 * x79 + x707 * x98)
    x893 = x214 * x875 + x892
    x894 = x110 * x753 - x257 * x755
    x895 = x21 * x882 + x768 * x894
    x896 = x754 + x894 * x9
    x897 = x21 * x884 + x770 * x896
    x898 = x12 * x894 + 4.0 * x698
    x899 = x21 * x886 + x770 * x898
    x900 = x21 * x888 + x69 * (x759 + x896 * x94)
    x901 = x21 * x890 + x69 * (x762 + x898 * x94)
    x902 = x21 * x892 + x69 * (x707 * x76 + x898 * x98)
    x903 = x0 * x541
    x904 = x105 * x4
    x905 = x105 * x737
    x906 = x720 * x79 + x737 * x98
    x907 = x20 * x541
    x908 = x768 * x907 + x882
    x909 = x884 + x904 * x907
    x910 = x737 * x838 + x886
    x911 = x102 * x907 + x888
    x912 = x20 * x905 + x890
    x913 = x145 * x906 + x892
    x914 = x753 * x768
    x915 = x21 * x541
    x916 = x768 * x915 + x914
    x917 = x753 * x904
    x918 = x904 * x915 + x917
    x919 = x761 * x770
    x920 = x737 * x847 + x919
    x921 = x102 * x753
    x922 = x102 * x915 + x921
    x923 = x105 * x761
    x924 = x21 * x905 + x923
    x925 = x69 * (x737 * x76 + x761 * x98)
    x926 = x214 * x906 + x925
    x927 = x179 * x753 - x336 * x755 + 4.0 * x540
    x928 = x12 * x927 + 5.0 * x754

    # 360 item(s)
    result[0, 0, 0] = numpy.sum(
        x93
        * (
            x0 * x77
            + x0 * (x77 + x80 * x81)
            + x69 * (5.0 * x68 * x90 + x70 * (x87 + x89))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x97 * (x0 * x95 + x0 * (x81 * x96 + x95) + x69 * x94 * (x87 + x89))
    )
    result[0, 0, 2] = numpy.sum(
        x97 * (x0 * x99 + x0 * (x100 * x81 + x99) + x69 * x98 * (x87 + x89))
    )
    result[0, 0, 3] = numpy.sum(
        x93 * (x0 * x103 + x0 * (x102 * x104 + x103) + x102 * x86)
    )
    result[0, 0, 4] = numpy.sum(
        x97 * (x0 * x107 + x0 * (x104 * x106 + x107) + x106 * x86)
    )
    result[0, 0, 5] = numpy.sum(
        x93 * (x0 * x109 + x0 * (x104 * x108 + x109) + x108 * x86)
    )
    result[0, 1, 0] = numpy.sum(x97 * (x0 * x146 + x153 + x20 * x77))
    result[0, 1, 1] = numpy.sum(x163 * (x0 * x159 + x162 + x20 * x95))
    result[0, 1, 2] = numpy.sum(x163 * (x0 * x165 + x166 + x20 * x99))
    result[0, 1, 3] = numpy.sum(x97 * (x0 * x169 + x103 * x20 + x170))
    result[0, 1, 4] = numpy.sum(x163 * (x0 * x173 + x107 * x20 + x175))
    result[0, 1, 5] = numpy.sum(x97 * (x0 * x177 + x109 * x20 + x178))
    result[0, 2, 0] = numpy.sum(x97 * (x0 * x215 + x21 * x77 + x223))
    result[0, 2, 1] = numpy.sum(x163 * (x0 * x225 + x21 * x95 + x226))
    result[0, 2, 2] = numpy.sum(x163 * (x0 * x230 + x21 * x99 + x232))
    result[0, 2, 3] = numpy.sum(x97 * (x0 * x235 + x103 * x21 + x236))
    result[0, 2, 4] = numpy.sum(x163 * (x0 * x238 + x107 * x21 + x239))
    result[0, 2, 5] = numpy.sum(x97 * (x0 * x241 + x109 * x21 + x242))
    result[0, 3, 0] = numpy.sum(x93 * (x146 * x20 + x268))
    result[0, 3, 1] = numpy.sum(x97 * (x159 * x20 + x277))
    result[0, 3, 2] = numpy.sum(x97 * (x165 * x20 + x280))
    result[0, 3, 3] = numpy.sum(x93 * (x169 * x20 + x283))
    result[0, 3, 4] = numpy.sum(x97 * (x173 * x20 + x285))
    result[0, 3, 5] = numpy.sum(x93 * (x177 * x20 + x287))
    result[0, 4, 0] = numpy.sum(x97 * (x20 * x215 + x307))
    result[0, 4, 1] = numpy.sum(x163 * (x20 * x225 + x311))
    result[0, 4, 2] = numpy.sum(x163 * (x20 * x230 + x315))
    result[0, 4, 3] = numpy.sum(x97 * (x20 * x235 + x317))
    result[0, 4, 4] = numpy.sum(x163 * (x20 * x238 + x319))
    result[0, 4, 5] = numpy.sum(x97 * (x20 * x241 + x321))
    result[0, 5, 0] = numpy.sum(x93 * (x21 * x215 + x347))
    result[0, 5, 1] = numpy.sum(x97 * (x21 * x225 + x349))
    result[0, 5, 2] = numpy.sum(x97 * (x21 * x230 + x354))
    result[0, 5, 3] = numpy.sum(x93 * (x21 * x235 + x356))
    result[0, 5, 4] = numpy.sum(x97 * (x21 * x238 + x358))
    result[0, 5, 5] = numpy.sum(x93 * (x21 * x241 + x360))
    result[1, 0, 0] = numpy.sum(x364 * (x0 * x144 + x0 * (x144 + x362 * x81) + x153))
    result[1, 0, 1] = numpy.sum(x367 * (x0 * x158 + x0 * (x158 + x366 * x81) + x162))
    result[1, 0, 2] = numpy.sum(x367 * (x0 * x164 + x0 * (x164 + x369 * x81) + x166))
    result[1, 0, 3] = numpy.sum(x364 * (x0 * x167 + x0 * (x167 + x370 * x81) + x170))
    result[1, 0, 4] = numpy.sum(x367 * (x0 * x172 + x0 * (x172 + x372 * x81) + x175))
    result[1, 0, 5] = numpy.sum(x364 * (x0 * x176 + x0 * (x0 * x373 + x176) + x178))
    result[1, 1, 0] = numpy.sum(x367 * (x0 * x378 + x268))
    result[1, 1, 1] = numpy.sum(x383 * (x0 * x382 + x277))
    result[1, 1, 2] = numpy.sum(x383 * (x0 * x385 + x280))
    result[1, 1, 3] = numpy.sum(x367 * (x0 * x387 + x283))
    result[1, 1, 4] = numpy.sum(x383 * (x0 * x389 + x285))
    result[1, 1, 5] = numpy.sum(x367 * (x0 * x391 + x287))
    result[1, 2, 0] = numpy.sum(x367 * (x0 * x395 + x307))
    result[1, 2, 1] = numpy.sum(x383 * (x0 * x399 + x311))
    result[1, 2, 2] = numpy.sum(x383 * (x0 * x403 + x315))
    result[1, 2, 3] = numpy.sum(x367 * (x0 * x405 + x317))
    result[1, 2, 4] = numpy.sum(x383 * (x0 * x407 + x319))
    result[1, 2, 5] = numpy.sum(x367 * (x0 * x409 + x321))
    result[1, 3, 0] = numpy.sum(x364 * (x20 * x378 + x425))
    result[1, 3, 1] = numpy.sum(x367 * (x20 * x382 + x432))
    result[1, 3, 2] = numpy.sum(x367 * (x20 * x385 + x434))
    result[1, 3, 3] = numpy.sum(x364 * (x20 * x387 + x436))
    result[1, 3, 4] = numpy.sum(x367 * (x20 * x389 + x438))
    result[1, 3, 5] = numpy.sum(x364 * (x20 * x391 + x440))
    result[1, 4, 0] = numpy.sum(x367 * (x20 * x395 + x453))
    result[1, 4, 1] = numpy.sum(x383 * (x20 * x399 + x458))
    result[1, 4, 2] = numpy.sum(x383 * (x20 * x403 + x463))
    result[1, 4, 3] = numpy.sum(x367 * (x20 * x405 + x465))
    result[1, 4, 4] = numpy.sum(x383 * (x20 * x407 + x468))
    result[1, 4, 5] = numpy.sum(x367 * (x20 * x409 + x470))
    result[1, 5, 0] = numpy.sum(x364 * (x21 * x395 + x483))
    result[1, 5, 1] = numpy.sum(x367 * (x21 * x399 + x488))
    result[1, 5, 2] = numpy.sum(x367 * (x21 * x403 + x493))
    result[1, 5, 3] = numpy.sum(x364 * (x21 * x405 + x495))
    result[1, 5, 4] = numpy.sum(x367 * (x21 * x407 + x497))
    result[1, 5, 5] = numpy.sum(x364 * (x21 * x409 + x499))
    result[2, 0, 0] = numpy.sum(x364 * (x0 * x213 + x0 * (x213 + x501 * x81) + x223))
    result[2, 0, 1] = numpy.sum(x367 * (x0 * x224 + x0 * (x224 + x502 * x81) + x226))
    result[2, 0, 2] = numpy.sum(x367 * (x0 * x229 + x0 * (x229 + x505 * x81) + x232))
    result[2, 0, 3] = numpy.sum(x364 * (x0 * x233 + x0 * (x0 * x506 + x233) + x236))
    result[2, 0, 4] = numpy.sum(x367 * (x0 * x237 + x0 * (x0 * x507 + x237) + x239))
    result[2, 0, 5] = numpy.sum(x364 * (x0 * x240 + x0 * (x240 + x508 * x81) + x242))
    result[2, 1, 0] = numpy.sum(x367 * (x0 * x509 + x20 * x213 + x306))
    result[2, 1, 1] = numpy.sum(x383 * (x0 * x510 + x20 * x224 + x310))
    result[2, 1, 2] = numpy.sum(x383 * (x0 * x511 + x20 * x229 + x314))
    result[2, 1, 3] = numpy.sum(x367 * (x0 * x512 + x20 * x233 + x316))
    result[2, 1, 4] = numpy.sum(x383 * (x0 * x513 + x20 * x237 + x318))
    result[2, 1, 5] = numpy.sum(x367 * (x0 * x514 + x20 * x240 + x320))
    result[2, 2, 0] = numpy.sum(x367 * (x0 * x519 + x347))
    result[2, 2, 1] = numpy.sum(x383 * (x0 * x521 + x349))
    result[2, 2, 2] = numpy.sum(x383 * (x0 * x524 + x354))
    result[2, 2, 3] = numpy.sum(x367 * (x0 * x526 + x356))
    result[2, 2, 4] = numpy.sum(x383 * (x0 * x528 + x358))
    result[2, 2, 5] = numpy.sum(x367 * (x0 * x530 + x360))
    result[2, 3, 0] = numpy.sum(x364 * (x20 * x509 + x531))
    result[2, 3, 1] = numpy.sum(x367 * (x20 * x510 + x532))
    result[2, 3, 2] = numpy.sum(x367 * (x20 * x511 + x533))
    result[2, 3, 3] = numpy.sum(x364 * (x20 * x512 + x534))
    result[2, 3, 4] = numpy.sum(x367 * (x20 * x513 + x535))
    result[2, 3, 5] = numpy.sum(x364 * (x20 * x514 + x536))
    result[2, 4, 0] = numpy.sum(x367 * (x20 * x519 + x483))
    result[2, 4, 1] = numpy.sum(x383 * (x20 * x521 + x488))
    result[2, 4, 2] = numpy.sum(x383 * (x20 * x524 + x493))
    result[2, 4, 3] = numpy.sum(x367 * (x20 * x526 + x495))
    result[2, 4, 4] = numpy.sum(x383 * (x20 * x528 + x497))
    result[2, 4, 5] = numpy.sum(x367 * (x20 * x530 + x499))
    result[2, 5, 0] = numpy.sum(x364 * (x21 * x519 + x552))
    result[2, 5, 1] = numpy.sum(x367 * (x21 * x521 + x554))
    result[2, 5, 2] = numpy.sum(x367 * (x21 * x524 + x558))
    result[2, 5, 3] = numpy.sum(x364 * (x21 * x526 + x560))
    result[2, 5, 4] = numpy.sum(x367 * (x21 * x528 + x562))
    result[2, 5, 5] = numpy.sum(x364 * (x21 * x530 + x564))
    result[3, 0, 0] = numpy.sum(x364 * (x0 * x377 + x0 * (x377 + x565 * x81) + x267))
    result[3, 0, 1] = numpy.sum(x367 * (x0 * x381 + x0 * (x381 + x567 * x81) + x276))
    result[3, 0, 2] = numpy.sum(x367 * (x0 * x384 + x0 * (x384 + x569 * x81) + x279))
    result[3, 0, 3] = numpy.sum(x364 * (x0 * x386 + x0 * (x386 + x570 * x81) + x282))
    result[3, 0, 4] = numpy.sum(x367 * (x0 * x388 + x0 * (x388 + x571 * x81) + x284))
    result[3, 0, 5] = numpy.sum(x364 * (x0 * x390 + x0 * (x0 * x572 + x390) + x286))
    result[3, 1, 0] = numpy.sum(x367 * (x0 * x574 + x425))
    result[3, 1, 1] = numpy.sum(x383 * (x0 * x579 + x432))
    result[3, 1, 2] = numpy.sum(x383 * (x0 * x582 + x434))
    result[3, 1, 3] = numpy.sum(x367 * (x0 * x584 + x436))
    result[3, 1, 4] = numpy.sum(x383 * (x0 * x586 + x438))
    result[3, 1, 5] = numpy.sum(x367 * (x0 * x588 + x440))
    result[3, 2, 0] = numpy.sum(x367 * (x0 * x590 + x453))
    result[3, 2, 1] = numpy.sum(x383 * (x0 * x594 + x458))
    result[3, 2, 2] = numpy.sum(x383 * (x0 * x597 + x463))
    result[3, 2, 3] = numpy.sum(x367 * (x0 * x599 + x465))
    result[3, 2, 4] = numpy.sum(x383 * (x0 * x601 + x468))
    result[3, 2, 5] = numpy.sum(x367 * (x0 * x603 + x470))
    result[3, 3, 0] = numpy.sum(x364 * (x20 * x574 + x609))
    result[3, 3, 1] = numpy.sum(x367 * (x20 * x579 + x617))
    result[3, 3, 2] = numpy.sum(x367 * (x20 * x582 + x619))
    result[3, 3, 3] = numpy.sum(x364 * (x20 * x584 + x620))
    result[3, 3, 4] = numpy.sum(x367 * (x20 * x586 + x621))
    result[3, 3, 5] = numpy.sum(x364 * (x20 * x588 + x622))
    result[3, 4, 0] = numpy.sum(x367 * (x20 * x590 + x628))
    result[3, 4, 1] = numpy.sum(x383 * (x20 * x594 + x632))
    result[3, 4, 2] = numpy.sum(x383 * (x20 * x597 + x636))
    result[3, 4, 3] = numpy.sum(x367 * (x20 * x599 + x638))
    result[3, 4, 4] = numpy.sum(x383 * (x20 * x601 + x640))
    result[3, 4, 5] = numpy.sum(x367 * (x20 * x603 + x642))
    result[3, 5, 0] = numpy.sum(x364 * (x21 * x590 + x648))
    result[3, 5, 1] = numpy.sum(x367 * (x21 * x594 + x652))
    result[3, 5, 2] = numpy.sum(x367 * (x21 * x597 + x656))
    result[3, 5, 3] = numpy.sum(x364 * (x21 * x599 + x658))
    result[3, 5, 4] = numpy.sum(x367 * (x21 * x601 + x660))
    result[3, 5, 5] = numpy.sum(x364 * (x21 * x603 + x662))
    result[4, 0, 0] = numpy.sum(x367 * (x0 * x394 + x0 * (x394 + x663 * x81) + x306))
    result[4, 0, 1] = numpy.sum(x383 * (x0 * x398 + x0 * (x398 + x665 * x81) + x310))
    result[4, 0, 2] = numpy.sum(x383 * (x0 * x402 + x0 * (x402 + x667 * x81) + x314))
    result[4, 0, 3] = numpy.sum(x367 * (x0 * x404 + x0 * (x404 + x668 * x81) + x316))
    result[4, 0, 4] = numpy.sum(x383 * (x0 * x406 + x0 * (x406 + x669 * x81) + x318))
    result[4, 0, 5] = numpy.sum(x367 * (x0 * x408 + x0 * (x408 + x670 * x81) + x320))
    result[4, 1, 0] = numpy.sum(x383 * (x0 * x671 + x531))
    result[4, 1, 1] = numpy.sum(x91 * (x0 * x672 + x532))
    result[4, 1, 2] = numpy.sum(x91 * (x0 * x673 + x533))
    result[4, 1, 3] = numpy.sum(x383 * (x0 * x674 + x534))
    result[4, 1, 4] = numpy.sum(x91 * (x0 * x675 + x535))
    result[4, 1, 5] = numpy.sum(x383 * (x0 * x676 + x536))
    result[4, 2, 0] = numpy.sum(x383 * (x0 * x678 + x483))
    result[4, 2, 1] = numpy.sum(x91 * (x0 * x681 + x488))
    result[4, 2, 2] = numpy.sum(x91 * (x0 * x684 + x493))
    result[4, 2, 3] = numpy.sum(x383 * (x0 * x686 + x495))
    result[4, 2, 4] = numpy.sum(x91 * (x0 * x688 + x497))
    result[4, 2, 5] = numpy.sum(x383 * (x0 * x690 + x499))
    result[4, 3, 0] = numpy.sum(x367 * (x20 * x671 + x691))
    result[4, 3, 1] = numpy.sum(x383 * (x20 * x672 + x692))
    result[4, 3, 2] = numpy.sum(x383 * (x20 * x673 + x693))
    result[4, 3, 3] = numpy.sum(x367 * (x20 * x674 + x694))
    result[4, 3, 4] = numpy.sum(x383 * (x20 * x675 + x695))
    result[4, 3, 5] = numpy.sum(x367 * (x20 * x676 + x696))
    result[4, 4, 0] = numpy.sum(x383 * (x20 * x678 + x648))
    result[4, 4, 1] = numpy.sum(x91 * (x20 * x681 + x652))
    result[4, 4, 2] = numpy.sum(x91 * (x20 * x684 + x656))
    result[4, 4, 3] = numpy.sum(x383 * (x20 * x686 + x658))
    result[4, 4, 4] = numpy.sum(x91 * (x20 * x688 + x660))
    result[4, 4, 5] = numpy.sum(x383 * (x20 * x690 + x662))
    result[4, 5, 0] = numpy.sum(x367 * (x21 * x678 + x702))
    result[4, 5, 1] = numpy.sum(x383 * (x21 * x681 + x706))
    result[4, 5, 2] = numpy.sum(x383 * (x21 * x684 + x710))
    result[4, 5, 3] = numpy.sum(x367 * (x21 * x686 + x712))
    result[4, 5, 4] = numpy.sum(x383 * (x21 * x688 + x714))
    result[4, 5, 5] = numpy.sum(x367 * (x21 * x690 + x716))
    result[5, 0, 0] = numpy.sum(x364 * (x0 * x518 + x0 * (x518 + x717 * x81) + x346))
    result[5, 0, 1] = numpy.sum(x367 * (x0 * x520 + x0 * (x520 + x719 * x81) + x348))
    result[5, 0, 2] = numpy.sum(x367 * (x0 * x523 + x0 * (x523 + x722 * x81) + x353))
    result[5, 0, 3] = numpy.sum(x364 * (x0 * x525 + x0 * (x0 * x723 + x525) + x355))
    result[5, 0, 4] = numpy.sum(x367 * (x0 * x527 + x0 * (x0 * x724 + x527) + x357))
    result[5, 0, 5] = numpy.sum(x364 * (x0 * x529 + x0 * (x529 + x725 * x81) + x359))
    result[5, 1, 0] = numpy.sum(x367 * (x0 * x726 + x20 * x518 + x482))
    result[5, 1, 1] = numpy.sum(x383 * (x0 * x727 + x20 * x520 + x487))
    result[5, 1, 2] = numpy.sum(x383 * (x0 * x728 + x20 * x523 + x492))
    result[5, 1, 3] = numpy.sum(x367 * (x0 * x729 + x20 * x525 + x494))
    result[5, 1, 4] = numpy.sum(x383 * (x0 * x730 + x20 * x527 + x496))
    result[5, 1, 5] = numpy.sum(x367 * (x0 * x731 + x20 * x529 + x498))
    result[5, 2, 0] = numpy.sum(x367 * (x0 * x733 + x552))
    result[5, 2, 1] = numpy.sum(x383 * (x0 * x736 + x554))
    result[5, 2, 2] = numpy.sum(x383 * (x0 * x740 + x558))
    result[5, 2, 3] = numpy.sum(x367 * (x0 * x742 + x560))
    result[5, 2, 4] = numpy.sum(x383 * (x0 * x744 + x562))
    result[5, 2, 5] = numpy.sum(x367 * (x0 * x746 + x564))
    result[5, 3, 0] = numpy.sum(x364 * (x20 * x726 + x747))
    result[5, 3, 1] = numpy.sum(x367 * (x20 * x727 + x748))
    result[5, 3, 2] = numpy.sum(x367 * (x20 * x728 + x749))
    result[5, 3, 3] = numpy.sum(x364 * (x20 * x729 + x750))
    result[5, 3, 4] = numpy.sum(x367 * (x20 * x730 + x751))
    result[5, 3, 5] = numpy.sum(x364 * (x20 * x731 + x752))
    result[5, 4, 0] = numpy.sum(x367 * (x20 * x733 + x702))
    result[5, 4, 1] = numpy.sum(x383 * (x20 * x736 + x706))
    result[5, 4, 2] = numpy.sum(x383 * (x20 * x740 + x710))
    result[5, 4, 3] = numpy.sum(x367 * (x20 * x742 + x712))
    result[5, 4, 4] = numpy.sum(x383 * (x20 * x744 + x714))
    result[5, 4, 5] = numpy.sum(x367 * (x20 * x746 + x716))
    result[5, 5, 0] = numpy.sum(x364 * (x21 * x733 + x758))
    result[5, 5, 1] = numpy.sum(x367 * (x21 * x736 + x760))
    result[5, 5, 2] = numpy.sum(x367 * (x21 * x740 + x764))
    result[5, 5, 3] = numpy.sum(x364 * (x21 * x742 + x765))
    result[5, 5, 4] = numpy.sum(x367 * (x21 * x744 + x766))
    result[5, 5, 5] = numpy.sum(x364 * (x21 * x746 + x767))
    result[6, 0, 0] = numpy.sum(x93 * (x0 * x573 + x0 * (x573 + x768 * x769) + x424))
    result[6, 0, 1] = numpy.sum(x97 * (x0 * x578 + x0 * (x0 * x771 + x578) + x431))
    result[6, 0, 2] = numpy.sum(x97 * (x0 * x581 + x0 * (x581 + x769 * x772) + x433))
    result[6, 0, 3] = numpy.sum(x93 * (x0 * x583 + x0 * (x583 + x773 * x81) + x435))
    result[6, 0, 4] = numpy.sum(x97 * (x0 * x585 + x0 * (x585 + x774 * x81) + x437))
    result[6, 0, 5] = numpy.sum(x93 * (x0 * x587 + x0 * (x108 * x769 + x587) + x439))
    result[6, 1, 0] = numpy.sum(x97 * (x0 * x777 + x609))
    result[6, 1, 1] = numpy.sum(x163 * (x0 * x779 + x617))
    result[6, 1, 2] = numpy.sum(x163 * (x0 * x781 + x619))
    result[6, 1, 3] = numpy.sum(x97 * (x0 * x783 + x620))
    result[6, 1, 4] = numpy.sum(x163 * (x0 * x785 + x621))
    result[6, 1, 5] = numpy.sum(x97 * (x0 * x787 + x622))
    result[6, 2, 0] = numpy.sum(x97 * (x0 * x790 + x628))
    result[6, 2, 1] = numpy.sum(x163 * (x0 * x792 + x632))
    result[6, 2, 2] = numpy.sum(x163 * (x0 * x794 + x636))
    result[6, 2, 3] = numpy.sum(x97 * (x0 * x796 + x638))
    result[6, 2, 4] = numpy.sum(x163 * (x0 * x798 + x640))
    result[6, 2, 5] = numpy.sum(x97 * (x0 * x800 + x642))
    result[6, 3, 0] = numpy.sum(x93 * (x20 * x775 + x20 * x777 + x768 * x801))
    result[6, 3, 1] = numpy.sum(x97 * (x20 * x778 + x20 * x779 + x770 * x804))
    result[6, 3, 2] = numpy.sum(x97 * (x20 * x780 + x20 * x781 + x772 * x801))
    result[6, 3, 3] = numpy.sum(
        x93 * (x20 * x782 + x20 * x783 + x69 * (5.0 * x613 + x804 * x94))
    )
    result[6, 3, 4] = numpy.sum(
        x97 * (x20 * x784 + x20 * x785 + x69 * x98 * (x802 + x803))
    )
    result[6, 3, 5] = numpy.sum(x93 * (x108 * x801 + x20 * x786 + x20 * x787))
    result[6, 4, 0] = numpy.sum(x97 * (x20 * x790 + x21 * x775 + x806))
    result[6, 4, 1] = numpy.sum(x163 * (x20 * x792 + x21 * x778 + x808))
    result[6, 4, 2] = numpy.sum(x163 * (x20 * x794 + x21 * x780 + x810))
    result[6, 4, 3] = numpy.sum(x97 * (x20 * x796 + x21 * x782 + x811))
    result[6, 4, 4] = numpy.sum(x163 * (x20 * x798 + x21 * x784 + x812))
    result[6, 4, 5] = numpy.sum(x97 * (x20 * x800 + x21 * x786 + x813))
    result[6, 5, 0] = numpy.sum(x93 * (x21 * x790 + x816))
    result[6, 5, 1] = numpy.sum(x97 * (x21 * x792 + x820))
    result[6, 5, 2] = numpy.sum(x97 * (x21 * x794 + x823))
    result[6, 5, 3] = numpy.sum(x93 * (x21 * x796 + x825))
    result[6, 5, 4] = numpy.sum(x97 * (x21 * x798 + x828))
    result[6, 5, 5] = numpy.sum(x93 * (x21 * x800 + x830))
    result[7, 0, 0] = numpy.sum(x364 * (x0 * x589 + x0 * (x0 * x831 + x589) + x452))
    result[7, 0, 1] = numpy.sum(x367 * (x0 * x593 + x0 * (x592 * x832 + x593) + x457))
    result[7, 0, 2] = numpy.sum(x367 * (x0 * x596 + x0 * (x595 * x832 + x596) + x462))
    result[7, 0, 3] = numpy.sum(x364 * (x0 * x598 + x0 * (x598 + x81 * x833) + x464))
    result[7, 0, 4] = numpy.sum(x367 * (x0 * x600 + x0 * (x600 + x81 * x835) + x467))
    result[7, 0, 5] = numpy.sum(x364 * (x0 * x602 + x0 * (x602 + x81 * x836) + x469))
    result[7, 1, 0] = numpy.sum(x367 * (x0 * x837 + x691))
    result[7, 1, 1] = numpy.sum(x383 * (x0 * x839 + x692))
    result[7, 1, 2] = numpy.sum(x383 * (x0 * x840 + x693))
    result[7, 1, 3] = numpy.sum(x367 * (x0 * x841 + x694))
    result[7, 1, 4] = numpy.sum(x383 * (x0 * x842 + x695))
    result[7, 1, 5] = numpy.sum(x367 * (x0 * x843 + x696))
    result[7, 2, 0] = numpy.sum(x367 * (x0 * x845 + x648))
    result[7, 2, 1] = numpy.sum(x383 * (x0 * x848 + x652))
    result[7, 2, 2] = numpy.sum(x383 * (x0 * x850 + x656))
    result[7, 2, 3] = numpy.sum(x367 * (x0 * x852 + x658))
    result[7, 2, 4] = numpy.sum(x383 * (x0 * x854 + x660))
    result[7, 2, 5] = numpy.sum(x367 * (x0 * x856 + x662))
    result[7, 3, 0] = numpy.sum(x364 * (x20 * x788 + x20 * x837 + x806))
    result[7, 3, 1] = numpy.sum(x367 * (x20 * x791 + x20 * x839 + x808))
    result[7, 3, 2] = numpy.sum(x367 * (x20 * x793 + x20 * x840 + x810))
    result[7, 3, 3] = numpy.sum(x364 * (x20 * x795 + x20 * x841 + x811))
    result[7, 3, 4] = numpy.sum(x367 * (x20 * x797 + x20 * x842 + x812))
    result[7, 3, 5] = numpy.sum(x364 * (x20 * x799 + x20 * x843 + x813))
    result[7, 4, 0] = numpy.sum(x367 * (x20 * x845 + x816))
    result[7, 4, 1] = numpy.sum(x383 * (x20 * x848 + x820))
    result[7, 4, 2] = numpy.sum(x383 * (x20 * x850 + x823))
    result[7, 4, 3] = numpy.sum(x367 * (x20 * x852 + x825))
    result[7, 4, 4] = numpy.sum(x383 * (x20 * x854 + x828))
    result[7, 4, 5] = numpy.sum(x367 * (x20 * x856 + x830))
    result[7, 5, 0] = numpy.sum(x364 * (x21 * x845 + x859))
    result[7, 5, 1] = numpy.sum(x367 * (x21 * x848 + x862))
    result[7, 5, 2] = numpy.sum(x367 * (x21 * x850 + x865))
    result[7, 5, 3] = numpy.sum(x364 * (x21 * x852 + x867))
    result[7, 5, 4] = numpy.sum(x367 * (x21 * x854 + x869))
    result[7, 5, 5] = numpy.sum(x364 * (x21 * x856 + x871))
    result[8, 0, 0] = numpy.sum(x364 * (x0 * x677 + x0 * (x0 * x872 + x677) + x482))
    result[8, 0, 1] = numpy.sum(x367 * (x0 * x680 + x0 * (x679 * x832 + x680) + x487))
    result[8, 0, 2] = numpy.sum(x367 * (x0 * x683 + x0 * (x682 * x832 + x683) + x492))
    result[8, 0, 3] = numpy.sum(x364 * (x0 * x685 + x0 * (x685 + x81 * x873) + x494))
    result[8, 0, 4] = numpy.sum(x367 * (x0 * x687 + x0 * (x687 + x81 * x874) + x496))
    result[8, 0, 5] = numpy.sum(x364 * (x0 * x689 + x0 * (x689 + x81 * x875) + x498))
    result[8, 1, 0] = numpy.sum(x367 * (x0 * x876 + x747))
    result[8, 1, 1] = numpy.sum(x383 * (x0 * x877 + x748))
    result[8, 1, 2] = numpy.sum(x383 * (x0 * x878 + x749))
    result[8, 1, 3] = numpy.sum(x367 * (x0 * x879 + x750))
    result[8, 1, 4] = numpy.sum(x383 * (x0 * x880 + x751))
    result[8, 1, 5] = numpy.sum(x367 * (x0 * x881 + x752))
    result[8, 2, 0] = numpy.sum(x367 * (x0 * x883 + x702))
    result[8, 2, 1] = numpy.sum(x383 * (x0 * x885 + x706))
    result[8, 2, 2] = numpy.sum(x383 * (x0 * x887 + x710))
    result[8, 2, 3] = numpy.sum(x367 * (x0 * x889 + x712))
    result[8, 2, 4] = numpy.sum(x383 * (x0 * x891 + x714))
    result[8, 2, 5] = numpy.sum(x367 * (x0 * x893 + x716))
    result[8, 3, 0] = numpy.sum(x364 * (x20 * x844 + x20 * x876 + x815))
    result[8, 3, 1] = numpy.sum(x367 * (x20 * x846 + x20 * x877 + x819))
    result[8, 3, 2] = numpy.sum(x367 * (x20 * x849 + x20 * x878 + x822))
    result[8, 3, 3] = numpy.sum(x364 * (x20 * x851 + x20 * x879 + x824))
    result[8, 3, 4] = numpy.sum(x367 * (x20 * x853 + x20 * x880 + x827))
    result[8, 3, 5] = numpy.sum(x364 * (x20 * x855 + x20 * x881 + x829))
    result[8, 4, 0] = numpy.sum(x367 * (x20 * x883 + x859))
    result[8, 4, 1] = numpy.sum(x383 * (x20 * x885 + x862))
    result[8, 4, 2] = numpy.sum(x383 * (x20 * x887 + x865))
    result[8, 4, 3] = numpy.sum(x367 * (x20 * x889 + x867))
    result[8, 4, 4] = numpy.sum(x383 * (x20 * x891 + x869))
    result[8, 4, 5] = numpy.sum(x367 * (x20 * x893 + x871))
    result[8, 5, 0] = numpy.sum(x364 * (x21 * x883 + x895))
    result[8, 5, 1] = numpy.sum(x367 * (x21 * x885 + x897))
    result[8, 5, 2] = numpy.sum(x367 * (x21 * x887 + x899))
    result[8, 5, 3] = numpy.sum(x364 * (x21 * x889 + x900))
    result[8, 5, 4] = numpy.sum(x367 * (x21 * x891 + x901))
    result[8, 5, 5] = numpy.sum(x364 * (x21 * x893 + x902))
    result[9, 0, 0] = numpy.sum(x93 * (x0 * x732 + x0 * (x732 + x768 * x903) + x551))
    result[9, 0, 1] = numpy.sum(x97 * (x0 * x735 + x0 * (x735 + x903 * x904) + x553))
    result[9, 0, 2] = numpy.sum(x97 * (x0 * x739 + x0 * (x737 * x832 + x739) + x557))
    result[9, 0, 3] = numpy.sum(x93 * (x0 * x741 + x0 * (x102 * x903 + x741) + x559))
    result[9, 0, 4] = numpy.sum(x97 * (x0 * x743 + x0 * (x0 * x905 + x743) + x561))
    result[9, 0, 5] = numpy.sum(x93 * (x0 * x745 + x0 * (x745 + x81 * x906) + x563))
    result[9, 1, 0] = numpy.sum(x97 * (x0 * x908 + x20 * x732 + x701))
    result[9, 1, 1] = numpy.sum(x163 * (x0 * x909 + x20 * x735 + x705))
    result[9, 1, 2] = numpy.sum(x163 * (x0 * x910 + x20 * x739 + x709))
    result[9, 1, 3] = numpy.sum(x97 * (x0 * x911 + x20 * x741 + x711))
    result[9, 1, 4] = numpy.sum(x163 * (x0 * x912 + x20 * x743 + x713))
    result[9, 1, 5] = numpy.sum(x97 * (x0 * x913 + x20 * x745 + x715))
    result[9, 2, 0] = numpy.sum(x97 * (x0 * x916 + x758))
    result[9, 2, 1] = numpy.sum(x163 * (x0 * x918 + x760))
    result[9, 2, 2] = numpy.sum(x163 * (x0 * x920 + x764))
    result[9, 2, 3] = numpy.sum(x97 * (x0 * x922 + x765))
    result[9, 2, 4] = numpy.sum(x163 * (x0 * x924 + x766))
    result[9, 2, 5] = numpy.sum(x97 * (x0 * x926 + x767))
    result[9, 3, 0] = numpy.sum(x93 * (x20 * x882 + x20 * x908 + x858))
    result[9, 3, 1] = numpy.sum(x97 * (x20 * x884 + x20 * x909 + x861))
    result[9, 3, 2] = numpy.sum(x97 * (x20 * x886 + x20 * x910 + x864))
    result[9, 3, 3] = numpy.sum(x93 * (x20 * x888 + x20 * x911 + x866))
    result[9, 3, 4] = numpy.sum(x97 * (x20 * x890 + x20 * x912 + x868))
    result[9, 3, 5] = numpy.sum(x93 * (x20 * x892 + x20 * x913 + x870))
    result[9, 4, 0] = numpy.sum(x97 * (x20 * x916 + x895))
    result[9, 4, 1] = numpy.sum(x163 * (x20 * x918 + x897))
    result[9, 4, 2] = numpy.sum(x163 * (x20 * x920 + x899))
    result[9, 4, 3] = numpy.sum(x97 * (x20 * x922 + x900))
    result[9, 4, 4] = numpy.sum(x163 * (x20 * x924 + x901))
    result[9, 4, 5] = numpy.sum(x97 * (x20 * x926 + x902))
    result[9, 5, 0] = numpy.sum(x93 * (x21 * x914 + x21 * x916 + x768 * x927))
    result[9, 5, 1] = numpy.sum(x97 * (x21 * x917 + x21 * x918 + x904 * x927))
    result[9, 5, 2] = numpy.sum(x97 * (x21 * x919 + x21 * x920 + x770 * x928))
    result[9, 5, 3] = numpy.sum(x93 * (x102 * x927 + x21 * x921 + x21 * x922))
    result[9, 5, 4] = numpy.sum(x97 * (x105 * x928 + x21 * x923 + x21 * x924))
    result[9, 5, 5] = numpy.sum(
        x93 * (x21 * x925 + x21 * x926 + x69 * (5.0 * x762 + x928 * x98))
    )
    return result


def int3c2e3d_sph_323(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fd|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 6, 10), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(4, x17)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = x19 * x2 * x22
    x24 = 2.0 * x14 ** (-1.5) * x23
    x25 = x18 * x24
    x26 = cx ** (-1.0)
    x27 = x14 ** (-0.5)
    x28 = boys(3, x17)
    x29 = 2.0 * x19 * x2 * x22 * x26 * x27 * x28 - x25
    x30 = x29 * x6
    x31 = -2.0 * x19 * x2 * x22 * x26 * x27 * x28 * x5 + x25 * x4
    x32 = -x31
    x33 = boys(5, x17)
    x34 = x24 * x33
    x35 = -2.0 * x18 * x19 * x2 * x22 * x26 * x27 * x5 + x34 * x4
    x36 = -x35
    x37 = x16 * x36
    x38 = x37 * x4
    x39 = x30 + x32 * x5 - x38
    x40 = -x31 - x37
    x41 = 2.0 * x6
    x42 = 2.0 * x18 * x19 * x2 * x22 * x26 * x27 - x34
    x43 = x42 * x6
    x44 = boys(6, x17)
    x45 = x24 * x44
    x46 = -2.0 * x19 * x2 * x22 * x26 * x27 * x33 * x5 + x4 * x45
    x47 = -x46
    x48 = x16 * x47
    x49 = x4 * x48
    x50 = x36 * x5 + x43 - x49
    x51 = x16 * x50
    x52 = x4 * x51
    x53 = x39 * x5 + x40 * x41 - x52
    x54 = -x29 * x6
    x55 = 3.0 * x6
    x56 = x6 * (2.0 * x19 * x2 * x22 * x26 * x27 * x33 - x45)
    x57 = boys(7, x17)
    x58 = x24 * x57
    x59 = 2.0 * x19 * x2 * x22 * x26 * x27 * x44 * x5 - x4 * x58
    x60 = x16 * x59
    x61 = -x4 * x60 + x47 * x5 + x56
    x62 = x16 * x61
    x63 = -x4 * x62 - x41 * (x35 + x48) + x5 * x50
    x64 = x16 * x63
    x65 = -x4 * x64 + x5 * x53 - x55 * (-x32 * x5 + x38 + x51 + x54)
    x66 = x4 * x65
    x67 = x53 * x6
    x68 = 4.0 * x67
    x69 = x66 + x68
    x70 = x1 * x15
    x71 = x4 * x70
    x72 = x4 * x53
    x73 = x39 * x6
    x74 = 3.0 * x73
    x75 = x72 + x74
    x76 = 4.0 * x6
    x77 = x70 * x76
    x78 = x69 * x71 + x75 * x77
    x79 = x39 * x4
    x80 = x32 * x6
    x81 = 2.0 * x80
    x82 = x79 + x81
    x83 = x55 * x70
    x84 = x71 * x75 + x82 * x83
    x85 = x70 * (x71 * x78 + x77 * x84)
    x86 = x23 * x26 * x27 * x28 * x41
    x87 = x41 * x70
    x88 = x71 * x84 + x83 * (x71 * x82 + x87 * (x32 * x4 + x86))
    x89 = x0 * x70
    x90 = -x42 * x6
    x91 = x6 * (2.0 * x19 * x2 * x22 * x26 * x27 * x44 - x58)
    x92 = x24 * boys(8, x17)
    x93 = x16 * x4
    x94 = (
        x5 * x65
        + x76 * (x39 * x5 + 2.0 * x40 * x6 - x52 - x64)
        - x93
        * (
            x5 * x63
            - x55 * (-x36 * x5 + x49 + x62 + x90)
            + x93
            * (
                x41 * (x46 + x60)
                - x5 * x61
                + x93
                * (
                    x5 * x59
                    + x91
                    - x93 * (2.0 * x19 * x2 * x22 * x26 * x27 * x5 * x57 - x4 * x92)
                )
            )
        )
    )
    x95 = x4 * x94
    x96 = x6 * x65
    x97 = 5.0 * x96
    x98 = x6 * x70
    x99 = 5.0 * x98
    x100 = 1.732050807568877
    x101 = da * db * dc
    x102 = 0.02222222222222222 * x101
    x103 = x100 * x102
    x104 = x70 * x9
    x105 = x104 * (x66 + x68)
    x106 = x104 * (x72 + x74)
    x107 = x70 * (x105 * x71 + x106 * x77)
    x108 = x104 * x83 * (x79 + x81) + x106 * x71
    x109 = 3.872983346207417
    x110 = x102 * x109
    x111 = x12 * x70
    x112 = x111 * (x66 + x68)
    x113 = x111 * (x72 + x74)
    x114 = x70 * (x112 * x71 + x113 * x77)
    x115 = x111 * x83 * (x79 + x81) + x113 * x71
    x116 = x1**2 / x14**2
    x117 = x10 * x116
    x118 = x117 * x70 * (x66 + x68)
    x119 = x117 * (x72 + x74)
    x120 = x116 * x9
    x121 = x12 * x120
    x122 = x121 * x70 * (x66 + x68)
    x123 = x121 * (x72 + x74)
    x124 = 0.06666666666666667 * x101
    x125 = 2.23606797749979 * x124
    x126 = x116 * x13
    x127 = x126 * x70 * (x66 + x68)
    x128 = x126 * (x72 + x74)
    x129 = x1**3 / x14**3
    x130 = x129 * x9**3
    x131 = x130 * x65
    x132 = x0 * x53
    x133 = x10 * x129
    x134 = x12 * x133
    x135 = x134 * x65
    x136 = x129 * x13
    x137 = x136 * x9
    x138 = x137 * x65
    x139 = x12**3 * x129
    x140 = x139 * x65
    x141 = -x8 - A[1]
    x142 = -2.0 * x141 * x18 * x19 * x2 * x22 * x26 * x27 + x34 * x9
    x143 = -x142
    x144 = x143 * x16
    x145 = -2.0 * x141 * x19 * x2 * x22 * x26 * x27 * x28 + x25 * x9
    x146 = -x144 - x145
    x147 = x146 * x6
    x148 = -x145
    x149 = x144 * x4 - x148 * x5
    x150 = -x149
    x151 = -2.0 * x141 * x19 * x2 * x22 * x26 * x27 * x33 + x45 * x9
    x152 = -x151
    x153 = x152 * x16
    x154 = -x143 * x5 + x153 * x4
    x155 = -x154
    x156 = x155 * x16
    x157 = x156 * x4
    x158 = x147 + x150 * x5 - x157
    x159 = -x6 * (x142 + x153)
    x160 = 2.0 * x141 * x19 * x2 * x22 * x26 * x27 * x44 - x58 * x9
    x161 = x16 * x160
    x162 = x152 * x5 - x161 * x4
    x163 = x16 * x162
    x164 = x155 * x5 + x159 - x163 * x4
    x165 = x16 * x164
    x166 = x158 * x5 - x165 * x4 - x41 * (x149 + x156)
    x167 = x166 * x4
    x168 = x158 * x6
    x169 = 3.0 * x168
    x170 = x167 + x169
    x171 = x158 * x4
    x172 = x150 * x6
    x173 = 2.0 * x172
    x174 = x171 + x173
    x175 = x170 * x71 + x174 * x83
    x176 = x148 * x6
    x177 = x150 * x4
    x178 = x176 + x177
    x179 = x174 * x71 + x178 * x87
    x180 = x70 * (x175 * x71 + x179 * x83)
    x181 = x20 * x70
    x182 = x180 + x181 * x88
    x183 = -x6 * (x151 + x161)
    x184 = 2.0 * x141 * x19 * x2 * x22 * x26 * x27 * x57 - x9 * x92
    x185 = (
        x166 * x5
        + x55 * (x146 * x6 + x150 * x5 - x157 - x165)
        + x93
        * (
            -x164 * x5
            + x41 * (x154 + x163)
            + x93 * (x162 * x5 + x183 - x93 * (x160 * x5 - x184 * x93))
        )
    )
    x186 = x185 * x4
    x187 = x166 * x6
    x188 = 4.0 * x187
    x189 = x70 * (x175 * x77 + x71 * (x170 * x77 + x71 * (x186 + x188)))
    x190 = x166 * x9
    x191 = x190 + x67
    x192 = x158 * x9
    x193 = x192 + x73
    x194 = x191 * x71 + x193 * x83
    x195 = x150 * x9
    x196 = x195 + x80
    x197 = x196 * x87
    x198 = x193 * x71 + x197
    x199 = x70 * (x194 * x71 + x198 * x83)
    x200 = x108 * x181 + x199
    x201 = x185 * x9
    x202 = x201 + x96
    x203 = x70 * (x194 * x77 + x71 * (x191 * x77 + x202 * x71))
    x204 = x111 * (x167 + x169)
    x205 = x111 * x173
    x206 = x111 * x171 + x205
    x207 = x70 * (x204 * x71 + x206 * x83)
    x208 = x115 * x181 + x207
    x209 = x70 * (x111 * x71 * (x186 + x188) + x204 * x77)
    x210 = x104 * (x191 + x67)
    x211 = x104 * (x193 + x73)
    x212 = x70 * (x210 * x71 + x211 * x83)
    x213 = x119 * x181 + x212
    x214 = x104 * (x202 + x96)
    x215 = x70 * (x210 * x77 + x214 * x71)
    x216 = x111 * x67
    x217 = x111 * x190 + x216
    x218 = x111 * x73
    x219 = x111 * x192 + x218
    x220 = x70 * (x217 * x71 + x219 * x83)
    x221 = x123 * x181 + x220
    x222 = x111 * x96
    x223 = x111 * x201 + x222
    x224 = x70 * (x217 * x77 + x223 * x71)
    x225 = x109 * x124
    x226 = x126 * x70 * (x167 + x169)
    x227 = x128 * x181 + x226
    x228 = x126 * x70 * (x186 + x188)
    x229 = x70 * (x104 * x210 + x117 * x67)
    x230 = x20 * x53
    x231 = x130 * x230 + x229
    x232 = x70 * (x104 * x214 + x117 * x96)
    x233 = x70 * (x104 * x217 + x121 * x67)
    x234 = x134 * x230 + x233
    x235 = x70 * (x104 * x223 + x121 * x96)
    x236 = x126 * x67
    x237 = x70 * (x126 * x190 + x236)
    x238 = x137 * x230 + x237
    x239 = x126 * x96
    x240 = x70 * (x126 * x201 + x239)
    x241 = x139 * x166
    x242 = x139 * x230 + x241
    x243 = x139 * x185
    x244 = -x11 - A[2]
    x245 = x12 * x34 - 2.0 * x18 * x19 * x2 * x22 * x244 * x26 * x27
    x246 = -x245
    x247 = x16 * x246
    x248 = x12 * x25 - 2.0 * x19 * x2 * x22 * x244 * x26 * x27 * x28
    x249 = -x247 - x248
    x250 = x249 * x6
    x251 = -x248
    x252 = x247 * x4 - x251 * x5
    x253 = -x252
    x254 = x12 * x45 - 2.0 * x19 * x2 * x22 * x244 * x26 * x27 * x33
    x255 = -x254
    x256 = x16 * x255
    x257 = -x246 * x5 + x256 * x4
    x258 = -x257
    x259 = x16 * x258
    x260 = x259 * x4
    x261 = x250 + x253 * x5 - x260
    x262 = -x6 * (x245 + x256)
    x263 = -x12 * x58 + 2.0 * x19 * x2 * x22 * x244 * x26 * x27 * x44
    x264 = x16 * x263
    x265 = x255 * x5 - x264 * x4
    x266 = x16 * x265
    x267 = x258 * x5 + x262 - x266 * x4
    x268 = x16 * x267
    x269 = x261 * x5 - x268 * x4 - x41 * (x252 + x259)
    x270 = x269 * x4
    x271 = x261 * x6
    x272 = 3.0 * x271
    x273 = x270 + x272
    x274 = x261 * x4
    x275 = x253 * x6
    x276 = 2.0 * x275
    x277 = x274 + x276
    x278 = x273 * x71 + x277 * x83
    x279 = x251 * x6
    x280 = x253 * x4
    x281 = x279 + x280
    x282 = x277 * x71 + x281 * x87
    x283 = x70 * (x278 * x71 + x282 * x83)
    x284 = x21 * x70
    x285 = x283 + x284 * x88
    x286 = -x249 * x6
    x287 = -x6 * (x254 + x264)
    x288 = -x12 * x92 + 2.0 * x19 * x2 * x22 * x244 * x26 * x27 * x57
    x289 = (
        x269 * x5
        - x55 * (-x253 * x5 + x260 + x268 + x286)
        + x93
        * (
            -x267 * x5
            + x41 * (x257 + x266)
            + x93 * (x265 * x5 + x287 - x93 * (x263 * x5 - x288 * x93))
        )
    )
    x290 = x289 * x4
    x291 = x269 * x6
    x292 = 4.0 * x291
    x293 = x70 * (x278 * x77 + x71 * (x273 * x77 + x71 * (x290 + x292)))
    x294 = x104 * (x270 + x272)
    x295 = x104 * (x274 + x276)
    x296 = x70 * (x294 * x71 + x295 * x83)
    x297 = x108 * x284 + x296
    x298 = x70 * (x104 * x71 * (x290 + x292) + x294 * x77)
    x299 = x12 * x269 + x67
    x300 = x12 * x261 + x73
    x301 = x299 * x71 + x300 * x83
    x302 = x12 * x253 + x80
    x303 = x302 * x87
    x304 = x300 * x71 + x303
    x305 = x70 * (x301 * x71 + x304 * x83)
    x306 = x115 * x284 + x305
    x307 = x12 * x289 + x96
    x308 = x70 * (x301 * x77 + x71 * (x299 * x77 + x307 * x71))
    x309 = x117 * x70 * (x270 + x272)
    x310 = x119 * x284 + x309
    x311 = x117 * x70 * (x290 + x292)
    x312 = x120 * x4
    x313 = x120 * x55
    x314 = x70 * (x299 * x312 + x300 * x313)
    x315 = x123 * x284 + x314
    x316 = x70 * (x120 * x299 * x76 + x307 * x312)
    x317 = x111 * x299 + x216
    x318 = x111 * x300 + x218
    x319 = x70 * (x317 * x71 + x318 * x83)
    x320 = x128 * x284 + x319
    x321 = x111 * x307 + x222
    x322 = x70 * (x317 * x77 + x321 * x71)
    x323 = x130 * x269
    x324 = x21 * x53
    x325 = x130 * x324 + x323
    x326 = x130 * x289
    x327 = x133 * x299
    x328 = x134 * x324 + x327
    x329 = x133 * x307
    x330 = x120 * x317
    x331 = x137 * x324 + x330
    x332 = x120 * x321
    x333 = x70 * (x111 * x317 + x236)
    x334 = x139 * x324 + x333
    x335 = x70 * (x111 * x321 + x239)
    x336 = x153 * x9
    x337 = x141 * x143 - x336 + x43
    x338 = x16 * x337
    x339 = x144 * x9
    x340 = x6 * (x141 * x148 - x338 - x339 - x54)
    x341 = x141 * x148 + x30 - x339
    x342 = x338 * x4 - x341 * x5
    x343 = -x342
    x344 = x141 * x152 - x161 * x9 + x56
    x345 = x16 * x344
    x346 = x337 * x5 - x345 * x4
    x347 = x16 * x346
    x348 = x340 + x343 * x5 - x347 * x4
    x349 = x6 * (x141 * x143 - x336 - x345 - x90)
    x350 = x16 * x9
    x351 = x141 * x160 - x184 * x350 + x91
    x352 = (
        x348 * x5
        - x41 * (x342 + x347)
        - x93 * (x346 * x5 + x349 - x93 * (x344 * x5 - x351 * x93))
    )
    x353 = x352 * x4
    x354 = x348 * x6
    x355 = 3.0 * x354
    x356 = x348 * x4
    x357 = x343 * x6
    x358 = 2.0 * x357
    x359 = x356 + x358
    x360 = x341 * x6
    x361 = x343 * x4
    x362 = x360 + x361
    x363 = x359 * x71 + x362 * x87
    x364 = x70 * (x363 * x83 + x71 * (x359 * x83 + x71 * (x353 + x355)))
    x365 = x180 * x20 + x364
    x366 = x352 * x9
    x367 = 2.0 * x187
    x368 = x366 + x367
    x369 = x348 * x9
    x370 = 2.0 * x168
    x371 = x369 + x370
    x372 = x371 * x83
    x373 = x343 * x9
    x374 = x173 + x373
    x375 = x371 * x71 + x374 * x87
    x376 = x70 * (x375 * x83 + x71 * (x368 * x71 + x372))
    x377 = x199 * x20 + x376
    x378 = x111 * x355
    x379 = x111 * (x356 + x358)
    x380 = x70 * (x379 * x83 + x71 * (x111 * x353 + x378))
    x381 = x20 * x207 + x380
    x382 = x104 * x368 + x191 * x87
    x383 = x104 * x371 + x193 * x87
    x384 = x383 * x83
    x385 = x70 * (x382 * x71 + x384)
    x386 = x20 * x212 + x385
    x387 = x111 * (x366 + x367)
    x388 = x111 * (x369 + x370)
    x389 = x388 * x83
    x390 = x70 * (x387 * x71 + x389)
    x391 = x20 * x220 + x390
    x392 = x126 * x355
    x393 = x70 * (x126 * x353 + x392)
    x394 = x20 * x226 + x393
    x395 = x70 * (x104 * x382 + x210 * x87)
    x396 = x20 * x229 + x395
    x397 = x70 * (x104 * x387 + x217 * x87)
    x398 = x20 * x233 + x397
    x399 = x126 * x70 * (x366 + x367)
    x400 = x20 * x237 + x399
    x401 = x139 * x352
    x402 = x20 * x241 + x401
    x403 = -x141 * x246 + x256 * x9
    x404 = -x403
    x405 = x16 * x404
    x406 = -x141 * x251 + x247 * x9
    x407 = -x6 * (x405 + x406)
    x408 = -x406
    x409 = x4 * x405 - x408 * x5
    x410 = -x409
    x411 = x141 * x255 - x264 * x9
    x412 = x16 * x411
    x413 = -x4 * x412 + x404 * x5
    x414 = x16 * x413
    x415 = -x4 * x414 + x407 + x410 * x5
    x416 = -x6 * (x403 + x412)
    x417 = x141 * x263 - x288 * x350
    x418 = (
        -x41 * (x409 + x414)
        + x415 * x5
        - x93 * (x413 * x5 + x416 - x93 * (x411 * x5 - x417 * x93))
    )
    x419 = x41 * x410
    x420 = x4 * x415 + x419
    x421 = x408 * x6
    x422 = x4 * x410 + x421
    x423 = x420 * x71 + x422 * x87
    x424 = x70 * (x423 * x83 + x71 * (x420 * x83 + x71 * (x4 * x418 + x415 * x55)))
    x425 = x180 * x21 + x424
    x426 = x291 + x418 * x9
    x427 = x271 + x415 * x9
    x428 = x275 + x410 * x9
    x429 = x428 * x87
    x430 = x427 * x71 + x429
    x431 = x70 * (x430 * x83 + x71 * (x426 * x71 + x427 * x83))
    x432 = x199 * x21 + x431
    x433 = x12 * x418 + x187
    x434 = x12 * x415 + x168
    x435 = x12 * x410 + x172
    x436 = x435 * x87
    x437 = x434 * x71 + x436
    x438 = x70 * (x437 * x83 + x71 * (x433 * x71 + x434 * x83))
    x439 = x207 * x21 + x438
    x440 = x104 * (x291 + x426)
    x441 = x104 * (x271 + x427)
    x442 = x70 * (x440 * x71 + x441 * x83)
    x443 = x21 * x212 + x442
    x444 = x104 * x433 + x299 * x98
    x445 = x104 * x434 + x300 * x98
    x446 = x70 * (x444 * x71 + x445 * x83)
    x447 = x21 * x220 + x446
    x448 = x111 * (x187 + x433)
    x449 = x111 * (x168 + x434)
    x450 = x70 * (x448 * x71 + x449 * x83)
    x451 = x21 * x226 + x450
    x452 = x70 * (x104 * x440 + x117 * x291)
    x453 = x21 * x229 + x452
    x454 = x120 * x6
    x455 = x70 * (x104 * x444 + x299 * x454)
    x456 = x21 * x233 + x455
    x457 = x70 * (x104 * x448 + x317 * x98)
    x458 = x21 * x237 + x457
    x459 = x70 * (x111 * x448 + x126 * x187)
    x460 = x21 * x241 + x459
    x461 = x12 * x256
    x462 = x244 * x246 + x43 - x461
    x463 = x16 * x462
    x464 = x12 * x247
    x465 = x6 * (x244 * x251 - x463 - x464 - x54)
    x466 = x244 * x251 + x30 - x464
    x467 = x4 * x463 - x466 * x5
    x468 = -x467
    x469 = -x12 * x264 + x244 * x255 + x56
    x470 = x16 * x469
    x471 = -x4 * x470 + x462 * x5
    x472 = x16 * x471
    x473 = -x4 * x472 + x465 + x468 * x5
    x474 = x6 * (x244 * x246 - x461 - x470 - x90)
    x475 = x12 * x16
    x476 = x244 * x263 - x288 * x475 + x91
    x477 = (
        -x41 * (x467 + x472)
        + x473 * x5
        - x93 * (x471 * x5 + x474 - x93 * (x469 * x5 - x476 * x93))
    )
    x478 = x4 * x477
    x479 = x473 * x6
    x480 = 3.0 * x479
    x481 = x4 * x473
    x482 = x468 * x6
    x483 = 2.0 * x482
    x484 = x481 + x483
    x485 = x466 * x6
    x486 = x4 * x468
    x487 = x485 + x486
    x488 = x484 * x71 + x487 * x87
    x489 = x70 * (x488 * x83 + x71 * (x484 * x83 + x71 * (x478 + x480)))
    x490 = x21 * x283 + x489
    x491 = x104 * (x481 + x483)
    x492 = x70 * (x104 * x71 * (x478 + x480) + x491 * x83)
    x493 = x21 * x296 + x492
    x494 = x12 * x477 + 2.0 * x291
    x495 = x12 * x473 + 2.0 * x271
    x496 = x495 * x83
    x497 = x12 * x468 + x276
    x498 = x495 * x71 + x497 * x87
    x499 = x70 * (x498 * x83 + x71 * (x494 * x71 + x496))
    x500 = x21 * x305 + x499
    x501 = x117 * x70 * (x478 + x480)
    x502 = x21 * x309 + x501
    x503 = x70 * (x312 * x494 + x313 * x495)
    x504 = x21 * x314 + x503
    x505 = x111 * x494 + x299 * x87
    x506 = x111 * x495 + x300 * x87
    x507 = x506 * x83
    x508 = x70 * (x505 * x71 + x507)
    x509 = x21 * x319 + x508
    x510 = x130 * x477
    x511 = x21 * x323 + x510
    x512 = x133 * x494
    x513 = x21 * x327 + x512
    x514 = x120 * x505
    x515 = x21 * x330 + x514
    x516 = x70 * (x111 * x505 + x317 * x87)
    x517 = x21 * x333 + x516
    x518 = x71 * (x179 + x87 * (x176 + x178))
    x519 = x148 * x9 + x86
    x520 = x198 * x71 + x87 * (x196 * x71 + x519 * x98)
    x521 = 0.1111111111111111 * x100 * x101
    x522 = x111 * x176
    x523 = x206 * x71 + x87 * (x111 * x177 + x522)
    x524 = x104 * x87 * (x196 + x80)
    x525 = x211 * x71 + x524
    x526 = x111 * x80
    x527 = x87 * (x111 * x195 + x526)
    x528 = x219 * x71 + x527
    x529 = 0.3333333333333333 * x101
    x530 = x126 * x173
    x531 = x126 * x171 + x530
    x532 = x104 * x211 + x117 * x73
    x533 = x104 * x219 + x121 * x73
    x534 = x126 * x73
    x535 = x126 * x192 + x534
    x536 = x139 * x158
    x537 = x71 * (x360 + x362)
    x538 = x70 * (x363 * x71 + x537 * x87)
    x539 = x181 * x518 + x538
    x540 = x341 * x9
    x541 = 2.0 * x176
    x542 = x540 + x541
    x543 = x374 * x71 + x542 * x98
    x544 = x70 * (x375 * x71 + x543 * x87)
    x545 = x181 * x520 + x544
    x546 = x111 * x360
    x547 = x111 * x361 + x546
    x548 = x70 * (x379 * x71 + x547 * x87)
    x549 = x181 * x523 + x548
    x550 = x104 * x374 + x197
    x551 = x70 * (x383 * x71 + x550 * x87)
    x552 = x181 * x525 + x551
    x553 = x111 * x373 + x205
    x554 = x70 * (x388 * x71 + x553 * x87)
    x555 = x181 * x528 + x554
    x556 = x100 * x529
    x557 = x126 * x70 * (x356 + x358)
    x558 = x181 * x531 + x557
    x559 = x70 * (x104 * x383 + x211 * x87)
    x560 = x181 * x532 + x559
    x561 = x70 * (x104 * x388 + x219 * x87)
    x562 = x181 * x533 + x561
    x563 = x126 * x70 * (x369 + x370)
    x564 = x181 * x535 + x563
    x565 = x139 * x348
    x566 = x20 * x536 + x565
    x567 = x71 * (x421 + x422)
    x568 = x70 * (x423 * x71 + x567 * x87)
    x569 = x284 * x518 + x568
    x570 = x279 + x408 * x9
    x571 = x428 * x71 + x570 * x98
    x572 = x70 * (x430 * x71 + x571 * x87)
    x573 = x284 * x520 + x572
    x574 = x12 * x408 + x176
    x575 = x435 * x71 + x574 * x98
    x576 = x70 * (x437 * x71 + x575 * x87)
    x577 = x284 * x523 + x576
    x578 = x104 * (x275 + x428)
    x579 = x578 * x87
    x580 = x70 * (x441 * x71 + x579)
    x581 = x284 * x525 + x580
    x582 = x104 * x435 + x302 * x98
    x583 = x582 * x87
    x584 = x70 * (x445 * x71 + x583)
    x585 = x284 * x528 + x584
    x586 = x111 * (x172 + x435)
    x587 = x586 * x87
    x588 = x70 * (x449 * x71 + x587)
    x589 = x284 * x531 + x588
    x590 = x70 * (x104 * x441 + x117 * x271)
    x591 = x284 * x532 + x590
    x592 = x70 * (x104 * x445 + x300 * x454)
    x593 = x284 * x533 + x592
    x594 = x70 * (x104 * x449 + x318 * x98)
    x595 = x284 * x535 + x594
    x596 = x70 * (x111 * x449 + x126 * x168)
    x597 = x21 * x536 + x596
    x598 = x141 * x337 + 2.0 * x159 - x345 * x9
    x599 = x16 * x598
    x600 = x338 * x9
    x601 = x6 * (x141 * x341 + 2.0 * x146 * x6 - x599 - x600)
    x602 = x141 * x341 + 2.0 * x147 - x600
    x603 = -x4 * x599 + x5 * x602
    x604 = x141 * x344 + 2.0 * x183 - x350 * x351
    x605 = x5 * x603 + x601 - x93 * (x5 * x598 - x604 * x93)
    x606 = x4 * x605
    x607 = x6 * x603
    x608 = 2.0 * x607
    x609 = x6 * x602
    x610 = x4 * x603
    x611 = x609 + x610
    x612 = x71 * (x609 + x611)
    x613 = x70 * (x612 * x87 + x71 * (x611 * x87 + x71 * (x606 + x608)))
    x614 = x20 * x538 + x613
    x615 = x605 * x9
    x616 = x355 + x615
    x617 = x603 * x9
    x618 = 3.0 * x357
    x619 = x617 + x618
    x620 = x602 * x9
    x621 = 3.0 * x360
    x622 = x620 + x621
    x623 = x619 * x71 + x622 * x98
    x624 = x70 * (x623 * x87 + x71 * (x616 * x71 + x619 * x87))
    x625 = x20 * x544 + x624
    x626 = x111 * x609
    x627 = x111 * x610 + x626
    x628 = x70 * (x111 * x71 * (x606 + x608) + x627 * x87)
    x629 = x20 * x548 + x628
    x630 = x104 * x616 + x372
    x631 = x104 * x619 + x374 * x83
    x632 = x70 * (x630 * x71 + x631 * x87)
    x633 = x20 * x551 + x632
    x634 = x111 * x615 + x378
    x635 = x111 * (x617 + x618)
    x636 = x70 * (x634 * x71 + x635 * x87)
    x637 = x20 * x554 + x636
    x638 = x126 * x70 * (x606 + x608)
    x639 = x20 * x557 + x638
    x640 = x70 * (x104 * x630 + x384)
    x641 = x20 * x559 + x640
    x642 = x70 * (x104 * x634 + x389)
    x643 = x20 * x561 + x642
    x644 = x70 * (x126 * x615 + x392)
    x645 = x20 * x563 + x644
    x646 = x139 * x605
    x647 = x20 * x565 + x646
    x648 = x141 * x404 + x262 - x412 * x9
    x649 = x16 * x648
    x650 = x405 * x9
    x651 = x6 * (x141 * x408 - x286 - x649 - x650)
    x652 = x141 * x408 + x250 - x650
    x653 = -x4 * x649 + x5 * x652
    x654 = x141 * x411 + x287 - x350 * x417
    x655 = x5 * x653 + x651 - x93 * (x5 * x648 - x654 * x93)
    x656 = x41 * x653
    x657 = x6 * x652
    x658 = x4 * x653 + x657
    x659 = x71 * (x657 + x658)
    x660 = x70 * (x659 * x87 + x71 * (x658 * x87 + x71 * (x4 * x655 + x656)))
    x661 = x21 * x538 + x660
    x662 = x41 * x415
    x663 = x655 * x9 + x662
    x664 = x419 + x653 * x9
    x665 = 2.0 * x421
    x666 = x652 * x9 + x665
    x667 = x664 * x71 + x666 * x98
    x668 = x70 * (x667 * x87 + x71 * (x663 * x71 + x664 * x87))
    x669 = x21 * x544 + x668
    x670 = x12 * x655 + x354
    x671 = x12 * x653 + x357
    x672 = x671 * x87
    x673 = x12 * x652 + x360
    x674 = x671 * x71 + x673 * x98
    x675 = x70 * (x674 * x87 + x71 * (x670 * x71 + x672))
    x676 = x21 * x548 + x675
    x677 = x104 * x663 + x427 * x87
    x678 = x104 * x664 + x429
    x679 = x70 * (x677 * x71 + x678 * x87)
    x680 = x21 * x551 + x679
    x681 = x434 * x87
    x682 = x104 * x670 + x681
    x683 = x104 * x671 + x436
    x684 = x70 * (x682 * x71 + x683 * x87)
    x685 = x21 * x554 + x684
    x686 = x111 * (x354 + x670)
    x687 = x111 * (x357 + x671)
    x688 = x687 * x87
    x689 = x70 * (x686 * x71 + x688)
    x690 = x21 * x557 + x689
    x691 = x70 * (x104 * x677 + x441 * x87)
    x692 = x21 * x559 + x691
    x693 = x70 * (x104 * x682 + x445 * x87)
    x694 = x21 * x561 + x693
    x695 = x449 * x87
    x696 = x70 * (x104 * x686 + x695)
    x697 = x21 * x563 + x696
    x698 = x70 * (x111 * x686 + x126 * x354)
    x699 = x21 * x565 + x698
    x700 = x141 * x462 - x470 * x9
    x701 = x16 * x700
    x702 = -x141 * x466 + x463 * x9
    x703 = -x6 * (x701 + x702)
    x704 = -x702
    x705 = -x4 * x701 + x5 * x704
    x706 = x141 * x469 - x350 * x476
    x707 = x5 * x705 + x703 - x93 * (x5 * x700 - x706 * x93)
    x708 = x41 * x705
    x709 = x6 * x704
    x710 = x4 * x705 + x709
    x711 = x71 * (x709 + x710)
    x712 = x70 * (x71 * (x71 * (x4 * x707 + x708) + x710 * x87) + x711 * x87)
    x713 = x21 * x568 + x712
    x714 = x479 + x707 * x9
    x715 = x482 + x705 * x9
    x716 = x715 * x87
    x717 = x485 + x704 * x9
    x718 = x71 * x715 + x717 * x98
    x719 = x70 * (x71 * (x71 * x714 + x716) + x718 * x87)
    x720 = x21 * x572 + x719
    x721 = x12 * x707 + x662
    x722 = x12 * x705 + x419
    x723 = x722 * x87
    x724 = x12 * x704 + x665
    x725 = x71 * x722 + x724 * x98
    x726 = x70 * (x71 * (x71 * x721 + x723) + x725 * x87)
    x727 = x21 * x576 + x726
    x728 = x104 * (x479 + x714)
    x729 = x104 * (x482 + x715)
    x730 = x729 * x87
    x731 = x70 * (x71 * x728 + x730)
    x732 = x21 * x580 + x731
    x733 = x104 * x721 + x495 * x98
    x734 = x104 * x722 + x497 * x98
    x735 = x734 * x87
    x736 = x70 * (x71 * x733 + x735)
    x737 = x21 * x584 + x736
    x738 = x111 * x721 + x681
    x739 = x111 * x722 + x436
    x740 = x739 * x87
    x741 = x70 * (x71 * x738 + x740)
    x742 = x21 * x588 + x741
    x743 = x70 * (x104 * x728 + x117 * x479)
    x744 = x21 * x590 + x743
    x745 = x70 * (x104 * x733 + x454 * x495)
    x746 = x21 * x592 + x745
    x747 = x70 * (x104 * x738 + x506 * x98)
    x748 = x21 * x594 + x747
    x749 = x70 * (x111 * x738 + x695)
    x750 = x21 * x596 + x749
    x751 = x71 * (x282 + x87 * (x279 + x281))
    x752 = x104 * x279
    x753 = x295 * x71 + x87 * (x104 * x280 + x752)
    x754 = x12 * x251 + x86
    x755 = x754 * x98
    x756 = x304 * x71 + x87 * (x302 * x71 + x755)
    x757 = x117 * (x274 + x276)
    x758 = x120 * x41
    x759 = x300 * x312 + x302 * x758
    x760 = x111 * x302 + x526
    x761 = x760 * x87
    x762 = x318 * x71 + x761
    x763 = x130 * x261
    x764 = x133 * x300
    x765 = x120 * x318
    x766 = x111 * x318 + x534
    x767 = x181 * x751 + x568
    x768 = x181 * x753 + x572
    x769 = x181 * x756 + x576
    x770 = x181 * x757 + x580
    x771 = x181 * x759 + x584
    x772 = x181 * x762 + x588
    x773 = x20 * x763 + x590
    x774 = x20 * x764 + x592
    x775 = x20 * x765 + x594
    x776 = x181 * x766 + x596
    x777 = x71 * (x485 + x487)
    x778 = x70 * (x488 * x71 + x777 * x87)
    x779 = x284 * x751 + x778
    x780 = x104 * x485
    x781 = x104 * x486 + x780
    x782 = x70 * (x491 * x71 + x781 * x87)
    x783 = x284 * x753 + x782
    x784 = x12 * x466 + 2.0 * x279
    x785 = x784 * x98
    x786 = x497 * x71 + x785
    x787 = x70 * (x498 * x71 + x786 * x87)
    x788 = x284 * x756 + x787
    x789 = x117 * x70 * (x481 + x483)
    x790 = x284 * x757 + x789
    x791 = x70 * (x312 * x495 + x497 * x758)
    x792 = x284 * x759 + x791
    x793 = x111 * x497 + x303
    x794 = x70 * (x506 * x71 + x793 * x87)
    x795 = x284 * x762 + x794
    x796 = x130 * x473
    x797 = x21 * x763 + x796
    x798 = x133 * x495
    x799 = x21 * x764 + x798
    x800 = x120 * x506
    x801 = x21 * x765 + x800
    x802 = x70 * (x111 * x506 + x318 * x87)
    x803 = x284 * x766 + x802
    x804 = x20 * x568 + x660
    x805 = x20 * x572 + x668
    x806 = x20 * x576 + x675
    x807 = x20 * x580 + x679
    x808 = x20 * x584 + x684
    x809 = x20 * x588 + x689
    x810 = x20 * x590 + x691
    x811 = x20 * x592 + x693
    x812 = x20 * x594 + x696
    x813 = x20 * x596 + x698
    x814 = -x12 * x470 + x244 * x462 + 2.0 * x262
    x815 = x16 * x814
    x816 = x12 * x463
    x817 = x6 * (x244 * x466 + 2.0 * x249 * x6 - x815 - x816)
    x818 = x244 * x466 + 2.0 * x250 - x816
    x819 = -x4 * x815 + x5 * x818
    x820 = x244 * x469 + 2.0 * x287 - x475 * x476
    x821 = x5 * x819 + x817 - x93 * (x5 * x814 - x820 * x93)
    x822 = x4 * x821
    x823 = x6 * x819
    x824 = 2.0 * x823
    x825 = x6 * x818
    x826 = x4 * x819
    x827 = x825 + x826
    x828 = x71 * (x825 + x827)
    x829 = x70 * (x71 * (x71 * (x822 + x824) + x827 * x87) + x828 * x87)
    x830 = x21 * x778 + x829
    x831 = x104 * x825
    x832 = x104 * x826 + x831
    x833 = x70 * (x104 * x71 * (x822 + x824) + x832 * x87)
    x834 = x21 * x782 + x833
    x835 = x12 * x821 + x480
    x836 = x12 * x819 + 3.0 * x482
    x837 = x12 * x818 + 3.0 * x485
    x838 = x837 * x98
    x839 = x71 * x836 + x838
    x840 = x70 * (x71 * (x71 * x835 + x836 * x87) + x839 * x87)
    x841 = x21 * x787 + x840
    x842 = x117 * x70 * (x822 + x824)
    x843 = x21 * x789 + x842
    x844 = x70 * (x312 * x835 + x758 * x836)
    x845 = x21 * x791 + x844
    x846 = x111 * x835 + x496
    x847 = x111 * x836 + x497 * x83
    x848 = x70 * (x71 * x846 + x847 * x87)
    x849 = x21 * x794 + x848
    x850 = x130 * x821
    x851 = x21 * x796 + x850
    x852 = x133 * x835
    x853 = x21 * x798 + x852
    x854 = x120 * x846
    x855 = x21 * x800 + x854
    x856 = x70 * (x111 * x846 + x507)
    x857 = x21 * x802 + x856
    x858 = x116 * x7
    x859 = x360 * x858 + x537 * x71
    x860 = x116 * x4
    x861 = x6 * x860
    x862 = x542 * x861 + x543 * x71
    x863 = x12 * x860
    x864 = x360 * x863 + x547 * x71
    x865 = x104 * x542 + x519 * x87
    x866 = x550 * x71 + x865 * x98
    x867 = x111 * (x540 + x541)
    x868 = x553 * x71 + x867 * x98
    x869 = x126 * x360
    x870 = x126 * x361 + x869
    x871 = x104 * x550 + x524
    x872 = x104 * x553 + x527
    x873 = x126 * x373 + x530
    x874 = x139 * x343
    x875 = x70 * (x609 * x858 + x612 * x71)
    x876 = x181 * x859 + x875
    x877 = x70 * (x622 * x861 + x623 * x71)
    x878 = x181 * x862 + x877
    x879 = x70 * (x609 * x863 + x627 * x71)
    x880 = x181 * x864 + x879
    x881 = x104 * x622 + x542 * x83
    x882 = x70 * (x631 * x71 + x881 * x98)
    x883 = x181 * x866 + x882
    x884 = x111 * (x620 + x621)
    x885 = x70 * (x635 * x71 + x884 * x98)
    x886 = x181 * x868 + x885
    x887 = x126 * x609
    x888 = x70 * (x126 * x610 + x887)
    x889 = x181 * x870 + x888
    x890 = x70 * (x104 * x631 + x550 * x83)
    x891 = x181 * x871 + x890
    x892 = x70 * (x104 * x635 + x553 * x83)
    x893 = x181 * x872 + x892
    x894 = x126 * x70 * (x617 + x618)
    x895 = x181 * x873 + x894
    x896 = x139 * x603
    x897 = x20 * x874 + x896
    x898 = x70 * (x657 * x858 + x659 * x71)
    x899 = x284 * x859 + x898
    x900 = x70 * (x666 * x861 + x667 * x71)
    x901 = x284 * x862 + x900
    x902 = x70 * (x673 * x861 + x674 * x71)
    x903 = x284 * x864 + x902
    x904 = x104 * x666 + x570 * x87
    x905 = x70 * (x678 * x71 + x904 * x98)
    x906 = x284 * x866 + x905
    x907 = x574 * x87
    x908 = x104 * x673 + x907
    x909 = x70 * (x683 * x71 + x908 * x98)
    x910 = x284 * x868 + x909
    x911 = x111 * x673 + x546
    x912 = x70 * (x687 * x71 + x911 * x98)
    x913 = x284 * x870 + x912
    x914 = x70 * (x104 * x678 + x579)
    x915 = x284 * x871 + x914
    x916 = x70 * (x104 * x683 + x583)
    x917 = x284 * x872 + x916
    x918 = x70 * (x104 * x687 + x587)
    x919 = x284 * x873 + x918
    x920 = x70 * (x111 * x687 + x126 * x357)
    x921 = x21 * x874 + x920
    x922 = x141 * x602 + 3.0 * x340 - x599 * x9
    x923 = x6 * x922
    x924 = x141 * x598 + 3.0 * x349 - x350 * x604
    x925 = x5 * x922 - x924 * x93
    x926 = x4 * x925
    x927 = x20 * x875 + x70 * (x71**2 * (2.0 * x923 + x926) + x858 * x923)
    x928 = x9 * x922
    x929 = 4.0 * x609
    x930 = x928 + x929
    x931 = x930 * x98
    x932 = x9 * x925
    x933 = 4.0 * x607
    x934 = x932 + x933
    x935 = x20 * x877 + x70 * (x71 * (x71 * x934 + x931) + x861 * x930)
    x936 = x111 * x923
    x937 = x20 * x879 + x70 * (x71 * (x111 * x926 + x936) + x863 * x923)
    x938 = x104 * x930 + x622 * x77
    x939 = x938 * x98
    x940 = x104 * x934 + x619 * x77
    x941 = x20 * x882 + x70 * (x71 * x940 + x939)
    x942 = x111 * (x928 + x929)
    x943 = x942 * x98
    x944 = x111 * (x932 + x933)
    x945 = x20 * x885 + x70 * (x71 * x944 + x943)
    x946 = x126 * x923
    x947 = x20 * x888 + x70 * (x126 * x926 + x946)
    x948 = x20 * x890 + x70 * (x104 * x940 + x631 * x77)
    x949 = x20 * x892 + x70 * (x104 * x944 + x635 * x77)
    x950 = x126 * x70 * (x932 + x933) + x20 * x894
    x951 = x139 * x925 + x20 * x896
    x952 = x141 * x652 + 2.0 * x407 - x649 * x9
    x953 = x6 * x952
    x954 = x141 * x648 - x350 * x654 + 2.0 * x416
    x955 = x5 * x952 - x93 * x954
    x956 = x70 * (x71**2 * (x4 * x955 + 2.0 * x953) + x858 * x953)
    x957 = x21 * x875 + x956
    x958 = 3.0 * x657 + x9 * x952
    x959 = x55 * x653 + x9 * x955
    x960 = x70 * (x71 * (x71 * x959 + x958 * x98) + x861 * x958)
    x961 = x21 * x877 + x960
    x962 = x12 * x952 + x609
    x963 = x12 * x955 + x607
    x964 = x70 * (x71 * (x71 * x963 + x962 * x98) + x861 * x962)
    x965 = x21 * x879 + x964
    x966 = x104 * x958 + x666 * x83
    x967 = x104 * x959 + x664 * x83
    x968 = x70 * (x71 * x967 + x966 * x98)
    x969 = x21 * x882 + x968
    x970 = x104 * x962 + x673 * x83
    x971 = x104 * x963 + x671 * x83
    x972 = x70 * (x71 * x971 + x970 * x98)
    x973 = x21 * x885 + x972
    x974 = x111 * x962 + x626
    x975 = x111 * (x607 + x963)
    x976 = x70 * (x71 * x975 + x974 * x98)
    x977 = x21 * x888 + x976
    x978 = x70 * (x104 * x967 + x678 * x83)
    x979 = x21 * x890 + x978
    x980 = x70 * (x104 * x971 + x683 * x83)
    x981 = x21 * x892 + x980
    x982 = x70 * (x104 * x975 + x687 * x83)
    x983 = x21 * x894 + x982
    x984 = x70 * (x111 * x975 + x126 * x607)
    x985 = x21 * x896 + x984
    x986 = x141 * x704 + x465 - x701 * x9
    x987 = x6 * x986
    x988 = x141 * x700 - x350 * x706 + x474
    x989 = x5 * x986 - x93 * x988
    x990 = x70 * (x71**2 * (x4 * x989 + 2.0 * x987) + x858 * x987)
    x991 = x21 * x898 + x990
    x992 = 2.0 * x709 + x9 * x986
    x993 = x708 + x9 * x989
    x994 = x70 * (x71 * (x71 * x993 + x98 * x992) + x861 * x992)
    x995 = x21 * x900 + x994
    x996 = x12 * x986 + 2.0 * x657
    x997 = x12 * x989 + x656
    x998 = x70 * (x71 * (x71 * x997 + x98 * x996) + x861 * x996)
    x999 = x21 * x902 + x998
    x1000 = x104 * x992 + x717 * x87
    x1001 = x104 * x993 + x716
    x1002 = x70 * (x1000 * x98 + x1001 * x71)
    x1003 = x1002 + x21 * x905
    x1004 = x104 * x996 + x724 * x87
    x1005 = x104 * x997 + x723
    x1006 = x70 * (x1004 * x98 + x1005 * x71)
    x1007 = x1006 + x21 * x909
    x1008 = x111 * x996 + x673 * x87
    x1009 = x111 * x997 + x672
    x1010 = x70 * (x1008 * x98 + x1009 * x71)
    x1011 = x1010 + x21 * x912
    x1012 = x70 * (x1001 * x104 + x730)
    x1013 = x1012 + x21 * x914
    x1014 = x70 * (x1005 * x104 + x735)
    x1015 = x1014 + x21 * x916
    x1016 = x70 * (x1009 * x104 + x740)
    x1017 = x1016 + x21 * x918
    x1018 = x70 * (x1009 * x111 + x688)
    x1019 = x1018 + x21 * x920
    x1020 = x421 * x858 + x567 * x71
    x1021 = x570 * x861 + x571 * x71
    x1022 = x574 * x861 + x575 * x71
    x1023 = x104 * x570 + x752
    x1024 = x1023 * x98 + x578 * x71
    x1025 = x104 * x574 + x755
    x1026 = x1025 * x98 + x582 * x71
    x1027 = x111 * x574 + x522
    x1028 = x1027 * x98 + x586 * x71
    x1029 = x104 * x578 + x117 * x275
    x1030 = x104 * x582 + x302 * x454
    x1031 = x104 * x586 + x760 * x98
    x1032 = x111 * x586 + x126 * x172
    x1033 = x1020 * x181 + x898
    x1034 = x1021 * x181 + x900
    x1035 = x1022 * x181 + x902
    x1036 = x1024 * x181 + x905
    x1037 = x1026 * x181 + x909
    x1038 = x1028 * x181 + x912
    x1039 = x1029 * x181 + x914
    x1040 = x1030 * x181 + x916
    x1041 = x1031 * x181 + x918
    x1042 = x1032 * x181 + x920
    x1043 = x70 * (x709 * x858 + x71 * x711)
    x1044 = x1020 * x284 + x1043
    x1045 = x70 * (x71 * x718 + x717 * x861)
    x1046 = x1021 * x284 + x1045
    x1047 = x70 * (x71 * x725 + x724 * x861)
    x1048 = x1022 * x284 + x1047
    x1049 = x104 * x717 + x780
    x1050 = x70 * (x1049 * x98 + x71 * x729)
    x1051 = x1024 * x284 + x1050
    x1052 = x104 * x724 + x785
    x1053 = x70 * (x1052 * x98 + x71 * x734)
    x1054 = x1026 * x284 + x1053
    x1055 = x111 * x724 + x907
    x1056 = x70 * (x1055 * x98 + x71 * x739)
    x1057 = x1028 * x284 + x1056
    x1058 = x70 * (x104 * x729 + x117 * x482)
    x1059 = x1029 * x284 + x1058
    x1060 = x70 * (x104 * x734 + x454 * x497)
    x1061 = x1030 * x284 + x1060
    x1062 = x70 * (x104 * x739 + x793 * x98)
    x1063 = x1031 * x284 + x1062
    x1064 = x70 * (x111 * x739 + x587)
    x1065 = x1032 * x284 + x1064
    x1066 = x20 * x898 + x956
    x1067 = x20 * x900 + x960
    x1068 = x20 * x902 + x964
    x1069 = x20 * x905 + x968
    x1070 = x20 * x909 + x972
    x1071 = x20 * x912 + x976
    x1072 = x20 * x914 + x978
    x1073 = x20 * x916 + x980
    x1074 = x20 * x918 + x982
    x1075 = x20 * x920 + x984
    x1076 = x141 * x818 - x815 * x9
    x1077 = x1076 * x6
    x1078 = x141 * x814 - x350 * x820
    x1079 = x1076 * x5 - x1078 * x93
    x1080 = x70 * (x1077 * x858 + x71**2 * (2.0 * x1077 + x1079 * x4))
    x1081 = x1043 * x21 + x1080
    x1082 = x1076 * x9 + x825
    x1083 = x1079 * x9 + x823
    x1084 = x70 * (x1082 * x861 + x71 * (x1082 * x98 + x1083 * x71))
    x1085 = x1045 * x21 + x1084
    x1086 = x1076 * x12 + 3.0 * x709
    x1087 = x1079 * x12 + x55 * x705
    x1088 = x70 * (x1086 * x861 + x71 * (x1086 * x98 + x1087 * x71))
    x1089 = x1047 * x21 + x1088
    x1090 = x104 * x1082 + x831
    x1091 = x104 * (x1083 + x823)
    x1092 = x70 * (x1090 * x98 + x1091 * x71)
    x1093 = x1050 * x21 + x1092
    x1094 = x104 * x1086 + x838
    x1095 = x104 * x1087 + x836 * x98
    x1096 = x70 * (x1094 * x98 + x1095 * x71)
    x1097 = x1053 * x21 + x1096
    x1098 = x1086 * x111 + x724 * x83
    x1099 = x1087 * x111 + x722 * x83
    x1100 = x70 * (x1098 * x98 + x1099 * x71)
    x1101 = x1056 * x21 + x1100
    x1102 = x70 * (x104 * x1091 + x117 * x823)
    x1103 = x1058 * x21 + x1102
    x1104 = x70 * (x104 * x1095 + x454 * x836)
    x1105 = x1060 * x21 + x1104
    x1106 = x70 * (x104 * x1099 + x847 * x98)
    x1107 = x1062 * x21 + x1106
    x1108 = x70 * (x1099 * x111 + x739 * x83)
    x1109 = x1064 * x21 + x1108
    x1110 = x485 * x858 + x71 * x777
    x1111 = x312 * x485 + x71 * x781
    x1112 = x71 * x786 + x784 * x861
    x1113 = x117 * x485
    x1114 = x1113 + x117 * x486
    x1115 = x454 * x784
    x1116 = x1115 + x312 * x497
    x1117 = x111 * x784 + x754 * x87
    x1118 = x1117 * x98
    x1119 = x1118 + x71 * x793
    x1120 = x130 * x468
    x1121 = x133 * x497
    x1122 = x120 * x793
    x1123 = x111 * x793 + x761
    x1124 = x1043 + x1110 * x181
    x1125 = x1045 + x1111 * x181
    x1126 = x1047 + x1112 * x181
    x1127 = x1050 + x1114 * x181
    x1128 = x1053 + x1116 * x181
    x1129 = x1056 + x1119 * x181
    x1130 = x1058 + x1120 * x20
    x1131 = x1060 + x1121 * x20
    x1132 = x1062 + x1122 * x20
    x1133 = x1064 + x1123 * x181
    x1134 = x70 * (x71 * x828 + x825 * x858)
    x1135 = x1110 * x284 + x1134
    x1136 = x70 * (x312 * x825 + x71 * x832)
    x1137 = x1111 * x284 + x1136
    x1138 = x70 * (x71 * x839 + x837 * x861)
    x1139 = x1112 * x284 + x1138
    x1140 = x117 * x825
    x1141 = x70 * (x1140 + x117 * x826)
    x1142 = x1114 * x284 + x1141
    x1143 = x454 * x837
    x1144 = x70 * (x1143 + x312 * x836)
    x1145 = x1116 * x284 + x1144
    x1146 = x111 * x837 + x784 * x83
    x1147 = x1146 * x98
    x1148 = x70 * (x1147 + x71 * x847)
    x1149 = x1119 * x284 + x1148
    x1150 = x130 * x819
    x1151 = x1120 * x21 + x1150
    x1152 = x133 * x836
    x1153 = x1121 * x21 + x1152
    x1154 = x120 * x847
    x1155 = x1122 * x21 + x1154
    x1156 = x70 * (x111 * x847 + x793 * x83)
    x1157 = x1123 * x284 + x1156
    x1158 = x1043 * x20 + x990
    x1159 = x1045 * x20 + x994
    x1160 = x1047 * x20 + x998
    x1161 = x1002 + x1050 * x20
    x1162 = x1006 + x1053 * x20
    x1163 = x1010 + x1056 * x20
    x1164 = x1012 + x1058 * x20
    x1165 = x1014 + x1060 * x20
    x1166 = x1016 + x1062 * x20
    x1167 = x1018 + x1064 * x20
    x1168 = -x12 * x815 + x244 * x818 + 3.0 * x465
    x1169 = x1168 * x6
    x1170 = x244 * x814 + 3.0 * x474 - x475 * x820
    x1171 = x1168 * x5 - x1170 * x93
    x1172 = x1171 * x4
    x1173 = x1134 * x21 + x70 * (x1169 * x858 + x71**2 * (2.0 * x1169 + x1172))
    x1174 = x104 * x1169
    x1175 = x1136 * x21 + x70 * (x1169 * x312 + x71 * (x104 * x1172 + x1174))
    x1176 = x1168 * x12 + 4.0 * x825
    x1177 = x1176 * x98
    x1178 = x1171 * x12 + 4.0 * x823
    x1179 = x1138 * x21 + x70 * (x1176 * x861 + x71 * (x1177 + x1178 * x71))
    x1180 = x1169 * x117
    x1181 = x1141 * x21 + x70 * (x117 * x1172 + x1180)
    x1182 = x1176 * x454
    x1183 = x1144 * x21 + x70 * (x1178 * x312 + x1182)
    x1184 = x111 * x1176 + x77 * x837
    x1185 = x1184 * x98
    x1186 = x111 * x1178 + x77 * x836
    x1187 = x1148 * x21 + x70 * (x1185 + x1186 * x71)
    x1188 = x1150 * x21 + x1171 * x130
    x1189 = x1152 * x21 + x1178 * x133
    x1190 = x1154 * x21 + x1186 * x120
    x1191 = x1156 * x21 + x70 * (x111 * x1186 + x77 * x847)
    x1192 = x129 * x4**3
    x1193 = x0 * x602
    x1194 = x129 * x7
    x1195 = x1194 * x622
    x1196 = x1194 * x12
    x1197 = x0 * x860
    x1198 = x136 * x4
    x1199 = x104 * x881 + x83 * x865
    x1200 = x104 * x884 + x83 * x867
    x1201 = x126 * (x620 + x621)
    x1202 = x1192 * x922
    x1203 = x20 * x602
    x1204 = x1192 * x1203 + x1202
    x1205 = x1194 * x930
    x1206 = x1195 * x20 + x1205
    x1207 = x1196 * x922
    x1208 = x1196 * x1203 + x1207
    x1209 = x860 * x938
    x1210 = x20 * x860
    x1211 = x1209 + x1210 * x881
    x1212 = x860 * x942
    x1213 = x1210 * x884 + x1212
    x1214 = x1198 * x922
    x1215 = x1198 * x1203 + x1214
    x1216 = x70 * (x104 * x938 + x77 * x881)
    x1217 = x1199 * x181 + x1216
    x1218 = x70 * (x104 * x942 + x77 * x884)
    x1219 = x1200 * x181 + x1218
    x1220 = x126 * x70 * (x928 + x929)
    x1221 = x1201 * x181 + x1220
    x1222 = x139 * x922
    x1223 = x1203 * x139 + x1222
    x1224 = x1192 * x952
    x1225 = x21 * x602
    x1226 = x1192 * x1225 + x1224
    x1227 = x1194 * x958
    x1228 = x1195 * x21 + x1227
    x1229 = x1194 * x962
    x1230 = x1196 * x1225 + x1229
    x1231 = x860 * x966
    x1232 = x21 * x860
    x1233 = x1231 + x1232 * x881
    x1234 = x860 * x970
    x1235 = x1232 * x884 + x1234
    x1236 = x860 * x974
    x1237 = x1198 * x1225 + x1236
    x1238 = x70 * (x104 * x966 + x83 * x904)
    x1239 = x1199 * x284 + x1238
    x1240 = x70 * (x104 * x970 + x83 * x908)
    x1241 = x1200 * x284 + x1240
    x1242 = x70 * (x104 * x974 + x83 * x911)
    x1243 = x1201 * x284 + x1242
    x1244 = x70 * (x111 * x974 + x887)
    x1245 = x1225 * x139 + x1244
    x1246 = x141 * x922 - x350 * x924 + 4.0 * x601
    x1247 = x1246 * x9
    x1248 = 5.0 * x923
    x1249 = x1247 + x1248
    x1250 = x104 * x1249 + 5.0 * x931
    x1251 = x111 * (x1247 + x1248)
    x1252 = x141 * x952 - x350 * x954 + 3.0 * x651
    x1253 = x1192 * x1252
    x1254 = x1252 * x9 + 4.0 * x953
    x1255 = x1194 * x1254
    x1256 = x12 * x1252 + x923
    x1257 = x1194 * x1256
    x1258 = x104 * x1254 + x77 * x958
    x1259 = x1258 * x860
    x1260 = x104 * x1256 + x77 * x962
    x1261 = x1260 * x860
    x1262 = x111 * x1256 + x936
    x1263 = x1262 * x860
    x1264 = x70 * (x104 * x1258 + x77 * x966)
    x1265 = x70 * (x104 * x1260 + x77 * x970)
    x1266 = x70 * (x104 * x1262 + x77 * x974)
    x1267 = x70 * (x111 * x1262 + x946)
    x1268 = x141 * x986 - x350 * x988 + 2.0 * x703
    x1269 = x1192 * x1268
    x1270 = x1224 * x21 + x1269
    x1271 = 3.0 * x987
    x1272 = x1268 * x9 + x1271
    x1273 = x1194 * x1272
    x1274 = x1227 * x21 + x1273
    x1275 = x12 * x1268 + 2.0 * x953
    x1276 = x1194 * x1275
    x1277 = x1229 * x21 + x1276
    x1278 = x104 * x1272 + x83 * x992
    x1279 = x1278 * x860
    x1280 = x1231 * x21 + x1279
    x1281 = x83 * x996
    x1282 = x104 * x1275 + x1281
    x1283 = x1282 * x860
    x1284 = x1234 * x21 + x1283
    x1285 = x111 * x1275 + x87 * x962
    x1286 = x1285 * x860
    x1287 = x1236 * x21 + x1286
    x1288 = x70 * (x1000 * x83 + x104 * x1278)
    x1289 = x1238 * x21 + x1288
    x1290 = x70 * (x1004 * x83 + x104 * x1282)
    x1291 = x1240 * x21 + x1290
    x1292 = x1008 * x83
    x1293 = x70 * (x104 * x1285 + x1292)
    x1294 = x1242 * x21 + x1293
    x1295 = x70 * (x111 * x1285 + x87 * x974)
    x1296 = x1244 * x21 + x1295
    x1297 = x1192 * x652
    x1298 = x0 * x1194
    x1299 = x1023 * x87 + x104 * x904
    x1300 = x1025 * x87 + x104 * x908
    x1301 = x1027 * x87
    x1302 = x104 * x911 + x1301
    x1303 = x111 * x911 + x869
    x1304 = x1224 + x1297 * x20
    x1305 = x1194 * x20
    x1306 = x1227 + x1305 * x666
    x1307 = x1229 + x1305 * x673
    x1308 = x1210 * x904 + x1231
    x1309 = x1210 * x908 + x1234
    x1310 = x1210 * x911 + x1236
    x1311 = x1238 + x1299 * x181
    x1312 = x1240 + x1300 * x181
    x1313 = x1242 + x1302 * x181
    x1314 = x1244 + x1303 * x181
    x1315 = x1192 * x986
    x1316 = x1297 * x21 + x1315
    x1317 = x1194 * x992
    x1318 = x1194 * x21
    x1319 = x1317 + x1318 * x666
    x1320 = x1194 * x996
    x1321 = x1318 * x673 + x1320
    x1322 = x1000 * x860
    x1323 = x1232 * x904 + x1322
    x1324 = x1004 * x860
    x1325 = x1232 * x908 + x1324
    x1326 = x1008 * x860
    x1327 = x1232 * x911 + x1326
    x1328 = x70 * (x1000 * x104 + x1049 * x87)
    x1329 = x1299 * x284 + x1328
    x1330 = x70 * (x1004 * x104 + x1052 * x87)
    x1331 = x1300 * x284 + x1330
    x1332 = x70 * (x1008 * x104 + x1055 * x87)
    x1333 = x1302 * x284 + x1332
    x1334 = x70 * (x1008 * x111 + x87 * x911)
    x1335 = x1303 * x284 + x1334
    x1336 = x1076 * x141 - x1078 * x350 + x817
    x1337 = x1192 * x1336
    x1338 = x1315 * x21 + x1337
    x1339 = 2.0 * x1077 + x1336 * x9
    x1340 = x1194 * x1339
    x1341 = x1317 * x21 + x1340
    x1342 = x12 * x1336 + x1271
    x1343 = x1194 * x1342
    x1344 = x1320 * x21 + x1343
    x1345 = x104 * x1339 + x1082 * x87
    x1346 = x1345 * x860
    x1347 = x1322 * x21 + x1346
    x1348 = x104 * x1342 + x1086 * x87
    x1349 = x1348 * x860
    x1350 = x1324 * x21 + x1349
    x1351 = x111 * x1342 + x1281
    x1352 = x1351 * x860
    x1353 = x1326 * x21 + x1352
    x1354 = x70 * (x104 * x1345 + x1090 * x87)
    x1355 = x1328 * x21 + x1354
    x1356 = x70 * (x104 * x1348 + x1094 * x87)
    x1357 = x1330 * x21 + x1356
    x1358 = x70 * (x104 * x1351 + x1098 * x87)
    x1359 = x1332 * x21 + x1358
    x1360 = x70 * (x111 * x1351 + x1292)
    x1361 = x1334 * x21 + x1360
    x1362 = x1192 * x704
    x1363 = x104 * x1049 + x1113
    x1364 = x104 * x1052 + x1115
    x1365 = x104 * x1055 + x1118
    x1366 = x1055 * x111 + x1301
    x1367 = x1315 + x1362 * x20
    x1368 = x1305 * x717 + x1317
    x1369 = x1305 * x724 + x1320
    x1370 = x1049 * x1210 + x1322
    x1371 = x1052 * x1210 + x1324
    x1372 = x1055 * x1210 + x1326
    x1373 = x1328 + x1363 * x181
    x1374 = x1330 + x1364 * x181
    x1375 = x1332 + x1365 * x181
    x1376 = x1334 + x1366 * x181
    x1377 = x1076 * x1192
    x1378 = x1362 * x21 + x1377
    x1379 = x1082 * x1194
    x1380 = x1318 * x717 + x1379
    x1381 = x1086 * x1194
    x1382 = x1318 * x724 + x1381
    x1383 = x1090 * x860
    x1384 = x1049 * x1232 + x1383
    x1385 = x1094 * x860
    x1386 = x1052 * x1232 + x1385
    x1387 = x1098 * x860
    x1388 = x1055 * x1232 + x1387
    x1389 = x70 * (x104 * x1090 + x1140)
    x1390 = x1363 * x284 + x1389
    x1391 = x70 * (x104 * x1094 + x1143)
    x1392 = x1364 * x284 + x1391
    x1393 = x70 * (x104 * x1098 + x1147)
    x1394 = x1365 * x284 + x1393
    x1395 = x70 * (x1055 * x83 + x1098 * x111)
    x1396 = x1366 * x284 + x1395
    x1397 = x1168 * x141 - x1170 * x350
    x1398 = x1192 * x1397 + x1377 * x21
    x1399 = x1169 + x1397 * x9
    x1400 = x1194 * x1399 + x1379 * x21
    x1401 = 4.0 * x1077 + x12 * x1397
    x1402 = x1194 * x1401 + x1381 * x21
    x1403 = x104 * x1399 + x1174
    x1404 = x1383 * x21 + x1403 * x860
    x1405 = x104 * x1401 + x1177
    x1406 = x1385 * x21 + x1405 * x860
    x1407 = x1086 * x77 + x111 * x1401
    x1408 = x1387 * x21 + x1407 * x860
    x1409 = x1389 * x21 + x70 * (x104 * x1403 + x1180)
    x1410 = x1391 * x21 + x70 * (x104 * x1405 + x1182)
    x1411 = x1393 * x21 + x70 * (x104 * x1407 + x1185)
    x1412 = x1395 * x21 + x70 * (x1098 * x77 + x111 * x1407)
    x1413 = x0 * x818
    x1414 = x818 * x9
    x1415 = x133 * x4
    x1416 = x129 * x4 * x9
    x1417 = x1416 * x837
    x1418 = x133 * x837
    x1419 = x1146 * x120
    x1420 = x111 * x1146 + x1117 * x83
    x1421 = x20 * x818
    x1422 = x1192 * x1421 + x1377
    x1423 = x1305 * x1414 + x1379
    x1424 = x1305 * x837 + x1381
    x1425 = x1383 + x1415 * x1421
    x1426 = x1385 + x1417 * x20
    x1427 = x1146 * x1210 + x1387
    x1428 = x130 * x1421 + x1389
    x1429 = x1391 + x1418 * x20
    x1430 = x1393 + x1419 * x20
    x1431 = x1395 + x1420 * x181
    x1432 = x1168 * x1192
    x1433 = x21 * x818
    x1434 = x1192 * x1433 + x1432
    x1435 = x1194 * x9
    x1436 = x1168 * x1435 + x1318 * x1414
    x1437 = x1176 * x1194
    x1438 = x1318 * x837 + x1437
    x1439 = x1168 * x1415
    x1440 = x1415 * x1433 + x1439
    x1441 = x1176 * x1416
    x1442 = x1417 * x21 + x1441
    x1443 = x1184 * x860
    x1444 = x1146 * x1232 + x1443
    x1445 = x1168 * x130
    x1446 = x130 * x1433 + x1445
    x1447 = x1176 * x133
    x1448 = x1418 * x21 + x1447
    x1449 = x1184 * x120
    x1450 = x1419 * x21 + x1449
    x1451 = x70 * (x111 * x1184 + x1146 * x77)
    x1452 = x1420 * x284 + x1451
    x1453 = x1168 * x244 - x1170 * x475 + 4.0 * x817
    x1454 = 5.0 * x1169 + x12 * x1453
    x1455 = x111 * x1454 + 5.0 * x1177

    # 600 item(s)
    result[0, 0, 0] = numpy.sum(
        x103
        * (
            x0 * x85
            + x0 * (x85 + x88 * x89)
            + x70 * (x71 * (x69 * x99 + x71 * (x95 + x97)) + x78 * x99)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x110
        * (
            x0 * x107
            + x0 * (x107 + x108 * x89)
            + x70 * (x104 * x71 * (x95 + x97) + x105 * x99)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x110
        * (
            x0 * x114
            + x0 * (x114 + x115 * x89)
            + x70 * (x111 * x71 * (x95 + x97) + x112 * x99)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x110 * (x0 * x118 + x0 * (x118 + x119 * x89) + x117 * x70 * (x95 + x97))
    )
    result[0, 0, 4] = numpy.sum(
        x125 * (x0 * x122 + x0 * (x122 + x123 * x89) + x121 * x70 * (x95 + x97))
    )
    result[0, 0, 5] = numpy.sum(
        x110 * (x0 * x127 + x0 * (x127 + x128 * x89) + x126 * x70 * (x95 + x97))
    )
    result[0, 0, 6] = numpy.sum(
        x103 * (x0 * x131 + x0 * (x130 * x132 + x131) + x130 * x94)
    )
    result[0, 0, 7] = numpy.sum(
        x110 * (x0 * x135 + x0 * (x132 * x134 + x135) + x134 * x94)
    )
    result[0, 0, 8] = numpy.sum(
        x110 * (x0 * x138 + x0 * (x132 * x137 + x138) + x137 * x94)
    )
    result[0, 0, 9] = numpy.sum(
        x103 * (x0 * x140 + x0 * (x132 * x139 + x140) + x139 * x94)
    )
    result[0, 1, 0] = numpy.sum(x124 * (x0 * x182 + x189 + x20 * x85))
    result[0, 1, 1] = numpy.sum(x125 * (x0 * x200 + x107 * x20 + x203))
    result[0, 1, 2] = numpy.sum(x125 * (x0 * x208 + x114 * x20 + x209))
    result[0, 1, 3] = numpy.sum(x125 * (x0 * x213 + x118 * x20 + x215))
    result[0, 1, 4] = numpy.sum(x225 * (x0 * x221 + x122 * x20 + x224))
    result[0, 1, 5] = numpy.sum(x125 * (x0 * x227 + x127 * x20 + x228))
    result[0, 1, 6] = numpy.sum(x124 * (x0 * x231 + x131 * x20 + x232))
    result[0, 1, 7] = numpy.sum(x125 * (x0 * x234 + x135 * x20 + x235))
    result[0, 1, 8] = numpy.sum(x125 * (x0 * x238 + x138 * x20 + x240))
    result[0, 1, 9] = numpy.sum(x124 * (x0 * x242 + x140 * x20 + x243))
    result[0, 2, 0] = numpy.sum(x124 * (x0 * x285 + x21 * x85 + x293))
    result[0, 2, 1] = numpy.sum(x125 * (x0 * x297 + x107 * x21 + x298))
    result[0, 2, 2] = numpy.sum(x125 * (x0 * x306 + x114 * x21 + x308))
    result[0, 2, 3] = numpy.sum(x125 * (x0 * x310 + x118 * x21 + x311))
    result[0, 2, 4] = numpy.sum(x225 * (x0 * x315 + x122 * x21 + x316))
    result[0, 2, 5] = numpy.sum(x125 * (x0 * x320 + x127 * x21 + x322))
    result[0, 2, 6] = numpy.sum(x124 * (x0 * x325 + x131 * x21 + x326))
    result[0, 2, 7] = numpy.sum(x125 * (x0 * x328 + x135 * x21 + x329))
    result[0, 2, 8] = numpy.sum(x125 * (x0 * x331 + x138 * x21 + x332))
    result[0, 2, 9] = numpy.sum(x124 * (x0 * x334 + x140 * x21 + x335))
    result[0, 3, 0] = numpy.sum(x103 * (x182 * x20 + x365))
    result[0, 3, 1] = numpy.sum(x110 * (x20 * x200 + x377))
    result[0, 3, 2] = numpy.sum(x110 * (x20 * x208 + x381))
    result[0, 3, 3] = numpy.sum(x110 * (x20 * x213 + x386))
    result[0, 3, 4] = numpy.sum(x125 * (x20 * x221 + x391))
    result[0, 3, 5] = numpy.sum(x110 * (x20 * x227 + x394))
    result[0, 3, 6] = numpy.sum(x103 * (x20 * x231 + x396))
    result[0, 3, 7] = numpy.sum(x110 * (x20 * x234 + x398))
    result[0, 3, 8] = numpy.sum(x110 * (x20 * x238 + x400))
    result[0, 3, 9] = numpy.sum(x103 * (x20 * x242 + x402))
    result[0, 4, 0] = numpy.sum(x124 * (x20 * x285 + x425))
    result[0, 4, 1] = numpy.sum(x125 * (x20 * x297 + x432))
    result[0, 4, 2] = numpy.sum(x125 * (x20 * x306 + x439))
    result[0, 4, 3] = numpy.sum(x125 * (x20 * x310 + x443))
    result[0, 4, 4] = numpy.sum(x225 * (x20 * x315 + x447))
    result[0, 4, 5] = numpy.sum(x125 * (x20 * x320 + x451))
    result[0, 4, 6] = numpy.sum(x124 * (x20 * x325 + x453))
    result[0, 4, 7] = numpy.sum(x125 * (x20 * x328 + x456))
    result[0, 4, 8] = numpy.sum(x125 * (x20 * x331 + x458))
    result[0, 4, 9] = numpy.sum(x124 * (x20 * x334 + x460))
    result[0, 5, 0] = numpy.sum(x103 * (x21 * x285 + x490))
    result[0, 5, 1] = numpy.sum(x110 * (x21 * x297 + x493))
    result[0, 5, 2] = numpy.sum(x110 * (x21 * x306 + x500))
    result[0, 5, 3] = numpy.sum(x110 * (x21 * x310 + x502))
    result[0, 5, 4] = numpy.sum(x125 * (x21 * x315 + x504))
    result[0, 5, 5] = numpy.sum(x110 * (x21 * x320 + x509))
    result[0, 5, 6] = numpy.sum(x103 * (x21 * x325 + x511))
    result[0, 5, 7] = numpy.sum(x110 * (x21 * x328 + x513))
    result[0, 5, 8] = numpy.sum(x110 * (x21 * x331 + x515))
    result[0, 5, 9] = numpy.sum(x103 * (x21 * x334 + x517))
    result[1, 0, 0] = numpy.sum(x110 * (x0 * x180 + x0 * (x180 + x518 * x89) + x189))
    result[1, 0, 1] = numpy.sum(x521 * (x0 * x199 + x0 * (x199 + x520 * x89) + x203))
    result[1, 0, 2] = numpy.sum(x521 * (x0 * x207 + x0 * (x207 + x523 * x89) + x209))
    result[1, 0, 3] = numpy.sum(x521 * (x0 * x212 + x0 * (x212 + x525 * x89) + x215))
    result[1, 0, 4] = numpy.sum(x529 * (x0 * x220 + x0 * (x220 + x528 * x89) + x224))
    result[1, 0, 5] = numpy.sum(x521 * (x0 * x226 + x0 * (x226 + x531 * x89) + x228))
    result[1, 0, 6] = numpy.sum(x110 * (x0 * x229 + x0 * (x229 + x532 * x89) + x232))
    result[1, 0, 7] = numpy.sum(x521 * (x0 * x233 + x0 * (x233 + x533 * x89) + x235))
    result[1, 0, 8] = numpy.sum(x521 * (x0 * x237 + x0 * (x237 + x535 * x89) + x240))
    result[1, 0, 9] = numpy.sum(x110 * (x0 * x241 + x0 * (x0 * x536 + x241) + x243))
    result[1, 1, 0] = numpy.sum(x125 * (x0 * x539 + x365))
    result[1, 1, 1] = numpy.sum(x529 * (x0 * x545 + x377))
    result[1, 1, 2] = numpy.sum(x529 * (x0 * x549 + x381))
    result[1, 1, 3] = numpy.sum(x529 * (x0 * x552 + x386))
    result[1, 1, 4] = numpy.sum(x556 * (x0 * x555 + x391))
    result[1, 1, 5] = numpy.sum(x529 * (x0 * x558 + x394))
    result[1, 1, 6] = numpy.sum(x125 * (x0 * x560 + x396))
    result[1, 1, 7] = numpy.sum(x529 * (x0 * x562 + x398))
    result[1, 1, 8] = numpy.sum(x529 * (x0 * x564 + x400))
    result[1, 1, 9] = numpy.sum(x125 * (x0 * x566 + x402))
    result[1, 2, 0] = numpy.sum(x125 * (x0 * x569 + x425))
    result[1, 2, 1] = numpy.sum(x529 * (x0 * x573 + x432))
    result[1, 2, 2] = numpy.sum(x529 * (x0 * x577 + x439))
    result[1, 2, 3] = numpy.sum(x529 * (x0 * x581 + x443))
    result[1, 2, 4] = numpy.sum(x556 * (x0 * x585 + x447))
    result[1, 2, 5] = numpy.sum(x529 * (x0 * x589 + x451))
    result[1, 2, 6] = numpy.sum(x125 * (x0 * x591 + x453))
    result[1, 2, 7] = numpy.sum(x529 * (x0 * x593 + x456))
    result[1, 2, 8] = numpy.sum(x529 * (x0 * x595 + x458))
    result[1, 2, 9] = numpy.sum(x125 * (x0 * x597 + x460))
    result[1, 3, 0] = numpy.sum(x110 * (x20 * x539 + x614))
    result[1, 3, 1] = numpy.sum(x521 * (x20 * x545 + x625))
    result[1, 3, 2] = numpy.sum(x521 * (x20 * x549 + x629))
    result[1, 3, 3] = numpy.sum(x521 * (x20 * x552 + x633))
    result[1, 3, 4] = numpy.sum(x529 * (x20 * x555 + x637))
    result[1, 3, 5] = numpy.sum(x521 * (x20 * x558 + x639))
    result[1, 3, 6] = numpy.sum(x110 * (x20 * x560 + x641))
    result[1, 3, 7] = numpy.sum(x521 * (x20 * x562 + x643))
    result[1, 3, 8] = numpy.sum(x521 * (x20 * x564 + x645))
    result[1, 3, 9] = numpy.sum(x110 * (x20 * x566 + x647))
    result[1, 4, 0] = numpy.sum(x125 * (x20 * x569 + x661))
    result[1, 4, 1] = numpy.sum(x529 * (x20 * x573 + x669))
    result[1, 4, 2] = numpy.sum(x529 * (x20 * x577 + x676))
    result[1, 4, 3] = numpy.sum(x529 * (x20 * x581 + x680))
    result[1, 4, 4] = numpy.sum(x556 * (x20 * x585 + x685))
    result[1, 4, 5] = numpy.sum(x529 * (x20 * x589 + x690))
    result[1, 4, 6] = numpy.sum(x125 * (x20 * x591 + x692))
    result[1, 4, 7] = numpy.sum(x529 * (x20 * x593 + x694))
    result[1, 4, 8] = numpy.sum(x529 * (x20 * x595 + x697))
    result[1, 4, 9] = numpy.sum(x125 * (x20 * x597 + x699))
    result[1, 5, 0] = numpy.sum(x110 * (x21 * x569 + x713))
    result[1, 5, 1] = numpy.sum(x521 * (x21 * x573 + x720))
    result[1, 5, 2] = numpy.sum(x521 * (x21 * x577 + x727))
    result[1, 5, 3] = numpy.sum(x521 * (x21 * x581 + x732))
    result[1, 5, 4] = numpy.sum(x529 * (x21 * x585 + x737))
    result[1, 5, 5] = numpy.sum(x521 * (x21 * x589 + x742))
    result[1, 5, 6] = numpy.sum(x110 * (x21 * x591 + x744))
    result[1, 5, 7] = numpy.sum(x521 * (x21 * x593 + x746))
    result[1, 5, 8] = numpy.sum(x521 * (x21 * x595 + x748))
    result[1, 5, 9] = numpy.sum(x110 * (x21 * x597 + x750))
    result[2, 0, 0] = numpy.sum(x110 * (x0 * x283 + x0 * (x283 + x751 * x89) + x293))
    result[2, 0, 1] = numpy.sum(x521 * (x0 * x296 + x0 * (x296 + x753 * x89) + x298))
    result[2, 0, 2] = numpy.sum(x521 * (x0 * x305 + x0 * (x305 + x756 * x89) + x308))
    result[2, 0, 3] = numpy.sum(x521 * (x0 * x309 + x0 * (x309 + x757 * x89) + x311))
    result[2, 0, 4] = numpy.sum(x529 * (x0 * x314 + x0 * (x314 + x759 * x89) + x316))
    result[2, 0, 5] = numpy.sum(x521 * (x0 * x319 + x0 * (x319 + x762 * x89) + x322))
    result[2, 0, 6] = numpy.sum(x110 * (x0 * x323 + x0 * (x0 * x763 + x323) + x326))
    result[2, 0, 7] = numpy.sum(x521 * (x0 * x327 + x0 * (x0 * x764 + x327) + x329))
    result[2, 0, 8] = numpy.sum(x521 * (x0 * x330 + x0 * (x0 * x765 + x330) + x332))
    result[2, 0, 9] = numpy.sum(x110 * (x0 * x333 + x0 * (x333 + x766 * x89) + x335))
    result[2, 1, 0] = numpy.sum(x125 * (x0 * x767 + x20 * x283 + x424))
    result[2, 1, 1] = numpy.sum(x529 * (x0 * x768 + x20 * x296 + x431))
    result[2, 1, 2] = numpy.sum(x529 * (x0 * x769 + x20 * x305 + x438))
    result[2, 1, 3] = numpy.sum(x529 * (x0 * x770 + x20 * x309 + x442))
    result[2, 1, 4] = numpy.sum(x556 * (x0 * x771 + x20 * x314 + x446))
    result[2, 1, 5] = numpy.sum(x529 * (x0 * x772 + x20 * x319 + x450))
    result[2, 1, 6] = numpy.sum(x125 * (x0 * x773 + x20 * x323 + x452))
    result[2, 1, 7] = numpy.sum(x529 * (x0 * x774 + x20 * x327 + x455))
    result[2, 1, 8] = numpy.sum(x529 * (x0 * x775 + x20 * x330 + x457))
    result[2, 1, 9] = numpy.sum(x125 * (x0 * x776 + x20 * x333 + x459))
    result[2, 2, 0] = numpy.sum(x125 * (x0 * x779 + x490))
    result[2, 2, 1] = numpy.sum(x529 * (x0 * x783 + x493))
    result[2, 2, 2] = numpy.sum(x529 * (x0 * x788 + x500))
    result[2, 2, 3] = numpy.sum(x529 * (x0 * x790 + x502))
    result[2, 2, 4] = numpy.sum(x556 * (x0 * x792 + x504))
    result[2, 2, 5] = numpy.sum(x529 * (x0 * x795 + x509))
    result[2, 2, 6] = numpy.sum(x125 * (x0 * x797 + x511))
    result[2, 2, 7] = numpy.sum(x529 * (x0 * x799 + x513))
    result[2, 2, 8] = numpy.sum(x529 * (x0 * x801 + x515))
    result[2, 2, 9] = numpy.sum(x125 * (x0 * x803 + x517))
    result[2, 3, 0] = numpy.sum(x110 * (x20 * x767 + x804))
    result[2, 3, 1] = numpy.sum(x521 * (x20 * x768 + x805))
    result[2, 3, 2] = numpy.sum(x521 * (x20 * x769 + x806))
    result[2, 3, 3] = numpy.sum(x521 * (x20 * x770 + x807))
    result[2, 3, 4] = numpy.sum(x529 * (x20 * x771 + x808))
    result[2, 3, 5] = numpy.sum(x521 * (x20 * x772 + x809))
    result[2, 3, 6] = numpy.sum(x110 * (x20 * x773 + x810))
    result[2, 3, 7] = numpy.sum(x521 * (x20 * x774 + x811))
    result[2, 3, 8] = numpy.sum(x521 * (x20 * x775 + x812))
    result[2, 3, 9] = numpy.sum(x110 * (x20 * x776 + x813))
    result[2, 4, 0] = numpy.sum(x125 * (x20 * x779 + x713))
    result[2, 4, 1] = numpy.sum(x529 * (x20 * x783 + x720))
    result[2, 4, 2] = numpy.sum(x529 * (x20 * x788 + x727))
    result[2, 4, 3] = numpy.sum(x529 * (x20 * x790 + x732))
    result[2, 4, 4] = numpy.sum(x556 * (x20 * x792 + x737))
    result[2, 4, 5] = numpy.sum(x529 * (x20 * x795 + x742))
    result[2, 4, 6] = numpy.sum(x125 * (x20 * x797 + x744))
    result[2, 4, 7] = numpy.sum(x529 * (x20 * x799 + x746))
    result[2, 4, 8] = numpy.sum(x529 * (x20 * x801 + x748))
    result[2, 4, 9] = numpy.sum(x125 * (x20 * x803 + x750))
    result[2, 5, 0] = numpy.sum(x110 * (x21 * x779 + x830))
    result[2, 5, 1] = numpy.sum(x521 * (x21 * x783 + x834))
    result[2, 5, 2] = numpy.sum(x521 * (x21 * x788 + x841))
    result[2, 5, 3] = numpy.sum(x521 * (x21 * x790 + x843))
    result[2, 5, 4] = numpy.sum(x529 * (x21 * x792 + x845))
    result[2, 5, 5] = numpy.sum(x521 * (x21 * x795 + x849))
    result[2, 5, 6] = numpy.sum(x110 * (x21 * x797 + x851))
    result[2, 5, 7] = numpy.sum(x521 * (x21 * x799 + x853))
    result[2, 5, 8] = numpy.sum(x521 * (x21 * x801 + x855))
    result[2, 5, 9] = numpy.sum(x110 * (x21 * x803 + x857))
    result[3, 0, 0] = numpy.sum(x110 * (x0 * x538 + x0 * (x538 + x859 * x89) + x364))
    result[3, 0, 1] = numpy.sum(x521 * (x0 * x544 + x0 * (x544 + x862 * x89) + x376))
    result[3, 0, 2] = numpy.sum(x521 * (x0 * x548 + x0 * (x548 + x864 * x89) + x380))
    result[3, 0, 3] = numpy.sum(x521 * (x0 * x551 + x0 * (x551 + x866 * x89) + x385))
    result[3, 0, 4] = numpy.sum(x529 * (x0 * x554 + x0 * (x554 + x868 * x89) + x390))
    result[3, 0, 5] = numpy.sum(x521 * (x0 * x557 + x0 * (x557 + x870 * x89) + x393))
    result[3, 0, 6] = numpy.sum(x110 * (x0 * x559 + x0 * (x559 + x871 * x89) + x395))
    result[3, 0, 7] = numpy.sum(x521 * (x0 * x561 + x0 * (x561 + x872 * x89) + x397))
    result[3, 0, 8] = numpy.sum(x521 * (x0 * x563 + x0 * (x563 + x873 * x89) + x399))
    result[3, 0, 9] = numpy.sum(x110 * (x0 * x565 + x0 * (x0 * x874 + x565) + x401))
    result[3, 1, 0] = numpy.sum(x125 * (x0 * x876 + x614))
    result[3, 1, 1] = numpy.sum(x529 * (x0 * x878 + x625))
    result[3, 1, 2] = numpy.sum(x529 * (x0 * x880 + x629))
    result[3, 1, 3] = numpy.sum(x529 * (x0 * x883 + x633))
    result[3, 1, 4] = numpy.sum(x556 * (x0 * x886 + x637))
    result[3, 1, 5] = numpy.sum(x529 * (x0 * x889 + x639))
    result[3, 1, 6] = numpy.sum(x125 * (x0 * x891 + x641))
    result[3, 1, 7] = numpy.sum(x529 * (x0 * x893 + x643))
    result[3, 1, 8] = numpy.sum(x529 * (x0 * x895 + x645))
    result[3, 1, 9] = numpy.sum(x125 * (x0 * x897 + x647))
    result[3, 2, 0] = numpy.sum(x125 * (x0 * x899 + x661))
    result[3, 2, 1] = numpy.sum(x529 * (x0 * x901 + x669))
    result[3, 2, 2] = numpy.sum(x529 * (x0 * x903 + x676))
    result[3, 2, 3] = numpy.sum(x529 * (x0 * x906 + x680))
    result[3, 2, 4] = numpy.sum(x556 * (x0 * x910 + x685))
    result[3, 2, 5] = numpy.sum(x529 * (x0 * x913 + x690))
    result[3, 2, 6] = numpy.sum(x125 * (x0 * x915 + x692))
    result[3, 2, 7] = numpy.sum(x529 * (x0 * x917 + x694))
    result[3, 2, 8] = numpy.sum(x529 * (x0 * x919 + x697))
    result[3, 2, 9] = numpy.sum(x125 * (x0 * x921 + x699))
    result[3, 3, 0] = numpy.sum(x110 * (x20 * x876 + x927))
    result[3, 3, 1] = numpy.sum(x521 * (x20 * x878 + x935))
    result[3, 3, 2] = numpy.sum(x521 * (x20 * x880 + x937))
    result[3, 3, 3] = numpy.sum(x521 * (x20 * x883 + x941))
    result[3, 3, 4] = numpy.sum(x529 * (x20 * x886 + x945))
    result[3, 3, 5] = numpy.sum(x521 * (x20 * x889 + x947))
    result[3, 3, 6] = numpy.sum(x110 * (x20 * x891 + x948))
    result[3, 3, 7] = numpy.sum(x521 * (x20 * x893 + x949))
    result[3, 3, 8] = numpy.sum(x521 * (x20 * x895 + x950))
    result[3, 3, 9] = numpy.sum(x110 * (x20 * x897 + x951))
    result[3, 4, 0] = numpy.sum(x125 * (x20 * x899 + x957))
    result[3, 4, 1] = numpy.sum(x529 * (x20 * x901 + x961))
    result[3, 4, 2] = numpy.sum(x529 * (x20 * x903 + x965))
    result[3, 4, 3] = numpy.sum(x529 * (x20 * x906 + x969))
    result[3, 4, 4] = numpy.sum(x556 * (x20 * x910 + x973))
    result[3, 4, 5] = numpy.sum(x529 * (x20 * x913 + x977))
    result[3, 4, 6] = numpy.sum(x125 * (x20 * x915 + x979))
    result[3, 4, 7] = numpy.sum(x529 * (x20 * x917 + x981))
    result[3, 4, 8] = numpy.sum(x529 * (x20 * x919 + x983))
    result[3, 4, 9] = numpy.sum(x125 * (x20 * x921 + x985))
    result[3, 5, 0] = numpy.sum(x110 * (x21 * x899 + x991))
    result[3, 5, 1] = numpy.sum(x521 * (x21 * x901 + x995))
    result[3, 5, 2] = numpy.sum(x521 * (x21 * x903 + x999))
    result[3, 5, 3] = numpy.sum(x521 * (x1003 + x21 * x906))
    result[3, 5, 4] = numpy.sum(x529 * (x1007 + x21 * x910))
    result[3, 5, 5] = numpy.sum(x521 * (x1011 + x21 * x913))
    result[3, 5, 6] = numpy.sum(x110 * (x1013 + x21 * x915))
    result[3, 5, 7] = numpy.sum(x521 * (x1015 + x21 * x917))
    result[3, 5, 8] = numpy.sum(x521 * (x1017 + x21 * x919))
    result[3, 5, 9] = numpy.sum(x110 * (x1019 + x21 * x921))
    result[4, 0, 0] = numpy.sum(x125 * (x0 * x568 + x0 * (x1020 * x89 + x568) + x424))
    result[4, 0, 1] = numpy.sum(x529 * (x0 * x572 + x0 * (x1021 * x89 + x572) + x431))
    result[4, 0, 2] = numpy.sum(x529 * (x0 * x576 + x0 * (x1022 * x89 + x576) + x438))
    result[4, 0, 3] = numpy.sum(x529 * (x0 * x580 + x0 * (x1024 * x89 + x580) + x442))
    result[4, 0, 4] = numpy.sum(x556 * (x0 * x584 + x0 * (x1026 * x89 + x584) + x446))
    result[4, 0, 5] = numpy.sum(x529 * (x0 * x588 + x0 * (x1028 * x89 + x588) + x450))
    result[4, 0, 6] = numpy.sum(x125 * (x0 * x590 + x0 * (x1029 * x89 + x590) + x452))
    result[4, 0, 7] = numpy.sum(x529 * (x0 * x592 + x0 * (x1030 * x89 + x592) + x455))
    result[4, 0, 8] = numpy.sum(x529 * (x0 * x594 + x0 * (x1031 * x89 + x594) + x457))
    result[4, 0, 9] = numpy.sum(x125 * (x0 * x596 + x0 * (x1032 * x89 + x596) + x459))
    result[4, 1, 0] = numpy.sum(x225 * (x0 * x1033 + x804))
    result[4, 1, 1] = numpy.sum(x556 * (x0 * x1034 + x805))
    result[4, 1, 2] = numpy.sum(x556 * (x0 * x1035 + x806))
    result[4, 1, 3] = numpy.sum(x556 * (x0 * x1036 + x807))
    result[4, 1, 4] = numpy.sum(x101 * (x0 * x1037 + x808))
    result[4, 1, 5] = numpy.sum(x556 * (x0 * x1038 + x809))
    result[4, 1, 6] = numpy.sum(x225 * (x0 * x1039 + x810))
    result[4, 1, 7] = numpy.sum(x556 * (x0 * x1040 + x811))
    result[4, 1, 8] = numpy.sum(x556 * (x0 * x1041 + x812))
    result[4, 1, 9] = numpy.sum(x225 * (x0 * x1042 + x813))
    result[4, 2, 0] = numpy.sum(x225 * (x0 * x1044 + x713))
    result[4, 2, 1] = numpy.sum(x556 * (x0 * x1046 + x720))
    result[4, 2, 2] = numpy.sum(x556 * (x0 * x1048 + x727))
    result[4, 2, 3] = numpy.sum(x556 * (x0 * x1051 + x732))
    result[4, 2, 4] = numpy.sum(x101 * (x0 * x1054 + x737))
    result[4, 2, 5] = numpy.sum(x556 * (x0 * x1057 + x742))
    result[4, 2, 6] = numpy.sum(x225 * (x0 * x1059 + x744))
    result[4, 2, 7] = numpy.sum(x556 * (x0 * x1061 + x746))
    result[4, 2, 8] = numpy.sum(x556 * (x0 * x1063 + x748))
    result[4, 2, 9] = numpy.sum(x225 * (x0 * x1065 + x750))
    result[4, 3, 0] = numpy.sum(x125 * (x1033 * x20 + x1066))
    result[4, 3, 1] = numpy.sum(x529 * (x1034 * x20 + x1067))
    result[4, 3, 2] = numpy.sum(x529 * (x1035 * x20 + x1068))
    result[4, 3, 3] = numpy.sum(x529 * (x1036 * x20 + x1069))
    result[4, 3, 4] = numpy.sum(x556 * (x1037 * x20 + x1070))
    result[4, 3, 5] = numpy.sum(x529 * (x1038 * x20 + x1071))
    result[4, 3, 6] = numpy.sum(x125 * (x1039 * x20 + x1072))
    result[4, 3, 7] = numpy.sum(x529 * (x1040 * x20 + x1073))
    result[4, 3, 8] = numpy.sum(x529 * (x1041 * x20 + x1074))
    result[4, 3, 9] = numpy.sum(x125 * (x1042 * x20 + x1075))
    result[4, 4, 0] = numpy.sum(x225 * (x1044 * x20 + x991))
    result[4, 4, 1] = numpy.sum(x556 * (x1046 * x20 + x995))
    result[4, 4, 2] = numpy.sum(x556 * (x1048 * x20 + x999))
    result[4, 4, 3] = numpy.sum(x556 * (x1003 + x1051 * x20))
    result[4, 4, 4] = numpy.sum(x101 * (x1007 + x1054 * x20))
    result[4, 4, 5] = numpy.sum(x556 * (x1011 + x1057 * x20))
    result[4, 4, 6] = numpy.sum(x225 * (x1013 + x1059 * x20))
    result[4, 4, 7] = numpy.sum(x556 * (x1015 + x1061 * x20))
    result[4, 4, 8] = numpy.sum(x556 * (x1017 + x1063 * x20))
    result[4, 4, 9] = numpy.sum(x225 * (x1019 + x1065 * x20))
    result[4, 5, 0] = numpy.sum(x125 * (x1044 * x21 + x1081))
    result[4, 5, 1] = numpy.sum(x529 * (x1046 * x21 + x1085))
    result[4, 5, 2] = numpy.sum(x529 * (x1048 * x21 + x1089))
    result[4, 5, 3] = numpy.sum(x529 * (x1051 * x21 + x1093))
    result[4, 5, 4] = numpy.sum(x556 * (x1054 * x21 + x1097))
    result[4, 5, 5] = numpy.sum(x529 * (x1057 * x21 + x1101))
    result[4, 5, 6] = numpy.sum(x125 * (x1059 * x21 + x1103))
    result[4, 5, 7] = numpy.sum(x529 * (x1061 * x21 + x1105))
    result[4, 5, 8] = numpy.sum(x529 * (x1063 * x21 + x1107))
    result[4, 5, 9] = numpy.sum(x125 * (x1065 * x21 + x1109))
    result[5, 0, 0] = numpy.sum(x110 * (x0 * x778 + x0 * (x1110 * x89 + x778) + x489))
    result[5, 0, 1] = numpy.sum(x521 * (x0 * x782 + x0 * (x1111 * x89 + x782) + x492))
    result[5, 0, 2] = numpy.sum(x521 * (x0 * x787 + x0 * (x1112 * x89 + x787) + x499))
    result[5, 0, 3] = numpy.sum(x521 * (x0 * x789 + x0 * (x1114 * x89 + x789) + x501))
    result[5, 0, 4] = numpy.sum(x529 * (x0 * x791 + x0 * (x1116 * x89 + x791) + x503))
    result[5, 0, 5] = numpy.sum(x521 * (x0 * x794 + x0 * (x1119 * x89 + x794) + x508))
    result[5, 0, 6] = numpy.sum(x110 * (x0 * x796 + x0 * (x0 * x1120 + x796) + x510))
    result[5, 0, 7] = numpy.sum(x521 * (x0 * x798 + x0 * (x0 * x1121 + x798) + x512))
    result[5, 0, 8] = numpy.sum(x521 * (x0 * x800 + x0 * (x0 * x1122 + x800) + x514))
    result[5, 0, 9] = numpy.sum(x110 * (x0 * x802 + x0 * (x1123 * x89 + x802) + x516))
    result[5, 1, 0] = numpy.sum(x125 * (x0 * x1124 + x20 * x778 + x712))
    result[5, 1, 1] = numpy.sum(x529 * (x0 * x1125 + x20 * x782 + x719))
    result[5, 1, 2] = numpy.sum(x529 * (x0 * x1126 + x20 * x787 + x726))
    result[5, 1, 3] = numpy.sum(x529 * (x0 * x1127 + x20 * x789 + x731))
    result[5, 1, 4] = numpy.sum(x556 * (x0 * x1128 + x20 * x791 + x736))
    result[5, 1, 5] = numpy.sum(x529 * (x0 * x1129 + x20 * x794 + x741))
    result[5, 1, 6] = numpy.sum(x125 * (x0 * x1130 + x20 * x796 + x743))
    result[5, 1, 7] = numpy.sum(x529 * (x0 * x1131 + x20 * x798 + x745))
    result[5, 1, 8] = numpy.sum(x529 * (x0 * x1132 + x20 * x800 + x747))
    result[5, 1, 9] = numpy.sum(x125 * (x0 * x1133 + x20 * x802 + x749))
    result[5, 2, 0] = numpy.sum(x125 * (x0 * x1135 + x830))
    result[5, 2, 1] = numpy.sum(x529 * (x0 * x1137 + x834))
    result[5, 2, 2] = numpy.sum(x529 * (x0 * x1139 + x841))
    result[5, 2, 3] = numpy.sum(x529 * (x0 * x1142 + x843))
    result[5, 2, 4] = numpy.sum(x556 * (x0 * x1145 + x845))
    result[5, 2, 5] = numpy.sum(x529 * (x0 * x1149 + x849))
    result[5, 2, 6] = numpy.sum(x125 * (x0 * x1151 + x851))
    result[5, 2, 7] = numpy.sum(x529 * (x0 * x1153 + x853))
    result[5, 2, 8] = numpy.sum(x529 * (x0 * x1155 + x855))
    result[5, 2, 9] = numpy.sum(x125 * (x0 * x1157 + x857))
    result[5, 3, 0] = numpy.sum(x110 * (x1124 * x20 + x1158))
    result[5, 3, 1] = numpy.sum(x521 * (x1125 * x20 + x1159))
    result[5, 3, 2] = numpy.sum(x521 * (x1126 * x20 + x1160))
    result[5, 3, 3] = numpy.sum(x521 * (x1127 * x20 + x1161))
    result[5, 3, 4] = numpy.sum(x529 * (x1128 * x20 + x1162))
    result[5, 3, 5] = numpy.sum(x521 * (x1129 * x20 + x1163))
    result[5, 3, 6] = numpy.sum(x110 * (x1130 * x20 + x1164))
    result[5, 3, 7] = numpy.sum(x521 * (x1131 * x20 + x1165))
    result[5, 3, 8] = numpy.sum(x521 * (x1132 * x20 + x1166))
    result[5, 3, 9] = numpy.sum(x110 * (x1133 * x20 + x1167))
    result[5, 4, 0] = numpy.sum(x125 * (x1081 + x1135 * x20))
    result[5, 4, 1] = numpy.sum(x529 * (x1085 + x1137 * x20))
    result[5, 4, 2] = numpy.sum(x529 * (x1089 + x1139 * x20))
    result[5, 4, 3] = numpy.sum(x529 * (x1093 + x1142 * x20))
    result[5, 4, 4] = numpy.sum(x556 * (x1097 + x1145 * x20))
    result[5, 4, 5] = numpy.sum(x529 * (x1101 + x1149 * x20))
    result[5, 4, 6] = numpy.sum(x125 * (x1103 + x1151 * x20))
    result[5, 4, 7] = numpy.sum(x529 * (x1105 + x1153 * x20))
    result[5, 4, 8] = numpy.sum(x529 * (x1107 + x1155 * x20))
    result[5, 4, 9] = numpy.sum(x125 * (x1109 + x1157 * x20))
    result[5, 5, 0] = numpy.sum(x110 * (x1135 * x21 + x1173))
    result[5, 5, 1] = numpy.sum(x521 * (x1137 * x21 + x1175))
    result[5, 5, 2] = numpy.sum(x521 * (x1139 * x21 + x1179))
    result[5, 5, 3] = numpy.sum(x521 * (x1142 * x21 + x1181))
    result[5, 5, 4] = numpy.sum(x529 * (x1145 * x21 + x1183))
    result[5, 5, 5] = numpy.sum(x521 * (x1149 * x21 + x1187))
    result[5, 5, 6] = numpy.sum(x110 * (x1151 * x21 + x1188))
    result[5, 5, 7] = numpy.sum(x521 * (x1153 * x21 + x1189))
    result[5, 5, 8] = numpy.sum(x521 * (x1155 * x21 + x1190))
    result[5, 5, 9] = numpy.sum(x110 * (x1157 * x21 + x1191))
    result[6, 0, 0] = numpy.sum(x103 * (x0 * x875 + x0 * (x1192 * x1193 + x875) + x613))
    result[6, 0, 1] = numpy.sum(x110 * (x0 * x877 + x0 * (x0 * x1195 + x877) + x624))
    result[6, 0, 2] = numpy.sum(x110 * (x0 * x879 + x0 * (x1193 * x1196 + x879) + x628))
    result[6, 0, 3] = numpy.sum(x110 * (x0 * x882 + x0 * (x1197 * x881 + x882) + x632))
    result[6, 0, 4] = numpy.sum(x125 * (x0 * x885 + x0 * (x1197 * x884 + x885) + x636))
    result[6, 0, 5] = numpy.sum(x110 * (x0 * x888 + x0 * (x1193 * x1198 + x888) + x638))
    result[6, 0, 6] = numpy.sum(x103 * (x0 * x890 + x0 * (x1199 * x89 + x890) + x640))
    result[6, 0, 7] = numpy.sum(x110 * (x0 * x892 + x0 * (x1200 * x89 + x892) + x642))
    result[6, 0, 8] = numpy.sum(x110 * (x0 * x894 + x0 * (x1201 * x89 + x894) + x644))
    result[6, 0, 9] = numpy.sum(x103 * (x0 * x896 + x0 * (x1193 * x139 + x896) + x646))
    result[6, 1, 0] = numpy.sum(x124 * (x0 * x1204 + x927))
    result[6, 1, 1] = numpy.sum(x125 * (x0 * x1206 + x935))
    result[6, 1, 2] = numpy.sum(x125 * (x0 * x1208 + x937))
    result[6, 1, 3] = numpy.sum(x125 * (x0 * x1211 + x941))
    result[6, 1, 4] = numpy.sum(x225 * (x0 * x1213 + x945))
    result[6, 1, 5] = numpy.sum(x125 * (x0 * x1215 + x947))
    result[6, 1, 6] = numpy.sum(x124 * (x0 * x1217 + x948))
    result[6, 1, 7] = numpy.sum(x125 * (x0 * x1219 + x949))
    result[6, 1, 8] = numpy.sum(x125 * (x0 * x1221 + x950))
    result[6, 1, 9] = numpy.sum(x124 * (x0 * x1223 + x951))
    result[6, 2, 0] = numpy.sum(x124 * (x0 * x1226 + x957))
    result[6, 2, 1] = numpy.sum(x125 * (x0 * x1228 + x961))
    result[6, 2, 2] = numpy.sum(x125 * (x0 * x1230 + x965))
    result[6, 2, 3] = numpy.sum(x125 * (x0 * x1233 + x969))
    result[6, 2, 4] = numpy.sum(x225 * (x0 * x1235 + x973))
    result[6, 2, 5] = numpy.sum(x125 * (x0 * x1237 + x977))
    result[6, 2, 6] = numpy.sum(x124 * (x0 * x1239 + x979))
    result[6, 2, 7] = numpy.sum(x125 * (x0 * x1241 + x981))
    result[6, 2, 8] = numpy.sum(x125 * (x0 * x1243 + x983))
    result[6, 2, 9] = numpy.sum(x124 * (x0 * x1245 + x985))
    result[6, 3, 0] = numpy.sum(x103 * (x1192 * x1246 + x1202 * x20 + x1204 * x20))
    result[6, 3, 1] = numpy.sum(x110 * (x1194 * x1249 + x1205 * x20 + x1206 * x20))
    result[6, 3, 2] = numpy.sum(x110 * (x1196 * x1246 + x1207 * x20 + x1208 * x20))
    result[6, 3, 3] = numpy.sum(x110 * (x1209 * x20 + x1211 * x20 + x1250 * x860))
    result[6, 3, 4] = numpy.sum(x125 * (x1212 * x20 + x1213 * x20 + x1251 * x860))
    result[6, 3, 5] = numpy.sum(x110 * (x1198 * x1246 + x1214 * x20 + x1215 * x20))
    result[6, 3, 6] = numpy.sum(
        x103 * (x1216 * x20 + x1217 * x20 + x70 * (x104 * x1250 + 5.0 * x939))
    )
    result[6, 3, 7] = numpy.sum(
        x110 * (x1218 * x20 + x1219 * x20 + x70 * (x104 * x1251 + 5.0 * x943))
    )
    result[6, 3, 8] = numpy.sum(
        x110 * (x1220 * x20 + x1221 * x20 + x126 * x70 * (x1247 + x1248))
    )
    result[6, 3, 9] = numpy.sum(x103 * (x1222 * x20 + x1223 * x20 + x1246 * x139))
    result[6, 4, 0] = numpy.sum(x124 * (x1202 * x21 + x1226 * x20 + x1253))
    result[6, 4, 1] = numpy.sum(x125 * (x1205 * x21 + x1228 * x20 + x1255))
    result[6, 4, 2] = numpy.sum(x125 * (x1207 * x21 + x1230 * x20 + x1257))
    result[6, 4, 3] = numpy.sum(x125 * (x1209 * x21 + x1233 * x20 + x1259))
    result[6, 4, 4] = numpy.sum(x225 * (x1212 * x21 + x1235 * x20 + x1261))
    result[6, 4, 5] = numpy.sum(x125 * (x1214 * x21 + x1237 * x20 + x1263))
    result[6, 4, 6] = numpy.sum(x124 * (x1216 * x21 + x1239 * x20 + x1264))
    result[6, 4, 7] = numpy.sum(x125 * (x1218 * x21 + x1241 * x20 + x1265))
    result[6, 4, 8] = numpy.sum(x125 * (x1220 * x21 + x1243 * x20 + x1266))
    result[6, 4, 9] = numpy.sum(x124 * (x1222 * x21 + x1245 * x20 + x1267))
    result[6, 5, 0] = numpy.sum(x103 * (x1226 * x21 + x1270))
    result[6, 5, 1] = numpy.sum(x110 * (x1228 * x21 + x1274))
    result[6, 5, 2] = numpy.sum(x110 * (x1230 * x21 + x1277))
    result[6, 5, 3] = numpy.sum(x110 * (x1233 * x21 + x1280))
    result[6, 5, 4] = numpy.sum(x125 * (x1235 * x21 + x1284))
    result[6, 5, 5] = numpy.sum(x110 * (x1237 * x21 + x1287))
    result[6, 5, 6] = numpy.sum(x103 * (x1239 * x21 + x1289))
    result[6, 5, 7] = numpy.sum(x110 * (x1241 * x21 + x1291))
    result[6, 5, 8] = numpy.sum(x110 * (x1243 * x21 + x1294))
    result[6, 5, 9] = numpy.sum(x103 * (x1245 * x21 + x1296))
    result[7, 0, 0] = numpy.sum(x110 * (x0 * x898 + x0 * (x0 * x1297 + x898) + x660))
    result[7, 0, 1] = numpy.sum(x521 * (x0 * x900 + x0 * (x1298 * x666 + x900) + x668))
    result[7, 0, 2] = numpy.sum(x521 * (x0 * x902 + x0 * (x1298 * x673 + x902) + x675))
    result[7, 0, 3] = numpy.sum(x521 * (x0 * x905 + x0 * (x1197 * x904 + x905) + x679))
    result[7, 0, 4] = numpy.sum(x529 * (x0 * x909 + x0 * (x1197 * x908 + x909) + x684))
    result[7, 0, 5] = numpy.sum(x521 * (x0 * x912 + x0 * (x1197 * x911 + x912) + x689))
    result[7, 0, 6] = numpy.sum(x110 * (x0 * x914 + x0 * (x1299 * x89 + x914) + x691))
    result[7, 0, 7] = numpy.sum(x521 * (x0 * x916 + x0 * (x1300 * x89 + x916) + x693))
    result[7, 0, 8] = numpy.sum(x521 * (x0 * x918 + x0 * (x1302 * x89 + x918) + x696))
    result[7, 0, 9] = numpy.sum(x110 * (x0 * x920 + x0 * (x1303 * x89 + x920) + x698))
    result[7, 1, 0] = numpy.sum(x125 * (x0 * x1304 + x1066))
    result[7, 1, 1] = numpy.sum(x529 * (x0 * x1306 + x1067))
    result[7, 1, 2] = numpy.sum(x529 * (x0 * x1307 + x1068))
    result[7, 1, 3] = numpy.sum(x529 * (x0 * x1308 + x1069))
    result[7, 1, 4] = numpy.sum(x556 * (x0 * x1309 + x1070))
    result[7, 1, 5] = numpy.sum(x529 * (x0 * x1310 + x1071))
    result[7, 1, 6] = numpy.sum(x125 * (x0 * x1311 + x1072))
    result[7, 1, 7] = numpy.sum(x529 * (x0 * x1312 + x1073))
    result[7, 1, 8] = numpy.sum(x529 * (x0 * x1313 + x1074))
    result[7, 1, 9] = numpy.sum(x125 * (x0 * x1314 + x1075))
    result[7, 2, 0] = numpy.sum(x125 * (x0 * x1316 + x991))
    result[7, 2, 1] = numpy.sum(x529 * (x0 * x1319 + x995))
    result[7, 2, 2] = numpy.sum(x529 * (x0 * x1321 + x999))
    result[7, 2, 3] = numpy.sum(x529 * (x0 * x1323 + x1003))
    result[7, 2, 4] = numpy.sum(x556 * (x0 * x1325 + x1007))
    result[7, 2, 5] = numpy.sum(x529 * (x0 * x1327 + x1011))
    result[7, 2, 6] = numpy.sum(x125 * (x0 * x1329 + x1013))
    result[7, 2, 7] = numpy.sum(x529 * (x0 * x1331 + x1015))
    result[7, 2, 8] = numpy.sum(x529 * (x0 * x1333 + x1017))
    result[7, 2, 9] = numpy.sum(x125 * (x0 * x1335 + x1019))
    result[7, 3, 0] = numpy.sum(x110 * (x1224 * x20 + x1253 + x1304 * x20))
    result[7, 3, 1] = numpy.sum(x521 * (x1227 * x20 + x1255 + x1306 * x20))
    result[7, 3, 2] = numpy.sum(x521 * (x1229 * x20 + x1257 + x1307 * x20))
    result[7, 3, 3] = numpy.sum(x521 * (x1231 * x20 + x1259 + x1308 * x20))
    result[7, 3, 4] = numpy.sum(x529 * (x1234 * x20 + x1261 + x1309 * x20))
    result[7, 3, 5] = numpy.sum(x521 * (x1236 * x20 + x1263 + x1310 * x20))
    result[7, 3, 6] = numpy.sum(x110 * (x1238 * x20 + x1264 + x1311 * x20))
    result[7, 3, 7] = numpy.sum(x521 * (x1240 * x20 + x1265 + x1312 * x20))
    result[7, 3, 8] = numpy.sum(x521 * (x1242 * x20 + x1266 + x1313 * x20))
    result[7, 3, 9] = numpy.sum(x110 * (x1244 * x20 + x1267 + x1314 * x20))
    result[7, 4, 0] = numpy.sum(x125 * (x1270 + x1316 * x20))
    result[7, 4, 1] = numpy.sum(x529 * (x1274 + x1319 * x20))
    result[7, 4, 2] = numpy.sum(x529 * (x1277 + x1321 * x20))
    result[7, 4, 3] = numpy.sum(x529 * (x1280 + x1323 * x20))
    result[7, 4, 4] = numpy.sum(x556 * (x1284 + x1325 * x20))
    result[7, 4, 5] = numpy.sum(x529 * (x1287 + x1327 * x20))
    result[7, 4, 6] = numpy.sum(x125 * (x1289 + x1329 * x20))
    result[7, 4, 7] = numpy.sum(x529 * (x1291 + x1331 * x20))
    result[7, 4, 8] = numpy.sum(x529 * (x1294 + x1333 * x20))
    result[7, 4, 9] = numpy.sum(x125 * (x1296 + x1335 * x20))
    result[7, 5, 0] = numpy.sum(x110 * (x1316 * x21 + x1338))
    result[7, 5, 1] = numpy.sum(x521 * (x1319 * x21 + x1341))
    result[7, 5, 2] = numpy.sum(x521 * (x1321 * x21 + x1344))
    result[7, 5, 3] = numpy.sum(x521 * (x1323 * x21 + x1347))
    result[7, 5, 4] = numpy.sum(x529 * (x1325 * x21 + x1350))
    result[7, 5, 5] = numpy.sum(x521 * (x1327 * x21 + x1353))
    result[7, 5, 6] = numpy.sum(x110 * (x1329 * x21 + x1355))
    result[7, 5, 7] = numpy.sum(x521 * (x1331 * x21 + x1357))
    result[7, 5, 8] = numpy.sum(x521 * (x1333 * x21 + x1359))
    result[7, 5, 9] = numpy.sum(x110 * (x1335 * x21 + x1361))
    result[8, 0, 0] = numpy.sum(x110 * (x0 * x1043 + x0 * (x0 * x1362 + x1043) + x712))
    result[8, 0, 1] = numpy.sum(x521 * (x0 * x1045 + x0 * (x1045 + x1298 * x717) + x719))
    result[8, 0, 2] = numpy.sum(x521 * (x0 * x1047 + x0 * (x1047 + x1298 * x724) + x726))
    result[8, 0, 3] = numpy.sum(x521 * (x0 * x1050 + x0 * (x1049 * x1197 + x1050) + x731))
    result[8, 0, 4] = numpy.sum(x529 * (x0 * x1053 + x0 * (x1052 * x1197 + x1053) + x736))
    result[8, 0, 5] = numpy.sum(x521 * (x0 * x1056 + x0 * (x1055 * x1197 + x1056) + x741))
    result[8, 0, 6] = numpy.sum(x110 * (x0 * x1058 + x0 * (x1058 + x1363 * x89) + x743))
    result[8, 0, 7] = numpy.sum(x521 * (x0 * x1060 + x0 * (x1060 + x1364 * x89) + x745))
    result[8, 0, 8] = numpy.sum(x521 * (x0 * x1062 + x0 * (x1062 + x1365 * x89) + x747))
    result[8, 0, 9] = numpy.sum(x110 * (x0 * x1064 + x0 * (x1064 + x1366 * x89) + x749))
    result[8, 1, 0] = numpy.sum(x125 * (x0 * x1367 + x1158))
    result[8, 1, 1] = numpy.sum(x529 * (x0 * x1368 + x1159))
    result[8, 1, 2] = numpy.sum(x529 * (x0 * x1369 + x1160))
    result[8, 1, 3] = numpy.sum(x529 * (x0 * x1370 + x1161))
    result[8, 1, 4] = numpy.sum(x556 * (x0 * x1371 + x1162))
    result[8, 1, 5] = numpy.sum(x529 * (x0 * x1372 + x1163))
    result[8, 1, 6] = numpy.sum(x125 * (x0 * x1373 + x1164))
    result[8, 1, 7] = numpy.sum(x529 * (x0 * x1374 + x1165))
    result[8, 1, 8] = numpy.sum(x529 * (x0 * x1375 + x1166))
    result[8, 1, 9] = numpy.sum(x125 * (x0 * x1376 + x1167))
    result[8, 2, 0] = numpy.sum(x125 * (x0 * x1378 + x1081))
    result[8, 2, 1] = numpy.sum(x529 * (x0 * x1380 + x1085))
    result[8, 2, 2] = numpy.sum(x529 * (x0 * x1382 + x1089))
    result[8, 2, 3] = numpy.sum(x529 * (x0 * x1384 + x1093))
    result[8, 2, 4] = numpy.sum(x556 * (x0 * x1386 + x1097))
    result[8, 2, 5] = numpy.sum(x529 * (x0 * x1388 + x1101))
    result[8, 2, 6] = numpy.sum(x125 * (x0 * x1390 + x1103))
    result[8, 2, 7] = numpy.sum(x529 * (x0 * x1392 + x1105))
    result[8, 2, 8] = numpy.sum(x529 * (x0 * x1394 + x1107))
    result[8, 2, 9] = numpy.sum(x125 * (x0 * x1396 + x1109))
    result[8, 3, 0] = numpy.sum(x110 * (x1269 + x1315 * x20 + x1367 * x20))
    result[8, 3, 1] = numpy.sum(x521 * (x1273 + x1317 * x20 + x1368 * x20))
    result[8, 3, 2] = numpy.sum(x521 * (x1276 + x1320 * x20 + x1369 * x20))
    result[8, 3, 3] = numpy.sum(x521 * (x1279 + x1322 * x20 + x1370 * x20))
    result[8, 3, 4] = numpy.sum(x529 * (x1283 + x1324 * x20 + x1371 * x20))
    result[8, 3, 5] = numpy.sum(x521 * (x1286 + x1326 * x20 + x1372 * x20))
    result[8, 3, 6] = numpy.sum(x110 * (x1288 + x1328 * x20 + x1373 * x20))
    result[8, 3, 7] = numpy.sum(x521 * (x1290 + x1330 * x20 + x1374 * x20))
    result[8, 3, 8] = numpy.sum(x521 * (x1293 + x1332 * x20 + x1375 * x20))
    result[8, 3, 9] = numpy.sum(x110 * (x1295 + x1334 * x20 + x1376 * x20))
    result[8, 4, 0] = numpy.sum(x125 * (x1338 + x1378 * x20))
    result[8, 4, 1] = numpy.sum(x529 * (x1341 + x1380 * x20))
    result[8, 4, 2] = numpy.sum(x529 * (x1344 + x1382 * x20))
    result[8, 4, 3] = numpy.sum(x529 * (x1347 + x1384 * x20))
    result[8, 4, 4] = numpy.sum(x556 * (x1350 + x1386 * x20))
    result[8, 4, 5] = numpy.sum(x529 * (x1353 + x1388 * x20))
    result[8, 4, 6] = numpy.sum(x125 * (x1355 + x1390 * x20))
    result[8, 4, 7] = numpy.sum(x529 * (x1357 + x1392 * x20))
    result[8, 4, 8] = numpy.sum(x529 * (x1359 + x1394 * x20))
    result[8, 4, 9] = numpy.sum(x125 * (x1361 + x1396 * x20))
    result[8, 5, 0] = numpy.sum(x110 * (x1378 * x21 + x1398))
    result[8, 5, 1] = numpy.sum(x521 * (x1380 * x21 + x1400))
    result[8, 5, 2] = numpy.sum(x521 * (x1382 * x21 + x1402))
    result[8, 5, 3] = numpy.sum(x521 * (x1384 * x21 + x1404))
    result[8, 5, 4] = numpy.sum(x529 * (x1386 * x21 + x1406))
    result[8, 5, 5] = numpy.sum(x521 * (x1388 * x21 + x1408))
    result[8, 5, 6] = numpy.sum(x110 * (x1390 * x21 + x1409))
    result[8, 5, 7] = numpy.sum(x521 * (x1392 * x21 + x1410))
    result[8, 5, 8] = numpy.sum(x521 * (x1394 * x21 + x1411))
    result[8, 5, 9] = numpy.sum(x110 * (x1396 * x21 + x1412))
    result[9, 0, 0] = numpy.sum(x103 * (x0 * x1134 + x0 * (x1134 + x1192 * x1413) + x829))
    result[9, 0, 1] = numpy.sum(x110 * (x0 * x1136 + x0 * (x1136 + x1298 * x1414) + x833))
    result[9, 0, 2] = numpy.sum(x110 * (x0 * x1138 + x0 * (x1138 + x1298 * x837) + x840))
    result[9, 0, 3] = numpy.sum(x110 * (x0 * x1141 + x0 * (x1141 + x1413 * x1415) + x842))
    result[9, 0, 4] = numpy.sum(x125 * (x0 * x1144 + x0 * (x0 * x1417 + x1144) + x844))
    result[9, 0, 5] = numpy.sum(x110 * (x0 * x1148 + x0 * (x1146 * x1197 + x1148) + x848))
    result[9, 0, 6] = numpy.sum(x103 * (x0 * x1150 + x0 * (x1150 + x130 * x1413) + x850))
    result[9, 0, 7] = numpy.sum(x110 * (x0 * x1152 + x0 * (x0 * x1418 + x1152) + x852))
    result[9, 0, 8] = numpy.sum(x110 * (x0 * x1154 + x0 * (x0 * x1419 + x1154) + x854))
    result[9, 0, 9] = numpy.sum(x103 * (x0 * x1156 + x0 * (x1156 + x1420 * x89) + x856))
    result[9, 1, 0] = numpy.sum(x124 * (x0 * x1422 + x1080 + x1134 * x20))
    result[9, 1, 1] = numpy.sum(x125 * (x0 * x1423 + x1084 + x1136 * x20))
    result[9, 1, 2] = numpy.sum(x125 * (x0 * x1424 + x1088 + x1138 * x20))
    result[9, 1, 3] = numpy.sum(x125 * (x0 * x1425 + x1092 + x1141 * x20))
    result[9, 1, 4] = numpy.sum(x225 * (x0 * x1426 + x1096 + x1144 * x20))
    result[9, 1, 5] = numpy.sum(x125 * (x0 * x1427 + x1100 + x1148 * x20))
    result[9, 1, 6] = numpy.sum(x124 * (x0 * x1428 + x1102 + x1150 * x20))
    result[9, 1, 7] = numpy.sum(x125 * (x0 * x1429 + x1104 + x1152 * x20))
    result[9, 1, 8] = numpy.sum(x125 * (x0 * x1430 + x1106 + x1154 * x20))
    result[9, 1, 9] = numpy.sum(x124 * (x0 * x1431 + x1108 + x1156 * x20))
    result[9, 2, 0] = numpy.sum(x124 * (x0 * x1434 + x1173))
    result[9, 2, 1] = numpy.sum(x125 * (x0 * x1436 + x1175))
    result[9, 2, 2] = numpy.sum(x125 * (x0 * x1438 + x1179))
    result[9, 2, 3] = numpy.sum(x125 * (x0 * x1440 + x1181))
    result[9, 2, 4] = numpy.sum(x225 * (x0 * x1442 + x1183))
    result[9, 2, 5] = numpy.sum(x125 * (x0 * x1444 + x1187))
    result[9, 2, 6] = numpy.sum(x124 * (x0 * x1446 + x1188))
    result[9, 2, 7] = numpy.sum(x125 * (x0 * x1448 + x1189))
    result[9, 2, 8] = numpy.sum(x125 * (x0 * x1450 + x1190))
    result[9, 2, 9] = numpy.sum(x124 * (x0 * x1452 + x1191))
    result[9, 3, 0] = numpy.sum(x103 * (x1337 + x1377 * x20 + x1422 * x20))
    result[9, 3, 1] = numpy.sum(x110 * (x1340 + x1379 * x20 + x1423 * x20))
    result[9, 3, 2] = numpy.sum(x110 * (x1343 + x1381 * x20 + x1424 * x20))
    result[9, 3, 3] = numpy.sum(x110 * (x1346 + x1383 * x20 + x1425 * x20))
    result[9, 3, 4] = numpy.sum(x125 * (x1349 + x1385 * x20 + x1426 * x20))
    result[9, 3, 5] = numpy.sum(x110 * (x1352 + x1387 * x20 + x1427 * x20))
    result[9, 3, 6] = numpy.sum(x103 * (x1354 + x1389 * x20 + x1428 * x20))
    result[9, 3, 7] = numpy.sum(x110 * (x1356 + x1391 * x20 + x1429 * x20))
    result[9, 3, 8] = numpy.sum(x110 * (x1358 + x1393 * x20 + x1430 * x20))
    result[9, 3, 9] = numpy.sum(x103 * (x1360 + x1395 * x20 + x1431 * x20))
    result[9, 4, 0] = numpy.sum(x124 * (x1398 + x1434 * x20))
    result[9, 4, 1] = numpy.sum(x125 * (x1400 + x1436 * x20))
    result[9, 4, 2] = numpy.sum(x125 * (x1402 + x1438 * x20))
    result[9, 4, 3] = numpy.sum(x125 * (x1404 + x1440 * x20))
    result[9, 4, 4] = numpy.sum(x225 * (x1406 + x1442 * x20))
    result[9, 4, 5] = numpy.sum(x125 * (x1408 + x1444 * x20))
    result[9, 4, 6] = numpy.sum(x124 * (x1409 + x1446 * x20))
    result[9, 4, 7] = numpy.sum(x125 * (x1410 + x1448 * x20))
    result[9, 4, 8] = numpy.sum(x125 * (x1411 + x1450 * x20))
    result[9, 4, 9] = numpy.sum(x124 * (x1412 + x1452 * x20))
    result[9, 5, 0] = numpy.sum(x103 * (x1192 * x1453 + x1432 * x21 + x1434 * x21))
    result[9, 5, 1] = numpy.sum(x110 * (x1168 * x1318 * x9 + x1435 * x1453 + x1436 * x21))
    result[9, 5, 2] = numpy.sum(x110 * (x1194 * x1454 + x1437 * x21 + x1438 * x21))
    result[9, 5, 3] = numpy.sum(x110 * (x1415 * x1453 + x1439 * x21 + x1440 * x21))
    result[9, 5, 4] = numpy.sum(x125 * (x1416 * x1454 + x1441 * x21 + x1442 * x21))
    result[9, 5, 5] = numpy.sum(x110 * (x1443 * x21 + x1444 * x21 + x1455 * x860))
    result[9, 5, 6] = numpy.sum(x103 * (x130 * x1453 + x1445 * x21 + x1446 * x21))
    result[9, 5, 7] = numpy.sum(x110 * (x133 * x1454 + x1447 * x21 + x1448 * x21))
    result[9, 5, 8] = numpy.sum(x110 * (x120 * x1455 + x1449 * x21 + x1450 * x21))
    result[9, 5, 9] = numpy.sum(
        x103 * (x1451 * x21 + x1452 * x21 + x70 * (x111 * x1455 + 5.0 * x1185))
    )
    return result


def int3c2e3d_sph_324(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (fd|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 6, 15), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(5, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x2 * x20 * x23
    x25 = 2.0 * x19 * x24
    x26 = x18 * x25
    x27 = cx ** (-1.0)
    x28 = x14 ** (-0.5)
    x29 = boys(4, x17)
    x30 = 2.0 * x2 * x20 * x23 * x27 * x28 * x29 - x26
    x31 = x30 * x6
    x32 = -2.0 * x2 * x20 * x23 * x27 * x28 * x29 * x5 + x26 * x4
    x33 = -x32
    x34 = boys(6, x17)
    x35 = x25 * x34
    x36 = -2.0 * x18 * x2 * x20 * x23 * x27 * x28 * x5 + x35 * x4
    x37 = -x36
    x38 = x16 * x37
    x39 = x38 * x4
    x40 = x31 + x33 * x5 - x39
    x41 = -x32 - x38
    x42 = 2.0 * x6
    x43 = 2.0 * x18 * x2 * x20 * x23 * x27 * x28 - x35
    x44 = x43 * x6
    x45 = boys(7, x17)
    x46 = x25 * x45
    x47 = -2.0 * x2 * x20 * x23 * x27 * x28 * x34 * x5 + x4 * x46
    x48 = -x47
    x49 = x16 * x48
    x50 = x4 * x49
    x51 = x37 * x5 + x44 - x50
    x52 = x16 * x51
    x53 = x4 * x52
    x54 = x40 * x5 + x41 * x42 - x53
    x55 = -x30 * x6
    x56 = 3.0 * x6
    x57 = x6 * (2.0 * x2 * x20 * x23 * x27 * x28 * x34 - x46)
    x58 = boys(8, x17)
    x59 = x25 * x58
    x60 = 2.0 * x2 * x20 * x23 * x27 * x28 * x45 * x5 - x4 * x59
    x61 = x16 * x60
    x62 = -x4 * x61 + x48 * x5 + x57
    x63 = x16 * x62
    x64 = -x4 * x63 - x42 * (x36 + x49) + x5 * x51
    x65 = x16 * x64
    x66 = -x4 * x65 + x5 * x54 - x56 * (-x33 * x5 + x39 + x52 + x55)
    x67 = x4 * x66
    x68 = x54 * x6
    x69 = 4.0 * x68
    x70 = x67 + x69
    x71 = x1 * x15
    x72 = x4 * x71
    x73 = x4 * x54
    x74 = x40 * x6
    x75 = 3.0 * x74
    x76 = x73 + x75
    x77 = 4.0 * x6
    x78 = x71 * x77
    x79 = x70 * x72 + x76 * x78
    x80 = x4 * x40
    x81 = x33 * x6
    x82 = 2.0 * x81
    x83 = x80 + x82
    x84 = x56 * x71
    x85 = x72 * x76 + x83 * x84
    x86 = x72 * x79 + x78 * x85
    x87 = x33 * x4
    x88 = x27 * x29 * x42
    x89 = x24 * x28 * x88
    x90 = x87 + x89
    x91 = x42 * x71
    x92 = x72 * x83 + x90 * x91
    x93 = x72 * x85 + x84 * x92
    x94 = x71 * (x72 * x86 + x78 * x93)
    x95 = x19 * x20 * x23 * x88
    x96 = x72 * x93 + x84 * (x72 * x92 + x91 * (x4 * x95 + x72 * x90))
    x97 = x0 * x71
    x98 = -x43 * x6
    x99 = x6 * (2.0 * x2 * x20 * x23 * x27 * x28 * x45 - x59)
    x100 = x25 * boys(9, x17)
    x101 = x16 * x4
    x102 = (
        -x101
        * (
            x101
            * (
                x101
                * (
                    x101 * (x100 * x4 - 2.0 * x2 * x20 * x23 * x27 * x28 * x5 * x58)
                    + x5 * x60
                    + x99
                )
                + x42 * (x47 + x61)
                - x5 * x62
            )
            + x5 * x64
            - x56 * (-x37 * x5 + x50 + x63 + x98)
        )
        + x5 * x66
        + x77 * (x40 * x5 + 2.0 * x41 * x6 - x53 - x65)
    )
    x103 = x102 * x4
    x104 = x6 * x66
    x105 = 5.0 * x104
    x106 = x6 * x71
    x107 = 5.0 * x106
    x108 = da * db * dc
    x109 = 0.003174603174603175 * x108
    x110 = 4.58257569495584 * x109
    x111 = x71 * x9
    x112 = x111 * (x67 + x69)
    x113 = x111 * (x73 + x75)
    x114 = x112 * x72 + x113 * x78
    x115 = x111 * (x80 + x82)
    x116 = x113 * x72 + x115 * x84
    x117 = x71 * (x114 * x72 + x116 * x78)
    x118 = x9 * x95
    x119 = x116 * x72 + x84 * (x115 * x72 + x91 * (x111 * x87 + x118))
    x120 = 1.732050807568877
    x121 = 0.02222222222222222 * x108
    x122 = x120 * x121
    x123 = x12 * x71
    x124 = x123 * (x67 + x69)
    x125 = x123 * (x73 + x75)
    x126 = x124 * x72 + x125 * x78
    x127 = x123 * (x80 + x82)
    x128 = x125 * x72 + x127 * x84
    x129 = x71 * (x126 * x72 + x128 * x78)
    x130 = x12 * x95
    x131 = x128 * x72 + x84 * (x127 * x72 + x91 * (x123 * x87 + x130))
    x132 = x1**2 / x14**2
    x133 = x10 * x132
    x134 = x133 * (x67 + x69)
    x135 = x133 * (x73 + x75)
    x136 = x71 * (x134 * x72 + x135 * x78)
    x137 = x133 * x84 * (x80 + x82) + x135 * x72
    x138 = 2.23606797749979
    x139 = x121 * x138
    x140 = x132 * x9
    x141 = x12 * x140
    x142 = x141 * (x67 + x69)
    x143 = x141 * (x73 + x75)
    x144 = x71 * (x142 * x72 + x143 * x78)
    x145 = x141 * x84 * (x80 + x82) + x143 * x72
    x146 = 3.872983346207417
    x147 = x121 * x146
    x148 = x13 * x132
    x149 = x148 * (x67 + x69)
    x150 = x148 * (x73 + x75)
    x151 = x71 * (x149 * x72 + x150 * x78)
    x152 = x148 * x84 * (x80 + x82) + x150 * x72
    x153 = x9**3
    x154 = x1**3 / x14**3
    x155 = x153 * x154
    x156 = x155 * x71 * (x67 + x69)
    x157 = x155 * (x73 + x75)
    x158 = x10 * x154
    x159 = x12 * x158
    x160 = x159 * x71 * (x67 + x69)
    x161 = x159 * (x73 + x75)
    x162 = x154 * x9
    x163 = x13 * x162
    x164 = x163 * x71 * (x67 + x69)
    x165 = x163 * (x73 + x75)
    x166 = x12**3
    x167 = x154 * x166
    x168 = x167 * x71 * (x67 + x69)
    x169 = x167 * (x73 + x75)
    x170 = x1**4 / x14**4
    x171 = x170 * x9**4
    x172 = x171 * x66
    x173 = x0 * x54
    x174 = x153 * x170
    x175 = x12 * x174
    x176 = x175 * x66
    x177 = x170 * x66
    x178 = x10 * x13
    x179 = x177 * x178
    x180 = x170 * x173
    x181 = x102 * x170
    x182 = x166 * x9
    x183 = x177 * x182
    x184 = x12**4 * x170
    x185 = x184 * x66
    x186 = -x8 - A[1]
    x187 = -2.0 * x18 * x186 * x2 * x20 * x23 * x27 * x28 + x35 * x9
    x188 = -x187
    x189 = x16 * x188
    x190 = -2.0 * x186 * x2 * x20 * x23 * x27 * x28 * x29 + x26 * x9
    x191 = -x189 - x190
    x192 = x191 * x6
    x193 = -x190
    x194 = x189 * x4 - x193 * x5
    x195 = -x194
    x196 = -2.0 * x186 * x2 * x20 * x23 * x27 * x28 * x34 + x46 * x9
    x197 = -x196
    x198 = x16 * x197
    x199 = -x188 * x5 + x198 * x4
    x200 = -x199
    x201 = x16 * x200
    x202 = x201 * x4
    x203 = x192 + x195 * x5 - x202
    x204 = -x6 * (x187 + x198)
    x205 = 2.0 * x186 * x2 * x20 * x23 * x27 * x28 * x45 - x59 * x9
    x206 = x16 * x205
    x207 = x197 * x5 - x206 * x4
    x208 = x16 * x207
    x209 = x200 * x5 + x204 - x208 * x4
    x210 = x16 * x209
    x211 = x203 * x5 - x210 * x4 - x42 * (x194 + x201)
    x212 = x211 * x4
    x213 = x203 * x6
    x214 = 3.0 * x213
    x215 = x212 + x214
    x216 = x203 * x4
    x217 = x195 * x6
    x218 = 2.0 * x217
    x219 = x216 + x218
    x220 = x215 * x72 + x219 * x84
    x221 = x193 * x6
    x222 = x195 * x4
    x223 = x221 + x222
    x224 = x219 * x72 + x223 * x91
    x225 = x220 * x72 + x224 * x84
    x226 = x72 * (x221 + x223)
    x227 = x224 * x72 + x226 * x91
    x228 = x71 * (x225 * x72 + x227 * x84)
    x229 = x21 * x71
    x230 = x228 + x229 * x96
    x231 = -x6 * (x196 + x206)
    x232 = -x100 * x9 + 2.0 * x186 * x2 * x20 * x23 * x27 * x28 * x58
    x233 = (
        x101
        * (
            x101 * (x101 * (x101 * x232 - x205 * x5) + x207 * x5 + x231)
            - x209 * x5
            + x42 * (x199 + x208)
        )
        + x211 * x5
        + x56 * (x191 * x6 + x195 * x5 - x202 - x210)
    )
    x234 = x233 * x4
    x235 = x211 * x6
    x236 = 4.0 * x235
    x237 = x71 * (
        x225 * x78 + x72 * (x220 * x78 + x72 * (x215 * x78 + x72 * (x234 + x236)))
    )
    x238 = 0.009523809523809524 * x108
    x239 = 2.645751311064591 * x238
    x240 = x211 * x9
    x241 = x240 + x68
    x242 = x203 * x9
    x243 = x242 + x74
    x244 = x241 * x72 + x243 * x84
    x245 = x195 * x9
    x246 = x245 + x81
    x247 = x246 * x91
    x248 = x243 * x72 + x247
    x249 = x244 * x72 + x248 * x84
    x250 = x193 * x9
    x251 = x250 + x89
    x252 = x106 * x251 + x246 * x72
    x253 = x248 * x72 + x252 * x91
    x254 = x71 * (x249 * x72 + x253 * x84)
    x255 = x119 * x229 + x254
    x256 = x233 * x9
    x257 = x104 + x256
    x258 = x71 * (x249 * x78 + x72 * (x244 * x78 + x72 * (x241 * x78 + x257 * x72)))
    x259 = 0.06666666666666667 * x108
    x260 = x123 * (x212 + x214)
    x261 = x123 * x218
    x262 = x123 * x216 + x261
    x263 = x260 * x72 + x262 * x84
    x264 = x123 * x221
    x265 = x123 * x222 + x264
    x266 = x262 * x72 + x265 * x91
    x267 = x71 * (x263 * x72 + x266 * x84)
    x268 = x131 * x229 + x267
    x269 = x71 * (x263 * x78 + x72 * (x123 * x72 * (x234 + x236) + x260 * x78))
    x270 = x111 * (x241 + x68)
    x271 = x111 * (x243 + x74)
    x272 = x270 * x72 + x271 * x84
    x273 = x111 * (x246 + x81)
    x274 = x273 * x91
    x275 = x271 * x72 + x274
    x276 = x71 * (x272 * x72 + x275 * x84)
    x277 = x137 * x229 + x276
    x278 = x111 * (x104 + x257)
    x279 = x71 * (x272 * x78 + x72 * (x270 * x78 + x278 * x72))
    x280 = x123 * x68
    x281 = x123 * x240 + x280
    x282 = x123 * x74
    x283 = x123 * x242 + x282
    x284 = x281 * x72 + x283 * x84
    x285 = x123 * x81
    x286 = x123 * x245 + x285
    x287 = x286 * x91
    x288 = x283 * x72 + x287
    x289 = x71 * (x284 * x72 + x288 * x84)
    x290 = x145 * x229 + x289
    x291 = x104 * x123
    x292 = x123 * x256 + x291
    x293 = x71 * (x284 * x78 + x72 * (x281 * x78 + x292 * x72))
    x294 = x138 * x259
    x295 = x148 * (x212 + x214)
    x296 = x148 * x218
    x297 = x148 * x216 + x296
    x298 = x71 * (x295 * x72 + x297 * x84)
    x299 = x152 * x229 + x298
    x300 = x71 * (x148 * x72 * (x234 + x236) + x295 * x78)
    x301 = x111 * x270 + x133 * x68
    x302 = x111 * x271 + x133 * x74
    x303 = x71 * (x301 * x72 + x302 * x84)
    x304 = x157 * x229 + x303
    x305 = x104 * x133 + x111 * x278
    x306 = x71 * (x301 * x78 + x305 * x72)
    x307 = x111 * x281 + x141 * x68
    x308 = x111 * x283 + x141 * x74
    x309 = x71 * (x307 * x72 + x308 * x84)
    x310 = x161 * x229 + x309
    x311 = x104 * x141 + x111 * x292
    x312 = x71 * (x307 * x78 + x311 * x72)
    x313 = x148 * x68
    x314 = x148 * x240 + x313
    x315 = x148 * x74
    x316 = x148 * x242 + x315
    x317 = x71 * (x314 * x72 + x316 * x84)
    x318 = x165 * x229 + x317
    x319 = x104 * x148
    x320 = x148 * x256 + x319
    x321 = x71 * (x314 * x78 + x320 * x72)
    x322 = x167 * x71 * (x212 + x214)
    x323 = x169 * x229 + x322
    x324 = x167 * x71 * (x234 + x236)
    x325 = x71 * (x111 * x301 + x155 * x68)
    x326 = x21 * x54
    x327 = x171 * x326 + x325
    x328 = x71 * (x104 * x155 + x111 * x305)
    x329 = x71 * (x111 * x307 + x159 * x68)
    x330 = x175 * x326 + x329
    x331 = x71 * (x104 * x159 + x111 * x311)
    x332 = x71 * (x111 * x314 + x163 * x68)
    x333 = x170 * x326
    x334 = x178 * x333 + x332
    x335 = x71 * (x104 * x163 + x111 * x320)
    x336 = x167 * x68
    x337 = x71 * (x167 * x240 + x336)
    x338 = x182 * x333 + x337
    x339 = x104 * x167
    x340 = x71 * (x167 * x256 + x339)
    x341 = x184 * x211
    x342 = x184 * x326 + x341
    x343 = x184 * x233
    x344 = -x11 - A[2]
    x345 = x12 * x35 - 2.0 * x18 * x2 * x20 * x23 * x27 * x28 * x344
    x346 = -x345
    x347 = x16 * x346
    x348 = x12 * x26 - 2.0 * x2 * x20 * x23 * x27 * x28 * x29 * x344
    x349 = -x347 - x348
    x350 = x349 * x6
    x351 = -x348
    x352 = x347 * x4 - x351 * x5
    x353 = -x352
    x354 = x12 * x46 - 2.0 * x2 * x20 * x23 * x27 * x28 * x34 * x344
    x355 = -x354
    x356 = x16 * x355
    x357 = -x346 * x5 + x356 * x4
    x358 = -x357
    x359 = x16 * x358
    x360 = x359 * x4
    x361 = x350 + x353 * x5 - x360
    x362 = -x6 * (x345 + x356)
    x363 = -x12 * x59 + 2.0 * x2 * x20 * x23 * x27 * x28 * x344 * x45
    x364 = x16 * x363
    x365 = x355 * x5 - x364 * x4
    x366 = x16 * x365
    x367 = x358 * x5 + x362 - x366 * x4
    x368 = x16 * x367
    x369 = x361 * x5 - x368 * x4 - x42 * (x352 + x359)
    x370 = x369 * x4
    x371 = x361 * x6
    x372 = 3.0 * x371
    x373 = x370 + x372
    x374 = x361 * x4
    x375 = x353 * x6
    x376 = 2.0 * x375
    x377 = x374 + x376
    x378 = x373 * x72 + x377 * x84
    x379 = x351 * x6
    x380 = x353 * x4
    x381 = x379 + x380
    x382 = x377 * x72 + x381 * x91
    x383 = x378 * x72 + x382 * x84
    x384 = x72 * (x379 + x381)
    x385 = x382 * x72 + x384 * x91
    x386 = x71 * (x383 * x72 + x385 * x84)
    x387 = x22 * x71
    x388 = x386 + x387 * x96
    x389 = -x349 * x6
    x390 = -x6 * (x354 + x364)
    x391 = -x100 * x12 + 2.0 * x2 * x20 * x23 * x27 * x28 * x344 * x58
    x392 = (
        x101
        * (
            x101 * (x101 * (x101 * x391 - x363 * x5) + x365 * x5 + x390)
            - x367 * x5
            + x42 * (x357 + x366)
        )
        + x369 * x5
        - x56 * (-x353 * x5 + x360 + x368 + x389)
    )
    x393 = x392 * x4
    x394 = x369 * x6
    x395 = 4.0 * x394
    x396 = x71 * (
        x383 * x78 + x72 * (x378 * x78 + x72 * (x373 * x78 + x72 * (x393 + x395)))
    )
    x397 = x111 * (x370 + x372)
    x398 = x111 * (x374 + x376)
    x399 = x397 * x72 + x398 * x84
    x400 = x111 * x379
    x401 = x111 * x380 + x400
    x402 = x398 * x72 + x401 * x91
    x403 = x71 * (x399 * x72 + x402 * x84)
    x404 = x119 * x387 + x403
    x405 = x71 * (x399 * x78 + x72 * (x111 * x72 * (x393 + x395) + x397 * x78))
    x406 = x12 * x369 + x68
    x407 = x12 * x361 + x74
    x408 = x406 * x72 + x407 * x84
    x409 = x12 * x353 + x81
    x410 = x409 * x91
    x411 = x407 * x72 + x410
    x412 = x408 * x72 + x411 * x84
    x413 = x12 * x351 + x89
    x414 = x106 * x413
    x415 = x409 * x72 + x414
    x416 = x411 * x72 + x415 * x91
    x417 = x71 * (x412 * x72 + x416 * x84)
    x418 = x131 * x387 + x417
    x419 = x104 + x12 * x392
    x420 = x71 * (x412 * x78 + x72 * (x408 * x78 + x72 * (x406 * x78 + x419 * x72)))
    x421 = x133 * (x370 + x372)
    x422 = x133 * (x374 + x376)
    x423 = x71 * (x421 * x72 + x422 * x84)
    x424 = x137 * x387 + x423
    x425 = x71 * (x133 * x72 * (x393 + x395) + x421 * x78)
    x426 = x140 * x4
    x427 = x407 * x56
    x428 = x140 * x427 + x406 * x426
    x429 = x140 * x42
    x430 = x407 * x426 + x409 * x429
    x431 = x71 * (x428 * x72 + x430 * x84)
    x432 = x145 * x387 + x431
    x433 = x406 * x77
    x434 = x71 * (x428 * x78 + x72 * (x140 * x433 + x419 * x426))
    x435 = x123 * x406 + x280
    x436 = x123 * x407 + x282
    x437 = x435 * x72 + x436 * x84
    x438 = x123 * x409 + x285
    x439 = x438 * x91
    x440 = x436 * x72 + x439
    x441 = x71 * (x437 * x72 + x440 * x84)
    x442 = x152 * x387 + x441
    x443 = x123 * x419 + x291
    x444 = x71 * (x437 * x78 + x72 * (x435 * x78 + x443 * x72))
    x445 = x155 * x71 * (x370 + x372)
    x446 = x157 * x387 + x445
    x447 = x155 * x71 * (x393 + x395)
    x448 = x158 * x4
    x449 = x71 * (x158 * x427 + x406 * x448)
    x450 = x161 * x387 + x449
    x451 = x71 * (x158 * x433 + x419 * x448)
    x452 = x140 * x56
    x453 = x71 * (x426 * x435 + x436 * x452)
    x454 = x165 * x387 + x453
    x455 = x71 * (x140 * x435 * x77 + x426 * x443)
    x456 = x123 * x435 + x313
    x457 = x123 * x436 + x315
    x458 = x71 * (x456 * x72 + x457 * x84)
    x459 = x169 * x387 + x458
    x460 = x123 * x443 + x319
    x461 = x71 * (x456 * x78 + x460 * x72)
    x462 = x171 * x369
    x463 = x22 * x54
    x464 = x171 * x463 + x462
    x465 = x171 * x392
    x466 = x174 * x406
    x467 = x175 * x463 + x466
    x468 = x174 * x419
    x469 = x158 * x435
    x470 = x170 * x463
    x471 = x178 * x470 + x469
    x472 = x158 * x443
    x473 = x140 * x456
    x474 = x182 * x470 + x473
    x475 = x140 * x460
    x476 = x71 * (x123 * x456 + x336)
    x477 = x184 * x463 + x476
    x478 = x71 * (x123 * x460 + x339)
    x479 = x198 * x9
    x480 = x186 * x188 + x44 - x479
    x481 = x16 * x480
    x482 = x189 * x9
    x483 = x6 * (x186 * x193 - x481 - x482 - x55)
    x484 = x186 * x193 + x31 - x482
    x485 = x4 * x481 - x484 * x5
    x486 = -x485
    x487 = x186 * x197 - x206 * x9 + x57
    x488 = x16 * x487
    x489 = -x4 * x488 + x480 * x5
    x490 = x16 * x489
    x491 = -x4 * x490 + x483 + x486 * x5
    x492 = x6 * (x186 * x188 - x479 - x488 - x98)
    x493 = x16 * x9
    x494 = x186 * x205 - x232 * x493 + x99
    x495 = (
        -x101 * (x101 * (x101 * x494 - x487 * x5) + x489 * x5 + x492)
        - x42 * (x485 + x490)
        + x491 * x5
    )
    x496 = x4 * x495
    x497 = x491 * x6
    x498 = 3.0 * x497
    x499 = x4 * x491
    x500 = x486 * x6
    x501 = 2.0 * x500
    x502 = x499 + x501
    x503 = x484 * x6
    x504 = x4 * x486
    x505 = x503 + x504
    x506 = x502 * x72 + x505 * x91
    x507 = x72 * (x503 + x505)
    x508 = x506 * x72 + x507 * x91
    x509 = x71 * (
        x508 * x84 + x72 * (x506 * x84 + x72 * (x502 * x84 + x72 * (x496 + x498)))
    )
    x510 = x21 * x228 + x509
    x511 = x495 * x9
    x512 = 2.0 * x235
    x513 = x511 + x512
    x514 = x491 * x9
    x515 = 2.0 * x213
    x516 = x514 + x515
    x517 = x516 * x84
    x518 = x486 * x9
    x519 = x218 + x518
    x520 = x516 * x72 + x519 * x91
    x521 = x484 * x9
    x522 = 2.0 * x221
    x523 = x521 + x522
    x524 = x106 * x523 + x519 * x72
    x525 = x520 * x72 + x524 * x91
    x526 = x71 * (x525 * x84 + x72 * (x520 * x84 + x72 * (x513 * x72 + x517)))
    x527 = x21 * x254 + x526
    x528 = x123 * x498
    x529 = x123 * (x499 + x501)
    x530 = x123 * x503
    x531 = x123 * x504 + x530
    x532 = x529 * x72 + x531 * x91
    x533 = x71 * (x532 * x84 + x72 * (x529 * x84 + x72 * (x123 * x496 + x528)))
    x534 = x21 * x267 + x533
    x535 = x111 * x513 + x241 * x91
    x536 = x111 * x516 + x243 * x91
    x537 = x536 * x84
    x538 = x111 * x519 + x247
    x539 = x536 * x72 + x538 * x91
    x540 = x71 * (x539 * x84 + x72 * (x535 * x72 + x537))
    x541 = x21 * x276 + x540
    x542 = x123 * (x511 + x512)
    x543 = x123 * (x514 + x515)
    x544 = x543 * x84
    x545 = x123 * x518 + x261
    x546 = x543 * x72 + x545 * x91
    x547 = x71 * (x546 * x84 + x72 * (x542 * x72 + x544))
    x548 = x21 * x289 + x547
    x549 = x148 * x498
    x550 = x148 * (x499 + x501)
    x551 = x71 * (x550 * x84 + x72 * (x148 * x496 + x549))
    x552 = x21 * x298 + x551
    x553 = x111 * x535 + x270 * x91
    x554 = x111 * x536 + x271 * x91
    x555 = x554 * x84
    x556 = x71 * (x553 * x72 + x555)
    x557 = x21 * x303 + x556
    x558 = x111 * x542 + x281 * x91
    x559 = x111 * x543 + x283 * x91
    x560 = x559 * x84
    x561 = x71 * (x558 * x72 + x560)
    x562 = x21 * x309 + x561
    x563 = x148 * (x511 + x512)
    x564 = x148 * (x514 + x515)
    x565 = x564 * x84
    x566 = x71 * (x563 * x72 + x565)
    x567 = x21 * x317 + x566
    x568 = x167 * x498
    x569 = x71 * (x167 * x496 + x568)
    x570 = x21 * x322 + x569
    x571 = x71 * (x111 * x553 + x301 * x91)
    x572 = x21 * x325 + x571
    x573 = x71 * (x111 * x558 + x307 * x91)
    x574 = x21 * x329 + x573
    x575 = x71 * (x111 * x563 + x314 * x91)
    x576 = x21 * x332 + x575
    x577 = x167 * x71 * (x511 + x512)
    x578 = x21 * x337 + x577
    x579 = x184 * x495
    x580 = x21 * x341 + x579
    x581 = -x186 * x346 + x356 * x9
    x582 = -x581
    x583 = x16 * x582
    x584 = -x186 * x351 + x347 * x9
    x585 = -x6 * (x583 + x584)
    x586 = -x584
    x587 = x4 * x583 - x5 * x586
    x588 = -x587
    x589 = x186 * x355 - x364 * x9
    x590 = x16 * x589
    x591 = -x4 * x590 + x5 * x582
    x592 = x16 * x591
    x593 = -x4 * x592 + x5 * x588 + x585
    x594 = -x6 * (x581 + x590)
    x595 = x186 * x363 - x391 * x493
    x596 = (
        -x101 * (x101 * (x101 * x595 - x5 * x589) + x5 * x591 + x594)
        - x42 * (x587 + x592)
        + x5 * x593
    )
    x597 = x42 * x588
    x598 = x4 * x593 + x597
    x599 = x586 * x6
    x600 = x4 * x588 + x599
    x601 = x598 * x72 + x600 * x91
    x602 = x72 * (x599 + x600)
    x603 = x601 * x72 + x602 * x91
    x604 = x71 * (
        x603 * x84
        + x72 * (x601 * x84 + x72 * (x598 * x84 + x72 * (x4 * x596 + x56 * x593)))
    )
    x605 = x22 * x228 + x604
    x606 = x394 + x596 * x9
    x607 = x371 + x593 * x9
    x608 = x375 + x588 * x9
    x609 = x608 * x91
    x610 = x607 * x72 + x609
    x611 = x379 + x586 * x9
    x612 = x106 * x611 + x608 * x72
    x613 = x610 * x72 + x612 * x91
    x614 = x71 * (x613 * x84 + x72 * (x610 * x84 + x72 * (x606 * x72 + x607 * x84)))
    x615 = x22 * x254 + x614
    x616 = x12 * x596 + x235
    x617 = x12 * x593 + x213
    x618 = x12 * x588 + x217
    x619 = x618 * x91
    x620 = x617 * x72 + x619
    x621 = x12 * x586 + x221
    x622 = x106 * x621 + x618 * x72
    x623 = x620 * x72 + x622 * x91
    x624 = x71 * (x623 * x84 + x72 * (x620 * x84 + x72 * (x616 * x72 + x617 * x84)))
    x625 = x22 * x267 + x624
    x626 = x111 * (x394 + x606)
    x627 = x111 * (x371 + x607)
    x628 = x111 * (x375 + x608)
    x629 = x628 * x91
    x630 = x627 * x72 + x629
    x631 = x71 * (x630 * x84 + x72 * (x626 * x72 + x627 * x84))
    x632 = x22 * x276 + x631
    x633 = x106 * x406 + x111 * x616
    x634 = x106 * x407 + x111 * x617
    x635 = x106 * x409 + x111 * x618
    x636 = x635 * x91
    x637 = x634 * x72 + x636
    x638 = x71 * (x637 * x84 + x72 * (x633 * x72 + x634 * x84))
    x639 = x22 * x289 + x638
    x640 = x123 * (x235 + x616)
    x641 = x123 * (x213 + x617)
    x642 = x123 * (x217 + x618)
    x643 = x642 * x91
    x644 = x641 * x72 + x643
    x645 = x71 * (x644 * x84 + x72 * (x640 * x72 + x641 * x84))
    x646 = x22 * x298 + x645
    x647 = x111 * x626 + x133 * x394
    x648 = x111 * x627 + x133 * x371
    x649 = x71 * (x647 * x72 + x648 * x84)
    x650 = x22 * x303 + x649
    x651 = x140 * x6
    x652 = x111 * x633 + x406 * x651
    x653 = x111 * x634 + x407 * x651
    x654 = x71 * (x652 * x72 + x653 * x84)
    x655 = x22 * x309 + x654
    x656 = x106 * x435 + x111 * x640
    x657 = x106 * x436 + x111 * x641
    x658 = x71 * (x656 * x72 + x657 * x84)
    x659 = x22 * x317 + x658
    x660 = x123 * x640 + x148 * x235
    x661 = x123 * x641 + x148 * x213
    x662 = x71 * (x660 * x72 + x661 * x84)
    x663 = x22 * x322 + x662
    x664 = x71 * (x111 * x647 + x155 * x394)
    x665 = x22 * x325 + x664
    x666 = x158 * x6
    x667 = x71 * (x111 * x652 + x406 * x666)
    x668 = x22 * x329 + x667
    x669 = x71 * (x111 * x656 + x435 * x651)
    x670 = x22 * x332 + x669
    x671 = x71 * (x106 * x456 + x111 * x660)
    x672 = x22 * x337 + x671
    x673 = x71 * (x123 * x660 + x167 * x235)
    x674 = x22 * x341 + x673
    x675 = x12 * x356
    x676 = x344 * x346 + x44 - x675
    x677 = x16 * x676
    x678 = x12 * x347
    x679 = x6 * (x344 * x351 - x55 - x677 - x678)
    x680 = x31 + x344 * x351 - x678
    x681 = x4 * x677 - x5 * x680
    x682 = -x681
    x683 = -x12 * x364 + x344 * x355 + x57
    x684 = x16 * x683
    x685 = -x4 * x684 + x5 * x676
    x686 = x16 * x685
    x687 = -x4 * x686 + x5 * x682 + x679
    x688 = x6 * (x344 * x346 - x675 - x684 - x98)
    x689 = x12 * x16
    x690 = x344 * x363 - x391 * x689 + x99
    x691 = (
        -x101 * (x101 * (x101 * x690 - x5 * x683) + x5 * x685 + x688)
        - x42 * (x681 + x686)
        + x5 * x687
    )
    x692 = x4 * x691
    x693 = x6 * x687
    x694 = 3.0 * x693
    x695 = x4 * x687
    x696 = x6 * x682
    x697 = 2.0 * x696
    x698 = x695 + x697
    x699 = x6 * x680
    x700 = x4 * x682
    x701 = x699 + x700
    x702 = x698 * x72 + x701 * x91
    x703 = x72 * (x699 + x701)
    x704 = x702 * x72 + x703 * x91
    x705 = x71 * (
        x704 * x84 + x72 * (x702 * x84 + x72 * (x698 * x84 + x72 * (x692 + x694)))
    )
    x706 = x22 * x386 + x705
    x707 = x111 * (x695 + x697)
    x708 = x111 * x699
    x709 = x111 * x700 + x708
    x710 = x707 * x72 + x709 * x91
    x711 = x71 * (x710 * x84 + x72 * (x111 * x72 * (x692 + x694) + x707 * x84))
    x712 = x22 * x403 + x711
    x713 = x12 * x691 + 2.0 * x394
    x714 = x12 * x687 + 2.0 * x371
    x715 = x714 * x84
    x716 = x12 * x682 + x376
    x717 = x714 * x72 + x716 * x91
    x718 = x12 * x680 + 2.0 * x379
    x719 = x106 * x718
    x720 = x716 * x72 + x719
    x721 = x717 * x72 + x720 * x91
    x722 = x71 * (x72 * (x717 * x84 + x72 * (x713 * x72 + x715)) + x721 * x84)
    x723 = x22 * x417 + x722
    x724 = x133 * (x695 + x697)
    x725 = x71 * (x133 * x72 * (x692 + x694) + x724 * x84)
    x726 = x22 * x423 + x725
    x727 = x426 * x714 + x429 * x716
    x728 = x71 * (x72 * (x426 * x713 + x452 * x714) + x727 * x84)
    x729 = x22 * x431 + x728
    x730 = x123 * x713 + x406 * x91
    x731 = x123 * x714 + x407 * x91
    x732 = x731 * x84
    x733 = x123 * x716 + x410
    x734 = x72 * x731 + x733 * x91
    x735 = x71 * (x72 * (x72 * x730 + x732) + x734 * x84)
    x736 = x22 * x441 + x735
    x737 = x155 * x71 * (x692 + x694)
    x738 = x22 * x445 + x737
    x739 = x71 * (x158 * x56 * x714 + x448 * x713)
    x740 = x22 * x449 + x739
    x741 = x71 * (x426 * x730 + x452 * x731)
    x742 = x22 * x453 + x741
    x743 = x123 * x730 + x435 * x91
    x744 = x123 * x731 + x436 * x91
    x745 = x744 * x84
    x746 = x71 * (x72 * x743 + x745)
    x747 = x22 * x458 + x746
    x748 = x171 * x691
    x749 = x22 * x462 + x748
    x750 = x174 * x713
    x751 = x22 * x466 + x750
    x752 = x158 * x730
    x753 = x22 * x469 + x752
    x754 = x140 * x743
    x755 = x22 * x473 + x754
    x756 = x71 * (x123 * x743 + x456 * x91)
    x757 = x22 * x476 + x756
    x758 = x132 * x7
    x759 = x227 * x72 + x91 * (x221 * x758 + x226 * x72)
    x760 = 10.2469507659596
    x761 = x109 * x760
    x762 = x132 * x4
    x763 = x6 * x762
    x764 = x253 * x72 + x91 * (x251 * x763 + x252 * x72)
    x765 = x12 * x762
    x766 = x266 * x72 + x91 * (x221 * x765 + x265 * x72)
    x767 = x111 * x251 + x118
    x768 = x275 * x72 + x91 * (x106 * x767 + x273 * x72)
    x769 = 0.1111111111111111 * x108
    x770 = x123 * x250 + x130
    x771 = x288 * x72 + x91 * (x106 * x770 + x286 * x72)
    x772 = x120 * x769
    x773 = x148 * x221
    x774 = x297 * x72 + x91 * (x148 * x222 + x773)
    x775 = x91 * (x111 * x273 + x133 * x81)
    x776 = x302 * x72 + x775
    x777 = x91 * (x111 * x286 + x141 * x81)
    x778 = x308 * x72 + x777
    x779 = x148 * x81
    x780 = x91 * (x148 * x245 + x779)
    x781 = x316 * x72 + x780
    x782 = x167 * x218
    x783 = x167 * x216 + x782
    x784 = x111 * x302 + x155 * x74
    x785 = x111 * x308 + x159 * x74
    x786 = x111 * x316 + x163 * x74
    x787 = x167 * x74
    x788 = x167 * x242 + x787
    x789 = x184 * x203
    x790 = x503 * x758 + x507 * x72
    x791 = x71 * (x508 * x72 + x790 * x91)
    x792 = x229 * x759 + x791
    x793 = 5.916079783099616 * x238
    x794 = x523 * x763 + x524 * x72
    x795 = x71 * (x525 * x72 + x794 * x91)
    x796 = x229 * x764 + x795
    x797 = x503 * x765 + x531 * x72
    x798 = x71 * (x532 * x72 + x797 * x91)
    x799 = x229 * x766 + x798
    x800 = x111 * x523 + x251 * x91
    x801 = x106 * x800 + x538 * x72
    x802 = x71 * (x539 * x72 + x801 * x91)
    x803 = x229 * x768 + x802
    x804 = x123 * (x521 + x522)
    x805 = x106 * x804 + x545 * x72
    x806 = x71 * (x546 * x72 + x805 * x91)
    x807 = x229 * x771 + x806
    x808 = 0.3333333333333333 * x108
    x809 = x148 * x503
    x810 = x148 * x504 + x809
    x811 = x71 * (x550 * x72 + x810 * x91)
    x812 = x229 * x774 + x811
    x813 = x111 * x538 + x274
    x814 = x71 * (x554 * x72 + x813 * x91)
    x815 = x229 * x776 + x814
    x816 = x111 * x545 + x287
    x817 = x71 * (x559 * x72 + x816 * x91)
    x818 = x229 * x778 + x817
    x819 = x148 * x518 + x296
    x820 = x71 * (x564 * x72 + x819 * x91)
    x821 = x229 * x781 + x820
    x822 = x167 * x71 * (x499 + x501)
    x823 = x229 * x783 + x822
    x824 = x71 * (x111 * x554 + x302 * x91)
    x825 = x229 * x784 + x824
    x826 = x71 * (x111 * x559 + x308 * x91)
    x827 = x229 * x785 + x826
    x828 = x71 * (x111 * x564 + x316 * x91)
    x829 = x229 * x786 + x828
    x830 = x167 * x71 * (x514 + x515)
    x831 = x229 * x788 + x830
    x832 = x184 * x491
    x833 = x21 * x789 + x832
    x834 = x599 * x758 + x602 * x72
    x835 = x71 * (x603 * x72 + x834 * x91)
    x836 = x387 * x759 + x835
    x837 = x611 * x763 + x612 * x72
    x838 = x71 * (x613 * x72 + x837 * x91)
    x839 = x387 * x764 + x838
    x840 = x621 * x763 + x622 * x72
    x841 = x71 * (x623 * x72 + x840 * x91)
    x842 = x387 * x766 + x841
    x843 = x111 * x611 + x400
    x844 = x106 * x843 + x628 * x72
    x845 = x71 * (x630 * x72 + x844 * x91)
    x846 = x387 * x768 + x845
    x847 = x111 * x621 + x414
    x848 = x106 * x847 + x635 * x72
    x849 = x71 * (x637 * x72 + x848 * x91)
    x850 = x387 * x771 + x849
    x851 = x123 * x621 + x264
    x852 = x106 * x851 + x642 * x72
    x853 = x71 * (x644 * x72 + x852 * x91)
    x854 = x387 * x774 + x853
    x855 = x111 * x628 + x133 * x375
    x856 = x855 * x91
    x857 = x71 * (x648 * x72 + x856)
    x858 = x387 * x776 + x857
    x859 = x111 * x635 + x409 * x651
    x860 = x859 * x91
    x861 = x71 * (x653 * x72 + x860)
    x862 = x387 * x778 + x861
    x863 = x106 * x438 + x111 * x642
    x864 = x863 * x91
    x865 = x71 * (x657 * x72 + x864)
    x866 = x387 * x781 + x865
    x867 = x123 * x642 + x148 * x217
    x868 = x867 * x91
    x869 = x71 * (x661 * x72 + x868)
    x870 = x387 * x783 + x869
    x871 = x71 * (x111 * x648 + x155 * x371)
    x872 = x387 * x784 + x871
    x873 = x71 * (x111 * x653 + x407 * x666)
    x874 = x387 * x785 + x873
    x875 = x71 * (x111 * x657 + x436 * x651)
    x876 = x387 * x786 + x875
    x877 = x71 * (x106 * x457 + x111 * x661)
    x878 = x387 * x788 + x877
    x879 = x71 * (x123 * x661 + x167 * x213)
    x880 = x22 * x789 + x879
    x881 = x186 * x480 + 2.0 * x204 - x488 * x9
    x882 = x16 * x881
    x883 = x481 * x9
    x884 = x6 * (x186 * x484 + 2.0 * x191 * x6 - x882 - x883)
    x885 = x186 * x484 + 2.0 * x192 - x883
    x886 = -x4 * x882 + x5 * x885
    x887 = x186 * x487 + 2.0 * x231 - x493 * x494
    x888 = x101 * (x101 * x887 - x5 * x881) + x5 * x886 + x884
    x889 = x4 * x888
    x890 = x6 * x886
    x891 = 2.0 * x890
    x892 = x6 * x885
    x893 = x4 * x886
    x894 = x892 + x893
    x895 = x72 * (x892 + x894)
    x896 = x72 * x895 + x758 * x892
    x897 = x71 * (
        x72 * (x72 * (x72 * (x889 + x891) + x894 * x91) + x895 * x91) + x896 * x91
    )
    x898 = x21 * x791 + x897
    x899 = x888 * x9
    x900 = x498 + x899
    x901 = x886 * x9
    x902 = 3.0 * x500
    x903 = x901 + x902
    x904 = x885 * x9
    x905 = 3.0 * x503
    x906 = x904 + x905
    x907 = x106 * x906 + x72 * x903
    x908 = x72 * x907 + x763 * x906
    x909 = x71 * (x72 * (x72 * (x72 * x900 + x903 * x91) + x907 * x91) + x908 * x91)
    x910 = x21 * x795 + x909
    x911 = x123 * x892
    x912 = x123 * x893 + x911
    x913 = x72 * x912 + x765 * x892
    x914 = x71 * (x72 * (x123 * x72 * (x889 + x891) + x91 * x912) + x91 * x913)
    x915 = x21 * x798 + x914
    x916 = x111 * x900 + x517
    x917 = x111 * x903 + x519 * x84
    x918 = x111 * x906 + x523 * x84
    x919 = x106 * x918 + x72 * x917
    x920 = x71 * (x72 * (x72 * x916 + x91 * x917) + x91 * x919)
    x921 = x21 * x802 + x920
    x922 = x123 * x899 + x528
    x923 = x123 * (x901 + x902)
    x924 = x123 * (x904 + x905)
    x925 = x106 * x924 + x72 * x923
    x926 = x71 * (x72 * (x72 * x922 + x91 * x923) + x91 * x925)
    x927 = x21 * x806 + x926
    x928 = x148 * x892
    x929 = x148 * x893 + x928
    x930 = x71 * (x148 * x72 * (x889 + x891) + x91 * x929)
    x931 = x21 * x811 + x930
    x932 = x111 * x916 + x537
    x933 = x111 * x917 + x538 * x84
    x934 = x71 * (x72 * x932 + x91 * x933)
    x935 = x21 * x814 + x934
    x936 = x111 * x922 + x544
    x937 = x111 * x923 + x545 * x84
    x938 = x71 * (x72 * x936 + x91 * x937)
    x939 = x21 * x817 + x938
    x940 = x148 * x899 + x549
    x941 = x148 * (x901 + x902)
    x942 = x71 * (x72 * x940 + x91 * x941)
    x943 = x21 * x820 + x942
    x944 = x167 * x71 * (x889 + x891)
    x945 = x21 * x822 + x944
    x946 = x71 * (x111 * x932 + x555)
    x947 = x21 * x824 + x946
    x948 = x71 * (x111 * x936 + x560)
    x949 = x21 * x826 + x948
    x950 = x71 * (x111 * x940 + x565)
    x951 = x21 * x828 + x950
    x952 = x71 * (x167 * x899 + x568)
    x953 = x21 * x830 + x952
    x954 = x184 * x888
    x955 = x21 * x832 + x954
    x956 = x186 * x582 + x362 - x590 * x9
    x957 = x16 * x956
    x958 = x583 * x9
    x959 = x6 * (x186 * x586 - x389 - x957 - x958)
    x960 = x186 * x586 + x350 - x958
    x961 = -x4 * x957 + x5 * x960
    x962 = x186 * x589 + x390 - x493 * x595
    x963 = x101 * (x101 * x962 - x5 * x956) + x5 * x961 + x959
    x964 = x42 * x961
    x965 = x6 * x960
    x966 = x4 * x961 + x965
    x967 = x72 * (x965 + x966)
    x968 = x72 * x967 + x758 * x965
    x969 = x71 * (
        x72 * (x72 * (x72 * (x4 * x963 + x964) + x91 * x966) + x91 * x967) + x91 * x968
    )
    x970 = x22 * x791 + x969
    x971 = x42 * x593
    x972 = x9 * x963 + x971
    x973 = x597 + x9 * x961
    x974 = 2.0 * x599
    x975 = x9 * x960 + x974
    x976 = x106 * x975 + x72 * x973
    x977 = x72 * x976 + x763 * x975
    x978 = x71 * (x72 * (x72 * (x72 * x972 + x91 * x973) + x91 * x976) + x91 * x977)
    x979 = x22 * x795 + x978
    x980 = x12 * x963 + x497
    x981 = x12 * x961 + x500
    x982 = x91 * x981
    x983 = x12 * x960 + x503
    x984 = x106 * x983 + x72 * x981
    x985 = x72 * x984 + x763 * x983
    x986 = x71 * (x72 * (x72 * (x72 * x980 + x982) + x91 * x984) + x91 * x985)
    x987 = x22 * x798 + x986
    x988 = x111 * x972 + x607 * x91
    x989 = x111 * x973 + x609
    x990 = x111 * x975 + x611 * x91
    x991 = x106 * x990 + x72 * x989
    x992 = x71 * (x72 * (x72 * x988 + x91 * x989) + x91 * x991)
    x993 = x22 * x802 + x992
    x994 = x617 * x91
    x995 = x111 * x980 + x994
    x996 = x111 * x981 + x619
    x997 = x621 * x91
    x998 = x111 * x983 + x997
    x999 = x106 * x998 + x72 * x996
    x1000 = x71 * (x72 * (x72 * x995 + x91 * x996) + x91 * x999)
    x1001 = x1000 + x22 * x806
    x1002 = x123 * (x497 + x980)
    x1003 = x123 * (x500 + x981)
    x1004 = x1003 * x91
    x1005 = x123 * x983 + x530
    x1006 = x1003 * x72 + x1005 * x106
    x1007 = x71 * (x1006 * x91 + x72 * (x1002 * x72 + x1004))
    x1008 = x1007 + x22 * x811
    x1009 = x111 * x988 + x627 * x91
    x1010 = x111 * x989 + x629
    x1011 = x71 * (x1009 * x72 + x1010 * x91)
    x1012 = x1011 + x22 * x814
    x1013 = x111 * x995 + x634 * x91
    x1014 = x111 * x996 + x636
    x1015 = x71 * (x1013 * x72 + x1014 * x91)
    x1016 = x1015 + x22 * x817
    x1017 = x641 * x91
    x1018 = x1002 * x111 + x1017
    x1019 = x1003 * x111 + x643
    x1020 = x71 * (x1018 * x72 + x1019 * x91)
    x1021 = x1020 + x22 * x820
    x1022 = x1002 * x123 + x148 * x497
    x1023 = x1003 * x123 + x148 * x500
    x1024 = x1023 * x91
    x1025 = x71 * (x1022 * x72 + x1024)
    x1026 = x1025 + x22 * x822
    x1027 = x71 * (x1009 * x111 + x648 * x91)
    x1028 = x1027 + x22 * x824
    x1029 = x71 * (x1013 * x111 + x653 * x91)
    x1030 = x1029 + x22 * x826
    x1031 = x71 * (x1018 * x111 + x657 * x91)
    x1032 = x1031 + x22 * x828
    x1033 = x661 * x91
    x1034 = x71 * (x1022 * x111 + x1033)
    x1035 = x1034 + x22 * x830
    x1036 = x71 * (x1022 * x123 + x167 * x497)
    x1037 = x1036 + x22 * x832
    x1038 = x186 * x676 - x684 * x9
    x1039 = x1038 * x16
    x1040 = -x186 * x680 + x677 * x9
    x1041 = -x6 * (x1039 + x1040)
    x1042 = -x1040
    x1043 = -x1039 * x4 + x1042 * x5
    x1044 = x186 * x683 - x493 * x690
    x1045 = x101 * (x101 * x1044 - x1038 * x5) + x1041 + x1043 * x5
    x1046 = x1043 * x42
    x1047 = x1042 * x6
    x1048 = x1043 * x4 + x1047
    x1049 = x72 * (x1047 + x1048)
    x1050 = x1047 * x758 + x1049 * x72
    x1051 = x71 * (
        x1050 * x91
        + x72 * (x1049 * x91 + x72 * (x1048 * x91 + x72 * (x1045 * x4 + x1046)))
    )
    x1052 = x1051 + x22 * x835
    x1053 = x1045 * x9 + x693
    x1054 = x1043 * x9 + x696
    x1055 = x1054 * x91
    x1056 = x1042 * x9 + x699
    x1057 = x1054 * x72 + x1056 * x106
    x1058 = x1056 * x763 + x1057 * x72
    x1059 = x71 * (x1058 * x91 + x72 * (x1057 * x91 + x72 * (x1053 * x72 + x1055)))
    x1060 = x1059 + x22 * x838
    x1061 = x1045 * x12 + x971
    x1062 = x1043 * x12 + x597
    x1063 = x1062 * x91
    x1064 = x1042 * x12 + x974
    x1065 = x106 * x1064 + x1062 * x72
    x1066 = x1064 * x763 + x1065 * x72
    x1067 = x71 * (x1066 * x91 + x72 * (x1065 * x91 + x72 * (x1061 * x72 + x1063)))
    x1068 = x1067 + x22 * x841
    x1069 = x111 * (x1053 + x693)
    x1070 = x111 * (x1054 + x696)
    x1071 = x1070 * x91
    x1072 = x1056 * x111 + x708
    x1073 = x106 * x1072 + x1070 * x72
    x1074 = x71 * (x1073 * x91 + x72 * (x1069 * x72 + x1071))
    x1075 = x1074 + x22 * x845
    x1076 = x106 * x714 + x1061 * x111
    x1077 = x106 * x716 + x1062 * x111
    x1078 = x1077 * x91
    x1079 = x1064 * x111 + x719
    x1080 = x106 * x1079 + x1077 * x72
    x1081 = x71 * (x1080 * x91 + x72 * (x1076 * x72 + x1078))
    x1082 = x1081 + x22 * x849
    x1083 = x1061 * x123 + x994
    x1084 = x1062 * x123 + x619
    x1085 = x1084 * x91
    x1086 = x1064 * x123 + x997
    x1087 = x106 * x1086 + x1084 * x72
    x1088 = x71 * (x1087 * x91 + x72 * (x1083 * x72 + x1085))
    x1089 = x1088 + x22 * x853
    x1090 = x1069 * x111 + x133 * x693
    x1091 = x1070 * x111 + x133 * x696
    x1092 = x1091 * x91
    x1093 = x71 * (x1090 * x72 + x1092)
    x1094 = x1093 + x22 * x857
    x1095 = x1076 * x111 + x651 * x714
    x1096 = x1077 * x111 + x651 * x716
    x1097 = x1096 * x91
    x1098 = x71 * (x1095 * x72 + x1097)
    x1099 = x1098 + x22 * x861
    x1100 = x106 * x731 + x1083 * x111
    x1101 = x106 * x733 + x1084 * x111
    x1102 = x1101 * x91
    x1103 = x71 * (x1100 * x72 + x1102)
    x1104 = x1103 + x22 * x865
    x1105 = x1017 + x1083 * x123
    x1106 = x1084 * x123 + x643
    x1107 = x1106 * x91
    x1108 = x71 * (x1105 * x72 + x1107)
    x1109 = x1108 + x22 * x869
    x1110 = x71 * (x1090 * x111 + x155 * x693)
    x1111 = x1110 + x22 * x871
    x1112 = x71 * (x1095 * x111 + x666 * x714)
    x1113 = x1112 + x22 * x873
    x1114 = x71 * (x1100 * x111 + x651 * x731)
    x1115 = x1114 + x22 * x875
    x1116 = x71 * (x106 * x744 + x1105 * x111)
    x1117 = x1116 + x22 * x877
    x1118 = x71 * (x1033 + x1105 * x123)
    x1119 = x1118 + x22 * x879
    x1120 = x385 * x72 + x91 * (x379 * x758 + x384 * x72)
    x1121 = x402 * x72 + x91 * (x379 * x426 + x401 * x72)
    x1122 = x416 * x72 + x91 * (x413 * x763 + x415 * x72)
    x1123 = x133 * x379
    x1124 = x422 * x72 + x91 * (x1123 + x133 * x380)
    x1125 = x413 * x651
    x1126 = x430 * x72 + x91 * (x1125 + x409 * x426)
    x1127 = x123 * x413 + x130
    x1128 = x106 * x1127
    x1129 = x440 * x72 + x91 * (x1128 + x438 * x72)
    x1130 = x155 * (x374 + x376)
    x1131 = x158 * x42
    x1132 = x1131 * x409 + x407 * x448
    x1133 = x426 * x436 + x429 * x438
    x1134 = x123 * x438 + x779
    x1135 = x1134 * x91
    x1136 = x1135 + x457 * x72
    x1137 = x171 * x361
    x1138 = x174 * x407
    x1139 = x158 * x436
    x1140 = x140 * x457
    x1141 = x123 * x457 + x787
    x1142 = x1120 * x229 + x835
    x1143 = x1121 * x229 + x838
    x1144 = x1122 * x229 + x841
    x1145 = x1124 * x229 + x845
    x1146 = x1126 * x229 + x849
    x1147 = x1129 * x229 + x853
    x1148 = x1130 * x229 + x857
    x1149 = x1132 * x229 + x861
    x1150 = x1133 * x229 + x865
    x1151 = x1136 * x229 + x869
    x1152 = x1137 * x21 + x871
    x1153 = x1138 * x21 + x873
    x1154 = x1139 * x21 + x875
    x1155 = x1140 * x21 + x877
    x1156 = x1141 * x229 + x879
    x1157 = x699 * x758 + x703 * x72
    x1158 = x71 * (x1157 * x91 + x704 * x72)
    x1159 = x1120 * x387 + x1158
    x1160 = x426 * x699 + x709 * x72
    x1161 = x71 * (x1160 * x91 + x710 * x72)
    x1162 = x1121 * x387 + x1161
    x1163 = x718 * x763 + x72 * x720
    x1164 = x71 * (x1163 * x91 + x72 * x721)
    x1165 = x1122 * x387 + x1164
    x1166 = x133 * x699
    x1167 = x1166 + x133 * x700
    x1168 = x71 * (x1167 * x91 + x72 * x724)
    x1169 = x1124 * x387 + x1168
    x1170 = x651 * x718
    x1171 = x1170 + x426 * x716
    x1172 = x71 * (x1171 * x91 + x72 * x727)
    x1173 = x1126 * x387 + x1172
    x1174 = x123 * x718 + x413 * x91
    x1175 = x106 * x1174
    x1176 = x1175 + x72 * x733
    x1177 = x71 * (x1176 * x91 + x72 * x734)
    x1178 = x1129 * x387 + x1177
    x1179 = x155 * x71 * (x695 + x697)
    x1180 = x1130 * x387 + x1179
    x1181 = x71 * (x1131 * x716 + x448 * x714)
    x1182 = x1132 * x387 + x1181
    x1183 = x71 * (x426 * x731 + x429 * x733)
    x1184 = x1133 * x387 + x1183
    x1185 = x123 * x733 + x439
    x1186 = x71 * (x1185 * x91 + x72 * x744)
    x1187 = x1136 * x387 + x1186
    x1188 = x171 * x687
    x1189 = x1137 * x22 + x1188
    x1190 = x174 * x714
    x1191 = x1138 * x22 + x1190
    x1192 = x158 * x731
    x1193 = x1139 * x22 + x1192
    x1194 = x140 * x744
    x1195 = x1140 * x22 + x1194
    x1196 = x71 * (x123 * x744 + x457 * x91)
    x1197 = x1141 * x387 + x1196
    x1198 = x21 * x835 + x969
    x1199 = x21 * x838 + x978
    x1200 = x21 * x841 + x986
    x1201 = x21 * x845 + x992
    x1202 = x1000 + x21 * x849
    x1203 = x1007 + x21 * x853
    x1204 = x1011 + x21 * x857
    x1205 = x1015 + x21 * x861
    x1206 = x1020 + x21 * x865
    x1207 = x1025 + x21 * x869
    x1208 = x1027 + x21 * x871
    x1209 = x1029 + x21 * x873
    x1210 = x1031 + x21 * x875
    x1211 = x1034 + x21 * x877
    x1212 = x1036 + x21 * x879
    x1213 = -x12 * x684 + x344 * x676 + 2.0 * x362
    x1214 = x1213 * x16
    x1215 = x12 * x677
    x1216 = x6 * (-x1214 - x1215 + x344 * x680 + 2.0 * x349 * x6)
    x1217 = -x1215 + x344 * x680 + 2.0 * x350
    x1218 = -x1214 * x4 + x1217 * x5
    x1219 = x344 * x683 + 2.0 * x390 - x689 * x690
    x1220 = x101 * (x101 * x1219 - x1213 * x5) + x1216 + x1218 * x5
    x1221 = x1220 * x4
    x1222 = x1218 * x6
    x1223 = 2.0 * x1222
    x1224 = x1217 * x6
    x1225 = x1218 * x4
    x1226 = x1224 + x1225
    x1227 = x72 * (x1224 + x1226)
    x1228 = x1224 * x758 + x1227 * x72
    x1229 = x71 * (
        x1228 * x91 + x72 * (x1227 * x91 + x72 * (x1226 * x91 + x72 * (x1221 + x1223)))
    )
    x1230 = x1158 * x22 + x1229
    x1231 = x111 * x1224
    x1232 = x111 * x1225 + x1231
    x1233 = x1224 * x426 + x1232 * x72
    x1234 = x71 * (x1233 * x91 + x72 * (x111 * x72 * (x1221 + x1223) + x1232 * x91))
    x1235 = x1161 * x22 + x1234
    x1236 = x12 * x1220 + x694
    x1237 = x12 * x1218 + 3.0 * x696
    x1238 = x12 * x1217 + 3.0 * x699
    x1239 = x106 * x1238
    x1240 = x1237 * x72 + x1239
    x1241 = x1238 * x763 + x1240 * x72
    x1242 = x71 * (x1241 * x91 + x72 * (x1240 * x91 + x72 * (x1236 * x72 + x1237 * x91)))
    x1243 = x1164 * x22 + x1242
    x1244 = x1224 * x133
    x1245 = x1225 * x133 + x1244
    x1246 = x71 * (x1245 * x91 + x133 * x72 * (x1221 + x1223))
    x1247 = x1168 * x22 + x1246
    x1248 = x1238 * x651
    x1249 = x1237 * x426 + x1248
    x1250 = x71 * (x1249 * x91 + x72 * (x1236 * x426 + x1237 * x429))
    x1251 = x1172 * x22 + x1250
    x1252 = x123 * x1236 + x715
    x1253 = x123 * x1237 + x716 * x84
    x1254 = x123 * x1238 + x718 * x84
    x1255 = x106 * x1254
    x1256 = x1253 * x72 + x1255
    x1257 = x71 * (x1256 * x91 + x72 * (x1252 * x72 + x1253 * x91))
    x1258 = x1177 * x22 + x1257
    x1259 = x155 * x71 * (x1221 + x1223)
    x1260 = x1179 * x22 + x1259
    x1261 = x71 * (x1131 * x1237 + x1236 * x448)
    x1262 = x1181 * x22 + x1261
    x1263 = x71 * (x1252 * x426 + x1253 * x429)
    x1264 = x1183 * x22 + x1263
    x1265 = x123 * x1252 + x732
    x1266 = x123 * x1253 + x733 * x84
    x1267 = x71 * (x1265 * x72 + x1266 * x91)
    x1268 = x1186 * x22 + x1267
    x1269 = x1220 * x171
    x1270 = x1188 * x22 + x1269
    x1271 = x1236 * x174
    x1272 = x1190 * x22 + x1271
    x1273 = x1252 * x158
    x1274 = x1192 * x22 + x1273
    x1275 = x1265 * x140
    x1276 = x1194 * x22 + x1275
    x1277 = x71 * (x123 * x1265 + x745)
    x1278 = x1196 * x22 + x1277
    x1279 = x4**3
    x1280 = x1279 * x154
    x1281 = x1280 * x503 + x72 * x790
    x1282 = x154 * x7
    x1283 = x1282 * x6
    x1284 = x1283 * x523 + x72 * x794
    x1285 = x12 * x1282
    x1286 = x1285 * x503 + x72 * x797
    x1287 = x72 * x801 + x763 * x800
    x1288 = x72 * x805 + x763 * x804
    x1289 = x13 * x154 * x4
    x1290 = x1289 * x503 + x72 * x810
    x1291 = x111 * x800 + x767 * x91
    x1292 = x106 * x1291 + x72 * x813
    x1293 = x111 * x804 + x770 * x91
    x1294 = x106 * x1293 + x72 * x816
    x1295 = x148 * (x521 + x522)
    x1296 = x106 * x1295 + x72 * x819
    x1297 = x167 * x503
    x1298 = x1297 + x167 * x504
    x1299 = x111 * x813 + x775
    x1300 = x111 * x816 + x777
    x1301 = x111 * x819 + x780
    x1302 = x167 * x518 + x782
    x1303 = x184 * x486
    x1304 = x71 * (x1280 * x892 + x72 * x896)
    x1305 = x1281 * x229 + x1304
    x1306 = x71 * (x1283 * x906 + x72 * x908)
    x1307 = x1284 * x229 + x1306
    x1308 = x71 * (x1285 * x892 + x72 * x913)
    x1309 = x1286 * x229 + x1308
    x1310 = x71 * (x72 * x919 + x763 * x918)
    x1311 = x1287 * x229 + x1310
    x1312 = x71 * (x72 * x925 + x763 * x924)
    x1313 = x1288 * x229 + x1312
    x1314 = x71 * (x1289 * x892 + x72 * x929)
    x1315 = x1290 * x229 + x1314
    x1316 = x111 * x918 + x800 * x84
    x1317 = x71 * (x106 * x1316 + x72 * x933)
    x1318 = x1292 * x229 + x1317
    x1319 = x111 * x924 + x804 * x84
    x1320 = x71 * (x106 * x1319 + x72 * x937)
    x1321 = x1294 * x229 + x1320
    x1322 = x148 * (x904 + x905)
    x1323 = x71 * (x106 * x1322 + x72 * x941)
    x1324 = x1296 * x229 + x1323
    x1325 = x167 * x892
    x1326 = x71 * (x1325 + x167 * x893)
    x1327 = x1298 * x229 + x1326
    x1328 = x71 * (x111 * x933 + x813 * x84)
    x1329 = x1299 * x229 + x1328
    x1330 = x71 * (x111 * x937 + x816 * x84)
    x1331 = x1300 * x229 + x1330
    x1332 = x71 * (x111 * x941 + x819 * x84)
    x1333 = x1301 * x229 + x1332
    x1334 = x167 * x71 * (x901 + x902)
    x1335 = x1302 * x229 + x1334
    x1336 = x184 * x886
    x1337 = x1303 * x21 + x1336
    x1338 = x71 * (x1280 * x965 + x72 * x968)
    x1339 = x1281 * x387 + x1338
    x1340 = x71 * (x1283 * x975 + x72 * x977)
    x1341 = x1284 * x387 + x1340
    x1342 = x71 * (x1283 * x983 + x72 * x985)
    x1343 = x1286 * x387 + x1342
    x1344 = x71 * (x72 * x991 + x763 * x990)
    x1345 = x1287 * x387 + x1344
    x1346 = x71 * (x72 * x999 + x763 * x998)
    x1347 = x1288 * x387 + x1346
    x1348 = x71 * (x1005 * x763 + x1006 * x72)
    x1349 = x1290 * x387 + x1348
    x1350 = x111 * x990 + x843 * x91
    x1351 = x71 * (x1010 * x72 + x106 * x1350)
    x1352 = x1292 * x387 + x1351
    x1353 = x111 * x998 + x847 * x91
    x1354 = x71 * (x1014 * x72 + x106 * x1353)
    x1355 = x1294 * x387 + x1354
    x1356 = x851 * x91
    x1357 = x1005 * x111 + x1356
    x1358 = x71 * (x1019 * x72 + x106 * x1357)
    x1359 = x1296 * x387 + x1358
    x1360 = x1005 * x123 + x809
    x1361 = x71 * (x1023 * x72 + x106 * x1360)
    x1362 = x1298 * x387 + x1361
    x1363 = x71 * (x1010 * x111 + x856)
    x1364 = x1299 * x387 + x1363
    x1365 = x71 * (x1014 * x111 + x860)
    x1366 = x1300 * x387 + x1365
    x1367 = x71 * (x1019 * x111 + x864)
    x1368 = x1301 * x387 + x1367
    x1369 = x71 * (x1023 * x111 + x868)
    x1370 = x1302 * x387 + x1369
    x1371 = x71 * (x1023 * x123 + x167 * x500)
    x1372 = x1303 * x22 + x1371
    x1373 = x186 * x885 + 3.0 * x483 - x882 * x9
    x1374 = x1373 * x6
    x1375 = x186 * x881 + 3.0 * x492 - x493 * x887
    x1376 = -x101 * x1375 + x1373 * x5
    x1377 = x1376 * x4
    x1378 = x1304 * x21 + x71 * (
        x1280 * x1374 + x72 * (x1374 * x758 + x72**2 * (2.0 * x1374 + x1377))
    )
    x1379 = x1373 * x9
    x1380 = 4.0 * x892
    x1381 = x1379 + x1380
    x1382 = x106 * x1381
    x1383 = x1376 * x9
    x1384 = 4.0 * x890
    x1385 = x1383 + x1384
    x1386 = x1306 * x21 + x71 * (
        x1283 * x1381 + x72 * (x1381 * x763 + x72 * (x1382 + x1385 * x72))
    )
    x1387 = x123 * x1374
    x1388 = x1308 * x21 + x71 * (
        x1285 * x1374 + x72 * (x1374 * x765 + x72 * (x123 * x1377 + x1387))
    )
    x1389 = x111 * x1381 + x78 * x906
    x1390 = x106 * x1389
    x1391 = x111 * x1385 + x78 * x903
    x1392 = x1310 * x21 + x71 * (x1389 * x763 + x72 * (x1390 + x1391 * x72))
    x1393 = x123 * (x1379 + x1380)
    x1394 = x106 * x1393
    x1395 = x123 * (x1383 + x1384)
    x1396 = x1312 * x21 + x71 * (x1393 * x763 + x72 * (x1394 + x1395 * x72))
    x1397 = x1374 * x148
    x1398 = x1314 * x21 + x71 * (x1289 * x1374 + x72 * (x1377 * x148 + x1397))
    x1399 = x111 * x1389 + x78 * x918
    x1400 = x106 * x1399
    x1401 = x111 * x1391 + x78 * x917
    x1402 = x1317 * x21 + x71 * (x1400 + x1401 * x72)
    x1403 = x111 * x1393 + x78 * x924
    x1404 = x106 * x1403
    x1405 = x111 * x1395 + x78 * x923
    x1406 = x1320 * x21 + x71 * (x1404 + x1405 * x72)
    x1407 = x148 * (x1379 + x1380)
    x1408 = x106 * x1407
    x1409 = x148 * (x1383 + x1384)
    x1410 = x1323 * x21 + x71 * (x1408 + x1409 * x72)
    x1411 = x1374 * x167
    x1412 = x1326 * x21 + x71 * (x1377 * x167 + x1411)
    x1413 = x1328 * x21 + x71 * (x111 * x1401 + x78 * x933)
    x1414 = x1330 * x21 + x71 * (x111 * x1405 + x78 * x937)
    x1415 = x1332 * x21 + x71 * (x111 * x1409 + x78 * x941)
    x1416 = x1334 * x21 + x167 * x71 * (x1383 + x1384)
    x1417 = x1336 * x21 + x1376 * x184
    x1418 = x186 * x960 + 2.0 * x585 - x9 * x957
    x1419 = x1418 * x6
    x1420 = x186 * x956 - x493 * x962 + 2.0 * x594
    x1421 = -x101 * x1420 + x1418 * x5
    x1422 = x71 * (
        x1280 * x1419 + x72 * (x1419 * x758 + x72**2 * (2.0 * x1419 + x1421 * x4))
    )
    x1423 = x1304 * x22 + x1422
    x1424 = x1418 * x9 + 3.0 * x965
    x1425 = x1421 * x9 + x56 * x961
    x1426 = x71 * (
        x1283 * x1424 + x72 * (x1424 * x763 + x72 * (x106 * x1424 + x1425 * x72))
    )
    x1427 = x1306 * x22 + x1426
    x1428 = x12 * x1418 + x892
    x1429 = x12 * x1421 + x890
    x1430 = x71 * (
        x1283 * x1428 + x72 * (x1428 * x763 + x72 * (x106 * x1428 + x1429 * x72))
    )
    x1431 = x1308 * x22 + x1430
    x1432 = x111 * x1424 + x84 * x975
    x1433 = x111 * x1425 + x84 * x973
    x1434 = x71 * (x1432 * x763 + x72 * (x106 * x1432 + x1433 * x72))
    x1435 = x1310 * x22 + x1434
    x1436 = x111 * x1428 + x84 * x983
    x1437 = x111 * x1429 + x84 * x981
    x1438 = x71 * (x1436 * x763 + x72 * (x106 * x1436 + x1437 * x72))
    x1439 = x1312 * x22 + x1438
    x1440 = x123 * x1428 + x911
    x1441 = x123 * (x1429 + x890)
    x1442 = x71 * (x1440 * x763 + x72 * (x106 * x1440 + x1441 * x72))
    x1443 = x1314 * x22 + x1442
    x1444 = x111 * x1432 + x84 * x990
    x1445 = x111 * x1433 + x84 * x989
    x1446 = x71 * (x106 * x1444 + x1445 * x72)
    x1447 = x1317 * x22 + x1446
    x1448 = x111 * x1436 + x84 * x998
    x1449 = x111 * x1437 + x84 * x996
    x1450 = x71 * (x106 * x1448 + x1449 * x72)
    x1451 = x1320 * x22 + x1450
    x1452 = x1005 * x84 + x111 * x1440
    x1453 = x1003 * x84 + x111 * x1441
    x1454 = x71 * (x106 * x1452 + x1453 * x72)
    x1455 = x1323 * x22 + x1454
    x1456 = x123 * x1440 + x928
    x1457 = x123 * x1441 + x148 * x890
    x1458 = x71 * (x106 * x1456 + x1457 * x72)
    x1459 = x1326 * x22 + x1458
    x1460 = x71 * (x1010 * x84 + x111 * x1445)
    x1461 = x1328 * x22 + x1460
    x1462 = x71 * (x1014 * x84 + x111 * x1449)
    x1463 = x1330 * x22 + x1462
    x1464 = x71 * (x1019 * x84 + x111 * x1453)
    x1465 = x1332 * x22 + x1464
    x1466 = x71 * (x1023 * x84 + x111 * x1457)
    x1467 = x1334 * x22 + x1466
    x1468 = x71 * (x123 * x1457 + x167 * x890)
    x1469 = x1336 * x22 + x1468
    x1470 = -x1039 * x9 + x1042 * x186 + x679
    x1471 = x1470 * x6
    x1472 = x1038 * x186 - x1044 * x493 + x688
    x1473 = -x101 * x1472 + x1470 * x5
    x1474 = x71 * (
        x1280 * x1471 + x72 * (x1471 * x758 + x72**2 * (2.0 * x1471 + x1473 * x4))
    )
    x1475 = x1338 * x22 + x1474
    x1476 = 2.0 * x1047 + x1470 * x9
    x1477 = x1046 + x1473 * x9
    x1478 = x71 * (
        x1283 * x1476 + x72 * (x1476 * x763 + x72 * (x106 * x1476 + x1477 * x72))
    )
    x1479 = x1340 * x22 + x1478
    x1480 = x12 * x1470 + 2.0 * x965
    x1481 = x12 * x1473 + x964
    x1482 = x71 * (
        x1283 * x1480 + x72 * (x1480 * x763 + x72 * (x106 * x1480 + x1481 * x72))
    )
    x1483 = x1342 * x22 + x1482
    x1484 = x1056 * x91 + x111 * x1476
    x1485 = x1055 + x111 * x1477
    x1486 = x71 * (x1484 * x763 + x72 * (x106 * x1484 + x1485 * x72))
    x1487 = x1344 * x22 + x1486
    x1488 = x1064 * x91 + x111 * x1480
    x1489 = x1063 + x111 * x1481
    x1490 = x71 * (x1488 * x763 + x72 * (x106 * x1488 + x1489 * x72))
    x1491 = x1346 * x22 + x1490
    x1492 = x123 * x1480 + x91 * x983
    x1493 = x123 * x1481 + x982
    x1494 = x71 * (x1492 * x763 + x72 * (x106 * x1492 + x1493 * x72))
    x1495 = x1348 * x22 + x1494
    x1496 = x1072 * x91 + x111 * x1484
    x1497 = x1071 + x111 * x1485
    x1498 = x71 * (x106 * x1496 + x1497 * x72)
    x1499 = x1351 * x22 + x1498
    x1500 = x1079 * x91 + x111 * x1488
    x1501 = x1078 + x111 * x1489
    x1502 = x71 * (x106 * x1500 + x1501 * x72)
    x1503 = x1354 * x22 + x1502
    x1504 = x1086 * x91 + x111 * x1492
    x1505 = x1085 + x111 * x1493
    x1506 = x71 * (x106 * x1504 + x1505 * x72)
    x1507 = x1358 * x22 + x1506
    x1508 = x1005 * x91 + x123 * x1492
    x1509 = x1004 + x123 * x1493
    x1510 = x71 * (x106 * x1508 + x1509 * x72)
    x1511 = x1361 * x22 + x1510
    x1512 = x71 * (x1092 + x111 * x1497)
    x1513 = x1363 * x22 + x1512
    x1514 = x71 * (x1097 + x111 * x1501)
    x1515 = x1365 * x22 + x1514
    x1516 = x71 * (x1102 + x111 * x1505)
    x1517 = x1367 * x22 + x1516
    x1518 = x71 * (x1107 + x111 * x1509)
    x1519 = x1369 * x22 + x1518
    x1520 = x71 * (x1024 + x123 * x1509)
    x1521 = x1371 * x22 + x1520
    x1522 = x1280 * x599 + x72 * x834
    x1523 = x1283 * x611 + x72 * x837
    x1524 = x1283 * x621 + x72 * x840
    x1525 = x72 * x844 + x763 * x843
    x1526 = x72 * x848 + x763 * x847
    x1527 = x72 * x852 + x763 * x851
    x1528 = x111 * x843 + x1123
    x1529 = x106 * x1528 + x72 * x855
    x1530 = x111 * x847 + x1125
    x1531 = x106 * x1530 + x72 * x859
    x1532 = x111 * x851 + x1128
    x1533 = x106 * x1532 + x72 * x863
    x1534 = x123 * x851 + x773
    x1535 = x106 * x1534 + x72 * x867
    x1536 = x111 * x855 + x155 * x375
    x1537 = x111 * x859 + x409 * x666
    x1538 = x111 * x863 + x438 * x651
    x1539 = x106 * x1134 + x111 * x867
    x1540 = x123 * x867 + x167 * x217
    x1541 = x1338 + x1522 * x229
    x1542 = x238 * x760
    x1543 = x1340 + x1523 * x229
    x1544 = x146 * x259
    x1545 = x1342 + x1524 * x229
    x1546 = x1344 + x1525 * x229
    x1547 = x1346 + x1526 * x229
    x1548 = x120 * x808
    x1549 = x1348 + x1527 * x229
    x1550 = x1351 + x1529 * x229
    x1551 = x1354 + x1531 * x229
    x1552 = x1358 + x1533 * x229
    x1553 = x1361 + x1535 * x229
    x1554 = x1363 + x1536 * x229
    x1555 = x1365 + x1537 * x229
    x1556 = x1367 + x1538 * x229
    x1557 = x1369 + x1539 * x229
    x1558 = x1371 + x1540 * x229
    x1559 = x71 * (x1047 * x1280 + x1050 * x72)
    x1560 = x1522 * x387 + x1559
    x1561 = x71 * (x1056 * x1283 + x1058 * x72)
    x1562 = x1523 * x387 + x1561
    x1563 = x71 * (x1064 * x1283 + x1066 * x72)
    x1564 = x1524 * x387 + x1563
    x1565 = x71 * (x1072 * x763 + x1073 * x72)
    x1566 = x1525 * x387 + x1565
    x1567 = x71 * (x1079 * x763 + x1080 * x72)
    x1568 = x1526 * x387 + x1567
    x1569 = x71 * (x1086 * x763 + x1087 * x72)
    x1570 = x1527 * x387 + x1569
    x1571 = x1072 * x111 + x1166
    x1572 = x71 * (x106 * x1571 + x1091 * x72)
    x1573 = x1529 * x387 + x1572
    x1574 = x1079 * x111 + x1170
    x1575 = x71 * (x106 * x1574 + x1096 * x72)
    x1576 = x1531 * x387 + x1575
    x1577 = x1086 * x111 + x1175
    x1578 = x71 * (x106 * x1577 + x1101 * x72)
    x1579 = x1533 * x387 + x1578
    x1580 = x1086 * x123 + x1356
    x1581 = x71 * (x106 * x1580 + x1106 * x72)
    x1582 = x1535 * x387 + x1581
    x1583 = x71 * (x1091 * x111 + x155 * x696)
    x1584 = x1536 * x387 + x1583
    x1585 = x71 * (x1096 * x111 + x666 * x716)
    x1586 = x1537 * x387 + x1585
    x1587 = x71 * (x1101 * x111 + x651 * x733)
    x1588 = x1538 * x387 + x1587
    x1589 = x71 * (x106 * x1185 + x1106 * x111)
    x1590 = x1539 * x387 + x1589
    x1591 = x71 * (x1106 * x123 + x868)
    x1592 = x1540 * x387 + x1591
    x1593 = x1338 * x21 + x1422
    x1594 = x1340 * x21 + x1426
    x1595 = x1342 * x21 + x1430
    x1596 = x1344 * x21 + x1434
    x1597 = x1346 * x21 + x1438
    x1598 = x1348 * x21 + x1442
    x1599 = x1351 * x21 + x1446
    x1600 = x1354 * x21 + x1450
    x1601 = x1358 * x21 + x1454
    x1602 = x1361 * x21 + x1458
    x1603 = x1363 * x21 + x1460
    x1604 = x1365 * x21 + x1462
    x1605 = x1367 * x21 + x1464
    x1606 = x1369 * x21 + x1466
    x1607 = x1371 * x21 + x1468
    x1608 = -x1214 * x9 + x1217 * x186
    x1609 = x1608 * x6
    x1610 = x1213 * x186 - x1219 * x493
    x1611 = -x101 * x1610 + x1608 * x5
    x1612 = x71 * (
        x1280 * x1609 + x72 * (x1609 * x758 + x72**2 * (2.0 * x1609 + x1611 * x4))
    )
    x1613 = x1559 * x22 + x1612
    x1614 = x1224 + x1608 * x9
    x1615 = x1222 + x1611 * x9
    x1616 = x71 * (
        x1283 * x1614 + x72 * (x1614 * x763 + x72 * (x106 * x1614 + x1615 * x72))
    )
    x1617 = x1561 * x22 + x1616
    x1618 = 3.0 * x1047 + x12 * x1608
    x1619 = x1043 * x56 + x12 * x1611
    x1620 = x71 * (
        x1283 * x1618 + x72 * (x1618 * x763 + x72 * (x106 * x1618 + x1619 * x72))
    )
    x1621 = x1563 * x22 + x1620
    x1622 = x111 * x1614 + x1231
    x1623 = x111 * (x1222 + x1615)
    x1624 = x71 * (x1622 * x763 + x72 * (x106 * x1622 + x1623 * x72))
    x1625 = x1565 * x22 + x1624
    x1626 = x111 * x1618 + x1239
    x1627 = x106 * x1237 + x111 * x1619
    x1628 = x71 * (x1626 * x763 + x72 * (x106 * x1626 + x1627 * x72))
    x1629 = x1567 * x22 + x1628
    x1630 = x1064 * x84 + x123 * x1618
    x1631 = x1062 * x84 + x123 * x1619
    x1632 = x71 * (x1630 * x763 + x72 * (x106 * x1630 + x1631 * x72))
    x1633 = x1569 * x22 + x1632
    x1634 = x111 * x1622 + x1244
    x1635 = x111 * x1623 + x1222 * x133
    x1636 = x71 * (x106 * x1634 + x1635 * x72)
    x1637 = x1572 * x22 + x1636
    x1638 = x111 * x1626 + x1248
    x1639 = x111 * x1627 + x1237 * x651
    x1640 = x71 * (x106 * x1638 + x1639 * x72)
    x1641 = x1575 * x22 + x1640
    x1642 = x111 * x1630 + x1255
    x1643 = x106 * x1253 + x111 * x1631
    x1644 = x71 * (x106 * x1642 + x1643 * x72)
    x1645 = x1578 * x22 + x1644
    x1646 = x1086 * x84 + x123 * x1630
    x1647 = x1084 * x84 + x123 * x1631
    x1648 = x71 * (x106 * x1646 + x1647 * x72)
    x1649 = x1581 * x22 + x1648
    x1650 = x71 * (x111 * x1635 + x1222 * x155)
    x1651 = x1583 * x22 + x1650
    x1652 = x71 * (x111 * x1639 + x1237 * x666)
    x1653 = x1585 * x22 + x1652
    x1654 = x71 * (x111 * x1643 + x1253 * x651)
    x1655 = x1587 * x22 + x1654
    x1656 = x71 * (x106 * x1266 + x111 * x1647)
    x1657 = x1589 * x22 + x1656
    x1658 = x71 * (x1106 * x84 + x123 * x1647)
    x1659 = x1591 * x22 + x1658
    x1660 = x1157 * x72 + x1280 * x699
    x1661 = x1282 * x9
    x1662 = x1160 * x72 + x1661 * x699
    x1663 = x1163 * x72 + x1283 * x718
    x1664 = x1167 * x72 + x448 * x699
    x1665 = x162 * x4
    x1666 = x1665 * x6
    x1667 = x1171 * x72 + x1666 * x718
    x1668 = x1174 * x763 + x1176 * x72
    x1669 = x155 * x699
    x1670 = x155 * x700 + x1669
    x1671 = x666 * x718
    x1672 = x1671 + x448 * x716
    x1673 = x1174 * x651
    x1674 = x1673 + x426 * x733
    x1675 = x1127 * x91 + x1174 * x123
    x1676 = x106 * x1675
    x1677 = x1185 * x72 + x1676
    x1678 = x171 * x682
    x1679 = x174 * x716
    x1680 = x158 * x733
    x1681 = x1185 * x140
    x1682 = x1135 + x1185 * x123
    x1683 = x1559 + x1660 * x229
    x1684 = x1561 + x1662 * x229
    x1685 = x1563 + x1663 * x229
    x1686 = x1565 + x1664 * x229
    x1687 = x1567 + x1667 * x229
    x1688 = x1569 + x1668 * x229
    x1689 = x1572 + x1670 * x229
    x1690 = x1575 + x1672 * x229
    x1691 = x1578 + x1674 * x229
    x1692 = x1581 + x1677 * x229
    x1693 = x1583 + x1678 * x21
    x1694 = x1585 + x1679 * x21
    x1695 = x1587 + x1680 * x21
    x1696 = x1589 + x1681 * x21
    x1697 = x1591 + x1682 * x229
    x1698 = x71 * (x1224 * x1280 + x1228 * x72)
    x1699 = x1660 * x387 + x1698
    x1700 = x71 * (x1224 * x1661 + x1233 * x72)
    x1701 = x1662 * x387 + x1700
    x1702 = x71 * (x1238 * x1283 + x1241 * x72)
    x1703 = x1663 * x387 + x1702
    x1704 = x71 * (x1224 * x448 + x1245 * x72)
    x1705 = x1664 * x387 + x1704
    x1706 = x71 * (x1238 * x1666 + x1249 * x72)
    x1707 = x1667 * x387 + x1706
    x1708 = x71 * (x1254 * x763 + x1256 * x72)
    x1709 = x1668 * x387 + x1708
    x1710 = x1224 * x155
    x1711 = x71 * (x1225 * x155 + x1710)
    x1712 = x1670 * x387 + x1711
    x1713 = x1238 * x666
    x1714 = x71 * (x1237 * x448 + x1713)
    x1715 = x1672 * x387 + x1714
    x1716 = x1254 * x651
    x1717 = x71 * (x1253 * x426 + x1716)
    x1718 = x1674 * x387 + x1717
    x1719 = x1174 * x84 + x123 * x1254
    x1720 = x106 * x1719
    x1721 = x71 * (x1266 * x72 + x1720)
    x1722 = x1677 * x387 + x1721
    x1723 = x1218 * x171
    x1724 = x1678 * x22 + x1723
    x1725 = x1237 * x174
    x1726 = x1679 * x22 + x1725
    x1727 = x1253 * x158
    x1728 = x1680 * x22 + x1727
    x1729 = x1266 * x140
    x1730 = x1681 * x22 + x1729
    x1731 = x71 * (x1185 * x84 + x123 * x1266)
    x1732 = x1682 * x387 + x1731
    x1733 = x1474 + x1559 * x21
    x1734 = x1478 + x1561 * x21
    x1735 = x1482 + x1563 * x21
    x1736 = x1486 + x1565 * x21
    x1737 = x1490 + x1567 * x21
    x1738 = x1494 + x1569 * x21
    x1739 = x1498 + x1572 * x21
    x1740 = x1502 + x1575 * x21
    x1741 = x1506 + x1578 * x21
    x1742 = x1510 + x1581 * x21
    x1743 = x1512 + x1583 * x21
    x1744 = x1514 + x1585 * x21
    x1745 = x1516 + x1587 * x21
    x1746 = x1518 + x1589 * x21
    x1747 = x1520 + x1591 * x21
    x1748 = -x12 * x1214 + x1217 * x344 + 3.0 * x679
    x1749 = x1748 * x6
    x1750 = x1213 * x344 - x1219 * x689 + 3.0 * x688
    x1751 = -x101 * x1750 + x1748 * x5
    x1752 = x1751 * x4
    x1753 = x1698 * x22 + x71 * (
        x1280 * x1749 + x72 * (x1749 * x758 + x72**2 * (2.0 * x1749 + x1752))
    )
    x1754 = x111 * x1749
    x1755 = x1700 * x22 + x71 * (
        x1661 * x1749 + x72 * (x1749 * x426 + x72 * (x111 * x1752 + x1754))
    )
    x1756 = x12 * x1748 + 4.0 * x1224
    x1757 = x106 * x1756
    x1758 = x12 * x1751 + 4.0 * x1222
    x1759 = x1702 * x22 + x71 * (
        x1283 * x1756 + x72 * (x1756 * x763 + x72 * (x1757 + x1758 * x72))
    )
    x1760 = x133 * x1749
    x1761 = x1704 * x22 + x71 * (x1749 * x448 + x72 * (x133 * x1752 + x1760))
    x1762 = x1756 * x651
    x1763 = x1756 * x4
    x1764 = x1706 * x22 + x71 * (x162 * x1763 * x6 + x72 * (x1758 * x426 + x1762))
    x1765 = x123 * x1756 + x1238 * x78
    x1766 = x106 * x1765
    x1767 = x123 * x1758 + x1237 * x78
    x1768 = x1708 * x22 + x71 * (x1765 * x763 + x72 * (x1766 + x1767 * x72))
    x1769 = x155 * x1749
    x1770 = x1711 * x22 + x71 * (x155 * x1752 + x1769)
    x1771 = x1756 * x666
    x1772 = x1714 * x22 + x71 * (x1758 * x448 + x1771)
    x1773 = x1765 * x651
    x1774 = x1717 * x22 + x71 * (x1767 * x426 + x1773)
    x1775 = x123 * x1765 + x1254 * x78
    x1776 = x106 * x1775
    x1777 = x123 * x1767 + x1253 * x78
    x1778 = x1721 * x22 + x71 * (x1776 + x1777 * x72)
    x1779 = x171 * x1751 + x1723 * x22
    x1780 = x1725 * x22 + x174 * x1758
    x1781 = x158 * x1767 + x1727 * x22
    x1782 = x140 * x1777 + x1729 * x22
    x1783 = x1731 * x22 + x71 * (x123 * x1777 + x1266 * x78)
    x1784 = x170 * x4**4
    x1785 = x0 * x885
    x1786 = x1279 * x170
    x1787 = x1786 * x906
    x1788 = x12 * x1786
    x1789 = x0 * x1282
    x1790 = x13 * x7
    x1791 = x170 * x1785
    x1792 = x0 * x762
    x1793 = x166 * x4
    x1794 = x111 * x1316 + x1291 * x84
    x1795 = x111 * x1319 + x1293 * x84
    x1796 = x111 * x1322 + x1295 * x84
    x1797 = x167 * (x904 + x905)
    x1798 = x1373 * x1784
    x1799 = x21 * x885
    x1800 = x1784 * x1799 + x1798
    x1801 = x1381 * x1786
    x1802 = x1787 * x21 + x1801
    x1803 = x1373 * x1788
    x1804 = x1788 * x1799 + x1803
    x1805 = x1282 * x1389
    x1806 = x1282 * x21
    x1807 = x1805 + x1806 * x918
    x1808 = x1282 * x1393
    x1809 = x1806 * x924 + x1808
    x1810 = x1373 * x170
    x1811 = x1790 * x1810
    x1812 = x170 * x1799
    x1813 = x1790 * x1812 + x1811
    x1814 = x1399 * x762
    x1815 = x21 * x762
    x1816 = x1316 * x1815 + x1814
    x1817 = x1403 * x762
    x1818 = x1319 * x1815 + x1817
    x1819 = x1407 * x762
    x1820 = x1322 * x1815 + x1819
    x1821 = x1793 * x1810
    x1822 = x1793 * x1812 + x1821
    x1823 = x71 * (x111 * x1399 + x1316 * x78)
    x1824 = x1794 * x229 + x1823
    x1825 = x71 * (x111 * x1403 + x1319 * x78)
    x1826 = x1795 * x229 + x1825
    x1827 = x71 * (x111 * x1407 + x1322 * x78)
    x1828 = x1796 * x229 + x1827
    x1829 = x167 * x71 * (x1379 + x1380)
    x1830 = x1797 * x229 + x1829
    x1831 = x1373 * x184
    x1832 = x1799 * x184 + x1831
    x1833 = x1418 * x1784
    x1834 = x22 * x885
    x1835 = x1784 * x1834 + x1833
    x1836 = x1424 * x1786
    x1837 = x1787 * x22 + x1836
    x1838 = x1428 * x1786
    x1839 = x1788 * x1834 + x1838
    x1840 = x1282 * x1432
    x1841 = x1282 * x22
    x1842 = x1840 + x1841 * x918
    x1843 = x1282 * x1436
    x1844 = x1841 * x924 + x1843
    x1845 = x1282 * x1440
    x1846 = x170 * x1834
    x1847 = x1790 * x1846 + x1845
    x1848 = x1444 * x762
    x1849 = x22 * x762
    x1850 = x1316 * x1849 + x1848
    x1851 = x1448 * x762
    x1852 = x1319 * x1849 + x1851
    x1853 = x1452 * x762
    x1854 = x1322 * x1849 + x1853
    x1855 = x1456 * x762
    x1856 = x1793 * x1846 + x1855
    x1857 = x71 * (x111 * x1444 + x1350 * x84)
    x1858 = x1794 * x387 + x1857
    x1859 = x71 * (x111 * x1448 + x1353 * x84)
    x1860 = x1795 * x387 + x1859
    x1861 = x71 * (x111 * x1452 + x1357 * x84)
    x1862 = x1796 * x387 + x1861
    x1863 = x71 * (x111 * x1456 + x1360 * x84)
    x1864 = x1797 * x387 + x1863
    x1865 = x71 * (x123 * x1456 + x1325)
    x1866 = x1834 * x184 + x1865
    x1867 = x1373 * x186 - x1375 * x493 + 4.0 * x884
    x1868 = x1867 * x9
    x1869 = 5.0 * x1374
    x1870 = x1868 + x1869
    x1871 = x111 * x1870 + 5.0 * x1382
    x1872 = x123 * (x1868 + x1869)
    x1873 = x170 * x1867
    x1874 = x111 * x1871 + 5.0 * x1390
    x1875 = x111 * x1872 + 5.0 * x1394
    x1876 = x148 * (x1868 + x1869)
    x1877 = x1418 * x186 - x1420 * x493 + 3.0 * x959
    x1878 = x1784 * x1877
    x1879 = 4.0 * x1419 + x1877 * x9
    x1880 = x1786 * x1879
    x1881 = x12 * x1877 + x1374
    x1882 = x1786 * x1881
    x1883 = x111 * x1879 + x1424 * x78
    x1884 = x1282 * x1883
    x1885 = x111 * x1881 + x1428 * x78
    x1886 = x1282 * x1885
    x1887 = x123 * x1881 + x1387
    x1888 = x1282 * x1887
    x1889 = x111 * x1883 + x1432 * x78
    x1890 = x1889 * x762
    x1891 = x111 * x1885 + x1436 * x78
    x1892 = x1891 * x762
    x1893 = x111 * x1887 + x1440 * x78
    x1894 = x1893 * x762
    x1895 = x123 * x1887 + x1397
    x1896 = x1895 * x762
    x1897 = x71 * (x111 * x1889 + x1444 * x78)
    x1898 = x71 * (x111 * x1891 + x1448 * x78)
    x1899 = x71 * (x111 * x1893 + x1452 * x78)
    x1900 = x71 * (x111 * x1895 + x1456 * x78)
    x1901 = x71 * (x123 * x1895 + x1411)
    x1902 = 2.0 * x1041 + x1470 * x186 - x1472 * x493
    x1903 = x1784 * x1902
    x1904 = x1833 * x22 + x1903
    x1905 = 3.0 * x1471
    x1906 = x1902 * x9 + x1905
    x1907 = x1786 * x1906
    x1908 = x1836 * x22 + x1907
    x1909 = x12 * x1902 + 2.0 * x1419
    x1910 = x1786 * x1909
    x1911 = x1838 * x22 + x1910
    x1912 = x111 * x1906 + x1476 * x84
    x1913 = x1282 * x1912
    x1914 = x1840 * x22 + x1913
    x1915 = x1480 * x84
    x1916 = x111 * x1909 + x1915
    x1917 = x1282 * x1916
    x1918 = x1843 * x22 + x1917
    x1919 = x123 * x1909 + x1428 * x91
    x1920 = x1282 * x1919
    x1921 = x1845 * x22 + x1920
    x1922 = x111 * x1912 + x1484 * x84
    x1923 = x1922 * x762
    x1924 = x1848 * x22 + x1923
    x1925 = x111 * x1916 + x1488 * x84
    x1926 = x1925 * x762
    x1927 = x1851 * x22 + x1926
    x1928 = x1492 * x84
    x1929 = x111 * x1919 + x1928
    x1930 = x1929 * x762
    x1931 = x1853 * x22 + x1930
    x1932 = x123 * x1919 + x1440 * x91
    x1933 = x1932 * x762
    x1934 = x1855 * x22 + x1933
    x1935 = x71 * (x111 * x1922 + x1496 * x84)
    x1936 = x1857 * x22 + x1935
    x1937 = x71 * (x111 * x1925 + x1500 * x84)
    x1938 = x1859 * x22 + x1937
    x1939 = x71 * (x111 * x1929 + x1504 * x84)
    x1940 = x1861 * x22 + x1939
    x1941 = x1508 * x84
    x1942 = x71 * (x111 * x1932 + x1941)
    x1943 = x1863 * x22 + x1942
    x1944 = x71 * (x123 * x1932 + x1456 * x91)
    x1945 = x1865 * x22 + x1944
    x1946 = x1784 * x960
    x1947 = x0 * x1786
    x1948 = x111 * x1350 + x1528 * x91
    x1949 = x111 * x1353 + x1530 * x91
    x1950 = x111 * x1357 + x1532 * x91
    x1951 = x1534 * x91
    x1952 = x111 * x1360 + x1951
    x1953 = x123 * x1360 + x1297
    x1954 = x1833 + x1946 * x21
    x1955 = x1786 * x21
    x1956 = x1836 + x1955 * x975
    x1957 = x1838 + x1955 * x983
    x1958 = x1806 * x990 + x1840
    x1959 = x1806 * x998 + x1843
    x1960 = x1005 * x1806 + x1845
    x1961 = x1350 * x1815 + x1848
    x1962 = x1353 * x1815 + x1851
    x1963 = x1357 * x1815 + x1853
    x1964 = x1360 * x1815 + x1855
    x1965 = x1857 + x1948 * x229
    x1966 = x1859 + x1949 * x229
    x1967 = x1861 + x1950 * x229
    x1968 = x1863 + x1952 * x229
    x1969 = x1865 + x1953 * x229
    x1970 = x1470 * x1784
    x1971 = x1946 * x22 + x1970
    x1972 = x1476 * x1786
    x1973 = x1786 * x22
    x1974 = x1972 + x1973 * x975
    x1975 = x1480 * x1786
    x1976 = x1973 * x983 + x1975
    x1977 = x1282 * x1484
    x1978 = x1841 * x990 + x1977
    x1979 = x1282 * x1488
    x1980 = x1841 * x998 + x1979
    x1981 = x1282 * x1492
    x1982 = x1005 * x1841 + x1981
    x1983 = x1496 * x762
    x1984 = x1350 * x1849 + x1983
    x1985 = x1500 * x762
    x1986 = x1353 * x1849 + x1985
    x1987 = x1504 * x762
    x1988 = x1357 * x1849 + x1987
    x1989 = x1508 * x762
    x1990 = x1360 * x1849 + x1989
    x1991 = x71 * (x111 * x1496 + x1571 * x91)
    x1992 = x1948 * x387 + x1991
    x1993 = x71 * (x111 * x1500 + x1574 * x91)
    x1994 = x1949 * x387 + x1993
    x1995 = x71 * (x111 * x1504 + x1577 * x91)
    x1996 = x1950 * x387 + x1995
    x1997 = x71 * (x111 * x1508 + x1580 * x91)
    x1998 = x1952 * x387 + x1997
    x1999 = x71 * (x123 * x1508 + x1360 * x91)
    x2000 = x1953 * x387 + x1999
    x2001 = x1216 + x1608 * x186 - x1610 * x493
    x2002 = x1784 * x2001
    x2003 = x1970 * x22 + x2002
    x2004 = 2.0 * x1609 + x2001 * x9
    x2005 = x1786 * x2004
    x2006 = x1972 * x22 + x2005
    x2007 = x12 * x2001 + x1905
    x2008 = x1786 * x2007
    x2009 = x1975 * x22 + x2008
    x2010 = x111 * x2004 + x1614 * x91
    x2011 = x1282 * x2010
    x2012 = x1977 * x22 + x2011
    x2013 = x111 * x2007 + x1618 * x91
    x2014 = x1282 * x2013
    x2015 = x1979 * x22 + x2014
    x2016 = x123 * x2007 + x1915
    x2017 = x1282 * x2016
    x2018 = x1981 * x22 + x2017
    x2019 = x111 * x2010 + x1622 * x91
    x2020 = x2019 * x762
    x2021 = x1983 * x22 + x2020
    x2022 = x111 * x2013 + x1626 * x91
    x2023 = x2022 * x762
    x2024 = x1985 * x22 + x2023
    x2025 = x111 * x2016 + x1630 * x91
    x2026 = x2025 * x762
    x2027 = x1987 * x22 + x2026
    x2028 = x123 * x2016 + x1928
    x2029 = x2028 * x762
    x2030 = x1989 * x22 + x2029
    x2031 = x71 * (x111 * x2019 + x1634 * x91)
    x2032 = x1991 * x22 + x2031
    x2033 = x71 * (x111 * x2022 + x1638 * x91)
    x2034 = x1993 * x22 + x2033
    x2035 = x71 * (x111 * x2025 + x1642 * x91)
    x2036 = x1995 * x22 + x2035
    x2037 = x71 * (x111 * x2028 + x1646 * x91)
    x2038 = x1997 * x22 + x2037
    x2039 = x71 * (x123 * x2028 + x1941)
    x2040 = x1999 * x22 + x2039
    x2041 = x1042 * x1784
    x2042 = x111 * x1571 + x1669
    x2043 = x111 * x1574 + x1671
    x2044 = x111 * x1577 + x1673
    x2045 = x111 * x1580 + x1676
    x2046 = x123 * x1580 + x1951
    x2047 = x1970 + x2041 * x21
    x2048 = x1056 * x1955 + x1972
    x2049 = x1064 * x1955 + x1975
    x2050 = x1072 * x1806 + x1977
    x2051 = x1079 * x1806 + x1979
    x2052 = x1086 * x1806 + x1981
    x2053 = x1571 * x1815 + x1983
    x2054 = x1574 * x1815 + x1985
    x2055 = x1577 * x1815 + x1987
    x2056 = x1580 * x1815 + x1989
    x2057 = x1991 + x2042 * x229
    x2058 = x1993 + x2043 * x229
    x2059 = x1995 + x2044 * x229
    x2060 = x1997 + x2045 * x229
    x2061 = x1999 + x2046 * x229
    x2062 = x1608 * x1784
    x2063 = x2041 * x22 + x2062
    x2064 = x1614 * x1786
    x2065 = x1056 * x1973 + x2064
    x2066 = x1618 * x1786
    x2067 = x1064 * x1973 + x2066
    x2068 = x1282 * x1622
    x2069 = x1072 * x1841 + x2068
    x2070 = x1282 * x1626
    x2071 = x1079 * x1841 + x2070
    x2072 = x1282 * x1630
    x2073 = x1086 * x1841 + x2072
    x2074 = x1634 * x762
    x2075 = x1571 * x1849 + x2074
    x2076 = x1638 * x762
    x2077 = x1574 * x1849 + x2076
    x2078 = x1642 * x762
    x2079 = x1577 * x1849 + x2078
    x2080 = x1646 * x762
    x2081 = x1580 * x1849 + x2080
    x2082 = x71 * (x111 * x1634 + x1710)
    x2083 = x2042 * x387 + x2082
    x2084 = x71 * (x111 * x1638 + x1713)
    x2085 = x2043 * x387 + x2084
    x2086 = x71 * (x111 * x1642 + x1716)
    x2087 = x2044 * x387 + x2086
    x2088 = x71 * (x111 * x1646 + x1720)
    x2089 = x2045 * x387 + x2088
    x2090 = x71 * (x123 * x1646 + x1580 * x84)
    x2091 = x2046 * x387 + x2090
    x2092 = x1748 * x186 - x1750 * x493
    x2093 = x1784 * x2092 + x2062 * x22
    x2094 = x1749 + x2092 * x9
    x2095 = x1786 * x2094 + x2064 * x22
    x2096 = x12 * x2092 + 4.0 * x1609
    x2097 = x1786 * x2096 + x2066 * x22
    x2098 = x111 * x2094 + x1754
    x2099 = x1282 * x2098 + x2068 * x22
    x2100 = x111 * x2096 + x1757
    x2101 = x1282 * x2100 + x2070 * x22
    x2102 = x123 * x2096 + x1618 * x78
    x2103 = x1282 * x2102 + x2072 * x22
    x2104 = x111 * x2098 + x1760
    x2105 = x2074 * x22 + x2104 * x762
    x2106 = x111 * x2100 + x1762
    x2107 = x2076 * x22 + x2106 * x762
    x2108 = x111 * x2102 + x1766
    x2109 = x2078 * x22 + x2108 * x762
    x2110 = x123 * x2102 + x1630 * x78
    x2111 = x2080 * x22 + x2110 * x762
    x2112 = x2082 * x22 + x71 * (x111 * x2104 + x1769)
    x2113 = x2084 * x22 + x71 * (x111 * x2106 + x1771)
    x2114 = x2086 * x22 + x71 * (x111 * x2108 + x1773)
    x2115 = x2088 * x22 + x71 * (x111 * x2110 + x1776)
    x2116 = x2090 * x22 + x71 * (x123 * x2110 + x1646 * x78)
    x2117 = x0 * x1217
    x2118 = x1217 * x9
    x2119 = x170 * x7
    x2120 = x10 * x2119
    x2121 = x2119 * x9
    x2122 = x0 * x1238
    x2123 = x174 * x4
    x2124 = x10 * x170
    x2125 = x2124 * x4
    x2126 = x1254 * x1665
    x2127 = x1238 * x174
    x2128 = x1254 * x158
    x2129 = x140 * x1719
    x2130 = x123 * x1719 + x1675 * x84
    x2131 = x1217 * x21
    x2132 = x1784 * x2131 + x2062
    x2133 = x1955 * x2118 + x2064
    x2134 = x1238 * x1955 + x2066
    x2135 = x2068 + x2120 * x2131
    x2136 = x1238 * x21
    x2137 = x2070 + x2121 * x2136
    x2138 = x1254 * x1806 + x2072
    x2139 = x2074 + x2123 * x2131
    x2140 = x2076 + x2125 * x2136
    x2141 = x2078 + x21 * x2126
    x2142 = x1719 * x1815 + x2080
    x2143 = x171 * x2131 + x2082
    x2144 = x2084 + x21 * x2127
    x2145 = x2086 + x21 * x2128
    x2146 = x2088 + x21 * x2129
    x2147 = x2090 + x2130 * x229
    x2148 = x1748 * x1784
    x2149 = x1217 * x22
    x2150 = x1784 * x2149 + x2148
    x2151 = x1786 * x9
    x2152 = x1748 * x2151 + x1973 * x2118
    x2153 = x1756 * x1786
    x2154 = x1238 * x1973 + x2153
    x2155 = x1748 * x2120
    x2156 = x2120 * x2149 + x2155
    x2157 = x1756 * x2121
    x2158 = x1238 * x22
    x2159 = x2121 * x2158 + x2157
    x2160 = x1282 * x1765
    x2161 = x1254 * x1841 + x2160
    x2162 = x1748 * x2123
    x2163 = x2123 * x2149 + x2162
    x2164 = x1763 * x2124
    x2165 = x2125 * x2158 + x2164
    x2166 = x1665 * x1765
    x2167 = x2126 * x22 + x2166
    x2168 = x1775 * x762
    x2169 = x1719 * x1849 + x2168
    x2170 = x171 * x1748
    x2171 = x171 * x2149 + x2170
    x2172 = x174 * x1756
    x2173 = x2127 * x22 + x2172
    x2174 = x158 * x1765
    x2175 = x2128 * x22 + x2174
    x2176 = x140 * x1775
    x2177 = x2129 * x22 + x2176
    x2178 = x71 * (x123 * x1775 + x1719 * x78)
    x2179 = x2130 * x387 + x2178
    x2180 = 4.0 * x1216 + x1748 * x344 - x1750 * x689
    x2181 = x12 * x2180 + 5.0 * x1749
    x2182 = x123 * x2181 + 5.0 * x1757
    x2183 = x123 * x2182 + 5.0 * x1766

    # 900 item(s)
    result[0, 0, 0] = numpy.sum(
        x110
        * (
            x0 * x94
            + x0 * (x94 + x96 * x97)
            + x71
            * (x107 * x86 + x72 * (x107 * x79 + x72 * (x107 * x70 + x72 * (x103 + x105))))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x122
        * (
            x0 * x117
            + x0 * (x117 + x119 * x97)
            + x71 * (x107 * x114 + x72 * (x107 * x112 + x111 * x72 * (x103 + x105)))
        )
    )
    result[0, 0, 2] = numpy.sum(
        x122
        * (
            x0 * x129
            + x0 * (x129 + x131 * x97)
            + x71 * (x107 * x126 + x72 * (x107 * x124 + x123 * x72 * (x103 + x105)))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x139
        * (
            x0 * x136
            + x0 * (x136 + x137 * x97)
            + x71 * (x107 * x134 + x133 * x72 * (x103 + x105))
        )
    )
    result[0, 0, 4] = numpy.sum(
        x147
        * (
            x0 * x144
            + x0 * (x144 + x145 * x97)
            + x71 * (x107 * x142 + x141 * x72 * (x103 + x105))
        )
    )
    result[0, 0, 5] = numpy.sum(
        x139
        * (
            x0 * x151
            + x0 * (x151 + x152 * x97)
            + x71 * (x107 * x149 + x148 * x72 * (x103 + x105))
        )
    )
    result[0, 0, 6] = numpy.sum(
        x122 * (x0 * x156 + x0 * (x156 + x157 * x97) + x155 * x71 * (x103 + x105))
    )
    result[0, 0, 7] = numpy.sum(
        x147 * (x0 * x160 + x0 * (x160 + x161 * x97) + x159 * x71 * (x103 + x105))
    )
    result[0, 0, 8] = numpy.sum(
        x147 * (x0 * x164 + x0 * (x164 + x165 * x97) + x163 * x71 * (x103 + x105))
    )
    result[0, 0, 9] = numpy.sum(
        x122 * (x0 * x168 + x0 * (x168 + x169 * x97) + x167 * x71 * (x103 + x105))
    )
    result[0, 0, 10] = numpy.sum(
        x110 * (x0 * x172 + x0 * (x171 * x173 + x172) + x102 * x171)
    )
    result[0, 0, 11] = numpy.sum(
        x122 * (x0 * x176 + x0 * (x173 * x175 + x176) + x102 * x175)
    )
    result[0, 0, 12] = numpy.sum(
        x139 * (x0 * x179 + x0 * (x178 * x180 + x179) + x178 * x181)
    )
    result[0, 0, 13] = numpy.sum(
        x122 * (x0 * x183 + x0 * (x180 * x182 + x183) + x181 * x182)
    )
    result[0, 0, 14] = numpy.sum(
        x110 * (x0 * x185 + x0 * (x173 * x184 + x185) + x102 * x184)
    )
    result[0, 1, 0] = numpy.sum(x239 * (x0 * x230 + x21 * x94 + x237))
    result[0, 1, 1] = numpy.sum(x259 * (x0 * x255 + x117 * x21 + x258))
    result[0, 1, 2] = numpy.sum(x259 * (x0 * x268 + x129 * x21 + x269))
    result[0, 1, 3] = numpy.sum(x147 * (x0 * x277 + x136 * x21 + x279))
    result[0, 1, 4] = numpy.sum(x294 * (x0 * x290 + x144 * x21 + x293))
    result[0, 1, 5] = numpy.sum(x147 * (x0 * x299 + x151 * x21 + x300))
    result[0, 1, 6] = numpy.sum(x259 * (x0 * x304 + x156 * x21 + x306))
    result[0, 1, 7] = numpy.sum(x294 * (x0 * x310 + x160 * x21 + x312))
    result[0, 1, 8] = numpy.sum(x294 * (x0 * x318 + x164 * x21 + x321))
    result[0, 1, 9] = numpy.sum(x259 * (x0 * x323 + x168 * x21 + x324))
    result[0, 1, 10] = numpy.sum(x239 * (x0 * x327 + x172 * x21 + x328))
    result[0, 1, 11] = numpy.sum(x259 * (x0 * x330 + x176 * x21 + x331))
    result[0, 1, 12] = numpy.sum(x147 * (x0 * x334 + x179 * x21 + x335))
    result[0, 1, 13] = numpy.sum(x259 * (x0 * x338 + x183 * x21 + x340))
    result[0, 1, 14] = numpy.sum(x239 * (x0 * x342 + x185 * x21 + x343))
    result[0, 2, 0] = numpy.sum(x239 * (x0 * x388 + x22 * x94 + x396))
    result[0, 2, 1] = numpy.sum(x259 * (x0 * x404 + x117 * x22 + x405))
    result[0, 2, 2] = numpy.sum(x259 * (x0 * x418 + x129 * x22 + x420))
    result[0, 2, 3] = numpy.sum(x147 * (x0 * x424 + x136 * x22 + x425))
    result[0, 2, 4] = numpy.sum(x294 * (x0 * x432 + x144 * x22 + x434))
    result[0, 2, 5] = numpy.sum(x147 * (x0 * x442 + x151 * x22 + x444))
    result[0, 2, 6] = numpy.sum(x259 * (x0 * x446 + x156 * x22 + x447))
    result[0, 2, 7] = numpy.sum(x294 * (x0 * x450 + x160 * x22 + x451))
    result[0, 2, 8] = numpy.sum(x294 * (x0 * x454 + x164 * x22 + x455))
    result[0, 2, 9] = numpy.sum(x259 * (x0 * x459 + x168 * x22 + x461))
    result[0, 2, 10] = numpy.sum(x239 * (x0 * x464 + x172 * x22 + x465))
    result[0, 2, 11] = numpy.sum(x259 * (x0 * x467 + x176 * x22 + x468))
    result[0, 2, 12] = numpy.sum(x147 * (x0 * x471 + x179 * x22 + x472))
    result[0, 2, 13] = numpy.sum(x259 * (x0 * x474 + x183 * x22 + x475))
    result[0, 2, 14] = numpy.sum(x239 * (x0 * x477 + x185 * x22 + x478))
    result[0, 3, 0] = numpy.sum(x110 * (x21 * x230 + x510))
    result[0, 3, 1] = numpy.sum(x122 * (x21 * x255 + x527))
    result[0, 3, 2] = numpy.sum(x122 * (x21 * x268 + x534))
    result[0, 3, 3] = numpy.sum(x139 * (x21 * x277 + x541))
    result[0, 3, 4] = numpy.sum(x147 * (x21 * x290 + x548))
    result[0, 3, 5] = numpy.sum(x139 * (x21 * x299 + x552))
    result[0, 3, 6] = numpy.sum(x122 * (x21 * x304 + x557))
    result[0, 3, 7] = numpy.sum(x147 * (x21 * x310 + x562))
    result[0, 3, 8] = numpy.sum(x147 * (x21 * x318 + x567))
    result[0, 3, 9] = numpy.sum(x122 * (x21 * x323 + x570))
    result[0, 3, 10] = numpy.sum(x110 * (x21 * x327 + x572))
    result[0, 3, 11] = numpy.sum(x122 * (x21 * x330 + x574))
    result[0, 3, 12] = numpy.sum(x139 * (x21 * x334 + x576))
    result[0, 3, 13] = numpy.sum(x122 * (x21 * x338 + x578))
    result[0, 3, 14] = numpy.sum(x110 * (x21 * x342 + x580))
    result[0, 4, 0] = numpy.sum(x239 * (x21 * x388 + x605))
    result[0, 4, 1] = numpy.sum(x259 * (x21 * x404 + x615))
    result[0, 4, 2] = numpy.sum(x259 * (x21 * x418 + x625))
    result[0, 4, 3] = numpy.sum(x147 * (x21 * x424 + x632))
    result[0, 4, 4] = numpy.sum(x294 * (x21 * x432 + x639))
    result[0, 4, 5] = numpy.sum(x147 * (x21 * x442 + x646))
    result[0, 4, 6] = numpy.sum(x259 * (x21 * x446 + x650))
    result[0, 4, 7] = numpy.sum(x294 * (x21 * x450 + x655))
    result[0, 4, 8] = numpy.sum(x294 * (x21 * x454 + x659))
    result[0, 4, 9] = numpy.sum(x259 * (x21 * x459 + x663))
    result[0, 4, 10] = numpy.sum(x239 * (x21 * x464 + x665))
    result[0, 4, 11] = numpy.sum(x259 * (x21 * x467 + x668))
    result[0, 4, 12] = numpy.sum(x147 * (x21 * x471 + x670))
    result[0, 4, 13] = numpy.sum(x259 * (x21 * x474 + x672))
    result[0, 4, 14] = numpy.sum(x239 * (x21 * x477 + x674))
    result[0, 5, 0] = numpy.sum(x110 * (x22 * x388 + x706))
    result[0, 5, 1] = numpy.sum(x122 * (x22 * x404 + x712))
    result[0, 5, 2] = numpy.sum(x122 * (x22 * x418 + x723))
    result[0, 5, 3] = numpy.sum(x139 * (x22 * x424 + x726))
    result[0, 5, 4] = numpy.sum(x147 * (x22 * x432 + x729))
    result[0, 5, 5] = numpy.sum(x139 * (x22 * x442 + x736))
    result[0, 5, 6] = numpy.sum(x122 * (x22 * x446 + x738))
    result[0, 5, 7] = numpy.sum(x147 * (x22 * x450 + x740))
    result[0, 5, 8] = numpy.sum(x147 * (x22 * x454 + x742))
    result[0, 5, 9] = numpy.sum(x122 * (x22 * x459 + x747))
    result[0, 5, 10] = numpy.sum(x110 * (x22 * x464 + x749))
    result[0, 5, 11] = numpy.sum(x122 * (x22 * x467 + x751))
    result[0, 5, 12] = numpy.sum(x139 * (x22 * x471 + x753))
    result[0, 5, 13] = numpy.sum(x122 * (x22 * x474 + x755))
    result[0, 5, 14] = numpy.sum(x110 * (x22 * x477 + x757))
    result[1, 0, 0] = numpy.sum(x761 * (x0 * x228 + x0 * (x228 + x759 * x97) + x237))
    result[1, 0, 1] = numpy.sum(x147 * (x0 * x254 + x0 * (x254 + x764 * x97) + x258))
    result[1, 0, 2] = numpy.sum(x147 * (x0 * x267 + x0 * (x267 + x766 * x97) + x269))
    result[1, 0, 3] = numpy.sum(x769 * (x0 * x276 + x0 * (x276 + x768 * x97) + x279))
    result[1, 0, 4] = numpy.sum(x772 * (x0 * x289 + x0 * (x289 + x771 * x97) + x293))
    result[1, 0, 5] = numpy.sum(x769 * (x0 * x298 + x0 * (x298 + x774 * x97) + x300))
    result[1, 0, 6] = numpy.sum(x147 * (x0 * x303 + x0 * (x303 + x776 * x97) + x306))
    result[1, 0, 7] = numpy.sum(x772 * (x0 * x309 + x0 * (x309 + x778 * x97) + x312))
    result[1, 0, 8] = numpy.sum(x772 * (x0 * x317 + x0 * (x317 + x781 * x97) + x321))
    result[1, 0, 9] = numpy.sum(x147 * (x0 * x322 + x0 * (x322 + x783 * x97) + x324))
    result[1, 0, 10] = numpy.sum(x761 * (x0 * x325 + x0 * (x325 + x784 * x97) + x328))
    result[1, 0, 11] = numpy.sum(x147 * (x0 * x329 + x0 * (x329 + x785 * x97) + x331))
    result[1, 0, 12] = numpy.sum(x769 * (x0 * x332 + x0 * (x332 + x786 * x97) + x335))
    result[1, 0, 13] = numpy.sum(x147 * (x0 * x337 + x0 * (x337 + x788 * x97) + x340))
    result[1, 0, 14] = numpy.sum(x761 * (x0 * x341 + x0 * (x0 * x789 + x341) + x343))
    result[1, 1, 0] = numpy.sum(x793 * (x0 * x792 + x510))
    result[1, 1, 1] = numpy.sum(x294 * (x0 * x796 + x527))
    result[1, 1, 2] = numpy.sum(x294 * (x0 * x799 + x534))
    result[1, 1, 3] = numpy.sum(x772 * (x0 * x803 + x541))
    result[1, 1, 4] = numpy.sum(x808 * (x0 * x807 + x548))
    result[1, 1, 5] = numpy.sum(x772 * (x0 * x812 + x552))
    result[1, 1, 6] = numpy.sum(x294 * (x0 * x815 + x557))
    result[1, 1, 7] = numpy.sum(x808 * (x0 * x818 + x562))
    result[1, 1, 8] = numpy.sum(x808 * (x0 * x821 + x567))
    result[1, 1, 9] = numpy.sum(x294 * (x0 * x823 + x570))
    result[1, 1, 10] = numpy.sum(x793 * (x0 * x825 + x572))
    result[1, 1, 11] = numpy.sum(x294 * (x0 * x827 + x574))
    result[1, 1, 12] = numpy.sum(x772 * (x0 * x829 + x576))
    result[1, 1, 13] = numpy.sum(x294 * (x0 * x831 + x578))
    result[1, 1, 14] = numpy.sum(x793 * (x0 * x833 + x580))
    result[1, 2, 0] = numpy.sum(x793 * (x0 * x836 + x605))
    result[1, 2, 1] = numpy.sum(x294 * (x0 * x839 + x615))
    result[1, 2, 2] = numpy.sum(x294 * (x0 * x842 + x625))
    result[1, 2, 3] = numpy.sum(x772 * (x0 * x846 + x632))
    result[1, 2, 4] = numpy.sum(x808 * (x0 * x850 + x639))
    result[1, 2, 5] = numpy.sum(x772 * (x0 * x854 + x646))
    result[1, 2, 6] = numpy.sum(x294 * (x0 * x858 + x650))
    result[1, 2, 7] = numpy.sum(x808 * (x0 * x862 + x655))
    result[1, 2, 8] = numpy.sum(x808 * (x0 * x866 + x659))
    result[1, 2, 9] = numpy.sum(x294 * (x0 * x870 + x663))
    result[1, 2, 10] = numpy.sum(x793 * (x0 * x872 + x665))
    result[1, 2, 11] = numpy.sum(x294 * (x0 * x874 + x668))
    result[1, 2, 12] = numpy.sum(x772 * (x0 * x876 + x670))
    result[1, 2, 13] = numpy.sum(x294 * (x0 * x878 + x672))
    result[1, 2, 14] = numpy.sum(x793 * (x0 * x880 + x674))
    result[1, 3, 0] = numpy.sum(x761 * (x21 * x792 + x898))
    result[1, 3, 1] = numpy.sum(x147 * (x21 * x796 + x910))
    result[1, 3, 2] = numpy.sum(x147 * (x21 * x799 + x915))
    result[1, 3, 3] = numpy.sum(x769 * (x21 * x803 + x921))
    result[1, 3, 4] = numpy.sum(x772 * (x21 * x807 + x927))
    result[1, 3, 5] = numpy.sum(x769 * (x21 * x812 + x931))
    result[1, 3, 6] = numpy.sum(x147 * (x21 * x815 + x935))
    result[1, 3, 7] = numpy.sum(x772 * (x21 * x818 + x939))
    result[1, 3, 8] = numpy.sum(x772 * (x21 * x821 + x943))
    result[1, 3, 9] = numpy.sum(x147 * (x21 * x823 + x945))
    result[1, 3, 10] = numpy.sum(x761 * (x21 * x825 + x947))
    result[1, 3, 11] = numpy.sum(x147 * (x21 * x827 + x949))
    result[1, 3, 12] = numpy.sum(x769 * (x21 * x829 + x951))
    result[1, 3, 13] = numpy.sum(x147 * (x21 * x831 + x953))
    result[1, 3, 14] = numpy.sum(x761 * (x21 * x833 + x955))
    result[1, 4, 0] = numpy.sum(x793 * (x21 * x836 + x970))
    result[1, 4, 1] = numpy.sum(x294 * (x21 * x839 + x979))
    result[1, 4, 2] = numpy.sum(x294 * (x21 * x842 + x987))
    result[1, 4, 3] = numpy.sum(x772 * (x21 * x846 + x993))
    result[1, 4, 4] = numpy.sum(x808 * (x1001 + x21 * x850))
    result[1, 4, 5] = numpy.sum(x772 * (x1008 + x21 * x854))
    result[1, 4, 6] = numpy.sum(x294 * (x1012 + x21 * x858))
    result[1, 4, 7] = numpy.sum(x808 * (x1016 + x21 * x862))
    result[1, 4, 8] = numpy.sum(x808 * (x1021 + x21 * x866))
    result[1, 4, 9] = numpy.sum(x294 * (x1026 + x21 * x870))
    result[1, 4, 10] = numpy.sum(x793 * (x1028 + x21 * x872))
    result[1, 4, 11] = numpy.sum(x294 * (x1030 + x21 * x874))
    result[1, 4, 12] = numpy.sum(x772 * (x1032 + x21 * x876))
    result[1, 4, 13] = numpy.sum(x294 * (x1035 + x21 * x878))
    result[1, 4, 14] = numpy.sum(x793 * (x1037 + x21 * x880))
    result[1, 5, 0] = numpy.sum(x761 * (x1052 + x22 * x836))
    result[1, 5, 1] = numpy.sum(x147 * (x1060 + x22 * x839))
    result[1, 5, 2] = numpy.sum(x147 * (x1068 + x22 * x842))
    result[1, 5, 3] = numpy.sum(x769 * (x1075 + x22 * x846))
    result[1, 5, 4] = numpy.sum(x772 * (x1082 + x22 * x850))
    result[1, 5, 5] = numpy.sum(x769 * (x1089 + x22 * x854))
    result[1, 5, 6] = numpy.sum(x147 * (x1094 + x22 * x858))
    result[1, 5, 7] = numpy.sum(x772 * (x1099 + x22 * x862))
    result[1, 5, 8] = numpy.sum(x772 * (x1104 + x22 * x866))
    result[1, 5, 9] = numpy.sum(x147 * (x1109 + x22 * x870))
    result[1, 5, 10] = numpy.sum(x761 * (x1111 + x22 * x872))
    result[1, 5, 11] = numpy.sum(x147 * (x1113 + x22 * x874))
    result[1, 5, 12] = numpy.sum(x769 * (x1115 + x22 * x876))
    result[1, 5, 13] = numpy.sum(x147 * (x1117 + x22 * x878))
    result[1, 5, 14] = numpy.sum(x761 * (x1119 + x22 * x880))
    result[2, 0, 0] = numpy.sum(x761 * (x0 * x386 + x0 * (x1120 * x97 + x386) + x396))
    result[2, 0, 1] = numpy.sum(x147 * (x0 * x403 + x0 * (x1121 * x97 + x403) + x405))
    result[2, 0, 2] = numpy.sum(x147 * (x0 * x417 + x0 * (x1122 * x97 + x417) + x420))
    result[2, 0, 3] = numpy.sum(x769 * (x0 * x423 + x0 * (x1124 * x97 + x423) + x425))
    result[2, 0, 4] = numpy.sum(x772 * (x0 * x431 + x0 * (x1126 * x97 + x431) + x434))
    result[2, 0, 5] = numpy.sum(x769 * (x0 * x441 + x0 * (x1129 * x97 + x441) + x444))
    result[2, 0, 6] = numpy.sum(x147 * (x0 * x445 + x0 * (x1130 * x97 + x445) + x447))
    result[2, 0, 7] = numpy.sum(x772 * (x0 * x449 + x0 * (x1132 * x97 + x449) + x451))
    result[2, 0, 8] = numpy.sum(x772 * (x0 * x453 + x0 * (x1133 * x97 + x453) + x455))
    result[2, 0, 9] = numpy.sum(x147 * (x0 * x458 + x0 * (x1136 * x97 + x458) + x461))
    result[2, 0, 10] = numpy.sum(x761 * (x0 * x462 + x0 * (x0 * x1137 + x462) + x465))
    result[2, 0, 11] = numpy.sum(x147 * (x0 * x466 + x0 * (x0 * x1138 + x466) + x468))
    result[2, 0, 12] = numpy.sum(x769 * (x0 * x469 + x0 * (x0 * x1139 + x469) + x472))
    result[2, 0, 13] = numpy.sum(x147 * (x0 * x473 + x0 * (x0 * x1140 + x473) + x475))
    result[2, 0, 14] = numpy.sum(x761 * (x0 * x476 + x0 * (x1141 * x97 + x476) + x478))
    result[2, 1, 0] = numpy.sum(x793 * (x0 * x1142 + x21 * x386 + x604))
    result[2, 1, 1] = numpy.sum(x294 * (x0 * x1143 + x21 * x403 + x614))
    result[2, 1, 2] = numpy.sum(x294 * (x0 * x1144 + x21 * x417 + x624))
    result[2, 1, 3] = numpy.sum(x772 * (x0 * x1145 + x21 * x423 + x631))
    result[2, 1, 4] = numpy.sum(x808 * (x0 * x1146 + x21 * x431 + x638))
    result[2, 1, 5] = numpy.sum(x772 * (x0 * x1147 + x21 * x441 + x645))
    result[2, 1, 6] = numpy.sum(x294 * (x0 * x1148 + x21 * x445 + x649))
    result[2, 1, 7] = numpy.sum(x808 * (x0 * x1149 + x21 * x449 + x654))
    result[2, 1, 8] = numpy.sum(x808 * (x0 * x1150 + x21 * x453 + x658))
    result[2, 1, 9] = numpy.sum(x294 * (x0 * x1151 + x21 * x458 + x662))
    result[2, 1, 10] = numpy.sum(x793 * (x0 * x1152 + x21 * x462 + x664))
    result[2, 1, 11] = numpy.sum(x294 * (x0 * x1153 + x21 * x466 + x667))
    result[2, 1, 12] = numpy.sum(x772 * (x0 * x1154 + x21 * x469 + x669))
    result[2, 1, 13] = numpy.sum(x294 * (x0 * x1155 + x21 * x473 + x671))
    result[2, 1, 14] = numpy.sum(x793 * (x0 * x1156 + x21 * x476 + x673))
    result[2, 2, 0] = numpy.sum(x793 * (x0 * x1159 + x706))
    result[2, 2, 1] = numpy.sum(x294 * (x0 * x1162 + x712))
    result[2, 2, 2] = numpy.sum(x294 * (x0 * x1165 + x723))
    result[2, 2, 3] = numpy.sum(x772 * (x0 * x1169 + x726))
    result[2, 2, 4] = numpy.sum(x808 * (x0 * x1173 + x729))
    result[2, 2, 5] = numpy.sum(x772 * (x0 * x1178 + x736))
    result[2, 2, 6] = numpy.sum(x294 * (x0 * x1180 + x738))
    result[2, 2, 7] = numpy.sum(x808 * (x0 * x1182 + x740))
    result[2, 2, 8] = numpy.sum(x808 * (x0 * x1184 + x742))
    result[2, 2, 9] = numpy.sum(x294 * (x0 * x1187 + x747))
    result[2, 2, 10] = numpy.sum(x793 * (x0 * x1189 + x749))
    result[2, 2, 11] = numpy.sum(x294 * (x0 * x1191 + x751))
    result[2, 2, 12] = numpy.sum(x772 * (x0 * x1193 + x753))
    result[2, 2, 13] = numpy.sum(x294 * (x0 * x1195 + x755))
    result[2, 2, 14] = numpy.sum(x793 * (x0 * x1197 + x757))
    result[2, 3, 0] = numpy.sum(x761 * (x1142 * x21 + x1198))
    result[2, 3, 1] = numpy.sum(x147 * (x1143 * x21 + x1199))
    result[2, 3, 2] = numpy.sum(x147 * (x1144 * x21 + x1200))
    result[2, 3, 3] = numpy.sum(x769 * (x1145 * x21 + x1201))
    result[2, 3, 4] = numpy.sum(x772 * (x1146 * x21 + x1202))
    result[2, 3, 5] = numpy.sum(x769 * (x1147 * x21 + x1203))
    result[2, 3, 6] = numpy.sum(x147 * (x1148 * x21 + x1204))
    result[2, 3, 7] = numpy.sum(x772 * (x1149 * x21 + x1205))
    result[2, 3, 8] = numpy.sum(x772 * (x1150 * x21 + x1206))
    result[2, 3, 9] = numpy.sum(x147 * (x1151 * x21 + x1207))
    result[2, 3, 10] = numpy.sum(x761 * (x1152 * x21 + x1208))
    result[2, 3, 11] = numpy.sum(x147 * (x1153 * x21 + x1209))
    result[2, 3, 12] = numpy.sum(x769 * (x1154 * x21 + x1210))
    result[2, 3, 13] = numpy.sum(x147 * (x1155 * x21 + x1211))
    result[2, 3, 14] = numpy.sum(x761 * (x1156 * x21 + x1212))
    result[2, 4, 0] = numpy.sum(x793 * (x1052 + x1159 * x21))
    result[2, 4, 1] = numpy.sum(x294 * (x1060 + x1162 * x21))
    result[2, 4, 2] = numpy.sum(x294 * (x1068 + x1165 * x21))
    result[2, 4, 3] = numpy.sum(x772 * (x1075 + x1169 * x21))
    result[2, 4, 4] = numpy.sum(x808 * (x1082 + x1173 * x21))
    result[2, 4, 5] = numpy.sum(x772 * (x1089 + x1178 * x21))
    result[2, 4, 6] = numpy.sum(x294 * (x1094 + x1180 * x21))
    result[2, 4, 7] = numpy.sum(x808 * (x1099 + x1182 * x21))
    result[2, 4, 8] = numpy.sum(x808 * (x1104 + x1184 * x21))
    result[2, 4, 9] = numpy.sum(x294 * (x1109 + x1187 * x21))
    result[2, 4, 10] = numpy.sum(x793 * (x1111 + x1189 * x21))
    result[2, 4, 11] = numpy.sum(x294 * (x1113 + x1191 * x21))
    result[2, 4, 12] = numpy.sum(x772 * (x1115 + x1193 * x21))
    result[2, 4, 13] = numpy.sum(x294 * (x1117 + x1195 * x21))
    result[2, 4, 14] = numpy.sum(x793 * (x1119 + x1197 * x21))
    result[2, 5, 0] = numpy.sum(x761 * (x1159 * x22 + x1230))
    result[2, 5, 1] = numpy.sum(x147 * (x1162 * x22 + x1235))
    result[2, 5, 2] = numpy.sum(x147 * (x1165 * x22 + x1243))
    result[2, 5, 3] = numpy.sum(x769 * (x1169 * x22 + x1247))
    result[2, 5, 4] = numpy.sum(x772 * (x1173 * x22 + x1251))
    result[2, 5, 5] = numpy.sum(x769 * (x1178 * x22 + x1258))
    result[2, 5, 6] = numpy.sum(x147 * (x1180 * x22 + x1260))
    result[2, 5, 7] = numpy.sum(x772 * (x1182 * x22 + x1262))
    result[2, 5, 8] = numpy.sum(x772 * (x1184 * x22 + x1264))
    result[2, 5, 9] = numpy.sum(x147 * (x1187 * x22 + x1268))
    result[2, 5, 10] = numpy.sum(x761 * (x1189 * x22 + x1270))
    result[2, 5, 11] = numpy.sum(x147 * (x1191 * x22 + x1272))
    result[2, 5, 12] = numpy.sum(x769 * (x1193 * x22 + x1274))
    result[2, 5, 13] = numpy.sum(x147 * (x1195 * x22 + x1276))
    result[2, 5, 14] = numpy.sum(x761 * (x1197 * x22 + x1278))
    result[3, 0, 0] = numpy.sum(x761 * (x0 * x791 + x0 * (x1281 * x97 + x791) + x509))
    result[3, 0, 1] = numpy.sum(x147 * (x0 * x795 + x0 * (x1284 * x97 + x795) + x526))
    result[3, 0, 2] = numpy.sum(x147 * (x0 * x798 + x0 * (x1286 * x97 + x798) + x533))
    result[3, 0, 3] = numpy.sum(x769 * (x0 * x802 + x0 * (x1287 * x97 + x802) + x540))
    result[3, 0, 4] = numpy.sum(x772 * (x0 * x806 + x0 * (x1288 * x97 + x806) + x547))
    result[3, 0, 5] = numpy.sum(x769 * (x0 * x811 + x0 * (x1290 * x97 + x811) + x551))
    result[3, 0, 6] = numpy.sum(x147 * (x0 * x814 + x0 * (x1292 * x97 + x814) + x556))
    result[3, 0, 7] = numpy.sum(x772 * (x0 * x817 + x0 * (x1294 * x97 + x817) + x561))
    result[3, 0, 8] = numpy.sum(x772 * (x0 * x820 + x0 * (x1296 * x97 + x820) + x566))
    result[3, 0, 9] = numpy.sum(x147 * (x0 * x822 + x0 * (x1298 * x97 + x822) + x569))
    result[3, 0, 10] = numpy.sum(x761 * (x0 * x824 + x0 * (x1299 * x97 + x824) + x571))
    result[3, 0, 11] = numpy.sum(x147 * (x0 * x826 + x0 * (x1300 * x97 + x826) + x573))
    result[3, 0, 12] = numpy.sum(x769 * (x0 * x828 + x0 * (x1301 * x97 + x828) + x575))
    result[3, 0, 13] = numpy.sum(x147 * (x0 * x830 + x0 * (x1302 * x97 + x830) + x577))
    result[3, 0, 14] = numpy.sum(x761 * (x0 * x832 + x0 * (x0 * x1303 + x832) + x579))
    result[3, 1, 0] = numpy.sum(x793 * (x0 * x1305 + x898))
    result[3, 1, 1] = numpy.sum(x294 * (x0 * x1307 + x910))
    result[3, 1, 2] = numpy.sum(x294 * (x0 * x1309 + x915))
    result[3, 1, 3] = numpy.sum(x772 * (x0 * x1311 + x921))
    result[3, 1, 4] = numpy.sum(x808 * (x0 * x1313 + x927))
    result[3, 1, 5] = numpy.sum(x772 * (x0 * x1315 + x931))
    result[3, 1, 6] = numpy.sum(x294 * (x0 * x1318 + x935))
    result[3, 1, 7] = numpy.sum(x808 * (x0 * x1321 + x939))
    result[3, 1, 8] = numpy.sum(x808 * (x0 * x1324 + x943))
    result[3, 1, 9] = numpy.sum(x294 * (x0 * x1327 + x945))
    result[3, 1, 10] = numpy.sum(x793 * (x0 * x1329 + x947))
    result[3, 1, 11] = numpy.sum(x294 * (x0 * x1331 + x949))
    result[3, 1, 12] = numpy.sum(x772 * (x0 * x1333 + x951))
    result[3, 1, 13] = numpy.sum(x294 * (x0 * x1335 + x953))
    result[3, 1, 14] = numpy.sum(x793 * (x0 * x1337 + x955))
    result[3, 2, 0] = numpy.sum(x793 * (x0 * x1339 + x970))
    result[3, 2, 1] = numpy.sum(x294 * (x0 * x1341 + x979))
    result[3, 2, 2] = numpy.sum(x294 * (x0 * x1343 + x987))
    result[3, 2, 3] = numpy.sum(x772 * (x0 * x1345 + x993))
    result[3, 2, 4] = numpy.sum(x808 * (x0 * x1347 + x1001))
    result[3, 2, 5] = numpy.sum(x772 * (x0 * x1349 + x1008))
    result[3, 2, 6] = numpy.sum(x294 * (x0 * x1352 + x1012))
    result[3, 2, 7] = numpy.sum(x808 * (x0 * x1355 + x1016))
    result[3, 2, 8] = numpy.sum(x808 * (x0 * x1359 + x1021))
    result[3, 2, 9] = numpy.sum(x294 * (x0 * x1362 + x1026))
    result[3, 2, 10] = numpy.sum(x793 * (x0 * x1364 + x1028))
    result[3, 2, 11] = numpy.sum(x294 * (x0 * x1366 + x1030))
    result[3, 2, 12] = numpy.sum(x772 * (x0 * x1368 + x1032))
    result[3, 2, 13] = numpy.sum(x294 * (x0 * x1370 + x1035))
    result[3, 2, 14] = numpy.sum(x793 * (x0 * x1372 + x1037))
    result[3, 3, 0] = numpy.sum(x761 * (x1305 * x21 + x1378))
    result[3, 3, 1] = numpy.sum(x147 * (x1307 * x21 + x1386))
    result[3, 3, 2] = numpy.sum(x147 * (x1309 * x21 + x1388))
    result[3, 3, 3] = numpy.sum(x769 * (x1311 * x21 + x1392))
    result[3, 3, 4] = numpy.sum(x772 * (x1313 * x21 + x1396))
    result[3, 3, 5] = numpy.sum(x769 * (x1315 * x21 + x1398))
    result[3, 3, 6] = numpy.sum(x147 * (x1318 * x21 + x1402))
    result[3, 3, 7] = numpy.sum(x772 * (x1321 * x21 + x1406))
    result[3, 3, 8] = numpy.sum(x772 * (x1324 * x21 + x1410))
    result[3, 3, 9] = numpy.sum(x147 * (x1327 * x21 + x1412))
    result[3, 3, 10] = numpy.sum(x761 * (x1329 * x21 + x1413))
    result[3, 3, 11] = numpy.sum(x147 * (x1331 * x21 + x1414))
    result[3, 3, 12] = numpy.sum(x769 * (x1333 * x21 + x1415))
    result[3, 3, 13] = numpy.sum(x147 * (x1335 * x21 + x1416))
    result[3, 3, 14] = numpy.sum(x761 * (x1337 * x21 + x1417))
    result[3, 4, 0] = numpy.sum(x793 * (x1339 * x21 + x1423))
    result[3, 4, 1] = numpy.sum(x294 * (x1341 * x21 + x1427))
    result[3, 4, 2] = numpy.sum(x294 * (x1343 * x21 + x1431))
    result[3, 4, 3] = numpy.sum(x772 * (x1345 * x21 + x1435))
    result[3, 4, 4] = numpy.sum(x808 * (x1347 * x21 + x1439))
    result[3, 4, 5] = numpy.sum(x772 * (x1349 * x21 + x1443))
    result[3, 4, 6] = numpy.sum(x294 * (x1352 * x21 + x1447))
    result[3, 4, 7] = numpy.sum(x808 * (x1355 * x21 + x1451))
    result[3, 4, 8] = numpy.sum(x808 * (x1359 * x21 + x1455))
    result[3, 4, 9] = numpy.sum(x294 * (x1362 * x21 + x1459))
    result[3, 4, 10] = numpy.sum(x793 * (x1364 * x21 + x1461))
    result[3, 4, 11] = numpy.sum(x294 * (x1366 * x21 + x1463))
    result[3, 4, 12] = numpy.sum(x772 * (x1368 * x21 + x1465))
    result[3, 4, 13] = numpy.sum(x294 * (x1370 * x21 + x1467))
    result[3, 4, 14] = numpy.sum(x793 * (x1372 * x21 + x1469))
    result[3, 5, 0] = numpy.sum(x761 * (x1339 * x22 + x1475))
    result[3, 5, 1] = numpy.sum(x147 * (x1341 * x22 + x1479))
    result[3, 5, 2] = numpy.sum(x147 * (x1343 * x22 + x1483))
    result[3, 5, 3] = numpy.sum(x769 * (x1345 * x22 + x1487))
    result[3, 5, 4] = numpy.sum(x772 * (x1347 * x22 + x1491))
    result[3, 5, 5] = numpy.sum(x769 * (x1349 * x22 + x1495))
    result[3, 5, 6] = numpy.sum(x147 * (x1352 * x22 + x1499))
    result[3, 5, 7] = numpy.sum(x772 * (x1355 * x22 + x1503))
    result[3, 5, 8] = numpy.sum(x772 * (x1359 * x22 + x1507))
    result[3, 5, 9] = numpy.sum(x147 * (x1362 * x22 + x1511))
    result[3, 5, 10] = numpy.sum(x761 * (x1364 * x22 + x1513))
    result[3, 5, 11] = numpy.sum(x147 * (x1366 * x22 + x1515))
    result[3, 5, 12] = numpy.sum(x769 * (x1368 * x22 + x1517))
    result[3, 5, 13] = numpy.sum(x147 * (x1370 * x22 + x1519))
    result[3, 5, 14] = numpy.sum(x761 * (x1372 * x22 + x1521))
    result[4, 0, 0] = numpy.sum(x793 * (x0 * x835 + x0 * (x1522 * x97 + x835) + x604))
    result[4, 0, 1] = numpy.sum(x294 * (x0 * x838 + x0 * (x1523 * x97 + x838) + x614))
    result[4, 0, 2] = numpy.sum(x294 * (x0 * x841 + x0 * (x1524 * x97 + x841) + x624))
    result[4, 0, 3] = numpy.sum(x772 * (x0 * x845 + x0 * (x1525 * x97 + x845) + x631))
    result[4, 0, 4] = numpy.sum(x808 * (x0 * x849 + x0 * (x1526 * x97 + x849) + x638))
    result[4, 0, 5] = numpy.sum(x772 * (x0 * x853 + x0 * (x1527 * x97 + x853) + x645))
    result[4, 0, 6] = numpy.sum(x294 * (x0 * x857 + x0 * (x1529 * x97 + x857) + x649))
    result[4, 0, 7] = numpy.sum(x808 * (x0 * x861 + x0 * (x1531 * x97 + x861) + x654))
    result[4, 0, 8] = numpy.sum(x808 * (x0 * x865 + x0 * (x1533 * x97 + x865) + x658))
    result[4, 0, 9] = numpy.sum(x294 * (x0 * x869 + x0 * (x1535 * x97 + x869) + x662))
    result[4, 0, 10] = numpy.sum(x793 * (x0 * x871 + x0 * (x1536 * x97 + x871) + x664))
    result[4, 0, 11] = numpy.sum(x294 * (x0 * x873 + x0 * (x1537 * x97 + x873) + x667))
    result[4, 0, 12] = numpy.sum(x772 * (x0 * x875 + x0 * (x1538 * x97 + x875) + x669))
    result[4, 0, 13] = numpy.sum(x294 * (x0 * x877 + x0 * (x1539 * x97 + x877) + x671))
    result[4, 0, 14] = numpy.sum(x793 * (x0 * x879 + x0 * (x1540 * x97 + x879) + x673))
    result[4, 1, 0] = numpy.sum(x1542 * (x0 * x1541 + x1198))
    result[4, 1, 1] = numpy.sum(x1544 * (x0 * x1543 + x1199))
    result[4, 1, 2] = numpy.sum(x1544 * (x0 * x1545 + x1200))
    result[4, 1, 3] = numpy.sum(x808 * (x0 * x1546 + x1201))
    result[4, 1, 4] = numpy.sum(x1548 * (x0 * x1547 + x1202))
    result[4, 1, 5] = numpy.sum(x808 * (x0 * x1549 + x1203))
    result[4, 1, 6] = numpy.sum(x1544 * (x0 * x1550 + x1204))
    result[4, 1, 7] = numpy.sum(x1548 * (x0 * x1551 + x1205))
    result[4, 1, 8] = numpy.sum(x1548 * (x0 * x1552 + x1206))
    result[4, 1, 9] = numpy.sum(x1544 * (x0 * x1553 + x1207))
    result[4, 1, 10] = numpy.sum(x1542 * (x0 * x1554 + x1208))
    result[4, 1, 11] = numpy.sum(x1544 * (x0 * x1555 + x1209))
    result[4, 1, 12] = numpy.sum(x808 * (x0 * x1556 + x1210))
    result[4, 1, 13] = numpy.sum(x1544 * (x0 * x1557 + x1211))
    result[4, 1, 14] = numpy.sum(x1542 * (x0 * x1558 + x1212))
    result[4, 2, 0] = numpy.sum(x1542 * (x0 * x1560 + x1052))
    result[4, 2, 1] = numpy.sum(x1544 * (x0 * x1562 + x1060))
    result[4, 2, 2] = numpy.sum(x1544 * (x0 * x1564 + x1068))
    result[4, 2, 3] = numpy.sum(x808 * (x0 * x1566 + x1075))
    result[4, 2, 4] = numpy.sum(x1548 * (x0 * x1568 + x1082))
    result[4, 2, 5] = numpy.sum(x808 * (x0 * x1570 + x1089))
    result[4, 2, 6] = numpy.sum(x1544 * (x0 * x1573 + x1094))
    result[4, 2, 7] = numpy.sum(x1548 * (x0 * x1576 + x1099))
    result[4, 2, 8] = numpy.sum(x1548 * (x0 * x1579 + x1104))
    result[4, 2, 9] = numpy.sum(x1544 * (x0 * x1582 + x1109))
    result[4, 2, 10] = numpy.sum(x1542 * (x0 * x1584 + x1111))
    result[4, 2, 11] = numpy.sum(x1544 * (x0 * x1586 + x1113))
    result[4, 2, 12] = numpy.sum(x808 * (x0 * x1588 + x1115))
    result[4, 2, 13] = numpy.sum(x1544 * (x0 * x1590 + x1117))
    result[4, 2, 14] = numpy.sum(x1542 * (x0 * x1592 + x1119))
    result[4, 3, 0] = numpy.sum(x793 * (x1541 * x21 + x1593))
    result[4, 3, 1] = numpy.sum(x294 * (x1543 * x21 + x1594))
    result[4, 3, 2] = numpy.sum(x294 * (x1545 * x21 + x1595))
    result[4, 3, 3] = numpy.sum(x772 * (x1546 * x21 + x1596))
    result[4, 3, 4] = numpy.sum(x808 * (x1547 * x21 + x1597))
    result[4, 3, 5] = numpy.sum(x772 * (x1549 * x21 + x1598))
    result[4, 3, 6] = numpy.sum(x294 * (x1550 * x21 + x1599))
    result[4, 3, 7] = numpy.sum(x808 * (x1551 * x21 + x1600))
    result[4, 3, 8] = numpy.sum(x808 * (x1552 * x21 + x1601))
    result[4, 3, 9] = numpy.sum(x294 * (x1553 * x21 + x1602))
    result[4, 3, 10] = numpy.sum(x793 * (x1554 * x21 + x1603))
    result[4, 3, 11] = numpy.sum(x294 * (x1555 * x21 + x1604))
    result[4, 3, 12] = numpy.sum(x772 * (x1556 * x21 + x1605))
    result[4, 3, 13] = numpy.sum(x294 * (x1557 * x21 + x1606))
    result[4, 3, 14] = numpy.sum(x793 * (x1558 * x21 + x1607))
    result[4, 4, 0] = numpy.sum(x1542 * (x1475 + x1560 * x21))
    result[4, 4, 1] = numpy.sum(x1544 * (x1479 + x1562 * x21))
    result[4, 4, 2] = numpy.sum(x1544 * (x1483 + x1564 * x21))
    result[4, 4, 3] = numpy.sum(x808 * (x1487 + x1566 * x21))
    result[4, 4, 4] = numpy.sum(x1548 * (x1491 + x1568 * x21))
    result[4, 4, 5] = numpy.sum(x808 * (x1495 + x1570 * x21))
    result[4, 4, 6] = numpy.sum(x1544 * (x1499 + x1573 * x21))
    result[4, 4, 7] = numpy.sum(x1548 * (x1503 + x1576 * x21))
    result[4, 4, 8] = numpy.sum(x1548 * (x1507 + x1579 * x21))
    result[4, 4, 9] = numpy.sum(x1544 * (x1511 + x1582 * x21))
    result[4, 4, 10] = numpy.sum(x1542 * (x1513 + x1584 * x21))
    result[4, 4, 11] = numpy.sum(x1544 * (x1515 + x1586 * x21))
    result[4, 4, 12] = numpy.sum(x808 * (x1517 + x1588 * x21))
    result[4, 4, 13] = numpy.sum(x1544 * (x1519 + x1590 * x21))
    result[4, 4, 14] = numpy.sum(x1542 * (x1521 + x1592 * x21))
    result[4, 5, 0] = numpy.sum(x793 * (x1560 * x22 + x1613))
    result[4, 5, 1] = numpy.sum(x294 * (x1562 * x22 + x1617))
    result[4, 5, 2] = numpy.sum(x294 * (x1564 * x22 + x1621))
    result[4, 5, 3] = numpy.sum(x772 * (x1566 * x22 + x1625))
    result[4, 5, 4] = numpy.sum(x808 * (x1568 * x22 + x1629))
    result[4, 5, 5] = numpy.sum(x772 * (x1570 * x22 + x1633))
    result[4, 5, 6] = numpy.sum(x294 * (x1573 * x22 + x1637))
    result[4, 5, 7] = numpy.sum(x808 * (x1576 * x22 + x1641))
    result[4, 5, 8] = numpy.sum(x808 * (x1579 * x22 + x1645))
    result[4, 5, 9] = numpy.sum(x294 * (x1582 * x22 + x1649))
    result[4, 5, 10] = numpy.sum(x793 * (x1584 * x22 + x1651))
    result[4, 5, 11] = numpy.sum(x294 * (x1586 * x22 + x1653))
    result[4, 5, 12] = numpy.sum(x772 * (x1588 * x22 + x1655))
    result[4, 5, 13] = numpy.sum(x294 * (x1590 * x22 + x1657))
    result[4, 5, 14] = numpy.sum(x793 * (x1592 * x22 + x1659))
    result[5, 0, 0] = numpy.sum(x761 * (x0 * x1158 + x0 * (x1158 + x1660 * x97) + x705))
    result[5, 0, 1] = numpy.sum(x147 * (x0 * x1161 + x0 * (x1161 + x1662 * x97) + x711))
    result[5, 0, 2] = numpy.sum(x147 * (x0 * x1164 + x0 * (x1164 + x1663 * x97) + x722))
    result[5, 0, 3] = numpy.sum(x769 * (x0 * x1168 + x0 * (x1168 + x1664 * x97) + x725))
    result[5, 0, 4] = numpy.sum(x772 * (x0 * x1172 + x0 * (x1172 + x1667 * x97) + x728))
    result[5, 0, 5] = numpy.sum(x769 * (x0 * x1177 + x0 * (x1177 + x1668 * x97) + x735))
    result[5, 0, 6] = numpy.sum(x147 * (x0 * x1179 + x0 * (x1179 + x1670 * x97) + x737))
    result[5, 0, 7] = numpy.sum(x772 * (x0 * x1181 + x0 * (x1181 + x1672 * x97) + x739))
    result[5, 0, 8] = numpy.sum(x772 * (x0 * x1183 + x0 * (x1183 + x1674 * x97) + x741))
    result[5, 0, 9] = numpy.sum(x147 * (x0 * x1186 + x0 * (x1186 + x1677 * x97) + x746))
    result[5, 0, 10] = numpy.sum(x761 * (x0 * x1188 + x0 * (x0 * x1678 + x1188) + x748))
    result[5, 0, 11] = numpy.sum(x147 * (x0 * x1190 + x0 * (x0 * x1679 + x1190) + x750))
    result[5, 0, 12] = numpy.sum(x769 * (x0 * x1192 + x0 * (x0 * x1680 + x1192) + x752))
    result[5, 0, 13] = numpy.sum(x147 * (x0 * x1194 + x0 * (x0 * x1681 + x1194) + x754))
    result[5, 0, 14] = numpy.sum(x761 * (x0 * x1196 + x0 * (x1196 + x1682 * x97) + x756))
    result[5, 1, 0] = numpy.sum(x793 * (x0 * x1683 + x1051 + x1158 * x21))
    result[5, 1, 1] = numpy.sum(x294 * (x0 * x1684 + x1059 + x1161 * x21))
    result[5, 1, 2] = numpy.sum(x294 * (x0 * x1685 + x1067 + x1164 * x21))
    result[5, 1, 3] = numpy.sum(x772 * (x0 * x1686 + x1074 + x1168 * x21))
    result[5, 1, 4] = numpy.sum(x808 * (x0 * x1687 + x1081 + x1172 * x21))
    result[5, 1, 5] = numpy.sum(x772 * (x0 * x1688 + x1088 + x1177 * x21))
    result[5, 1, 6] = numpy.sum(x294 * (x0 * x1689 + x1093 + x1179 * x21))
    result[5, 1, 7] = numpy.sum(x808 * (x0 * x1690 + x1098 + x1181 * x21))
    result[5, 1, 8] = numpy.sum(x808 * (x0 * x1691 + x1103 + x1183 * x21))
    result[5, 1, 9] = numpy.sum(x294 * (x0 * x1692 + x1108 + x1186 * x21))
    result[5, 1, 10] = numpy.sum(x793 * (x0 * x1693 + x1110 + x1188 * x21))
    result[5, 1, 11] = numpy.sum(x294 * (x0 * x1694 + x1112 + x1190 * x21))
    result[5, 1, 12] = numpy.sum(x772 * (x0 * x1695 + x1114 + x1192 * x21))
    result[5, 1, 13] = numpy.sum(x294 * (x0 * x1696 + x1116 + x1194 * x21))
    result[5, 1, 14] = numpy.sum(x793 * (x0 * x1697 + x1118 + x1196 * x21))
    result[5, 2, 0] = numpy.sum(x793 * (x0 * x1699 + x1230))
    result[5, 2, 1] = numpy.sum(x294 * (x0 * x1701 + x1235))
    result[5, 2, 2] = numpy.sum(x294 * (x0 * x1703 + x1243))
    result[5, 2, 3] = numpy.sum(x772 * (x0 * x1705 + x1247))
    result[5, 2, 4] = numpy.sum(x808 * (x0 * x1707 + x1251))
    result[5, 2, 5] = numpy.sum(x772 * (x0 * x1709 + x1258))
    result[5, 2, 6] = numpy.sum(x294 * (x0 * x1712 + x1260))
    result[5, 2, 7] = numpy.sum(x808 * (x0 * x1715 + x1262))
    result[5, 2, 8] = numpy.sum(x808 * (x0 * x1718 + x1264))
    result[5, 2, 9] = numpy.sum(x294 * (x0 * x1722 + x1268))
    result[5, 2, 10] = numpy.sum(x793 * (x0 * x1724 + x1270))
    result[5, 2, 11] = numpy.sum(x294 * (x0 * x1726 + x1272))
    result[5, 2, 12] = numpy.sum(x772 * (x0 * x1728 + x1274))
    result[5, 2, 13] = numpy.sum(x294 * (x0 * x1730 + x1276))
    result[5, 2, 14] = numpy.sum(x793 * (x0 * x1732 + x1278))
    result[5, 3, 0] = numpy.sum(x761 * (x1683 * x21 + x1733))
    result[5, 3, 1] = numpy.sum(x147 * (x1684 * x21 + x1734))
    result[5, 3, 2] = numpy.sum(x147 * (x1685 * x21 + x1735))
    result[5, 3, 3] = numpy.sum(x769 * (x1686 * x21 + x1736))
    result[5, 3, 4] = numpy.sum(x772 * (x1687 * x21 + x1737))
    result[5, 3, 5] = numpy.sum(x769 * (x1688 * x21 + x1738))
    result[5, 3, 6] = numpy.sum(x147 * (x1689 * x21 + x1739))
    result[5, 3, 7] = numpy.sum(x772 * (x1690 * x21 + x1740))
    result[5, 3, 8] = numpy.sum(x772 * (x1691 * x21 + x1741))
    result[5, 3, 9] = numpy.sum(x147 * (x1692 * x21 + x1742))
    result[5, 3, 10] = numpy.sum(x761 * (x1693 * x21 + x1743))
    result[5, 3, 11] = numpy.sum(x147 * (x1694 * x21 + x1744))
    result[5, 3, 12] = numpy.sum(x769 * (x1695 * x21 + x1745))
    result[5, 3, 13] = numpy.sum(x147 * (x1696 * x21 + x1746))
    result[5, 3, 14] = numpy.sum(x761 * (x1697 * x21 + x1747))
    result[5, 4, 0] = numpy.sum(x793 * (x1613 + x1699 * x21))
    result[5, 4, 1] = numpy.sum(x294 * (x1617 + x1701 * x21))
    result[5, 4, 2] = numpy.sum(x294 * (x1621 + x1703 * x21))
    result[5, 4, 3] = numpy.sum(x772 * (x1625 + x1705 * x21))
    result[5, 4, 4] = numpy.sum(x808 * (x1629 + x1707 * x21))
    result[5, 4, 5] = numpy.sum(x772 * (x1633 + x1709 * x21))
    result[5, 4, 6] = numpy.sum(x294 * (x1637 + x1712 * x21))
    result[5, 4, 7] = numpy.sum(x808 * (x1641 + x1715 * x21))
    result[5, 4, 8] = numpy.sum(x808 * (x1645 + x1718 * x21))
    result[5, 4, 9] = numpy.sum(x294 * (x1649 + x1722 * x21))
    result[5, 4, 10] = numpy.sum(x793 * (x1651 + x1724 * x21))
    result[5, 4, 11] = numpy.sum(x294 * (x1653 + x1726 * x21))
    result[5, 4, 12] = numpy.sum(x772 * (x1655 + x1728 * x21))
    result[5, 4, 13] = numpy.sum(x294 * (x1657 + x1730 * x21))
    result[5, 4, 14] = numpy.sum(x793 * (x1659 + x1732 * x21))
    result[5, 5, 0] = numpy.sum(x761 * (x1699 * x22 + x1753))
    result[5, 5, 1] = numpy.sum(x147 * (x1701 * x22 + x1755))
    result[5, 5, 2] = numpy.sum(x147 * (x1703 * x22 + x1759))
    result[5, 5, 3] = numpy.sum(x769 * (x1705 * x22 + x1761))
    result[5, 5, 4] = numpy.sum(x772 * (x1707 * x22 + x1764))
    result[5, 5, 5] = numpy.sum(x769 * (x1709 * x22 + x1768))
    result[5, 5, 6] = numpy.sum(x147 * (x1712 * x22 + x1770))
    result[5, 5, 7] = numpy.sum(x772 * (x1715 * x22 + x1772))
    result[5, 5, 8] = numpy.sum(x772 * (x1718 * x22 + x1774))
    result[5, 5, 9] = numpy.sum(x147 * (x1722 * x22 + x1778))
    result[5, 5, 10] = numpy.sum(x761 * (x1724 * x22 + x1779))
    result[5, 5, 11] = numpy.sum(x147 * (x1726 * x22 + x1780))
    result[5, 5, 12] = numpy.sum(x769 * (x1728 * x22 + x1781))
    result[5, 5, 13] = numpy.sum(x147 * (x1730 * x22 + x1782))
    result[5, 5, 14] = numpy.sum(x761 * (x1732 * x22 + x1783))
    result[6, 0, 0] = numpy.sum(x110 * (x0 * x1304 + x0 * (x1304 + x1784 * x1785) + x897))
    result[6, 0, 1] = numpy.sum(x122 * (x0 * x1306 + x0 * (x0 * x1787 + x1306) + x909))
    result[6, 0, 2] = numpy.sum(x122 * (x0 * x1308 + x0 * (x1308 + x1785 * x1788) + x914))
    result[6, 0, 3] = numpy.sum(x139 * (x0 * x1310 + x0 * (x1310 + x1789 * x918) + x920))
    result[6, 0, 4] = numpy.sum(x147 * (x0 * x1312 + x0 * (x1312 + x1789 * x924) + x926))
    result[6, 0, 5] = numpy.sum(x139 * (x0 * x1314 + x0 * (x1314 + x1790 * x1791) + x930))
    result[6, 0, 6] = numpy.sum(x122 * (x0 * x1317 + x0 * (x1316 * x1792 + x1317) + x934))
    result[6, 0, 7] = numpy.sum(x147 * (x0 * x1320 + x0 * (x1319 * x1792 + x1320) + x938))
    result[6, 0, 8] = numpy.sum(x147 * (x0 * x1323 + x0 * (x1322 * x1792 + x1323) + x942))
    result[6, 0, 9] = numpy.sum(x122 * (x0 * x1326 + x0 * (x1326 + x1791 * x1793) + x944))
    result[6, 0, 10] = numpy.sum(x110 * (x0 * x1328 + x0 * (x1328 + x1794 * x97) + x946))
    result[6, 0, 11] = numpy.sum(x122 * (x0 * x1330 + x0 * (x1330 + x1795 * x97) + x948))
    result[6, 0, 12] = numpy.sum(x139 * (x0 * x1332 + x0 * (x1332 + x1796 * x97) + x950))
    result[6, 0, 13] = numpy.sum(x122 * (x0 * x1334 + x0 * (x1334 + x1797 * x97) + x952))
    result[6, 0, 14] = numpy.sum(x110 * (x0 * x1336 + x0 * (x1336 + x1785 * x184) + x954))
    result[6, 1, 0] = numpy.sum(x239 * (x0 * x1800 + x1378))
    result[6, 1, 1] = numpy.sum(x259 * (x0 * x1802 + x1386))
    result[6, 1, 2] = numpy.sum(x259 * (x0 * x1804 + x1388))
    result[6, 1, 3] = numpy.sum(x147 * (x0 * x1807 + x1392))
    result[6, 1, 4] = numpy.sum(x294 * (x0 * x1809 + x1396))
    result[6, 1, 5] = numpy.sum(x147 * (x0 * x1813 + x1398))
    result[6, 1, 6] = numpy.sum(x259 * (x0 * x1816 + x1402))
    result[6, 1, 7] = numpy.sum(x294 * (x0 * x1818 + x1406))
    result[6, 1, 8] = numpy.sum(x294 * (x0 * x1820 + x1410))
    result[6, 1, 9] = numpy.sum(x259 * (x0 * x1822 + x1412))
    result[6, 1, 10] = numpy.sum(x239 * (x0 * x1824 + x1413))
    result[6, 1, 11] = numpy.sum(x259 * (x0 * x1826 + x1414))
    result[6, 1, 12] = numpy.sum(x147 * (x0 * x1828 + x1415))
    result[6, 1, 13] = numpy.sum(x259 * (x0 * x1830 + x1416))
    result[6, 1, 14] = numpy.sum(x239 * (x0 * x1832 + x1417))
    result[6, 2, 0] = numpy.sum(x239 * (x0 * x1835 + x1423))
    result[6, 2, 1] = numpy.sum(x259 * (x0 * x1837 + x1427))
    result[6, 2, 2] = numpy.sum(x259 * (x0 * x1839 + x1431))
    result[6, 2, 3] = numpy.sum(x147 * (x0 * x1842 + x1435))
    result[6, 2, 4] = numpy.sum(x294 * (x0 * x1844 + x1439))
    result[6, 2, 5] = numpy.sum(x147 * (x0 * x1847 + x1443))
    result[6, 2, 6] = numpy.sum(x259 * (x0 * x1850 + x1447))
    result[6, 2, 7] = numpy.sum(x294 * (x0 * x1852 + x1451))
    result[6, 2, 8] = numpy.sum(x294 * (x0 * x1854 + x1455))
    result[6, 2, 9] = numpy.sum(x259 * (x0 * x1856 + x1459))
    result[6, 2, 10] = numpy.sum(x239 * (x0 * x1858 + x1461))
    result[6, 2, 11] = numpy.sum(x259 * (x0 * x1860 + x1463))
    result[6, 2, 12] = numpy.sum(x147 * (x0 * x1862 + x1465))
    result[6, 2, 13] = numpy.sum(x259 * (x0 * x1864 + x1467))
    result[6, 2, 14] = numpy.sum(x239 * (x0 * x1866 + x1469))
    result[6, 3, 0] = numpy.sum(x110 * (x1784 * x1867 + x1798 * x21 + x1800 * x21))
    result[6, 3, 1] = numpy.sum(x122 * (x1786 * x1870 + x1801 * x21 + x1802 * x21))
    result[6, 3, 2] = numpy.sum(x122 * (x1788 * x1867 + x1803 * x21 + x1804 * x21))
    result[6, 3, 3] = numpy.sum(x139 * (x1282 * x1871 + x1805 * x21 + x1807 * x21))
    result[6, 3, 4] = numpy.sum(x147 * (x1282 * x1872 + x1808 * x21 + x1809 * x21))
    result[6, 3, 5] = numpy.sum(x139 * (x1790 * x1873 + x1811 * x21 + x1813 * x21))
    result[6, 3, 6] = numpy.sum(x122 * (x1814 * x21 + x1816 * x21 + x1874 * x762))
    result[6, 3, 7] = numpy.sum(x147 * (x1817 * x21 + x1818 * x21 + x1875 * x762))
    result[6, 3, 8] = numpy.sum(x147 * (x1819 * x21 + x1820 * x21 + x1876 * x762))
    result[6, 3, 9] = numpy.sum(x122 * (x1793 * x1873 + x1821 * x21 + x1822 * x21))
    result[6, 3, 10] = numpy.sum(
        x110 * (x1823 * x21 + x1824 * x21 + x71 * (x111 * x1874 + 5.0 * x1400))
    )
    result[6, 3, 11] = numpy.sum(
        x122 * (x1825 * x21 + x1826 * x21 + x71 * (x111 * x1875 + 5.0 * x1404))
    )
    result[6, 3, 12] = numpy.sum(
        x139 * (x1827 * x21 + x1828 * x21 + x71 * (x111 * x1876 + 5.0 * x1408))
    )
    result[6, 3, 13] = numpy.sum(
        x122 * (x167 * x71 * (x1868 + x1869) + x1829 * x21 + x1830 * x21)
    )
    result[6, 3, 14] = numpy.sum(x110 * (x1831 * x21 + x1832 * x21 + x184 * x1867))
    result[6, 4, 0] = numpy.sum(x239 * (x1798 * x22 + x1835 * x21 + x1878))
    result[6, 4, 1] = numpy.sum(x259 * (x1801 * x22 + x1837 * x21 + x1880))
    result[6, 4, 2] = numpy.sum(x259 * (x1803 * x22 + x1839 * x21 + x1882))
    result[6, 4, 3] = numpy.sum(x147 * (x1805 * x22 + x1842 * x21 + x1884))
    result[6, 4, 4] = numpy.sum(x294 * (x1808 * x22 + x1844 * x21 + x1886))
    result[6, 4, 5] = numpy.sum(x147 * (x1811 * x22 + x1847 * x21 + x1888))
    result[6, 4, 6] = numpy.sum(x259 * (x1814 * x22 + x1850 * x21 + x1890))
    result[6, 4, 7] = numpy.sum(x294 * (x1817 * x22 + x1852 * x21 + x1892))
    result[6, 4, 8] = numpy.sum(x294 * (x1819 * x22 + x1854 * x21 + x1894))
    result[6, 4, 9] = numpy.sum(x259 * (x1821 * x22 + x1856 * x21 + x1896))
    result[6, 4, 10] = numpy.sum(x239 * (x1823 * x22 + x1858 * x21 + x1897))
    result[6, 4, 11] = numpy.sum(x259 * (x1825 * x22 + x1860 * x21 + x1898))
    result[6, 4, 12] = numpy.sum(x147 * (x1827 * x22 + x1862 * x21 + x1899))
    result[6, 4, 13] = numpy.sum(x259 * (x1829 * x22 + x1864 * x21 + x1900))
    result[6, 4, 14] = numpy.sum(x239 * (x1831 * x22 + x1866 * x21 + x1901))
    result[6, 5, 0] = numpy.sum(x110 * (x1835 * x22 + x1904))
    result[6, 5, 1] = numpy.sum(x122 * (x1837 * x22 + x1908))
    result[6, 5, 2] = numpy.sum(x122 * (x1839 * x22 + x1911))
    result[6, 5, 3] = numpy.sum(x139 * (x1842 * x22 + x1914))
    result[6, 5, 4] = numpy.sum(x147 * (x1844 * x22 + x1918))
    result[6, 5, 5] = numpy.sum(x139 * (x1847 * x22 + x1921))
    result[6, 5, 6] = numpy.sum(x122 * (x1850 * x22 + x1924))
    result[6, 5, 7] = numpy.sum(x147 * (x1852 * x22 + x1927))
    result[6, 5, 8] = numpy.sum(x147 * (x1854 * x22 + x1931))
    result[6, 5, 9] = numpy.sum(x122 * (x1856 * x22 + x1934))
    result[6, 5, 10] = numpy.sum(x110 * (x1858 * x22 + x1936))
    result[6, 5, 11] = numpy.sum(x122 * (x1860 * x22 + x1938))
    result[6, 5, 12] = numpy.sum(x139 * (x1862 * x22 + x1940))
    result[6, 5, 13] = numpy.sum(x122 * (x1864 * x22 + x1943))
    result[6, 5, 14] = numpy.sum(x110 * (x1866 * x22 + x1945))
    result[7, 0, 0] = numpy.sum(x761 * (x0 * x1338 + x0 * (x0 * x1946 + x1338) + x969))
    result[7, 0, 1] = numpy.sum(x147 * (x0 * x1340 + x0 * (x1340 + x1947 * x975) + x978))
    result[7, 0, 2] = numpy.sum(x147 * (x0 * x1342 + x0 * (x1342 + x1947 * x983) + x986))
    result[7, 0, 3] = numpy.sum(x769 * (x0 * x1344 + x0 * (x1344 + x1789 * x990) + x992))
    result[7, 0, 4] = numpy.sum(x772 * (x0 * x1346 + x0 * (x1346 + x1789 * x998) + x1000))
    result[7, 0, 5] = numpy.sum(
        x769 * (x0 * x1348 + x0 * (x1005 * x1789 + x1348) + x1007)
    )
    result[7, 0, 6] = numpy.sum(
        x147 * (x0 * x1351 + x0 * (x1350 * x1792 + x1351) + x1011)
    )
    result[7, 0, 7] = numpy.sum(
        x772 * (x0 * x1354 + x0 * (x1353 * x1792 + x1354) + x1015)
    )
    result[7, 0, 8] = numpy.sum(
        x772 * (x0 * x1358 + x0 * (x1357 * x1792 + x1358) + x1020)
    )
    result[7, 0, 9] = numpy.sum(
        x147 * (x0 * x1361 + x0 * (x1360 * x1792 + x1361) + x1025)
    )
    result[7, 0, 10] = numpy.sum(x761 * (x0 * x1363 + x0 * (x1363 + x1948 * x97) + x1027))
    result[7, 0, 11] = numpy.sum(x147 * (x0 * x1365 + x0 * (x1365 + x1949 * x97) + x1029))
    result[7, 0, 12] = numpy.sum(x769 * (x0 * x1367 + x0 * (x1367 + x1950 * x97) + x1031))
    result[7, 0, 13] = numpy.sum(x147 * (x0 * x1369 + x0 * (x1369 + x1952 * x97) + x1034))
    result[7, 0, 14] = numpy.sum(x761 * (x0 * x1371 + x0 * (x1371 + x1953 * x97) + x1036))
    result[7, 1, 0] = numpy.sum(x793 * (x0 * x1954 + x1593))
    result[7, 1, 1] = numpy.sum(x294 * (x0 * x1956 + x1594))
    result[7, 1, 2] = numpy.sum(x294 * (x0 * x1957 + x1595))
    result[7, 1, 3] = numpy.sum(x772 * (x0 * x1958 + x1596))
    result[7, 1, 4] = numpy.sum(x808 * (x0 * x1959 + x1597))
    result[7, 1, 5] = numpy.sum(x772 * (x0 * x1960 + x1598))
    result[7, 1, 6] = numpy.sum(x294 * (x0 * x1961 + x1599))
    result[7, 1, 7] = numpy.sum(x808 * (x0 * x1962 + x1600))
    result[7, 1, 8] = numpy.sum(x808 * (x0 * x1963 + x1601))
    result[7, 1, 9] = numpy.sum(x294 * (x0 * x1964 + x1602))
    result[7, 1, 10] = numpy.sum(x793 * (x0 * x1965 + x1603))
    result[7, 1, 11] = numpy.sum(x294 * (x0 * x1966 + x1604))
    result[7, 1, 12] = numpy.sum(x772 * (x0 * x1967 + x1605))
    result[7, 1, 13] = numpy.sum(x294 * (x0 * x1968 + x1606))
    result[7, 1, 14] = numpy.sum(x793 * (x0 * x1969 + x1607))
    result[7, 2, 0] = numpy.sum(x793 * (x0 * x1971 + x1475))
    result[7, 2, 1] = numpy.sum(x294 * (x0 * x1974 + x1479))
    result[7, 2, 2] = numpy.sum(x294 * (x0 * x1976 + x1483))
    result[7, 2, 3] = numpy.sum(x772 * (x0 * x1978 + x1487))
    result[7, 2, 4] = numpy.sum(x808 * (x0 * x1980 + x1491))
    result[7, 2, 5] = numpy.sum(x772 * (x0 * x1982 + x1495))
    result[7, 2, 6] = numpy.sum(x294 * (x0 * x1984 + x1499))
    result[7, 2, 7] = numpy.sum(x808 * (x0 * x1986 + x1503))
    result[7, 2, 8] = numpy.sum(x808 * (x0 * x1988 + x1507))
    result[7, 2, 9] = numpy.sum(x294 * (x0 * x1990 + x1511))
    result[7, 2, 10] = numpy.sum(x793 * (x0 * x1992 + x1513))
    result[7, 2, 11] = numpy.sum(x294 * (x0 * x1994 + x1515))
    result[7, 2, 12] = numpy.sum(x772 * (x0 * x1996 + x1517))
    result[7, 2, 13] = numpy.sum(x294 * (x0 * x1998 + x1519))
    result[7, 2, 14] = numpy.sum(x793 * (x0 * x2000 + x1521))
    result[7, 3, 0] = numpy.sum(x761 * (x1833 * x21 + x1878 + x1954 * x21))
    result[7, 3, 1] = numpy.sum(x147 * (x1836 * x21 + x1880 + x1956 * x21))
    result[7, 3, 2] = numpy.sum(x147 * (x1838 * x21 + x1882 + x1957 * x21))
    result[7, 3, 3] = numpy.sum(x769 * (x1840 * x21 + x1884 + x1958 * x21))
    result[7, 3, 4] = numpy.sum(x772 * (x1843 * x21 + x1886 + x1959 * x21))
    result[7, 3, 5] = numpy.sum(x769 * (x1845 * x21 + x1888 + x1960 * x21))
    result[7, 3, 6] = numpy.sum(x147 * (x1848 * x21 + x1890 + x1961 * x21))
    result[7, 3, 7] = numpy.sum(x772 * (x1851 * x21 + x1892 + x1962 * x21))
    result[7, 3, 8] = numpy.sum(x772 * (x1853 * x21 + x1894 + x1963 * x21))
    result[7, 3, 9] = numpy.sum(x147 * (x1855 * x21 + x1896 + x1964 * x21))
    result[7, 3, 10] = numpy.sum(x761 * (x1857 * x21 + x1897 + x1965 * x21))
    result[7, 3, 11] = numpy.sum(x147 * (x1859 * x21 + x1898 + x1966 * x21))
    result[7, 3, 12] = numpy.sum(x769 * (x1861 * x21 + x1899 + x1967 * x21))
    result[7, 3, 13] = numpy.sum(x147 * (x1863 * x21 + x1900 + x1968 * x21))
    result[7, 3, 14] = numpy.sum(x761 * (x1865 * x21 + x1901 + x1969 * x21))
    result[7, 4, 0] = numpy.sum(x793 * (x1904 + x1971 * x21))
    result[7, 4, 1] = numpy.sum(x294 * (x1908 + x1974 * x21))
    result[7, 4, 2] = numpy.sum(x294 * (x1911 + x1976 * x21))
    result[7, 4, 3] = numpy.sum(x772 * (x1914 + x1978 * x21))
    result[7, 4, 4] = numpy.sum(x808 * (x1918 + x1980 * x21))
    result[7, 4, 5] = numpy.sum(x772 * (x1921 + x1982 * x21))
    result[7, 4, 6] = numpy.sum(x294 * (x1924 + x1984 * x21))
    result[7, 4, 7] = numpy.sum(x808 * (x1927 + x1986 * x21))
    result[7, 4, 8] = numpy.sum(x808 * (x1931 + x1988 * x21))
    result[7, 4, 9] = numpy.sum(x294 * (x1934 + x1990 * x21))
    result[7, 4, 10] = numpy.sum(x793 * (x1936 + x1992 * x21))
    result[7, 4, 11] = numpy.sum(x294 * (x1938 + x1994 * x21))
    result[7, 4, 12] = numpy.sum(x772 * (x1940 + x1996 * x21))
    result[7, 4, 13] = numpy.sum(x294 * (x1943 + x1998 * x21))
    result[7, 4, 14] = numpy.sum(x793 * (x1945 + x2000 * x21))
    result[7, 5, 0] = numpy.sum(x761 * (x1971 * x22 + x2003))
    result[7, 5, 1] = numpy.sum(x147 * (x1974 * x22 + x2006))
    result[7, 5, 2] = numpy.sum(x147 * (x1976 * x22 + x2009))
    result[7, 5, 3] = numpy.sum(x769 * (x1978 * x22 + x2012))
    result[7, 5, 4] = numpy.sum(x772 * (x1980 * x22 + x2015))
    result[7, 5, 5] = numpy.sum(x769 * (x1982 * x22 + x2018))
    result[7, 5, 6] = numpy.sum(x147 * (x1984 * x22 + x2021))
    result[7, 5, 7] = numpy.sum(x772 * (x1986 * x22 + x2024))
    result[7, 5, 8] = numpy.sum(x772 * (x1988 * x22 + x2027))
    result[7, 5, 9] = numpy.sum(x147 * (x1990 * x22 + x2030))
    result[7, 5, 10] = numpy.sum(x761 * (x1992 * x22 + x2032))
    result[7, 5, 11] = numpy.sum(x147 * (x1994 * x22 + x2034))
    result[7, 5, 12] = numpy.sum(x769 * (x1996 * x22 + x2036))
    result[7, 5, 13] = numpy.sum(x147 * (x1998 * x22 + x2038))
    result[7, 5, 14] = numpy.sum(x761 * (x2000 * x22 + x2040))
    result[8, 0, 0] = numpy.sum(x761 * (x0 * x1559 + x0 * (x0 * x2041 + x1559) + x1051))
    result[8, 0, 1] = numpy.sum(
        x147 * (x0 * x1561 + x0 * (x1056 * x1947 + x1561) + x1059)
    )
    result[8, 0, 2] = numpy.sum(
        x147 * (x0 * x1563 + x0 * (x1064 * x1947 + x1563) + x1067)
    )
    result[8, 0, 3] = numpy.sum(
        x769 * (x0 * x1565 + x0 * (x1072 * x1789 + x1565) + x1074)
    )
    result[8, 0, 4] = numpy.sum(
        x772 * (x0 * x1567 + x0 * (x1079 * x1789 + x1567) + x1081)
    )
    result[8, 0, 5] = numpy.sum(
        x769 * (x0 * x1569 + x0 * (x1086 * x1789 + x1569) + x1088)
    )
    result[8, 0, 6] = numpy.sum(
        x147 * (x0 * x1572 + x0 * (x1571 * x1792 + x1572) + x1093)
    )
    result[8, 0, 7] = numpy.sum(
        x772 * (x0 * x1575 + x0 * (x1574 * x1792 + x1575) + x1098)
    )
    result[8, 0, 8] = numpy.sum(
        x772 * (x0 * x1578 + x0 * (x1577 * x1792 + x1578) + x1103)
    )
    result[8, 0, 9] = numpy.sum(
        x147 * (x0 * x1581 + x0 * (x1580 * x1792 + x1581) + x1108)
    )
    result[8, 0, 10] = numpy.sum(x761 * (x0 * x1583 + x0 * (x1583 + x2042 * x97) + x1110))
    result[8, 0, 11] = numpy.sum(x147 * (x0 * x1585 + x0 * (x1585 + x2043 * x97) + x1112))
    result[8, 0, 12] = numpy.sum(x769 * (x0 * x1587 + x0 * (x1587 + x2044 * x97) + x1114))
    result[8, 0, 13] = numpy.sum(x147 * (x0 * x1589 + x0 * (x1589 + x2045 * x97) + x1116))
    result[8, 0, 14] = numpy.sum(x761 * (x0 * x1591 + x0 * (x1591 + x2046 * x97) + x1118))
    result[8, 1, 0] = numpy.sum(x793 * (x0 * x2047 + x1733))
    result[8, 1, 1] = numpy.sum(x294 * (x0 * x2048 + x1734))
    result[8, 1, 2] = numpy.sum(x294 * (x0 * x2049 + x1735))
    result[8, 1, 3] = numpy.sum(x772 * (x0 * x2050 + x1736))
    result[8, 1, 4] = numpy.sum(x808 * (x0 * x2051 + x1737))
    result[8, 1, 5] = numpy.sum(x772 * (x0 * x2052 + x1738))
    result[8, 1, 6] = numpy.sum(x294 * (x0 * x2053 + x1739))
    result[8, 1, 7] = numpy.sum(x808 * (x0 * x2054 + x1740))
    result[8, 1, 8] = numpy.sum(x808 * (x0 * x2055 + x1741))
    result[8, 1, 9] = numpy.sum(x294 * (x0 * x2056 + x1742))
    result[8, 1, 10] = numpy.sum(x793 * (x0 * x2057 + x1743))
    result[8, 1, 11] = numpy.sum(x294 * (x0 * x2058 + x1744))
    result[8, 1, 12] = numpy.sum(x772 * (x0 * x2059 + x1745))
    result[8, 1, 13] = numpy.sum(x294 * (x0 * x2060 + x1746))
    result[8, 1, 14] = numpy.sum(x793 * (x0 * x2061 + x1747))
    result[8, 2, 0] = numpy.sum(x793 * (x0 * x2063 + x1613))
    result[8, 2, 1] = numpy.sum(x294 * (x0 * x2065 + x1617))
    result[8, 2, 2] = numpy.sum(x294 * (x0 * x2067 + x1621))
    result[8, 2, 3] = numpy.sum(x772 * (x0 * x2069 + x1625))
    result[8, 2, 4] = numpy.sum(x808 * (x0 * x2071 + x1629))
    result[8, 2, 5] = numpy.sum(x772 * (x0 * x2073 + x1633))
    result[8, 2, 6] = numpy.sum(x294 * (x0 * x2075 + x1637))
    result[8, 2, 7] = numpy.sum(x808 * (x0 * x2077 + x1641))
    result[8, 2, 8] = numpy.sum(x808 * (x0 * x2079 + x1645))
    result[8, 2, 9] = numpy.sum(x294 * (x0 * x2081 + x1649))
    result[8, 2, 10] = numpy.sum(x793 * (x0 * x2083 + x1651))
    result[8, 2, 11] = numpy.sum(x294 * (x0 * x2085 + x1653))
    result[8, 2, 12] = numpy.sum(x772 * (x0 * x2087 + x1655))
    result[8, 2, 13] = numpy.sum(x294 * (x0 * x2089 + x1657))
    result[8, 2, 14] = numpy.sum(x793 * (x0 * x2091 + x1659))
    result[8, 3, 0] = numpy.sum(x761 * (x1903 + x1970 * x21 + x2047 * x21))
    result[8, 3, 1] = numpy.sum(x147 * (x1907 + x1972 * x21 + x2048 * x21))
    result[8, 3, 2] = numpy.sum(x147 * (x1910 + x1975 * x21 + x2049 * x21))
    result[8, 3, 3] = numpy.sum(x769 * (x1913 + x1977 * x21 + x2050 * x21))
    result[8, 3, 4] = numpy.sum(x772 * (x1917 + x1979 * x21 + x2051 * x21))
    result[8, 3, 5] = numpy.sum(x769 * (x1920 + x1981 * x21 + x2052 * x21))
    result[8, 3, 6] = numpy.sum(x147 * (x1923 + x1983 * x21 + x2053 * x21))
    result[8, 3, 7] = numpy.sum(x772 * (x1926 + x1985 * x21 + x2054 * x21))
    result[8, 3, 8] = numpy.sum(x772 * (x1930 + x1987 * x21 + x2055 * x21))
    result[8, 3, 9] = numpy.sum(x147 * (x1933 + x1989 * x21 + x2056 * x21))
    result[8, 3, 10] = numpy.sum(x761 * (x1935 + x1991 * x21 + x2057 * x21))
    result[8, 3, 11] = numpy.sum(x147 * (x1937 + x1993 * x21 + x2058 * x21))
    result[8, 3, 12] = numpy.sum(x769 * (x1939 + x1995 * x21 + x2059 * x21))
    result[8, 3, 13] = numpy.sum(x147 * (x1942 + x1997 * x21 + x2060 * x21))
    result[8, 3, 14] = numpy.sum(x761 * (x1944 + x1999 * x21 + x2061 * x21))
    result[8, 4, 0] = numpy.sum(x793 * (x2003 + x2063 * x21))
    result[8, 4, 1] = numpy.sum(x294 * (x2006 + x2065 * x21))
    result[8, 4, 2] = numpy.sum(x294 * (x2009 + x2067 * x21))
    result[8, 4, 3] = numpy.sum(x772 * (x2012 + x2069 * x21))
    result[8, 4, 4] = numpy.sum(x808 * (x2015 + x2071 * x21))
    result[8, 4, 5] = numpy.sum(x772 * (x2018 + x2073 * x21))
    result[8, 4, 6] = numpy.sum(x294 * (x2021 + x2075 * x21))
    result[8, 4, 7] = numpy.sum(x808 * (x2024 + x2077 * x21))
    result[8, 4, 8] = numpy.sum(x808 * (x2027 + x2079 * x21))
    result[8, 4, 9] = numpy.sum(x294 * (x2030 + x2081 * x21))
    result[8, 4, 10] = numpy.sum(x793 * (x2032 + x2083 * x21))
    result[8, 4, 11] = numpy.sum(x294 * (x2034 + x2085 * x21))
    result[8, 4, 12] = numpy.sum(x772 * (x2036 + x2087 * x21))
    result[8, 4, 13] = numpy.sum(x294 * (x2038 + x2089 * x21))
    result[8, 4, 14] = numpy.sum(x793 * (x2040 + x2091 * x21))
    result[8, 5, 0] = numpy.sum(x761 * (x2063 * x22 + x2093))
    result[8, 5, 1] = numpy.sum(x147 * (x2065 * x22 + x2095))
    result[8, 5, 2] = numpy.sum(x147 * (x2067 * x22 + x2097))
    result[8, 5, 3] = numpy.sum(x769 * (x2069 * x22 + x2099))
    result[8, 5, 4] = numpy.sum(x772 * (x2071 * x22 + x2101))
    result[8, 5, 5] = numpy.sum(x769 * (x2073 * x22 + x2103))
    result[8, 5, 6] = numpy.sum(x147 * (x2075 * x22 + x2105))
    result[8, 5, 7] = numpy.sum(x772 * (x2077 * x22 + x2107))
    result[8, 5, 8] = numpy.sum(x772 * (x2079 * x22 + x2109))
    result[8, 5, 9] = numpy.sum(x147 * (x2081 * x22 + x2111))
    result[8, 5, 10] = numpy.sum(x761 * (x2083 * x22 + x2112))
    result[8, 5, 11] = numpy.sum(x147 * (x2085 * x22 + x2113))
    result[8, 5, 12] = numpy.sum(x769 * (x2087 * x22 + x2114))
    result[8, 5, 13] = numpy.sum(x147 * (x2089 * x22 + x2115))
    result[8, 5, 14] = numpy.sum(x761 * (x2091 * x22 + x2116))
    result[9, 0, 0] = numpy.sum(
        x110 * (x0 * x1698 + x0 * (x1698 + x1784 * x2117) + x1229)
    )
    result[9, 0, 1] = numpy.sum(
        x122 * (x0 * x1700 + x0 * (x1700 + x1947 * x2118) + x1234)
    )
    result[9, 0, 2] = numpy.sum(
        x122 * (x0 * x1702 + x0 * (x1238 * x1947 + x1702) + x1242)
    )
    result[9, 0, 3] = numpy.sum(
        x139 * (x0 * x1704 + x0 * (x1704 + x2117 * x2120) + x1246)
    )
    result[9, 0, 4] = numpy.sum(
        x147 * (x0 * x1706 + x0 * (x1706 + x2121 * x2122) + x1250)
    )
    result[9, 0, 5] = numpy.sum(
        x139 * (x0 * x1708 + x0 * (x1254 * x1789 + x1708) + x1257)
    )
    result[9, 0, 6] = numpy.sum(
        x122 * (x0 * x1711 + x0 * (x1711 + x2117 * x2123) + x1259)
    )
    result[9, 0, 7] = numpy.sum(
        x147 * (x0 * x1714 + x0 * (x1714 + x2122 * x2125) + x1261)
    )
    result[9, 0, 8] = numpy.sum(x147 * (x0 * x1717 + x0 * (x0 * x2126 + x1717) + x1263))
    result[9, 0, 9] = numpy.sum(
        x122 * (x0 * x1721 + x0 * (x1719 * x1792 + x1721) + x1267)
    )
    result[9, 0, 10] = numpy.sum(
        x110 * (x0 * x1723 + x0 * (x171 * x2117 + x1723) + x1269)
    )
    result[9, 0, 11] = numpy.sum(x122 * (x0 * x1725 + x0 * (x0 * x2127 + x1725) + x1271))
    result[9, 0, 12] = numpy.sum(x139 * (x0 * x1727 + x0 * (x0 * x2128 + x1727) + x1273))
    result[9, 0, 13] = numpy.sum(x122 * (x0 * x1729 + x0 * (x0 * x2129 + x1729) + x1275))
    result[9, 0, 14] = numpy.sum(x110 * (x0 * x1731 + x0 * (x1731 + x2130 * x97) + x1277))
    result[9, 1, 0] = numpy.sum(x239 * (x0 * x2132 + x1612 + x1698 * x21))
    result[9, 1, 1] = numpy.sum(x259 * (x0 * x2133 + x1616 + x1700 * x21))
    result[9, 1, 2] = numpy.sum(x259 * (x0 * x2134 + x1620 + x1702 * x21))
    result[9, 1, 3] = numpy.sum(x147 * (x0 * x2135 + x1624 + x1704 * x21))
    result[9, 1, 4] = numpy.sum(x294 * (x0 * x2137 + x1628 + x1706 * x21))
    result[9, 1, 5] = numpy.sum(x147 * (x0 * x2138 + x1632 + x1708 * x21))
    result[9, 1, 6] = numpy.sum(x259 * (x0 * x2139 + x1636 + x1711 * x21))
    result[9, 1, 7] = numpy.sum(x294 * (x0 * x2140 + x1640 + x1714 * x21))
    result[9, 1, 8] = numpy.sum(x294 * (x0 * x2141 + x1644 + x1717 * x21))
    result[9, 1, 9] = numpy.sum(x259 * (x0 * x2142 + x1648 + x1721 * x21))
    result[9, 1, 10] = numpy.sum(x239 * (x0 * x2143 + x1650 + x1723 * x21))
    result[9, 1, 11] = numpy.sum(x259 * (x0 * x2144 + x1652 + x1725 * x21))
    result[9, 1, 12] = numpy.sum(x147 * (x0 * x2145 + x1654 + x1727 * x21))
    result[9, 1, 13] = numpy.sum(x259 * (x0 * x2146 + x1656 + x1729 * x21))
    result[9, 1, 14] = numpy.sum(x239 * (x0 * x2147 + x1658 + x1731 * x21))
    result[9, 2, 0] = numpy.sum(x239 * (x0 * x2150 + x1753))
    result[9, 2, 1] = numpy.sum(x259 * (x0 * x2152 + x1755))
    result[9, 2, 2] = numpy.sum(x259 * (x0 * x2154 + x1759))
    result[9, 2, 3] = numpy.sum(x147 * (x0 * x2156 + x1761))
    result[9, 2, 4] = numpy.sum(x294 * (x0 * x2159 + x1764))
    result[9, 2, 5] = numpy.sum(x147 * (x0 * x2161 + x1768))
    result[9, 2, 6] = numpy.sum(x259 * (x0 * x2163 + x1770))
    result[9, 2, 7] = numpy.sum(x294 * (x0 * x2165 + x1772))
    result[9, 2, 8] = numpy.sum(x294 * (x0 * x2167 + x1774))
    result[9, 2, 9] = numpy.sum(x259 * (x0 * x2169 + x1778))
    result[9, 2, 10] = numpy.sum(x239 * (x0 * x2171 + x1779))
    result[9, 2, 11] = numpy.sum(x259 * (x0 * x2173 + x1780))
    result[9, 2, 12] = numpy.sum(x147 * (x0 * x2175 + x1781))
    result[9, 2, 13] = numpy.sum(x259 * (x0 * x2177 + x1782))
    result[9, 2, 14] = numpy.sum(x239 * (x0 * x2179 + x1783))
    result[9, 3, 0] = numpy.sum(x110 * (x2002 + x2062 * x21 + x21 * x2132))
    result[9, 3, 1] = numpy.sum(x122 * (x2005 + x2064 * x21 + x21 * x2133))
    result[9, 3, 2] = numpy.sum(x122 * (x2008 + x2066 * x21 + x21 * x2134))
    result[9, 3, 3] = numpy.sum(x139 * (x2011 + x2068 * x21 + x21 * x2135))
    result[9, 3, 4] = numpy.sum(x147 * (x2014 + x2070 * x21 + x21 * x2137))
    result[9, 3, 5] = numpy.sum(x139 * (x2017 + x2072 * x21 + x21 * x2138))
    result[9, 3, 6] = numpy.sum(x122 * (x2020 + x2074 * x21 + x21 * x2139))
    result[9, 3, 7] = numpy.sum(x147 * (x2023 + x2076 * x21 + x21 * x2140))
    result[9, 3, 8] = numpy.sum(x147 * (x2026 + x2078 * x21 + x21 * x2141))
    result[9, 3, 9] = numpy.sum(x122 * (x2029 + x2080 * x21 + x21 * x2142))
    result[9, 3, 10] = numpy.sum(x110 * (x2031 + x2082 * x21 + x21 * x2143))
    result[9, 3, 11] = numpy.sum(x122 * (x2033 + x2084 * x21 + x21 * x2144))
    result[9, 3, 12] = numpy.sum(x139 * (x2035 + x2086 * x21 + x21 * x2145))
    result[9, 3, 13] = numpy.sum(x122 * (x2037 + x2088 * x21 + x21 * x2146))
    result[9, 3, 14] = numpy.sum(x110 * (x2039 + x2090 * x21 + x21 * x2147))
    result[9, 4, 0] = numpy.sum(x239 * (x2093 + x21 * x2150))
    result[9, 4, 1] = numpy.sum(x259 * (x2095 + x21 * x2152))
    result[9, 4, 2] = numpy.sum(x259 * (x2097 + x21 * x2154))
    result[9, 4, 3] = numpy.sum(x147 * (x2099 + x21 * x2156))
    result[9, 4, 4] = numpy.sum(x294 * (x21 * x2159 + x2101))
    result[9, 4, 5] = numpy.sum(x147 * (x21 * x2161 + x2103))
    result[9, 4, 6] = numpy.sum(x259 * (x21 * x2163 + x2105))
    result[9, 4, 7] = numpy.sum(x294 * (x21 * x2165 + x2107))
    result[9, 4, 8] = numpy.sum(x294 * (x21 * x2167 + x2109))
    result[9, 4, 9] = numpy.sum(x259 * (x21 * x2169 + x2111))
    result[9, 4, 10] = numpy.sum(x239 * (x21 * x2171 + x2112))
    result[9, 4, 11] = numpy.sum(x259 * (x21 * x2173 + x2113))
    result[9, 4, 12] = numpy.sum(x147 * (x21 * x2175 + x2114))
    result[9, 4, 13] = numpy.sum(x259 * (x21 * x2177 + x2115))
    result[9, 4, 14] = numpy.sum(x239 * (x21 * x2179 + x2116))
    result[9, 5, 0] = numpy.sum(x110 * (x1784 * x2180 + x2148 * x22 + x2150 * x22))
    result[9, 5, 1] = numpy.sum(x122 * (x1748 * x1973 * x9 + x2151 * x2180 + x2152 * x22))
    result[9, 5, 2] = numpy.sum(x122 * (x1786 * x2181 + x2153 * x22 + x2154 * x22))
    result[9, 5, 3] = numpy.sum(x139 * (x2120 * x2180 + x2155 * x22 + x2156 * x22))
    result[9, 5, 4] = numpy.sum(x147 * (x2121 * x2181 + x2157 * x22 + x2159 * x22))
    result[9, 5, 5] = numpy.sum(x139 * (x1282 * x2182 + x2160 * x22 + x2161 * x22))
    result[9, 5, 6] = numpy.sum(x122 * (x2123 * x2180 + x2162 * x22 + x2163 * x22))
    result[9, 5, 7] = numpy.sum(x147 * (x2125 * x2181 + x2164 * x22 + x2165 * x22))
    result[9, 5, 8] = numpy.sum(x147 * (x1665 * x2182 + x2166 * x22 + x2167 * x22))
    result[9, 5, 9] = numpy.sum(x122 * (x2168 * x22 + x2169 * x22 + x2183 * x762))
    result[9, 5, 10] = numpy.sum(x110 * (x171 * x2180 + x2170 * x22 + x2171 * x22))
    result[9, 5, 11] = numpy.sum(x122 * (x174 * x2181 + x2172 * x22 + x2173 * x22))
    result[9, 5, 12] = numpy.sum(x139 * (x158 * x2182 + x2174 * x22 + x2175 * x22))
    result[9, 5, 13] = numpy.sum(x122 * (x140 * x2183 + x2176 * x22 + x2177 * x22))
    result[9, 5, 14] = numpy.sum(
        x110 * (x2178 * x22 + x2179 * x22 + x71 * (x123 * x2183 + 5.0 * x1776))
    )
    return result


def int3c2e3d_sph_330(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ff|s) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10, 1), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - A[0]
    x5 = 0.5 / (ax + bx)
    x6 = -x3 - C[0]
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = cx / x11
    x13 = x1 * x12 * (x10**2 + x6**2 + x8**2)
    x14 = boys(1, x13)
    x15 = 17.49341832762486
    x16 = A[1] - B[1]
    x17 = A[2] - B[2]
    x18 = numpy.exp(-ax * bx * x2 * (x0**2 + x16**2 + x17**2))
    x19 = 2.0 * x11 ** (-1.5) * x15 * x18 * x2
    x20 = x14 * x19
    x21 = cx ** (-1.0)
    x22 = x11 ** (-0.5)
    x23 = boys(0, x13)
    x24 = 2.0 * x15 * x18 * x2 * x21 * x22 * x23 - x20
    x25 = x24 * x5
    x26 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x4 + x20 * x6
    x27 = -x26
    x28 = boys(2, x13)
    x29 = x19 * x28
    x30 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x4 + x29 * x6
    x31 = -x30
    x32 = x12 * x31
    x33 = x32 * x6
    x34 = x25 + x27 * x4 - x33
    x35 = -x26 - x32
    x36 = 2.0 * x5
    x37 = 2.0 * x14 * x15 * x18 * x2 * x21 * x22 - x29
    x38 = x37 * x5
    x39 = boys(3, x13)
    x40 = x19 * x39
    x41 = -2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x4 + x40 * x6
    x42 = -x41
    x43 = x12 * x42
    x44 = x43 * x6
    x45 = x31 * x4 + x38 - x44
    x46 = x12 * x45
    x47 = x46 * x6
    x48 = x34 * x4 + x35 * x36 - x47
    x49 = -x24 * x5
    x50 = x27 * x4 - x33 - x46 - x49
    x51 = 3.0 * x5
    x52 = -x30 - x43
    x53 = 2.0 * x15 * x18 * x2 * x21 * x22 * x28 - x40
    x54 = x5 * x53
    x55 = boys(4, x13)
    x56 = x19 * x55
    x57 = -2.0 * x15 * x18 * x2 * x21 * x22 * x39 * x4 + x56 * x6
    x58 = -x57
    x59 = x12 * x58
    x60 = x59 * x6
    x61 = x4 * x42 + x54 - x60
    x62 = x12 * x61
    x63 = x6 * x62
    x64 = x36 * x52 + x4 * x45 - x63
    x65 = x12 * x64
    x66 = x6 * x65
    x67 = x4 * x48 + x50 * x51 - x66
    x68 = 4.0 * x5
    x69 = -x37 * x5
    x70 = x5 * (2.0 * x15 * x18 * x2 * x21 * x22 * x39 - x56)
    x71 = boys(5, x13)
    x72 = x19 * x71
    x73 = 2.0 * x15 * x18 * x2 * x21 * x22 * x4 * x55 - x6 * x72
    x74 = x12 * x73
    x75 = x4 * x58 - x6 * x74 + x70
    x76 = x12 * x75
    x77 = -x36 * (x41 + x59) + x4 * x61 - x6 * x76
    x78 = x12 * x77
    x79 = x4 * x64 - x51 * (-x31 * x4 + x44 + x62 + x69) - x6 * x78
    x80 = x12 * x79
    x81 = x4 * x67 - x6 * x80 + x68 * (x34 * x4 + 2.0 * x35 * x5 - x47 - x65)
    x82 = x0 * x67 + x81
    x83 = -x5 * x53
    x84 = x5 * (2.0 * x15 * x18 * x2 * x21 * x22 * x55 - x72)
    x85 = x19 * boys(6, x13)
    x86 = x12 * x6
    x87 = da * db * dc
    x88 = 0.06666666666666667 * x87
    x89 = -x7 - A[1]
    x90 = -2.0 * x14 * x15 * x18 * x2 * x21 * x22 * x89 + x29 * x8
    x91 = -x90
    x92 = x12 * x91
    x93 = -2.0 * x15 * x18 * x2 * x21 * x22 * x23 * x89 + x20 * x8
    x94 = -x92 - x93
    x95 = x5 * x94
    x96 = -x93
    x97 = -x4 * x96 + x6 * x92
    x98 = -x97
    x99 = -2.0 * x15 * x18 * x2 * x21 * x22 * x28 * x89 + x40 * x8
    x100 = -x99
    x101 = x100 * x12
    x102 = x101 * x6 - x4 * x91
    x103 = -x102
    x104 = x103 * x12
    x105 = x104 * x6
    x106 = -x105 + x4 * x98 + x95
    x107 = -x104 - x97
    x108 = -x101 - x90
    x109 = x108 * x5
    x110 = -2.0 * x15 * x18 * x2 * x21 * x22 * x39 * x89 + x56 * x8
    x111 = -x110
    x112 = x111 * x12
    x113 = -x100 * x4 + x112 * x6
    x114 = -x113
    x115 = x114 * x12
    x116 = x115 * x6
    x117 = x103 * x4 + x109 - x116
    x118 = x117 * x12
    x119 = x118 * x6
    x120 = x106 * x4 + x107 * x36 - x119
    x121 = -x5 * (x112 + x99)
    x122 = 2.0 * x15 * x18 * x2 * x21 * x22 * x55 * x89 - x72 * x8
    x123 = x12 * x122
    x124 = x111 * x4 - x123 * x6
    x125 = x12 * x124
    x126 = x114 * x4 + x121 - x125 * x6
    x127 = x12 * x126
    x128 = x117 * x4 - x127 * x6 - x36 * (x102 + x115)
    x129 = x12 * x128
    x130 = x120 * x4 - x129 * x6 - x51 * (x105 + x118 - x4 * x98 - x5 * x94)
    x131 = x130 + x16 * x67
    x132 = x120 + x16 * x48
    x133 = -x5 * (x110 + x123)
    x134 = 2.0 * x15 * x18 * x2 * x21 * x22 * x71 * x89 - x8 * x85
    x135 = (
        x130 * x4
        + x68 * (x106 * x4 + 2.0 * x107 * x5 - x119 - x129)
        - x86
        * (
            x128 * x4
            + x51 * (x103 * x4 + x108 * x5 - x116 - x127)
            + x86
            * (
                -x126 * x4
                + x36 * (x113 + x125)
                + x86 * (x124 * x4 + x133 - x86 * (x122 * x4 - x134 * x86))
            )
        )
    )
    x136 = 2.23606797749979 * x88
    x137 = -x9 - A[2]
    x138 = x10 * x29 - 2.0 * x137 * x14 * x15 * x18 * x2 * x21 * x22
    x139 = -x138
    x140 = x12 * x139
    x141 = x10 * x20 - 2.0 * x137 * x15 * x18 * x2 * x21 * x22 * x23
    x142 = -x140 - x141
    x143 = x142 * x5
    x144 = -x141
    x145 = x140 * x6 - x144 * x4
    x146 = -x145
    x147 = x10 * x40 - 2.0 * x137 * x15 * x18 * x2 * x21 * x22 * x28
    x148 = -x147
    x149 = x12 * x148
    x150 = -x139 * x4 + x149 * x6
    x151 = -x150
    x152 = x12 * x151
    x153 = x152 * x6
    x154 = x143 + x146 * x4 - x153
    x155 = -x145 - x152
    x156 = -x138 - x149
    x157 = x156 * x5
    x158 = x10 * x56 - 2.0 * x137 * x15 * x18 * x2 * x21 * x22 * x39
    x159 = -x158
    x160 = x12 * x159
    x161 = -x148 * x4 + x160 * x6
    x162 = -x161
    x163 = x12 * x162
    x164 = x163 * x6
    x165 = x151 * x4 + x157 - x164
    x166 = x12 * x165
    x167 = x166 * x6
    x168 = x154 * x4 + x155 * x36 - x167
    x169 = -x142 * x5
    x170 = -x5 * (x147 + x160)
    x171 = -x10 * x72 + 2.0 * x137 * x15 * x18 * x2 * x21 * x22 * x55
    x172 = x12 * x171
    x173 = x159 * x4 - x172 * x6
    x174 = x12 * x173
    x175 = x162 * x4 + x170 - x174 * x6
    x176 = x12 * x175
    x177 = x165 * x4 - x176 * x6 - x36 * (x150 + x163)
    x178 = x12 * x177
    x179 = x168 * x4 - x178 * x6 - x51 * (-x146 * x4 + x153 + x166 + x169)
    x180 = x17 * x67 + x179
    x181 = x168 + x17 * x48
    x182 = -x156 * x5
    x183 = -x5 * (x158 + x172)
    x184 = -x10 * x85 + 2.0 * x137 * x15 * x18 * x2 * x21 * x22 * x71
    x185 = (
        x179 * x4
        + x68 * (x154 * x4 + 2.0 * x155 * x5 - x167 - x178)
        - x86
        * (
            x177 * x4
            - x51 * (-x151 * x4 + x164 + x176 + x182)
            + x86
            * (
                -x175 * x4
                + x36 * (x161 + x174)
                + x86 * (x173 * x4 + x183 - x86 * (x171 * x4 - x184 * x86))
            )
        )
    )
    x186 = x101 * x8
    x187 = -x186 + x38 + x89 * x91
    x188 = x12 * x187
    x189 = x8 * x92
    x190 = -x188 - x189 - x49 + x89 * x96
    x191 = x190 * x5
    x192 = -x189 + x25 + x89 * x96
    x193 = x188 * x6 - x192 * x4
    x194 = -x193
    x195 = x112 * x8
    x196 = x100 * x89 - x195 + x54
    x197 = x12 * x196
    x198 = -x187 * x4 + x197 * x6
    x199 = -x198
    x200 = x12 * x199
    x201 = x200 * x6
    x202 = x191 + x194 * x4 - x201
    x203 = x5 * (-x186 - x197 - x69 + x89 * x91)
    x204 = x111 * x89 - x123 * x8 + x70
    x205 = x12 * x204
    x206 = x196 * x4 - x205 * x6
    x207 = x12 * x206
    x208 = x199 * x4 + x203 - x207 * x6
    x209 = x12 * x208
    x210 = x202 * x4 - x209 * x6 - x36 * (x193 + x200)
    x211 = x120 * x16 + x210
    x212 = x132 * x16 + x211
    x213 = x5 * (x100 * x89 - x195 - x205 - x83)
    x214 = x12 * x8
    x215 = x122 * x89 - x134 * x214 + x84
    x216 = (
        x210 * x4
        + x51 * (x190 * x5 + x194 * x4 - x201 - x209)
        + x86
        * (
            -x208 * x4
            + x36 * (x198 + x207)
            + x86 * (x206 * x4 + x213 - x86 * (x204 * x4 - x215 * x86))
        )
    )
    x217 = x130 * x16 + x216
    x218 = -x139 * x89 + x149 * x8
    x219 = -x218
    x220 = x12 * x219
    x221 = x140 * x8 - x144 * x89
    x222 = -x220 - x221
    x223 = x222 * x5
    x224 = -x221
    x225 = x220 * x6 - x224 * x4
    x226 = -x225
    x227 = -x148 * x89 + x160 * x8
    x228 = -x227
    x229 = x12 * x228
    x230 = -x219 * x4 + x229 * x6
    x231 = -x230
    x232 = x12 * x231
    x233 = x232 * x6
    x234 = x223 + x226 * x4 - x233
    x235 = -x5 * (x218 + x229)
    x236 = x159 * x89 - x172 * x8
    x237 = x12 * x236
    x238 = x228 * x4 - x237 * x6
    x239 = x12 * x238
    x240 = x231 * x4 + x235 - x239 * x6
    x241 = x12 * x240
    x242 = x234 * x4 - x241 * x6 - x36 * (x225 + x232)
    x243 = x120 * x17 + x242
    x244 = x16 * x181 + x243
    x245 = -x5 * (x227 + x237)
    x246 = x171 * x89 - x184 * x214
    x247 = (
        x242 * x4
        + x51 * (x222 * x5 + x226 * x4 - x233 - x241)
        + x86
        * (
            -x240 * x4
            + x36 * (x230 + x239)
            + x86 * (x238 * x4 + x245 - x86 * (x236 * x4 - x246 * x86))
        )
    )
    x248 = x130 * x17 + x247
    x249 = 3.872983346207417 * x88
    x250 = x10 * x149
    x251 = x137 * x139 - x250 + x38
    x252 = x12 * x251
    x253 = x10 * x140
    x254 = x137 * x144 - x252 - x253 - x49
    x255 = x254 * x5
    x256 = x137 * x144 + x25 - x253
    x257 = x252 * x6 - x256 * x4
    x258 = -x257
    x259 = x10 * x160
    x260 = x137 * x148 - x259 + x54
    x261 = x12 * x260
    x262 = -x251 * x4 + x261 * x6
    x263 = -x262
    x264 = x12 * x263
    x265 = x264 * x6
    x266 = x255 + x258 * x4 - x265
    x267 = x5 * (x137 * x139 - x250 - x261 - x69)
    x268 = -x10 * x172 + x137 * x159 + x70
    x269 = x12 * x268
    x270 = x260 * x4 - x269 * x6
    x271 = x12 * x270
    x272 = x263 * x4 + x267 - x271 * x6
    x273 = x12 * x272
    x274 = x266 * x4 - x273 * x6 - x36 * (x257 + x264)
    x275 = x168 * x17 + x274
    x276 = x17 * x181 + x275
    x277 = -x254 * x5
    x278 = x5 * (x137 * x148 - x259 - x269 - x83)
    x279 = x10 * x12
    x280 = x137 * x171 - x184 * x279 + x84
    x281 = (
        x274 * x4
        - x51 * (-x258 * x4 + x265 + x273 + x277)
        + x86
        * (
            -x272 * x4
            + x36 * (x262 + x271)
            + x86 * (x270 * x4 + x278 - x86 * (x268 * x4 - x280 * x86))
        )
    )
    x282 = x17 * x179 + x281
    x283 = x197 * x8
    x284 = 2.0 * x109 + x187 * x89 - x283
    x285 = x12 * x284
    x286 = x188 * x8
    x287 = x5 * (x192 * x89 - x285 - x286 + 2.0 * x5 * x94)
    x288 = x192 * x89 - x286 + 2.0 * x95
    x289 = x285 * x6
    x290 = -x288 * x4 + x289
    x291 = -x290
    x292 = 2.0 * x121 + x196 * x89 - x205 * x8
    x293 = x12 * x292
    x294 = x284 * x4 - x293 * x6
    x295 = x12 * x294
    x296 = x287 + x291 * x4 - x295 * x6
    x297 = x5 * (2.0 * x108 * x5 + x187 * x89 - x283 - x293)
    x298 = 2.0 * x133 + x204 * x89 - x214 * x215
    x299 = (
        x296 * x4
        - x36 * (x290 + x295)
        - x86 * (x294 * x4 + x297 - x86 * (x292 * x4 - x298 * x86))
    )
    x300 = x16 * x210 + x299
    x301 = x16 * x211 + x300
    x302 = x229 * x8
    x303 = x157 + x219 * x89 - x302
    x304 = x12 * x303
    x305 = x220 * x8
    x306 = x5 * (-x169 + x224 * x89 - x304 - x305)
    x307 = x143 + x224 * x89 - x305
    x308 = x304 * x6
    x309 = -x307 * x4 + x308
    x310 = -x309
    x311 = x170 + x228 * x89 - x237 * x8
    x312 = x12 * x311
    x313 = x303 * x4 - x312 * x6
    x314 = x12 * x313
    x315 = x306 + x310 * x4 - x314 * x6
    x316 = x5 * (-x182 + x219 * x89 - x302 - x312)
    x317 = x183 - x214 * x246 + x236 * x89
    x318 = (
        x315 * x4
        - x36 * (x309 + x314)
        - x86 * (x313 * x4 + x316 - x86 * (x311 * x4 - x317 * x86))
    )
    x319 = x17 * x210 + x318
    x320 = x16 * x243 + x319
    x321 = -x251 * x89 + x261 * x8
    x322 = -x321
    x323 = x12 * x322
    x324 = x252 * x8 - x256 * x89
    x325 = -x5 * (x323 + x324)
    x326 = -x324
    x327 = x323 * x6
    x328 = -x326 * x4 + x327
    x329 = -x328
    x330 = x260 * x89 - x269 * x8
    x331 = x12 * x330
    x332 = x322 * x4 - x331 * x6
    x333 = x12 * x332
    x334 = x325 + x329 * x4 - x333 * x6
    x335 = -x5 * (x321 + x331)
    x336 = -x214 * x280 + x268 * x89
    x337 = (
        x334 * x4
        - x36 * (x328 + x333)
        - x86 * (x332 * x4 + x335 - x86 * (x330 * x4 - x336 * x86))
    )
    x338 = x17 * x242 + x337
    x339 = x17 * x243 + x338
    x340 = x10 * x261
    x341 = x137 * x251 + 2.0 * x157 - x340
    x342 = x12 * x341
    x343 = x10 * x252
    x344 = x5 * (x137 * x256 + 2.0 * x142 * x5 - x342 - x343)
    x345 = x137 * x256 + 2.0 * x143 - x343
    x346 = x342 * x6
    x347 = -x345 * x4 + x346
    x348 = -x347
    x349 = -x10 * x269 + x137 * x260 + 2.0 * x170
    x350 = x12 * x349
    x351 = x341 * x4 - x350 * x6
    x352 = x12 * x351
    x353 = x344 + x348 * x4 - x352 * x6
    x354 = x5 * (x137 * x251 + 2.0 * x156 * x5 - x340 - x350)
    x355 = x137 * x268 + 2.0 * x183 - x279 * x280
    x356 = (
        x353 * x4
        - x36 * (x347 + x352)
        - x86 * (x351 * x4 + x354 - x86 * (x349 * x4 - x355 * x86))
    )
    x357 = x17 * x274 + x356
    x358 = x17 * x275 + x357
    x359 = x0 * x120 + x130
    x360 = x106 * x16 + x202
    x361 = 0.3333333333333333 * x87
    x362 = x106 * x17 + x234
    x363 = x16 * x202 + x296
    x364 = x16 * x360 + x363
    x365 = x17 * x202 + x315
    x366 = x16 * x362 + x365
    x367 = 1.732050807568877 * x361
    x368 = x17 * x234 + x334
    x369 = x17 * x362 + x368
    x370 = 3.0 * x203 + x284 * x89 - x293 * x8
    x371 = x12 * x370
    x372 = x285 * x8
    x373 = x5 * (3.0 * x190 * x5 + x288 * x89 - x371 - x372)
    x374 = 3.0 * x191 + x288 * x89 - x372
    x375 = x371 * x6
    x376 = x374 * x4 - x375
    x377 = 3.0 * x213 - x214 * x298 + x292 * x89
    x378 = x16 * x296 + x373 + x376 * x4 - x86 * (x370 * x4 - x377 * x86)
    x379 = x16 * x363 + x378
    x380 = 2.0 * x235 + x303 * x89 - x312 * x8
    x381 = x12 * x380
    x382 = x304 * x8
    x383 = x5 * (2.0 * x222 * x5 + x307 * x89 - x381 - x382)
    x384 = 2.0 * x223 + x307 * x89 - x382
    x385 = x381 * x6
    x386 = x384 * x4 - x385
    x387 = -x214 * x317 + 2.0 * x245 + x311 * x89
    x388 = x383 + x386 * x4 - x86 * (x380 * x4 - x387 * x86)
    x389 = x17 * x296 + x388
    x390 = x16 * x365 + x389
    x391 = x267 + x322 * x89 - x331 * x8
    x392 = x12 * x391
    x393 = x323 * x8
    x394 = x5 * (-x277 + x326 * x89 - x392 - x393)
    x395 = x255 + x326 * x89 - x393
    x396 = x392 * x6
    x397 = x395 * x4 - x396
    x398 = -x214 * x336 + x278 + x330 * x89
    x399 = x394 + x397 * x4 - x86 * (x391 * x4 - x398 * x86)
    x400 = x17 * x315 + x399
    x401 = x17 * x365 + x400
    x402 = x341 * x89 - x350 * x8
    x403 = x12 * x402
    x404 = x342 * x8
    x405 = -x345 * x89 + x404
    x406 = -x5 * (x403 + x405)
    x407 = -x405
    x408 = x403 * x6
    x409 = x4 * x407 - x408
    x410 = -x214 * x355 + x349 * x89
    x411 = x4 * x409 + x406 - x86 * (x4 * x402 - x410 * x86)
    x412 = x17 * x334 + x411
    x413 = x17 * x368 + x412
    x414 = x0 * x168 + x179
    x415 = x16 * x168 + x242
    x416 = x154 * x16 + x234
    x417 = x154 * x17 + x266
    x418 = x16 * x234 + x315
    x419 = x16 * x416 + x418
    x420 = x16 * x242 + x318
    x421 = x16 * x417 + x368
    x422 = x17 * x266 + x353
    x423 = x17 * x417 + x422
    x424 = x16 * x315 + x388
    x425 = x16 * x418 + x424
    x426 = x16 * x368 + x400
    x427 = -x10 * x350 + x137 * x341 + 3.0 * x267
    x428 = x12 * x427
    x429 = x10 * x342
    x430 = x5 * (x137 * x345 + 3.0 * x254 * x5 - x428 - x429)
    x431 = x137 * x345 + 3.0 * x255 - x429
    x432 = x428 * x6
    x433 = x4 * x431 - x432
    x434 = x137 * x349 + 3.0 * x278 - x279 * x355
    x435 = x17 * x353 + x4 * x433 + x430 - x86 * (x4 * x427 - x434 * x86)
    x436 = x17 * x422 + x435
    x437 = x0 * x202 + x210
    x438 = x288 * x4 - x289
    x439 = x16 * x194 + x438
    x440 = x307 * x4 - x308
    x441 = x17 * x194 + x440
    x442 = x16 * x291 + x374 * x4 - x375
    x443 = x16 * x439 + x442
    x444 = x384 * x4 - x385
    x445 = x17 * x291 + x444
    x446 = x16 * x441 + x445
    x447 = x395 * x4 - x396
    x448 = x17 * x310 + x447
    x449 = x17 * x441 + x448
    x450 = 4.0 * x287 - x371 * x8 + x374 * x89
    x451 = -x214 * x377 + 4.0 * x297 + x370 * x89
    x452 = x16 * x376 + x16 * x442 + x4 * x450 - x451 * x86
    x453 = 3.0 * x306 - x381 * x8 + x384 * x89
    x454 = -x214 * x387 + 3.0 * x316 + x380 * x89
    x455 = x4 * x453 - x454 * x86
    x456 = x16 * x445 + x17 * x376 + x455
    x457 = 2.0 * x325 - x392 * x8 + x395 * x89
    x458 = -x214 * x398 + 2.0 * x335 + x391 * x89
    x459 = x4 * x457 - x458 * x86
    x460 = x17 * x386 + x459
    x461 = x17 * x445 + x460
    x462 = x344 - x403 * x8 + x407 * x89
    x463 = -x214 * x410 + x354 + x402 * x89
    x464 = x4 * x462 - x463 * x86
    x465 = x17 * x397 + x464
    x466 = x17 * x448 + x465
    x467 = x0 * x234 + x242
    x468 = x16 * x226 + x440
    x469 = x326 * x4 - x327
    x470 = x17 * x226 + x469
    x471 = x16 * x310 + x444
    x472 = x16 * x468 + x471
    x473 = x16 * x470 + x448
    x474 = x4 * x407 - x408
    x475 = x17 * x329 + x474
    x476 = x17 * x470 + x475
    x477 = x16 * x386 + x16 * x471 + x455
    x478 = x16 * x448 + x460
    x479 = x428 * x8
    x480 = x431 * x89 - x479
    x481 = -x214 * x434 + x427 * x89
    x482 = x17 * x409 + x4 * x480 - x481 * x86
    x483 = x17 * x475 + x482
    x484 = x0 * x266 + x274
    x485 = x16 * x266 + x334
    x486 = x16 * x258 + x469
    x487 = x345 * x4 - x346
    x488 = x17 * x258 + x487
    x489 = x16 * x329 + x447
    x490 = x16 * x486 + x489
    x491 = x16 * x334 + x399
    x492 = x16 * x488 + x475
    x493 = x17 * x348 + x4 * x431 - x432
    x494 = x17 * x488 + x493
    x495 = x16 * x397 + x16 * x489 + x459
    x496 = x16 * x475 + x465
    x497 = -x10 * x428 + x137 * x431 + 4.0 * x344
    x498 = x137 * x427 - x279 * x434 + 4.0 * x354
    x499 = x17 * x433 + x17 * x493 + x4 * x497 - x498 * x86
    x500 = x0 * x291 + x296
    x501 = x16 * x288 + x374
    x502 = x17 * x288 + x384
    x503 = x16 * x374 + x450
    x504 = x16 * x501 + x503
    x505 = x17 * x374 + x453
    x506 = x16 * x502 + x505
    x507 = x17 * x384 + x457
    x508 = x17 * x502 + x507
    x509 = -x214 * x454 + 4.0 * x383 + x453 * x89
    x510 = -x214 * x458 + 3.0 * x394 + x457 * x89
    x511 = x17 * x453 + x510
    x512 = -x214 * x463 + 2.0 * x406 + x462 * x89
    x513 = x17 * x457 + x512
    x514 = x17 * x507 + x513
    x515 = x0 * x310 + x315
    x516 = x16 * x307 + x384
    x517 = x17 * x307 + x395
    x518 = x16 * x384 + x453
    x519 = x16 * x516 + x518
    x520 = x16 * x517 + x507
    x521 = x17 * x395 + x462
    x522 = x17 * x517 + x521
    x523 = x17 * x462 - x214 * x481 + x430 + x480 * x89
    x524 = x17 * x521 + x523
    x525 = x0 * x329 + x334
    x526 = x16 * x326 + x395
    x527 = x345 * x89 - x404
    x528 = x17 * x326 + x527
    x529 = x16 * x395 + x457
    x530 = x16 * x526 + x529
    x531 = x16 * x528 + x521
    x532 = x17 * x407 + x431 * x89 - x479
    x533 = x17 * x528 + x532
    x534 = x17 * x480 + x17 * x532 - x214 * x498 + x497 * x89
    x535 = x0 * x348 + x353
    x536 = x16 * x348 + x474
    x537 = x16 * x345 + x527
    x538 = x17 * x345 + x431
    x539 = x16 * x407 + x462
    x540 = x16 * x537 + x539
    x541 = x16 * x538 + x532
    x542 = x17 * x431 + x497
    x543 = x17 * x538 + x542

    # 100 item(s)
    result[0, 0, 0] = numpy.sum(
        x88
        * (
            x0 * x81
            + x0 * x82
            + x0 * (x0 * (x0 * x48 + x67) + x82)
            + x4 * x81
            + 5.0 * x5 * (x4 * x48 + 3.0 * x5 * x50 - x66 - x80)
            - x86
            * (
                x4 * x79
                + x68 * (x4 * x45 + 2.0 * x5 * x52 - x63 - x78)
                + x86
                * (
                    -x4 * x77
                    + x51 * (-x4 * x42 + x60 + x76 + x83)
                    + x86
                    * (
                        -x36 * (x57 + x74)
                        + x4 * x75
                        - x86
                        * (
                            x4 * x73
                            + x84
                            - x86
                            * (2.0 * x15 * x18 * x2 * x21 * x22 * x4 * x71 - x6 * x85)
                        )
                    )
                )
            )
        )
    )
    result[0, 1, 0] = numpy.sum(
        x136 * (x0 * x131 + x0 * (x0 * x132 + x131) + x135 + x16 * x81)
    )
    result[0, 2, 0] = numpy.sum(
        x136 * (x0 * x180 + x0 * (x0 * x181 + x180) + x17 * x81 + x185)
    )
    result[0, 3, 0] = numpy.sum(x136 * (x0 * x212 + x131 * x16 + x217))
    result[0, 4, 0] = numpy.sum(x249 * (x0 * x244 + x16 * x180 + x248))
    result[0, 5, 0] = numpy.sum(x136 * (x0 * x276 + x17 * x180 + x282))
    result[0, 6, 0] = numpy.sum(x88 * (x16 * x212 + x301))
    result[0, 7, 0] = numpy.sum(x136 * (x16 * x244 + x320))
    result[0, 8, 0] = numpy.sum(x136 * (x16 * x276 + x339))
    result[0, 9, 0] = numpy.sum(x88 * (x17 * x276 + x358))
    result[1, 0, 0] = numpy.sum(
        x136 * (x0 * x130 + x0 * x359 + x0 * (x0 * (x0 * x106 + x120) + x359) + x135)
    )
    result[1, 1, 0] = numpy.sum(x361 * (x0 * x211 + x0 * (x0 * x360 + x211) + x217))
    result[1, 2, 0] = numpy.sum(x361 * (x0 * x243 + x0 * (x0 * x362 + x243) + x248))
    result[1, 3, 0] = numpy.sum(x361 * (x0 * x364 + x301))
    result[1, 4, 0] = numpy.sum(x367 * (x0 * x366 + x320))
    result[1, 5, 0] = numpy.sum(x361 * (x0 * x369 + x339))
    result[1, 6, 0] = numpy.sum(x136 * (x16 * x364 + x379))
    result[1, 7, 0] = numpy.sum(x361 * (x16 * x366 + x390))
    result[1, 8, 0] = numpy.sum(x361 * (x16 * x369 + x401))
    result[1, 9, 0] = numpy.sum(x136 * (x17 * x369 + x413))
    result[2, 0, 0] = numpy.sum(
        x136 * (x0 * x179 + x0 * x414 + x0 * (x0 * (x0 * x154 + x168) + x414) + x185)
    )
    result[2, 1, 0] = numpy.sum(
        x361 * (x0 * x415 + x0 * (x0 * x416 + x415) + x16 * x179 + x247)
    )
    result[2, 2, 0] = numpy.sum(x361 * (x0 * x275 + x0 * (x0 * x417 + x275) + x282))
    result[2, 3, 0] = numpy.sum(x361 * (x0 * x419 + x16 * x415 + x420))
    result[2, 4, 0] = numpy.sum(x367 * (x0 * x421 + x16 * x275 + x338))
    result[2, 5, 0] = numpy.sum(x361 * (x0 * x423 + x358))
    result[2, 6, 0] = numpy.sum(x136 * (x16 * x419 + x425))
    result[2, 7, 0] = numpy.sum(x361 * (x16 * x421 + x426))
    result[2, 8, 0] = numpy.sum(x361 * (x16 * x423 + x413))
    result[2, 9, 0] = numpy.sum(x136 * (x17 * x423 + x436))
    result[3, 0, 0] = numpy.sum(
        x136 * (x0 * x210 + x0 * x437 + x0 * (x0 * (x0 * x194 + x202) + x437) + x216)
    )
    result[3, 1, 0] = numpy.sum(x361 * (x0 * x363 + x0 * (x0 * x439 + x363) + x300))
    result[3, 2, 0] = numpy.sum(x361 * (x0 * x365 + x0 * (x0 * x441 + x365) + x319))
    result[3, 3, 0] = numpy.sum(x361 * (x0 * x443 + x379))
    result[3, 4, 0] = numpy.sum(x367 * (x0 * x446 + x390))
    result[3, 5, 0] = numpy.sum(x361 * (x0 * x449 + x401))
    result[3, 6, 0] = numpy.sum(x136 * (x16 * x443 + x452))
    result[3, 7, 0] = numpy.sum(x361 * (x16 * x446 + x456))
    result[3, 8, 0] = numpy.sum(x361 * (x16 * x449 + x461))
    result[3, 9, 0] = numpy.sum(x136 * (x17 * x449 + x466))
    result[4, 0, 0] = numpy.sum(
        x249 * (x0 * x242 + x0 * x467 + x0 * (x0 * (x0 * x226 + x234) + x467) + x247)
    )
    result[4, 1, 0] = numpy.sum(x367 * (x0 * x418 + x0 * (x0 * x468 + x418) + x420))
    result[4, 2, 0] = numpy.sum(x367 * (x0 * x368 + x0 * (x0 * x470 + x368) + x338))
    result[4, 3, 0] = numpy.sum(x367 * (x0 * x472 + x425))
    result[4, 4, 0] = numpy.sum(x87 * (x0 * x473 + x426))
    result[4, 5, 0] = numpy.sum(x367 * (x0 * x476 + x413))
    result[4, 6, 0] = numpy.sum(x249 * (x16 * x472 + x477))
    result[4, 7, 0] = numpy.sum(x367 * (x16 * x473 + x478))
    result[4, 8, 0] = numpy.sum(x367 * (x16 * x476 + x466))
    result[4, 9, 0] = numpy.sum(x249 * (x17 * x476 + x483))
    result[5, 0, 0] = numpy.sum(
        x136 * (x0 * x274 + x0 * x484 + x0 * (x0 * (x0 * x258 + x266) + x484) + x281)
    )
    result[5, 1, 0] = numpy.sum(
        x361 * (x0 * x485 + x0 * (x0 * x486 + x485) + x16 * x274 + x337)
    )
    result[5, 2, 0] = numpy.sum(x361 * (x0 * x422 + x0 * (x0 * x488 + x422) + x357))
    result[5, 3, 0] = numpy.sum(x361 * (x0 * x490 + x16 * x485 + x491))
    result[5, 4, 0] = numpy.sum(x367 * (x0 * x492 + x16 * x422 + x412))
    result[5, 5, 0] = numpy.sum(x361 * (x0 * x494 + x436))
    result[5, 6, 0] = numpy.sum(x136 * (x16 * x490 + x495))
    result[5, 7, 0] = numpy.sum(x361 * (x16 * x492 + x496))
    result[5, 8, 0] = numpy.sum(x361 * (x16 * x494 + x483))
    result[5, 9, 0] = numpy.sum(x136 * (x17 * x494 + x499))
    result[6, 0, 0] = numpy.sum(
        x88 * (x0 * x296 + x0 * x500 + x0 * (x0 * (x0 * x288 + x438) + x500) + x299)
    )
    result[6, 1, 0] = numpy.sum(x136 * (x0 * x442 + x0 * (x0 * x501 + x442) + x378))
    result[6, 2, 0] = numpy.sum(x136 * (x0 * x445 + x0 * (x0 * x502 + x445) + x389))
    result[6, 3, 0] = numpy.sum(x136 * (x0 * x504 + x452))
    result[6, 4, 0] = numpy.sum(x249 * (x0 * x506 + x456))
    result[6, 5, 0] = numpy.sum(x136 * (x0 * x508 + x461))
    result[6, 6, 0] = numpy.sum(
        x88
        * (x16 * x450 + x16 * x503 + x16 * x504 - x214 * x451 + 5.0 * x373 + x450 * x89)
    )
    result[6, 7, 0] = numpy.sum(x136 * (x16 * x505 + x16 * x506 + x17 * x450 + x509))
    result[6, 8, 0] = numpy.sum(x136 * (x16 * x508 + x17 * x505 + x511))
    result[6, 9, 0] = numpy.sum(x88 * (x17 * x508 + x514))
    result[7, 0, 0] = numpy.sum(
        x136 * (x0 * x315 + x0 * x515 + x0 * (x0 * (x0 * x307 + x440) + x515) + x318)
    )
    result[7, 1, 0] = numpy.sum(x361 * (x0 * x471 + x0 * (x0 * x516 + x471) + x424))
    result[7, 2, 0] = numpy.sum(x361 * (x0 * x448 + x0 * (x0 * x517 + x448) + x400))
    result[7, 3, 0] = numpy.sum(x361 * (x0 * x519 + x477))
    result[7, 4, 0] = numpy.sum(x367 * (x0 * x520 + x478))
    result[7, 5, 0] = numpy.sum(x361 * (x0 * x522 + x466))
    result[7, 6, 0] = numpy.sum(x136 * (x16 * x453 + x16 * x518 + x16 * x519 + x509))
    result[7, 7, 0] = numpy.sum(x361 * (x16 * x507 + x16 * x520 + x511))
    result[7, 8, 0] = numpy.sum(x361 * (x16 * x522 + x514))
    result[7, 9, 0] = numpy.sum(x136 * (x17 * x522 + x524))
    result[8, 0, 0] = numpy.sum(
        x136 * (x0 * x334 + x0 * x525 + x0 * (x0 * (x0 * x326 + x469) + x525) + x337)
    )
    result[8, 1, 0] = numpy.sum(x361 * (x0 * x489 + x0 * (x0 * x526 + x489) + x491))
    result[8, 2, 0] = numpy.sum(x361 * (x0 * x475 + x0 * (x0 * x528 + x475) + x412))
    result[8, 3, 0] = numpy.sum(x361 * (x0 * x530 + x495))
    result[8, 4, 0] = numpy.sum(x367 * (x0 * x531 + x496))
    result[8, 5, 0] = numpy.sum(x361 * (x0 * x533 + x483))
    result[8, 6, 0] = numpy.sum(x136 * (x16 * x457 + x16 * x529 + x16 * x530 + x510))
    result[8, 7, 0] = numpy.sum(x361 * (x16 * x521 + x16 * x531 + x513))
    result[8, 8, 0] = numpy.sum(x361 * (x16 * x533 + x524))
    result[8, 9, 0] = numpy.sum(x136 * (x17 * x533 + x534))
    result[9, 0, 0] = numpy.sum(
        x88 * (x0 * x353 + x0 * x535 + x0 * (x0 * (x0 * x345 + x487) + x535) + x356)
    )
    result[9, 1, 0] = numpy.sum(
        x136 * (x0 * x536 + x0 * (x0 * x537 + x536) + x16 * x353 + x411)
    )
    result[9, 2, 0] = numpy.sum(x136 * (x0 * x493 + x0 * (x0 * x538 + x493) + x435))
    result[9, 3, 0] = numpy.sum(x136 * (x0 * x540 + x16 * x409 + x16 * x536 + x464))
    result[9, 4, 0] = numpy.sum(x249 * (x0 * x541 + x16 * x493 + x482))
    result[9, 5, 0] = numpy.sum(x136 * (x0 * x543 + x499))
    result[9, 6, 0] = numpy.sum(x88 * (x16 * x462 + x16 * x539 + x16 * x540 + x512))
    result[9, 7, 0] = numpy.sum(x136 * (x16 * x532 + x16 * x541 + x523))
    result[9, 8, 0] = numpy.sum(x136 * (x16 * x543 + x534))
    result[9, 9, 0] = numpy.sum(
        x88
        * (x137 * x497 + x17 * x497 + x17 * x542 + x17 * x543 - x279 * x498 + 5.0 * x430)
    )
    return result


def int3c2e3d_sph_331(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ff|p) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10, 3), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = -x2 * (ax * A[1] + bx * B[1])
    x8 = -x7 - C[1]
    x9 = -x2 * (ax * A[2] + bx * B[2])
    x10 = -x9 - C[2]
    x11 = cx + x1
    x12 = x11 ** (-1.0)
    x13 = cx * x12
    x14 = x1 * x13 * (x10**2 + x4**2 + x8**2)
    x15 = boys(2, x14)
    x16 = 17.49341832762486
    x17 = A[1] - B[1]
    x18 = A[2] - B[2]
    x19 = numpy.exp(-ax * bx * x2 * (x0**2 + x17**2 + x18**2))
    x20 = 2.0 * x11 ** (-1.5) * x16 * x19 * x2
    x21 = x15 * x20
    x22 = cx ** (-1.0)
    x23 = x11 ** (-0.5)
    x24 = boys(1, x14)
    x25 = 2.0 * x16 * x19 * x2 * x22 * x23 * x24 - x21
    x26 = x25 * x6
    x27 = -2.0 * x16 * x19 * x2 * x22 * x23 * x24 * x5 + x21 * x4
    x28 = -x27
    x29 = boys(3, x14)
    x30 = x20 * x29
    x31 = -2.0 * x15 * x16 * x19 * x2 * x22 * x23 * x5 + x30 * x4
    x32 = -x31
    x33 = x13 * x32
    x34 = x33 * x4
    x35 = x26 + x28 * x5 - x34
    x36 = -x27 - x33
    x37 = 2.0 * x6
    x38 = 2.0 * x15 * x16 * x19 * x2 * x22 * x23 - x30
    x39 = x38 * x6
    x40 = boys(4, x14)
    x41 = x20 * x40
    x42 = -2.0 * x16 * x19 * x2 * x22 * x23 * x29 * x5 + x4 * x41
    x43 = -x42
    x44 = x13 * x43
    x45 = x4 * x44
    x46 = x32 * x5 + x39 - x45
    x47 = x13 * x46
    x48 = x4 * x47
    x49 = x35 * x5 + x36 * x37 - x48
    x50 = -x25 * x6
    x51 = x28 * x5 - x34 - x47 - x50
    x52 = 3.0 * x6
    x53 = -x31 - x44
    x54 = 2.0 * x16 * x19 * x2 * x22 * x23 * x29 - x41
    x55 = x54 * x6
    x56 = boys(5, x14)
    x57 = x20 * x56
    x58 = -2.0 * x16 * x19 * x2 * x22 * x23 * x40 * x5 + x4 * x57
    x59 = -x58
    x60 = x13 * x59
    x61 = x4 * x60
    x62 = x43 * x5 + x55 - x61
    x63 = x13 * x62
    x64 = x4 * x63
    x65 = x37 * x53 + x46 * x5 - x64
    x66 = x13 * x65
    x67 = x4 * x66
    x68 = x49 * x5 + x51 * x52 - x67
    x69 = 4.0 * x6
    x70 = -x38 * x6
    x71 = x6 * (2.0 * x16 * x19 * x2 * x22 * x23 * x40 - x57)
    x72 = boys(6, x14)
    x73 = x20 * x72
    x74 = 2.0 * x16 * x19 * x2 * x22 * x23 * x5 * x56 - x4 * x73
    x75 = x13 * x74
    x76 = -x4 * x75 + x5 * x59 + x71
    x77 = x13 * x76
    x78 = -x37 * (x42 + x60) - x4 * x77 + x5 * x62
    x79 = x13 * x78
    x80 = -x4 * x79 + x5 * x65 - x52 * (-x32 * x5 + x45 + x63 + x70)
    x81 = x13 * x80
    x82 = -x4 * x81 + x5 * x68 + x69 * (x35 * x5 + 2.0 * x36 * x6 - x48 - x66)
    x83 = x6 * x68
    x84 = x1 * x12
    x85 = x84 * (x4 * x82 + 5.0 * x83)
    x86 = x49 * x6
    x87 = x84 * (x4 * x68 + 4.0 * x86)
    x88 = x0 * x87 + x85
    x89 = x35 * x6
    x90 = x84 * (x4 * x49 + 3.0 * x89)
    x91 = -x54 * x6
    x92 = x6 * (2.0 * x16 * x19 * x2 * x22 * x23 * x56 - x73)
    x93 = x20 * boys(7, x14)
    x94 = x13 * x4
    x95 = (
        x5 * x82
        + 5.0 * x6 * (x49 * x5 + 3.0 * x51 * x6 - x67 - x81)
        - x94
        * (
            x5 * x80
            + x69 * (x46 * x5 + 2.0 * x53 * x6 - x64 - x79)
            - x94
            * (
                x5 * x78
                - x52 * (-x43 * x5 + x61 + x77 + x91)
                + x94
                * (
                    x37 * (x58 + x75)
                    - x5 * x76
                    + x94
                    * (
                        x5 * x74
                        + x92
                        - x94 * (2.0 * x16 * x19 * x2 * x22 * x23 * x5 * x72 - x4 * x93)
                    )
                )
            )
        )
    )
    x96 = x6 * x82
    x97 = da * db * dc
    x98 = 0.06666666666666667 * x97
    x99 = x8 * x84
    x100 = x82 * x99
    x101 = x68 * x99
    x102 = x0 * x101 + x100
    x103 = x0 * x49
    x104 = x10 * x84
    x105 = x104 * x82
    x106 = x104 * x68
    x107 = x0 * x106 + x105
    x108 = -x7 - A[1]
    x109 = -2.0 * x108 * x15 * x16 * x19 * x2 * x22 * x23 + x30 * x8
    x110 = -x109
    x111 = x110 * x13
    x112 = -2.0 * x108 * x16 * x19 * x2 * x22 * x23 * x24 + x21 * x8
    x113 = -x111 - x112
    x114 = x113 * x6
    x115 = -x112
    x116 = x111 * x4 - x115 * x5
    x117 = -x116
    x118 = -2.0 * x108 * x16 * x19 * x2 * x22 * x23 * x29 + x41 * x8
    x119 = -x118
    x120 = x119 * x13
    x121 = -x110 * x5 + x120 * x4
    x122 = -x121
    x123 = x122 * x13
    x124 = x123 * x4
    x125 = x114 + x117 * x5 - x124
    x126 = -x116 - x123
    x127 = -x109 - x120
    x128 = x127 * x6
    x129 = -2.0 * x108 * x16 * x19 * x2 * x22 * x23 * x40 + x57 * x8
    x130 = -x129
    x131 = x13 * x130
    x132 = -x119 * x5 + x131 * x4
    x133 = -x132
    x134 = x13 * x133
    x135 = x134 * x4
    x136 = x122 * x5 + x128 - x135
    x137 = x13 * x136
    x138 = x137 * x4
    x139 = x125 * x5 + x126 * x37 - x138
    x140 = -x6 * (x118 + x131)
    x141 = 2.0 * x108 * x16 * x19 * x2 * x22 * x23 * x56 - x73 * x8
    x142 = x13 * x141
    x143 = x130 * x5 - x142 * x4
    x144 = x13 * x143
    x145 = x133 * x5 + x140 - x144 * x4
    x146 = x13 * x145
    x147 = x136 * x5 - x146 * x4 - x37 * (x121 + x134)
    x148 = x13 * x147
    x149 = x139 * x5 - x148 * x4 + x52 * (x113 * x6 + x117 * x5 - x124 - x137)
    x150 = x139 * x6
    x151 = x84 * (x149 * x4 + 4.0 * x150)
    x152 = x151 + x17 * x87
    x153 = x125 * x6
    x154 = x84 * (x139 * x4 + 3.0 * x153)
    x155 = x154 + x17 * x90
    x156 = -x6 * (x129 + x142)
    x157 = 2.0 * x108 * x16 * x19 * x2 * x22 * x23 * x72 - x8 * x93
    x158 = (
        x149 * x5
        + x69 * (x125 * x5 + 2.0 * x126 * x6 - x138 - x148)
        - x94
        * (
            x147 * x5
            + x52 * (x122 * x5 + x127 * x6 - x135 - x146)
            + x94
            * (
                -x145 * x5
                + x37 * (x132 + x144)
                + x94 * (x143 * x5 + x156 - x94 * (x141 * x5 - x157 * x94))
            )
        )
    )
    x159 = x149 * x6
    x160 = x84 * (x158 * x4 + 5.0 * x159)
    x161 = 2.23606797749979 * x98
    x162 = x84 * (x149 * x8 + x83)
    x163 = x101 * x17 + x162
    x164 = x84 * (x139 * x8 + x86)
    x165 = x17 * x49
    x166 = x164 + x165 * x99
    x167 = x84 * (x158 * x8 + x96)
    x168 = x104 * x149
    x169 = x106 * x17 + x168
    x170 = x104 * x139
    x171 = x104 * x165 + x170
    x172 = x104 * x158
    x173 = -x9 - A[2]
    x174 = x10 * x30 - 2.0 * x15 * x16 * x173 * x19 * x2 * x22 * x23
    x175 = -x174
    x176 = x13 * x175
    x177 = x10 * x21 - 2.0 * x16 * x173 * x19 * x2 * x22 * x23 * x24
    x178 = -x176 - x177
    x179 = x178 * x6
    x180 = -x177
    x181 = x176 * x4 - x180 * x5
    x182 = -x181
    x183 = x10 * x41 - 2.0 * x16 * x173 * x19 * x2 * x22 * x23 * x29
    x184 = -x183
    x185 = x13 * x184
    x186 = -x175 * x5 + x185 * x4
    x187 = -x186
    x188 = x13 * x187
    x189 = x188 * x4
    x190 = x179 + x182 * x5 - x189
    x191 = -x181 - x188
    x192 = -x174 - x185
    x193 = x192 * x6
    x194 = x10 * x57 - 2.0 * x16 * x173 * x19 * x2 * x22 * x23 * x40
    x195 = -x194
    x196 = x13 * x195
    x197 = -x184 * x5 + x196 * x4
    x198 = -x197
    x199 = x13 * x198
    x200 = x199 * x4
    x201 = x187 * x5 + x193 - x200
    x202 = x13 * x201
    x203 = x202 * x4
    x204 = x190 * x5 + x191 * x37 - x203
    x205 = -x178 * x6
    x206 = -x6 * (x183 + x196)
    x207 = -x10 * x73 + 2.0 * x16 * x173 * x19 * x2 * x22 * x23 * x56
    x208 = x13 * x207
    x209 = x195 * x5 - x208 * x4
    x210 = x13 * x209
    x211 = x198 * x5 + x206 - x210 * x4
    x212 = x13 * x211
    x213 = x201 * x5 - x212 * x4 - x37 * (x186 + x199)
    x214 = x13 * x213
    x215 = x204 * x5 - x214 * x4 - x52 * (-x182 * x5 + x189 + x202 + x205)
    x216 = x204 * x6
    x217 = x84 * (x215 * x4 + 4.0 * x216)
    x218 = x18 * x87 + x217
    x219 = x190 * x6
    x220 = x84 * (x204 * x4 + 3.0 * x219)
    x221 = x18 * x90 + x220
    x222 = -x192 * x6
    x223 = -x6 * (x194 + x208)
    x224 = -x10 * x93 + 2.0 * x16 * x173 * x19 * x2 * x22 * x23 * x72
    x225 = (
        x215 * x5
        + x69 * (x190 * x5 + 2.0 * x191 * x6 - x203 - x214)
        - x94
        * (
            x213 * x5
            - x52 * (-x187 * x5 + x200 + x212 + x222)
            + x94
            * (
                -x211 * x5
                + x37 * (x197 + x210)
                + x94 * (x209 * x5 + x223 - x94 * (x207 * x5 - x224 * x94))
            )
        )
    )
    x226 = x215 * x6
    x227 = x84 * (x225 * x4 + 5.0 * x226)
    x228 = x215 * x99
    x229 = x101 * x18 + x228
    x230 = x204 * x99
    x231 = x18 * x49
    x232 = x230 + x231 * x99
    x233 = x225 * x99
    x234 = x84 * (x10 * x215 + x83)
    x235 = x106 * x18 + x234
    x236 = x84 * (x10 * x204 + x86)
    x237 = x104 * x231 + x236
    x238 = x84 * (x10 * x225 + x96)
    x239 = x120 * x8
    x240 = x108 * x110 - x239 + x39
    x241 = x13 * x240
    x242 = x111 * x8
    x243 = x108 * x115 - x241 - x242 - x50
    x244 = x243 * x6
    x245 = x108 * x115 - x242 + x26
    x246 = x241 * x4 - x245 * x5
    x247 = -x246
    x248 = x131 * x8
    x249 = x108 * x119 - x248 + x55
    x250 = x13 * x249
    x251 = -x240 * x5 + x250 * x4
    x252 = -x251
    x253 = x13 * x252
    x254 = x253 * x4
    x255 = x244 + x247 * x5 - x254
    x256 = x6 * (x108 * x110 - x239 - x250 - x70)
    x257 = x108 * x130 - x142 * x8 + x71
    x258 = x13 * x257
    x259 = x249 * x5 - x258 * x4
    x260 = x13 * x259
    x261 = x252 * x5 + x256 - x260 * x4
    x262 = x13 * x261
    x263 = x255 * x5 - x262 * x4 - x37 * (x246 + x253)
    x264 = x255 * x6
    x265 = 3.0 * x264
    x266 = x84 * (x263 * x4 + x265)
    x267 = x154 * x17 + x266
    x268 = x155 * x17 + x267
    x269 = x6 * (x108 * x119 - x248 - x258 - x91)
    x270 = x13 * x8
    x271 = x108 * x141 - x157 * x270 + x92
    x272 = (
        x263 * x5
        + x52 * (x243 * x6 + x247 * x5 - x254 - x262)
        + x94
        * (
            -x261 * x5
            + x37 * (x251 + x260)
            + x94 * (x259 * x5 + x269 - x94 * (x257 * x5 - x271 * x94))
        )
    )
    x273 = x263 * x6
    x274 = x84 * (x272 * x4 + 4.0 * x273)
    x275 = x151 * x17 + x274
    x276 = x84 * (2.0 * x150 + x263 * x8)
    x277 = x164 * x17 + x276
    x278 = x166 * x17 + x277
    x279 = x84 * (2.0 * x159 + x272 * x8)
    x280 = x162 * x17 + x279
    x281 = x104 * x263
    x282 = x17 * x170 + x281
    x283 = x17 * x171 + x282
    x284 = x104 * x272
    x285 = x168 * x17 + x284
    x286 = -x108 * x175 + x185 * x8
    x287 = -x286
    x288 = x13 * x287
    x289 = -x108 * x180 + x176 * x8
    x290 = -x288 - x289
    x291 = x290 * x6
    x292 = -x289
    x293 = x288 * x4 - x292 * x5
    x294 = -x293
    x295 = -x108 * x184 + x196 * x8
    x296 = -x295
    x297 = x13 * x296
    x298 = -x287 * x5 + x297 * x4
    x299 = -x298
    x300 = x13 * x299
    x301 = x300 * x4
    x302 = x291 + x294 * x5 - x301
    x303 = -x6 * (x286 + x297)
    x304 = x108 * x195 - x208 * x8
    x305 = x13 * x304
    x306 = x296 * x5 - x305 * x4
    x307 = x13 * x306
    x308 = x299 * x5 + x303 - x307 * x4
    x309 = x13 * x308
    x310 = x302 * x5 - x309 * x4 - x37 * (x293 + x300)
    x311 = x84 * (x302 * x52 + x310 * x4)
    x312 = x154 * x18 + x311
    x313 = x17 * x221 + x312
    x314 = -x6 * (x295 + x305)
    x315 = x108 * x207 - x224 * x270
    x316 = (
        x310 * x5
        + x52 * (x290 * x6 + x294 * x5 - x301 - x309)
        + x94
        * (
            -x308 * x5
            + x37 * (x298 + x307)
            + x94 * (x306 * x5 + x314 - x94 * (x304 * x5 - x315 * x94))
        )
    )
    x317 = x84 * (x310 * x69 + x316 * x4)
    x318 = x151 * x18 + x317
    x319 = 3.872983346207417 * x98
    x320 = x84 * (x216 + x310 * x8)
    x321 = x164 * x18 + x320
    x322 = x17 * x232 + x321
    x323 = x84 * (x226 + x316 * x8)
    x324 = x162 * x18 + x323
    x325 = x84 * (x10 * x310 + x150)
    x326 = x170 * x18 + x325
    x327 = x17 * x237 + x326
    x328 = x84 * (x10 * x316 + x159)
    x329 = x168 * x18 + x328
    x330 = x10 * x185
    x331 = x173 * x175 - x330 + x39
    x332 = x13 * x331
    x333 = x10 * x176
    x334 = x173 * x180 - x332 - x333 - x50
    x335 = x334 * x6
    x336 = x173 * x180 + x26 - x333
    x337 = x332 * x4 - x336 * x5
    x338 = -x337
    x339 = x10 * x196
    x340 = x173 * x184 - x339 + x55
    x341 = x13 * x340
    x342 = -x331 * x5 + x341 * x4
    x343 = -x342
    x344 = x13 * x343
    x345 = x344 * x4
    x346 = x335 + x338 * x5 - x345
    x347 = x6 * (x173 * x175 - x330 - x341 - x70)
    x348 = -x10 * x208 + x173 * x195 + x71
    x349 = x13 * x348
    x350 = x340 * x5 - x349 * x4
    x351 = x13 * x350
    x352 = x343 * x5 + x347 - x351 * x4
    x353 = x13 * x352
    x354 = x346 * x5 - x353 * x4 - x37 * (x337 + x344)
    x355 = x346 * x6
    x356 = 3.0 * x355
    x357 = x84 * (x354 * x4 + x356)
    x358 = x18 * x220 + x357
    x359 = x18 * x221 + x358
    x360 = -x334 * x6
    x361 = x6 * (x173 * x184 - x339 - x349 - x91)
    x362 = x10 * x13
    x363 = x173 * x207 - x224 * x362 + x92
    x364 = (
        x354 * x5
        - x52 * (-x338 * x5 + x345 + x353 + x360)
        + x94
        * (
            -x352 * x5
            + x37 * (x342 + x351)
            + x94 * (x350 * x5 + x361 - x94 * (x348 * x5 - x363 * x94))
        )
    )
    x365 = x354 * x6
    x366 = x84 * (x364 * x4 + 4.0 * x365)
    x367 = x18 * x217 + x366
    x368 = x354 * x99
    x369 = x18 * x230 + x368
    x370 = x18 * x232 + x369
    x371 = x364 * x99
    x372 = x18 * x228 + x371
    x373 = x84 * (x10 * x354 + 2.0 * x216)
    x374 = x18 * x236 + x373
    x375 = x18 * x237 + x374
    x376 = x84 * (x10 * x364 + 2.0 * x226)
    x377 = x18 * x234 + x376
    x378 = x250 * x8
    x379 = x108 * x240 + 2.0 * x128 - x378
    x380 = x13 * x379
    x381 = x241 * x8
    x382 = x6 * (x108 * x245 + 2.0 * x113 * x6 - x380 - x381)
    x383 = x108 * x245 + 2.0 * x114 - x381
    x384 = x380 * x4 - x383 * x5
    x385 = -x384
    x386 = x108 * x249 + 2.0 * x140 - x258 * x8
    x387 = x13 * x386
    x388 = x379 * x5 - x387 * x4
    x389 = x13 * x388
    x390 = x382 + x385 * x5 - x389 * x4
    x391 = x6 * (x108 * x240 + 2.0 * x127 * x6 - x378 - x387)
    x392 = x108 * x257 + 2.0 * x156 - x270 * x271
    x393 = (
        -x37 * (x384 + x389)
        + x390 * x5
        - x94 * (x388 * x5 + x391 - x94 * (x386 * x5 - x392 * x94))
    )
    x394 = x390 * x6
    x395 = x84 * (x393 * x4 + 3.0 * x394)
    x396 = x17 * x266 + x395
    x397 = x17 * x267 + x396
    x398 = x84 * (3.0 * x273 + x393 * x8)
    x399 = x17 * x276 + x398
    x400 = x17 * x277 + x399
    x401 = x104 * x393
    x402 = x17 * x281 + x401
    x403 = x17 * x282 + x402
    x404 = x297 * x8
    x405 = x108 * x287 + x193 - x404
    x406 = x13 * x405
    x407 = x288 * x8
    x408 = x6 * (x108 * x292 - x205 - x406 - x407)
    x409 = x108 * x292 + x179 - x407
    x410 = x4 * x406 - x409 * x5
    x411 = -x410
    x412 = x108 * x296 + x206 - x305 * x8
    x413 = x13 * x412
    x414 = -x4 * x413 + x405 * x5
    x415 = x13 * x414
    x416 = -x4 * x415 + x408 + x411 * x5
    x417 = x6 * (x108 * x287 - x222 - x404 - x413)
    x418 = x108 * x304 + x223 - x270 * x315
    x419 = (
        -x37 * (x410 + x415)
        + x416 * x5
        - x94 * (x414 * x5 + x417 - x94 * (x412 * x5 - x418 * x94))
    )
    x420 = x416 * x52
    x421 = x84 * (x4 * x419 + x420)
    x422 = x18 * x266 + x421
    x423 = x17 * x312 + x422
    x424 = x310 * x37
    x425 = x84 * (x419 * x8 + x424)
    x426 = x18 * x276 + x425
    x427 = x17 * x321 + x426
    x428 = x84 * (x10 * x419 + x273)
    x429 = x18 * x281 + x428
    x430 = x17 * x326 + x429
    x431 = -x108 * x331 + x341 * x8
    x432 = -x431
    x433 = x13 * x432
    x434 = -x108 * x336 + x332 * x8
    x435 = -x6 * (x433 + x434)
    x436 = -x434
    x437 = x4 * x433 - x436 * x5
    x438 = -x437
    x439 = x108 * x340 - x349 * x8
    x440 = x13 * x439
    x441 = -x4 * x440 + x432 * x5
    x442 = x13 * x441
    x443 = -x4 * x442 + x435 + x438 * x5
    x444 = -x6 * (x431 + x440)
    x445 = x108 * x348 - x270 * x363
    x446 = (
        -x37 * (x437 + x442)
        + x443 * x5
        - x94 * (x441 * x5 + x444 - x94 * (x439 * x5 - x445 * x94))
    )
    x447 = x443 * x52
    x448 = x84 * (x4 * x446 + x447)
    x449 = x18 * x311 + x448
    x450 = x18 * x312 + x449
    x451 = x84 * (x365 + x446 * x8)
    x452 = x18 * x320 + x451
    x453 = x18 * x321 + x452
    x454 = x84 * (x10 * x446 + x424)
    x455 = x18 * x325 + x454
    x456 = x18 * x326 + x455
    x457 = x10 * x341
    x458 = x173 * x331 + 2.0 * x193 - x457
    x459 = x13 * x458
    x460 = x10 * x332
    x461 = x6 * (x173 * x336 + 2.0 * x178 * x6 - x459 - x460)
    x462 = x173 * x336 + 2.0 * x179 - x460
    x463 = x4 * x459 - x462 * x5
    x464 = -x463
    x465 = -x10 * x349 + x173 * x340 + 2.0 * x206
    x466 = x13 * x465
    x467 = -x4 * x466 + x458 * x5
    x468 = x13 * x467
    x469 = -x4 * x468 + x461 + x464 * x5
    x470 = x6 * (x173 * x331 + 2.0 * x192 * x6 - x457 - x466)
    x471 = x173 * x348 + 2.0 * x223 - x362 * x363
    x472 = (
        -x37 * (x463 + x468)
        + x469 * x5
        - x94 * (x467 * x5 + x470 - x94 * (x465 * x5 - x471 * x94))
    )
    x473 = x469 * x6
    x474 = x84 * (x4 * x472 + 3.0 * x473)
    x475 = x18 * x357 + x474
    x476 = x18 * x358 + x475
    x477 = x472 * x99
    x478 = x18 * x368 + x477
    x479 = x18 * x369 + x478
    x480 = x84 * (x10 * x472 + 3.0 * x365)
    x481 = x18 * x373 + x480
    x482 = x18 * x374 + x481
    x483 = x0 * x154 + x151
    x484 = x117 * x6
    x485 = 2.0 * x484
    x486 = x125 * x4 + x485
    x487 = x0 * x84
    x488 = x0 * x164 + x162
    x489 = x125 * x8 + x89
    x490 = x0 * x170 + x168
    x491 = x104 * x125
    x492 = x247 * x6
    x493 = x84 * (x255 * x4 + 2.0 * x492)
    x494 = x17 * x84
    x495 = x486 * x494 + x493
    x496 = 0.3333333333333333 * x97
    x497 = x84 * (2.0 * x153 + x255 * x8)
    x498 = x489 * x494 + x497
    x499 = x104 * x255
    x500 = x17 * x491 + x499
    x501 = x294 * x37
    x502 = x84 * (x302 * x4 + x501)
    x503 = x18 * x84
    x504 = x486 * x503 + x502
    x505 = x84 * (x219 + x302 * x8)
    x506 = x489 * x503 + x505
    x507 = x84 * (x10 * x302 + x153)
    x508 = x18 * x491 + x507
    x509 = x385 * x6
    x510 = x84 * (x390 * x4 + 2.0 * x509)
    x511 = x17 * x493 + x510
    x512 = x17 * x495 + x511
    x513 = x84 * (x265 + x390 * x8)
    x514 = x17 * x497 + x513
    x515 = x17 * x498 + x514
    x516 = x104 * x390
    x517 = x17 * x499 + x516
    x518 = x17 * x500 + x517
    x519 = x37 * x411
    x520 = x84 * (x4 * x416 + x519)
    x521 = x18 * x493 + x520
    x522 = x17 * x504 + x521
    x523 = 1.732050807568877 * x496
    x524 = x302 * x37
    x525 = x84 * (x416 * x8 + x524)
    x526 = x18 * x497 + x525
    x527 = x17 * x506 + x526
    x528 = x84 * (x10 * x416 + x264)
    x529 = x18 * x499 + x528
    x530 = x17 * x508 + x529
    x531 = x37 * x438
    x532 = x84 * (x4 * x443 + x531)
    x533 = x18 * x502 + x532
    x534 = x18 * x504 + x533
    x535 = x84 * (x355 + x443 * x8)
    x536 = x18 * x505 + x535
    x537 = x18 * x506 + x536
    x538 = x84 * (x10 * x443 + x524)
    x539 = x18 * x507 + x538
    x540 = x18 * x508 + x539
    x541 = x108 * x379 + 3.0 * x256 - x387 * x8
    x542 = x13 * x541
    x543 = x380 * x8
    x544 = x6 * (x108 * x383 + 3.0 * x243 * x6 - x542 - x543)
    x545 = x108 * x383 + 3.0 * x244 - x543
    x546 = -x4 * x542 + x5 * x545
    x547 = x108 * x386 + 3.0 * x269 - x270 * x392
    x548 = x5 * x546 + x544 - x94 * (x5 * x541 - x547 * x94)
    x549 = x546 * x6
    x550 = x17 * x510 + x84 * (x4 * x548 + 2.0 * x549)
    x551 = x17 * x511 + x550
    x552 = x17 * x513 + x84 * (4.0 * x394 + x548 * x8)
    x553 = x17 * x514 + x552
    x554 = x104 * x548 + x17 * x516
    x555 = x17 * x517 + x554
    x556 = x108 * x405 + 2.0 * x303 - x413 * x8
    x557 = x13 * x556
    x558 = x406 * x8
    x559 = x6 * (x108 * x409 + 2.0 * x290 * x6 - x557 - x558)
    x560 = x108 * x409 + 2.0 * x291 - x558
    x561 = -x4 * x557 + x5 * x560
    x562 = x108 * x412 - x270 * x418 + 2.0 * x314
    x563 = x5 * x561 + x559 - x94 * (x5 * x556 - x562 * x94)
    x564 = x37 * x561
    x565 = x84 * (x4 * x563 + x564)
    x566 = x18 * x510 + x565
    x567 = x17 * x521 + x566
    x568 = x84 * (x420 + x563 * x8)
    x569 = x18 * x513 + x568
    x570 = x17 * x526 + x569
    x571 = x84 * (x10 * x563 + x394)
    x572 = x18 * x516 + x571
    x573 = x17 * x529 + x572
    x574 = x108 * x432 + x347 - x440 * x8
    x575 = x13 * x574
    x576 = x433 * x8
    x577 = x6 * (x108 * x436 - x360 - x575 - x576)
    x578 = x108 * x436 + x335 - x576
    x579 = -x4 * x575 + x5 * x578
    x580 = x108 * x439 - x270 * x445 + x361
    x581 = x5 * x579 + x577 - x94 * (x5 * x574 - x580 * x94)
    x582 = x84 * (x37 * x579 + x4 * x581)
    x583 = x18 * x520 + x582
    x584 = x18 * x521 + x583
    x585 = x84 * (x37 * x443 + x581 * x8)
    x586 = x18 * x525 + x585
    x587 = x18 * x526 + x586
    x588 = x84 * (x10 * x581 + x37 * x416)
    x589 = x18 * x528 + x588
    x590 = x18 * x529 + x589
    x591 = x108 * x458 - x466 * x8
    x592 = x13 * x591
    x593 = -x108 * x462 + x459 * x8
    x594 = -x6 * (x592 + x593)
    x595 = -x593
    x596 = -x4 * x592 + x5 * x595
    x597 = x108 * x465 - x270 * x471
    x598 = x5 * x596 + x594 - x94 * (x5 * x591 - x597 * x94)
    x599 = x37 * x596
    x600 = x84 * (x4 * x598 + x599)
    x601 = x18 * x532 + x600
    x602 = x18 * x533 + x601
    x603 = x84 * (x473 + x598 * x8)
    x604 = x18 * x535 + x603
    x605 = x18 * x536 + x604
    x606 = x84 * (x10 * x598 + x447)
    x607 = x18 * x538 + x606
    x608 = x18 * x539 + x607
    x609 = x0 * x220 + x217
    x610 = x182 * x6
    x611 = 2.0 * x610
    x612 = x190 * x4 + x611
    x613 = x0 * x230 + x228
    x614 = x190 * x99
    x615 = x0 * x236 + x234
    x616 = x10 * x190 + x89
    x617 = x17 * x220 + x311
    x618 = x494 * x612 + x502
    x619 = x17 * x230 + x320
    x620 = x17 * x614 + x505
    x621 = x17 * x236 + x325
    x622 = x494 * x616 + x507
    x623 = x338 * x6
    x624 = x84 * (x346 * x4 + 2.0 * x623)
    x625 = x503 * x612 + x624
    x626 = x346 * x99
    x627 = x18 * x614 + x626
    x628 = x84 * (x10 * x346 + 2.0 * x219)
    x629 = x503 * x616 + x628
    x630 = x17 * x502 + x520
    x631 = x17 * x618 + x630
    x632 = x17 * x311 + x421
    x633 = x17 * x505 + x525
    x634 = x17 * x620 + x633
    x635 = x17 * x320 + x425
    x636 = x17 * x507 + x528
    x637 = x17 * x622 + x636
    x638 = x17 * x325 + x428
    x639 = x17 * x625 + x533
    x640 = x17 * x627 + x536
    x641 = x17 * x629 + x539
    x642 = x464 * x6
    x643 = x84 * (x4 * x469 + 2.0 * x642)
    x644 = x18 * x624 + x643
    x645 = x18 * x625 + x644
    x646 = x469 * x99
    x647 = x18 * x626 + x646
    x648 = x18 * x627 + x647
    x649 = x84 * (x10 * x469 + x356)
    x650 = x18 * x628 + x649
    x651 = x18 * x629 + x650
    x652 = x17 * x520 + x565
    x653 = x17 * x630 + x652
    x654 = x17 * x525 + x568
    x655 = x17 * x633 + x654
    x656 = x17 * x528 + x571
    x657 = x17 * x636 + x656
    x658 = x17 * x533 + x583
    x659 = x17 * x536 + x586
    x660 = x17 * x539 + x589
    x661 = -x10 * x466 + x173 * x458 + 3.0 * x347
    x662 = x13 * x661
    x663 = x10 * x459
    x664 = x6 * (x173 * x462 + 3.0 * x334 * x6 - x662 - x663)
    x665 = x173 * x462 + 3.0 * x335 - x663
    x666 = -x4 * x662 + x5 * x665
    x667 = x173 * x465 + 3.0 * x361 - x362 * x471
    x668 = x5 * x666 + x664 - x94 * (x5 * x661 - x667 * x94)
    x669 = x6 * x666
    x670 = x18 * x643 + x84 * (x4 * x668 + 2.0 * x669)
    x671 = x18 * x644 + x670
    x672 = x18 * x646 + x668 * x99
    x673 = x18 * x647 + x672
    x674 = x18 * x649 + x84 * (x10 * x668 + 4.0 * x473)
    x675 = x18 * x650 + x674
    x676 = x0 * x493 + x266
    x677 = x245 * x6
    x678 = x247 * x4 + x677
    x679 = x0 * x497 + x276
    x680 = x247 * x8 + x485
    x681 = x0 * x499 + x281
    x682 = x104 * x247
    x683 = x383 * x6
    x684 = x84 * (x385 * x4 + x683)
    x685 = x494 * x678 + x684
    x686 = x84 * (x385 * x8 + 3.0 * x492)
    x687 = x494 * x680 + x686
    x688 = x104 * x385
    x689 = x17 * x682 + x688
    x690 = x409 * x6
    x691 = x84 * (x4 * x411 + x690)
    x692 = x503 * x678 + x691
    x693 = x84 * (x411 * x8 + x501)
    x694 = x503 * x680 + x693
    x695 = x84 * (x10 * x411 + x492)
    x696 = x18 * x682 + x695
    x697 = x545 * x6
    x698 = x84 * (x4 * x546 + x697)
    x699 = x17 * x684 + x698
    x700 = x17 * x685 + x699
    x701 = x84 * (4.0 * x509 + x546 * x8)
    x702 = x17 * x686 + x701
    x703 = x17 * x687 + x702
    x704 = x104 * x546
    x705 = x17 * x688 + x704
    x706 = x17 * x689 + x705
    x707 = x560 * x6
    x708 = x84 * (x4 * x561 + x707)
    x709 = x18 * x684 + x708
    x710 = x17 * x692 + x709
    x711 = x84 * (x411 * x52 + x561 * x8)
    x712 = x18 * x686 + x711
    x713 = x17 * x694 + x712
    x714 = x84 * (x10 * x561 + x509)
    x715 = x18 * x688 + x714
    x716 = x17 * x696 + x715
    x717 = x578 * x6
    x718 = x84 * (x4 * x579 + x717)
    x719 = x18 * x691 + x718
    x720 = x18 * x692 + x719
    x721 = x84 * (x531 + x579 * x8)
    x722 = x18 * x693 + x721
    x723 = x18 * x694 + x722
    x724 = x84 * (x10 * x579 + x519)
    x725 = x18 * x695 + x724
    x726 = x18 * x696 + x725
    x727 = x108 * x545 + 4.0 * x382 - x542 * x8
    x728 = x6 * x727
    x729 = x108 * x541 - x270 * x547 + 4.0 * x391
    x730 = x5 * x727 - x729 * x94
    x731 = x17 * x698 + x17 * x699 + x84 * (x4 * x730 + x728)
    x732 = x17 * x701 + x17 * x702 + x84 * (5.0 * x549 + x730 * x8)
    x733 = x104 * x730 + x17 * x704 + x17 * x705
    x734 = x108 * x560 + 3.0 * x408 - x557 * x8
    x735 = x6 * x734
    x736 = x108 * x556 - x270 * x562 + 3.0 * x417
    x737 = x5 * x734 - x736 * x94
    x738 = x84 * (x4 * x737 + x735)
    x739 = x17 * x709 + x18 * x698 + x738
    x740 = x84 * (x561 * x69 + x737 * x8)
    x741 = x17 * x712 + x18 * x701 + x740
    x742 = x84 * (x10 * x737 + x549)
    x743 = x17 * x715 + x18 * x704 + x742
    x744 = x108 * x578 + 2.0 * x435 - x575 * x8
    x745 = x6 * x744
    x746 = x108 * x574 - x270 * x580 + 2.0 * x444
    x747 = x5 * x744 - x746 * x94
    x748 = x84 * (x4 * x747 + x745)
    x749 = x18 * x708 + x748
    x750 = x18 * x709 + x749
    x751 = x52 * x579
    x752 = x84 * (x747 * x8 + x751)
    x753 = x18 * x711 + x752
    x754 = x18 * x712 + x753
    x755 = x84 * (x10 * x747 + x564)
    x756 = x18 * x714 + x755
    x757 = x18 * x715 + x756
    x758 = x108 * x595 + x461 - x592 * x8
    x759 = x6 * x758
    x760 = x108 * x591 - x270 * x597 + x470
    x761 = x5 * x758 - x760 * x94
    x762 = x84 * (x4 * x761 + x759)
    x763 = x18 * x718 + x762
    x764 = x18 * x719 + x763
    x765 = x84 * (x599 + x761 * x8)
    x766 = x18 * x721 + x765
    x767 = x18 * x722 + x766
    x768 = x84 * (x10 * x761 + x751)
    x769 = x18 * x724 + x768
    x770 = x18 * x725 + x769
    x771 = x0 * x502 + x311
    x772 = x292 * x6
    x773 = x294 * x4 + x772
    x774 = x0 * x505 + x320
    x775 = x294 * x8 + x610
    x776 = x0 * x507 + x325
    x777 = x10 * x294 + x484
    x778 = x494 * x773 + x691
    x779 = x494 * x775 + x693
    x780 = x494 * x777 + x695
    x781 = x436 * x6
    x782 = x84 * (x4 * x438 + x781)
    x783 = x503 * x773 + x782
    x784 = x84 * (x438 * x8 + x623)
    x785 = x503 * x775 + x784
    x786 = x84 * (x10 * x438 + x501)
    x787 = x503 * x777 + x786
    x788 = x17 * x691 + x708
    x789 = x17 * x778 + x788
    x790 = x17 * x693 + x711
    x791 = x17 * x779 + x790
    x792 = x17 * x695 + x714
    x793 = x17 * x780 + x792
    x794 = x17 * x783 + x719
    x795 = x17 * x785 + x722
    x796 = x17 * x787 + x725
    x797 = x595 * x6
    x798 = x84 * (x4 * x596 + x797)
    x799 = x18 * x782 + x798
    x800 = x18 * x783 + x799
    x801 = x84 * (x596 * x8 + x642)
    x802 = x18 * x784 + x801
    x803 = x18 * x785 + x802
    x804 = x84 * (x10 * x596 + x438 * x52)
    x805 = x18 * x786 + x804
    x806 = x18 * x787 + x805
    x807 = x17 * x708 + x17 * x788 + x738
    x808 = x17 * x711 + x17 * x790 + x740
    x809 = x17 * x714 + x17 * x792 + x742
    x810 = x17 * x719 + x749
    x811 = x17 * x722 + x753
    x812 = x17 * x725 + x756
    x813 = x108 * x665 - x662 * x8
    x814 = x6 * x813
    x815 = x108 * x661 - x270 * x667
    x816 = x5 * x813 - x815 * x94
    x817 = x18 * x798 + x84 * (x4 * x816 + x814)
    x818 = x18 * x799 + x817
    x819 = x18 * x801 + x84 * (x669 + x8 * x816)
    x820 = x18 * x802 + x819
    x821 = x18 * x804 + x84 * (x10 * x816 + x596 * x69)
    x822 = x18 * x805 + x821
    x823 = x0 * x624 + x357
    x824 = x336 * x6
    x825 = x338 * x4 + x824
    x826 = x0 * x626 + x368
    x827 = x338 * x99
    x828 = x0 * x628 + x373
    x829 = x10 * x338 + x611
    x830 = x17 * x624 + x532
    x831 = x494 * x825 + x782
    x832 = x17 * x626 + x535
    x833 = x17 * x827 + x784
    x834 = x17 * x628 + x538
    x835 = x494 * x829 + x786
    x836 = x462 * x6
    x837 = x84 * (x4 * x464 + x836)
    x838 = x503 * x825 + x837
    x839 = x464 * x99
    x840 = x18 * x827 + x839
    x841 = x84 * (x10 * x464 + 3.0 * x623)
    x842 = x503 * x829 + x841
    x843 = x17 * x782 + x718
    x844 = x17 * x831 + x843
    x845 = x17 * x532 + x582
    x846 = x17 * x784 + x721
    x847 = x17 * x833 + x846
    x848 = x17 * x535 + x585
    x849 = x17 * x786 + x724
    x850 = x17 * x835 + x849
    x851 = x17 * x538 + x588
    x852 = x17 * x838 + x799
    x853 = x17 * x840 + x802
    x854 = x17 * x842 + x805
    x855 = x6 * x665
    x856 = x84 * (x4 * x666 + x855)
    x857 = x18 * x837 + x856
    x858 = x18 * x838 + x857
    x859 = x666 * x99
    x860 = x18 * x839 + x859
    x861 = x18 * x840 + x860
    x862 = x84 * (x10 * x666 + 4.0 * x642)
    x863 = x18 * x841 + x862
    x864 = x18 * x842 + x863
    x865 = x17 * x718 + x17 * x843 + x748
    x866 = x17 * x721 + x17 * x846 + x752
    x867 = x17 * x724 + x17 * x849 + x755
    x868 = x17 * x799 + x763
    x869 = x17 * x802 + x766
    x870 = x17 * x805 + x769
    x871 = -x10 * x662 + x173 * x665 + 4.0 * x461
    x872 = x6 * x871
    x873 = x173 * x661 - x362 * x667 + 4.0 * x470
    x874 = x5 * x871 - x873 * x94
    x875 = x18 * x856 + x18 * x857 + x84 * (x4 * x874 + x872)
    x876 = x18 * x859 + x18 * x860 + x874 * x99
    x877 = x18 * x862 + x18 * x863 + x84 * (x10 * x874 + 5.0 * x669)
    x878 = x0 * x684 + x510
    x879 = x383 * x4
    x880 = x0 * x686 + x513
    x881 = x383 * x8 + 3.0 * x677
    x882 = x0 * x688 + x516
    x883 = x104 * x383
    x884 = x4 * x84
    x885 = x494 * x879 + x545 * x884
    x886 = x84 * (x545 * x8 + 4.0 * x683)
    x887 = x494 * x881 + x886
    x888 = x104 * x545
    x889 = x17 * x883 + x888
    x890 = x560 * x884
    x891 = x503 * x879 + x890
    x892 = x84 * (x560 * x8 + 3.0 * x690)
    x893 = x503 * x881 + x892
    x894 = x84 * (x10 * x560 + x683)
    x895 = x18 * x883 + x894
    x896 = x4 * x545
    x897 = x494 * x896 + x727 * x884
    x898 = x17 * x885 + x897
    x899 = x84 * (5.0 * x697 + x727 * x8)
    x900 = x17 * x886 + x899
    x901 = x17 * x887 + x900
    x902 = x104 * x727
    x903 = x17 * x888 + x902
    x904 = x17 * x889 + x903
    x905 = x734 * x884
    x906 = x503 * x896 + x905
    x907 = x17 * x891 + x906
    x908 = x84 * (4.0 * x707 + x734 * x8)
    x909 = x18 * x886 + x908
    x910 = x17 * x893 + x909
    x911 = x84 * (x10 * x734 + x697)
    x912 = x18 * x888 + x911
    x913 = x17 * x895 + x912
    x914 = x744 * x884
    x915 = x4 * x503
    x916 = x560 * x915 + x914
    x917 = x18 * x891 + x916
    x918 = 3.0 * x717
    x919 = x84 * (x744 * x8 + x918)
    x920 = x18 * x892 + x919
    x921 = x18 * x893 + x920
    x922 = x84 * (x10 * x744 + 2.0 * x707)
    x923 = x18 * x894 + x922
    x924 = x18 * x895 + x923
    x925 = x108 * x727 - x270 * x729 + 5.0 * x544
    x926 = x4 * x494
    x927 = x108 * x734 - x270 * x736 + 4.0 * x559
    x928 = x884 * x927
    x929 = x84 * (5.0 * x735 + x8 * x927)
    x930 = x84 * (x10 * x927 + x728)
    x931 = x108 * x744 - x270 * x746 + 3.0 * x577
    x932 = x884 * x931
    x933 = x734 * x915 + x932
    x934 = x84 * (4.0 * x745 + x8 * x931)
    x935 = x18 * x908 + x934
    x936 = x84 * (x10 * x931 + 2.0 * x735)
    x937 = x18 * x911 + x936
    x938 = x108 * x758 - x270 * x760 + 2.0 * x594
    x939 = x884 * x938
    x940 = x744 * x915 + x939
    x941 = x18 * x916 + x940
    x942 = x84 * (3.0 * x759 + x8 * x938)
    x943 = x18 * x919 + x942
    x944 = x18 * x920 + x943
    x945 = x84 * (x10 * x938 + 3.0 * x745)
    x946 = x18 * x922 + x945
    x947 = x18 * x923 + x946
    x948 = x0 * x691 + x520
    x949 = x4 * x487
    x950 = x0 * x693 + x525
    x951 = 2.0 * x772
    x952 = x409 * x8 + x951
    x953 = x0 * x695 + x528
    x954 = x10 * x409 + x677
    x955 = x409 * x926 + x890
    x956 = x494 * x952 + x892
    x957 = x494 * x954 + x894
    x958 = x578 * x884
    x959 = x409 * x915 + x958
    x960 = x84 * (x578 * x8 + 2.0 * x781)
    x961 = x503 * x952 + x960
    x962 = x84 * (x10 * x578 + 2.0 * x690)
    x963 = x503 * x954 + x962
    x964 = x560 * x926 + x905
    x965 = x17 * x955 + x964
    x966 = x17 * x892 + x908
    x967 = x17 * x956 + x966
    x968 = x17 * x894 + x911
    x969 = x17 * x957 + x968
    x970 = x17 * x959 + x916
    x971 = x17 * x961 + x920
    x972 = x17 * x963 + x923
    x973 = x758 * x884
    x974 = x578 * x915 + x973
    x975 = x18 * x959 + x974
    x976 = x84 * (x758 * x8 + 2.0 * x797)
    x977 = x18 * x960 + x976
    x978 = x18 * x961 + x977
    x979 = x84 * (x10 * x758 + x918)
    x980 = x18 * x962 + x979
    x981 = x18 * x963 + x980
    x982 = x108 * x813 - x270 * x815 + x664
    x983 = x758 * x915 + x884 * x982
    x984 = x18 * x974 + x983
    x985 = x18 * x976 + x84 * (x8 * x982 + 2.0 * x814)
    x986 = x18 * x977 + x985
    x987 = x18 * x979 + x84 * (x10 * x982 + 4.0 * x759)
    x988 = x18 * x980 + x987
    x989 = x0 * x782 + x532
    x990 = x0 * x784 + x535
    x991 = x436 * x8 + x824
    x992 = x0 * x786 + x538
    x993 = x10 * x436 + x951
    x994 = x436 * x926 + x958
    x995 = x494 * x991 + x960
    x996 = x494 * x993 + x962
    x997 = x595 * x884
    x998 = x436 * x915 + x997
    x999 = x84 * (x595 * x8 + x836)
    x1000 = x503 * x991 + x999
    x1001 = x84 * (x10 * x595 + 3.0 * x781)
    x1002 = x1001 + x503 * x993
    x1003 = x578 * x926 + x914
    x1004 = x1003 + x17 * x994
    x1005 = x17 * x960 + x919
    x1006 = x1005 + x17 * x995
    x1007 = x17 * x962 + x922
    x1008 = x1007 + x17 * x996
    x1009 = x17 * x998 + x974
    x1010 = x1000 * x17 + x977
    x1011 = x1002 * x17 + x980
    x1012 = x595 * x915 + x813 * x884
    x1013 = x1012 + x18 * x998
    x1014 = x84 * (x8 * x813 + x855)
    x1015 = x1014 + x18 * x999
    x1016 = x1000 * x18 + x1015
    x1017 = x84 * (x10 * x813 + 4.0 * x797)
    x1018 = x1001 * x18 + x1017
    x1019 = x1002 * x18 + x1018
    x1020 = x108 * x871 - x270 * x873
    x1021 = x1012 * x18 + x1020 * x884 + x813 * x915
    x1022 = x1014 * x18 + x1015 * x18 + x84 * (x1020 * x8 + x872)
    x1023 = x1017 * x18 + x1018 * x18 + x84 * (x10 * x1020 + 5.0 * x814)
    x1024 = x0 * x837 + x643
    x1025 = x0 * x839 + x646
    x1026 = x462 * x99
    x1027 = x0 * x841 + x649
    x1028 = x10 * x462 + 3.0 * x824
    x1029 = x17 * x837 + x798
    x1030 = x462 * x926 + x997
    x1031 = x17 * x839 + x801
    x1032 = x1026 * x17 + x999
    x1033 = x17 * x841 + x804
    x1034 = x1001 + x1028 * x494
    x1035 = x462 * x915 + x665 * x884
    x1036 = x665 * x99
    x1037 = x1026 * x18 + x1036
    x1038 = x84 * (x10 * x665 + 4.0 * x836)
    x1039 = x1028 * x503 + x1038
    x1040 = x595 * x926 + x973
    x1041 = x1030 * x17 + x1040
    x1042 = x17 * x999 + x976
    x1043 = x1032 * x17 + x1042
    x1044 = x1001 * x17 + x979
    x1045 = x1034 * x17 + x1044
    x1046 = x1012 + x1035 * x17
    x1047 = x1015 + x1037 * x17
    x1048 = x1018 + x1039 * x17
    x1049 = x665 * x915 + x871 * x884
    x1050 = x1035 * x18 + x1049
    x1051 = x871 * x99
    x1052 = x1036 * x18 + x1051
    x1053 = x1037 * x18 + x1052
    x1054 = x84 * (x10 * x871 + 5.0 * x855)
    x1055 = x1038 * x18 + x1054
    x1056 = x1039 * x18 + x1055
    x1057 = x173 * x871 - x362 * x873 + 5.0 * x664

    # 300 item(s)
    result[0, 0, 0] = numpy.sum(
        x98
        * (
            x0 * x85
            + x0 * x88
            + x0 * (x0 * (x0 * x90 + x87) + x88)
            + x84 * (x4 * x95 + 6.0 * x96)
        )
    )
    result[0, 0, 1] = numpy.sum(
        x98 * (x0 * x100 + x0 * x102 + x0 * (x0 * (x101 + x103 * x99) + x102) + x95 * x99)
    )
    result[0, 0, 2] = numpy.sum(
        x98
        * (x0 * x105 + x0 * x107 + x0 * (x0 * (x103 * x104 + x106) + x107) + x104 * x95)
    )
    result[0, 1, 0] = numpy.sum(
        x161 * (x0 * x152 + x0 * (x0 * x155 + x152) + x160 + x17 * x85)
    )
    result[0, 1, 1] = numpy.sum(
        x161 * (x0 * x163 + x0 * (x0 * x166 + x163) + x100 * x17 + x167)
    )
    result[0, 1, 2] = numpy.sum(
        x161 * (x0 * x169 + x0 * (x0 * x171 + x169) + x105 * x17 + x172)
    )
    result[0, 2, 0] = numpy.sum(
        x161 * (x0 * x218 + x0 * (x0 * x221 + x218) + x18 * x85 + x227)
    )
    result[0, 2, 1] = numpy.sum(
        x161 * (x0 * x229 + x0 * (x0 * x232 + x229) + x100 * x18 + x233)
    )
    result[0, 2, 2] = numpy.sum(
        x161 * (x0 * x235 + x0 * (x0 * x237 + x235) + x105 * x18 + x238)
    )
    result[0, 3, 0] = numpy.sum(x161 * (x0 * x268 + x152 * x17 + x275))
    result[0, 3, 1] = numpy.sum(x161 * (x0 * x278 + x163 * x17 + x280))
    result[0, 3, 2] = numpy.sum(x161 * (x0 * x283 + x169 * x17 + x285))
    result[0, 4, 0] = numpy.sum(x319 * (x0 * x313 + x17 * x218 + x318))
    result[0, 4, 1] = numpy.sum(x319 * (x0 * x322 + x17 * x229 + x324))
    result[0, 4, 2] = numpy.sum(x319 * (x0 * x327 + x17 * x235 + x329))
    result[0, 5, 0] = numpy.sum(x161 * (x0 * x359 + x18 * x218 + x367))
    result[0, 5, 1] = numpy.sum(x161 * (x0 * x370 + x18 * x229 + x372))
    result[0, 5, 2] = numpy.sum(x161 * (x0 * x375 + x18 * x235 + x377))
    result[0, 6, 0] = numpy.sum(x98 * (x17 * x268 + x397))
    result[0, 6, 1] = numpy.sum(x98 * (x17 * x278 + x400))
    result[0, 6, 2] = numpy.sum(x98 * (x17 * x283 + x403))
    result[0, 7, 0] = numpy.sum(x161 * (x17 * x313 + x423))
    result[0, 7, 1] = numpy.sum(x161 * (x17 * x322 + x427))
    result[0, 7, 2] = numpy.sum(x161 * (x17 * x327 + x430))
    result[0, 8, 0] = numpy.sum(x161 * (x17 * x359 + x450))
    result[0, 8, 1] = numpy.sum(x161 * (x17 * x370 + x453))
    result[0, 8, 2] = numpy.sum(x161 * (x17 * x375 + x456))
    result[0, 9, 0] = numpy.sum(x98 * (x18 * x359 + x476))
    result[0, 9, 1] = numpy.sum(x98 * (x18 * x370 + x479))
    result[0, 9, 2] = numpy.sum(x98 * (x18 * x375 + x482))
    result[1, 0, 0] = numpy.sum(
        x161 * (x0 * x151 + x0 * x483 + x0 * (x0 * (x154 + x486 * x487) + x483) + x160)
    )
    result[1, 0, 1] = numpy.sum(
        x161 * (x0 * x162 + x0 * x488 + x0 * (x0 * (x164 + x487 * x489) + x488) + x167)
    )
    result[1, 0, 2] = numpy.sum(
        x161 * (x0 * x168 + x0 * x490 + x0 * (x0 * (x0 * x491 + x170) + x490) + x172)
    )
    result[1, 1, 0] = numpy.sum(x496 * (x0 * x267 + x0 * (x0 * x495 + x267) + x275))
    result[1, 1, 1] = numpy.sum(x496 * (x0 * x277 + x0 * (x0 * x498 + x277) + x280))
    result[1, 1, 2] = numpy.sum(x496 * (x0 * x282 + x0 * (x0 * x500 + x282) + x285))
    result[1, 2, 0] = numpy.sum(x496 * (x0 * x312 + x0 * (x0 * x504 + x312) + x318))
    result[1, 2, 1] = numpy.sum(x496 * (x0 * x321 + x0 * (x0 * x506 + x321) + x324))
    result[1, 2, 2] = numpy.sum(x496 * (x0 * x326 + x0 * (x0 * x508 + x326) + x329))
    result[1, 3, 0] = numpy.sum(x496 * (x0 * x512 + x397))
    result[1, 3, 1] = numpy.sum(x496 * (x0 * x515 + x400))
    result[1, 3, 2] = numpy.sum(x496 * (x0 * x518 + x403))
    result[1, 4, 0] = numpy.sum(x523 * (x0 * x522 + x423))
    result[1, 4, 1] = numpy.sum(x523 * (x0 * x527 + x427))
    result[1, 4, 2] = numpy.sum(x523 * (x0 * x530 + x430))
    result[1, 5, 0] = numpy.sum(x496 * (x0 * x534 + x450))
    result[1, 5, 1] = numpy.sum(x496 * (x0 * x537 + x453))
    result[1, 5, 2] = numpy.sum(x496 * (x0 * x540 + x456))
    result[1, 6, 0] = numpy.sum(x161 * (x17 * x512 + x551))
    result[1, 6, 1] = numpy.sum(x161 * (x17 * x515 + x553))
    result[1, 6, 2] = numpy.sum(x161 * (x17 * x518 + x555))
    result[1, 7, 0] = numpy.sum(x496 * (x17 * x522 + x567))
    result[1, 7, 1] = numpy.sum(x496 * (x17 * x527 + x570))
    result[1, 7, 2] = numpy.sum(x496 * (x17 * x530 + x573))
    result[1, 8, 0] = numpy.sum(x496 * (x17 * x534 + x584))
    result[1, 8, 1] = numpy.sum(x496 * (x17 * x537 + x587))
    result[1, 8, 2] = numpy.sum(x496 * (x17 * x540 + x590))
    result[1, 9, 0] = numpy.sum(x161 * (x18 * x534 + x602))
    result[1, 9, 1] = numpy.sum(x161 * (x18 * x537 + x605))
    result[1, 9, 2] = numpy.sum(x161 * (x18 * x540 + x608))
    result[2, 0, 0] = numpy.sum(
        x161 * (x0 * x217 + x0 * x609 + x0 * (x0 * (x220 + x487 * x612) + x609) + x227)
    )
    result[2, 0, 1] = numpy.sum(
        x161 * (x0 * x228 + x0 * x613 + x0 * (x0 * (x0 * x614 + x230) + x613) + x233)
    )
    result[2, 0, 2] = numpy.sum(
        x161 * (x0 * x234 + x0 * x615 + x0 * (x0 * (x236 + x487 * x616) + x615) + x238)
    )
    result[2, 1, 0] = numpy.sum(
        x496 * (x0 * x617 + x0 * (x0 * x618 + x617) + x17 * x217 + x317)
    )
    result[2, 1, 1] = numpy.sum(
        x496 * (x0 * x619 + x0 * (x0 * x620 + x619) + x17 * x228 + x323)
    )
    result[2, 1, 2] = numpy.sum(
        x496 * (x0 * x621 + x0 * (x0 * x622 + x621) + x17 * x234 + x328)
    )
    result[2, 2, 0] = numpy.sum(x496 * (x0 * x358 + x0 * (x0 * x625 + x358) + x367))
    result[2, 2, 1] = numpy.sum(x496 * (x0 * x369 + x0 * (x0 * x627 + x369) + x372))
    result[2, 2, 2] = numpy.sum(x496 * (x0 * x374 + x0 * (x0 * x629 + x374) + x377))
    result[2, 3, 0] = numpy.sum(x496 * (x0 * x631 + x17 * x617 + x632))
    result[2, 3, 1] = numpy.sum(x496 * (x0 * x634 + x17 * x619 + x635))
    result[2, 3, 2] = numpy.sum(x496 * (x0 * x637 + x17 * x621 + x638))
    result[2, 4, 0] = numpy.sum(x523 * (x0 * x639 + x17 * x358 + x449))
    result[2, 4, 1] = numpy.sum(x523 * (x0 * x640 + x17 * x369 + x452))
    result[2, 4, 2] = numpy.sum(x523 * (x0 * x641 + x17 * x374 + x455))
    result[2, 5, 0] = numpy.sum(x496 * (x0 * x645 + x476))
    result[2, 5, 1] = numpy.sum(x496 * (x0 * x648 + x479))
    result[2, 5, 2] = numpy.sum(x496 * (x0 * x651 + x482))
    result[2, 6, 0] = numpy.sum(x161 * (x17 * x631 + x653))
    result[2, 6, 1] = numpy.sum(x161 * (x17 * x634 + x655))
    result[2, 6, 2] = numpy.sum(x161 * (x17 * x637 + x657))
    result[2, 7, 0] = numpy.sum(x496 * (x17 * x639 + x658))
    result[2, 7, 1] = numpy.sum(x496 * (x17 * x640 + x659))
    result[2, 7, 2] = numpy.sum(x496 * (x17 * x641 + x660))
    result[2, 8, 0] = numpy.sum(x496 * (x17 * x645 + x602))
    result[2, 8, 1] = numpy.sum(x496 * (x17 * x648 + x605))
    result[2, 8, 2] = numpy.sum(x496 * (x17 * x651 + x608))
    result[2, 9, 0] = numpy.sum(x161 * (x18 * x645 + x671))
    result[2, 9, 1] = numpy.sum(x161 * (x18 * x648 + x673))
    result[2, 9, 2] = numpy.sum(x161 * (x18 * x651 + x675))
    result[3, 0, 0] = numpy.sum(
        x161 * (x0 * x266 + x0 * x676 + x0 * (x0 * (x487 * x678 + x493) + x676) + x274)
    )
    result[3, 0, 1] = numpy.sum(
        x161 * (x0 * x276 + x0 * x679 + x0 * (x0 * (x487 * x680 + x497) + x679) + x279)
    )
    result[3, 0, 2] = numpy.sum(
        x161 * (x0 * x281 + x0 * x681 + x0 * (x0 * (x0 * x682 + x499) + x681) + x284)
    )
    result[3, 1, 0] = numpy.sum(x496 * (x0 * x511 + x0 * (x0 * x685 + x511) + x396))
    result[3, 1, 1] = numpy.sum(x496 * (x0 * x514 + x0 * (x0 * x687 + x514) + x399))
    result[3, 1, 2] = numpy.sum(x496 * (x0 * x517 + x0 * (x0 * x689 + x517) + x402))
    result[3, 2, 0] = numpy.sum(x496 * (x0 * x521 + x0 * (x0 * x692 + x521) + x422))
    result[3, 2, 1] = numpy.sum(x496 * (x0 * x526 + x0 * (x0 * x694 + x526) + x426))
    result[3, 2, 2] = numpy.sum(x496 * (x0 * x529 + x0 * (x0 * x696 + x529) + x429))
    result[3, 3, 0] = numpy.sum(x496 * (x0 * x700 + x551))
    result[3, 3, 1] = numpy.sum(x496 * (x0 * x703 + x553))
    result[3, 3, 2] = numpy.sum(x496 * (x0 * x706 + x555))
    result[3, 4, 0] = numpy.sum(x523 * (x0 * x710 + x567))
    result[3, 4, 1] = numpy.sum(x523 * (x0 * x713 + x570))
    result[3, 4, 2] = numpy.sum(x523 * (x0 * x716 + x573))
    result[3, 5, 0] = numpy.sum(x496 * (x0 * x720 + x584))
    result[3, 5, 1] = numpy.sum(x496 * (x0 * x723 + x587))
    result[3, 5, 2] = numpy.sum(x496 * (x0 * x726 + x590))
    result[3, 6, 0] = numpy.sum(x161 * (x17 * x700 + x731))
    result[3, 6, 1] = numpy.sum(x161 * (x17 * x703 + x732))
    result[3, 6, 2] = numpy.sum(x161 * (x17 * x706 + x733))
    result[3, 7, 0] = numpy.sum(x496 * (x17 * x710 + x739))
    result[3, 7, 1] = numpy.sum(x496 * (x17 * x713 + x741))
    result[3, 7, 2] = numpy.sum(x496 * (x17 * x716 + x743))
    result[3, 8, 0] = numpy.sum(x496 * (x17 * x720 + x750))
    result[3, 8, 1] = numpy.sum(x496 * (x17 * x723 + x754))
    result[3, 8, 2] = numpy.sum(x496 * (x17 * x726 + x757))
    result[3, 9, 0] = numpy.sum(x161 * (x18 * x720 + x764))
    result[3, 9, 1] = numpy.sum(x161 * (x18 * x723 + x767))
    result[3, 9, 2] = numpy.sum(x161 * (x18 * x726 + x770))
    result[4, 0, 0] = numpy.sum(
        x319 * (x0 * x311 + x0 * x771 + x0 * (x0 * (x487 * x773 + x502) + x771) + x317)
    )
    result[4, 0, 1] = numpy.sum(
        x319 * (x0 * x320 + x0 * x774 + x0 * (x0 * (x487 * x775 + x505) + x774) + x323)
    )
    result[4, 0, 2] = numpy.sum(
        x319 * (x0 * x325 + x0 * x776 + x0 * (x0 * (x487 * x777 + x507) + x776) + x328)
    )
    result[4, 1, 0] = numpy.sum(x523 * (x0 * x630 + x0 * (x0 * x778 + x630) + x632))
    result[4, 1, 1] = numpy.sum(x523 * (x0 * x633 + x0 * (x0 * x779 + x633) + x635))
    result[4, 1, 2] = numpy.sum(x523 * (x0 * x636 + x0 * (x0 * x780 + x636) + x638))
    result[4, 2, 0] = numpy.sum(x523 * (x0 * x533 + x0 * (x0 * x783 + x533) + x449))
    result[4, 2, 1] = numpy.sum(x523 * (x0 * x536 + x0 * (x0 * x785 + x536) + x452))
    result[4, 2, 2] = numpy.sum(x523 * (x0 * x539 + x0 * (x0 * x787 + x539) + x455))
    result[4, 3, 0] = numpy.sum(x523 * (x0 * x789 + x653))
    result[4, 3, 1] = numpy.sum(x523 * (x0 * x791 + x655))
    result[4, 3, 2] = numpy.sum(x523 * (x0 * x793 + x657))
    result[4, 4, 0] = numpy.sum(x97 * (x0 * x794 + x658))
    result[4, 4, 1] = numpy.sum(x97 * (x0 * x795 + x659))
    result[4, 4, 2] = numpy.sum(x97 * (x0 * x796 + x660))
    result[4, 5, 0] = numpy.sum(x523 * (x0 * x800 + x602))
    result[4, 5, 1] = numpy.sum(x523 * (x0 * x803 + x605))
    result[4, 5, 2] = numpy.sum(x523 * (x0 * x806 + x608))
    result[4, 6, 0] = numpy.sum(x319 * (x17 * x789 + x807))
    result[4, 6, 1] = numpy.sum(x319 * (x17 * x791 + x808))
    result[4, 6, 2] = numpy.sum(x319 * (x17 * x793 + x809))
    result[4, 7, 0] = numpy.sum(x523 * (x17 * x794 + x810))
    result[4, 7, 1] = numpy.sum(x523 * (x17 * x795 + x811))
    result[4, 7, 2] = numpy.sum(x523 * (x17 * x796 + x812))
    result[4, 8, 0] = numpy.sum(x523 * (x17 * x800 + x764))
    result[4, 8, 1] = numpy.sum(x523 * (x17 * x803 + x767))
    result[4, 8, 2] = numpy.sum(x523 * (x17 * x806 + x770))
    result[4, 9, 0] = numpy.sum(x319 * (x18 * x800 + x818))
    result[4, 9, 1] = numpy.sum(x319 * (x18 * x803 + x820))
    result[4, 9, 2] = numpy.sum(x319 * (x18 * x806 + x822))
    result[5, 0, 0] = numpy.sum(
        x161 * (x0 * x357 + x0 * x823 + x0 * (x0 * (x487 * x825 + x624) + x823) + x366)
    )
    result[5, 0, 1] = numpy.sum(
        x161 * (x0 * x368 + x0 * x826 + x0 * (x0 * (x0 * x827 + x626) + x826) + x371)
    )
    result[5, 0, 2] = numpy.sum(
        x161 * (x0 * x373 + x0 * x828 + x0 * (x0 * (x487 * x829 + x628) + x828) + x376)
    )
    result[5, 1, 0] = numpy.sum(
        x496 * (x0 * x830 + x0 * (x0 * x831 + x830) + x17 * x357 + x448)
    )
    result[5, 1, 1] = numpy.sum(
        x496 * (x0 * x832 + x0 * (x0 * x833 + x832) + x17 * x368 + x451)
    )
    result[5, 1, 2] = numpy.sum(
        x496 * (x0 * x834 + x0 * (x0 * x835 + x834) + x17 * x373 + x454)
    )
    result[5, 2, 0] = numpy.sum(x496 * (x0 * x644 + x0 * (x0 * x838 + x644) + x475))
    result[5, 2, 1] = numpy.sum(x496 * (x0 * x647 + x0 * (x0 * x840 + x647) + x478))
    result[5, 2, 2] = numpy.sum(x496 * (x0 * x650 + x0 * (x0 * x842 + x650) + x481))
    result[5, 3, 0] = numpy.sum(x496 * (x0 * x844 + x17 * x830 + x845))
    result[5, 3, 1] = numpy.sum(x496 * (x0 * x847 + x17 * x832 + x848))
    result[5, 3, 2] = numpy.sum(x496 * (x0 * x850 + x17 * x834 + x851))
    result[5, 4, 0] = numpy.sum(x523 * (x0 * x852 + x17 * x644 + x601))
    result[5, 4, 1] = numpy.sum(x523 * (x0 * x853 + x17 * x647 + x604))
    result[5, 4, 2] = numpy.sum(x523 * (x0 * x854 + x17 * x650 + x607))
    result[5, 5, 0] = numpy.sum(x496 * (x0 * x858 + x671))
    result[5, 5, 1] = numpy.sum(x496 * (x0 * x861 + x673))
    result[5, 5, 2] = numpy.sum(x496 * (x0 * x864 + x675))
    result[5, 6, 0] = numpy.sum(x161 * (x17 * x844 + x865))
    result[5, 6, 1] = numpy.sum(x161 * (x17 * x847 + x866))
    result[5, 6, 2] = numpy.sum(x161 * (x17 * x850 + x867))
    result[5, 7, 0] = numpy.sum(x496 * (x17 * x852 + x868))
    result[5, 7, 1] = numpy.sum(x496 * (x17 * x853 + x869))
    result[5, 7, 2] = numpy.sum(x496 * (x17 * x854 + x870))
    result[5, 8, 0] = numpy.sum(x496 * (x17 * x858 + x818))
    result[5, 8, 1] = numpy.sum(x496 * (x17 * x861 + x820))
    result[5, 8, 2] = numpy.sum(x496 * (x17 * x864 + x822))
    result[5, 9, 0] = numpy.sum(x161 * (x18 * x858 + x875))
    result[5, 9, 1] = numpy.sum(x161 * (x18 * x861 + x876))
    result[5, 9, 2] = numpy.sum(x161 * (x18 * x864 + x877))
    result[6, 0, 0] = numpy.sum(
        x98 * (x0 * x510 + x0 * x878 + x0 * (x0 * (x487 * x879 + x684) + x878) + x395)
    )
    result[6, 0, 1] = numpy.sum(
        x98 * (x0 * x513 + x0 * x880 + x0 * (x0 * (x487 * x881 + x686) + x880) + x398)
    )
    result[6, 0, 2] = numpy.sum(
        x98 * (x0 * x516 + x0 * x882 + x0 * (x0 * (x0 * x883 + x688) + x882) + x401)
    )
    result[6, 1, 0] = numpy.sum(x161 * (x0 * x699 + x0 * (x0 * x885 + x699) + x550))
    result[6, 1, 1] = numpy.sum(x161 * (x0 * x702 + x0 * (x0 * x887 + x702) + x552))
    result[6, 1, 2] = numpy.sum(x161 * (x0 * x705 + x0 * (x0 * x889 + x705) + x554))
    result[6, 2, 0] = numpy.sum(x161 * (x0 * x709 + x0 * (x0 * x891 + x709) + x566))
    result[6, 2, 1] = numpy.sum(x161 * (x0 * x712 + x0 * (x0 * x893 + x712) + x569))
    result[6, 2, 2] = numpy.sum(x161 * (x0 * x715 + x0 * (x0 * x895 + x715) + x572))
    result[6, 3, 0] = numpy.sum(x161 * (x0 * x898 + x731))
    result[6, 3, 1] = numpy.sum(x161 * (x0 * x901 + x732))
    result[6, 3, 2] = numpy.sum(x161 * (x0 * x904 + x733))
    result[6, 4, 0] = numpy.sum(x319 * (x0 * x907 + x739))
    result[6, 4, 1] = numpy.sum(x319 * (x0 * x910 + x741))
    result[6, 4, 2] = numpy.sum(x319 * (x0 * x913 + x743))
    result[6, 5, 0] = numpy.sum(x161 * (x0 * x917 + x750))
    result[6, 5, 1] = numpy.sum(x161 * (x0 * x921 + x754))
    result[6, 5, 2] = numpy.sum(x161 * (x0 * x924 + x757))
    result[6, 6, 0] = numpy.sum(
        x98 * (x17 * x897 + x17 * x898 + x727 * x926 + x884 * x925)
    )
    result[6, 6, 1] = numpy.sum(
        x98 * (x17 * x899 + x17 * x900 + x17 * x901 + x84 * (6.0 * x728 + x8 * x925))
    )
    result[6, 6, 2] = numpy.sum(
        x98 * (x104 * x925 + x17 * x902 + x17 * x903 + x17 * x904)
    )
    result[6, 7, 0] = numpy.sum(x161 * (x17 * x906 + x17 * x907 + x727 * x915 + x928))
    result[6, 7, 1] = numpy.sum(x161 * (x17 * x909 + x17 * x910 + x18 * x899 + x929))
    result[6, 7, 2] = numpy.sum(x161 * (x17 * x912 + x17 * x913 + x18 * x902 + x930))
    result[6, 8, 0] = numpy.sum(x161 * (x17 * x917 + x18 * x906 + x933))
    result[6, 8, 1] = numpy.sum(x161 * (x17 * x921 + x18 * x909 + x935))
    result[6, 8, 2] = numpy.sum(x161 * (x17 * x924 + x18 * x912 + x937))
    result[6, 9, 0] = numpy.sum(x98 * (x18 * x917 + x941))
    result[6, 9, 1] = numpy.sum(x98 * (x18 * x921 + x944))
    result[6, 9, 2] = numpy.sum(x98 * (x18 * x924 + x947))
    result[7, 0, 0] = numpy.sum(
        x161 * (x0 * x520 + x0 * x948 + x0 * (x0 * (x409 * x949 + x691) + x948) + x421)
    )
    result[7, 0, 1] = numpy.sum(
        x161 * (x0 * x525 + x0 * x950 + x0 * (x0 * (x487 * x952 + x693) + x950) + x425)
    )
    result[7, 0, 2] = numpy.sum(
        x161 * (x0 * x528 + x0 * x953 + x0 * (x0 * (x487 * x954 + x695) + x953) + x428)
    )
    result[7, 1, 0] = numpy.sum(x496 * (x0 * x788 + x0 * (x0 * x955 + x788) + x652))
    result[7, 1, 1] = numpy.sum(x496 * (x0 * x790 + x0 * (x0 * x956 + x790) + x654))
    result[7, 1, 2] = numpy.sum(x496 * (x0 * x792 + x0 * (x0 * x957 + x792) + x656))
    result[7, 2, 0] = numpy.sum(x496 * (x0 * x719 + x0 * (x0 * x959 + x719) + x583))
    result[7, 2, 1] = numpy.sum(x496 * (x0 * x722 + x0 * (x0 * x961 + x722) + x586))
    result[7, 2, 2] = numpy.sum(x496 * (x0 * x725 + x0 * (x0 * x963 + x725) + x589))
    result[7, 3, 0] = numpy.sum(x496 * (x0 * x965 + x807))
    result[7, 3, 1] = numpy.sum(x496 * (x0 * x967 + x808))
    result[7, 3, 2] = numpy.sum(x496 * (x0 * x969 + x809))
    result[7, 4, 0] = numpy.sum(x523 * (x0 * x970 + x810))
    result[7, 4, 1] = numpy.sum(x523 * (x0 * x971 + x811))
    result[7, 4, 2] = numpy.sum(x523 * (x0 * x972 + x812))
    result[7, 5, 0] = numpy.sum(x496 * (x0 * x975 + x764))
    result[7, 5, 1] = numpy.sum(x496 * (x0 * x978 + x767))
    result[7, 5, 2] = numpy.sum(x496 * (x0 * x981 + x770))
    result[7, 6, 0] = numpy.sum(x161 * (x17 * x964 + x17 * x965 + x734 * x926 + x928))
    result[7, 6, 1] = numpy.sum(x161 * (x17 * x908 + x17 * x966 + x17 * x967 + x929))
    result[7, 6, 2] = numpy.sum(x161 * (x17 * x911 + x17 * x968 + x17 * x969 + x930))
    result[7, 7, 0] = numpy.sum(x496 * (x17 * x916 + x17 * x970 + x933))
    result[7, 7, 1] = numpy.sum(x496 * (x17 * x920 + x17 * x971 + x935))
    result[7, 7, 2] = numpy.sum(x496 * (x17 * x923 + x17 * x972 + x937))
    result[7, 8, 0] = numpy.sum(x496 * (x17 * x975 + x941))
    result[7, 8, 1] = numpy.sum(x496 * (x17 * x978 + x944))
    result[7, 8, 2] = numpy.sum(x496 * (x17 * x981 + x947))
    result[7, 9, 0] = numpy.sum(x161 * (x18 * x975 + x984))
    result[7, 9, 1] = numpy.sum(x161 * (x18 * x978 + x986))
    result[7, 9, 2] = numpy.sum(x161 * (x18 * x981 + x988))
    result[8, 0, 0] = numpy.sum(
        x161 * (x0 * x532 + x0 * x989 + x0 * (x0 * (x436 * x949 + x782) + x989) + x448)
    )
    result[8, 0, 1] = numpy.sum(
        x161 * (x0 * x535 + x0 * x990 + x0 * (x0 * (x487 * x991 + x784) + x990) + x451)
    )
    result[8, 0, 2] = numpy.sum(
        x161 * (x0 * x538 + x0 * x992 + x0 * (x0 * (x487 * x993 + x786) + x992) + x454)
    )
    result[8, 1, 0] = numpy.sum(x496 * (x0 * x843 + x0 * (x0 * x994 + x843) + x845))
    result[8, 1, 1] = numpy.sum(x496 * (x0 * x846 + x0 * (x0 * x995 + x846) + x848))
    result[8, 1, 2] = numpy.sum(x496 * (x0 * x849 + x0 * (x0 * x996 + x849) + x851))
    result[8, 2, 0] = numpy.sum(x496 * (x0 * x799 + x0 * (x0 * x998 + x799) + x601))
    result[8, 2, 1] = numpy.sum(x496 * (x0 * x802 + x0 * (x0 * x1000 + x802) + x604))
    result[8, 2, 2] = numpy.sum(x496 * (x0 * x805 + x0 * (x0 * x1002 + x805) + x607))
    result[8, 3, 0] = numpy.sum(x496 * (x0 * x1004 + x865))
    result[8, 3, 1] = numpy.sum(x496 * (x0 * x1006 + x866))
    result[8, 3, 2] = numpy.sum(x496 * (x0 * x1008 + x867))
    result[8, 4, 0] = numpy.sum(x523 * (x0 * x1009 + x868))
    result[8, 4, 1] = numpy.sum(x523 * (x0 * x1010 + x869))
    result[8, 4, 2] = numpy.sum(x523 * (x0 * x1011 + x870))
    result[8, 5, 0] = numpy.sum(x496 * (x0 * x1013 + x818))
    result[8, 5, 1] = numpy.sum(x496 * (x0 * x1016 + x820))
    result[8, 5, 2] = numpy.sum(x496 * (x0 * x1019 + x822))
    result[8, 6, 0] = numpy.sum(x161 * (x1003 * x17 + x1004 * x17 + x744 * x926 + x932))
    result[8, 6, 1] = numpy.sum(x161 * (x1005 * x17 + x1006 * x17 + x17 * x919 + x934))
    result[8, 6, 2] = numpy.sum(x161 * (x1007 * x17 + x1008 * x17 + x17 * x922 + x936))
    result[8, 7, 0] = numpy.sum(x496 * (x1009 * x17 + x17 * x974 + x940))
    result[8, 7, 1] = numpy.sum(x496 * (x1010 * x17 + x17 * x977 + x943))
    result[8, 7, 2] = numpy.sum(x496 * (x1011 * x17 + x17 * x980 + x946))
    result[8, 8, 0] = numpy.sum(x496 * (x1013 * x17 + x984))
    result[8, 8, 1] = numpy.sum(x496 * (x1016 * x17 + x986))
    result[8, 8, 2] = numpy.sum(x496 * (x1019 * x17 + x988))
    result[8, 9, 0] = numpy.sum(x161 * (x1013 * x18 + x1021))
    result[8, 9, 1] = numpy.sum(x161 * (x1016 * x18 + x1022))
    result[8, 9, 2] = numpy.sum(x161 * (x1019 * x18 + x1023))
    result[9, 0, 0] = numpy.sum(
        x98 * (x0 * x1024 + x0 * x643 + x0 * (x0 * (x462 * x949 + x837) + x1024) + x474)
    )
    result[9, 0, 1] = numpy.sum(
        x98 * (x0 * x1025 + x0 * x646 + x0 * (x0 * (x0 * x1026 + x839) + x1025) + x477)
    )
    result[9, 0, 2] = numpy.sum(
        x98 * (x0 * x1027 + x0 * x649 + x0 * (x0 * (x1028 * x487 + x841) + x1027) + x480)
    )
    result[9, 1, 0] = numpy.sum(
        x161 * (x0 * x1029 + x0 * (x0 * x1030 + x1029) + x17 * x643 + x600)
    )
    result[9, 1, 1] = numpy.sum(
        x161 * (x0 * x1031 + x0 * (x0 * x1032 + x1031) + x17 * x646 + x603)
    )
    result[9, 1, 2] = numpy.sum(
        x161 * (x0 * x1033 + x0 * (x0 * x1034 + x1033) + x17 * x649 + x606)
    )
    result[9, 2, 0] = numpy.sum(x161 * (x0 * x857 + x0 * (x0 * x1035 + x857) + x670))
    result[9, 2, 1] = numpy.sum(x161 * (x0 * x860 + x0 * (x0 * x1037 + x860) + x672))
    result[9, 2, 2] = numpy.sum(x161 * (x0 * x863 + x0 * (x0 * x1039 + x863) + x674))
    result[9, 3, 0] = numpy.sum(x161 * (x0 * x1041 + x1029 * x17 + x17 * x798 + x762))
    result[9, 3, 1] = numpy.sum(x161 * (x0 * x1043 + x1031 * x17 + x17 * x801 + x765))
    result[9, 3, 2] = numpy.sum(x161 * (x0 * x1045 + x1033 * x17 + x17 * x804 + x768))
    result[9, 4, 0] = numpy.sum(x319 * (x0 * x1046 + x17 * x857 + x817))
    result[9, 4, 1] = numpy.sum(x319 * (x0 * x1047 + x17 * x860 + x819))
    result[9, 4, 2] = numpy.sum(x319 * (x0 * x1048 + x17 * x863 + x821))
    result[9, 5, 0] = numpy.sum(x161 * (x0 * x1050 + x875))
    result[9, 5, 1] = numpy.sum(x161 * (x0 * x1053 + x876))
    result[9, 5, 2] = numpy.sum(x161 * (x0 * x1056 + x877))
    result[9, 6, 0] = numpy.sum(x98 * (x1040 * x17 + x1041 * x17 + x758 * x926 + x939))
    result[9, 6, 1] = numpy.sum(x98 * (x1042 * x17 + x1043 * x17 + x17 * x976 + x942))
    result[9, 6, 2] = numpy.sum(x98 * (x1044 * x17 + x1045 * x17 + x17 * x979 + x945))
    result[9, 7, 0] = numpy.sum(x161 * (x1012 * x17 + x1046 * x17 + x983))
    result[9, 7, 1] = numpy.sum(x161 * (x1015 * x17 + x1047 * x17 + x985))
    result[9, 7, 2] = numpy.sum(x161 * (x1018 * x17 + x1048 * x17 + x987))
    result[9, 8, 0] = numpy.sum(x161 * (x1021 + x1050 * x17))
    result[9, 8, 1] = numpy.sum(x161 * (x1022 + x1053 * x17))
    result[9, 8, 2] = numpy.sum(x161 * (x1023 + x1056 * x17))
    result[9, 9, 0] = numpy.sum(
        x98 * (x1049 * x18 + x1050 * x18 + x1057 * x884 + x871 * x915)
    )
    result[9, 9, 1] = numpy.sum(
        x98 * (x1051 * x18 + x1052 * x18 + x1053 * x18 + x1057 * x99)
    )
    result[9, 9, 2] = numpy.sum(
        x98 * (x1054 * x18 + x1055 * x18 + x1056 * x18 + x84 * (x10 * x1057 + 6.0 * x872))
    )
    return result


def int3c2e3d_sph_332(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ff|d) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10, 6), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(3, x17)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = 2.0 * x14 ** (-1.5) * x19 * x2 * x22
    x24 = x18 * x23
    x25 = cx ** (-1.0)
    x26 = x14 ** (-0.5)
    x27 = boys(2, x17)
    x28 = 2.0 * x19 * x2 * x22 * x25 * x26 * x27 - x24
    x29 = x28 * x6
    x30 = -2.0 * x19 * x2 * x22 * x25 * x26 * x27 * x5 + x24 * x4
    x31 = -x30
    x32 = boys(4, x17)
    x33 = x23 * x32
    x34 = -2.0 * x18 * x19 * x2 * x22 * x25 * x26 * x5 + x33 * x4
    x35 = -x34
    x36 = x16 * x35
    x37 = x36 * x4
    x38 = x29 + x31 * x5 - x37
    x39 = -x30 - x36
    x40 = 2.0 * x6
    x41 = 2.0 * x18 * x19 * x2 * x22 * x25 * x26 - x33
    x42 = x41 * x6
    x43 = boys(5, x17)
    x44 = x23 * x43
    x45 = -2.0 * x19 * x2 * x22 * x25 * x26 * x32 * x5 + x4 * x44
    x46 = -x45
    x47 = x16 * x46
    x48 = x4 * x47
    x49 = x35 * x5 + x42 - x48
    x50 = x16 * x49
    x51 = x4 * x50
    x52 = x38 * x5 + x39 * x40 - x51
    x53 = -x28 * x6
    x54 = x31 * x5 - x37 - x50 - x53
    x55 = 3.0 * x6
    x56 = -x34 - x47
    x57 = 2.0 * x19 * x2 * x22 * x25 * x26 * x32 - x44
    x58 = x57 * x6
    x59 = boys(6, x17)
    x60 = x23 * x59
    x61 = -2.0 * x19 * x2 * x22 * x25 * x26 * x43 * x5 + x4 * x60
    x62 = -x61
    x63 = x16 * x62
    x64 = x4 * x63
    x65 = x46 * x5 + x58 - x64
    x66 = x16 * x65
    x67 = x4 * x66
    x68 = x40 * x56 + x49 * x5 - x67
    x69 = x16 * x68
    x70 = x4 * x69
    x71 = x5 * x52 + x54 * x55 - x70
    x72 = 4.0 * x6
    x73 = -x41 * x6
    x74 = x6 * (2.0 * x19 * x2 * x22 * x25 * x26 * x43 - x60)
    x75 = boys(7, x17)
    x76 = x23 * x75
    x77 = 2.0 * x19 * x2 * x22 * x25 * x26 * x5 * x59 - x4 * x76
    x78 = x16 * x77
    x79 = -x4 * x78 + x5 * x62 + x74
    x80 = x16 * x79
    x81 = -x4 * x80 - x40 * (x45 + x63) + x5 * x65
    x82 = x16 * x81
    x83 = -x4 * x82 + x5 * x68 - x55 * (-x35 * x5 + x48 + x66 + x73)
    x84 = x16 * x83
    x85 = -x4 * x84 + x5 * x71 + x72 * (x38 * x5 + 2.0 * x39 * x6 - x51 - x69)
    x86 = x4 * x85
    x87 = x6 * x71
    x88 = 5.0 * x87
    x89 = x86 + x88
    x90 = x1 * x15
    x91 = x4 * x90
    x92 = x4 * x71
    x93 = x52 * x6
    x94 = 4.0 * x93
    x95 = x92 + x94
    x96 = 5.0 * x6
    x97 = x90 * x96
    x98 = x90 * (x89 * x91 + x95 * x97)
    x99 = x4 * x52
    x100 = x38 * x6
    x101 = 3.0 * x100
    x102 = x101 + x99
    x103 = x72 * x90
    x104 = x90 * (x102 * x103 + x91 * x95)
    x105 = x0 * x104 + x98
    x106 = x31 * x6
    x107 = x55 * x90
    x108 = x102 * x91 + x107 * (2.0 * x106 + x38 * x4)
    x109 = x0 * x90
    x110 = -x57 * x6
    x111 = x6 * (2.0 * x19 * x2 * x22 * x25 * x26 * x59 - x76)
    x112 = x23 * boys(8, x17)
    x113 = x16 * x4
    x114 = (
        -x113
        * (
            -x113
            * (
                x113
                * (
                    x113
                    * (
                        x111
                        + x113 * (x112 * x4 - 2.0 * x19 * x2 * x22 * x25 * x26 * x5 * x75)
                        + x5 * x77
                    )
                    + x40 * (x61 + x78)
                    - x5 * x79
                )
                + x5 * x81
                - x55 * (x110 - x46 * x5 + x64 + x80)
            )
            + x5 * x83
            + x72 * (x49 * x5 + 2.0 * x56 * x6 - x67 - x82)
        )
        + x5 * x85
        + x96 * (x5 * x52 + 3.0 * x54 * x6 - x70 - x84)
    )
    x115 = x114 * x4
    x116 = x6 * x85
    x117 = 6.0 * x116
    x118 = x6 * x90
    x119 = 1.732050807568877
    x120 = da * db * dc
    x121 = 0.02222222222222222 * x120
    x122 = x119 * x121
    x123 = x9 * x90
    x124 = x123 * x90 * (x86 + x88)
    x125 = x123 * x90 * (x92 + x94)
    x126 = x0 * x125 + x124
    x127 = x123 * (x101 + x99)
    x128 = 0.06666666666666667 * x120
    x129 = x12 * x90
    x130 = x129 * x90 * (x86 + x88)
    x131 = x129 * x90 * (x92 + x94)
    x132 = x0 * x131 + x130
    x133 = x129 * (x101 + x99)
    x134 = x1**2 / x14**2
    x135 = x10 * x134
    x136 = x135 * x85
    x137 = x135 * x71
    x138 = x0 * x137 + x136
    x139 = x0 * x52
    x140 = x134 * x9
    x141 = x12 * x140
    x142 = x141 * x85
    x143 = x141 * x71
    x144 = x0 * x143 + x142
    x145 = x13 * x134
    x146 = x145 * x85
    x147 = x145 * x71
    x148 = x0 * x147 + x146
    x149 = -x8 - A[1]
    x150 = -2.0 * x149 * x18 * x19 * x2 * x22 * x25 * x26 + x33 * x9
    x151 = -x150
    x152 = x151 * x16
    x153 = -2.0 * x149 * x19 * x2 * x22 * x25 * x26 * x27 + x24 * x9
    x154 = -x152 - x153
    x155 = x154 * x6
    x156 = -x153
    x157 = x152 * x4 - x156 * x5
    x158 = -x157
    x159 = -2.0 * x149 * x19 * x2 * x22 * x25 * x26 * x32 + x44 * x9
    x160 = -x159
    x161 = x16 * x160
    x162 = -x151 * x5 + x161 * x4
    x163 = -x162
    x164 = x16 * x163
    x165 = x164 * x4
    x166 = x155 + x158 * x5 - x165
    x167 = -x157 - x164
    x168 = -x150 - x161
    x169 = x168 * x6
    x170 = -2.0 * x149 * x19 * x2 * x22 * x25 * x26 * x43 + x60 * x9
    x171 = -x170
    x172 = x16 * x171
    x173 = -x160 * x5 + x172 * x4
    x174 = -x173
    x175 = x16 * x174
    x176 = x175 * x4
    x177 = x163 * x5 + x169 - x176
    x178 = x16 * x177
    x179 = x178 * x4
    x180 = x166 * x5 + x167 * x40 - x179
    x181 = -x6 * (x159 + x172)
    x182 = 2.0 * x149 * x19 * x2 * x22 * x25 * x26 * x59 - x76 * x9
    x183 = x16 * x182
    x184 = x171 * x5 - x183 * x4
    x185 = x16 * x184
    x186 = x174 * x5 + x181 - x185 * x4
    x187 = x16 * x186
    x188 = x177 * x5 - x187 * x4 - x40 * (x162 + x175)
    x189 = x16 * x188
    x190 = x180 * x5 - x189 * x4 + x55 * (x154 * x6 + x158 * x5 - x165 - x178)
    x191 = x190 * x4
    x192 = x180 * x6
    x193 = 4.0 * x192
    x194 = x191 + x193
    x195 = x180 * x4
    x196 = x166 * x6
    x197 = 3.0 * x196
    x198 = x195 + x197
    x199 = x90 * (x103 * x198 + x194 * x91)
    x200 = x104 * x20 + x199
    x201 = x166 * x4
    x202 = x158 * x6
    x203 = 2.0 * x202
    x204 = x201 + x203
    x205 = x90 * (x107 * x204 + x198 * x91)
    x206 = x20 * x90
    x207 = x108 * x206 + x205
    x208 = -x6 * (x170 + x183)
    x209 = -x112 * x9 + 2.0 * x149 * x19 * x2 * x22 * x25 * x26 * x75
    x210 = (
        -x113
        * (
            x113
            * (
                x113 * (x113 * (x113 * x209 - x182 * x5) + x184 * x5 + x208)
                - x186 * x5
                + x40 * (x173 + x185)
            )
            + x188 * x5
            + x55 * (x163 * x5 + x168 * x6 - x176 - x187)
        )
        + x190 * x5
        + x72 * (x166 * x5 + 2.0 * x167 * x6 - x179 - x189)
    )
    x211 = x210 * x4
    x212 = x190 * x6
    x213 = 5.0 * x212
    x214 = x90 * (x194 * x97 + x91 * (x211 + x213))
    x215 = 3.872983346207417
    x216 = x121 * x215
    x217 = x190 * x9
    x218 = x217 + x87
    x219 = x180 * x9
    x220 = x219 + x93
    x221 = x90 * (x103 * x220 + x218 * x91)
    x222 = x125 * x20 + x221
    x223 = x166 * x9
    x224 = x100 + x223
    x225 = x90 * (x107 * x224 + x220 * x91)
    x226 = x127 * x206 + x225
    x227 = x210 * x9
    x228 = x116 + x227
    x229 = x90 * (x218 * x97 + x228 * x91)
    x230 = 2.23606797749979 * x128
    x231 = x129 * x90 * (x191 + x193)
    x232 = x131 * x20 + x231
    x233 = x129 * x90 * (x195 + x197)
    x234 = x133 * x206 + x233
    x235 = x129 * x90 * (x211 + x213)
    x236 = x123 * x90 * (x218 + x87)
    x237 = x137 * x20 + x236
    x238 = x123 * x90 * (x220 + x93)
    x239 = x20 * x52
    x240 = x135 * x239 + x238
    x241 = x123 * x90 * (x116 + x228)
    x242 = x129 * x87
    x243 = x90 * (x129 * x217 + x242)
    x244 = x143 * x20 + x243
    x245 = x129 * x93
    x246 = x90 * (x129 * x219 + x245)
    x247 = x141 * x239 + x246
    x248 = x116 * x129
    x249 = x90 * (x129 * x227 + x248)
    x250 = x145 * x190
    x251 = x147 * x20 + x250
    x252 = x145 * x180
    x253 = x145 * x239 + x252
    x254 = x145 * x210
    x255 = -x11 - A[2]
    x256 = x12 * x33 - 2.0 * x18 * x19 * x2 * x22 * x25 * x255 * x26
    x257 = -x256
    x258 = x16 * x257
    x259 = x12 * x24 - 2.0 * x19 * x2 * x22 * x25 * x255 * x26 * x27
    x260 = -x258 - x259
    x261 = x260 * x6
    x262 = -x259
    x263 = x258 * x4 - x262 * x5
    x264 = -x263
    x265 = x12 * x44 - 2.0 * x19 * x2 * x22 * x25 * x255 * x26 * x32
    x266 = -x265
    x267 = x16 * x266
    x268 = -x257 * x5 + x267 * x4
    x269 = -x268
    x270 = x16 * x269
    x271 = x270 * x4
    x272 = x261 + x264 * x5 - x271
    x273 = -x263 - x270
    x274 = -x256 - x267
    x275 = x274 * x6
    x276 = x12 * x60 - 2.0 * x19 * x2 * x22 * x25 * x255 * x26 * x43
    x277 = -x276
    x278 = x16 * x277
    x279 = -x266 * x5 + x278 * x4
    x280 = -x279
    x281 = x16 * x280
    x282 = x281 * x4
    x283 = x269 * x5 + x275 - x282
    x284 = x16 * x283
    x285 = x284 * x4
    x286 = x272 * x5 + x273 * x40 - x285
    x287 = -x260 * x6
    x288 = -x6 * (x265 + x278)
    x289 = -x12 * x76 + 2.0 * x19 * x2 * x22 * x25 * x255 * x26 * x59
    x290 = x16 * x289
    x291 = x277 * x5 - x290 * x4
    x292 = x16 * x291
    x293 = x280 * x5 + x288 - x292 * x4
    x294 = x16 * x293
    x295 = x283 * x5 - x294 * x4 - x40 * (x268 + x281)
    x296 = x16 * x295
    x297 = x286 * x5 - x296 * x4 - x55 * (-x264 * x5 + x271 + x284 + x287)
    x298 = x297 * x4
    x299 = x286 * x6
    x300 = 4.0 * x299
    x301 = x298 + x300
    x302 = x286 * x4
    x303 = x272 * x6
    x304 = 3.0 * x303
    x305 = x302 + x304
    x306 = x90 * (x103 * x305 + x301 * x91)
    x307 = x104 * x21 + x306
    x308 = x272 * x4
    x309 = x264 * x6
    x310 = 2.0 * x309
    x311 = x308 + x310
    x312 = x90 * (x107 * x311 + x305 * x91)
    x313 = x21 * x90
    x314 = x108 * x313 + x312
    x315 = -x274 * x6
    x316 = -x6 * (x276 + x290)
    x317 = -x112 * x12 + 2.0 * x19 * x2 * x22 * x25 * x255 * x26 * x75
    x318 = (
        -x113
        * (
            x113
            * (
                x113 * (x113 * (x113 * x317 - x289 * x5) + x291 * x5 + x316)
                - x293 * x5
                + x40 * (x279 + x292)
            )
            + x295 * x5
            - x55 * (-x269 * x5 + x282 + x294 + x315)
        )
        + x297 * x5
        + x72 * (x272 * x5 + 2.0 * x273 * x6 - x285 - x296)
    )
    x319 = x318 * x4
    x320 = x297 * x6
    x321 = 5.0 * x320
    x322 = x90 * (x301 * x97 + x91 * (x319 + x321))
    x323 = x123 * x90 * (x298 + x300)
    x324 = x125 * x21 + x323
    x325 = x123 * x90 * (x302 + x304)
    x326 = x127 * x313 + x325
    x327 = x123 * x90 * (x319 + x321)
    x328 = x12 * x297 + x87
    x329 = x12 * x286 + x93
    x330 = x90 * (x103 * x329 + x328 * x91)
    x331 = x131 * x21 + x330
    x332 = x100 + x12 * x272
    x333 = x90 * (x107 * x332 + x329 * x91)
    x334 = x133 * x313 + x333
    x335 = x116 + x12 * x318
    x336 = x90 * (x328 * x97 + x335 * x91)
    x337 = x135 * x297
    x338 = x137 * x21 + x337
    x339 = x135 * x286
    x340 = x21 * x52
    x341 = x135 * x340 + x339
    x342 = x135 * x318
    x343 = x140 * x328
    x344 = x143 * x21 + x343
    x345 = x140 * x329
    x346 = x141 * x340 + x345
    x347 = x140 * x335
    x348 = x90 * (x129 * x328 + x242)
    x349 = x147 * x21 + x348
    x350 = x90 * (x129 * x329 + x245)
    x351 = x145 * x340 + x350
    x352 = x90 * (x129 * x335 + x248)
    x353 = x161 * x9
    x354 = x149 * x151 - x353 + x42
    x355 = x16 * x354
    x356 = x152 * x9
    x357 = x149 * x156 - x355 - x356 - x53
    x358 = x357 * x6
    x359 = x149 * x156 + x29 - x356
    x360 = x355 * x4 - x359 * x5
    x361 = -x360
    x362 = x172 * x9
    x363 = x149 * x160 - x362 + x58
    x364 = x16 * x363
    x365 = -x354 * x5 + x364 * x4
    x366 = -x365
    x367 = x16 * x366
    x368 = x367 * x4
    x369 = x358 + x361 * x5 - x368
    x370 = x6 * (x149 * x151 - x353 - x364 - x73)
    x371 = x149 * x171 - x183 * x9 + x74
    x372 = x16 * x371
    x373 = x363 * x5 - x372 * x4
    x374 = x16 * x373
    x375 = x366 * x5 + x370 - x374 * x4
    x376 = x16 * x375
    x377 = x369 * x5 - x376 * x4 - x40 * (x360 + x367)
    x378 = x377 * x4
    x379 = x369 * x6
    x380 = 3.0 * x379
    x381 = x378 + x380
    x382 = x369 * x4
    x383 = x361 * x6
    x384 = 2.0 * x383
    x385 = x382 + x384
    x386 = x90 * (x107 * x385 + x381 * x91)
    x387 = x20 * x205 + x386
    x388 = x20 * x207 + x387
    x389 = x6 * (-x110 + x149 * x160 - x362 - x372)
    x390 = x16 * x9
    x391 = x111 + x149 * x182 - x209 * x390
    x392 = (
        x113
        * (
            x113 * (x113 * (x113 * x391 - x371 * x5) + x373 * x5 + x389)
            - x375 * x5
            + x40 * (x365 + x374)
        )
        + x377 * x5
        + x55 * (x357 * x6 + x361 * x5 - x368 - x376)
    )
    x393 = x392 * x4
    x394 = x377 * x6
    x395 = 4.0 * x394
    x396 = x90 * (x103 * x381 + x91 * (x393 + x395))
    x397 = x199 * x20 + x396
    x398 = x377 * x9
    x399 = 2.0 * x192
    x400 = x398 + x399
    x401 = x369 * x9
    x402 = 2.0 * x196
    x403 = x401 + x402
    x404 = x107 * x403
    x405 = x90 * (x400 * x91 + x404)
    x406 = x20 * x225 + x405
    x407 = x20 * x226 + x406
    x408 = x392 * x9
    x409 = 2.0 * x212
    x410 = x408 + x409
    x411 = x90 * (x103 * x400 + x410 * x91)
    x412 = x20 * x221 + x411
    x413 = x129 * x380
    x414 = x90 * (x129 * x378 + x413)
    x415 = x20 * x233 + x414
    x416 = x20 * x234 + x415
    x417 = x129 * x90 * (x393 + x395)
    x418 = x20 * x231 + x417
    x419 = x40 * x90
    x420 = x90 * (x123 * x400 + x220 * x419)
    x421 = x20 * x238 + x420
    x422 = x20 * x240 + x421
    x423 = x90 * (x123 * x410 + x218 * x419)
    x424 = x20 * x236 + x423
    x425 = x129 * x90 * (x398 + x399)
    x426 = x20 * x246 + x425
    x427 = x20 * x247 + x426
    x428 = x129 * x90 * (x408 + x409)
    x429 = x20 * x243 + x428
    x430 = x145 * x377
    x431 = x20 * x252 + x430
    x432 = x20 * x253 + x431
    x433 = x145 * x392
    x434 = x20 * x250 + x433
    x435 = -x149 * x257 + x267 * x9
    x436 = -x435
    x437 = x16 * x436
    x438 = -x149 * x262 + x258 * x9
    x439 = -x437 - x438
    x440 = x439 * x6
    x441 = -x438
    x442 = x4 * x437 - x441 * x5
    x443 = -x442
    x444 = -x149 * x266 + x278 * x9
    x445 = -x444
    x446 = x16 * x445
    x447 = x4 * x446 - x436 * x5
    x448 = -x447
    x449 = x16 * x448
    x450 = x4 * x449
    x451 = x440 + x443 * x5 - x450
    x452 = -x6 * (x435 + x446)
    x453 = x149 * x277 - x290 * x9
    x454 = x16 * x453
    x455 = -x4 * x454 + x445 * x5
    x456 = x16 * x455
    x457 = -x4 * x456 + x448 * x5 + x452
    x458 = x16 * x457
    x459 = -x4 * x458 - x40 * (x442 + x449) + x451 * x5
    x460 = x4 * x459 + x451 * x55
    x461 = x40 * x443
    x462 = x4 * x451 + x461
    x463 = x90 * (x107 * x462 + x460 * x91)
    x464 = x205 * x21 + x463
    x465 = x20 * x314 + x464
    x466 = -x6 * (x444 + x454)
    x467 = x149 * x289 - x317 * x390
    x468 = (
        x113
        * (
            x113 * (x113 * (x113 * x467 - x453 * x5) + x455 * x5 + x466)
            + x40 * (x447 + x456)
            - x457 * x5
        )
        + x459 * x5
        + x55 * (x439 * x6 + x443 * x5 - x450 - x458)
    )
    x469 = x90 * (x103 * x460 + x91 * (x4 * x468 + x459 * x72))
    x470 = x199 * x21 + x469
    x471 = x299 + x459 * x9
    x472 = x303 + x451 * x9
    x473 = x90 * (x107 * x472 + x471 * x91)
    x474 = x21 * x225 + x473
    x475 = x20 * x326 + x474
    x476 = x320 + x468 * x9
    x477 = x90 * (x103 * x471 + x476 * x91)
    x478 = x21 * x221 + x477
    x479 = x128 * x215
    x480 = x12 * x459 + x192
    x481 = x12 * x451 + x196
    x482 = x90 * (x107 * x481 + x480 * x91)
    x483 = x21 * x233 + x482
    x484 = x20 * x334 + x483
    x485 = x12 * x468 + x212
    x486 = x90 * (x103 * x480 + x485 * x91)
    x487 = x21 * x231 + x486
    x488 = x123 * x90 * (x299 + x471)
    x489 = x21 * x238 + x488
    x490 = x20 * x341 + x489
    x491 = x123 * x90 * (x320 + x476)
    x492 = x21 * x236 + x491
    x493 = x90 * (x118 * x329 + x123 * x480)
    x494 = x21 * x246 + x493
    x495 = x20 * x346 + x494
    x496 = x90 * (x118 * x328 + x123 * x485)
    x497 = x21 * x243 + x496
    x498 = x129 * x90 * (x192 + x480)
    x499 = x21 * x252 + x498
    x500 = x20 * x351 + x499
    x501 = x129 * x90 * (x212 + x485)
    x502 = x21 * x250 + x501
    x503 = x12 * x267
    x504 = x255 * x257 + x42 - x503
    x505 = x16 * x504
    x506 = x12 * x258
    x507 = x255 * x262 - x505 - x506 - x53
    x508 = x507 * x6
    x509 = x255 * x262 + x29 - x506
    x510 = x4 * x505 - x5 * x509
    x511 = -x510
    x512 = x12 * x278
    x513 = x255 * x266 - x512 + x58
    x514 = x16 * x513
    x515 = x4 * x514 - x5 * x504
    x516 = -x515
    x517 = x16 * x516
    x518 = x4 * x517
    x519 = x5 * x511 + x508 - x518
    x520 = x6 * (x255 * x257 - x503 - x514 - x73)
    x521 = -x12 * x290 + x255 * x277 + x74
    x522 = x16 * x521
    x523 = -x4 * x522 + x5 * x513
    x524 = x16 * x523
    x525 = -x4 * x524 + x5 * x516 + x520
    x526 = x16 * x525
    x527 = -x4 * x526 - x40 * (x510 + x517) + x5 * x519
    x528 = x4 * x527
    x529 = x519 * x6
    x530 = 3.0 * x529
    x531 = x528 + x530
    x532 = x4 * x519
    x533 = x511 * x6
    x534 = 2.0 * x533
    x535 = x532 + x534
    x536 = x90 * (x107 * x535 + x531 * x91)
    x537 = x21 * x312 + x536
    x538 = x21 * x314 + x537
    x539 = -x507 * x6
    x540 = x6 * (-x110 + x255 * x266 - x512 - x522)
    x541 = x12 * x16
    x542 = x111 + x255 * x289 - x317 * x541
    x543 = (
        x113
        * (
            x113 * (x113 * (x113 * x542 - x5 * x521) + x5 * x523 + x540)
            + x40 * (x515 + x524)
            - x5 * x525
        )
        + x5 * x527
        - x55 * (-x5 * x511 + x518 + x526 + x539)
    )
    x544 = x4 * x543
    x545 = x527 * x6
    x546 = 4.0 * x545
    x547 = x90 * (x103 * x531 + x91 * (x544 + x546))
    x548 = x21 * x306 + x547
    x549 = x123 * x90 * (x528 + x530)
    x550 = x21 * x325 + x549
    x551 = x21 * x326 + x550
    x552 = x123 * x90 * (x544 + x546)
    x553 = x21 * x323 + x552
    x554 = x12 * x527 + 2.0 * x299
    x555 = x12 * x519 + 2.0 * x303
    x556 = x107 * x555
    x557 = x90 * (x554 * x91 + x556)
    x558 = x21 * x333 + x557
    x559 = x21 * x334 + x558
    x560 = x12 * x543 + 2.0 * x320
    x561 = x90 * (x103 * x554 + x560 * x91)
    x562 = x21 * x330 + x561
    x563 = x135 * x527
    x564 = x21 * x339 + x563
    x565 = x21 * x341 + x564
    x566 = x135 * x543
    x567 = x21 * x337 + x566
    x568 = x140 * x554
    x569 = x21 * x345 + x568
    x570 = x21 * x346 + x569
    x571 = x140 * x560
    x572 = x21 * x343 + x571
    x573 = x90 * (x129 * x554 + x329 * x419)
    x574 = x21 * x350 + x573
    x575 = x21 * x351 + x574
    x576 = x90 * (x129 * x560 + x328 * x419)
    x577 = x21 * x348 + x576
    x578 = x364 * x9
    x579 = x149 * x354 + 2.0 * x169 - x578
    x580 = x16 * x579
    x581 = x355 * x9
    x582 = x6 * (x149 * x359 + 2.0 * x154 * x6 - x580 - x581)
    x583 = x149 * x359 + 2.0 * x155 - x581
    x584 = x4 * x580 - x5 * x583
    x585 = -x584
    x586 = x149 * x363 + 2.0 * x181 - x372 * x9
    x587 = x16 * x586
    x588 = -x4 * x587 + x5 * x579
    x589 = x16 * x588
    x590 = -x4 * x589 + x5 * x585 + x582
    x591 = x6 * (x149 * x354 + 2.0 * x168 * x6 - x578 - x587)
    x592 = x149 * x371 + 2.0 * x208 - x390 * x391
    x593 = (
        -x113 * (x113 * (x113 * x592 - x5 * x586) + x5 * x588 + x591)
        - x40 * (x584 + x589)
        + x5 * x590
    )
    x594 = x4 * x593
    x595 = x590 * x6
    x596 = 3.0 * x595
    x597 = x4 * x590
    x598 = x585 * x6
    x599 = 2.0 * x598
    x600 = x597 + x599
    x601 = x90 * (x107 * x600 + x91 * (x594 + x596))
    x602 = x20 * x386 + x601
    x603 = x20 * x387 + x602
    x604 = x593 * x9
    x605 = 3.0 * x394
    x606 = x604 + x605
    x607 = x590 * x9
    x608 = x380 + x607
    x609 = x90 * (x107 * x608 + x606 * x91)
    x610 = x20 * x405 + x609
    x611 = x20 * x406 + x610
    x612 = x129 * x90 * (x594 + x596)
    x613 = x20 * x414 + x612
    x614 = x20 * x415 + x613
    x615 = x90 * (x107 * x400 + x123 * x606)
    x616 = x20 * x420 + x615
    x617 = x20 * x421 + x616
    x618 = x129 * x90 * (x604 + x605)
    x619 = x20 * x425 + x618
    x620 = x20 * x426 + x619
    x621 = x145 * x593
    x622 = x20 * x430 + x621
    x623 = x20 * x431 + x622
    x624 = x446 * x9
    x625 = x149 * x436 + x275 - x624
    x626 = x16 * x625
    x627 = x437 * x9
    x628 = x6 * (x149 * x441 - x287 - x626 - x627)
    x629 = x149 * x441 + x261 - x627
    x630 = x4 * x626 - x5 * x629
    x631 = -x630
    x632 = x149 * x445 + x288 - x454 * x9
    x633 = x16 * x632
    x634 = -x4 * x633 + x5 * x625
    x635 = x16 * x634
    x636 = -x4 * x635 + x5 * x631 + x628
    x637 = x6 * (x149 * x436 - x315 - x624 - x633)
    x638 = x149 * x453 + x316 - x390 * x467
    x639 = (
        -x113 * (x113 * (x113 * x638 - x5 * x632) + x5 * x634 + x637)
        - x40 * (x630 + x635)
        + x5 * x636
    )
    x640 = x55 * x636
    x641 = x40 * x631
    x642 = x4 * x636 + x641
    x643 = x90 * (x107 * x642 + x91 * (x4 * x639 + x640))
    x644 = x21 * x386 + x643
    x645 = x20 * x464 + x644
    x646 = x40 * x459
    x647 = x639 * x9 + x646
    x648 = x40 * x451
    x649 = x636 * x9 + x648
    x650 = x107 * x649
    x651 = x90 * (x647 * x91 + x650)
    x652 = x21 * x405 + x651
    x653 = x20 * x474 + x652
    x654 = x12 * x639 + x394
    x655 = x12 * x636 + x379
    x656 = x107 * x655
    x657 = x90 * (x654 * x91 + x656)
    x658 = x21 * x414 + x657
    x659 = x20 * x483 + x658
    x660 = x90 * (x123 * x647 + x419 * x471)
    x661 = x21 * x420 + x660
    x662 = x20 * x489 + x661
    x663 = x419 * x480
    x664 = x90 * (x123 * x654 + x663)
    x665 = x21 * x425 + x664
    x666 = x20 * x494 + x665
    x667 = x129 * x90 * (x394 + x654)
    x668 = x21 * x430 + x667
    x669 = x20 * x499 + x668
    x670 = -x149 * x504 + x514 * x9
    x671 = -x670
    x672 = x16 * x671
    x673 = -x149 * x509 + x505 * x9
    x674 = -x6 * (x672 + x673)
    x675 = -x673
    x676 = x4 * x672 - x5 * x675
    x677 = -x676
    x678 = x149 * x513 - x522 * x9
    x679 = x16 * x678
    x680 = -x4 * x679 + x5 * x671
    x681 = x16 * x680
    x682 = -x4 * x681 + x5 * x677 + x674
    x683 = -x6 * (x670 + x679)
    x684 = x149 * x521 - x390 * x542
    x685 = (
        -x113 * (x113 * (x113 * x684 - x5 * x678) + x5 * x680 + x683)
        - x40 * (x676 + x681)
        + x5 * x682
    )
    x686 = x55 * x682
    x687 = x40 * x677
    x688 = x4 * x682 + x687
    x689 = x90 * (x107 * x688 + x91 * (x4 * x685 + x686))
    x690 = x21 * x463 + x689
    x691 = x21 * x464 + x690
    x692 = x545 + x685 * x9
    x693 = x529 + x682 * x9
    x694 = x90 * (x107 * x693 + x692 * x91)
    x695 = x21 * x473 + x694
    x696 = x21 * x474 + x695
    x697 = x12 * x685 + x646
    x698 = x12 * x682 + x648
    x699 = x107 * x698
    x700 = x90 * (x697 * x91 + x699)
    x701 = x21 * x482 + x700
    x702 = x21 * x483 + x701
    x703 = x123 * x90 * (x545 + x692)
    x704 = x21 * x488 + x703
    x705 = x21 * x489 + x704
    x706 = x90 * (x118 * x554 + x123 * x697)
    x707 = x21 * x493 + x706
    x708 = x21 * x494 + x707
    x709 = x90 * (x129 * x697 + x663)
    x710 = x21 * x498 + x709
    x711 = x21 * x499 + x710
    x712 = x12 * x514
    x713 = x255 * x504 + 2.0 * x275 - x712
    x714 = x16 * x713
    x715 = x12 * x505
    x716 = x6 * (x255 * x509 + 2.0 * x260 * x6 - x714 - x715)
    x717 = x255 * x509 + 2.0 * x261 - x715
    x718 = x4 * x714 - x5 * x717
    x719 = -x718
    x720 = -x12 * x522 + x255 * x513 + 2.0 * x288
    x721 = x16 * x720
    x722 = -x4 * x721 + x5 * x713
    x723 = x16 * x722
    x724 = -x4 * x723 + x5 * x719 + x716
    x725 = x6 * (x255 * x504 + 2.0 * x274 * x6 - x712 - x721)
    x726 = x255 * x521 + 2.0 * x316 - x541 * x542
    x727 = (
        -x113 * (x113 * (x113 * x726 - x5 * x720) + x5 * x722 + x725)
        - x40 * (x718 + x723)
        + x5 * x724
    )
    x728 = x4 * x727
    x729 = x6 * x724
    x730 = 3.0 * x729
    x731 = x4 * x724
    x732 = x6 * x719
    x733 = 2.0 * x732
    x734 = x731 + x733
    x735 = x90 * (x107 * x734 + x91 * (x728 + x730))
    x736 = x21 * x536 + x735
    x737 = x21 * x537 + x736
    x738 = x123 * x90 * (x728 + x730)
    x739 = x21 * x549 + x738
    x740 = x21 * x550 + x739
    x741 = x12 * x727 + 3.0 * x545
    x742 = x12 * x724 + x530
    x743 = x90 * (x107 * x742 + x741 * x91)
    x744 = x21 * x557 + x743
    x745 = x21 * x558 + x744
    x746 = x135 * x727
    x747 = x21 * x563 + x746
    x748 = x21 * x564 + x747
    x749 = x140 * x741
    x750 = x21 * x568 + x749
    x751 = x21 * x569 + x750
    x752 = x90 * (x107 * x554 + x129 * x741)
    x753 = x21 * x573 + x752
    x754 = x21 * x574 + x753
    x755 = x0 * x205 + x199
    x756 = x156 * x6
    x757 = x204 * x91 + x419 * (x158 * x4 + x756)
    x758 = x0 * x225 + x221
    x759 = x419 * (x106 + x158 * x9)
    x760 = x224 * x91 + x759
    x761 = x0 * x233 + x231
    x762 = x129 * x203
    x763 = x129 * x201 + x762
    x764 = x0 * x238 + x236
    x765 = x123 * (x100 + x224)
    x766 = x0 * x246 + x243
    x767 = x100 * x129
    x768 = x129 * x223 + x767
    x769 = x0 * x252 + x250
    x770 = x145 * x166
    x771 = x359 * x6
    x772 = x361 * x4
    x773 = x771 + x772
    x774 = x90 * (x385 * x91 + x419 * x773)
    x775 = x206 * x757 + x774
    x776 = 0.1111111111111111 * x119 * x120
    x777 = x361 * x9
    x778 = x203 + x777
    x779 = x90 * (x403 * x91 + x419 * x778)
    x780 = x206 * x760 + x779
    x781 = 0.3333333333333333 * x120
    x782 = x129 * x90 * (x382 + x384)
    x783 = x206 * x763 + x782
    x784 = x90 * (x123 * x403 + x224 * x419)
    x785 = x206 * x765 + x784
    x786 = x129 * x90 * (x401 + x402)
    x787 = x206 * x768 + x786
    x788 = x145 * x369
    x789 = x20 * x770 + x788
    x790 = x441 * x6
    x791 = x4 * x443 + x790
    x792 = x90 * (x419 * x791 + x462 * x91)
    x793 = x313 * x757 + x792
    x794 = x309 + x443 * x9
    x795 = x419 * x794
    x796 = x90 * (x472 * x91 + x795)
    x797 = x313 * x760 + x796
    x798 = x12 * x443 + x202
    x799 = x419 * x798
    x800 = x90 * (x481 * x91 + x799)
    x801 = x313 * x763 + x800
    x802 = x123 * x90 * (x303 + x472)
    x803 = x313 * x765 + x802
    x804 = x90 * (x118 * x332 + x123 * x481)
    x805 = x313 * x768 + x804
    x806 = x129 * x90 * (x196 + x481)
    x807 = x21 * x770 + x806
    x808 = x583 * x6
    x809 = x4 * x585
    x810 = x808 + x809
    x811 = x90 * (x419 * x810 + x600 * x91)
    x812 = x20 * x774 + x811
    x813 = x20 * x775 + x812
    x814 = x585 * x9
    x815 = 3.0 * x383
    x816 = x814 + x815
    x817 = x90 * (x419 * x816 + x608 * x91)
    x818 = x20 * x779 + x817
    x819 = x20 * x780 + x818
    x820 = x129 * x90 * (x597 + x599)
    x821 = x20 * x782 + x820
    x822 = x20 * x783 + x821
    x823 = x90 * (x123 * x608 + x404)
    x824 = x20 * x784 + x823
    x825 = x20 * x785 + x824
    x826 = x90 * (x129 * x607 + x413)
    x827 = x20 * x786 + x826
    x828 = x20 * x787 + x827
    x829 = x145 * x590
    x830 = x20 * x788 + x829
    x831 = x20 * x789 + x830
    x832 = x6 * x629
    x833 = x4 * x631 + x832
    x834 = x90 * (x419 * x833 + x642 * x91)
    x835 = x21 * x774 + x834
    x836 = x20 * x793 + x835
    x837 = x461 + x631 * x9
    x838 = x90 * (x419 * x837 + x649 * x91)
    x839 = x21 * x779 + x838
    x840 = x20 * x797 + x839
    x841 = x119 * x781
    x842 = x12 * x631 + x383
    x843 = x419 * x842
    x844 = x90 * (x655 * x91 + x843)
    x845 = x21 * x782 + x844
    x846 = x20 * x801 + x845
    x847 = x90 * (x123 * x649 + x419 * x472)
    x848 = x21 * x784 + x847
    x849 = x20 * x803 + x848
    x850 = x419 * x481
    x851 = x90 * (x123 * x655 + x850)
    x852 = x21 * x786 + x851
    x853 = x20 * x805 + x852
    x854 = x129 * x90 * (x379 + x655)
    x855 = x21 * x788 + x854
    x856 = x20 * x807 + x855
    x857 = x6 * x675
    x858 = x4 * x677 + x857
    x859 = x90 * (x419 * x858 + x688 * x91)
    x860 = x21 * x792 + x859
    x861 = x21 * x793 + x860
    x862 = x533 + x677 * x9
    x863 = x419 * x862
    x864 = x90 * (x693 * x91 + x863)
    x865 = x21 * x796 + x864
    x866 = x21 * x797 + x865
    x867 = x12 * x677 + x461
    x868 = x419 * x867
    x869 = x90 * (x698 * x91 + x868)
    x870 = x21 * x800 + x869
    x871 = x21 * x801 + x870
    x872 = x123 * x90 * (x529 + x693)
    x873 = x21 * x802 + x872
    x874 = x21 * x803 + x873
    x875 = x90 * (x118 * x555 + x123 * x698)
    x876 = x21 * x804 + x875
    x877 = x21 * x805 + x876
    x878 = x90 * (x129 * x698 + x850)
    x879 = x21 * x806 + x878
    x880 = x21 * x807 + x879
    x881 = x149 * x579 + 3.0 * x370 - x587 * x9
    x882 = x16 * x881
    x883 = x580 * x9
    x884 = x6 * (x149 * x583 + 3.0 * x357 * x6 - x882 - x883)
    x885 = x149 * x583 + 3.0 * x358 - x883
    x886 = -x4 * x882 + x5 * x885
    x887 = x149 * x586 + 3.0 * x389 - x390 * x592
    x888 = x113 * (x113 * x887 - x5 * x881) + x5 * x886 + x884
    x889 = x4 * x888
    x890 = x6 * x886
    x891 = 2.0 * x890
    x892 = x6 * x885
    x893 = x4 * x886
    x894 = x892 + x893
    x895 = x20 * x811 + x90 * (x419 * x894 + x91 * (x889 + x891))
    x896 = x20 * x812 + x895
    x897 = x888 * x9
    x898 = 4.0 * x595
    x899 = x897 + x898
    x900 = x886 * x9
    x901 = 4.0 * x598
    x902 = x900 + x901
    x903 = x20 * x817 + x90 * (x419 * x902 + x899 * x91)
    x904 = x20 * x818 + x903
    x905 = x129 * x90 * (x889 + x891) + x20 * x820
    x906 = x20 * x821 + x905
    x907 = x20 * x823 + x90 * (x103 * x608 + x123 * x899)
    x908 = x20 * x824 + x907
    x909 = x129 * x90 * (x897 + x898) + x20 * x826
    x910 = x20 * x827 + x909
    x911 = x145 * x888 + x20 * x829
    x912 = x20 * x830 + x911
    x913 = x149 * x625 + 2.0 * x452 - x633 * x9
    x914 = x16 * x913
    x915 = x626 * x9
    x916 = x6 * (x149 * x629 + 2.0 * x439 * x6 - x914 - x915)
    x917 = x149 * x629 + 2.0 * x440 - x915
    x918 = -x4 * x914 + x5 * x917
    x919 = x149 * x632 - x390 * x638 + 2.0 * x466
    x920 = x113 * (x113 * x919 - x5 * x913) + x5 * x918 + x916
    x921 = x40 * x918
    x922 = x6 * x917
    x923 = x4 * x918 + x922
    x924 = x90 * (x419 * x923 + x91 * (x4 * x920 + x921))
    x925 = x21 * x811 + x924
    x926 = x20 * x835 + x925
    x927 = x640 + x9 * x920
    x928 = x55 * x631 + x9 * x918
    x929 = x90 * (x419 * x928 + x91 * x927)
    x930 = x21 * x817 + x929
    x931 = x20 * x839 + x930
    x932 = x12 * x920 + x595
    x933 = x12 * x918 + x598
    x934 = x419 * x933
    x935 = x90 * (x91 * x932 + x934)
    x936 = x21 * x820 + x935
    x937 = x20 * x845 + x936
    x938 = x90 * (x123 * x927 + x650)
    x939 = x21 * x823 + x938
    x940 = x20 * x848 + x939
    x941 = x90 * (x123 * x932 + x656)
    x942 = x21 * x826 + x941
    x943 = x20 * x852 + x942
    x944 = x129 * x90 * (x595 + x932)
    x945 = x21 * x829 + x944
    x946 = x20 * x855 + x945
    x947 = x149 * x671 + x520 - x679 * x9
    x948 = x16 * x947
    x949 = x672 * x9
    x950 = x6 * (x149 * x675 - x539 - x948 - x949)
    x951 = x149 * x675 + x508 - x949
    x952 = -x4 * x948 + x5 * x951
    x953 = x149 * x678 - x390 * x684 + x540
    x954 = x113 * (x113 * x953 - x5 * x947) + x5 * x952 + x950
    x955 = x6 * x951
    x956 = x4 * x952 + x955
    x957 = x90 * (x419 * x956 + x91 * (x4 * x954 + x40 * x952))
    x958 = x21 * x834 + x957
    x959 = x21 * x835 + x958
    x960 = x40 * x682 + x9 * x954
    x961 = x687 + x9 * x952
    x962 = x90 * (x419 * x961 + x91 * x960)
    x963 = x21 * x838 + x962
    x964 = x21 * x839 + x963
    x965 = x12 * x954 + x40 * x636
    x966 = x12 * x952 + x641
    x967 = x90 * (x419 * x966 + x91 * x965)
    x968 = x21 * x844 + x967
    x969 = x21 * x845 + x968
    x970 = x90 * (x123 * x960 + x419 * x693)
    x971 = x21 * x847 + x970
    x972 = x21 * x848 + x971
    x973 = x90 * (x123 * x965 + x419 * x698)
    x974 = x21 * x851 + x973
    x975 = x21 * x852 + x974
    x976 = x90 * (x129 * x965 + x419 * x655)
    x977 = x21 * x854 + x976
    x978 = x21 * x855 + x977
    x979 = x149 * x713 - x721 * x9
    x980 = x16 * x979
    x981 = -x149 * x717 + x714 * x9
    x982 = -x6 * (x980 + x981)
    x983 = -x981
    x984 = -x4 * x980 + x5 * x983
    x985 = x149 * x720 - x390 * x726
    x986 = x113 * (x113 * x985 - x5 * x979) + x5 * x984 + x982
    x987 = x40 * x984
    x988 = x6 * x983
    x989 = x4 * x984 + x988
    x990 = x90 * (x419 * x989 + x91 * (x4 * x986 + x987))
    x991 = x21 * x859 + x990
    x992 = x21 * x860 + x991
    x993 = x729 + x9 * x986
    x994 = x732 + x9 * x984
    x995 = x419 * x994
    x996 = x90 * (x91 * x993 + x995)
    x997 = x21 * x864 + x996
    x998 = x21 * x865 + x997
    x999 = x12 * x986 + x686
    x1000 = x12 * x984 + x55 * x677
    x1001 = x1000 * x419
    x1002 = x90 * (x1001 + x91 * x999)
    x1003 = x1002 + x21 * x869
    x1004 = x1003 + x21 * x870
    x1005 = x123 * x90 * (x729 + x993)
    x1006 = x1005 + x21 * x872
    x1007 = x1006 + x21 * x873
    x1008 = x90 * (x118 * x742 + x123 * x999)
    x1009 = x1008 + x21 * x875
    x1010 = x1009 + x21 * x876
    x1011 = x90 * (x129 * x999 + x699)
    x1012 = x1011 + x21 * x878
    x1013 = x1012 + x21 * x879
    x1014 = x0 * x312 + x306
    x1015 = x262 * x6
    x1016 = x311 * x91 + x419 * (x1015 + x264 * x4)
    x1017 = x0 * x325 + x323
    x1018 = x123 * (x308 + x310)
    x1019 = x0 * x333 + x330
    x1020 = x106 + x12 * x264
    x1021 = x1020 * x419
    x1022 = x1021 + x332 * x91
    x1023 = x0 * x339 + x337
    x1024 = x135 * x272
    x1025 = x0 * x345 + x343
    x1026 = x140 * x332
    x1027 = x0 * x350 + x348
    x1028 = x129 * x332 + x767
    x1029 = x20 * x312 + x463
    x1030 = x1016 * x206 + x792
    x1031 = x20 * x325 + x473
    x1032 = x1018 * x206 + x796
    x1033 = x20 * x333 + x482
    x1034 = x1022 * x206 + x800
    x1035 = x20 * x339 + x488
    x1036 = x1024 * x20 + x802
    x1037 = x20 * x345 + x493
    x1038 = x1026 * x20 + x804
    x1039 = x20 * x350 + x498
    x1040 = x1028 * x206 + x806
    x1041 = x509 * x6
    x1042 = x4 * x511
    x1043 = x1041 + x1042
    x1044 = x90 * (x1043 * x419 + x535 * x91)
    x1045 = x1016 * x313 + x1044
    x1046 = x123 * x90 * (x532 + x534)
    x1047 = x1018 * x313 + x1046
    x1048 = x12 * x511 + x310
    x1049 = x90 * (x1048 * x419 + x555 * x91)
    x1050 = x1022 * x313 + x1049
    x1051 = x135 * x519
    x1052 = x1024 * x21 + x1051
    x1053 = x140 * x555
    x1054 = x1026 * x21 + x1053
    x1055 = x90 * (x129 * x555 + x332 * x419)
    x1056 = x1028 * x313 + x1055
    x1057 = x20 * x792 + x834
    x1058 = x1030 * x20 + x1057
    x1059 = x20 * x463 + x643
    x1060 = x20 * x796 + x838
    x1061 = x1032 * x20 + x1060
    x1062 = x20 * x473 + x651
    x1063 = x20 * x800 + x844
    x1064 = x1034 * x20 + x1063
    x1065 = x20 * x482 + x657
    x1066 = x20 * x802 + x847
    x1067 = x1036 * x20 + x1066
    x1068 = x20 * x488 + x660
    x1069 = x20 * x804 + x851
    x1070 = x1038 * x20 + x1069
    x1071 = x20 * x493 + x664
    x1072 = x20 * x806 + x854
    x1073 = x1040 * x20 + x1072
    x1074 = x20 * x498 + x667
    x1075 = x1045 * x20 + x860
    x1076 = x1047 * x20 + x865
    x1077 = x1050 * x20 + x870
    x1078 = x1052 * x20 + x873
    x1079 = x1054 * x20 + x876
    x1080 = x1056 * x20 + x879
    x1081 = x6 * x717
    x1082 = x4 * x719
    x1083 = x1081 + x1082
    x1084 = x90 * (x1083 * x419 + x734 * x91)
    x1085 = x1044 * x21 + x1084
    x1086 = x1045 * x21 + x1085
    x1087 = x123 * x90 * (x731 + x733)
    x1088 = x1046 * x21 + x1087
    x1089 = x1047 * x21 + x1088
    x1090 = x12 * x719 + 3.0 * x533
    x1091 = x90 * (x1090 * x419 + x742 * x91)
    x1092 = x1049 * x21 + x1091
    x1093 = x1050 * x21 + x1092
    x1094 = x135 * x724
    x1095 = x1051 * x21 + x1094
    x1096 = x1052 * x21 + x1095
    x1097 = x140 * x742
    x1098 = x1053 * x21 + x1097
    x1099 = x1054 * x21 + x1098
    x1100 = x90 * (x129 * x742 + x556)
    x1101 = x1055 * x21 + x1100
    x1102 = x1056 * x21 + x1101
    x1103 = x20 * x834 + x924
    x1104 = x1057 * x20 + x1103
    x1105 = x20 * x838 + x929
    x1106 = x1060 * x20 + x1105
    x1107 = x20 * x844 + x935
    x1108 = x1063 * x20 + x1107
    x1109 = x20 * x847 + x938
    x1110 = x1066 * x20 + x1109
    x1111 = x20 * x851 + x941
    x1112 = x1069 * x20 + x1111
    x1113 = x20 * x854 + x944
    x1114 = x1072 * x20 + x1113
    x1115 = x20 * x860 + x958
    x1116 = x20 * x865 + x963
    x1117 = x20 * x870 + x968
    x1118 = x20 * x873 + x971
    x1119 = x20 * x876 + x974
    x1120 = x20 * x879 + x977
    x1121 = -x12 * x721 + x255 * x713 + 3.0 * x520
    x1122 = x1121 * x16
    x1123 = x12 * x714
    x1124 = x6 * (-x1122 - x1123 + x255 * x717 + 3.0 * x507 * x6)
    x1125 = -x1123 + x255 * x717 + 3.0 * x508
    x1126 = -x1122 * x4 + x1125 * x5
    x1127 = x255 * x720 + 3.0 * x540 - x541 * x726
    x1128 = x1124 + x1126 * x5 - x113 * (x1121 * x5 - x1127 * x113)
    x1129 = x1128 * x4
    x1130 = x1126 * x6
    x1131 = 2.0 * x1130
    x1132 = x1125 * x6
    x1133 = x1126 * x4
    x1134 = x1132 + x1133
    x1135 = x1084 * x21 + x90 * (x1134 * x419 + x91 * (x1129 + x1131))
    x1136 = x1085 * x21 + x1135
    x1137 = x1087 * x21 + x123 * x90 * (x1129 + x1131)
    x1138 = x1088 * x21 + x1137
    x1139 = x1128 * x12 + 4.0 * x729
    x1140 = x1126 * x12 + 4.0 * x732
    x1141 = x1091 * x21 + x90 * (x1139 * x91 + x1140 * x419)
    x1142 = x1092 * x21 + x1141
    x1143 = x1094 * x21 + x1128 * x135
    x1144 = x1095 * x21 + x1143
    x1145 = x1097 * x21 + x1139 * x140
    x1146 = x1098 * x21 + x1145
    x1147 = x1100 * x21 + x90 * (x103 * x742 + x1139 * x129)
    x1148 = x1101 * x21 + x1147
    x1149 = x0 * x774 + x386
    x1150 = x91 * (x771 + x773)
    x1151 = x0 * x779 + x405
    x1152 = x359 * x9 + 2.0 * x756
    x1153 = x1152 * x118 + x778 * x91
    x1154 = x0 * x782 + x414
    x1155 = x129 * x771
    x1156 = x1155 + x129 * x772
    x1157 = x0 * x784 + x420
    x1158 = x123 * x778 + x759
    x1159 = x0 * x786 + x425
    x1160 = x129 * x777 + x762
    x1161 = x0 * x788 + x430
    x1162 = x145 * x361
    x1163 = x90 * x91 * (x808 + x810)
    x1164 = x1150 * x206 + x1163
    x1165 = x583 * x9
    x1166 = 3.0 * x771
    x1167 = x1165 + x1166
    x1168 = x90 * (x1167 * x118 + x816 * x91)
    x1169 = x1153 * x206 + x1168
    x1170 = x129 * x808
    x1171 = x90 * (x1170 + x129 * x809)
    x1172 = x1156 * x206 + x1171
    x1173 = x90 * (x107 * x778 + x123 * x816)
    x1174 = x1158 * x206 + x1173
    x1175 = x129 * x90 * (x814 + x815)
    x1176 = x1160 * x206 + x1175
    x1177 = x145 * x585
    x1178 = x1162 * x20 + x1177
    x1179 = x90 * x91 * (x832 + x833)
    x1180 = x1150 * x313 + x1179
    x1181 = 2.0 * x790
    x1182 = x1181 + x629 * x9
    x1183 = x90 * (x118 * x1182 + x837 * x91)
    x1184 = x1153 * x313 + x1183
    x1185 = x12 * x629 + x771
    x1186 = x90 * (x118 * x1185 + x842 * x91)
    x1187 = x1156 * x313 + x1186
    x1188 = x90 * (x123 * x837 + x795)
    x1189 = x1158 * x313 + x1188
    x1190 = x90 * (x123 * x842 + x799)
    x1191 = x1160 * x313 + x1190
    x1192 = x129 * x90 * (x383 + x842)
    x1193 = x1162 * x21 + x1192
    x1194 = x90 * x91 * (x892 + x894)
    x1195 = x1163 * x20 + x1194
    x1196 = x1164 * x20 + x1195
    x1197 = x885 * x9
    x1198 = 4.0 * x808
    x1199 = x1197 + x1198
    x1200 = x90 * (x118 * x1199 + x902 * x91)
    x1201 = x1168 * x20 + x1200
    x1202 = x1169 * x20 + x1201
    x1203 = x129 * x892
    x1204 = x90 * (x1203 + x129 * x893)
    x1205 = x1171 * x20 + x1204
    x1206 = x1172 * x20 + x1205
    x1207 = x90 * (x103 * x816 + x123 * x902)
    x1208 = x1173 * x20 + x1207
    x1209 = x1174 * x20 + x1208
    x1210 = x129 * x90 * (x900 + x901)
    x1211 = x1175 * x20 + x1210
    x1212 = x1176 * x20 + x1211
    x1213 = x145 * x886
    x1214 = x1177 * x20 + x1213
    x1215 = x1178 * x20 + x1214
    x1216 = x90 * x91 * (x922 + x923)
    x1217 = x1163 * x21 + x1216
    x1218 = x1180 * x20 + x1217
    x1219 = 3.0 * x832 + x9 * x917
    x1220 = x90 * (x118 * x1219 + x91 * x928)
    x1221 = x1168 * x21 + x1220
    x1222 = x1184 * x20 + x1221
    x1223 = x12 * x917 + x808
    x1224 = x90 * (x118 * x1223 + x91 * x933)
    x1225 = x1171 * x21 + x1224
    x1226 = x1187 * x20 + x1225
    x1227 = x90 * (x107 * x837 + x123 * x928)
    x1228 = x1173 * x21 + x1227
    x1229 = x1189 * x20 + x1228
    x1230 = x90 * (x107 * x842 + x123 * x933)
    x1231 = x1175 * x21 + x1230
    x1232 = x1191 * x20 + x1231
    x1233 = x129 * x90 * (x598 + x933)
    x1234 = x1177 * x21 + x1233
    x1235 = x1193 * x20 + x1234
    x1236 = x90 * x91 * (x955 + x956)
    x1237 = x1179 * x21 + x1236
    x1238 = x1180 * x21 + x1237
    x1239 = 2.0 * x857 + x9 * x951
    x1240 = x90 * (x118 * x1239 + x91 * x961)
    x1241 = x1183 * x21 + x1240
    x1242 = x1184 * x21 + x1241
    x1243 = x12 * x951 + 2.0 * x832
    x1244 = x90 * (x118 * x1243 + x91 * x966)
    x1245 = x1186 * x21 + x1244
    x1246 = x1187 * x21 + x1245
    x1247 = x90 * (x123 * x961 + x863)
    x1248 = x1188 * x21 + x1247
    x1249 = x1189 * x21 + x1248
    x1250 = x90 * (x123 * x966 + x868)
    x1251 = x1190 * x21 + x1250
    x1252 = x1191 * x21 + x1251
    x1253 = x90 * (x129 * x966 + x843)
    x1254 = x1192 * x21 + x1253
    x1255 = x1193 * x21 + x1254
    x1256 = x149 * x885 + 4.0 * x582 - x882 * x9
    x1257 = x1256 * x6
    x1258 = x149 * x881 - x390 * x887 + 4.0 * x591
    x1259 = -x113 * x1258 + x1256 * x5
    x1260 = x1259 * x4
    x1261 = x1194 * x20 + x1195 * x20 + x90 * x91 * (2.0 * x1257 + x1260)
    x1262 = x1256 * x9
    x1263 = 5.0 * x892
    x1264 = x1262 + x1263
    x1265 = x118 * x1264
    x1266 = x1259 * x9
    x1267 = 5.0 * x890
    x1268 = x1266 + x1267
    x1269 = x1200 * x20 + x1201 * x20 + x90 * (x1265 + x1268 * x91)
    x1270 = x1257 * x129
    x1271 = x1204 * x20 + x1205 * x20 + x90 * (x1260 * x129 + x1270)
    x1272 = x1207 * x20 + x1208 * x20 + x90 * (x123 * x1268 + x902 * x97)
    x1273 = x1210 * x20 + x1211 * x20 + x129 * x90 * (x1266 + x1267)
    x1274 = x1213 * x20 + x1214 * x20 + x1259 * x145
    x1275 = x149 * x917 + 3.0 * x628 - x9 * x914
    x1276 = x1275 * x6
    x1277 = x149 * x913 - x390 * x919 + 3.0 * x637
    x1278 = -x113 * x1277 + x1275 * x5
    x1279 = x90 * x91 * (2.0 * x1276 + x1278 * x4)
    x1280 = x1194 * x21 + x1217 * x20 + x1279
    x1281 = x1275 * x9 + 4.0 * x922
    x1282 = x1278 * x9 + x72 * x918
    x1283 = x90 * (x118 * x1281 + x1282 * x91)
    x1284 = x1200 * x21 + x1221 * x20 + x1283
    x1285 = x12 * x1275 + x892
    x1286 = x12 * x1278 + x890
    x1287 = x90 * (x118 * x1285 + x1286 * x91)
    x1288 = x1204 * x21 + x1225 * x20 + x1287
    x1289 = x90 * (x103 * x928 + x123 * x1282)
    x1290 = x1207 * x21 + x1228 * x20 + x1289
    x1291 = x90 * (x103 * x933 + x123 * x1286)
    x1292 = x1210 * x21 + x1231 * x20 + x1291
    x1293 = x129 * x90 * (x1286 + x890)
    x1294 = x1213 * x21 + x1234 * x20 + x1293
    x1295 = x149 * x951 + 2.0 * x674 - x9 * x948
    x1296 = x1295 * x6
    x1297 = x149 * x947 - x390 * x953 + 2.0 * x683
    x1298 = -x113 * x1297 + x1295 * x5
    x1299 = x90 * x91 * (2.0 * x1296 + x1298 * x4)
    x1300 = x1216 * x21 + x1299
    x1301 = x1217 * x21 + x1300
    x1302 = 3.0 * x955
    x1303 = x1295 * x9 + x1302
    x1304 = x55 * x952
    x1305 = x1298 * x9 + x1304
    x1306 = x90 * (x118 * x1303 + x1305 * x91)
    x1307 = x1220 * x21 + x1306
    x1308 = x1221 * x21 + x1307
    x1309 = x12 * x1295 + 2.0 * x922
    x1310 = x12 * x1298 + x921
    x1311 = x90 * (x118 * x1309 + x1310 * x91)
    x1312 = x1224 * x21 + x1311
    x1313 = x1225 * x21 + x1312
    x1314 = x90 * (x107 * x961 + x123 * x1305)
    x1315 = x1227 * x21 + x1314
    x1316 = x1228 * x21 + x1315
    x1317 = x107 * x966
    x1318 = x90 * (x123 * x1310 + x1317)
    x1319 = x1230 * x21 + x1318
    x1320 = x1231 * x21 + x1319
    x1321 = x90 * (x129 * x1310 + x934)
    x1322 = x1233 * x21 + x1321
    x1323 = x1234 * x21 + x1322
    x1324 = x149 * x983 + x716 - x9 * x980
    x1325 = x1324 * x6
    x1326 = x149 * x979 - x390 * x985 + x725
    x1327 = -x113 * x1326 + x1324 * x5
    x1328 = x90 * x91 * (2.0 * x1325 + x1327 * x4)
    x1329 = x1236 * x21 + x1328
    x1330 = x1237 * x21 + x1329
    x1331 = x1324 * x9 + 2.0 * x988
    x1332 = x1327 * x9 + x987
    x1333 = x90 * (x118 * x1331 + x1332 * x91)
    x1334 = x1240 * x21 + x1333
    x1335 = x1241 * x21 + x1334
    x1336 = x12 * x1324 + x1302
    x1337 = x12 * x1327 + x1304
    x1338 = x90 * (x118 * x1336 + x1337 * x91)
    x1339 = x1244 * x21 + x1338
    x1340 = x1245 * x21 + x1339
    x1341 = x90 * (x123 * x1332 + x995)
    x1342 = x1247 * x21 + x1341
    x1343 = x1248 * x21 + x1342
    x1344 = x90 * (x1001 + x123 * x1337)
    x1345 = x1250 * x21 + x1344
    x1346 = x1251 * x21 + x1345
    x1347 = x90 * (x129 * x1337 + x1317)
    x1348 = x1253 * x21 + x1347
    x1349 = x1254 * x21 + x1348
    x1350 = x0 * x792 + x463
    x1351 = x91 * (x790 + x791)
    x1352 = x0 * x796 + x473
    x1353 = x1015 + x441 * x9
    x1354 = x118 * x1353 + x794 * x91
    x1355 = x0 * x800 + x482
    x1356 = x12 * x441 + x756
    x1357 = x118 * x1356 + x798 * x91
    x1358 = x0 * x802 + x488
    x1359 = x123 * (x309 + x794)
    x1360 = x0 * x804 + x493
    x1361 = x1020 * x118 + x123 * x798
    x1362 = x0 * x806 + x498
    x1363 = x129 * (x202 + x798)
    x1364 = x1179 + x1351 * x206
    x1365 = x1183 + x1354 * x206
    x1366 = x1186 + x1357 * x206
    x1367 = x1188 + x1359 * x206
    x1368 = x1190 + x1361 * x206
    x1369 = x1192 + x1363 * x206
    x1370 = x90 * x91 * (x857 + x858)
    x1371 = x1351 * x313 + x1370
    x1372 = x1041 + x675 * x9
    x1373 = x90 * (x118 * x1372 + x862 * x91)
    x1374 = x1354 * x313 + x1373
    x1375 = x1181 + x12 * x675
    x1376 = x90 * (x118 * x1375 + x867 * x91)
    x1377 = x1357 * x313 + x1376
    x1378 = x123 * x90 * (x533 + x862)
    x1379 = x1359 * x313 + x1378
    x1380 = x90 * (x1048 * x118 + x123 * x867)
    x1381 = x1361 * x313 + x1380
    x1382 = x90 * (x129 * x867 + x799)
    x1383 = x1363 * x313 + x1382
    x1384 = x1179 * x20 + x1216
    x1385 = x1364 * x20 + x1384
    x1386 = x1183 * x20 + x1220
    x1387 = x1365 * x20 + x1386
    x1388 = x1186 * x20 + x1224
    x1389 = x1366 * x20 + x1388
    x1390 = x1188 * x20 + x1227
    x1391 = x1367 * x20 + x1390
    x1392 = x1190 * x20 + x1230
    x1393 = x1368 * x20 + x1392
    x1394 = x1192 * x20 + x1233
    x1395 = x1369 * x20 + x1394
    x1396 = x1237 + x1371 * x20
    x1397 = x1241 + x1374 * x20
    x1398 = x1245 + x1377 * x20
    x1399 = x1248 + x1379 * x20
    x1400 = x1251 + x1381 * x20
    x1401 = x1254 + x1383 * x20
    x1402 = x90 * x91 * (x988 + x989)
    x1403 = x1370 * x21 + x1402
    x1404 = x1371 * x21 + x1403
    x1405 = x1081 + x9 * x983
    x1406 = x90 * (x118 * x1405 + x91 * x994)
    x1407 = x1373 * x21 + x1406
    x1408 = x1374 * x21 + x1407
    x1409 = x12 * x983 + 3.0 * x857
    x1410 = x90 * (x1000 * x91 + x118 * x1409)
    x1411 = x1376 * x21 + x1410
    x1412 = x1377 * x21 + x1411
    x1413 = x123 * x90 * (x732 + x994)
    x1414 = x1378 * x21 + x1413
    x1415 = x1379 * x21 + x1414
    x1416 = x90 * (x1000 * x123 + x1090 * x118)
    x1417 = x1380 * x21 + x1416
    x1418 = x1381 * x21 + x1417
    x1419 = x90 * (x1000 * x129 + x107 * x867)
    x1420 = x1382 * x21 + x1419
    x1421 = x1383 * x21 + x1420
    x1422 = x1216 * x20 + x1279 + x1384 * x20
    x1423 = x1220 * x20 + x1283 + x1386 * x20
    x1424 = x1224 * x20 + x1287 + x1388 * x20
    x1425 = x1227 * x20 + x1289 + x1390 * x20
    x1426 = x1230 * x20 + x1291 + x1392 * x20
    x1427 = x1233 * x20 + x1293 + x1394 * x20
    x1428 = x1237 * x20 + x1300
    x1429 = x1241 * x20 + x1307
    x1430 = x1245 * x20 + x1312
    x1431 = x1248 * x20 + x1315
    x1432 = x1251 * x20 + x1319
    x1433 = x1254 * x20 + x1322
    x1434 = -x1122 * x9 + x1125 * x149
    x1435 = x1434 * x6
    x1436 = x1121 * x149 - x1127 * x390
    x1437 = -x113 * x1436 + x1434 * x5
    x1438 = x1402 * x21 + x90 * x91 * (2.0 * x1435 + x1437 * x4)
    x1439 = x1403 * x21 + x1438
    x1440 = x1132 + x1434 * x9
    x1441 = x1130 + x1437 * x9
    x1442 = x1406 * x21 + x90 * (x118 * x1440 + x1441 * x91)
    x1443 = x1407 * x21 + x1442
    x1444 = x12 * x1434 + 4.0 * x988
    x1445 = x12 * x1437 + x72 * x984
    x1446 = x1410 * x21 + x90 * (x118 * x1444 + x1445 * x91)
    x1447 = x1411 * x21 + x1446
    x1448 = x123 * x90 * (x1130 + x1441) + x1413 * x21
    x1449 = x1414 * x21 + x1448
    x1450 = x1416 * x21 + x90 * (x1140 * x118 + x123 * x1445)
    x1451 = x1417 * x21 + x1450
    x1452 = x1419 * x21 + x90 * (x1000 * x103 + x129 * x1445)
    x1453 = x1420 * x21 + x1452
    x1454 = x0 * x1044 + x536
    x1455 = x91 * (x1041 + x1043)
    x1456 = x0 * x1046 + x549
    x1457 = x1041 * x123
    x1458 = x1042 * x123 + x1457
    x1459 = x0 * x1049 + x557
    x1460 = 2.0 * x1015 + x12 * x509
    x1461 = x118 * x1460
    x1462 = x1048 * x91 + x1461
    x1463 = x0 * x1051 + x563
    x1464 = x135 * x511
    x1465 = x0 * x1053 + x568
    x1466 = x1048 * x140
    x1467 = x0 * x1055 + x573
    x1468 = x1021 + x1048 * x129
    x1469 = x1044 * x20 + x859
    x1470 = x1370 + x1455 * x206
    x1471 = x1046 * x20 + x864
    x1472 = x1373 + x1458 * x206
    x1473 = x1049 * x20 + x869
    x1474 = x1376 + x1462 * x206
    x1475 = x1051 * x20 + x872
    x1476 = x1378 + x1464 * x20
    x1477 = x1053 * x20 + x875
    x1478 = x1380 + x1466 * x20
    x1479 = x1055 * x20 + x878
    x1480 = x1382 + x1468 * x206
    x1481 = x90 * x91 * (x1081 + x1083)
    x1482 = x1455 * x313 + x1481
    x1483 = x1081 * x123
    x1484 = x90 * (x1082 * x123 + x1483)
    x1485 = x1458 * x313 + x1484
    x1486 = 3.0 * x1041 + x12 * x717
    x1487 = x118 * x1486
    x1488 = x90 * (x1090 * x91 + x1487)
    x1489 = x1462 * x313 + x1488
    x1490 = x135 * x719
    x1491 = x1464 * x21 + x1490
    x1492 = x1090 * x140
    x1493 = x1466 * x21 + x1492
    x1494 = x90 * (x1048 * x107 + x1090 * x129)
    x1495 = x1468 * x313 + x1494
    x1496 = x1236 + x1370 * x20
    x1497 = x1470 * x20 + x1496
    x1498 = x20 * x859 + x957
    x1499 = x1240 + x1373 * x20
    x1500 = x1472 * x20 + x1499
    x1501 = x20 * x864 + x962
    x1502 = x1244 + x1376 * x20
    x1503 = x1474 * x20 + x1502
    x1504 = x20 * x869 + x967
    x1505 = x1247 + x1378 * x20
    x1506 = x1476 * x20 + x1505
    x1507 = x20 * x872 + x970
    x1508 = x1250 + x1380 * x20
    x1509 = x1478 * x20 + x1508
    x1510 = x20 * x875 + x973
    x1511 = x1253 + x1382 * x20
    x1512 = x1480 * x20 + x1511
    x1513 = x20 * x878 + x976
    x1514 = x1403 + x1482 * x20
    x1515 = x1407 + x1485 * x20
    x1516 = x1411 + x1489 * x20
    x1517 = x1414 + x1491 * x20
    x1518 = x1417 + x1493 * x20
    x1519 = x1420 + x1495 * x20
    x1520 = x90 * x91 * (x1132 + x1134)
    x1521 = x1481 * x21 + x1520
    x1522 = x1482 * x21 + x1521
    x1523 = x1132 * x123
    x1524 = x90 * (x1133 * x123 + x1523)
    x1525 = x1484 * x21 + x1524
    x1526 = x1485 * x21 + x1525
    x1527 = 4.0 * x1081 + x1125 * x12
    x1528 = x118 * x1527
    x1529 = x90 * (x1140 * x91 + x1528)
    x1530 = x1488 * x21 + x1529
    x1531 = x1489 * x21 + x1530
    x1532 = x1126 * x135
    x1533 = x1490 * x21 + x1532
    x1534 = x1491 * x21 + x1533
    x1535 = x1140 * x140
    x1536 = x1492 * x21 + x1535
    x1537 = x1493 * x21 + x1536
    x1538 = x90 * (x103 * x1090 + x1140 * x129)
    x1539 = x1494 * x21 + x1538
    x1540 = x1495 * x21 + x1539
    x1541 = x1236 * x20 + x1299 + x1496 * x20
    x1542 = x1240 * x20 + x1306 + x1499 * x20
    x1543 = x1244 * x20 + x1311 + x1502 * x20
    x1544 = x1247 * x20 + x1314 + x1505 * x20
    x1545 = x1250 * x20 + x1318 + x1508 * x20
    x1546 = x1253 * x20 + x1321 + x1511 * x20
    x1547 = x1329 + x1403 * x20
    x1548 = x1334 + x1407 * x20
    x1549 = x1339 + x1411 * x20
    x1550 = x1342 + x1414 * x20
    x1551 = x1345 + x1417 * x20
    x1552 = x1348 + x1420 * x20
    x1553 = -x1122 * x12 + x1125 * x255 + 4.0 * x716
    x1554 = x1553 * x6
    x1555 = x1121 * x255 - x1127 * x541 + 4.0 * x725
    x1556 = -x113 * x1555 + x1553 * x5
    x1557 = x1556 * x4
    x1558 = x1520 * x21 + x1521 * x21 + x90 * x91 * (2.0 * x1554 + x1557)
    x1559 = x123 * x1554
    x1560 = x1524 * x21 + x1525 * x21 + x90 * (x123 * x1557 + x1559)
    x1561 = 5.0 * x1132 + x12 * x1553
    x1562 = x118 * x1561
    x1563 = 5.0 * x1130 + x12 * x1556
    x1564 = x1529 * x21 + x1530 * x21 + x90 * (x1562 + x1563 * x91)
    x1565 = x135 * x1556 + x1532 * x21 + x1533 * x21
    x1566 = x140 * x1563 + x1535 * x21 + x1536 * x21
    x1567 = x1538 * x21 + x1539 * x21 + x90 * (x1140 * x97 + x129 * x1563)
    x1568 = x0 * x1163 + x811
    x1569 = x134 * x7
    x1570 = x0 * x583
    x1571 = x0 * x1168 + x817
    x1572 = x134 * x4
    x1573 = x1167 * x1572
    x1574 = x0 * x1171 + x820
    x1575 = x12 * x1572
    x1576 = x0 * x1173 + x823
    x1577 = x107 * x1152 + x1167 * x123
    x1578 = x0 * x1175 + x826
    x1579 = x129 * (x1165 + x1166)
    x1580 = x0 * x1177 + x829
    x1581 = x1569 * x885
    x1582 = x20 * x583
    x1583 = x1569 * x1582 + x1581
    x1584 = x1199 * x1572
    x1585 = x1573 * x20 + x1584
    x1586 = x1575 * x885
    x1587 = x1575 * x1582 + x1586
    x1588 = x90 * (x103 * x1167 + x1199 * x123)
    x1589 = x1577 * x206 + x1588
    x1590 = x129 * x90 * (x1197 + x1198)
    x1591 = x1579 * x206 + x1590
    x1592 = x145 * x885
    x1593 = x145 * x1582 + x1592
    x1594 = x1569 * x917
    x1595 = x21 * x583
    x1596 = x1569 * x1595 + x1594
    x1597 = x1219 * x1572
    x1598 = x1573 * x21 + x1597
    x1599 = x1223 * x1572
    x1600 = x1575 * x1595 + x1599
    x1601 = x90 * (x107 * x1182 + x1219 * x123)
    x1602 = x1577 * x313 + x1601
    x1603 = x90 * (x107 * x1185 + x1223 * x123)
    x1604 = x1579 * x313 + x1603
    x1605 = x90 * (x1170 + x1223 * x129)
    x1606 = x145 * x1595 + x1605
    x1607 = x1256 * x1569
    x1608 = x1581 * x20 + x1607
    x1609 = x1583 * x20 + x1608
    x1610 = x1264 * x1572
    x1611 = x1584 * x20 + x1610
    x1612 = x1585 * x20 + x1611
    x1613 = x1256 * x1575
    x1614 = x1586 * x20 + x1613
    x1615 = x1587 * x20 + x1614
    x1616 = x90 * (x1199 * x97 + x123 * x1264)
    x1617 = x1588 * x20 + x1616
    x1618 = x1589 * x20 + x1617
    x1619 = x129 * x90 * (x1262 + x1263)
    x1620 = x1590 * x20 + x1619
    x1621 = x1591 * x20 + x1620
    x1622 = x1256 * x145
    x1623 = x1592 * x20 + x1622
    x1624 = x1593 * x20 + x1623
    x1625 = x1275 * x1569
    x1626 = x1581 * x21 + x1625
    x1627 = x1596 * x20 + x1626
    x1628 = x1281 * x1572
    x1629 = x1584 * x21 + x1628
    x1630 = x1598 * x20 + x1629
    x1631 = x1285 * x1572
    x1632 = x1586 * x21 + x1631
    x1633 = x1600 * x20 + x1632
    x1634 = x90 * (x103 * x1219 + x123 * x1281)
    x1635 = x1588 * x21 + x1634
    x1636 = x1602 * x20 + x1635
    x1637 = x90 * (x103 * x1223 + x123 * x1285)
    x1638 = x1590 * x21 + x1637
    x1639 = x1604 * x20 + x1638
    x1640 = x90 * (x1203 + x1285 * x129)
    x1641 = x1592 * x21 + x1640
    x1642 = x1606 * x20 + x1641
    x1643 = x1295 * x1569
    x1644 = x1594 * x21 + x1643
    x1645 = x1596 * x21 + x1644
    x1646 = x1303 * x1572
    x1647 = x1597 * x21 + x1646
    x1648 = x1598 * x21 + x1647
    x1649 = x1309 * x1572
    x1650 = x1599 * x21 + x1649
    x1651 = x1600 * x21 + x1650
    x1652 = x90 * (x107 * x1239 + x123 * x1303)
    x1653 = x1601 * x21 + x1652
    x1654 = x1602 * x21 + x1653
    x1655 = x107 * x1243
    x1656 = x90 * (x123 * x1309 + x1655)
    x1657 = x1603 * x21 + x1656
    x1658 = x1604 * x21 + x1657
    x1659 = x90 * (x1223 * x419 + x129 * x1309)
    x1660 = x1605 * x21 + x1659
    x1661 = x1606 * x21 + x1660
    x1662 = x1256 * x149 - x1258 * x390 + 5.0 * x884
    x1663 = x1662 * x9
    x1664 = 6.0 * x1257
    x1665 = x1663 + x1664
    x1666 = x1275 * x149 - x1277 * x390 + 4.0 * x916
    x1667 = x1569 * x1666
    x1668 = 5.0 * x1276 + x1666 * x9
    x1669 = x1572 * x1668
    x1670 = x12 * x1666 + x1257
    x1671 = x1572 * x1670
    x1672 = x90 * (x123 * x1668 + x1281 * x97)
    x1673 = x90 * (x123 * x1670 + x1285 * x97)
    x1674 = x90 * (x1270 + x129 * x1670)
    x1675 = x1295 * x149 - x1297 * x390 + 3.0 * x950
    x1676 = x1569 * x1675
    x1677 = x1625 * x21 + x1676
    x1678 = 4.0 * x1296 + x1675 * x9
    x1679 = x1572 * x1678
    x1680 = x1628 * x21 + x1679
    x1681 = x12 * x1675 + 2.0 * x1276
    x1682 = x1572 * x1681
    x1683 = x1631 * x21 + x1682
    x1684 = x90 * (x103 * x1303 + x123 * x1678)
    x1685 = x1634 * x21 + x1684
    x1686 = x90 * (x103 * x1309 + x123 * x1681)
    x1687 = x1637 * x21 + x1686
    x1688 = x90 * (x1285 * x419 + x129 * x1681)
    x1689 = x1640 * x21 + x1688
    x1690 = x1324 * x149 - x1326 * x390 + 2.0 * x982
    x1691 = x1569 * x1690
    x1692 = x1643 * x21 + x1691
    x1693 = x1644 * x21 + x1692
    x1694 = 3.0 * x1325 + x1690 * x9
    x1695 = x1572 * x1694
    x1696 = x1646 * x21 + x1695
    x1697 = x1647 * x21 + x1696
    x1698 = x12 * x1690 + 3.0 * x1296
    x1699 = x1572 * x1698
    x1700 = x1649 * x21 + x1699
    x1701 = x1650 * x21 + x1700
    x1702 = x90 * (x107 * x1331 + x123 * x1694)
    x1703 = x1652 * x21 + x1702
    x1704 = x1653 * x21 + x1703
    x1705 = x90 * (x107 * x1336 + x123 * x1698)
    x1706 = x1656 * x21 + x1705
    x1707 = x1657 * x21 + x1706
    x1708 = x90 * (x107 * x1309 + x129 * x1698)
    x1709 = x1659 * x21 + x1708
    x1710 = x1660 * x21 + x1709
    x1711 = x0 * x1179 + x834
    x1712 = x1569 * x629
    x1713 = x0 * x1183 + x838
    x1714 = x0 * x1572
    x1715 = x0 * x1186 + x844
    x1716 = x0 * x1188 + x847
    x1717 = x1182 * x123 + x1353 * x419
    x1718 = x0 * x1190 + x851
    x1719 = x1356 * x419
    x1720 = x1185 * x123 + x1719
    x1721 = x0 * x1192 + x854
    x1722 = x1155 + x1185 * x129
    x1723 = x1594 + x1712 * x20
    x1724 = x1572 * x20
    x1725 = x1182 * x1724 + x1597
    x1726 = x1185 * x1724 + x1599
    x1727 = x1601 + x1717 * x206
    x1728 = x1603 + x1720 * x206
    x1729 = x1605 + x1722 * x206
    x1730 = x1569 * x951
    x1731 = x1712 * x21 + x1730
    x1732 = x1239 * x1572
    x1733 = x1572 * x21
    x1734 = x1182 * x1733 + x1732
    x1735 = x1243 * x1572
    x1736 = x1185 * x1733 + x1735
    x1737 = x90 * (x123 * x1239 + x1372 * x419)
    x1738 = x1717 * x313 + x1737
    x1739 = x90 * (x123 * x1243 + x1375 * x419)
    x1740 = x1720 * x313 + x1739
    x1741 = x90 * (x1185 * x419 + x1243 * x129)
    x1742 = x1722 * x313 + x1741
    x1743 = x1594 * x20 + x1625
    x1744 = x1723 * x20 + x1743
    x1745 = x1597 * x20 + x1628
    x1746 = x1725 * x20 + x1745
    x1747 = x1599 * x20 + x1631
    x1748 = x1726 * x20 + x1747
    x1749 = x1601 * x20 + x1634
    x1750 = x1727 * x20 + x1749
    x1751 = x1603 * x20 + x1637
    x1752 = x1728 * x20 + x1751
    x1753 = x1605 * x20 + x1640
    x1754 = x1729 * x20 + x1753
    x1755 = x1644 + x1731 * x20
    x1756 = x1647 + x1734 * x20
    x1757 = x1650 + x1736 * x20
    x1758 = x1653 + x1738 * x20
    x1759 = x1657 + x1740 * x20
    x1760 = x1660 + x1742 * x20
    x1761 = x1324 * x1569
    x1762 = x1730 * x21 + x1761
    x1763 = x1731 * x21 + x1762
    x1764 = x1331 * x1572
    x1765 = x1732 * x21 + x1764
    x1766 = x1734 * x21 + x1765
    x1767 = x1336 * x1572
    x1768 = x1735 * x21 + x1767
    x1769 = x1736 * x21 + x1768
    x1770 = x90 * (x123 * x1331 + x1405 * x419)
    x1771 = x1737 * x21 + x1770
    x1772 = x1738 * x21 + x1771
    x1773 = x90 * (x123 * x1336 + x1409 * x419)
    x1774 = x1739 * x21 + x1773
    x1775 = x1740 * x21 + x1774
    x1776 = x90 * (x129 * x1336 + x1655)
    x1777 = x1741 * x21 + x1776
    x1778 = x1742 * x21 + x1777
    x1779 = x1124 + x1434 * x149 - x1436 * x390
    x1780 = x1569 * x1779 + x1761 * x21
    x1781 = x1762 * x21 + x1780
    x1782 = 2.0 * x1435 + x1779 * x9
    x1783 = x1572 * x1782 + x1764 * x21
    x1784 = x1765 * x21 + x1783
    x1785 = x12 * x1779 + 4.0 * x1325
    x1786 = x1572 * x1785 + x1767 * x21
    x1787 = x1768 * x21 + x1786
    x1788 = x1770 * x21 + x90 * (x123 * x1782 + x1440 * x419)
    x1789 = x1771 * x21 + x1788
    x1790 = x1773 * x21 + x90 * (x123 * x1785 + x1444 * x419)
    x1791 = x1774 * x21 + x1790
    x1792 = x1776 * x21 + x90 * (x103 * x1336 + x129 * x1785)
    x1793 = x1777 * x21 + x1792
    x1794 = x0 * x1370 + x859
    x1795 = x1569 * x675
    x1796 = x0 * x1373 + x864
    x1797 = x0 * x1376 + x869
    x1798 = x0 * x1378 + x872
    x1799 = x123 * x1372 + x1457
    x1800 = x0 * x1380 + x875
    x1801 = x123 * x1375 + x1461
    x1802 = x0 * x1382 + x878
    x1803 = x129 * x1375 + x1719
    x1804 = x1730 + x1795 * x20
    x1805 = x1372 * x1724 + x1732
    x1806 = x1375 * x1724 + x1735
    x1807 = x1737 + x1799 * x206
    x1808 = x1739 + x1801 * x206
    x1809 = x1741 + x1803 * x206
    x1810 = x1569 * x983
    x1811 = x1795 * x21 + x1810
    x1812 = x1405 * x1572
    x1813 = x1372 * x1733 + x1812
    x1814 = x1409 * x1572
    x1815 = x1375 * x1733 + x1814
    x1816 = x90 * (x123 * x1405 + x1483)
    x1817 = x1799 * x313 + x1816
    x1818 = x90 * (x123 * x1409 + x1487)
    x1819 = x1801 * x313 + x1818
    x1820 = x90 * (x107 * x1375 + x129 * x1409)
    x1821 = x1803 * x313 + x1820
    x1822 = x1643 + x1730 * x20
    x1823 = x1804 * x20 + x1822
    x1824 = x1646 + x1732 * x20
    x1825 = x1805 * x20 + x1824
    x1826 = x1649 + x1735 * x20
    x1827 = x1806 * x20 + x1826
    x1828 = x1652 + x1737 * x20
    x1829 = x1807 * x20 + x1828
    x1830 = x1656 + x1739 * x20
    x1831 = x1808 * x20 + x1830
    x1832 = x1659 + x1741 * x20
    x1833 = x1809 * x20 + x1832
    x1834 = x1762 + x1811 * x20
    x1835 = x1765 + x1813 * x20
    x1836 = x1768 + x1815 * x20
    x1837 = x1771 + x1817 * x20
    x1838 = x1774 + x1819 * x20
    x1839 = x1777 + x1821 * x20
    x1840 = x1434 * x1569
    x1841 = x1810 * x21 + x1840
    x1842 = x1811 * x21 + x1841
    x1843 = x1440 * x1572
    x1844 = x1812 * x21 + x1843
    x1845 = x1813 * x21 + x1844
    x1846 = x1444 * x1572
    x1847 = x1814 * x21 + x1846
    x1848 = x1815 * x21 + x1847
    x1849 = x90 * (x123 * x1440 + x1523)
    x1850 = x1816 * x21 + x1849
    x1851 = x1817 * x21 + x1850
    x1852 = x90 * (x123 * x1444 + x1528)
    x1853 = x1818 * x21 + x1852
    x1854 = x1819 * x21 + x1853
    x1855 = x90 * (x103 * x1409 + x129 * x1444)
    x1856 = x1820 * x21 + x1855
    x1857 = x1821 * x21 + x1856
    x1858 = x149 * x1553 - x1555 * x390
    x1859 = x1569 * x1858 + x1840 * x21 + x1841 * x21
    x1860 = x1554 + x1858 * x9
    x1861 = x1572 * x1860 + x1843 * x21 + x1844 * x21
    x1862 = x12 * x1858 + 5.0 * x1435
    x1863 = x1572 * x1862 + x1846 * x21 + x1847 * x21
    x1864 = x1849 * x21 + x1850 * x21 + x90 * (x123 * x1860 + x1559)
    x1865 = x1852 * x21 + x1853 * x21 + x90 * (x123 * x1862 + x1562)
    x1866 = x1855 * x21 + x1856 * x21 + x90 * (x129 * x1862 + x1444 * x97)
    x1867 = x0 * x1481 + x1084
    x1868 = x0 * x717
    x1869 = x0 * x1484 + x1087
    x1870 = x140 * x4
    x1871 = x0 * x1488 + x1091
    x1872 = x0 * x1490 + x1094
    x1873 = x0 * x1492 + x1097
    x1874 = x140 * x1486
    x1875 = x0 * x1494 + x1100
    x1876 = x107 * x1460 + x129 * x1486
    x1877 = x1402 + x1481 * x20
    x1878 = x20 * x717
    x1879 = x1569 * x1878 + x1810
    x1880 = x1406 + x1484 * x20
    x1881 = x1812 + x1870 * x1878
    x1882 = x1410 + x1488 * x20
    x1883 = x1486 * x1724 + x1814
    x1884 = x1413 + x1490 * x20
    x1885 = x135 * x1878 + x1816
    x1886 = x1416 + x1492 * x20
    x1887 = x1818 + x1874 * x20
    x1888 = x1419 + x1494 * x20
    x1889 = x1820 + x1876 * x206
    x1890 = x1125 * x1569
    x1891 = x21 * x717
    x1892 = x1569 * x1891 + x1890
    x1893 = x1125 * x1870
    x1894 = x1870 * x1891 + x1893
    x1895 = x1527 * x1572
    x1896 = x1486 * x1733 + x1895
    x1897 = x1125 * x135
    x1898 = x135 * x1891 + x1897
    x1899 = x140 * x1527
    x1900 = x1874 * x21 + x1899
    x1901 = x90 * (x103 * x1486 + x129 * x1527)
    x1902 = x1876 * x313 + x1901
    x1903 = x1761 + x1810 * x20
    x1904 = x1879 * x20 + x1903
    x1905 = x1764 + x1812 * x20
    x1906 = x1881 * x20 + x1905
    x1907 = x1767 + x1814 * x20
    x1908 = x1883 * x20 + x1907
    x1909 = x1770 + x1816 * x20
    x1910 = x1885 * x20 + x1909
    x1911 = x1773 + x1818 * x20
    x1912 = x1887 * x20 + x1911
    x1913 = x1776 + x1820 * x20
    x1914 = x1889 * x20 + x1913
    x1915 = x1841 + x1892 * x20
    x1916 = x1844 + x1894 * x20
    x1917 = x1847 + x1896 * x20
    x1918 = x1850 + x1898 * x20
    x1919 = x1853 + x1900 * x20
    x1920 = x1856 + x1902 * x20
    x1921 = x1553 * x1569
    x1922 = x1890 * x21 + x1921
    x1923 = x1892 * x21 + x1922
    x1924 = x1553 * x1870
    x1925 = x1893 * x21 + x1924
    x1926 = x1894 * x21 + x1925
    x1927 = x1561 * x1572
    x1928 = x1895 * x21 + x1927
    x1929 = x1896 * x21 + x1928
    x1930 = x135 * x1553
    x1931 = x1897 * x21 + x1930
    x1932 = x1898 * x21 + x1931
    x1933 = x140 * x1561
    x1934 = x1899 * x21 + x1933
    x1935 = x1900 * x21 + x1934
    x1936 = x90 * (x129 * x1561 + x1527 * x97)
    x1937 = x1901 * x21 + x1936
    x1938 = x1902 * x21 + x1937
    x1939 = 5.0 * x1124 + x1553 * x255 - x1555 * x541
    x1940 = x12 * x1939 + 6.0 * x1554

    # 600 item(s)
    result[0, 0, 0] = numpy.sum(
        x122
        * (
            x0 * x105
            + x0 * x98
            + x0 * (x0 * (x104 + x108 * x109) + x105)
            + x90 * (6.0 * x118 * x89 + x91 * (x115 + x117))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x128
        * (
            x0 * x124
            + x0 * x126
            + x0 * (x0 * (x109 * x127 + x125) + x126)
            + x123 * x90 * (x115 + x117)
        )
    )
    result[0, 0, 2] = numpy.sum(
        x128
        * (
            x0 * x130
            + x0 * x132
            + x0 * (x0 * (x109 * x133 + x131) + x132)
            + x129 * x90 * (x115 + x117)
        )
    )
    result[0, 0, 3] = numpy.sum(
        x122
        * (x0 * x136 + x0 * x138 + x0 * (x0 * (x135 * x139 + x137) + x138) + x114 * x135)
    )
    result[0, 0, 4] = numpy.sum(
        x128
        * (x0 * x142 + x0 * x144 + x0 * (x0 * (x139 * x141 + x143) + x144) + x114 * x141)
    )
    result[0, 0, 5] = numpy.sum(
        x122
        * (x0 * x146 + x0 * x148 + x0 * (x0 * (x139 * x145 + x147) + x148) + x114 * x145)
    )
    result[0, 1, 0] = numpy.sum(
        x216 * (x0 * x200 + x0 * (x0 * x207 + x200) + x20 * x98 + x214)
    )
    result[0, 1, 1] = numpy.sum(
        x230 * (x0 * x222 + x0 * (x0 * x226 + x222) + x124 * x20 + x229)
    )
    result[0, 1, 2] = numpy.sum(
        x230 * (x0 * x232 + x0 * (x0 * x234 + x232) + x130 * x20 + x235)
    )
    result[0, 1, 3] = numpy.sum(
        x216 * (x0 * x237 + x0 * (x0 * x240 + x237) + x136 * x20 + x241)
    )
    result[0, 1, 4] = numpy.sum(
        x230 * (x0 * x244 + x0 * (x0 * x247 + x244) + x142 * x20 + x249)
    )
    result[0, 1, 5] = numpy.sum(
        x216 * (x0 * x251 + x0 * (x0 * x253 + x251) + x146 * x20 + x254)
    )
    result[0, 2, 0] = numpy.sum(
        x216 * (x0 * x307 + x0 * (x0 * x314 + x307) + x21 * x98 + x322)
    )
    result[0, 2, 1] = numpy.sum(
        x230 * (x0 * x324 + x0 * (x0 * x326 + x324) + x124 * x21 + x327)
    )
    result[0, 2, 2] = numpy.sum(
        x230 * (x0 * x331 + x0 * (x0 * x334 + x331) + x130 * x21 + x336)
    )
    result[0, 2, 3] = numpy.sum(
        x216 * (x0 * x338 + x0 * (x0 * x341 + x338) + x136 * x21 + x342)
    )
    result[0, 2, 4] = numpy.sum(
        x230 * (x0 * x344 + x0 * (x0 * x346 + x344) + x142 * x21 + x347)
    )
    result[0, 2, 5] = numpy.sum(
        x216 * (x0 * x349 + x0 * (x0 * x351 + x349) + x146 * x21 + x352)
    )
    result[0, 3, 0] = numpy.sum(x216 * (x0 * x388 + x20 * x200 + x397))
    result[0, 3, 1] = numpy.sum(x230 * (x0 * x407 + x20 * x222 + x412))
    result[0, 3, 2] = numpy.sum(x230 * (x0 * x416 + x20 * x232 + x418))
    result[0, 3, 3] = numpy.sum(x216 * (x0 * x422 + x20 * x237 + x424))
    result[0, 3, 4] = numpy.sum(x230 * (x0 * x427 + x20 * x244 + x429))
    result[0, 3, 5] = numpy.sum(x216 * (x0 * x432 + x20 * x251 + x434))
    result[0, 4, 0] = numpy.sum(x230 * (x0 * x465 + x20 * x307 + x470))
    result[0, 4, 1] = numpy.sum(x479 * (x0 * x475 + x20 * x324 + x478))
    result[0, 4, 2] = numpy.sum(x479 * (x0 * x484 + x20 * x331 + x487))
    result[0, 4, 3] = numpy.sum(x230 * (x0 * x490 + x20 * x338 + x492))
    result[0, 4, 4] = numpy.sum(x479 * (x0 * x495 + x20 * x344 + x497))
    result[0, 4, 5] = numpy.sum(x230 * (x0 * x500 + x20 * x349 + x502))
    result[0, 5, 0] = numpy.sum(x216 * (x0 * x538 + x21 * x307 + x548))
    result[0, 5, 1] = numpy.sum(x230 * (x0 * x551 + x21 * x324 + x553))
    result[0, 5, 2] = numpy.sum(x230 * (x0 * x559 + x21 * x331 + x562))
    result[0, 5, 3] = numpy.sum(x216 * (x0 * x565 + x21 * x338 + x567))
    result[0, 5, 4] = numpy.sum(x230 * (x0 * x570 + x21 * x344 + x572))
    result[0, 5, 5] = numpy.sum(x216 * (x0 * x575 + x21 * x349 + x577))
    result[0, 6, 0] = numpy.sum(x122 * (x20 * x388 + x603))
    result[0, 6, 1] = numpy.sum(x128 * (x20 * x407 + x611))
    result[0, 6, 2] = numpy.sum(x128 * (x20 * x416 + x614))
    result[0, 6, 3] = numpy.sum(x122 * (x20 * x422 + x617))
    result[0, 6, 4] = numpy.sum(x128 * (x20 * x427 + x620))
    result[0, 6, 5] = numpy.sum(x122 * (x20 * x432 + x623))
    result[0, 7, 0] = numpy.sum(x216 * (x20 * x465 + x645))
    result[0, 7, 1] = numpy.sum(x230 * (x20 * x475 + x653))
    result[0, 7, 2] = numpy.sum(x230 * (x20 * x484 + x659))
    result[0, 7, 3] = numpy.sum(x216 * (x20 * x490 + x662))
    result[0, 7, 4] = numpy.sum(x230 * (x20 * x495 + x666))
    result[0, 7, 5] = numpy.sum(x216 * (x20 * x500 + x669))
    result[0, 8, 0] = numpy.sum(x216 * (x20 * x538 + x691))
    result[0, 8, 1] = numpy.sum(x230 * (x20 * x551 + x696))
    result[0, 8, 2] = numpy.sum(x230 * (x20 * x559 + x702))
    result[0, 8, 3] = numpy.sum(x216 * (x20 * x565 + x705))
    result[0, 8, 4] = numpy.sum(x230 * (x20 * x570 + x708))
    result[0, 8, 5] = numpy.sum(x216 * (x20 * x575 + x711))
    result[0, 9, 0] = numpy.sum(x122 * (x21 * x538 + x737))
    result[0, 9, 1] = numpy.sum(x128 * (x21 * x551 + x740))
    result[0, 9, 2] = numpy.sum(x128 * (x21 * x559 + x745))
    result[0, 9, 3] = numpy.sum(x122 * (x21 * x565 + x748))
    result[0, 9, 4] = numpy.sum(x128 * (x21 * x570 + x751))
    result[0, 9, 5] = numpy.sum(x122 * (x21 * x575 + x754))
    result[1, 0, 0] = numpy.sum(
        x216 * (x0 * x199 + x0 * x755 + x0 * (x0 * (x109 * x757 + x205) + x755) + x214)
    )
    result[1, 0, 1] = numpy.sum(
        x230 * (x0 * x221 + x0 * x758 + x0 * (x0 * (x109 * x760 + x225) + x758) + x229)
    )
    result[1, 0, 2] = numpy.sum(
        x230 * (x0 * x231 + x0 * x761 + x0 * (x0 * (x109 * x763 + x233) + x761) + x235)
    )
    result[1, 0, 3] = numpy.sum(
        x216 * (x0 * x236 + x0 * x764 + x0 * (x0 * (x109 * x765 + x238) + x764) + x241)
    )
    result[1, 0, 4] = numpy.sum(
        x230 * (x0 * x243 + x0 * x766 + x0 * (x0 * (x109 * x768 + x246) + x766) + x249)
    )
    result[1, 0, 5] = numpy.sum(
        x216 * (x0 * x250 + x0 * x769 + x0 * (x0 * (x0 * x770 + x252) + x769) + x254)
    )
    result[1, 1, 0] = numpy.sum(x776 * (x0 * x387 + x0 * (x0 * x775 + x387) + x397))
    result[1, 1, 1] = numpy.sum(x781 * (x0 * x406 + x0 * (x0 * x780 + x406) + x412))
    result[1, 1, 2] = numpy.sum(x781 * (x0 * x415 + x0 * (x0 * x783 + x415) + x418))
    result[1, 1, 3] = numpy.sum(x776 * (x0 * x421 + x0 * (x0 * x785 + x421) + x424))
    result[1, 1, 4] = numpy.sum(x781 * (x0 * x426 + x0 * (x0 * x787 + x426) + x429))
    result[1, 1, 5] = numpy.sum(x776 * (x0 * x431 + x0 * (x0 * x789 + x431) + x434))
    result[1, 2, 0] = numpy.sum(x776 * (x0 * x464 + x0 * (x0 * x793 + x464) + x470))
    result[1, 2, 1] = numpy.sum(x781 * (x0 * x474 + x0 * (x0 * x797 + x474) + x478))
    result[1, 2, 2] = numpy.sum(x781 * (x0 * x483 + x0 * (x0 * x801 + x483) + x487))
    result[1, 2, 3] = numpy.sum(x776 * (x0 * x489 + x0 * (x0 * x803 + x489) + x492))
    result[1, 2, 4] = numpy.sum(x781 * (x0 * x494 + x0 * (x0 * x805 + x494) + x497))
    result[1, 2, 5] = numpy.sum(x776 * (x0 * x499 + x0 * (x0 * x807 + x499) + x502))
    result[1, 3, 0] = numpy.sum(x776 * (x0 * x813 + x603))
    result[1, 3, 1] = numpy.sum(x781 * (x0 * x819 + x611))
    result[1, 3, 2] = numpy.sum(x781 * (x0 * x822 + x614))
    result[1, 3, 3] = numpy.sum(x776 * (x0 * x825 + x617))
    result[1, 3, 4] = numpy.sum(x781 * (x0 * x828 + x620))
    result[1, 3, 5] = numpy.sum(x776 * (x0 * x831 + x623))
    result[1, 4, 0] = numpy.sum(x781 * (x0 * x836 + x645))
    result[1, 4, 1] = numpy.sum(x841 * (x0 * x840 + x653))
    result[1, 4, 2] = numpy.sum(x841 * (x0 * x846 + x659))
    result[1, 4, 3] = numpy.sum(x781 * (x0 * x849 + x662))
    result[1, 4, 4] = numpy.sum(x841 * (x0 * x853 + x666))
    result[1, 4, 5] = numpy.sum(x781 * (x0 * x856 + x669))
    result[1, 5, 0] = numpy.sum(x776 * (x0 * x861 + x691))
    result[1, 5, 1] = numpy.sum(x781 * (x0 * x866 + x696))
    result[1, 5, 2] = numpy.sum(x781 * (x0 * x871 + x702))
    result[1, 5, 3] = numpy.sum(x776 * (x0 * x874 + x705))
    result[1, 5, 4] = numpy.sum(x781 * (x0 * x877 + x708))
    result[1, 5, 5] = numpy.sum(x776 * (x0 * x880 + x711))
    result[1, 6, 0] = numpy.sum(x216 * (x20 * x813 + x896))
    result[1, 6, 1] = numpy.sum(x230 * (x20 * x819 + x904))
    result[1, 6, 2] = numpy.sum(x230 * (x20 * x822 + x906))
    result[1, 6, 3] = numpy.sum(x216 * (x20 * x825 + x908))
    result[1, 6, 4] = numpy.sum(x230 * (x20 * x828 + x910))
    result[1, 6, 5] = numpy.sum(x216 * (x20 * x831 + x912))
    result[1, 7, 0] = numpy.sum(x776 * (x20 * x836 + x926))
    result[1, 7, 1] = numpy.sum(x781 * (x20 * x840 + x931))
    result[1, 7, 2] = numpy.sum(x781 * (x20 * x846 + x937))
    result[1, 7, 3] = numpy.sum(x776 * (x20 * x849 + x940))
    result[1, 7, 4] = numpy.sum(x781 * (x20 * x853 + x943))
    result[1, 7, 5] = numpy.sum(x776 * (x20 * x856 + x946))
    result[1, 8, 0] = numpy.sum(x776 * (x20 * x861 + x959))
    result[1, 8, 1] = numpy.sum(x781 * (x20 * x866 + x964))
    result[1, 8, 2] = numpy.sum(x781 * (x20 * x871 + x969))
    result[1, 8, 3] = numpy.sum(x776 * (x20 * x874 + x972))
    result[1, 8, 4] = numpy.sum(x781 * (x20 * x877 + x975))
    result[1, 8, 5] = numpy.sum(x776 * (x20 * x880 + x978))
    result[1, 9, 0] = numpy.sum(x216 * (x21 * x861 + x992))
    result[1, 9, 1] = numpy.sum(x230 * (x21 * x866 + x998))
    result[1, 9, 2] = numpy.sum(x230 * (x1004 + x21 * x871))
    result[1, 9, 3] = numpy.sum(x216 * (x1007 + x21 * x874))
    result[1, 9, 4] = numpy.sum(x230 * (x1010 + x21 * x877))
    result[1, 9, 5] = numpy.sum(x216 * (x1013 + x21 * x880))
    result[2, 0, 0] = numpy.sum(
        x216 * (x0 * x1014 + x0 * x306 + x0 * (x0 * (x1016 * x109 + x312) + x1014) + x322)
    )
    result[2, 0, 1] = numpy.sum(
        x230 * (x0 * x1017 + x0 * x323 + x0 * (x0 * (x1018 * x109 + x325) + x1017) + x327)
    )
    result[2, 0, 2] = numpy.sum(
        x230 * (x0 * x1019 + x0 * x330 + x0 * (x0 * (x1022 * x109 + x333) + x1019) + x336)
    )
    result[2, 0, 3] = numpy.sum(
        x216 * (x0 * x1023 + x0 * x337 + x0 * (x0 * (x0 * x1024 + x339) + x1023) + x342)
    )
    result[2, 0, 4] = numpy.sum(
        x230 * (x0 * x1025 + x0 * x343 + x0 * (x0 * (x0 * x1026 + x345) + x1025) + x347)
    )
    result[2, 0, 5] = numpy.sum(
        x216 * (x0 * x1027 + x0 * x348 + x0 * (x0 * (x1028 * x109 + x350) + x1027) + x352)
    )
    result[2, 1, 0] = numpy.sum(
        x776 * (x0 * x1029 + x0 * (x0 * x1030 + x1029) + x20 * x306 + x469)
    )
    result[2, 1, 1] = numpy.sum(
        x781 * (x0 * x1031 + x0 * (x0 * x1032 + x1031) + x20 * x323 + x477)
    )
    result[2, 1, 2] = numpy.sum(
        x781 * (x0 * x1033 + x0 * (x0 * x1034 + x1033) + x20 * x330 + x486)
    )
    result[2, 1, 3] = numpy.sum(
        x776 * (x0 * x1035 + x0 * (x0 * x1036 + x1035) + x20 * x337 + x491)
    )
    result[2, 1, 4] = numpy.sum(
        x781 * (x0 * x1037 + x0 * (x0 * x1038 + x1037) + x20 * x343 + x496)
    )
    result[2, 1, 5] = numpy.sum(
        x776 * (x0 * x1039 + x0 * (x0 * x1040 + x1039) + x20 * x348 + x501)
    )
    result[2, 2, 0] = numpy.sum(x776 * (x0 * x537 + x0 * (x0 * x1045 + x537) + x548))
    result[2, 2, 1] = numpy.sum(x781 * (x0 * x550 + x0 * (x0 * x1047 + x550) + x553))
    result[2, 2, 2] = numpy.sum(x781 * (x0 * x558 + x0 * (x0 * x1050 + x558) + x562))
    result[2, 2, 3] = numpy.sum(x776 * (x0 * x564 + x0 * (x0 * x1052 + x564) + x567))
    result[2, 2, 4] = numpy.sum(x781 * (x0 * x569 + x0 * (x0 * x1054 + x569) + x572))
    result[2, 2, 5] = numpy.sum(x776 * (x0 * x574 + x0 * (x0 * x1056 + x574) + x577))
    result[2, 3, 0] = numpy.sum(x776 * (x0 * x1058 + x1029 * x20 + x1059))
    result[2, 3, 1] = numpy.sum(x781 * (x0 * x1061 + x1031 * x20 + x1062))
    result[2, 3, 2] = numpy.sum(x781 * (x0 * x1064 + x1033 * x20 + x1065))
    result[2, 3, 3] = numpy.sum(x776 * (x0 * x1067 + x1035 * x20 + x1068))
    result[2, 3, 4] = numpy.sum(x781 * (x0 * x1070 + x1037 * x20 + x1071))
    result[2, 3, 5] = numpy.sum(x776 * (x0 * x1073 + x1039 * x20 + x1074))
    result[2, 4, 0] = numpy.sum(x781 * (x0 * x1075 + x20 * x537 + x690))
    result[2, 4, 1] = numpy.sum(x841 * (x0 * x1076 + x20 * x550 + x695))
    result[2, 4, 2] = numpy.sum(x841 * (x0 * x1077 + x20 * x558 + x701))
    result[2, 4, 3] = numpy.sum(x781 * (x0 * x1078 + x20 * x564 + x704))
    result[2, 4, 4] = numpy.sum(x841 * (x0 * x1079 + x20 * x569 + x707))
    result[2, 4, 5] = numpy.sum(x781 * (x0 * x1080 + x20 * x574 + x710))
    result[2, 5, 0] = numpy.sum(x776 * (x0 * x1086 + x737))
    result[2, 5, 1] = numpy.sum(x781 * (x0 * x1089 + x740))
    result[2, 5, 2] = numpy.sum(x781 * (x0 * x1093 + x745))
    result[2, 5, 3] = numpy.sum(x776 * (x0 * x1096 + x748))
    result[2, 5, 4] = numpy.sum(x781 * (x0 * x1099 + x751))
    result[2, 5, 5] = numpy.sum(x776 * (x0 * x1102 + x754))
    result[2, 6, 0] = numpy.sum(x216 * (x1058 * x20 + x1104))
    result[2, 6, 1] = numpy.sum(x230 * (x1061 * x20 + x1106))
    result[2, 6, 2] = numpy.sum(x230 * (x1064 * x20 + x1108))
    result[2, 6, 3] = numpy.sum(x216 * (x1067 * x20 + x1110))
    result[2, 6, 4] = numpy.sum(x230 * (x1070 * x20 + x1112))
    result[2, 6, 5] = numpy.sum(x216 * (x1073 * x20 + x1114))
    result[2, 7, 0] = numpy.sum(x776 * (x1075 * x20 + x1115))
    result[2, 7, 1] = numpy.sum(x781 * (x1076 * x20 + x1116))
    result[2, 7, 2] = numpy.sum(x781 * (x1077 * x20 + x1117))
    result[2, 7, 3] = numpy.sum(x776 * (x1078 * x20 + x1118))
    result[2, 7, 4] = numpy.sum(x781 * (x1079 * x20 + x1119))
    result[2, 7, 5] = numpy.sum(x776 * (x1080 * x20 + x1120))
    result[2, 8, 0] = numpy.sum(x776 * (x1086 * x20 + x992))
    result[2, 8, 1] = numpy.sum(x781 * (x1089 * x20 + x998))
    result[2, 8, 2] = numpy.sum(x781 * (x1004 + x1093 * x20))
    result[2, 8, 3] = numpy.sum(x776 * (x1007 + x1096 * x20))
    result[2, 8, 4] = numpy.sum(x781 * (x1010 + x1099 * x20))
    result[2, 8, 5] = numpy.sum(x776 * (x1013 + x1102 * x20))
    result[2, 9, 0] = numpy.sum(x216 * (x1086 * x21 + x1136))
    result[2, 9, 1] = numpy.sum(x230 * (x1089 * x21 + x1138))
    result[2, 9, 2] = numpy.sum(x230 * (x1093 * x21 + x1142))
    result[2, 9, 3] = numpy.sum(x216 * (x1096 * x21 + x1144))
    result[2, 9, 4] = numpy.sum(x230 * (x1099 * x21 + x1146))
    result[2, 9, 5] = numpy.sum(x216 * (x1102 * x21 + x1148))
    result[3, 0, 0] = numpy.sum(
        x216 * (x0 * x1149 + x0 * x386 + x0 * (x0 * (x109 * x1150 + x774) + x1149) + x396)
    )
    result[3, 0, 1] = numpy.sum(
        x230 * (x0 * x1151 + x0 * x405 + x0 * (x0 * (x109 * x1153 + x779) + x1151) + x411)
    )
    result[3, 0, 2] = numpy.sum(
        x230 * (x0 * x1154 + x0 * x414 + x0 * (x0 * (x109 * x1156 + x782) + x1154) + x417)
    )
    result[3, 0, 3] = numpy.sum(
        x216 * (x0 * x1157 + x0 * x420 + x0 * (x0 * (x109 * x1158 + x784) + x1157) + x423)
    )
    result[3, 0, 4] = numpy.sum(
        x230 * (x0 * x1159 + x0 * x425 + x0 * (x0 * (x109 * x1160 + x786) + x1159) + x428)
    )
    result[3, 0, 5] = numpy.sum(
        x216 * (x0 * x1161 + x0 * x430 + x0 * (x0 * (x0 * x1162 + x788) + x1161) + x433)
    )
    result[3, 1, 0] = numpy.sum(x776 * (x0 * x812 + x0 * (x0 * x1164 + x812) + x602))
    result[3, 1, 1] = numpy.sum(x781 * (x0 * x818 + x0 * (x0 * x1169 + x818) + x610))
    result[3, 1, 2] = numpy.sum(x781 * (x0 * x821 + x0 * (x0 * x1172 + x821) + x613))
    result[3, 1, 3] = numpy.sum(x776 * (x0 * x824 + x0 * (x0 * x1174 + x824) + x616))
    result[3, 1, 4] = numpy.sum(x781 * (x0 * x827 + x0 * (x0 * x1176 + x827) + x619))
    result[3, 1, 5] = numpy.sum(x776 * (x0 * x830 + x0 * (x0 * x1178 + x830) + x622))
    result[3, 2, 0] = numpy.sum(x776 * (x0 * x835 + x0 * (x0 * x1180 + x835) + x644))
    result[3, 2, 1] = numpy.sum(x781 * (x0 * x839 + x0 * (x0 * x1184 + x839) + x652))
    result[3, 2, 2] = numpy.sum(x781 * (x0 * x845 + x0 * (x0 * x1187 + x845) + x658))
    result[3, 2, 3] = numpy.sum(x776 * (x0 * x848 + x0 * (x0 * x1189 + x848) + x661))
    result[3, 2, 4] = numpy.sum(x781 * (x0 * x852 + x0 * (x0 * x1191 + x852) + x665))
    result[3, 2, 5] = numpy.sum(x776 * (x0 * x855 + x0 * (x0 * x1193 + x855) + x668))
    result[3, 3, 0] = numpy.sum(x776 * (x0 * x1196 + x896))
    result[3, 3, 1] = numpy.sum(x781 * (x0 * x1202 + x904))
    result[3, 3, 2] = numpy.sum(x781 * (x0 * x1206 + x906))
    result[3, 3, 3] = numpy.sum(x776 * (x0 * x1209 + x908))
    result[3, 3, 4] = numpy.sum(x781 * (x0 * x1212 + x910))
    result[3, 3, 5] = numpy.sum(x776 * (x0 * x1215 + x912))
    result[3, 4, 0] = numpy.sum(x781 * (x0 * x1218 + x926))
    result[3, 4, 1] = numpy.sum(x841 * (x0 * x1222 + x931))
    result[3, 4, 2] = numpy.sum(x841 * (x0 * x1226 + x937))
    result[3, 4, 3] = numpy.sum(x781 * (x0 * x1229 + x940))
    result[3, 4, 4] = numpy.sum(x841 * (x0 * x1232 + x943))
    result[3, 4, 5] = numpy.sum(x781 * (x0 * x1235 + x946))
    result[3, 5, 0] = numpy.sum(x776 * (x0 * x1238 + x959))
    result[3, 5, 1] = numpy.sum(x781 * (x0 * x1242 + x964))
    result[3, 5, 2] = numpy.sum(x781 * (x0 * x1246 + x969))
    result[3, 5, 3] = numpy.sum(x776 * (x0 * x1249 + x972))
    result[3, 5, 4] = numpy.sum(x781 * (x0 * x1252 + x975))
    result[3, 5, 5] = numpy.sum(x776 * (x0 * x1255 + x978))
    result[3, 6, 0] = numpy.sum(x216 * (x1196 * x20 + x1261))
    result[3, 6, 1] = numpy.sum(x230 * (x1202 * x20 + x1269))
    result[3, 6, 2] = numpy.sum(x230 * (x1206 * x20 + x1271))
    result[3, 6, 3] = numpy.sum(x216 * (x1209 * x20 + x1272))
    result[3, 6, 4] = numpy.sum(x230 * (x1212 * x20 + x1273))
    result[3, 6, 5] = numpy.sum(x216 * (x1215 * x20 + x1274))
    result[3, 7, 0] = numpy.sum(x776 * (x1218 * x20 + x1280))
    result[3, 7, 1] = numpy.sum(x781 * (x1222 * x20 + x1284))
    result[3, 7, 2] = numpy.sum(x781 * (x1226 * x20 + x1288))
    result[3, 7, 3] = numpy.sum(x776 * (x1229 * x20 + x1290))
    result[3, 7, 4] = numpy.sum(x781 * (x1232 * x20 + x1292))
    result[3, 7, 5] = numpy.sum(x776 * (x1235 * x20 + x1294))
    result[3, 8, 0] = numpy.sum(x776 * (x1238 * x20 + x1301))
    result[3, 8, 1] = numpy.sum(x781 * (x1242 * x20 + x1308))
    result[3, 8, 2] = numpy.sum(x781 * (x1246 * x20 + x1313))
    result[3, 8, 3] = numpy.sum(x776 * (x1249 * x20 + x1316))
    result[3, 8, 4] = numpy.sum(x781 * (x1252 * x20 + x1320))
    result[3, 8, 5] = numpy.sum(x776 * (x1255 * x20 + x1323))
    result[3, 9, 0] = numpy.sum(x216 * (x1238 * x21 + x1330))
    result[3, 9, 1] = numpy.sum(x230 * (x1242 * x21 + x1335))
    result[3, 9, 2] = numpy.sum(x230 * (x1246 * x21 + x1340))
    result[3, 9, 3] = numpy.sum(x216 * (x1249 * x21 + x1343))
    result[3, 9, 4] = numpy.sum(x230 * (x1252 * x21 + x1346))
    result[3, 9, 5] = numpy.sum(x216 * (x1255 * x21 + x1349))
    result[4, 0, 0] = numpy.sum(
        x230 * (x0 * x1350 + x0 * x463 + x0 * (x0 * (x109 * x1351 + x792) + x1350) + x469)
    )
    result[4, 0, 1] = numpy.sum(
        x479 * (x0 * x1352 + x0 * x473 + x0 * (x0 * (x109 * x1354 + x796) + x1352) + x477)
    )
    result[4, 0, 2] = numpy.sum(
        x479 * (x0 * x1355 + x0 * x482 + x0 * (x0 * (x109 * x1357 + x800) + x1355) + x486)
    )
    result[4, 0, 3] = numpy.sum(
        x230 * (x0 * x1358 + x0 * x488 + x0 * (x0 * (x109 * x1359 + x802) + x1358) + x491)
    )
    result[4, 0, 4] = numpy.sum(
        x479 * (x0 * x1360 + x0 * x493 + x0 * (x0 * (x109 * x1361 + x804) + x1360) + x496)
    )
    result[4, 0, 5] = numpy.sum(
        x230 * (x0 * x1362 + x0 * x498 + x0 * (x0 * (x109 * x1363 + x806) + x1362) + x501)
    )
    result[4, 1, 0] = numpy.sum(x781 * (x0 * x1057 + x0 * (x0 * x1364 + x1057) + x1059))
    result[4, 1, 1] = numpy.sum(x841 * (x0 * x1060 + x0 * (x0 * x1365 + x1060) + x1062))
    result[4, 1, 2] = numpy.sum(x841 * (x0 * x1063 + x0 * (x0 * x1366 + x1063) + x1065))
    result[4, 1, 3] = numpy.sum(x781 * (x0 * x1066 + x0 * (x0 * x1367 + x1066) + x1068))
    result[4, 1, 4] = numpy.sum(x841 * (x0 * x1069 + x0 * (x0 * x1368 + x1069) + x1071))
    result[4, 1, 5] = numpy.sum(x781 * (x0 * x1072 + x0 * (x0 * x1369 + x1072) + x1074))
    result[4, 2, 0] = numpy.sum(x781 * (x0 * x860 + x0 * (x0 * x1371 + x860) + x690))
    result[4, 2, 1] = numpy.sum(x841 * (x0 * x865 + x0 * (x0 * x1374 + x865) + x695))
    result[4, 2, 2] = numpy.sum(x841 * (x0 * x870 + x0 * (x0 * x1377 + x870) + x701))
    result[4, 2, 3] = numpy.sum(x781 * (x0 * x873 + x0 * (x0 * x1379 + x873) + x704))
    result[4, 2, 4] = numpy.sum(x841 * (x0 * x876 + x0 * (x0 * x1381 + x876) + x707))
    result[4, 2, 5] = numpy.sum(x781 * (x0 * x879 + x0 * (x0 * x1383 + x879) + x710))
    result[4, 3, 0] = numpy.sum(x781 * (x0 * x1385 + x1104))
    result[4, 3, 1] = numpy.sum(x841 * (x0 * x1387 + x1106))
    result[4, 3, 2] = numpy.sum(x841 * (x0 * x1389 + x1108))
    result[4, 3, 3] = numpy.sum(x781 * (x0 * x1391 + x1110))
    result[4, 3, 4] = numpy.sum(x841 * (x0 * x1393 + x1112))
    result[4, 3, 5] = numpy.sum(x781 * (x0 * x1395 + x1114))
    result[4, 4, 0] = numpy.sum(x841 * (x0 * x1396 + x1115))
    result[4, 4, 1] = numpy.sum(x120 * (x0 * x1397 + x1116))
    result[4, 4, 2] = numpy.sum(x120 * (x0 * x1398 + x1117))
    result[4, 4, 3] = numpy.sum(x841 * (x0 * x1399 + x1118))
    result[4, 4, 4] = numpy.sum(x120 * (x0 * x1400 + x1119))
    result[4, 4, 5] = numpy.sum(x841 * (x0 * x1401 + x1120))
    result[4, 5, 0] = numpy.sum(x781 * (x0 * x1404 + x992))
    result[4, 5, 1] = numpy.sum(x841 * (x0 * x1408 + x998))
    result[4, 5, 2] = numpy.sum(x841 * (x0 * x1412 + x1004))
    result[4, 5, 3] = numpy.sum(x781 * (x0 * x1415 + x1007))
    result[4, 5, 4] = numpy.sum(x841 * (x0 * x1418 + x1010))
    result[4, 5, 5] = numpy.sum(x781 * (x0 * x1421 + x1013))
    result[4, 6, 0] = numpy.sum(x230 * (x1385 * x20 + x1422))
    result[4, 6, 1] = numpy.sum(x479 * (x1387 * x20 + x1423))
    result[4, 6, 2] = numpy.sum(x479 * (x1389 * x20 + x1424))
    result[4, 6, 3] = numpy.sum(x230 * (x1391 * x20 + x1425))
    result[4, 6, 4] = numpy.sum(x479 * (x1393 * x20 + x1426))
    result[4, 6, 5] = numpy.sum(x230 * (x1395 * x20 + x1427))
    result[4, 7, 0] = numpy.sum(x781 * (x1396 * x20 + x1428))
    result[4, 7, 1] = numpy.sum(x841 * (x1397 * x20 + x1429))
    result[4, 7, 2] = numpy.sum(x841 * (x1398 * x20 + x1430))
    result[4, 7, 3] = numpy.sum(x781 * (x1399 * x20 + x1431))
    result[4, 7, 4] = numpy.sum(x841 * (x1400 * x20 + x1432))
    result[4, 7, 5] = numpy.sum(x781 * (x1401 * x20 + x1433))
    result[4, 8, 0] = numpy.sum(x781 * (x1330 + x1404 * x20))
    result[4, 8, 1] = numpy.sum(x841 * (x1335 + x1408 * x20))
    result[4, 8, 2] = numpy.sum(x841 * (x1340 + x1412 * x20))
    result[4, 8, 3] = numpy.sum(x781 * (x1343 + x1415 * x20))
    result[4, 8, 4] = numpy.sum(x841 * (x1346 + x1418 * x20))
    result[4, 8, 5] = numpy.sum(x781 * (x1349 + x1421 * x20))
    result[4, 9, 0] = numpy.sum(x230 * (x1404 * x21 + x1439))
    result[4, 9, 1] = numpy.sum(x479 * (x1408 * x21 + x1443))
    result[4, 9, 2] = numpy.sum(x479 * (x1412 * x21 + x1447))
    result[4, 9, 3] = numpy.sum(x230 * (x1415 * x21 + x1449))
    result[4, 9, 4] = numpy.sum(x479 * (x1418 * x21 + x1451))
    result[4, 9, 5] = numpy.sum(x230 * (x1421 * x21 + x1453))
    result[5, 0, 0] = numpy.sum(
        x216
        * (x0 * x1454 + x0 * x536 + x0 * (x0 * (x1044 + x109 * x1455) + x1454) + x547)
    )
    result[5, 0, 1] = numpy.sum(
        x230
        * (x0 * x1456 + x0 * x549 + x0 * (x0 * (x1046 + x109 * x1458) + x1456) + x552)
    )
    result[5, 0, 2] = numpy.sum(
        x230
        * (x0 * x1459 + x0 * x557 + x0 * (x0 * (x1049 + x109 * x1462) + x1459) + x561)
    )
    result[5, 0, 3] = numpy.sum(
        x216 * (x0 * x1463 + x0 * x563 + x0 * (x0 * (x0 * x1464 + x1051) + x1463) + x566)
    )
    result[5, 0, 4] = numpy.sum(
        x230 * (x0 * x1465 + x0 * x568 + x0 * (x0 * (x0 * x1466 + x1053) + x1465) + x571)
    )
    result[5, 0, 5] = numpy.sum(
        x216
        * (x0 * x1467 + x0 * x573 + x0 * (x0 * (x1055 + x109 * x1468) + x1467) + x576)
    )
    result[5, 1, 0] = numpy.sum(
        x776 * (x0 * x1469 + x0 * (x0 * x1470 + x1469) + x20 * x536 + x689)
    )
    result[5, 1, 1] = numpy.sum(
        x781 * (x0 * x1471 + x0 * (x0 * x1472 + x1471) + x20 * x549 + x694)
    )
    result[5, 1, 2] = numpy.sum(
        x781 * (x0 * x1473 + x0 * (x0 * x1474 + x1473) + x20 * x557 + x700)
    )
    result[5, 1, 3] = numpy.sum(
        x776 * (x0 * x1475 + x0 * (x0 * x1476 + x1475) + x20 * x563 + x703)
    )
    result[5, 1, 4] = numpy.sum(
        x781 * (x0 * x1477 + x0 * (x0 * x1478 + x1477) + x20 * x568 + x706)
    )
    result[5, 1, 5] = numpy.sum(
        x776 * (x0 * x1479 + x0 * (x0 * x1480 + x1479) + x20 * x573 + x709)
    )
    result[5, 2, 0] = numpy.sum(x776 * (x0 * x1085 + x0 * (x0 * x1482 + x1085) + x736))
    result[5, 2, 1] = numpy.sum(x781 * (x0 * x1088 + x0 * (x0 * x1485 + x1088) + x739))
    result[5, 2, 2] = numpy.sum(x781 * (x0 * x1092 + x0 * (x0 * x1489 + x1092) + x744))
    result[5, 2, 3] = numpy.sum(x776 * (x0 * x1095 + x0 * (x0 * x1491 + x1095) + x747))
    result[5, 2, 4] = numpy.sum(x781 * (x0 * x1098 + x0 * (x0 * x1493 + x1098) + x750))
    result[5, 2, 5] = numpy.sum(x776 * (x0 * x1101 + x0 * (x0 * x1495 + x1101) + x753))
    result[5, 3, 0] = numpy.sum(x776 * (x0 * x1497 + x1469 * x20 + x1498))
    result[5, 3, 1] = numpy.sum(x781 * (x0 * x1500 + x1471 * x20 + x1501))
    result[5, 3, 2] = numpy.sum(x781 * (x0 * x1503 + x1473 * x20 + x1504))
    result[5, 3, 3] = numpy.sum(x776 * (x0 * x1506 + x1475 * x20 + x1507))
    result[5, 3, 4] = numpy.sum(x781 * (x0 * x1509 + x1477 * x20 + x1510))
    result[5, 3, 5] = numpy.sum(x776 * (x0 * x1512 + x1479 * x20 + x1513))
    result[5, 4, 0] = numpy.sum(x781 * (x0 * x1514 + x1085 * x20 + x991))
    result[5, 4, 1] = numpy.sum(x841 * (x0 * x1515 + x1088 * x20 + x997))
    result[5, 4, 2] = numpy.sum(x841 * (x0 * x1516 + x1003 + x1092 * x20))
    result[5, 4, 3] = numpy.sum(x781 * (x0 * x1517 + x1006 + x1095 * x20))
    result[5, 4, 4] = numpy.sum(x841 * (x0 * x1518 + x1009 + x1098 * x20))
    result[5, 4, 5] = numpy.sum(x781 * (x0 * x1519 + x1012 + x1101 * x20))
    result[5, 5, 0] = numpy.sum(x776 * (x0 * x1522 + x1136))
    result[5, 5, 1] = numpy.sum(x781 * (x0 * x1526 + x1138))
    result[5, 5, 2] = numpy.sum(x781 * (x0 * x1531 + x1142))
    result[5, 5, 3] = numpy.sum(x776 * (x0 * x1534 + x1144))
    result[5, 5, 4] = numpy.sum(x781 * (x0 * x1537 + x1146))
    result[5, 5, 5] = numpy.sum(x776 * (x0 * x1540 + x1148))
    result[5, 6, 0] = numpy.sum(x216 * (x1497 * x20 + x1541))
    result[5, 6, 1] = numpy.sum(x230 * (x1500 * x20 + x1542))
    result[5, 6, 2] = numpy.sum(x230 * (x1503 * x20 + x1543))
    result[5, 6, 3] = numpy.sum(x216 * (x1506 * x20 + x1544))
    result[5, 6, 4] = numpy.sum(x230 * (x1509 * x20 + x1545))
    result[5, 6, 5] = numpy.sum(x216 * (x1512 * x20 + x1546))
    result[5, 7, 0] = numpy.sum(x776 * (x1514 * x20 + x1547))
    result[5, 7, 1] = numpy.sum(x781 * (x1515 * x20 + x1548))
    result[5, 7, 2] = numpy.sum(x781 * (x1516 * x20 + x1549))
    result[5, 7, 3] = numpy.sum(x776 * (x1517 * x20 + x1550))
    result[5, 7, 4] = numpy.sum(x781 * (x1518 * x20 + x1551))
    result[5, 7, 5] = numpy.sum(x776 * (x1519 * x20 + x1552))
    result[5, 8, 0] = numpy.sum(x776 * (x1439 + x1522 * x20))
    result[5, 8, 1] = numpy.sum(x781 * (x1443 + x1526 * x20))
    result[5, 8, 2] = numpy.sum(x781 * (x1447 + x1531 * x20))
    result[5, 8, 3] = numpy.sum(x776 * (x1449 + x1534 * x20))
    result[5, 8, 4] = numpy.sum(x781 * (x1451 + x1537 * x20))
    result[5, 8, 5] = numpy.sum(x776 * (x1453 + x1540 * x20))
    result[5, 9, 0] = numpy.sum(x216 * (x1522 * x21 + x1558))
    result[5, 9, 1] = numpy.sum(x230 * (x1526 * x21 + x1560))
    result[5, 9, 2] = numpy.sum(x230 * (x1531 * x21 + x1564))
    result[5, 9, 3] = numpy.sum(x216 * (x1534 * x21 + x1565))
    result[5, 9, 4] = numpy.sum(x230 * (x1537 * x21 + x1566))
    result[5, 9, 5] = numpy.sum(x216 * (x1540 * x21 + x1567))
    result[6, 0, 0] = numpy.sum(
        x122
        * (x0 * x1568 + x0 * x811 + x0 * (x0 * (x1163 + x1569 * x1570) + x1568) + x601)
    )
    result[6, 0, 1] = numpy.sum(
        x128 * (x0 * x1571 + x0 * x817 + x0 * (x0 * (x0 * x1573 + x1168) + x1571) + x609)
    )
    result[6, 0, 2] = numpy.sum(
        x128
        * (x0 * x1574 + x0 * x820 + x0 * (x0 * (x1171 + x1570 * x1575) + x1574) + x612)
    )
    result[6, 0, 3] = numpy.sum(
        x122
        * (x0 * x1576 + x0 * x823 + x0 * (x0 * (x109 * x1577 + x1173) + x1576) + x615)
    )
    result[6, 0, 4] = numpy.sum(
        x128
        * (x0 * x1578 + x0 * x826 + x0 * (x0 * (x109 * x1579 + x1175) + x1578) + x618)
    )
    result[6, 0, 5] = numpy.sum(
        x122
        * (x0 * x1580 + x0 * x829 + x0 * (x0 * (x1177 + x145 * x1570) + x1580) + x621)
    )
    result[6, 1, 0] = numpy.sum(x216 * (x0 * x1195 + x0 * (x0 * x1583 + x1195) + x895))
    result[6, 1, 1] = numpy.sum(x230 * (x0 * x1201 + x0 * (x0 * x1585 + x1201) + x903))
    result[6, 1, 2] = numpy.sum(x230 * (x0 * x1205 + x0 * (x0 * x1587 + x1205) + x905))
    result[6, 1, 3] = numpy.sum(x216 * (x0 * x1208 + x0 * (x0 * x1589 + x1208) + x907))
    result[6, 1, 4] = numpy.sum(x230 * (x0 * x1211 + x0 * (x0 * x1591 + x1211) + x909))
    result[6, 1, 5] = numpy.sum(x216 * (x0 * x1214 + x0 * (x0 * x1593 + x1214) + x911))
    result[6, 2, 0] = numpy.sum(x216 * (x0 * x1217 + x0 * (x0 * x1596 + x1217) + x925))
    result[6, 2, 1] = numpy.sum(x230 * (x0 * x1221 + x0 * (x0 * x1598 + x1221) + x930))
    result[6, 2, 2] = numpy.sum(x230 * (x0 * x1225 + x0 * (x0 * x1600 + x1225) + x936))
    result[6, 2, 3] = numpy.sum(x216 * (x0 * x1228 + x0 * (x0 * x1602 + x1228) + x939))
    result[6, 2, 4] = numpy.sum(x230 * (x0 * x1231 + x0 * (x0 * x1604 + x1231) + x942))
    result[6, 2, 5] = numpy.sum(x216 * (x0 * x1234 + x0 * (x0 * x1606 + x1234) + x945))
    result[6, 3, 0] = numpy.sum(x216 * (x0 * x1609 + x1261))
    result[6, 3, 1] = numpy.sum(x230 * (x0 * x1612 + x1269))
    result[6, 3, 2] = numpy.sum(x230 * (x0 * x1615 + x1271))
    result[6, 3, 3] = numpy.sum(x216 * (x0 * x1618 + x1272))
    result[6, 3, 4] = numpy.sum(x230 * (x0 * x1621 + x1273))
    result[6, 3, 5] = numpy.sum(x216 * (x0 * x1624 + x1274))
    result[6, 4, 0] = numpy.sum(x230 * (x0 * x1627 + x1280))
    result[6, 4, 1] = numpy.sum(x479 * (x0 * x1630 + x1284))
    result[6, 4, 2] = numpy.sum(x479 * (x0 * x1633 + x1288))
    result[6, 4, 3] = numpy.sum(x230 * (x0 * x1636 + x1290))
    result[6, 4, 4] = numpy.sum(x479 * (x0 * x1639 + x1292))
    result[6, 4, 5] = numpy.sum(x230 * (x0 * x1642 + x1294))
    result[6, 5, 0] = numpy.sum(x216 * (x0 * x1645 + x1301))
    result[6, 5, 1] = numpy.sum(x230 * (x0 * x1648 + x1308))
    result[6, 5, 2] = numpy.sum(x230 * (x0 * x1651 + x1313))
    result[6, 5, 3] = numpy.sum(x216 * (x0 * x1654 + x1316))
    result[6, 5, 4] = numpy.sum(x230 * (x0 * x1658 + x1320))
    result[6, 5, 5] = numpy.sum(x216 * (x0 * x1661 + x1323))
    result[6, 6, 0] = numpy.sum(
        x122 * (x1569 * x1662 + x1607 * x20 + x1608 * x20 + x1609 * x20)
    )
    result[6, 6, 1] = numpy.sum(
        x128 * (x1572 * x1665 + x1610 * x20 + x1611 * x20 + x1612 * x20)
    )
    result[6, 6, 2] = numpy.sum(
        x128 * (x1575 * x1662 + x1613 * x20 + x1614 * x20 + x1615 * x20)
    )
    result[6, 6, 3] = numpy.sum(
        x122
        * (x1616 * x20 + x1617 * x20 + x1618 * x20 + x90 * (x123 * x1665 + 6.0 * x1265))
    )
    result[6, 6, 4] = numpy.sum(
        x128 * (x129 * x90 * (x1663 + x1664) + x1619 * x20 + x1620 * x20 + x1621 * x20)
    )
    result[6, 6, 5] = numpy.sum(
        x122 * (x145 * x1662 + x1622 * x20 + x1623 * x20 + x1624 * x20)
    )
    result[6, 7, 0] = numpy.sum(x216 * (x1607 * x21 + x1626 * x20 + x1627 * x20 + x1667))
    result[6, 7, 1] = numpy.sum(x230 * (x1610 * x21 + x1629 * x20 + x1630 * x20 + x1669))
    result[6, 7, 2] = numpy.sum(x230 * (x1613 * x21 + x1632 * x20 + x1633 * x20 + x1671))
    result[6, 7, 3] = numpy.sum(x216 * (x1616 * x21 + x1635 * x20 + x1636 * x20 + x1672))
    result[6, 7, 4] = numpy.sum(x230 * (x1619 * x21 + x1638 * x20 + x1639 * x20 + x1673))
    result[6, 7, 5] = numpy.sum(x216 * (x1622 * x21 + x1641 * x20 + x1642 * x20 + x1674))
    result[6, 8, 0] = numpy.sum(x216 * (x1626 * x21 + x1645 * x20 + x1677))
    result[6, 8, 1] = numpy.sum(x230 * (x1629 * x21 + x1648 * x20 + x1680))
    result[6, 8, 2] = numpy.sum(x230 * (x1632 * x21 + x1651 * x20 + x1683))
    result[6, 8, 3] = numpy.sum(x216 * (x1635 * x21 + x1654 * x20 + x1685))
    result[6, 8, 4] = numpy.sum(x230 * (x1638 * x21 + x1658 * x20 + x1687))
    result[6, 8, 5] = numpy.sum(x216 * (x1641 * x21 + x1661 * x20 + x1689))
    result[6, 9, 0] = numpy.sum(x122 * (x1645 * x21 + x1693))
    result[6, 9, 1] = numpy.sum(x128 * (x1648 * x21 + x1697))
    result[6, 9, 2] = numpy.sum(x128 * (x1651 * x21 + x1701))
    result[6, 9, 3] = numpy.sum(x122 * (x1654 * x21 + x1704))
    result[6, 9, 4] = numpy.sum(x128 * (x1658 * x21 + x1707))
    result[6, 9, 5] = numpy.sum(x122 * (x1661 * x21 + x1710))
    result[7, 0, 0] = numpy.sum(
        x216 * (x0 * x1711 + x0 * x834 + x0 * (x0 * (x0 * x1712 + x1179) + x1711) + x643)
    )
    result[7, 0, 1] = numpy.sum(
        x230
        * (x0 * x1713 + x0 * x838 + x0 * (x0 * (x1182 * x1714 + x1183) + x1713) + x651)
    )
    result[7, 0, 2] = numpy.sum(
        x230
        * (x0 * x1715 + x0 * x844 + x0 * (x0 * (x1185 * x1714 + x1186) + x1715) + x657)
    )
    result[7, 0, 3] = numpy.sum(
        x216
        * (x0 * x1716 + x0 * x847 + x0 * (x0 * (x109 * x1717 + x1188) + x1716) + x660)
    )
    result[7, 0, 4] = numpy.sum(
        x230
        * (x0 * x1718 + x0 * x851 + x0 * (x0 * (x109 * x1720 + x1190) + x1718) + x664)
    )
    result[7, 0, 5] = numpy.sum(
        x216
        * (x0 * x1721 + x0 * x854 + x0 * (x0 * (x109 * x1722 + x1192) + x1721) + x667)
    )
    result[7, 1, 0] = numpy.sum(x776 * (x0 * x1384 + x0 * (x0 * x1723 + x1384) + x1103))
    result[7, 1, 1] = numpy.sum(x781 * (x0 * x1386 + x0 * (x0 * x1725 + x1386) + x1105))
    result[7, 1, 2] = numpy.sum(x781 * (x0 * x1388 + x0 * (x0 * x1726 + x1388) + x1107))
    result[7, 1, 3] = numpy.sum(x776 * (x0 * x1390 + x0 * (x0 * x1727 + x1390) + x1109))
    result[7, 1, 4] = numpy.sum(x781 * (x0 * x1392 + x0 * (x0 * x1728 + x1392) + x1111))
    result[7, 1, 5] = numpy.sum(x776 * (x0 * x1394 + x0 * (x0 * x1729 + x1394) + x1113))
    result[7, 2, 0] = numpy.sum(x776 * (x0 * x1237 + x0 * (x0 * x1731 + x1237) + x958))
    result[7, 2, 1] = numpy.sum(x781 * (x0 * x1241 + x0 * (x0 * x1734 + x1241) + x963))
    result[7, 2, 2] = numpy.sum(x781 * (x0 * x1245 + x0 * (x0 * x1736 + x1245) + x968))
    result[7, 2, 3] = numpy.sum(x776 * (x0 * x1248 + x0 * (x0 * x1738 + x1248) + x971))
    result[7, 2, 4] = numpy.sum(x781 * (x0 * x1251 + x0 * (x0 * x1740 + x1251) + x974))
    result[7, 2, 5] = numpy.sum(x776 * (x0 * x1254 + x0 * (x0 * x1742 + x1254) + x977))
    result[7, 3, 0] = numpy.sum(x776 * (x0 * x1744 + x1422))
    result[7, 3, 1] = numpy.sum(x781 * (x0 * x1746 + x1423))
    result[7, 3, 2] = numpy.sum(x781 * (x0 * x1748 + x1424))
    result[7, 3, 3] = numpy.sum(x776 * (x0 * x1750 + x1425))
    result[7, 3, 4] = numpy.sum(x781 * (x0 * x1752 + x1426))
    result[7, 3, 5] = numpy.sum(x776 * (x0 * x1754 + x1427))
    result[7, 4, 0] = numpy.sum(x781 * (x0 * x1755 + x1428))
    result[7, 4, 1] = numpy.sum(x841 * (x0 * x1756 + x1429))
    result[7, 4, 2] = numpy.sum(x841 * (x0 * x1757 + x1430))
    result[7, 4, 3] = numpy.sum(x781 * (x0 * x1758 + x1431))
    result[7, 4, 4] = numpy.sum(x841 * (x0 * x1759 + x1432))
    result[7, 4, 5] = numpy.sum(x781 * (x0 * x1760 + x1433))
    result[7, 5, 0] = numpy.sum(x776 * (x0 * x1763 + x1330))
    result[7, 5, 1] = numpy.sum(x781 * (x0 * x1766 + x1335))
    result[7, 5, 2] = numpy.sum(x781 * (x0 * x1769 + x1340))
    result[7, 5, 3] = numpy.sum(x776 * (x0 * x1772 + x1343))
    result[7, 5, 4] = numpy.sum(x781 * (x0 * x1775 + x1346))
    result[7, 5, 5] = numpy.sum(x776 * (x0 * x1778 + x1349))
    result[7, 6, 0] = numpy.sum(x216 * (x1625 * x20 + x1667 + x1743 * x20 + x1744 * x20))
    result[7, 6, 1] = numpy.sum(x230 * (x1628 * x20 + x1669 + x1745 * x20 + x1746 * x20))
    result[7, 6, 2] = numpy.sum(x230 * (x1631 * x20 + x1671 + x1747 * x20 + x1748 * x20))
    result[7, 6, 3] = numpy.sum(x216 * (x1634 * x20 + x1672 + x1749 * x20 + x1750 * x20))
    result[7, 6, 4] = numpy.sum(x230 * (x1637 * x20 + x1673 + x1751 * x20 + x1752 * x20))
    result[7, 6, 5] = numpy.sum(x216 * (x1640 * x20 + x1674 + x1753 * x20 + x1754 * x20))
    result[7, 7, 0] = numpy.sum(x776 * (x1644 * x20 + x1677 + x1755 * x20))
    result[7, 7, 1] = numpy.sum(x781 * (x1647 * x20 + x1680 + x1756 * x20))
    result[7, 7, 2] = numpy.sum(x781 * (x1650 * x20 + x1683 + x1757 * x20))
    result[7, 7, 3] = numpy.sum(x776 * (x1653 * x20 + x1685 + x1758 * x20))
    result[7, 7, 4] = numpy.sum(x781 * (x1657 * x20 + x1687 + x1759 * x20))
    result[7, 7, 5] = numpy.sum(x776 * (x1660 * x20 + x1689 + x1760 * x20))
    result[7, 8, 0] = numpy.sum(x776 * (x1693 + x1763 * x20))
    result[7, 8, 1] = numpy.sum(x781 * (x1697 + x1766 * x20))
    result[7, 8, 2] = numpy.sum(x781 * (x1701 + x1769 * x20))
    result[7, 8, 3] = numpy.sum(x776 * (x1704 + x1772 * x20))
    result[7, 8, 4] = numpy.sum(x781 * (x1707 + x1775 * x20))
    result[7, 8, 5] = numpy.sum(x776 * (x1710 + x1778 * x20))
    result[7, 9, 0] = numpy.sum(x216 * (x1763 * x21 + x1781))
    result[7, 9, 1] = numpy.sum(x230 * (x1766 * x21 + x1784))
    result[7, 9, 2] = numpy.sum(x230 * (x1769 * x21 + x1787))
    result[7, 9, 3] = numpy.sum(x216 * (x1772 * x21 + x1789))
    result[7, 9, 4] = numpy.sum(x230 * (x1775 * x21 + x1791))
    result[7, 9, 5] = numpy.sum(x216 * (x1778 * x21 + x1793))
    result[8, 0, 0] = numpy.sum(
        x216 * (x0 * x1794 + x0 * x859 + x0 * (x0 * (x0 * x1795 + x1370) + x1794) + x689)
    )
    result[8, 0, 1] = numpy.sum(
        x230
        * (x0 * x1796 + x0 * x864 + x0 * (x0 * (x1372 * x1714 + x1373) + x1796) + x694)
    )
    result[8, 0, 2] = numpy.sum(
        x230
        * (x0 * x1797 + x0 * x869 + x0 * (x0 * (x1375 * x1714 + x1376) + x1797) + x700)
    )
    result[8, 0, 3] = numpy.sum(
        x216
        * (x0 * x1798 + x0 * x872 + x0 * (x0 * (x109 * x1799 + x1378) + x1798) + x703)
    )
    result[8, 0, 4] = numpy.sum(
        x230
        * (x0 * x1800 + x0 * x875 + x0 * (x0 * (x109 * x1801 + x1380) + x1800) + x706)
    )
    result[8, 0, 5] = numpy.sum(
        x216
        * (x0 * x1802 + x0 * x878 + x0 * (x0 * (x109 * x1803 + x1382) + x1802) + x709)
    )
    result[8, 1, 0] = numpy.sum(x776 * (x0 * x1496 + x0 * (x0 * x1804 + x1496) + x1498))
    result[8, 1, 1] = numpy.sum(x781 * (x0 * x1499 + x0 * (x0 * x1805 + x1499) + x1501))
    result[8, 1, 2] = numpy.sum(x781 * (x0 * x1502 + x0 * (x0 * x1806 + x1502) + x1504))
    result[8, 1, 3] = numpy.sum(x776 * (x0 * x1505 + x0 * (x0 * x1807 + x1505) + x1507))
    result[8, 1, 4] = numpy.sum(x781 * (x0 * x1508 + x0 * (x0 * x1808 + x1508) + x1510))
    result[8, 1, 5] = numpy.sum(x776 * (x0 * x1511 + x0 * (x0 * x1809 + x1511) + x1513))
    result[8, 2, 0] = numpy.sum(x776 * (x0 * x1403 + x0 * (x0 * x1811 + x1403) + x991))
    result[8, 2, 1] = numpy.sum(x781 * (x0 * x1407 + x0 * (x0 * x1813 + x1407) + x997))
    result[8, 2, 2] = numpy.sum(x781 * (x0 * x1411 + x0 * (x0 * x1815 + x1411) + x1003))
    result[8, 2, 3] = numpy.sum(x776 * (x0 * x1414 + x0 * (x0 * x1817 + x1414) + x1006))
    result[8, 2, 4] = numpy.sum(x781 * (x0 * x1417 + x0 * (x0 * x1819 + x1417) + x1009))
    result[8, 2, 5] = numpy.sum(x776 * (x0 * x1420 + x0 * (x0 * x1821 + x1420) + x1012))
    result[8, 3, 0] = numpy.sum(x776 * (x0 * x1823 + x1541))
    result[8, 3, 1] = numpy.sum(x781 * (x0 * x1825 + x1542))
    result[8, 3, 2] = numpy.sum(x781 * (x0 * x1827 + x1543))
    result[8, 3, 3] = numpy.sum(x776 * (x0 * x1829 + x1544))
    result[8, 3, 4] = numpy.sum(x781 * (x0 * x1831 + x1545))
    result[8, 3, 5] = numpy.sum(x776 * (x0 * x1833 + x1546))
    result[8, 4, 0] = numpy.sum(x781 * (x0 * x1834 + x1547))
    result[8, 4, 1] = numpy.sum(x841 * (x0 * x1835 + x1548))
    result[8, 4, 2] = numpy.sum(x841 * (x0 * x1836 + x1549))
    result[8, 4, 3] = numpy.sum(x781 * (x0 * x1837 + x1550))
    result[8, 4, 4] = numpy.sum(x841 * (x0 * x1838 + x1551))
    result[8, 4, 5] = numpy.sum(x781 * (x0 * x1839 + x1552))
    result[8, 5, 0] = numpy.sum(x776 * (x0 * x1842 + x1439))
    result[8, 5, 1] = numpy.sum(x781 * (x0 * x1845 + x1443))
    result[8, 5, 2] = numpy.sum(x781 * (x0 * x1848 + x1447))
    result[8, 5, 3] = numpy.sum(x776 * (x0 * x1851 + x1449))
    result[8, 5, 4] = numpy.sum(x781 * (x0 * x1854 + x1451))
    result[8, 5, 5] = numpy.sum(x776 * (x0 * x1857 + x1453))
    result[8, 6, 0] = numpy.sum(x216 * (x1643 * x20 + x1676 + x1822 * x20 + x1823 * x20))
    result[8, 6, 1] = numpy.sum(x230 * (x1646 * x20 + x1679 + x1824 * x20 + x1825 * x20))
    result[8, 6, 2] = numpy.sum(x230 * (x1649 * x20 + x1682 + x1826 * x20 + x1827 * x20))
    result[8, 6, 3] = numpy.sum(x216 * (x1652 * x20 + x1684 + x1828 * x20 + x1829 * x20))
    result[8, 6, 4] = numpy.sum(x230 * (x1656 * x20 + x1686 + x1830 * x20 + x1831 * x20))
    result[8, 6, 5] = numpy.sum(x216 * (x1659 * x20 + x1688 + x1832 * x20 + x1833 * x20))
    result[8, 7, 0] = numpy.sum(x776 * (x1692 + x1762 * x20 + x1834 * x20))
    result[8, 7, 1] = numpy.sum(x781 * (x1696 + x1765 * x20 + x1835 * x20))
    result[8, 7, 2] = numpy.sum(x781 * (x1700 + x1768 * x20 + x1836 * x20))
    result[8, 7, 3] = numpy.sum(x776 * (x1703 + x1771 * x20 + x1837 * x20))
    result[8, 7, 4] = numpy.sum(x781 * (x1706 + x1774 * x20 + x1838 * x20))
    result[8, 7, 5] = numpy.sum(x776 * (x1709 + x1777 * x20 + x1839 * x20))
    result[8, 8, 0] = numpy.sum(x776 * (x1781 + x1842 * x20))
    result[8, 8, 1] = numpy.sum(x781 * (x1784 + x1845 * x20))
    result[8, 8, 2] = numpy.sum(x781 * (x1787 + x1848 * x20))
    result[8, 8, 3] = numpy.sum(x776 * (x1789 + x1851 * x20))
    result[8, 8, 4] = numpy.sum(x781 * (x1791 + x1854 * x20))
    result[8, 8, 5] = numpy.sum(x776 * (x1793 + x1857 * x20))
    result[8, 9, 0] = numpy.sum(x216 * (x1842 * x21 + x1859))
    result[8, 9, 1] = numpy.sum(x230 * (x1845 * x21 + x1861))
    result[8, 9, 2] = numpy.sum(x230 * (x1848 * x21 + x1863))
    result[8, 9, 3] = numpy.sum(x216 * (x1851 * x21 + x1864))
    result[8, 9, 4] = numpy.sum(x230 * (x1854 * x21 + x1865))
    result[8, 9, 5] = numpy.sum(x216 * (x1857 * x21 + x1866))
    result[9, 0, 0] = numpy.sum(
        x122
        * (x0 * x1084 + x0 * x1867 + x0 * (x0 * (x1481 + x1569 * x1868) + x1867) + x735)
    )
    result[9, 0, 1] = numpy.sum(
        x128
        * (x0 * x1087 + x0 * x1869 + x0 * (x0 * (x1484 + x1868 * x1870) + x1869) + x738)
    )
    result[9, 0, 2] = numpy.sum(
        x128
        * (x0 * x1091 + x0 * x1871 + x0 * (x0 * (x1486 * x1714 + x1488) + x1871) + x743)
    )
    result[9, 0, 3] = numpy.sum(
        x122
        * (x0 * x1094 + x0 * x1872 + x0 * (x0 * (x135 * x1868 + x1490) + x1872) + x746)
    )
    result[9, 0, 4] = numpy.sum(
        x128 * (x0 * x1097 + x0 * x1873 + x0 * (x0 * (x0 * x1874 + x1492) + x1873) + x749)
    )
    result[9, 0, 5] = numpy.sum(
        x122
        * (x0 * x1100 + x0 * x1875 + x0 * (x0 * (x109 * x1876 + x1494) + x1875) + x752)
    )
    result[9, 1, 0] = numpy.sum(
        x216 * (x0 * x1877 + x0 * (x0 * x1879 + x1877) + x1084 * x20 + x990)
    )
    result[9, 1, 1] = numpy.sum(
        x230 * (x0 * x1880 + x0 * (x0 * x1881 + x1880) + x1087 * x20 + x996)
    )
    result[9, 1, 2] = numpy.sum(
        x230 * (x0 * x1882 + x0 * (x0 * x1883 + x1882) + x1002 + x1091 * x20)
    )
    result[9, 1, 3] = numpy.sum(
        x216 * (x0 * x1884 + x0 * (x0 * x1885 + x1884) + x1005 + x1094 * x20)
    )
    result[9, 1, 4] = numpy.sum(
        x230 * (x0 * x1886 + x0 * (x0 * x1887 + x1886) + x1008 + x1097 * x20)
    )
    result[9, 1, 5] = numpy.sum(
        x216 * (x0 * x1888 + x0 * (x0 * x1889 + x1888) + x1011 + x1100 * x20)
    )
    result[9, 2, 0] = numpy.sum(x216 * (x0 * x1521 + x0 * (x0 * x1892 + x1521) + x1135))
    result[9, 2, 1] = numpy.sum(x230 * (x0 * x1525 + x0 * (x0 * x1894 + x1525) + x1137))
    result[9, 2, 2] = numpy.sum(x230 * (x0 * x1530 + x0 * (x0 * x1896 + x1530) + x1141))
    result[9, 2, 3] = numpy.sum(x216 * (x0 * x1533 + x0 * (x0 * x1898 + x1533) + x1143))
    result[9, 2, 4] = numpy.sum(x230 * (x0 * x1536 + x0 * (x0 * x1900 + x1536) + x1145))
    result[9, 2, 5] = numpy.sum(x216 * (x0 * x1539 + x0 * (x0 * x1902 + x1539) + x1147))
    result[9, 3, 0] = numpy.sum(x216 * (x0 * x1904 + x1328 + x1402 * x20 + x1877 * x20))
    result[9, 3, 1] = numpy.sum(x230 * (x0 * x1906 + x1333 + x1406 * x20 + x1880 * x20))
    result[9, 3, 2] = numpy.sum(x230 * (x0 * x1908 + x1338 + x1410 * x20 + x1882 * x20))
    result[9, 3, 3] = numpy.sum(x216 * (x0 * x1910 + x1341 + x1413 * x20 + x1884 * x20))
    result[9, 3, 4] = numpy.sum(x230 * (x0 * x1912 + x1344 + x1416 * x20 + x1886 * x20))
    result[9, 3, 5] = numpy.sum(x216 * (x0 * x1914 + x1347 + x1419 * x20 + x1888 * x20))
    result[9, 4, 0] = numpy.sum(x230 * (x0 * x1915 + x1438 + x1521 * x20))
    result[9, 4, 1] = numpy.sum(x479 * (x0 * x1916 + x1442 + x1525 * x20))
    result[9, 4, 2] = numpy.sum(x479 * (x0 * x1917 + x1446 + x1530 * x20))
    result[9, 4, 3] = numpy.sum(x230 * (x0 * x1918 + x1448 + x1533 * x20))
    result[9, 4, 4] = numpy.sum(x479 * (x0 * x1919 + x1450 + x1536 * x20))
    result[9, 4, 5] = numpy.sum(x230 * (x0 * x1920 + x1452 + x1539 * x20))
    result[9, 5, 0] = numpy.sum(x216 * (x0 * x1923 + x1558))
    result[9, 5, 1] = numpy.sum(x230 * (x0 * x1926 + x1560))
    result[9, 5, 2] = numpy.sum(x230 * (x0 * x1929 + x1564))
    result[9, 5, 3] = numpy.sum(x216 * (x0 * x1932 + x1565))
    result[9, 5, 4] = numpy.sum(x230 * (x0 * x1935 + x1566))
    result[9, 5, 5] = numpy.sum(x216 * (x0 * x1938 + x1567))
    result[9, 6, 0] = numpy.sum(x122 * (x1691 + x1761 * x20 + x1903 * x20 + x1904 * x20))
    result[9, 6, 1] = numpy.sum(x128 * (x1695 + x1764 * x20 + x1905 * x20 + x1906 * x20))
    result[9, 6, 2] = numpy.sum(x128 * (x1699 + x1767 * x20 + x1907 * x20 + x1908 * x20))
    result[9, 6, 3] = numpy.sum(x122 * (x1702 + x1770 * x20 + x1909 * x20 + x1910 * x20))
    result[9, 6, 4] = numpy.sum(x128 * (x1705 + x1773 * x20 + x1911 * x20 + x1912 * x20))
    result[9, 6, 5] = numpy.sum(x122 * (x1708 + x1776 * x20 + x1913 * x20 + x1914 * x20))
    result[9, 7, 0] = numpy.sum(x216 * (x1780 + x1841 * x20 + x1915 * x20))
    result[9, 7, 1] = numpy.sum(x230 * (x1783 + x1844 * x20 + x1916 * x20))
    result[9, 7, 2] = numpy.sum(x230 * (x1786 + x1847 * x20 + x1917 * x20))
    result[9, 7, 3] = numpy.sum(x216 * (x1788 + x1850 * x20 + x1918 * x20))
    result[9, 7, 4] = numpy.sum(x230 * (x1790 + x1853 * x20 + x1919 * x20))
    result[9, 7, 5] = numpy.sum(x216 * (x1792 + x1856 * x20 + x1920 * x20))
    result[9, 8, 0] = numpy.sum(x216 * (x1859 + x1923 * x20))
    result[9, 8, 1] = numpy.sum(x230 * (x1861 + x1926 * x20))
    result[9, 8, 2] = numpy.sum(x230 * (x1863 + x1929 * x20))
    result[9, 8, 3] = numpy.sum(x216 * (x1864 + x1932 * x20))
    result[9, 8, 4] = numpy.sum(x230 * (x1865 + x1935 * x20))
    result[9, 8, 5] = numpy.sum(x216 * (x1866 + x1938 * x20))
    result[9, 9, 0] = numpy.sum(
        x122 * (x1569 * x1939 + x1921 * x21 + x1922 * x21 + x1923 * x21)
    )
    result[9, 9, 1] = numpy.sum(
        x128 * (x1870 * x1939 + x1924 * x21 + x1925 * x21 + x1926 * x21)
    )
    result[9, 9, 2] = numpy.sum(
        x128 * (x1572 * x1940 + x1927 * x21 + x1928 * x21 + x1929 * x21)
    )
    result[9, 9, 3] = numpy.sum(
        x122 * (x135 * x1939 + x1930 * x21 + x1931 * x21 + x1932 * x21)
    )
    result[9, 9, 4] = numpy.sum(
        x128 * (x140 * x1940 + x1933 * x21 + x1934 * x21 + x1935 * x21)
    )
    result[9, 9, 5] = numpy.sum(
        x122
        * (x1936 * x21 + x1937 * x21 + x1938 * x21 + x90 * (x129 * x1940 + 6.0 * x1562))
    )
    return result


def int3c2e3d_sph_333(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ff|f) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10, 10), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(4, x17)
    x19 = 17.49341832762486
    x20 = A[1] - B[1]
    x21 = A[2] - B[2]
    x22 = numpy.exp(-ax * bx * x2 * (x0**2 + x20**2 + x21**2))
    x23 = x19 * x2 * x22
    x24 = 2.0 * x14 ** (-1.5) * x23
    x25 = x18 * x24
    x26 = cx ** (-1.0)
    x27 = x14 ** (-0.5)
    x28 = boys(3, x17)
    x29 = 2.0 * x19 * x2 * x22 * x26 * x27 * x28 - x25
    x30 = x29 * x6
    x31 = -2.0 * x19 * x2 * x22 * x26 * x27 * x28 * x5 + x25 * x4
    x32 = -x31
    x33 = boys(5, x17)
    x34 = x24 * x33
    x35 = -2.0 * x18 * x19 * x2 * x22 * x26 * x27 * x5 + x34 * x4
    x36 = -x35
    x37 = x16 * x36
    x38 = x37 * x4
    x39 = x30 + x32 * x5 - x38
    x40 = -x31 - x37
    x41 = 2.0 * x6
    x42 = 2.0 * x18 * x19 * x2 * x22 * x26 * x27 - x34
    x43 = x42 * x6
    x44 = boys(6, x17)
    x45 = x24 * x44
    x46 = -2.0 * x19 * x2 * x22 * x26 * x27 * x33 * x5 + x4 * x45
    x47 = -x46
    x48 = x16 * x47
    x49 = x4 * x48
    x50 = x36 * x5 + x43 - x49
    x51 = x16 * x50
    x52 = x4 * x51
    x53 = x39 * x5 + x40 * x41 - x52
    x54 = -x29 * x6
    x55 = x32 * x5 - x38 - x51 - x54
    x56 = 3.0 * x6
    x57 = -x35 - x48
    x58 = 2.0 * x19 * x2 * x22 * x26 * x27 * x33 - x45
    x59 = x58 * x6
    x60 = boys(7, x17)
    x61 = x24 * x60
    x62 = -2.0 * x19 * x2 * x22 * x26 * x27 * x44 * x5 + x4 * x61
    x63 = -x62
    x64 = x16 * x63
    x65 = x4 * x64
    x66 = x47 * x5 + x59 - x65
    x67 = x16 * x66
    x68 = x4 * x67
    x69 = x41 * x57 + x5 * x50 - x68
    x70 = x16 * x69
    x71 = x4 * x70
    x72 = x5 * x53 + x55 * x56 - x71
    x73 = 4.0 * x6
    x74 = -x42 * x6
    x75 = x6 * (2.0 * x19 * x2 * x22 * x26 * x27 * x44 - x61)
    x76 = boys(8, x17)
    x77 = x24 * x76
    x78 = 2.0 * x19 * x2 * x22 * x26 * x27 * x5 * x60 - x4 * x77
    x79 = x16 * x78
    x80 = -x4 * x79 + x5 * x63 + x75
    x81 = x16 * x80
    x82 = -x4 * x81 - x41 * (x46 + x64) + x5 * x66
    x83 = x16 * x82
    x84 = -x4 * x83 + x5 * x69 - x56 * (-x36 * x5 + x49 + x67 + x74)
    x85 = x16 * x84
    x86 = -x4 * x85 + x5 * x72 + x73 * (x39 * x5 + 2.0 * x40 * x6 - x52 - x70)
    x87 = x4 * x86
    x88 = x6 * x72
    x89 = 5.0 * x88
    x90 = x87 + x89
    x91 = x1 * x15
    x92 = x4 * x91
    x93 = x4 * x72
    x94 = x53 * x6
    x95 = 4.0 * x94
    x96 = x93 + x95
    x97 = 5.0 * x6
    x98 = x91 * x97
    x99 = x90 * x92 + x96 * x98
    x100 = x4 * x53
    x101 = x39 * x6
    x102 = 3.0 * x101
    x103 = x100 + x102
    x104 = x73 * x91
    x105 = x103 * x104 + x92 * x96
    x106 = x91 * (x105 * x98 + x92 * x99)
    x107 = x39 * x4
    x108 = x32 * x6
    x109 = 2.0 * x108
    x110 = x107 + x109
    x111 = x56 * x91
    x112 = x103 * x92 + x110 * x111
    x113 = x91 * (x104 * x112 + x105 * x92)
    x114 = x0 * x113 + x106
    x115 = x23 * x26 * x27 * x28 * x41
    x116 = x41 * x91
    x117 = x111 * (x110 * x92 + x116 * (x115 + x32 * x4)) + x112 * x92
    x118 = x0 * x91
    x119 = -x58 * x6
    x120 = x6 * (2.0 * x19 * x2 * x22 * x26 * x27 * x60 - x77)
    x121 = x24 * boys(9, x17)
    x122 = x16 * x4
    x123 = (
        -x122
        * (
            -x122
            * (
                x122
                * (
                    x122
                    * (
                        x120
                        + x122 * (x121 * x4 - 2.0 * x19 * x2 * x22 * x26 * x27 * x5 * x76)
                        + x5 * x78
                    )
                    + x41 * (x62 + x79)
                    - x5 * x80
                )
                + x5 * x82
                - x56 * (x119 - x47 * x5 + x65 + x81)
            )
            + x5 * x84
            + x73 * (x5 * x50 + 2.0 * x57 * x6 - x68 - x83)
        )
        + x5 * x86
        + x97 * (x5 * x53 + 3.0 * x55 * x6 - x71 - x85)
    )
    x124 = x123 * x4
    x125 = x6 * x86
    x126 = 6.0 * x125
    x127 = x6 * x91
    x128 = 6.0 * x127
    x129 = 3.872983346207417
    x130 = da * db * dc
    x131 = x129 * x130
    x132 = 0.004444444444444444 * x131
    x133 = x9 * x91
    x134 = x133 * (x87 + x89)
    x135 = x133 * (x93 + x95)
    x136 = x91 * (x134 * x92 + x135 * x98)
    x137 = x133 * (x100 + x102)
    x138 = x91 * (x104 * x137 + x135 * x92)
    x139 = x0 * x138 + x136
    x140 = x111 * x133 * (x107 + x109) + x137 * x92
    x141 = 1.732050807568877
    x142 = x130 * x141
    x143 = 0.02222222222222222 * x142
    x144 = x12 * x91
    x145 = x144 * (x87 + x89)
    x146 = x144 * (x93 + x95)
    x147 = x91 * (x145 * x92 + x146 * x98)
    x148 = x144 * (x100 + x102)
    x149 = x91 * (x104 * x148 + x146 * x92)
    x150 = x0 * x149 + x147
    x151 = x111 * x144 * (x107 + x109) + x148 * x92
    x152 = x1**2 / x14**2
    x153 = x10 * x152
    x154 = x153 * x91 * (x87 + x89)
    x155 = x153 * x91 * (x93 + x95)
    x156 = x0 * x155 + x154
    x157 = x153 * (x100 + x102)
    x158 = x152 * x9
    x159 = x12 * x158
    x160 = x159 * x91 * (x87 + x89)
    x161 = x159 * x91 * (x93 + x95)
    x162 = x0 * x161 + x160
    x163 = x159 * (x100 + x102)
    x164 = 0.06666666666666667 * x130
    x165 = x13 * x152
    x166 = x165 * x91 * (x87 + x89)
    x167 = x165 * x91 * (x93 + x95)
    x168 = x0 * x167 + x166
    x169 = x165 * (x100 + x102)
    x170 = x1**3 / x14**3
    x171 = x170 * x9**3
    x172 = x171 * x86
    x173 = x171 * x72
    x174 = x0 * x173 + x172
    x175 = x0 * x53
    x176 = x10 * x170
    x177 = x12 * x176
    x178 = x177 * x86
    x179 = x177 * x72
    x180 = x0 * x179 + x178
    x181 = x13 * x170
    x182 = x181 * x9
    x183 = x182 * x86
    x184 = x182 * x72
    x185 = x0 * x184 + x183
    x186 = x12**3 * x170
    x187 = x186 * x86
    x188 = x186 * x72
    x189 = x0 * x188 + x187
    x190 = -x8 - A[1]
    x191 = -2.0 * x18 * x19 * x190 * x2 * x22 * x26 * x27 + x34 * x9
    x192 = -x191
    x193 = x16 * x192
    x194 = -2.0 * x19 * x190 * x2 * x22 * x26 * x27 * x28 + x25 * x9
    x195 = -x193 - x194
    x196 = x195 * x6
    x197 = -x194
    x198 = x193 * x4 - x197 * x5
    x199 = -x198
    x200 = -2.0 * x19 * x190 * x2 * x22 * x26 * x27 * x33 + x45 * x9
    x201 = -x200
    x202 = x16 * x201
    x203 = -x192 * x5 + x202 * x4
    x204 = -x203
    x205 = x16 * x204
    x206 = x205 * x4
    x207 = x196 + x199 * x5 - x206
    x208 = -x198 - x205
    x209 = -x191 - x202
    x210 = x209 * x6
    x211 = -2.0 * x19 * x190 * x2 * x22 * x26 * x27 * x44 + x61 * x9
    x212 = -x211
    x213 = x16 * x212
    x214 = -x201 * x5 + x213 * x4
    x215 = -x214
    x216 = x16 * x215
    x217 = x216 * x4
    x218 = x204 * x5 + x210 - x217
    x219 = x16 * x218
    x220 = x219 * x4
    x221 = x207 * x5 + x208 * x41 - x220
    x222 = -x6 * (x200 + x213)
    x223 = 2.0 * x19 * x190 * x2 * x22 * x26 * x27 * x60 - x77 * x9
    x224 = x16 * x223
    x225 = x212 * x5 - x224 * x4
    x226 = x16 * x225
    x227 = x215 * x5 + x222 - x226 * x4
    x228 = x16 * x227
    x229 = x218 * x5 - x228 * x4 - x41 * (x203 + x216)
    x230 = x16 * x229
    x231 = x221 * x5 - x230 * x4 + x56 * (x195 * x6 + x199 * x5 - x206 - x219)
    x232 = x231 * x4
    x233 = x221 * x6
    x234 = 4.0 * x233
    x235 = x232 + x234
    x236 = x221 * x4
    x237 = x207 * x6
    x238 = 3.0 * x237
    x239 = x236 + x238
    x240 = x104 * x239 + x235 * x92
    x241 = x207 * x4
    x242 = x199 * x6
    x243 = 2.0 * x242
    x244 = x241 + x243
    x245 = x111 * x244 + x239 * x92
    x246 = x91 * (x104 * x245 + x240 * x92)
    x247 = x113 * x20 + x246
    x248 = x197 * x6
    x249 = x199 * x4
    x250 = x248 + x249
    x251 = x116 * x250 + x244 * x92
    x252 = x91 * (x111 * x251 + x245 * x92)
    x253 = x20 * x91
    x254 = x117 * x253 + x252
    x255 = -x6 * (x211 + x224)
    x256 = -x121 * x9 + 2.0 * x19 * x190 * x2 * x22 * x26 * x27 * x76
    x257 = (
        -x122
        * (
            x122
            * (
                x122 * (x122 * (x122 * x256 - x223 * x5) + x225 * x5 + x255)
                - x227 * x5
                + x41 * (x214 + x226)
            )
            + x229 * x5
            + x56 * (x204 * x5 + x209 * x6 - x217 - x228)
        )
        + x231 * x5
        + x73 * (x207 * x5 + 2.0 * x208 * x6 - x220 - x230)
    )
    x258 = x257 * x4
    x259 = x231 * x6
    x260 = 5.0 * x259
    x261 = x91 * (x240 * x98 + x92 * (x235 * x98 + x92 * (x258 + x260)))
    x262 = x231 * x9
    x263 = x262 + x88
    x264 = x221 * x9
    x265 = x264 + x94
    x266 = x104 * x265 + x263 * x92
    x267 = x207 * x9
    x268 = x101 + x267
    x269 = x111 * x268 + x265 * x92
    x270 = x91 * (x104 * x269 + x266 * x92)
    x271 = x138 * x20 + x270
    x272 = x199 * x9
    x273 = x108 + x272
    x274 = x116 * x273
    x275 = x268 * x92 + x274
    x276 = x91 * (x111 * x275 + x269 * x92)
    x277 = x140 * x253 + x276
    x278 = x257 * x9
    x279 = x125 + x278
    x280 = x91 * (x266 * x98 + x92 * (x263 * x98 + x279 * x92))
    x281 = 0.02222222222222222 * x131
    x282 = x144 * (x232 + x234)
    x283 = x144 * (x236 + x238)
    x284 = x91 * (x104 * x283 + x282 * x92)
    x285 = x149 * x20 + x284
    x286 = x144 * x243
    x287 = x144 * x241 + x286
    x288 = x91 * (x111 * x287 + x283 * x92)
    x289 = x151 * x253 + x288
    x290 = x91 * (x144 * x92 * (x258 + x260) + x282 * x98)
    x291 = x133 * (x263 + x88)
    x292 = x133 * (x265 + x94)
    x293 = x91 * (x104 * x292 + x291 * x92)
    x294 = x155 * x20 + x293
    x295 = x133 * (x101 + x268)
    x296 = x91 * (x111 * x295 + x292 * x92)
    x297 = x157 * x253 + x296
    x298 = x133 * (x125 + x279)
    x299 = x91 * (x291 * x98 + x298 * x92)
    x300 = x144 * x88
    x301 = x144 * x262 + x300
    x302 = x144 * x94
    x303 = x144 * x264 + x302
    x304 = x91 * (x104 * x303 + x301 * x92)
    x305 = x161 * x20 + x304
    x306 = x101 * x144
    x307 = x144 * x267 + x306
    x308 = x91 * (x111 * x307 + x303 * x92)
    x309 = x163 * x253 + x308
    x310 = x125 * x144
    x311 = x144 * x278 + x310
    x312 = x91 * (x301 * x98 + x311 * x92)
    x313 = 2.23606797749979 * x164
    x314 = x165 * x91 * (x232 + x234)
    x315 = x167 * x20 + x314
    x316 = x165 * x91 * (x236 + x238)
    x317 = x169 * x253 + x316
    x318 = x165 * x91 * (x258 + x260)
    x319 = x91 * (x133 * x291 + x153 * x88)
    x320 = x173 * x20 + x319
    x321 = x91 * (x133 * x292 + x153 * x94)
    x322 = x20 * x53
    x323 = x171 * x322 + x321
    x324 = x91 * (x125 * x153 + x133 * x298)
    x325 = x91 * (x133 * x301 + x159 * x88)
    x326 = x179 * x20 + x325
    x327 = x91 * (x133 * x303 + x159 * x94)
    x328 = x177 * x322 + x327
    x329 = x91 * (x125 * x159 + x133 * x311)
    x330 = x165 * x88
    x331 = x91 * (x165 * x262 + x330)
    x332 = x184 * x20 + x331
    x333 = x165 * x94
    x334 = x91 * (x165 * x264 + x333)
    x335 = x182 * x322 + x334
    x336 = x125 * x165
    x337 = x91 * (x165 * x278 + x336)
    x338 = x186 * x231
    x339 = x188 * x20 + x338
    x340 = x186 * x221
    x341 = x186 * x322 + x340
    x342 = x186 * x257
    x343 = -x11 - A[2]
    x344 = x12 * x34 - 2.0 * x18 * x19 * x2 * x22 * x26 * x27 * x343
    x345 = -x344
    x346 = x16 * x345
    x347 = x12 * x25 - 2.0 * x19 * x2 * x22 * x26 * x27 * x28 * x343
    x348 = -x346 - x347
    x349 = x348 * x6
    x350 = -x347
    x351 = x346 * x4 - x350 * x5
    x352 = -x351
    x353 = x12 * x45 - 2.0 * x19 * x2 * x22 * x26 * x27 * x33 * x343
    x354 = -x353
    x355 = x16 * x354
    x356 = -x345 * x5 + x355 * x4
    x357 = -x356
    x358 = x16 * x357
    x359 = x358 * x4
    x360 = x349 + x352 * x5 - x359
    x361 = -x351 - x358
    x362 = -x344 - x355
    x363 = x362 * x6
    x364 = x12 * x61 - 2.0 * x19 * x2 * x22 * x26 * x27 * x343 * x44
    x365 = -x364
    x366 = x16 * x365
    x367 = -x354 * x5 + x366 * x4
    x368 = -x367
    x369 = x16 * x368
    x370 = x369 * x4
    x371 = x357 * x5 + x363 - x370
    x372 = x16 * x371
    x373 = x372 * x4
    x374 = x360 * x5 + x361 * x41 - x373
    x375 = -x348 * x6
    x376 = -x6 * (x353 + x366)
    x377 = -x12 * x77 + 2.0 * x19 * x2 * x22 * x26 * x27 * x343 * x60
    x378 = x16 * x377
    x379 = x365 * x5 - x378 * x4
    x380 = x16 * x379
    x381 = x368 * x5 + x376 - x380 * x4
    x382 = x16 * x381
    x383 = x371 * x5 - x382 * x4 - x41 * (x356 + x369)
    x384 = x16 * x383
    x385 = x374 * x5 - x384 * x4 - x56 * (-x352 * x5 + x359 + x372 + x375)
    x386 = x385 * x4
    x387 = x374 * x6
    x388 = 4.0 * x387
    x389 = x386 + x388
    x390 = x374 * x4
    x391 = x360 * x6
    x392 = 3.0 * x391
    x393 = x390 + x392
    x394 = x104 * x393 + x389 * x92
    x395 = x360 * x4
    x396 = x352 * x6
    x397 = 2.0 * x396
    x398 = x395 + x397
    x399 = x111 * x398 + x393 * x92
    x400 = x91 * (x104 * x399 + x394 * x92)
    x401 = x113 * x21 + x400
    x402 = x350 * x6
    x403 = x352 * x4
    x404 = x402 + x403
    x405 = x116 * x404 + x398 * x92
    x406 = x91 * (x111 * x405 + x399 * x92)
    x407 = x21 * x91
    x408 = x117 * x407 + x406
    x409 = -x362 * x6
    x410 = -x6 * (x364 + x378)
    x411 = -x12 * x121 + 2.0 * x19 * x2 * x22 * x26 * x27 * x343 * x76
    x412 = (
        -x122
        * (
            x122
            * (
                x122 * (x122 * (x122 * x411 - x377 * x5) + x379 * x5 + x410)
                - x381 * x5
                + x41 * (x367 + x380)
            )
            + x383 * x5
            - x56 * (-x357 * x5 + x370 + x382 + x409)
        )
        + x385 * x5
        + x73 * (x360 * x5 + 2.0 * x361 * x6 - x373 - x384)
    )
    x413 = x4 * x412
    x414 = x385 * x6
    x415 = 5.0 * x414
    x416 = x91 * (x394 * x98 + x92 * (x389 * x98 + x92 * (x413 + x415)))
    x417 = x133 * (x386 + x388)
    x418 = x133 * (x390 + x392)
    x419 = x91 * (x104 * x418 + x417 * x92)
    x420 = x138 * x21 + x419
    x421 = x133 * (x395 + x397)
    x422 = x91 * (x111 * x421 + x418 * x92)
    x423 = x140 * x407 + x422
    x424 = x91 * (x133 * x92 * (x413 + x415) + x417 * x98)
    x425 = x12 * x385 + x88
    x426 = x12 * x374 + x94
    x427 = x104 * x426 + x425 * x92
    x428 = x101 + x12 * x360
    x429 = x111 * x428 + x426 * x92
    x430 = x91 * (x104 * x429 + x427 * x92)
    x431 = x149 * x21 + x430
    x432 = x108 + x12 * x352
    x433 = x116 * x432
    x434 = x428 * x92 + x433
    x435 = x91 * (x111 * x434 + x429 * x92)
    x436 = x151 * x407 + x435
    x437 = x12 * x412 + x125
    x438 = x91 * (x427 * x98 + x92 * (x425 * x98 + x437 * x92))
    x439 = x153 * x91 * (x386 + x388)
    x440 = x155 * x21 + x439
    x441 = x153 * x91 * (x390 + x392)
    x442 = x157 * x407 + x441
    x443 = x153 * x91 * (x413 + x415)
    x444 = x158 * x4
    x445 = x158 * x73
    x446 = x91 * (x425 * x444 + x426 * x445)
    x447 = x161 * x21 + x446
    x448 = x158 * x56
    x449 = x91 * (x426 * x444 + x428 * x448)
    x450 = x163 * x407 + x449
    x451 = x91 * (x158 * x425 * x97 + x437 * x444)
    x452 = x144 * x425 + x300
    x453 = x144 * x426 + x302
    x454 = x91 * (x104 * x453 + x452 * x92)
    x455 = x167 * x21 + x454
    x456 = x144 * x428 + x306
    x457 = x91 * (x111 * x456 + x453 * x92)
    x458 = x169 * x407 + x457
    x459 = x144 * x437 + x310
    x460 = x91 * (x452 * x98 + x459 * x92)
    x461 = x171 * x385
    x462 = x173 * x21 + x461
    x463 = x171 * x374
    x464 = x21 * x53
    x465 = x171 * x464 + x463
    x466 = x171 * x412
    x467 = x176 * x425
    x468 = x179 * x21 + x467
    x469 = x176 * x426
    x470 = x177 * x464 + x469
    x471 = x176 * x437
    x472 = x158 * x452
    x473 = x184 * x21 + x472
    x474 = x158 * x453
    x475 = x182 * x464 + x474
    x476 = x158 * x459
    x477 = x91 * (x144 * x452 + x330)
    x478 = x188 * x21 + x477
    x479 = x91 * (x144 * x453 + x333)
    x480 = x186 * x464 + x479
    x481 = x91 * (x144 * x459 + x336)
    x482 = x202 * x9
    x483 = x190 * x192 + x43 - x482
    x484 = x16 * x483
    x485 = x193 * x9
    x486 = x190 * x197 - x484 - x485 - x54
    x487 = x486 * x6
    x488 = x190 * x197 + x30 - x485
    x489 = x4 * x484 - x488 * x5
    x490 = -x489
    x491 = x213 * x9
    x492 = x190 * x201 - x491 + x59
    x493 = x16 * x492
    x494 = x4 * x493 - x483 * x5
    x495 = -x494
    x496 = x16 * x495
    x497 = x4 * x496
    x498 = x487 + x490 * x5 - x497
    x499 = x6 * (x190 * x192 - x482 - x493 - x74)
    x500 = x190 * x212 - x224 * x9 + x75
    x501 = x16 * x500
    x502 = -x4 * x501 + x492 * x5
    x503 = x16 * x502
    x504 = -x4 * x503 + x495 * x5 + x499
    x505 = x16 * x504
    x506 = -x4 * x505 - x41 * (x489 + x496) + x498 * x5
    x507 = x4 * x506
    x508 = x498 * x6
    x509 = 3.0 * x508
    x510 = x507 + x509
    x511 = x4 * x498
    x512 = x490 * x6
    x513 = 2.0 * x512
    x514 = x511 + x513
    x515 = x111 * x514 + x510 * x92
    x516 = x488 * x6
    x517 = x4 * x490
    x518 = x516 + x517
    x519 = x116 * x518 + x514 * x92
    x520 = x91 * (x111 * x519 + x515 * x92)
    x521 = x20 * x252 + x520
    x522 = x20 * x254 + x521
    x523 = x6 * (-x119 + x190 * x201 - x491 - x501)
    x524 = x16 * x9
    x525 = x120 + x190 * x223 - x256 * x524
    x526 = (
        x122
        * (
            x122 * (x122 * (x122 * x525 - x5 * x500) + x5 * x502 + x523)
            + x41 * (x494 + x503)
            - x5 * x504
        )
        + x5 * x506
        + x56 * (x486 * x6 + x490 * x5 - x497 - x505)
    )
    x527 = x4 * x526
    x528 = x506 * x6
    x529 = 4.0 * x528
    x530 = x91 * (x104 * x515 + x92 * (x104 * x510 + x92 * (x527 + x529)))
    x531 = x20 * x246 + x530
    x532 = x506 * x9
    x533 = 2.0 * x233
    x534 = x532 + x533
    x535 = x498 * x9
    x536 = 2.0 * x237
    x537 = x535 + x536
    x538 = x111 * x537
    x539 = x534 * x92 + x538
    x540 = x490 * x9
    x541 = x243 + x540
    x542 = x116 * x541 + x537 * x92
    x543 = x91 * (x111 * x542 + x539 * x92)
    x544 = x20 * x276 + x543
    x545 = x20 * x277 + x544
    x546 = x526 * x9
    x547 = 2.0 * x259
    x548 = x546 + x547
    x549 = x91 * (x104 * x539 + x92 * (x104 * x534 + x548 * x92))
    x550 = x20 * x270 + x549
    x551 = x144 * x509
    x552 = x144 * x507 + x551
    x553 = x144 * (x511 + x513)
    x554 = x91 * (x111 * x553 + x552 * x92)
    x555 = x20 * x288 + x554
    x556 = x20 * x289 + x555
    x557 = x91 * (x104 * x552 + x144 * x92 * (x527 + x529))
    x558 = x20 * x284 + x557
    x559 = x116 * x265 + x133 * x534
    x560 = x116 * x268 + x133 * x537
    x561 = x111 * x560
    x562 = x91 * (x559 * x92 + x561)
    x563 = x20 * x296 + x562
    x564 = x20 * x297 + x563
    x565 = x116 * x263 + x133 * x548
    x566 = x91 * (x104 * x559 + x565 * x92)
    x567 = x20 * x293 + x566
    x568 = x144 * (x532 + x533)
    x569 = x144 * (x535 + x536)
    x570 = x111 * x569
    x571 = x91 * (x568 * x92 + x570)
    x572 = x20 * x308 + x571
    x573 = x20 * x309 + x572
    x574 = x144 * (x546 + x547)
    x575 = x91 * (x104 * x568 + x574 * x92)
    x576 = x20 * x304 + x575
    x577 = x165 * x509
    x578 = x91 * (x165 * x507 + x577)
    x579 = x20 * x316 + x578
    x580 = x20 * x317 + x579
    x581 = x165 * x91 * (x527 + x529)
    x582 = x20 * x314 + x581
    x583 = x91 * (x116 * x292 + x133 * x559)
    x584 = x20 * x321 + x583
    x585 = x20 * x323 + x584
    x586 = x91 * (x116 * x291 + x133 * x565)
    x587 = x20 * x319 + x586
    x588 = x91 * (x116 * x303 + x133 * x568)
    x589 = x20 * x327 + x588
    x590 = x20 * x328 + x589
    x591 = x91 * (x116 * x301 + x133 * x574)
    x592 = x20 * x325 + x591
    x593 = x165 * x91 * (x532 + x533)
    x594 = x20 * x334 + x593
    x595 = x20 * x335 + x594
    x596 = x165 * x91 * (x546 + x547)
    x597 = x20 * x331 + x596
    x598 = x186 * x506
    x599 = x20 * x340 + x598
    x600 = x20 * x341 + x599
    x601 = x186 * x526
    x602 = x20 * x338 + x601
    x603 = -x190 * x345 + x355 * x9
    x604 = -x603
    x605 = x16 * x604
    x606 = -x190 * x350 + x346 * x9
    x607 = -x605 - x606
    x608 = x6 * x607
    x609 = -x606
    x610 = x4 * x605 - x5 * x609
    x611 = -x610
    x612 = -x190 * x354 + x366 * x9
    x613 = -x612
    x614 = x16 * x613
    x615 = x4 * x614 - x5 * x604
    x616 = -x615
    x617 = x16 * x616
    x618 = x4 * x617
    x619 = x5 * x611 + x608 - x618
    x620 = -x6 * (x603 + x614)
    x621 = x190 * x365 - x378 * x9
    x622 = x16 * x621
    x623 = -x4 * x622 + x5 * x613
    x624 = x16 * x623
    x625 = -x4 * x624 + x5 * x616 + x620
    x626 = x16 * x625
    x627 = -x4 * x626 - x41 * (x610 + x617) + x5 * x619
    x628 = x4 * x627 + x56 * x619
    x629 = x41 * x611
    x630 = x4 * x619 + x629
    x631 = x111 * x630 + x628 * x92
    x632 = x6 * x609
    x633 = x4 * x611 + x632
    x634 = x116 * x633 + x630 * x92
    x635 = x91 * (x111 * x634 + x631 * x92)
    x636 = x21 * x252 + x635
    x637 = x20 * x408 + x636
    x638 = -x6 * (x612 + x622)
    x639 = x190 * x377 - x411 * x524
    x640 = (
        x122
        * (
            x122 * (x122 * (x122 * x639 - x5 * x621) + x5 * x623 + x638)
            + x41 * (x615 + x624)
            - x5 * x625
        )
        + x5 * x627
        + x56 * (x5 * x611 + x6 * x607 - x618 - x626)
    )
    x641 = x91 * (x104 * x631 + x92 * (x104 * x628 + x92 * (x4 * x640 + x627 * x73)))
    x642 = x21 * x246 + x641
    x643 = x387 + x627 * x9
    x644 = x391 + x619 * x9
    x645 = x111 * x644 + x643 * x92
    x646 = x396 + x611 * x9
    x647 = x116 * x646
    x648 = x644 * x92 + x647
    x649 = x91 * (x111 * x648 + x645 * x92)
    x650 = x21 * x276 + x649
    x651 = x20 * x423 + x650
    x652 = x414 + x640 * x9
    x653 = x91 * (x104 * x645 + x92 * (x104 * x643 + x652 * x92))
    x654 = x21 * x270 + x653
    x655 = x12 * x627 + x233
    x656 = x12 * x619 + x237
    x657 = x111 * x656 + x655 * x92
    x658 = x12 * x611 + x242
    x659 = x116 * x658
    x660 = x656 * x92 + x659
    x661 = x91 * (x111 * x660 + x657 * x92)
    x662 = x21 * x288 + x661
    x663 = x20 * x436 + x662
    x664 = x12 * x640 + x259
    x665 = x91 * (x104 * x657 + x92 * (x104 * x655 + x664 * x92))
    x666 = x21 * x284 + x665
    x667 = x133 * (x387 + x643)
    x668 = x133 * (x391 + x644)
    x669 = x91 * (x111 * x668 + x667 * x92)
    x670 = x21 * x296 + x669
    x671 = x20 * x442 + x670
    x672 = x133 * (x414 + x652)
    x673 = x91 * (x104 * x667 + x672 * x92)
    x674 = x21 * x293 + x673
    x675 = x127 * x426 + x133 * x655
    x676 = x127 * x428 + x133 * x656
    x677 = x91 * (x111 * x676 + x675 * x92)
    x678 = x21 * x308 + x677
    x679 = x20 * x450 + x678
    x680 = x127 * x425 + x133 * x664
    x681 = x91 * (x104 * x675 + x680 * x92)
    x682 = x21 * x304 + x681
    x683 = x129 * x164
    x684 = x144 * (x233 + x655)
    x685 = x144 * (x237 + x656)
    x686 = x91 * (x111 * x685 + x684 * x92)
    x687 = x21 * x316 + x686
    x688 = x20 * x458 + x687
    x689 = x144 * (x259 + x664)
    x690 = x91 * (x104 * x684 + x689 * x92)
    x691 = x21 * x314 + x690
    x692 = x91 * (x133 * x667 + x153 * x387)
    x693 = x21 * x321 + x692
    x694 = x20 * x465 + x693
    x695 = x91 * (x133 * x672 + x153 * x414)
    x696 = x21 * x319 + x695
    x697 = x158 * x6
    x698 = x91 * (x133 * x675 + x426 * x697)
    x699 = x21 * x327 + x698
    x700 = x20 * x470 + x699
    x701 = x91 * (x133 * x680 + x425 * x697)
    x702 = x21 * x325 + x701
    x703 = x91 * (x127 * x453 + x133 * x684)
    x704 = x21 * x334 + x703
    x705 = x20 * x475 + x704
    x706 = x91 * (x127 * x452 + x133 * x689)
    x707 = x21 * x331 + x706
    x708 = x91 * (x144 * x684 + x165 * x233)
    x709 = x21 * x340 + x708
    x710 = x20 * x480 + x709
    x711 = x91 * (x144 * x689 + x165 * x259)
    x712 = x21 * x338 + x711
    x713 = x12 * x355
    x714 = x343 * x345 + x43 - x713
    x715 = x16 * x714
    x716 = x12 * x346
    x717 = x343 * x350 - x54 - x715 - x716
    x718 = x6 * x717
    x719 = x30 + x343 * x350 - x716
    x720 = x4 * x715 - x5 * x719
    x721 = -x720
    x722 = x12 * x366
    x723 = x343 * x354 + x59 - x722
    x724 = x16 * x723
    x725 = x4 * x724 - x5 * x714
    x726 = -x725
    x727 = x16 * x726
    x728 = x4 * x727
    x729 = x5 * x721 + x718 - x728
    x730 = x6 * (x343 * x345 - x713 - x724 - x74)
    x731 = -x12 * x378 + x343 * x365 + x75
    x732 = x16 * x731
    x733 = -x4 * x732 + x5 * x723
    x734 = x16 * x733
    x735 = -x4 * x734 + x5 * x726 + x730
    x736 = x16 * x735
    x737 = -x4 * x736 - x41 * (x720 + x727) + x5 * x729
    x738 = x4 * x737
    x739 = x6 * x729
    x740 = 3.0 * x739
    x741 = x738 + x740
    x742 = x4 * x729
    x743 = x6 * x721
    x744 = 2.0 * x743
    x745 = x742 + x744
    x746 = x111 * x745 + x741 * x92
    x747 = x6 * x719
    x748 = x4 * x721
    x749 = x747 + x748
    x750 = x116 * x749 + x745 * x92
    x751 = x91 * (x111 * x750 + x746 * x92)
    x752 = x21 * x406 + x751
    x753 = x21 * x408 + x752
    x754 = -x6 * x717
    x755 = x6 * (-x119 + x343 * x354 - x722 - x732)
    x756 = x12 * x16
    x757 = x120 + x343 * x377 - x411 * x756
    x758 = (
        x122
        * (
            x122 * (x122 * (x122 * x757 - x5 * x731) + x5 * x733 + x755)
            + x41 * (x725 + x734)
            - x5 * x735
        )
        + x5 * x737
        - x56 * (-x5 * x721 + x728 + x736 + x754)
    )
    x759 = x4 * x758
    x760 = x6 * x737
    x761 = 4.0 * x760
    x762 = x91 * (x104 * x746 + x92 * (x104 * x741 + x92 * (x759 + x761)))
    x763 = x21 * x400 + x762
    x764 = x133 * (x738 + x740)
    x765 = x133 * (x742 + x744)
    x766 = x91 * (x111 * x765 + x764 * x92)
    x767 = x21 * x422 + x766
    x768 = x21 * x423 + x767
    x769 = x91 * (x104 * x764 + x133 * x92 * (x759 + x761))
    x770 = x21 * x419 + x769
    x771 = x12 * x737 + 2.0 * x387
    x772 = x12 * x729 + 2.0 * x391
    x773 = x111 * x772
    x774 = x771 * x92 + x773
    x775 = x12 * x721 + x397
    x776 = x116 * x775 + x772 * x92
    x777 = x91 * (x111 * x776 + x774 * x92)
    x778 = x21 * x435 + x777
    x779 = x21 * x436 + x778
    x780 = x12 * x758 + 2.0 * x414
    x781 = x91 * (x104 * x774 + x92 * (x104 * x771 + x780 * x92))
    x782 = x21 * x430 + x781
    x783 = x153 * x91 * (x738 + x740)
    x784 = x21 * x441 + x783
    x785 = x21 * x442 + x784
    x786 = x153 * x91 * (x759 + x761)
    x787 = x21 * x439 + x786
    x788 = x91 * (x444 * x771 + x448 * x772)
    x789 = x21 * x449 + x788
    x790 = x21 * x450 + x789
    x791 = x91 * (x444 * x780 + x445 * x771)
    x792 = x21 * x446 + x791
    x793 = x116 * x426 + x144 * x771
    x794 = x116 * x428 + x144 * x772
    x795 = x111 * x794
    x796 = x91 * (x793 * x92 + x795)
    x797 = x21 * x457 + x796
    x798 = x21 * x458 + x797
    x799 = x116 * x425 + x144 * x780
    x800 = x91 * (x104 * x793 + x799 * x92)
    x801 = x21 * x454 + x800
    x802 = x171 * x737
    x803 = x21 * x463 + x802
    x804 = x21 * x465 + x803
    x805 = x171 * x758
    x806 = x21 * x461 + x805
    x807 = x176 * x771
    x808 = x21 * x469 + x807
    x809 = x21 * x470 + x808
    x810 = x176 * x780
    x811 = x21 * x467 + x810
    x812 = x158 * x793
    x813 = x21 * x474 + x812
    x814 = x21 * x475 + x813
    x815 = x158 * x799
    x816 = x21 * x472 + x815
    x817 = x91 * (x116 * x453 + x144 * x793)
    x818 = x21 * x479 + x817
    x819 = x21 * x480 + x818
    x820 = x91 * (x116 * x452 + x144 * x799)
    x821 = x21 * x477 + x820
    x822 = x493 * x9
    x823 = x190 * x483 + 2.0 * x210 - x822
    x824 = x16 * x823
    x825 = x484 * x9
    x826 = x6 * (x190 * x488 + 2.0 * x195 * x6 - x824 - x825)
    x827 = x190 * x488 + 2.0 * x196 - x825
    x828 = x4 * x824 - x5 * x827
    x829 = -x828
    x830 = x190 * x492 + 2.0 * x222 - x501 * x9
    x831 = x16 * x830
    x832 = -x4 * x831 + x5 * x823
    x833 = x16 * x832
    x834 = -x4 * x833 + x5 * x829 + x826
    x835 = x6 * (x190 * x483 + 2.0 * x209 * x6 - x822 - x831)
    x836 = x190 * x500 + 2.0 * x255 - x524 * x525
    x837 = (
        -x122 * (x122 * (x122 * x836 - x5 * x830) + x5 * x832 + x835)
        - x41 * (x828 + x833)
        + x5 * x834
    )
    x838 = x4 * x837
    x839 = x6 * x834
    x840 = 3.0 * x839
    x841 = x4 * x834
    x842 = x6 * x829
    x843 = 2.0 * x842
    x844 = x841 + x843
    x845 = x6 * x827
    x846 = x4 * x829
    x847 = x845 + x846
    x848 = x116 * x847 + x844 * x92
    x849 = x91 * (x111 * x848 + x92 * (x111 * x844 + x92 * (x838 + x840)))
    x850 = x20 * x520 + x849
    x851 = x20 * x521 + x850
    x852 = x837 * x9
    x853 = 3.0 * x528
    x854 = x852 + x853
    x855 = x834 * x9
    x856 = x509 + x855
    x857 = x829 * x9
    x858 = 3.0 * x512
    x859 = x857 + x858
    x860 = x116 * x859 + x856 * x92
    x861 = x91 * (x111 * x860 + x92 * (x111 * x856 + x854 * x92))
    x862 = x20 * x543 + x861
    x863 = x20 * x544 + x862
    x864 = x144 * (x841 + x843)
    x865 = x91 * (x111 * x864 + x144 * x92 * (x838 + x840))
    x866 = x20 * x554 + x865
    x867 = x20 * x555 + x866
    x868 = x111 * x534 + x133 * x854
    x869 = x133 * x856 + x538
    x870 = x91 * (x111 * x869 + x868 * x92)
    x871 = x20 * x562 + x870
    x872 = x20 * x563 + x871
    x873 = x144 * (x852 + x853)
    x874 = x144 * x855 + x551
    x875 = x91 * (x111 * x874 + x873 * x92)
    x876 = x20 * x571 + x875
    x877 = x20 * x572 + x876
    x878 = x165 * x91 * (x838 + x840)
    x879 = x20 * x578 + x878
    x880 = x20 * x579 + x879
    x881 = x91 * (x111 * x559 + x133 * x868)
    x882 = x20 * x583 + x881
    x883 = x20 * x584 + x882
    x884 = x91 * (x111 * x568 + x133 * x873)
    x885 = x20 * x588 + x884
    x886 = x20 * x589 + x885
    x887 = x165 * x91 * (x852 + x853)
    x888 = x20 * x593 + x887
    x889 = x20 * x594 + x888
    x890 = x186 * x837
    x891 = x20 * x598 + x890
    x892 = x20 * x599 + x891
    x893 = x614 * x9
    x894 = x190 * x604 + x363 - x893
    x895 = x16 * x894
    x896 = x605 * x9
    x897 = x6 * (x190 * x609 - x375 - x895 - x896)
    x898 = x190 * x609 + x349 - x896
    x899 = x4 * x895 - x5 * x898
    x900 = -x899
    x901 = x190 * x613 + x376 - x622 * x9
    x902 = x16 * x901
    x903 = -x4 * x902 + x5 * x894
    x904 = x16 * x903
    x905 = -x4 * x904 + x5 * x900 + x897
    x906 = x6 * (x190 * x604 - x409 - x893 - x902)
    x907 = x190 * x621 + x410 - x524 * x639
    x908 = (
        -x122 * (x122 * (x122 * x907 - x5 * x901) + x5 * x903 + x906)
        - x41 * (x899 + x904)
        + x5 * x905
    )
    x909 = x56 * x905
    x910 = x41 * x900
    x911 = x4 * x905 + x910
    x912 = x6 * x898
    x913 = x4 * x900 + x912
    x914 = x116 * x913 + x911 * x92
    x915 = x91 * (x111 * x914 + x92 * (x111 * x911 + x92 * (x4 * x908 + x909)))
    x916 = x21 * x520 + x915
    x917 = x20 * x636 + x916
    x918 = x41 * x627
    x919 = x9 * x908 + x918
    x920 = x41 * x619
    x921 = x9 * x905 + x920
    x922 = x111 * x921
    x923 = x629 + x9 * x900
    x924 = x116 * x923 + x92 * x921
    x925 = x91 * (x111 * x924 + x92 * (x919 * x92 + x922))
    x926 = x21 * x543 + x925
    x927 = x20 * x650 + x926
    x928 = x12 * x908 + x528
    x929 = x12 * x905 + x508
    x930 = x111 * x929
    x931 = x12 * x900 + x512
    x932 = x116 * x931
    x933 = x92 * x929 + x932
    x934 = x91 * (x111 * x933 + x92 * (x92 * x928 + x930))
    x935 = x21 * x554 + x934
    x936 = x20 * x662 + x935
    x937 = x116 * x643 + x133 * x919
    x938 = x116 * x644 + x133 * x921
    x939 = x111 * x938
    x940 = x91 * (x92 * x937 + x939)
    x941 = x21 * x562 + x940
    x942 = x20 * x670 + x941
    x943 = x116 * x655
    x944 = x133 * x928 + x943
    x945 = x116 * x656
    x946 = x133 * x929 + x945
    x947 = x111 * x946
    x948 = x91 * (x92 * x944 + x947)
    x949 = x21 * x571 + x948
    x950 = x20 * x678 + x949
    x951 = x144 * (x528 + x928)
    x952 = x144 * (x508 + x929)
    x953 = x111 * x952
    x954 = x91 * (x92 * x951 + x953)
    x955 = x21 * x578 + x954
    x956 = x20 * x687 + x955
    x957 = x91 * (x116 * x667 + x133 * x937)
    x958 = x21 * x583 + x957
    x959 = x20 * x693 + x958
    x960 = x91 * (x116 * x675 + x133 * x944)
    x961 = x21 * x588 + x960
    x962 = x20 * x699 + x961
    x963 = x116 * x684
    x964 = x91 * (x133 * x951 + x963)
    x965 = x21 * x593 + x964
    x966 = x20 * x704 + x965
    x967 = x91 * (x144 * x951 + x165 * x528)
    x968 = x21 * x598 + x967
    x969 = x20 * x709 + x968
    x970 = -x190 * x714 + x724 * x9
    x971 = -x970
    x972 = x16 * x971
    x973 = -x190 * x719 + x715 * x9
    x974 = -x6 * (x972 + x973)
    x975 = -x973
    x976 = x4 * x972 - x5 * x975
    x977 = -x976
    x978 = x190 * x723 - x732 * x9
    x979 = x16 * x978
    x980 = -x4 * x979 + x5 * x971
    x981 = x16 * x980
    x982 = -x4 * x981 + x5 * x977 + x974
    x983 = -x6 * (x970 + x979)
    x984 = x190 * x731 - x524 * x757
    x985 = (
        -x122 * (x122 * (x122 * x984 - x5 * x978) + x5 * x980 + x983)
        - x41 * (x976 + x981)
        + x5 * x982
    )
    x986 = x56 * x982
    x987 = x41 * x977
    x988 = x4 * x982 + x987
    x989 = x6 * x975
    x990 = x4 * x977 + x989
    x991 = x116 * x990 + x92 * x988
    x992 = x91 * (x111 * x991 + x92 * (x111 * x988 + x92 * (x4 * x985 + x986)))
    x993 = x21 * x635 + x992
    x994 = x21 * x636 + x993
    x995 = x760 + x9 * x985
    x996 = x739 + x9 * x982
    x997 = x743 + x9 * x977
    x998 = x116 * x997
    x999 = x92 * x996 + x998
    x1000 = x91 * (x111 * x999 + x92 * (x111 * x996 + x92 * x995))
    x1001 = x1000 + x21 * x649
    x1002 = x1001 + x21 * x650
    x1003 = x12 * x985 + x918
    x1004 = x12 * x982 + x920
    x1005 = x1004 * x111
    x1006 = x12 * x977 + x629
    x1007 = x1006 * x116
    x1008 = x1004 * x92 + x1007
    x1009 = x91 * (x1008 * x111 + x92 * (x1003 * x92 + x1005))
    x1010 = x1009 + x21 * x661
    x1011 = x1010 + x21 * x662
    x1012 = x133 * (x760 + x995)
    x1013 = x133 * (x739 + x996)
    x1014 = x91 * (x1012 * x92 + x1013 * x111)
    x1015 = x1014 + x21 * x669
    x1016 = x1015 + x21 * x670
    x1017 = x1003 * x133 + x127 * x771
    x1018 = x1004 * x133 + x127 * x772
    x1019 = x91 * (x1017 * x92 + x1018 * x111)
    x1020 = x1019 + x21 * x677
    x1021 = x1020 + x21 * x678
    x1022 = x1003 * x144 + x943
    x1023 = x1004 * x144 + x945
    x1024 = x1023 * x111
    x1025 = x91 * (x1022 * x92 + x1024)
    x1026 = x1025 + x21 * x686
    x1027 = x1026 + x21 * x687
    x1028 = x91 * (x1012 * x133 + x153 * x760)
    x1029 = x1028 + x21 * x692
    x1030 = x1029 + x21 * x693
    x1031 = x91 * (x1017 * x133 + x697 * x771)
    x1032 = x1031 + x21 * x698
    x1033 = x1032 + x21 * x699
    x1034 = x91 * (x1022 * x133 + x127 * x793)
    x1035 = x1034 + x21 * x703
    x1036 = x1035 + x21 * x704
    x1037 = x91 * (x1022 * x144 + x963)
    x1038 = x1037 + x21 * x708
    x1039 = x1038 + x21 * x709
    x1040 = x12 * x724
    x1041 = -x1040 + x343 * x714 + 2.0 * x363
    x1042 = x1041 * x16
    x1043 = x12 * x715
    x1044 = x6 * (-x1042 - x1043 + x343 * x719 + 2.0 * x348 * x6)
    x1045 = -x1043 + x343 * x719 + 2.0 * x349
    x1046 = x1042 * x4 - x1045 * x5
    x1047 = -x1046
    x1048 = -x12 * x732 + x343 * x723 + 2.0 * x376
    x1049 = x1048 * x16
    x1050 = x1041 * x5 - x1049 * x4
    x1051 = x1050 * x16
    x1052 = x1044 + x1047 * x5 - x1051 * x4
    x1053 = x6 * (-x1040 - x1049 + x343 * x714 + 2.0 * x362 * x6)
    x1054 = x343 * x731 + 2.0 * x410 - x756 * x757
    x1055 = (
        x1052 * x5
        - x122 * (x1050 * x5 + x1053 - x122 * (x1048 * x5 - x1054 * x122))
        - x41 * (x1046 + x1051)
    )
    x1056 = x1055 * x4
    x1057 = x1052 * x6
    x1058 = 3.0 * x1057
    x1059 = x1052 * x4
    x1060 = x1047 * x6
    x1061 = 2.0 * x1060
    x1062 = x1059 + x1061
    x1063 = x1045 * x6
    x1064 = x1047 * x4
    x1065 = x1063 + x1064
    x1066 = x1062 * x92 + x1065 * x116
    x1067 = x91 * (x1066 * x111 + x92 * (x1062 * x111 + x92 * (x1056 + x1058)))
    x1068 = x1067 + x21 * x751
    x1069 = x1068 + x21 * x752
    x1070 = x133 * (x1059 + x1061)
    x1071 = x91 * (x1070 * x111 + x133 * x92 * (x1056 + x1058))
    x1072 = x1071 + x21 * x766
    x1073 = x1072 + x21 * x767
    x1074 = x1055 * x12 + 3.0 * x760
    x1075 = x1052 * x12 + x740
    x1076 = x1047 * x12 + 3.0 * x743
    x1077 = x1075 * x92 + x1076 * x116
    x1078 = x91 * (x1077 * x111 + x92 * (x1074 * x92 + x1075 * x111))
    x1079 = x1078 + x21 * x777
    x1080 = x1079 + x21 * x778
    x1081 = x153 * x91 * (x1056 + x1058)
    x1082 = x1081 + x21 * x783
    x1083 = x1082 + x21 * x784
    x1084 = x91 * (x1074 * x444 + x1075 * x448)
    x1085 = x1084 + x21 * x788
    x1086 = x1085 + x21 * x789
    x1087 = x1074 * x144 + x111 * x771
    x1088 = x1075 * x144 + x773
    x1089 = x91 * (x1087 * x92 + x1088 * x111)
    x1090 = x1089 + x21 * x796
    x1091 = x1090 + x21 * x797
    x1092 = x1055 * x171
    x1093 = x1092 + x21 * x802
    x1094 = x1093 + x21 * x803
    x1095 = x1074 * x176
    x1096 = x1095 + x21 * x807
    x1097 = x1096 + x21 * x808
    x1098 = x1087 * x158
    x1099 = x1098 + x21 * x812
    x1100 = x1099 + x21 * x813
    x1101 = x91 * (x1087 * x144 + x111 * x793)
    x1102 = x1101 + x21 * x817
    x1103 = x1102 + x21 * x818
    x1104 = x0 * x252 + x246
    x1105 = x92 * (x116 * (x248 + x250) + x251)
    x1106 = x0 * x276 + x270
    x1107 = x115 + x197 * x9
    x1108 = x116 * (x1107 * x127 + x273 * x92) + x275 * x92
    x1109 = x0 * x288 + x284
    x1110 = x144 * x248
    x1111 = x116 * (x1110 + x144 * x249) + x287 * x92
    x1112 = x0 * x296 + x293
    x1113 = x116 * x133 * (x108 + x273)
    x1114 = x1113 + x295 * x92
    x1115 = x0 * x308 + x304
    x1116 = x108 * x144
    x1117 = x116 * (x1116 + x144 * x272)
    x1118 = x1117 + x307 * x92
    x1119 = x0 * x316 + x314
    x1120 = x165 * x243
    x1121 = x1120 + x165 * x241
    x1122 = x0 * x321 + x319
    x1123 = x101 * x153 + x133 * x295
    x1124 = x0 * x327 + x325
    x1125 = x101 * x159 + x133 * x307
    x1126 = x0 * x334 + x331
    x1127 = x101 * x165
    x1128 = x1127 + x165 * x267
    x1129 = x0 * x340 + x338
    x1130 = x186 * x207
    x1131 = x92 * (x516 + x518)
    x1132 = x91 * (x1131 * x116 + x519 * x92)
    x1133 = x1105 * x253 + x1132
    x1134 = x488 * x9
    x1135 = 2.0 * x248
    x1136 = x1134 + x1135
    x1137 = x1136 * x127 + x541 * x92
    x1138 = x91 * (x1137 * x116 + x542 * x92)
    x1139 = x1108 * x253 + x1138
    x1140 = 0.1111111111111111 * x142
    x1141 = x144 * x516
    x1142 = x1141 + x144 * x517
    x1143 = x91 * (x1142 * x116 + x553 * x92)
    x1144 = x1111 * x253 + x1143
    x1145 = x133 * x541 + x274
    x1146 = x91 * (x1145 * x116 + x560 * x92)
    x1147 = x1114 * x253 + x1146
    x1148 = x144 * x540 + x286
    x1149 = x91 * (x1148 * x116 + x569 * x92)
    x1150 = x1118 * x253 + x1149
    x1151 = 0.3333333333333333 * x130
    x1152 = x165 * x91 * (x511 + x513)
    x1153 = x1121 * x253 + x1152
    x1154 = x91 * (x116 * x295 + x133 * x560)
    x1155 = x1123 * x253 + x1154
    x1156 = x91 * (x116 * x307 + x133 * x569)
    x1157 = x1125 * x253 + x1156
    x1158 = x165 * x91 * (x535 + x536)
    x1159 = x1128 * x253 + x1158
    x1160 = x186 * x498
    x1161 = x1130 * x20 + x1160
    x1162 = x92 * (x632 + x633)
    x1163 = x91 * (x116 * x1162 + x634 * x92)
    x1164 = x1105 * x407 + x1163
    x1165 = x402 + x609 * x9
    x1166 = x1165 * x127 + x646 * x92
    x1167 = x91 * (x116 * x1166 + x648 * x92)
    x1168 = x1108 * x407 + x1167
    x1169 = x12 * x609 + x248
    x1170 = x1169 * x127 + x658 * x92
    x1171 = x91 * (x116 * x1170 + x660 * x92)
    x1172 = x1111 * x407 + x1171
    x1173 = x133 * (x396 + x646)
    x1174 = x116 * x1173
    x1175 = x91 * (x1174 + x668 * x92)
    x1176 = x1114 * x407 + x1175
    x1177 = x127 * x432 + x133 * x658
    x1178 = x116 * x1177
    x1179 = x91 * (x1178 + x676 * x92)
    x1180 = x1118 * x407 + x1179
    x1181 = x144 * (x242 + x658)
    x1182 = x116 * x1181
    x1183 = x91 * (x1182 + x685 * x92)
    x1184 = x1121 * x407 + x1183
    x1185 = x91 * (x133 * x668 + x153 * x391)
    x1186 = x1123 * x407 + x1185
    x1187 = x91 * (x133 * x676 + x428 * x697)
    x1188 = x1125 * x407 + x1187
    x1189 = x91 * (x127 * x456 + x133 * x685)
    x1190 = x1128 * x407 + x1189
    x1191 = x91 * (x144 * x685 + x165 * x237)
    x1192 = x1130 * x21 + x1191
    x1193 = x92 * (x845 + x847)
    x1194 = x91 * (x116 * x1193 + x848 * x92)
    x1195 = x1132 * x20 + x1194
    x1196 = x1133 * x20 + x1195
    x1197 = x827 * x9
    x1198 = 3.0 * x516
    x1199 = x1197 + x1198
    x1200 = x1199 * x127 + x859 * x92
    x1201 = x91 * (x116 * x1200 + x860 * x92)
    x1202 = x1138 * x20 + x1201
    x1203 = x1139 * x20 + x1202
    x1204 = x144 * x845
    x1205 = x1204 + x144 * x846
    x1206 = x91 * (x116 * x1205 + x864 * x92)
    x1207 = x1143 * x20 + x1206
    x1208 = x1144 * x20 + x1207
    x1209 = x111 * x541 + x133 * x859
    x1210 = x91 * (x116 * x1209 + x869 * x92)
    x1211 = x1146 * x20 + x1210
    x1212 = x1147 * x20 + x1211
    x1213 = x144 * (x857 + x858)
    x1214 = x91 * (x116 * x1213 + x874 * x92)
    x1215 = x1149 * x20 + x1214
    x1216 = x1150 * x20 + x1215
    x1217 = x165 * x91 * (x841 + x843)
    x1218 = x1152 * x20 + x1217
    x1219 = x1153 * x20 + x1218
    x1220 = x91 * (x133 * x869 + x561)
    x1221 = x1154 * x20 + x1220
    x1222 = x1155 * x20 + x1221
    x1223 = x91 * (x133 * x874 + x570)
    x1224 = x1156 * x20 + x1223
    x1225 = x1157 * x20 + x1224
    x1226 = x91 * (x165 * x855 + x577)
    x1227 = x1158 * x20 + x1226
    x1228 = x1159 * x20 + x1227
    x1229 = x186 * x834
    x1230 = x1160 * x20 + x1229
    x1231 = x1161 * x20 + x1230
    x1232 = x92 * (x912 + x913)
    x1233 = x91 * (x116 * x1232 + x914 * x92)
    x1234 = x1132 * x21 + x1233
    x1235 = x1164 * x20 + x1234
    x1236 = 2.0 * x632
    x1237 = x1236 + x898 * x9
    x1238 = x1237 * x127 + x92 * x923
    x1239 = x91 * (x116 * x1238 + x92 * x924)
    x1240 = x1138 * x21 + x1239
    x1241 = x1168 * x20 + x1240
    x1242 = x12 * x898 + x516
    x1243 = x1242 * x127 + x92 * x931
    x1244 = x91 * (x116 * x1243 + x92 * x933)
    x1245 = x1143 * x21 + x1244
    x1246 = x1172 * x20 + x1245
    x1247 = x133 * x923 + x647
    x1248 = x91 * (x116 * x1247 + x92 * x938)
    x1249 = x1146 * x21 + x1248
    x1250 = x1176 * x20 + x1249
    x1251 = x133 * x931 + x659
    x1252 = x91 * (x116 * x1251 + x92 * x946)
    x1253 = x1149 * x21 + x1252
    x1254 = x1180 * x20 + x1253
    x1255 = x1151 * x141
    x1256 = x144 * (x512 + x931)
    x1257 = x116 * x1256
    x1258 = x91 * (x1257 + x92 * x952)
    x1259 = x1152 * x21 + x1258
    x1260 = x1184 * x20 + x1259
    x1261 = x91 * (x116 * x668 + x133 * x938)
    x1262 = x1154 * x21 + x1261
    x1263 = x1186 * x20 + x1262
    x1264 = x91 * (x116 * x676 + x133 * x946)
    x1265 = x1156 * x21 + x1264
    x1266 = x1188 * x20 + x1265
    x1267 = x116 * x685
    x1268 = x91 * (x1267 + x133 * x952)
    x1269 = x1158 * x21 + x1268
    x1270 = x1190 * x20 + x1269
    x1271 = x91 * (x144 * x952 + x165 * x508)
    x1272 = x1160 * x21 + x1271
    x1273 = x1192 * x20 + x1272
    x1274 = x92 * (x989 + x990)
    x1275 = x91 * (x116 * x1274 + x92 * x991)
    x1276 = x1163 * x21 + x1275
    x1277 = x1164 * x21 + x1276
    x1278 = x747 + x9 * x975
    x1279 = x127 * x1278 + x92 * x997
    x1280 = x91 * (x116 * x1279 + x92 * x999)
    x1281 = x1167 * x21 + x1280
    x1282 = x1168 * x21 + x1281
    x1283 = x12 * x975 + x1236
    x1284 = x1006 * x92 + x127 * x1283
    x1285 = x91 * (x1008 * x92 + x116 * x1284)
    x1286 = x1171 * x21 + x1285
    x1287 = x1172 * x21 + x1286
    x1288 = x133 * (x743 + x997)
    x1289 = x116 * x1288
    x1290 = x91 * (x1013 * x92 + x1289)
    x1291 = x1175 * x21 + x1290
    x1292 = x1176 * x21 + x1291
    x1293 = x1006 * x133 + x127 * x775
    x1294 = x116 * x1293
    x1295 = x91 * (x1018 * x92 + x1294)
    x1296 = x1179 * x21 + x1295
    x1297 = x1180 * x21 + x1296
    x1298 = x1006 * x144 + x659
    x1299 = x116 * x1298
    x1300 = x91 * (x1023 * x92 + x1299)
    x1301 = x1183 * x21 + x1300
    x1302 = x1184 * x21 + x1301
    x1303 = x91 * (x1013 * x133 + x153 * x739)
    x1304 = x1185 * x21 + x1303
    x1305 = x1186 * x21 + x1304
    x1306 = x91 * (x1018 * x133 + x697 * x772)
    x1307 = x1187 * x21 + x1306
    x1308 = x1188 * x21 + x1307
    x1309 = x91 * (x1023 * x133 + x127 * x794)
    x1310 = x1189 * x21 + x1309
    x1311 = x1190 * x21 + x1310
    x1312 = x91 * (x1023 * x144 + x1267)
    x1313 = x1191 * x21 + x1312
    x1314 = x1192 * x21 + x1313
    x1315 = x190 * x823 + 3.0 * x499 - x831 * x9
    x1316 = x1315 * x16
    x1317 = x824 * x9
    x1318 = x6 * (-x1316 - x1317 + x190 * x827 + 3.0 * x486 * x6)
    x1319 = -x1317 + x190 * x827 + 3.0 * x487
    x1320 = -x1316 * x4 + x1319 * x5
    x1321 = x190 * x830 + 3.0 * x523 - x524 * x836
    x1322 = x122 * (x122 * x1321 - x1315 * x5) + x1318 + x1320 * x5
    x1323 = x1322 * x4
    x1324 = x1320 * x6
    x1325 = 2.0 * x1324
    x1326 = x1319 * x6
    x1327 = x1320 * x4
    x1328 = x1326 + x1327
    x1329 = x92 * (x1326 + x1328)
    x1330 = x1194 * x20 + x91 * (
        x116 * x1329 + x92 * (x116 * x1328 + x92 * (x1323 + x1325))
    )
    x1331 = x1195 * x20 + x1330
    x1332 = x1322 * x9
    x1333 = 4.0 * x839
    x1334 = x1332 + x1333
    x1335 = x1320 * x9
    x1336 = 4.0 * x842
    x1337 = x1335 + x1336
    x1338 = x1319 * x9
    x1339 = 4.0 * x845
    x1340 = x1338 + x1339
    x1341 = x127 * x1340 + x1337 * x92
    x1342 = x1201 * x20 + x91 * (x116 * x1341 + x92 * (x116 * x1337 + x1334 * x92))
    x1343 = x1202 * x20 + x1342
    x1344 = x1326 * x144
    x1345 = x1327 * x144 + x1344
    x1346 = x1206 * x20 + x91 * (x116 * x1345 + x144 * x92 * (x1323 + x1325))
    x1347 = x1207 * x20 + x1346
    x1348 = x104 * x856 + x133 * x1334
    x1349 = x104 * x859 + x133 * x1337
    x1350 = x1210 * x20 + x91 * (x116 * x1349 + x1348 * x92)
    x1351 = x1211 * x20 + x1350
    x1352 = x144 * (x1332 + x1333)
    x1353 = x144 * (x1335 + x1336)
    x1354 = x1214 * x20 + x91 * (x116 * x1353 + x1352 * x92)
    x1355 = x1215 * x20 + x1354
    x1356 = x1217 * x20 + x165 * x91 * (x1323 + x1325)
    x1357 = x1218 * x20 + x1356
    x1358 = x1220 * x20 + x91 * (x104 * x869 + x133 * x1348)
    x1359 = x1221 * x20 + x1358
    x1360 = x1223 * x20 + x91 * (x104 * x874 + x133 * x1352)
    x1361 = x1224 * x20 + x1360
    x1362 = x1226 * x20 + x165 * x91 * (x1332 + x1333)
    x1363 = x1227 * x20 + x1362
    x1364 = x1229 * x20 + x1322 * x186
    x1365 = x1230 * x20 + x1364
    x1366 = x190 * x894 + 2.0 * x620 - x9 * x902
    x1367 = x1366 * x16
    x1368 = x895 * x9
    x1369 = x6 * (-x1367 - x1368 + x190 * x898 + 2.0 * x6 * x607)
    x1370 = -x1368 + x190 * x898 + 2.0 * x608
    x1371 = -x1367 * x4 + x1370 * x5
    x1372 = x190 * x901 - x524 * x907 + 2.0 * x638
    x1373 = x122 * (x122 * x1372 - x1366 * x5) + x1369 + x1371 * x5
    x1374 = x1371 * x41
    x1375 = x1370 * x6
    x1376 = x1371 * x4 + x1375
    x1377 = x92 * (x1375 + x1376)
    x1378 = x91 * (x116 * x1377 + x92 * (x116 * x1376 + x92 * (x1373 * x4 + x1374)))
    x1379 = x1194 * x21 + x1378
    x1380 = x1234 * x20 + x1379
    x1381 = x1373 * x9 + x909
    x1382 = x1371 * x9 + x56 * x900
    x1383 = x1370 * x9 + 3.0 * x912
    x1384 = x127 * x1383 + x1382 * x92
    x1385 = x91 * (x116 * x1384 + x92 * (x116 * x1382 + x1381 * x92))
    x1386 = x1201 * x21 + x1385
    x1387 = x1240 * x20 + x1386
    x1388 = x12 * x1373 + x839
    x1389 = x12 * x1371 + x842
    x1390 = x116 * x1389
    x1391 = x12 * x1370 + x845
    x1392 = x127 * x1391 + x1389 * x92
    x1393 = x91 * (x116 * x1392 + x92 * (x1388 * x92 + x1390))
    x1394 = x1206 * x21 + x1393
    x1395 = x1245 * x20 + x1394
    x1396 = x133 * x1381 + x922
    x1397 = x111 * x923 + x133 * x1382
    x1398 = x91 * (x116 * x1397 + x1396 * x92)
    x1399 = x1210 * x21 + x1398
    x1400 = x1249 * x20 + x1399
    x1401 = x133 * x1388 + x930
    x1402 = x111 * x931 + x133 * x1389
    x1403 = x91 * (x116 * x1402 + x1401 * x92)
    x1404 = x1214 * x21 + x1403
    x1405 = x1253 * x20 + x1404
    x1406 = x144 * (x1388 + x839)
    x1407 = x144 * (x1389 + x842)
    x1408 = x116 * x1407
    x1409 = x91 * (x1406 * x92 + x1408)
    x1410 = x1217 * x21 + x1409
    x1411 = x1259 * x20 + x1410
    x1412 = x91 * (x133 * x1396 + x939)
    x1413 = x1220 * x21 + x1412
    x1414 = x1262 * x20 + x1413
    x1415 = x91 * (x133 * x1401 + x947)
    x1416 = x1223 * x21 + x1415
    x1417 = x1265 * x20 + x1416
    x1418 = x91 * (x133 * x1406 + x953)
    x1419 = x1226 * x21 + x1418
    x1420 = x1269 * x20 + x1419
    x1421 = x91 * (x1406 * x144 + x165 * x839)
    x1422 = x1229 * x21 + x1421
    x1423 = x1272 * x20 + x1422
    x1424 = x190 * x971 + x730 - x9 * x979
    x1425 = x1424 * x16
    x1426 = x9 * x972
    x1427 = x6 * (-x1425 - x1426 + x190 * x975 - x754)
    x1428 = -x1426 + x190 * x975 + x718
    x1429 = -x1425 * x4 + x1428 * x5
    x1430 = x190 * x978 - x524 * x984 + x755
    x1431 = x122 * (x122 * x1430 - x1424 * x5) + x1427 + x1429 * x5
    x1432 = x1428 * x6
    x1433 = x1429 * x4 + x1432
    x1434 = x92 * (x1432 + x1433)
    x1435 = x91 * (x116 * x1434 + x92 * (x116 * x1433 + x92 * (x1429 * x41 + x1431 * x4)))
    x1436 = x1233 * x21 + x1435
    x1437 = x1234 * x21 + x1436
    x1438 = x1431 * x9 + x41 * x982
    x1439 = x1429 * x9 + x987
    x1440 = x1428 * x9 + 2.0 * x989
    x1441 = x127 * x1440 + x1439 * x92
    x1442 = x91 * (x116 * x1441 + x92 * (x116 * x1439 + x1438 * x92))
    x1443 = x1239 * x21 + x1442
    x1444 = x1240 * x21 + x1443
    x1445 = x12 * x1431 + x41 * x905
    x1446 = x12 * x1429 + x910
    x1447 = x12 * x1428 + 2.0 * x912
    x1448 = x127 * x1447 + x1446 * x92
    x1449 = x91 * (x116 * x1448 + x92 * (x116 * x1446 + x1445 * x92))
    x1450 = x1244 * x21 + x1449
    x1451 = x1245 * x21 + x1450
    x1452 = x116 * x996 + x133 * x1438
    x1453 = x133 * x1439 + x998
    x1454 = x91 * (x116 * x1453 + x1452 * x92)
    x1455 = x1248 * x21 + x1454
    x1456 = x1249 * x21 + x1455
    x1457 = x1004 * x116 + x133 * x1445
    x1458 = x1007 + x133 * x1446
    x1459 = x91 * (x116 * x1458 + x1457 * x92)
    x1460 = x1252 * x21 + x1459
    x1461 = x1253 * x21 + x1460
    x1462 = x116 * x929 + x144 * x1445
    x1463 = x144 * x1446 + x932
    x1464 = x91 * (x116 * x1463 + x1462 * x92)
    x1465 = x1258 * x21 + x1464
    x1466 = x1259 * x21 + x1465
    x1467 = x91 * (x1013 * x116 + x133 * x1452)
    x1468 = x1261 * x21 + x1467
    x1469 = x1262 * x21 + x1468
    x1470 = x91 * (x1018 * x116 + x133 * x1457)
    x1471 = x1264 * x21 + x1470
    x1472 = x1265 * x21 + x1471
    x1473 = x91 * (x1023 * x116 + x133 * x1462)
    x1474 = x1268 * x21 + x1473
    x1475 = x1269 * x21 + x1474
    x1476 = x91 * (x116 * x952 + x144 * x1462)
    x1477 = x1271 * x21 + x1476
    x1478 = x1272 * x21 + x1477
    x1479 = x1041 * x190 - x1049 * x9
    x1480 = x1479 * x16
    x1481 = x1042 * x9 - x1045 * x190
    x1482 = -x6 * (x1480 + x1481)
    x1483 = -x1481
    x1484 = -x1480 * x4 + x1483 * x5
    x1485 = x1048 * x190 - x1054 * x524
    x1486 = x122 * (x122 * x1485 - x1479 * x5) + x1482 + x1484 * x5
    x1487 = x1484 * x41
    x1488 = x1483 * x6
    x1489 = x1484 * x4 + x1488
    x1490 = x92 * (x1488 + x1489)
    x1491 = x91 * (x116 * x1490 + x92 * (x116 * x1489 + x92 * (x1486 * x4 + x1487)))
    x1492 = x1275 * x21 + x1491
    x1493 = x1276 * x21 + x1492
    x1494 = x1057 + x1486 * x9
    x1495 = x1060 + x1484 * x9
    x1496 = x116 * x1495
    x1497 = x1063 + x1483 * x9
    x1498 = x127 * x1497 + x1495 * x92
    x1499 = x91 * (x116 * x1498 + x92 * (x1494 * x92 + x1496))
    x1500 = x1280 * x21 + x1499
    x1501 = x1281 * x21 + x1500
    x1502 = x12 * x1486 + x986
    x1503 = x12 * x1484 + x56 * x977
    x1504 = x116 * x1503
    x1505 = x12 * x1483 + 3.0 * x989
    x1506 = x127 * x1505 + x1503 * x92
    x1507 = x91 * (x116 * x1506 + x92 * (x1502 * x92 + x1504))
    x1508 = x1285 * x21 + x1507
    x1509 = x1286 * x21 + x1508
    x1510 = x133 * (x1057 + x1494)
    x1511 = x133 * (x1060 + x1495)
    x1512 = x116 * x1511
    x1513 = x91 * (x1510 * x92 + x1512)
    x1514 = x1290 * x21 + x1513
    x1515 = x1291 * x21 + x1514
    x1516 = x1075 * x127 + x133 * x1502
    x1517 = x1076 * x127 + x133 * x1503
    x1518 = x116 * x1517
    x1519 = x91 * (x1516 * x92 + x1518)
    x1520 = x1295 * x21 + x1519
    x1521 = x1296 * x21 + x1520
    x1522 = x1005 + x144 * x1502
    x1523 = x1006 * x111 + x144 * x1503
    x1524 = x116 * x1523
    x1525 = x91 * (x1522 * x92 + x1524)
    x1526 = x1300 * x21 + x1525
    x1527 = x1301 * x21 + x1526
    x1528 = x91 * (x1057 * x153 + x133 * x1510)
    x1529 = x1303 * x21 + x1528
    x1530 = x1304 * x21 + x1529
    x1531 = x91 * (x1075 * x697 + x133 * x1516)
    x1532 = x1306 * x21 + x1531
    x1533 = x1307 * x21 + x1532
    x1534 = x91 * (x1088 * x127 + x133 * x1522)
    x1535 = x1309 * x21 + x1534
    x1536 = x1310 * x21 + x1535
    x1537 = x91 * (x1024 + x144 * x1522)
    x1538 = x1312 * x21 + x1537
    x1539 = x1313 * x21 + x1538
    x1540 = x0 * x406 + x400
    x1541 = x92 * (x116 * (x402 + x404) + x405)
    x1542 = x0 * x422 + x419
    x1543 = x133 * x402
    x1544 = x116 * (x133 * x403 + x1543) + x421 * x92
    x1545 = x0 * x435 + x430
    x1546 = x115 + x12 * x350
    x1547 = x127 * x1546
    x1548 = x116 * (x1547 + x432 * x92) + x434 * x92
    x1549 = x0 * x441 + x439
    x1550 = x153 * (x395 + x397)
    x1551 = x0 * x449 + x446
    x1552 = x158 * x41
    x1553 = x1552 * x432 + x428 * x444
    x1554 = x0 * x457 + x454
    x1555 = x1116 + x144 * x432
    x1556 = x116 * x1555
    x1557 = x1556 + x456 * x92
    x1558 = x0 * x463 + x461
    x1559 = x171 * x360
    x1560 = x0 * x469 + x467
    x1561 = x176 * x428
    x1562 = x0 * x474 + x472
    x1563 = x158 * x456
    x1564 = x0 * x479 + x477
    x1565 = x1127 + x144 * x456
    x1566 = x20 * x406 + x635
    x1567 = x1163 + x1541 * x253
    x1568 = x20 * x422 + x649
    x1569 = x1167 + x1544 * x253
    x1570 = x20 * x435 + x661
    x1571 = x1171 + x1548 * x253
    x1572 = x20 * x441 + x669
    x1573 = x1175 + x1550 * x253
    x1574 = x20 * x449 + x677
    x1575 = x1179 + x1553 * x253
    x1576 = x20 * x457 + x686
    x1577 = x1183 + x1557 * x253
    x1578 = x20 * x463 + x692
    x1579 = x1185 + x1559 * x20
    x1580 = x20 * x469 + x698
    x1581 = x1187 + x1561 * x20
    x1582 = x20 * x474 + x703
    x1583 = x1189 + x1563 * x20
    x1584 = x20 * x479 + x708
    x1585 = x1191 + x1565 * x253
    x1586 = x92 * (x747 + x749)
    x1587 = x91 * (x116 * x1586 + x750 * x92)
    x1588 = x1541 * x407 + x1587
    x1589 = x133 * x747
    x1590 = x133 * x748 + x1589
    x1591 = x91 * (x116 * x1590 + x765 * x92)
    x1592 = x1544 * x407 + x1591
    x1593 = x12 * x719 + 2.0 * x402
    x1594 = x127 * x1593
    x1595 = x1594 + x775 * x92
    x1596 = x91 * (x116 * x1595 + x776 * x92)
    x1597 = x1548 * x407 + x1596
    x1598 = x153 * x91 * (x742 + x744)
    x1599 = x1550 * x407 + x1598
    x1600 = x91 * (x1552 * x775 + x444 * x772)
    x1601 = x1553 * x407 + x1600
    x1602 = x144 * x775 + x433
    x1603 = x91 * (x116 * x1602 + x794 * x92)
    x1604 = x1557 * x407 + x1603
    x1605 = x171 * x729
    x1606 = x1559 * x21 + x1605
    x1607 = x176 * x772
    x1608 = x1561 * x21 + x1607
    x1609 = x158 * x794
    x1610 = x1563 * x21 + x1609
    x1611 = x91 * (x116 * x456 + x144 * x794)
    x1612 = x1565 * x407 + x1611
    x1613 = x1163 * x20 + x1233
    x1614 = x1567 * x20 + x1613
    x1615 = x20 * x635 + x915
    x1616 = x1167 * x20 + x1239
    x1617 = x1569 * x20 + x1616
    x1618 = x20 * x649 + x925
    x1619 = x1171 * x20 + x1244
    x1620 = x1571 * x20 + x1619
    x1621 = x20 * x661 + x934
    x1622 = x1175 * x20 + x1248
    x1623 = x1573 * x20 + x1622
    x1624 = x20 * x669 + x940
    x1625 = x1179 * x20 + x1252
    x1626 = x1575 * x20 + x1625
    x1627 = x20 * x677 + x948
    x1628 = x1183 * x20 + x1258
    x1629 = x1577 * x20 + x1628
    x1630 = x20 * x686 + x954
    x1631 = x1185 * x20 + x1261
    x1632 = x1579 * x20 + x1631
    x1633 = x20 * x692 + x957
    x1634 = x1187 * x20 + x1264
    x1635 = x1581 * x20 + x1634
    x1636 = x20 * x698 + x960
    x1637 = x1189 * x20 + x1268
    x1638 = x1583 * x20 + x1637
    x1639 = x20 * x703 + x964
    x1640 = x1191 * x20 + x1271
    x1641 = x1585 * x20 + x1640
    x1642 = x20 * x708 + x967
    x1643 = x1276 + x1588 * x20
    x1644 = x1281 + x1592 * x20
    x1645 = x1286 + x1597 * x20
    x1646 = x1291 + x1599 * x20
    x1647 = x1296 + x1601 * x20
    x1648 = x1301 + x1604 * x20
    x1649 = x1304 + x1606 * x20
    x1650 = x1307 + x1608 * x20
    x1651 = x1310 + x1610 * x20
    x1652 = x1313 + x1612 * x20
    x1653 = x92 * (x1063 + x1065)
    x1654 = x91 * (x1066 * x92 + x116 * x1653)
    x1655 = x1587 * x21 + x1654
    x1656 = x1588 * x21 + x1655
    x1657 = x1063 * x133
    x1658 = x1064 * x133 + x1657
    x1659 = x91 * (x1070 * x92 + x116 * x1658)
    x1660 = x1591 * x21 + x1659
    x1661 = x1592 * x21 + x1660
    x1662 = x1045 * x12 + 3.0 * x747
    x1663 = x127 * x1662
    x1664 = x1076 * x92 + x1663
    x1665 = x91 * (x1077 * x92 + x116 * x1664)
    x1666 = x1596 * x21 + x1665
    x1667 = x1597 * x21 + x1666
    x1668 = x153 * x91 * (x1059 + x1061)
    x1669 = x1598 * x21 + x1668
    x1670 = x1599 * x21 + x1669
    x1671 = x91 * (x1075 * x444 + x1076 * x1552)
    x1672 = x1600 * x21 + x1671
    x1673 = x1601 * x21 + x1672
    x1674 = x1076 * x144 + x111 * x775
    x1675 = x91 * (x1088 * x92 + x116 * x1674)
    x1676 = x1603 * x21 + x1675
    x1677 = x1604 * x21 + x1676
    x1678 = x1052 * x171
    x1679 = x1605 * x21 + x1678
    x1680 = x1606 * x21 + x1679
    x1681 = x1075 * x176
    x1682 = x1607 * x21 + x1681
    x1683 = x1608 * x21 + x1682
    x1684 = x1088 * x158
    x1685 = x1609 * x21 + x1684
    x1686 = x1610 * x21 + x1685
    x1687 = x91 * (x1088 * x144 + x795)
    x1688 = x1611 * x21 + x1687
    x1689 = x1612 * x21 + x1688
    x1690 = x1233 * x20 + x1378
    x1691 = x1613 * x20 + x1690
    x1692 = x1239 * x20 + x1385
    x1693 = x1616 * x20 + x1692
    x1694 = x1244 * x20 + x1393
    x1695 = x1619 * x20 + x1694
    x1696 = x1248 * x20 + x1398
    x1697 = x1622 * x20 + x1696
    x1698 = x1252 * x20 + x1403
    x1699 = x1625 * x20 + x1698
    x1700 = x1258 * x20 + x1409
    x1701 = x1628 * x20 + x1700
    x1702 = x1261 * x20 + x1412
    x1703 = x1631 * x20 + x1702
    x1704 = x1264 * x20 + x1415
    x1705 = x1634 * x20 + x1704
    x1706 = x1268 * x20 + x1418
    x1707 = x1637 * x20 + x1706
    x1708 = x1271 * x20 + x1421
    x1709 = x1640 * x20 + x1708
    x1710 = x1276 * x20 + x1436
    x1711 = x1281 * x20 + x1443
    x1712 = x1286 * x20 + x1450
    x1713 = x1291 * x20 + x1455
    x1714 = x1296 * x20 + x1460
    x1715 = x1301 * x20 + x1465
    x1716 = x1304 * x20 + x1468
    x1717 = x1307 * x20 + x1471
    x1718 = x1310 * x20 + x1474
    x1719 = x1313 * x20 + x1477
    x1720 = x1041 * x343 - x1049 * x12 + 3.0 * x730
    x1721 = x16 * x1720
    x1722 = x1042 * x12
    x1723 = x6 * (x1045 * x343 - x1721 - x1722 + 3.0 * x6 * x717)
    x1724 = x1045 * x343 - x1722 + 3.0 * x718
    x1725 = -x1721 * x4 + x1724 * x5
    x1726 = x1048 * x343 - x1054 * x756 + 3.0 * x755
    x1727 = x122 * (x122 * x1726 - x1720 * x5) + x1723 + x1725 * x5
    x1728 = x1727 * x4
    x1729 = x1725 * x6
    x1730 = 2.0 * x1729
    x1731 = x1724 * x6
    x1732 = x1725 * x4
    x1733 = x1731 + x1732
    x1734 = x92 * (x1731 + x1733)
    x1735 = x1654 * x21 + x91 * (
        x116 * x1734 + x92 * (x116 * x1733 + x92 * (x1728 + x1730))
    )
    x1736 = x1655 * x21 + x1735
    x1737 = x133 * x1731
    x1738 = x133 * x1732 + x1737
    x1739 = x1659 * x21 + x91 * (x116 * x1738 + x133 * x92 * (x1728 + x1730))
    x1740 = x1660 * x21 + x1739
    x1741 = 4.0 * x1057 + x12 * x1727
    x1742 = 4.0 * x1060 + x12 * x1725
    x1743 = 4.0 * x1063 + x12 * x1724
    x1744 = x127 * x1743
    x1745 = x1742 * x92 + x1744
    x1746 = x1665 * x21 + x91 * (x116 * x1745 + x92 * (x116 * x1742 + x1741 * x92))
    x1747 = x1666 * x21 + x1746
    x1748 = x153 * x91 * (x1728 + x1730) + x1668 * x21
    x1749 = x1669 * x21 + x1748
    x1750 = x1671 * x21 + x91 * (x1552 * x1742 + x1741 * x444)
    x1751 = x1672 * x21 + x1750
    x1752 = x104 * x1075 + x144 * x1741
    x1753 = x104 * x1076 + x144 * x1742
    x1754 = x1675 * x21 + x91 * (x116 * x1753 + x1752 * x92)
    x1755 = x1676 * x21 + x1754
    x1756 = x1678 * x21 + x171 * x1727
    x1757 = x1679 * x21 + x1756
    x1758 = x1681 * x21 + x1741 * x176
    x1759 = x1682 * x21 + x1758
    x1760 = x158 * x1752 + x1684 * x21
    x1761 = x1685 * x21 + x1760
    x1762 = x1687 * x21 + x91 * (x104 * x1088 + x144 * x1752)
    x1763 = x1688 * x21 + x1762
    x1764 = x0 * x1132 + x520
    x1765 = x152 * x7
    x1766 = x1131 * x92 + x1765 * x516
    x1767 = x0 * x1138 + x543
    x1768 = x152 * x4
    x1769 = x1768 * x6
    x1770 = x1136 * x1769 + x1137 * x92
    x1771 = x0 * x1143 + x554
    x1772 = x12 * x1768
    x1773 = x1142 * x92 + x1772 * x516
    x1774 = x0 * x1146 + x562
    x1775 = x1107 * x116 + x1136 * x133
    x1776 = x1145 * x92 + x127 * x1775
    x1777 = x0 * x1149 + x571
    x1778 = x144 * (x1134 + x1135)
    x1779 = x1148 * x92 + x127 * x1778
    x1780 = x0 * x1152 + x578
    x1781 = x165 * x516
    x1782 = x165 * x517 + x1781
    x1783 = x0 * x1154 + x583
    x1784 = x1113 + x1145 * x133
    x1785 = x0 * x1156 + x588
    x1786 = x1117 + x1148 * x133
    x1787 = x0 * x1158 + x593
    x1788 = x1120 + x165 * x540
    x1789 = x0 * x1160 + x598
    x1790 = x186 * x490
    x1791 = x91 * (x1193 * x92 + x1765 * x845)
    x1792 = x1766 * x253 + x1791
    x1793 = x91 * (x1199 * x1769 + x1200 * x92)
    x1794 = x1770 * x253 + x1793
    x1795 = x91 * (x1205 * x92 + x1772 * x845)
    x1796 = x1773 * x253 + x1795
    x1797 = x111 * x1136 + x1199 * x133
    x1798 = x91 * (x1209 * x92 + x127 * x1797)
    x1799 = x1776 * x253 + x1798
    x1800 = x144 * (x1197 + x1198)
    x1801 = x91 * (x1213 * x92 + x127 * x1800)
    x1802 = x1779 * x253 + x1801
    x1803 = x165 * x845
    x1804 = x91 * (x165 * x846 + x1803)
    x1805 = x1782 * x253 + x1804
    x1806 = x91 * (x111 * x1145 + x1209 * x133)
    x1807 = x1784 * x253 + x1806
    x1808 = x91 * (x111 * x1148 + x1213 * x133)
    x1809 = x1786 * x253 + x1808
    x1810 = x165 * x91 * (x857 + x858)
    x1811 = x1788 * x253 + x1810
    x1812 = x186 * x829
    x1813 = x1790 * x20 + x1812
    x1814 = x91 * (x1232 * x92 + x1765 * x912)
    x1815 = x1766 * x407 + x1814
    x1816 = x91 * (x1237 * x1769 + x1238 * x92)
    x1817 = x1770 * x407 + x1816
    x1818 = x91 * (x1242 * x1769 + x1243 * x92)
    x1819 = x1773 * x407 + x1818
    x1820 = x116 * x1165 + x1237 * x133
    x1821 = x91 * (x1247 * x92 + x127 * x1820)
    x1822 = x1776 * x407 + x1821
    x1823 = x116 * x1169
    x1824 = x1242 * x133 + x1823
    x1825 = x91 * (x1251 * x92 + x127 * x1824)
    x1826 = x1779 * x407 + x1825
    x1827 = x1141 + x1242 * x144
    x1828 = x91 * (x1256 * x92 + x127 * x1827)
    x1829 = x1782 * x407 + x1828
    x1830 = x91 * (x1174 + x1247 * x133)
    x1831 = x1784 * x407 + x1830
    x1832 = x91 * (x1178 + x1251 * x133)
    x1833 = x1786 * x407 + x1832
    x1834 = x91 * (x1182 + x1256 * x133)
    x1835 = x1788 * x407 + x1834
    x1836 = x91 * (x1256 * x144 + x165 * x512)
    x1837 = x1790 * x21 + x1836
    x1838 = x91 * (x1326 * x1765 + x1329 * x92)
    x1839 = x1791 * x20 + x1838
    x1840 = x1792 * x20 + x1839
    x1841 = x91 * (x1340 * x1769 + x1341 * x92)
    x1842 = x1793 * x20 + x1841
    x1843 = x1794 * x20 + x1842
    x1844 = x91 * (x1326 * x1772 + x1345 * x92)
    x1845 = x1795 * x20 + x1844
    x1846 = x1796 * x20 + x1845
    x1847 = x104 * x1199 + x133 * x1340
    x1848 = x91 * (x127 * x1847 + x1349 * x92)
    x1849 = x1798 * x20 + x1848
    x1850 = x1799 * x20 + x1849
    x1851 = x144 * (x1338 + x1339)
    x1852 = x91 * (x127 * x1851 + x1353 * x92)
    x1853 = x1801 * x20 + x1852
    x1854 = x1802 * x20 + x1853
    x1855 = x1326 * x165
    x1856 = x91 * (x1327 * x165 + x1855)
    x1857 = x1804 * x20 + x1856
    x1858 = x1805 * x20 + x1857
    x1859 = x91 * (x104 * x1209 + x133 * x1349)
    x1860 = x1806 * x20 + x1859
    x1861 = x1807 * x20 + x1860
    x1862 = x91 * (x104 * x1213 + x133 * x1353)
    x1863 = x1808 * x20 + x1862
    x1864 = x1809 * x20 + x1863
    x1865 = x165 * x91 * (x1335 + x1336)
    x1866 = x1810 * x20 + x1865
    x1867 = x1811 * x20 + x1866
    x1868 = x1320 * x186
    x1869 = x1812 * x20 + x1868
    x1870 = x1813 * x20 + x1869
    x1871 = x91 * (x1375 * x1765 + x1377 * x92)
    x1872 = x1791 * x21 + x1871
    x1873 = x1815 * x20 + x1872
    x1874 = x91 * (x1383 * x1769 + x1384 * x92)
    x1875 = x1793 * x21 + x1874
    x1876 = x1817 * x20 + x1875
    x1877 = x91 * (x1391 * x1769 + x1392 * x92)
    x1878 = x1795 * x21 + x1877
    x1879 = x1819 * x20 + x1878
    x1880 = x111 * x1237 + x133 * x1383
    x1881 = x91 * (x127 * x1880 + x1397 * x92)
    x1882 = x1798 * x21 + x1881
    x1883 = x1822 * x20 + x1882
    x1884 = x111 * x1242 + x133 * x1391
    x1885 = x91 * (x127 * x1884 + x1402 * x92)
    x1886 = x1801 * x21 + x1885
    x1887 = x1826 * x20 + x1886
    x1888 = x1204 + x1391 * x144
    x1889 = x91 * (x127 * x1888 + x1407 * x92)
    x1890 = x1804 * x21 + x1889
    x1891 = x1829 * x20 + x1890
    x1892 = x91 * (x111 * x1247 + x133 * x1397)
    x1893 = x1806 * x21 + x1892
    x1894 = x1831 * x20 + x1893
    x1895 = x91 * (x111 * x1251 + x133 * x1402)
    x1896 = x1808 * x21 + x1895
    x1897 = x1833 * x20 + x1896
    x1898 = x91 * (x111 * x1256 + x133 * x1407)
    x1899 = x1810 * x21 + x1898
    x1900 = x1835 * x20 + x1899
    x1901 = x91 * (x1407 * x144 + x165 * x842)
    x1902 = x1812 * x21 + x1901
    x1903 = x1837 * x20 + x1902
    x1904 = x91 * (x1432 * x1765 + x1434 * x92)
    x1905 = x1814 * x21 + x1904
    x1906 = x1815 * x21 + x1905
    x1907 = x91 * (x1440 * x1769 + x1441 * x92)
    x1908 = x1816 * x21 + x1907
    x1909 = x1817 * x21 + x1908
    x1910 = x91 * (x1447 * x1769 + x1448 * x92)
    x1911 = x1818 * x21 + x1910
    x1912 = x1819 * x21 + x1911
    x1913 = x116 * x1278 + x133 * x1440
    x1914 = x91 * (x127 * x1913 + x1453 * x92)
    x1915 = x1821 * x21 + x1914
    x1916 = x1822 * x21 + x1915
    x1917 = x116 * x1283 + x133 * x1447
    x1918 = x91 * (x127 * x1917 + x1458 * x92)
    x1919 = x1825 * x21 + x1918
    x1920 = x1826 * x21 + x1919
    x1921 = x116 * x1242 + x144 * x1447
    x1922 = x91 * (x127 * x1921 + x1463 * x92)
    x1923 = x1828 * x21 + x1922
    x1924 = x1829 * x21 + x1923
    x1925 = x91 * (x1289 + x133 * x1453)
    x1926 = x1830 * x21 + x1925
    x1927 = x1831 * x21 + x1926
    x1928 = x91 * (x1294 + x133 * x1458)
    x1929 = x1832 * x21 + x1928
    x1930 = x1833 * x21 + x1929
    x1931 = x91 * (x1299 + x133 * x1463)
    x1932 = x1834 * x21 + x1931
    x1933 = x1835 * x21 + x1932
    x1934 = x91 * (x1257 + x144 * x1463)
    x1935 = x1836 * x21 + x1934
    x1936 = x1837 * x21 + x1935
    x1937 = -x1316 * x9 + x1319 * x190 + 4.0 * x826
    x1938 = x1937 * x6
    x1939 = x1315 * x190 - x1321 * x524 + 4.0 * x835
    x1940 = -x122 * x1939 + x1937 * x5
    x1941 = x1940 * x4
    x1942 = (
        x1838 * x20
        + x1839 * x20
        + x91 * (x1765 * x1938 + x92**2 * (2.0 * x1938 + x1941))
    )
    x1943 = x1937 * x9
    x1944 = 5.0 * x1326
    x1945 = x1943 + x1944
    x1946 = x127 * x1945
    x1947 = x1940 * x9
    x1948 = 5.0 * x1324
    x1949 = x1947 + x1948
    x1950 = (
        x1841 * x20 + x1842 * x20 + x91 * (x1769 * x1945 + x92 * (x1946 + x1949 * x92))
    )
    x1951 = x144 * x1938
    x1952 = (
        x1844 * x20 + x1845 * x20 + x91 * (x1772 * x1938 + x92 * (x144 * x1941 + x1951))
    )
    x1953 = x133 * x1945 + x1340 * x98
    x1954 = x127 * x1953
    x1955 = x133 * x1949 + x1337 * x98
    x1956 = x1848 * x20 + x1849 * x20 + x91 * (x1954 + x1955 * x92)
    x1957 = x144 * (x1943 + x1944)
    x1958 = x127 * x1957
    x1959 = x144 * (x1947 + x1948)
    x1960 = x1852 * x20 + x1853 * x20 + x91 * (x1958 + x1959 * x92)
    x1961 = x165 * x1938
    x1962 = x1856 * x20 + x1857 * x20 + x91 * (x165 * x1941 + x1961)
    x1963 = x1859 * x20 + x1860 * x20 + x91 * (x133 * x1955 + x1349 * x98)
    x1964 = x1862 * x20 + x1863 * x20 + x91 * (x133 * x1959 + x1353 * x98)
    x1965 = x165 * x91 * (x1947 + x1948) + x1865 * x20 + x1866 * x20
    x1966 = x186 * x1940 + x1868 * x20 + x1869 * x20
    x1967 = -x1367 * x9 + x1370 * x190 + 3.0 * x897
    x1968 = x1967 * x6
    x1969 = x1366 * x190 - x1372 * x524 + 3.0 * x906
    x1970 = -x122 * x1969 + x1967 * x5
    x1971 = x91 * (x1765 * x1968 + x92**2 * (2.0 * x1968 + x1970 * x4))
    x1972 = x1838 * x21 + x1872 * x20 + x1971
    x1973 = 4.0 * x1375 + x1967 * x9
    x1974 = x1371 * x73 + x1970 * x9
    x1975 = x91 * (x1769 * x1973 + x92 * (x127 * x1973 + x1974 * x92))
    x1976 = x1841 * x21 + x1875 * x20 + x1975
    x1977 = x12 * x1967 + x1326
    x1978 = x12 * x1970 + x1324
    x1979 = x91 * (x1769 * x1977 + x92 * (x127 * x1977 + x1978 * x92))
    x1980 = x1844 * x21 + x1878 * x20 + x1979
    x1981 = x104 * x1383 + x133 * x1973
    x1982 = x104 * x1382 + x133 * x1974
    x1983 = x91 * (x127 * x1981 + x1982 * x92)
    x1984 = x1848 * x21 + x1882 * x20 + x1983
    x1985 = x104 * x1391 + x133 * x1977
    x1986 = x104 * x1389 + x133 * x1978
    x1987 = x91 * (x127 * x1985 + x1986 * x92)
    x1988 = x1852 * x21 + x1886 * x20 + x1987
    x1989 = x1344 + x144 * x1977
    x1990 = x144 * (x1324 + x1978)
    x1991 = x91 * (x127 * x1989 + x1990 * x92)
    x1992 = x1856 * x21 + x1890 * x20 + x1991
    x1993 = x91 * (x104 * x1397 + x133 * x1982)
    x1994 = x1859 * x21 + x1893 * x20 + x1993
    x1995 = x91 * (x104 * x1402 + x133 * x1986)
    x1996 = x1862 * x21 + x1896 * x20 + x1995
    x1997 = x91 * (x104 * x1407 + x133 * x1990)
    x1998 = x1865 * x21 + x1899 * x20 + x1997
    x1999 = x91 * (x1324 * x165 + x144 * x1990)
    x2000 = x1868 * x21 + x1902 * x20 + x1999
    x2001 = -x1425 * x9 + x1428 * x190 + 2.0 * x974
    x2002 = x2001 * x6
    x2003 = x1424 * x190 - x1430 * x524 + 2.0 * x983
    x2004 = -x122 * x2003 + x2001 * x5
    x2005 = x91 * (x1765 * x2002 + x92**2 * (2.0 * x2002 + x2004 * x4))
    x2006 = x1871 * x21 + x2005
    x2007 = x1872 * x21 + x2006
    x2008 = 3.0 * x1432
    x2009 = x2001 * x9 + x2008
    x2010 = x1429 * x56
    x2011 = x2004 * x9 + x2010
    x2012 = x91 * (x1769 * x2009 + x92 * (x127 * x2009 + x2011 * x92))
    x2013 = x1874 * x21 + x2012
    x2014 = x1875 * x21 + x2013
    x2015 = x12 * x2001 + 2.0 * x1375
    x2016 = x12 * x2004 + x1374
    x2017 = x91 * (x1769 * x2015 + x92 * (x127 * x2015 + x2016 * x92))
    x2018 = x1877 * x21 + x2017
    x2019 = x1878 * x21 + x2018
    x2020 = x111 * x1440 + x133 * x2009
    x2021 = x111 * x1439 + x133 * x2011
    x2022 = x91 * (x127 * x2020 + x2021 * x92)
    x2023 = x1881 * x21 + x2022
    x2024 = x1882 * x21 + x2023
    x2025 = x111 * x1447
    x2026 = x133 * x2015 + x2025
    x2027 = x111 * x1446
    x2028 = x133 * x2016 + x2027
    x2029 = x91 * (x127 * x2026 + x2028 * x92)
    x2030 = x1885 * x21 + x2029
    x2031 = x1886 * x21 + x2030
    x2032 = x116 * x1391 + x144 * x2015
    x2033 = x1390 + x144 * x2016
    x2034 = x91 * (x127 * x2032 + x2033 * x92)
    x2035 = x1889 * x21 + x2034
    x2036 = x1890 * x21 + x2035
    x2037 = x91 * (x111 * x1453 + x133 * x2021)
    x2038 = x1892 * x21 + x2037
    x2039 = x1893 * x21 + x2038
    x2040 = x91 * (x111 * x1458 + x133 * x2028)
    x2041 = x1895 * x21 + x2040
    x2042 = x1896 * x21 + x2041
    x2043 = x111 * x1463
    x2044 = x91 * (x133 * x2033 + x2043)
    x2045 = x1898 * x21 + x2044
    x2046 = x1899 * x21 + x2045
    x2047 = x91 * (x1408 + x144 * x2033)
    x2048 = x1901 * x21 + x2047
    x2049 = x1902 * x21 + x2048
    x2050 = x1044 - x1480 * x9 + x1483 * x190
    x2051 = x2050 * x6
    x2052 = x1053 + x1479 * x190 - x1485 * x524
    x2053 = -x122 * x2052 + x2050 * x5
    x2054 = x91 * (x1765 * x2051 + x92**2 * (2.0 * x2051 + x2053 * x4))
    x2055 = x1904 * x21 + x2054
    x2056 = x1905 * x21 + x2055
    x2057 = 2.0 * x1488 + x2050 * x9
    x2058 = x1487 + x2053 * x9
    x2059 = x91 * (x1769 * x2057 + x92 * (x127 * x2057 + x2058 * x92))
    x2060 = x1907 * x21 + x2059
    x2061 = x1908 * x21 + x2060
    x2062 = x12 * x2050 + x2008
    x2063 = x12 * x2053 + x2010
    x2064 = x91 * (x1769 * x2062 + x92 * (x127 * x2062 + x2063 * x92))
    x2065 = x1910 * x21 + x2064
    x2066 = x1911 * x21 + x2065
    x2067 = x116 * x1497 + x133 * x2057
    x2068 = x133 * x2058 + x1496
    x2069 = x91 * (x127 * x2067 + x2068 * x92)
    x2070 = x1914 * x21 + x2069
    x2071 = x1915 * x21 + x2070
    x2072 = x116 * x1505 + x133 * x2062
    x2073 = x133 * x2063 + x1504
    x2074 = x91 * (x127 * x2072 + x2073 * x92)
    x2075 = x1918 * x21 + x2074
    x2076 = x1919 * x21 + x2075
    x2077 = x144 * x2062 + x2025
    x2078 = x144 * x2063 + x2027
    x2079 = x91 * (x127 * x2077 + x2078 * x92)
    x2080 = x1922 * x21 + x2079
    x2081 = x1923 * x21 + x2080
    x2082 = x91 * (x133 * x2068 + x1512)
    x2083 = x1925 * x21 + x2082
    x2084 = x1926 * x21 + x2083
    x2085 = x91 * (x133 * x2073 + x1518)
    x2086 = x1928 * x21 + x2085
    x2087 = x1929 * x21 + x2086
    x2088 = x91 * (x133 * x2078 + x1524)
    x2089 = x1931 * x21 + x2088
    x2090 = x1932 * x21 + x2089
    x2091 = x91 * (x144 * x2078 + x2043)
    x2092 = x1934 * x21 + x2091
    x2093 = x1935 * x21 + x2092
    x2094 = x0 * x1163 + x635
    x2095 = x1162 * x92 + x1765 * x632
    x2096 = x0 * x1167 + x649
    x2097 = x1165 * x1769 + x1166 * x92
    x2098 = x0 * x1171 + x661
    x2099 = x1169 * x1769 + x1170 * x92
    x2100 = x0 * x1175 + x669
    x2101 = x1165 * x133 + x1543
    x2102 = x1173 * x92 + x127 * x2101
    x2103 = x0 * x1179 + x677
    x2104 = x1169 * x133 + x1547
    x2105 = x1177 * x92 + x127 * x2104
    x2106 = x0 * x1183 + x686
    x2107 = x1110 + x1169 * x144
    x2108 = x1181 * x92 + x127 * x2107
    x2109 = x0 * x1185 + x692
    x2110 = x1173 * x133 + x153 * x396
    x2111 = x0 * x1187 + x698
    x2112 = x1177 * x133 + x432 * x697
    x2113 = x0 * x1189 + x703
    x2114 = x1181 * x133 + x127 * x1555
    x2115 = x0 * x1191 + x708
    x2116 = x1181 * x144 + x165 * x242
    x2117 = x1814 + x2095 * x253
    x2118 = x1816 + x2097 * x253
    x2119 = x1818 + x2099 * x253
    x2120 = x1821 + x2102 * x253
    x2121 = x1825 + x2105 * x253
    x2122 = x1828 + x2108 * x253
    x2123 = x1830 + x2110 * x253
    x2124 = x1832 + x2112 * x253
    x2125 = x1834 + x2114 * x253
    x2126 = x1836 + x2116 * x253
    x2127 = x91 * (x1274 * x92 + x1765 * x989)
    x2128 = x2095 * x407 + x2127
    x2129 = x91 * (x1278 * x1769 + x1279 * x92)
    x2130 = x2097 * x407 + x2129
    x2131 = x91 * (x1283 * x1769 + x1284 * x92)
    x2132 = x2099 * x407 + x2131
    x2133 = x1278 * x133 + x1589
    x2134 = x91 * (x127 * x2133 + x1288 * x92)
    x2135 = x2102 * x407 + x2134
    x2136 = x1283 * x133 + x1594
    x2137 = x91 * (x127 * x2136 + x1293 * x92)
    x2138 = x2105 * x407 + x2137
    x2139 = x1283 * x144 + x1823
    x2140 = x91 * (x127 * x2139 + x1298 * x92)
    x2141 = x2108 * x407 + x2140
    x2142 = x91 * (x1288 * x133 + x153 * x743)
    x2143 = x2110 * x407 + x2142
    x2144 = x91 * (x1293 * x133 + x697 * x775)
    x2145 = x2112 * x407 + x2144
    x2146 = x91 * (x127 * x1602 + x1298 * x133)
    x2147 = x2114 * x407 + x2146
    x2148 = x91 * (x1182 + x1298 * x144)
    x2149 = x2116 * x407 + x2148
    x2150 = x1814 * x20 + x1871
    x2151 = x20 * x2117 + x2150
    x2152 = x1816 * x20 + x1874
    x2153 = x20 * x2118 + x2152
    x2154 = x1818 * x20 + x1877
    x2155 = x20 * x2119 + x2154
    x2156 = x1821 * x20 + x1881
    x2157 = x20 * x2120 + x2156
    x2158 = x1825 * x20 + x1885
    x2159 = x20 * x2121 + x2158
    x2160 = x1828 * x20 + x1889
    x2161 = x20 * x2122 + x2160
    x2162 = x1830 * x20 + x1892
    x2163 = x20 * x2123 + x2162
    x2164 = x1832 * x20 + x1895
    x2165 = x20 * x2124 + x2164
    x2166 = x1834 * x20 + x1898
    x2167 = x20 * x2125 + x2166
    x2168 = x1836 * x20 + x1901
    x2169 = x20 * x2126 + x2168
    x2170 = x1905 + x20 * x2128
    x2171 = x1908 + x20 * x2130
    x2172 = x1911 + x20 * x2132
    x2173 = x1915 + x20 * x2135
    x2174 = x1919 + x20 * x2138
    x2175 = x1923 + x20 * x2141
    x2176 = x1926 + x20 * x2143
    x2177 = x1929 + x20 * x2145
    x2178 = x1932 + x20 * x2147
    x2179 = x1935 + x20 * x2149
    x2180 = x91 * (x1488 * x1765 + x1490 * x92)
    x2181 = x21 * x2127 + x2180
    x2182 = x21 * x2128 + x2181
    x2183 = x91 * (x1497 * x1769 + x1498 * x92)
    x2184 = x21 * x2129 + x2183
    x2185 = x21 * x2130 + x2184
    x2186 = x91 * (x1505 * x1769 + x1506 * x92)
    x2187 = x21 * x2131 + x2186
    x2188 = x21 * x2132 + x2187
    x2189 = x133 * x1497 + x1657
    x2190 = x91 * (x127 * x2189 + x1511 * x92)
    x2191 = x21 * x2134 + x2190
    x2192 = x21 * x2135 + x2191
    x2193 = x133 * x1505 + x1663
    x2194 = x91 * (x127 * x2193 + x1517 * x92)
    x2195 = x21 * x2137 + x2194
    x2196 = x21 * x2138 + x2195
    x2197 = x111 * x1283 + x144 * x1505
    x2198 = x91 * (x127 * x2197 + x1523 * x92)
    x2199 = x21 * x2140 + x2198
    x2200 = x21 * x2141 + x2199
    x2201 = x91 * (x1060 * x153 + x133 * x1511)
    x2202 = x21 * x2142 + x2201
    x2203 = x21 * x2143 + x2202
    x2204 = x91 * (x1076 * x697 + x133 * x1517)
    x2205 = x21 * x2144 + x2204
    x2206 = x21 * x2145 + x2205
    x2207 = x91 * (x127 * x1674 + x133 * x1523)
    x2208 = x21 * x2146 + x2207
    x2209 = x21 * x2147 + x2208
    x2210 = x91 * (x111 * x1298 + x144 * x1523)
    x2211 = x21 * x2148 + x2210
    x2212 = x21 * x2149 + x2211
    x2213 = x1871 * x20 + x1971 + x20 * x2150
    x2214 = x1874 * x20 + x1975 + x20 * x2152
    x2215 = x1877 * x20 + x1979 + x20 * x2154
    x2216 = x1881 * x20 + x1983 + x20 * x2156
    x2217 = x1885 * x20 + x1987 + x20 * x2158
    x2218 = x1889 * x20 + x1991 + x20 * x2160
    x2219 = x1892 * x20 + x1993 + x20 * x2162
    x2220 = x1895 * x20 + x1995 + x20 * x2164
    x2221 = x1898 * x20 + x1997 + x20 * x2166
    x2222 = x1901 * x20 + x1999 + x20 * x2168
    x2223 = x1905 * x20 + x2006
    x2224 = x1908 * x20 + x2013
    x2225 = x1911 * x20 + x2018
    x2226 = x1915 * x20 + x2023
    x2227 = x1919 * x20 + x2030
    x2228 = x1923 * x20 + x2035
    x2229 = x1926 * x20 + x2038
    x2230 = x1929 * x20 + x2041
    x2231 = x1932 * x20 + x2045
    x2232 = x1935 * x20 + x2048
    x2233 = -x1721 * x9 + x1724 * x190
    x2234 = x2233 * x6
    x2235 = x1720 * x190 - x1726 * x524
    x2236 = -x122 * x2235 + x2233 * x5
    x2237 = x21 * x2180 + x91 * (x1765 * x2234 + x92**2 * (2.0 * x2234 + x2236 * x4))
    x2238 = x21 * x2181 + x2237
    x2239 = x1731 + x2233 * x9
    x2240 = x1729 + x2236 * x9
    x2241 = x21 * x2183 + x91 * (x1769 * x2239 + x92 * (x127 * x2239 + x2240 * x92))
    x2242 = x21 * x2184 + x2241
    x2243 = x12 * x2233 + 4.0 * x1488
    x2244 = x12 * x2236 + x1484 * x73
    x2245 = x21 * x2186 + x91 * (x1769 * x2243 + x92 * (x127 * x2243 + x2244 * x92))
    x2246 = x21 * x2187 + x2245
    x2247 = x133 * x2239 + x1737
    x2248 = x133 * (x1729 + x2240)
    x2249 = x21 * x2190 + x91 * (x127 * x2247 + x2248 * x92)
    x2250 = x21 * x2191 + x2249
    x2251 = x133 * x2243 + x1744
    x2252 = x127 * x1742 + x133 * x2244
    x2253 = x21 * x2194 + x91 * (x127 * x2251 + x2252 * x92)
    x2254 = x21 * x2195 + x2253
    x2255 = x104 * x1505 + x144 * x2243
    x2256 = x104 * x1503 + x144 * x2244
    x2257 = x21 * x2198 + x91 * (x127 * x2255 + x2256 * x92)
    x2258 = x21 * x2199 + x2257
    x2259 = x21 * x2201 + x91 * (x133 * x2248 + x153 * x1729)
    x2260 = x21 * x2202 + x2259
    x2261 = x21 * x2204 + x91 * (x133 * x2252 + x1742 * x697)
    x2262 = x21 * x2205 + x2261
    x2263 = x21 * x2207 + x91 * (x127 * x1753 + x133 * x2256)
    x2264 = x21 * x2208 + x2263
    x2265 = x21 * x2210 + x91 * (x104 * x1523 + x144 * x2256)
    x2266 = x21 * x2211 + x2265
    x2267 = x0 * x1587 + x751
    x2268 = x1586 * x92 + x1765 * x747
    x2269 = x0 * x1591 + x766
    x2270 = x1590 * x92 + x444 * x747
    x2271 = x0 * x1596 + x777
    x2272 = x1593 * x1769 + x1595 * x92
    x2273 = x0 * x1598 + x783
    x2274 = x153 * x747
    x2275 = x153 * x748 + x2274
    x2276 = x0 * x1600 + x788
    x2277 = x1593 * x697
    x2278 = x2277 + x444 * x775
    x2279 = x0 * x1603 + x796
    x2280 = x116 * x1546 + x144 * x1593
    x2281 = x127 * x2280
    x2282 = x1602 * x92 + x2281
    x2283 = x0 * x1605 + x802
    x2284 = x171 * x721
    x2285 = x0 * x1607 + x807
    x2286 = x176 * x775
    x2287 = x0 * x1609 + x812
    x2288 = x158 * x1602
    x2289 = x0 * x1611 + x817
    x2290 = x144 * x1602 + x1556
    x2291 = x1275 + x1587 * x20
    x2292 = x2127 + x2268 * x253
    x2293 = x1280 + x1591 * x20
    x2294 = x2129 + x2270 * x253
    x2295 = x1285 + x1596 * x20
    x2296 = x2131 + x2272 * x253
    x2297 = x1290 + x1598 * x20
    x2298 = x2134 + x2275 * x253
    x2299 = x1295 + x1600 * x20
    x2300 = x2137 + x2278 * x253
    x2301 = x1300 + x1603 * x20
    x2302 = x2140 + x2282 * x253
    x2303 = x1303 + x1605 * x20
    x2304 = x20 * x2284 + x2142
    x2305 = x1306 + x1607 * x20
    x2306 = x20 * x2286 + x2144
    x2307 = x1309 + x1609 * x20
    x2308 = x20 * x2288 + x2146
    x2309 = x1312 + x1611 * x20
    x2310 = x2148 + x2290 * x253
    x2311 = x91 * (x1063 * x1765 + x1653 * x92)
    x2312 = x2268 * x407 + x2311
    x2313 = x91 * (x1063 * x444 + x1658 * x92)
    x2314 = x2270 * x407 + x2313
    x2315 = x91 * (x1662 * x1769 + x1664 * x92)
    x2316 = x2272 * x407 + x2315
    x2317 = x1063 * x153
    x2318 = x91 * (x1064 * x153 + x2317)
    x2319 = x2275 * x407 + x2318
    x2320 = x1662 * x697
    x2321 = x91 * (x1076 * x444 + x2320)
    x2322 = x2278 * x407 + x2321
    x2323 = x111 * x1593 + x144 * x1662
    x2324 = x127 * x2323
    x2325 = x91 * (x1674 * x92 + x2324)
    x2326 = x2282 * x407 + x2325
    x2327 = x1047 * x171
    x2328 = x21 * x2284 + x2327
    x2329 = x1076 * x176
    x2330 = x21 * x2286 + x2329
    x2331 = x158 * x1674
    x2332 = x21 * x2288 + x2331
    x2333 = x91 * (x111 * x1602 + x144 * x1674)
    x2334 = x2290 * x407 + x2333
    x2335 = x1904 + x20 * x2127
    x2336 = x20 * x2292 + x2335
    x2337 = x1275 * x20 + x1435
    x2338 = x1907 + x20 * x2129
    x2339 = x20 * x2294 + x2338
    x2340 = x1280 * x20 + x1442
    x2341 = x1910 + x20 * x2131
    x2342 = x20 * x2296 + x2341
    x2343 = x1285 * x20 + x1449
    x2344 = x1914 + x20 * x2134
    x2345 = x20 * x2298 + x2344
    x2346 = x1290 * x20 + x1454
    x2347 = x1918 + x20 * x2137
    x2348 = x20 * x2300 + x2347
    x2349 = x1295 * x20 + x1459
    x2350 = x1922 + x20 * x2140
    x2351 = x20 * x2302 + x2350
    x2352 = x1300 * x20 + x1464
    x2353 = x1925 + x20 * x2142
    x2354 = x20 * x2304 + x2353
    x2355 = x1303 * x20 + x1467
    x2356 = x1928 + x20 * x2144
    x2357 = x20 * x2306 + x2356
    x2358 = x1306 * x20 + x1470
    x2359 = x1931 + x20 * x2146
    x2360 = x20 * x2308 + x2359
    x2361 = x1309 * x20 + x1473
    x2362 = x1934 + x20 * x2148
    x2363 = x20 * x2310 + x2362
    x2364 = x1312 * x20 + x1476
    x2365 = x20 * x2312 + x2181
    x2366 = x20 * x2314 + x2184
    x2367 = x20 * x2316 + x2187
    x2368 = x20 * x2319 + x2191
    x2369 = x20 * x2322 + x2195
    x2370 = x20 * x2326 + x2199
    x2371 = x20 * x2328 + x2202
    x2372 = x20 * x2330 + x2205
    x2373 = x20 * x2332 + x2208
    x2374 = x20 * x2334 + x2211
    x2375 = x91 * (x1731 * x1765 + x1734 * x92)
    x2376 = x21 * x2311 + x2375
    x2377 = x21 * x2312 + x2376
    x2378 = x91 * (x1731 * x444 + x1738 * x92)
    x2379 = x21 * x2313 + x2378
    x2380 = x21 * x2314 + x2379
    x2381 = x91 * (x1743 * x1769 + x1745 * x92)
    x2382 = x21 * x2315 + x2381
    x2383 = x21 * x2316 + x2382
    x2384 = x153 * x1731
    x2385 = x91 * (x153 * x1732 + x2384)
    x2386 = x21 * x2318 + x2385
    x2387 = x21 * x2319 + x2386
    x2388 = x1743 * x697
    x2389 = x91 * (x1742 * x444 + x2388)
    x2390 = x21 * x2321 + x2389
    x2391 = x21 * x2322 + x2390
    x2392 = x104 * x1662 + x144 * x1743
    x2393 = x127 * x2392
    x2394 = x91 * (x1753 * x92 + x2393)
    x2395 = x21 * x2325 + x2394
    x2396 = x21 * x2326 + x2395
    x2397 = x171 * x1725
    x2398 = x21 * x2327 + x2397
    x2399 = x21 * x2328 + x2398
    x2400 = x1742 * x176
    x2401 = x21 * x2329 + x2400
    x2402 = x21 * x2330 + x2401
    x2403 = x158 * x1753
    x2404 = x21 * x2331 + x2403
    x2405 = x21 * x2332 + x2404
    x2406 = x91 * (x104 * x1674 + x144 * x1753)
    x2407 = x21 * x2333 + x2406
    x2408 = x21 * x2334 + x2407
    x2409 = x1904 * x20 + x20 * x2335 + x2005
    x2410 = x1907 * x20 + x20 * x2338 + x2012
    x2411 = x1910 * x20 + x20 * x2341 + x2017
    x2412 = x1914 * x20 + x20 * x2344 + x2022
    x2413 = x1918 * x20 + x20 * x2347 + x2029
    x2414 = x1922 * x20 + x20 * x2350 + x2034
    x2415 = x1925 * x20 + x20 * x2353 + x2037
    x2416 = x1928 * x20 + x20 * x2356 + x2040
    x2417 = x1931 * x20 + x20 * x2359 + x2044
    x2418 = x1934 * x20 + x20 * x2362 + x2047
    x2419 = x20 * x2181 + x2055
    x2420 = x20 * x2184 + x2060
    x2421 = x20 * x2187 + x2065
    x2422 = x20 * x2191 + x2070
    x2423 = x20 * x2195 + x2075
    x2424 = x20 * x2199 + x2080
    x2425 = x20 * x2202 + x2083
    x2426 = x20 * x2205 + x2086
    x2427 = x20 * x2208 + x2089
    x2428 = x20 * x2211 + x2092
    x2429 = 4.0 * x1044 - x12 * x1721 + x1724 * x343
    x2430 = x2429 * x6
    x2431 = 4.0 * x1053 + x1720 * x343 - x1726 * x756
    x2432 = -x122 * x2431 + x2429 * x5
    x2433 = x2432 * x4
    x2434 = (
        x21 * x2375
        + x21 * x2376
        + x91 * (x1765 * x2430 + x92**2 * (2.0 * x2430 + x2433))
    )
    x2435 = x133 * x2430
    x2436 = (
        x21 * x2378 + x21 * x2379 + x91 * (x2430 * x444 + x92 * (x133 * x2433 + x2435))
    )
    x2437 = x12 * x2429 + 5.0 * x1731
    x2438 = x127 * x2437
    x2439 = x12 * x2432 + 5.0 * x1729
    x2440 = (
        x21 * x2381 + x21 * x2382 + x91 * (x1769 * x2437 + x92 * (x2438 + x2439 * x92))
    )
    x2441 = x153 * x2430
    x2442 = x21 * x2385 + x21 * x2386 + x91 * (x153 * x2433 + x2441)
    x2443 = x2437 * x697
    x2444 = x21 * x2389 + x21 * x2390 + x91 * (x2439 * x444 + x2443)
    x2445 = x144 * x2437 + x1743 * x98
    x2446 = x127 * x2445
    x2447 = x144 * x2439 + x1742 * x98
    x2448 = x21 * x2394 + x21 * x2395 + x91 * (x2446 + x2447 * x92)
    x2449 = x171 * x2432 + x21 * x2397 + x21 * x2398
    x2450 = x176 * x2439 + x21 * x2400 + x21 * x2401
    x2451 = x158 * x2447 + x21 * x2403 + x21 * x2404
    x2452 = x21 * x2406 + x21 * x2407 + x91 * (x144 * x2447 + x1753 * x98)
    x2453 = x0 * x1791 + x1194
    x2454 = x170 * x4**3
    x2455 = x0 * x827
    x2456 = x0 * x1793 + x1201
    x2457 = x170 * x7
    x2458 = x1199 * x2457
    x2459 = x0 * x1795 + x1206
    x2460 = x12 * x2457
    x2461 = x0 * x1798 + x1210
    x2462 = x0 * x1768
    x2463 = x0 * x1801 + x1214
    x2464 = x0 * x1804 + x1217
    x2465 = x181 * x4
    x2466 = x0 * x1806 + x1220
    x2467 = x111 * x1775 + x133 * x1797
    x2468 = x0 * x1808 + x1223
    x2469 = x111 * x1778 + x133 * x1800
    x2470 = x0 * x1810 + x1226
    x2471 = x165 * (x1197 + x1198)
    x2472 = x0 * x1812 + x1229
    x2473 = x1319 * x2454
    x2474 = x20 * x827
    x2475 = x2454 * x2474 + x2473
    x2476 = x1340 * x2457
    x2477 = x20 * x2458 + x2476
    x2478 = x1319 * x2460
    x2479 = x2460 * x2474 + x2478
    x2480 = x1768 * x1847
    x2481 = x1768 * x20
    x2482 = x1797 * x2481 + x2480
    x2483 = x1768 * x1851
    x2484 = x1800 * x2481 + x2483
    x2485 = x1319 * x2465
    x2486 = x2465 * x2474 + x2485
    x2487 = x91 * (x104 * x1797 + x133 * x1847)
    x2488 = x2467 * x253 + x2487
    x2489 = x91 * (x104 * x1800 + x133 * x1851)
    x2490 = x2469 * x253 + x2489
    x2491 = x165 * x91 * (x1338 + x1339)
    x2492 = x2471 * x253 + x2491
    x2493 = x1319 * x186
    x2494 = x186 * x2474 + x2493
    x2495 = x1370 * x2454
    x2496 = x21 * x827
    x2497 = x2454 * x2496 + x2495
    x2498 = x1383 * x2457
    x2499 = x21 * x2458 + x2498
    x2500 = x1391 * x2457
    x2501 = x2460 * x2496 + x2500
    x2502 = x1768 * x1880
    x2503 = x1768 * x21
    x2504 = x1797 * x2503 + x2502
    x2505 = x1768 * x1884
    x2506 = x1800 * x2503 + x2505
    x2507 = x1768 * x1888
    x2508 = x2465 * x2496 + x2507
    x2509 = x91 * (x111 * x1820 + x133 * x1880)
    x2510 = x2467 * x407 + x2509
    x2511 = x91 * (x111 * x1824 + x133 * x1884)
    x2512 = x2469 * x407 + x2511
    x2513 = x91 * (x111 * x1827 + x133 * x1888)
    x2514 = x2471 * x407 + x2513
    x2515 = x91 * (x144 * x1888 + x1803)
    x2516 = x186 * x2496 + x2515
    x2517 = x1937 * x2454
    x2518 = x20 * x2473 + x2517
    x2519 = x20 * x2475 + x2518
    x2520 = x1945 * x2457
    x2521 = x20 * x2476 + x2520
    x2522 = x20 * x2477 + x2521
    x2523 = x1937 * x2460
    x2524 = x20 * x2478 + x2523
    x2525 = x20 * x2479 + x2524
    x2526 = x1768 * x1953
    x2527 = x20 * x2480 + x2526
    x2528 = x20 * x2482 + x2527
    x2529 = x1768 * x1957
    x2530 = x20 * x2483 + x2529
    x2531 = x20 * x2484 + x2530
    x2532 = x1937 * x2465
    x2533 = x20 * x2485 + x2532
    x2534 = x20 * x2486 + x2533
    x2535 = x91 * (x133 * x1953 + x1847 * x98)
    x2536 = x20 * x2487 + x2535
    x2537 = x20 * x2488 + x2536
    x2538 = x91 * (x133 * x1957 + x1851 * x98)
    x2539 = x20 * x2489 + x2538
    x2540 = x20 * x2490 + x2539
    x2541 = x165 * x91 * (x1943 + x1944)
    x2542 = x20 * x2491 + x2541
    x2543 = x20 * x2492 + x2542
    x2544 = x186 * x1937
    x2545 = x20 * x2493 + x2544
    x2546 = x20 * x2494 + x2545
    x2547 = x1967 * x2454
    x2548 = x21 * x2473 + x2547
    x2549 = x20 * x2497 + x2548
    x2550 = x1973 * x2457
    x2551 = x21 * x2476 + x2550
    x2552 = x20 * x2499 + x2551
    x2553 = x1977 * x2457
    x2554 = x21 * x2478 + x2553
    x2555 = x20 * x2501 + x2554
    x2556 = x1768 * x1981
    x2557 = x21 * x2480 + x2556
    x2558 = x20 * x2504 + x2557
    x2559 = x1768 * x1985
    x2560 = x21 * x2483 + x2559
    x2561 = x20 * x2506 + x2560
    x2562 = x1768 * x1989
    x2563 = x21 * x2485 + x2562
    x2564 = x20 * x2508 + x2563
    x2565 = x91 * (x104 * x1880 + x133 * x1981)
    x2566 = x21 * x2487 + x2565
    x2567 = x20 * x2510 + x2566
    x2568 = x91 * (x104 * x1884 + x133 * x1985)
    x2569 = x21 * x2489 + x2568
    x2570 = x20 * x2512 + x2569
    x2571 = x91 * (x104 * x1888 + x133 * x1989)
    x2572 = x21 * x2491 + x2571
    x2573 = x20 * x2514 + x2572
    x2574 = x91 * (x144 * x1989 + x1855)
    x2575 = x21 * x2493 + x2574
    x2576 = x20 * x2516 + x2575
    x2577 = x2001 * x2454
    x2578 = x21 * x2495 + x2577
    x2579 = x21 * x2497 + x2578
    x2580 = x2009 * x2457
    x2581 = x21 * x2498 + x2580
    x2582 = x21 * x2499 + x2581
    x2583 = x2015 * x2457
    x2584 = x21 * x2500 + x2583
    x2585 = x21 * x2501 + x2584
    x2586 = x1768 * x2020
    x2587 = x21 * x2502 + x2586
    x2588 = x21 * x2504 + x2587
    x2589 = x1768 * x2026
    x2590 = x21 * x2505 + x2589
    x2591 = x21 * x2506 + x2590
    x2592 = x1768 * x2032
    x2593 = x21 * x2507 + x2592
    x2594 = x21 * x2508 + x2593
    x2595 = x91 * (x111 * x1913 + x133 * x2020)
    x2596 = x21 * x2509 + x2595
    x2597 = x21 * x2510 + x2596
    x2598 = x91 * (x111 * x1917 + x133 * x2026)
    x2599 = x21 * x2511 + x2598
    x2600 = x21 * x2512 + x2599
    x2601 = x111 * x1921
    x2602 = x91 * (x133 * x2032 + x2601)
    x2603 = x21 * x2513 + x2602
    x2604 = x21 * x2514 + x2603
    x2605 = x91 * (x116 * x1888 + x144 * x2032)
    x2606 = x21 * x2515 + x2605
    x2607 = x21 * x2516 + x2606
    x2608 = 5.0 * x1318 + x190 * x1937 - x1939 * x524
    x2609 = x2608 * x9
    x2610 = 6.0 * x1938
    x2611 = x2609 + x2610
    x2612 = x133 * x2611 + 6.0 * x1946
    x2613 = x144 * (x2609 + x2610)
    x2614 = 4.0 * x1369 + x190 * x1967 - x1969 * x524
    x2615 = x2454 * x2614
    x2616 = 5.0 * x1968 + x2614 * x9
    x2617 = x2457 * x2616
    x2618 = x12 * x2614 + x1938
    x2619 = x2457 * x2618
    x2620 = x133 * x2616 + x1973 * x98
    x2621 = x1768 * x2620
    x2622 = x133 * x2618 + x1977 * x98
    x2623 = x1768 * x2622
    x2624 = x144 * x2618 + x1951
    x2625 = x1768 * x2624
    x2626 = x91 * (x133 * x2620 + x1981 * x98)
    x2627 = x91 * (x133 * x2622 + x1985 * x98)
    x2628 = x91 * (x133 * x2624 + x1989 * x98)
    x2629 = x91 * (x144 * x2624 + x1961)
    x2630 = 3.0 * x1427 + x190 * x2001 - x2003 * x524
    x2631 = x2454 * x2630
    x2632 = x21 * x2547 + x2631
    x2633 = 4.0 * x2002 + x2630 * x9
    x2634 = x2457 * x2633
    x2635 = x21 * x2550 + x2634
    x2636 = x12 * x2630 + 2.0 * x1968
    x2637 = x2457 * x2636
    x2638 = x21 * x2553 + x2637
    x2639 = x104 * x2009 + x133 * x2633
    x2640 = x1768 * x2639
    x2641 = x21 * x2556 + x2640
    x2642 = x104 * x2015 + x133 * x2636
    x2643 = x1768 * x2642
    x2644 = x21 * x2559 + x2643
    x2645 = x116 * x1977 + x144 * x2636
    x2646 = x1768 * x2645
    x2647 = x21 * x2562 + x2646
    x2648 = x91 * (x104 * x2020 + x133 * x2639)
    x2649 = x21 * x2565 + x2648
    x2650 = x91 * (x104 * x2026 + x133 * x2642)
    x2651 = x21 * x2568 + x2650
    x2652 = x91 * (x104 * x2032 + x133 * x2645)
    x2653 = x21 * x2571 + x2652
    x2654 = x91 * (x116 * x1989 + x144 * x2645)
    x2655 = x21 * x2574 + x2654
    x2656 = 2.0 * x1482 + x190 * x2050 - x2052 * x524
    x2657 = x2454 * x2656
    x2658 = x21 * x2577 + x2657
    x2659 = x21 * x2578 + x2658
    x2660 = 3.0 * x2051 + x2656 * x9
    x2661 = x2457 * x2660
    x2662 = x21 * x2580 + x2661
    x2663 = x21 * x2581 + x2662
    x2664 = x12 * x2656 + 3.0 * x2002
    x2665 = x2457 * x2664
    x2666 = x21 * x2583 + x2665
    x2667 = x21 * x2584 + x2666
    x2668 = x111 * x2057 + x133 * x2660
    x2669 = x1768 * x2668
    x2670 = x21 * x2586 + x2669
    x2671 = x21 * x2587 + x2670
    x2672 = x111 * x2062 + x133 * x2664
    x2673 = x1768 * x2672
    x2674 = x21 * x2589 + x2673
    x2675 = x21 * x2590 + x2674
    x2676 = x111 * x2015 + x144 * x2664
    x2677 = x1768 * x2676
    x2678 = x21 * x2592 + x2677
    x2679 = x21 * x2593 + x2678
    x2680 = x91 * (x111 * x2067 + x133 * x2668)
    x2681 = x21 * x2595 + x2680
    x2682 = x21 * x2596 + x2681
    x2683 = x91 * (x111 * x2072 + x133 * x2672)
    x2684 = x21 * x2598 + x2683
    x2685 = x21 * x2599 + x2684
    x2686 = x91 * (x111 * x2077 + x133 * x2676)
    x2687 = x21 * x2602 + x2686
    x2688 = x21 * x2603 + x2687
    x2689 = x91 * (x111 * x2032 + x144 * x2676)
    x2690 = x21 * x2605 + x2689
    x2691 = x21 * x2606 + x2690
    x2692 = x0 * x1814 + x1233
    x2693 = x2454 * x898
    x2694 = x0 * x1816 + x1239
    x2695 = x0 * x2457
    x2696 = x0 * x1818 + x1244
    x2697 = x0 * x1821 + x1248
    x2698 = x0 * x1825 + x1252
    x2699 = x0 * x1828 + x1258
    x2700 = x0 * x1830 + x1261
    x2701 = x116 * x2101 + x133 * x1820
    x2702 = x0 * x1832 + x1264
    x2703 = x116 * x2104 + x133 * x1824
    x2704 = x0 * x1834 + x1268
    x2705 = x116 * x2107
    x2706 = x133 * x1827 + x2705
    x2707 = x0 * x1836 + x1271
    x2708 = x144 * x1827 + x1781
    x2709 = x20 * x2693 + x2495
    x2710 = x20 * x2457
    x2711 = x1237 * x2710 + x2498
    x2712 = x1242 * x2710 + x2500
    x2713 = x1820 * x2481 + x2502
    x2714 = x1824 * x2481 + x2505
    x2715 = x1827 * x2481 + x2507
    x2716 = x2509 + x253 * x2701
    x2717 = x2511 + x253 * x2703
    x2718 = x2513 + x253 * x2706
    x2719 = x2515 + x253 * x2708
    x2720 = x1428 * x2454
    x2721 = x21 * x2693 + x2720
    x2722 = x1440 * x2457
    x2723 = x21 * x2457
    x2724 = x1237 * x2723 + x2722
    x2725 = x1447 * x2457
    x2726 = x1242 * x2723 + x2725
    x2727 = x1768 * x1913
    x2728 = x1820 * x2503 + x2727
    x2729 = x1768 * x1917
    x2730 = x1824 * x2503 + x2729
    x2731 = x1768 * x1921
    x2732 = x1827 * x2503 + x2731
    x2733 = x91 * (x116 * x2133 + x133 * x1913)
    x2734 = x2701 * x407 + x2733
    x2735 = x91 * (x116 * x2136 + x133 * x1917)
    x2736 = x2703 * x407 + x2735
    x2737 = x91 * (x116 * x2139 + x133 * x1921)
    x2738 = x2706 * x407 + x2737
    x2739 = x91 * (x116 * x1827 + x144 * x1921)
    x2740 = x2708 * x407 + x2739
    x2741 = x20 * x2495 + x2547
    x2742 = x20 * x2709 + x2741
    x2743 = x20 * x2498 + x2550
    x2744 = x20 * x2711 + x2743
    x2745 = x20 * x2500 + x2553
    x2746 = x20 * x2712 + x2745
    x2747 = x20 * x2502 + x2556
    x2748 = x20 * x2713 + x2747
    x2749 = x20 * x2505 + x2559
    x2750 = x20 * x2714 + x2749
    x2751 = x20 * x2507 + x2562
    x2752 = x20 * x2715 + x2751
    x2753 = x20 * x2509 + x2565
    x2754 = x20 * x2716 + x2753
    x2755 = x20 * x2511 + x2568
    x2756 = x20 * x2717 + x2755
    x2757 = x20 * x2513 + x2571
    x2758 = x20 * x2718 + x2757
    x2759 = x20 * x2515 + x2574
    x2760 = x20 * x2719 + x2759
    x2761 = x20 * x2721 + x2578
    x2762 = x20 * x2724 + x2581
    x2763 = x20 * x2726 + x2584
    x2764 = x20 * x2728 + x2587
    x2765 = x20 * x2730 + x2590
    x2766 = x20 * x2732 + x2593
    x2767 = x20 * x2734 + x2596
    x2768 = x20 * x2736 + x2599
    x2769 = x20 * x2738 + x2603
    x2770 = x20 * x2740 + x2606
    x2771 = x2050 * x2454
    x2772 = x21 * x2720 + x2771
    x2773 = x21 * x2721 + x2772
    x2774 = x2057 * x2457
    x2775 = x21 * x2722 + x2774
    x2776 = x21 * x2724 + x2775
    x2777 = x2062 * x2457
    x2778 = x21 * x2725 + x2777
    x2779 = x21 * x2726 + x2778
    x2780 = x1768 * x2067
    x2781 = x21 * x2727 + x2780
    x2782 = x21 * x2728 + x2781
    x2783 = x1768 * x2072
    x2784 = x21 * x2729 + x2783
    x2785 = x21 * x2730 + x2784
    x2786 = x1768 * x2077
    x2787 = x21 * x2731 + x2786
    x2788 = x21 * x2732 + x2787
    x2789 = x91 * (x116 * x2189 + x133 * x2067)
    x2790 = x21 * x2733 + x2789
    x2791 = x21 * x2734 + x2790
    x2792 = x91 * (x116 * x2193 + x133 * x2072)
    x2793 = x21 * x2735 + x2792
    x2794 = x21 * x2736 + x2793
    x2795 = x91 * (x116 * x2197 + x133 * x2077)
    x2796 = x21 * x2737 + x2795
    x2797 = x21 * x2738 + x2796
    x2798 = x91 * (x144 * x2077 + x2601)
    x2799 = x21 * x2739 + x2798
    x2800 = x21 * x2740 + x2799
    x2801 = x1723 + x190 * x2233 - x2235 * x524
    x2802 = x21 * x2771 + x2454 * x2801
    x2803 = x21 * x2772 + x2802
    x2804 = 2.0 * x2234 + x2801 * x9
    x2805 = x21 * x2774 + x2457 * x2804
    x2806 = x21 * x2775 + x2805
    x2807 = x12 * x2801 + 4.0 * x2051
    x2808 = x21 * x2777 + x2457 * x2807
    x2809 = x21 * x2778 + x2808
    x2810 = x116 * x2239 + x133 * x2804
    x2811 = x1768 * x2810 + x21 * x2780
    x2812 = x21 * x2781 + x2811
    x2813 = x116 * x2243 + x133 * x2807
    x2814 = x1768 * x2813 + x21 * x2783
    x2815 = x21 * x2784 + x2814
    x2816 = x104 * x2062 + x144 * x2807
    x2817 = x1768 * x2816 + x21 * x2786
    x2818 = x21 * x2787 + x2817
    x2819 = x21 * x2789 + x91 * (x116 * x2247 + x133 * x2810)
    x2820 = x21 * x2790 + x2819
    x2821 = x21 * x2792 + x91 * (x116 * x2251 + x133 * x2813)
    x2822 = x21 * x2793 + x2821
    x2823 = x21 * x2795 + x91 * (x116 * x2255 + x133 * x2816)
    x2824 = x21 * x2796 + x2823
    x2825 = x21 * x2798 + x91 * (x104 * x2077 + x144 * x2816)
    x2826 = x21 * x2799 + x2825
    x2827 = x0 * x2127 + x1275
    x2828 = x2454 * x975
    x2829 = x0 * x2129 + x1280
    x2830 = x0 * x2131 + x1285
    x2831 = x0 * x2134 + x1290
    x2832 = x0 * x2137 + x1295
    x2833 = x0 * x2140 + x1300
    x2834 = x0 * x2142 + x1303
    x2835 = x133 * x2133 + x2274
    x2836 = x0 * x2144 + x1306
    x2837 = x133 * x2136 + x2277
    x2838 = x0 * x2146 + x1309
    x2839 = x133 * x2139 + x2281
    x2840 = x0 * x2148 + x1312
    x2841 = x144 * x2139 + x2705
    x2842 = x20 * x2828 + x2720
    x2843 = x1278 * x2710 + x2722
    x2844 = x1283 * x2710 + x2725
    x2845 = x2133 * x2481 + x2727
    x2846 = x2136 * x2481 + x2729
    x2847 = x2139 * x2481 + x2731
    x2848 = x253 * x2835 + x2733
    x2849 = x253 * x2837 + x2735
    x2850 = x253 * x2839 + x2737
    x2851 = x253 * x2841 + x2739
    x2852 = x1483 * x2454
    x2853 = x21 * x2828 + x2852
    x2854 = x1497 * x2457
    x2855 = x1278 * x2723 + x2854
    x2856 = x1505 * x2457
    x2857 = x1283 * x2723 + x2856
    x2858 = x1768 * x2189
    x2859 = x2133 * x2503 + x2858
    x2860 = x1768 * x2193
    x2861 = x2136 * x2503 + x2860
    x2862 = x1768 * x2197
    x2863 = x2139 * x2503 + x2862
    x2864 = x91 * (x133 * x2189 + x2317)
    x2865 = x2835 * x407 + x2864
    x2866 = x91 * (x133 * x2193 + x2320)
    x2867 = x2837 * x407 + x2866
    x2868 = x91 * (x133 * x2197 + x2324)
    x2869 = x2839 * x407 + x2868
    x2870 = x91 * (x111 * x2139 + x144 * x2197)
    x2871 = x2841 * x407 + x2870
    x2872 = x20 * x2720 + x2577
    x2873 = x20 * x2842 + x2872
    x2874 = x20 * x2722 + x2580
    x2875 = x20 * x2843 + x2874
    x2876 = x20 * x2725 + x2583
    x2877 = x20 * x2844 + x2876
    x2878 = x20 * x2727 + x2586
    x2879 = x20 * x2845 + x2878
    x2880 = x20 * x2729 + x2589
    x2881 = x20 * x2846 + x2880
    x2882 = x20 * x2731 + x2592
    x2883 = x20 * x2847 + x2882
    x2884 = x20 * x2733 + x2595
    x2885 = x20 * x2848 + x2884
    x2886 = x20 * x2735 + x2598
    x2887 = x20 * x2849 + x2886
    x2888 = x20 * x2737 + x2602
    x2889 = x20 * x2850 + x2888
    x2890 = x20 * x2739 + x2605
    x2891 = x20 * x2851 + x2890
    x2892 = x20 * x2853 + x2772
    x2893 = x20 * x2855 + x2775
    x2894 = x20 * x2857 + x2778
    x2895 = x20 * x2859 + x2781
    x2896 = x20 * x2861 + x2784
    x2897 = x20 * x2863 + x2787
    x2898 = x20 * x2865 + x2790
    x2899 = x20 * x2867 + x2793
    x2900 = x20 * x2869 + x2796
    x2901 = x20 * x2871 + x2799
    x2902 = x2233 * x2454
    x2903 = x21 * x2852 + x2902
    x2904 = x21 * x2853 + x2903
    x2905 = x2239 * x2457
    x2906 = x21 * x2854 + x2905
    x2907 = x21 * x2855 + x2906
    x2908 = x2243 * x2457
    x2909 = x21 * x2856 + x2908
    x2910 = x21 * x2857 + x2909
    x2911 = x1768 * x2247
    x2912 = x21 * x2858 + x2911
    x2913 = x21 * x2859 + x2912
    x2914 = x1768 * x2251
    x2915 = x21 * x2860 + x2914
    x2916 = x21 * x2861 + x2915
    x2917 = x1768 * x2255
    x2918 = x21 * x2862 + x2917
    x2919 = x21 * x2863 + x2918
    x2920 = x91 * (x133 * x2247 + x2384)
    x2921 = x21 * x2864 + x2920
    x2922 = x21 * x2865 + x2921
    x2923 = x91 * (x133 * x2251 + x2388)
    x2924 = x21 * x2866 + x2923
    x2925 = x21 * x2867 + x2924
    x2926 = x91 * (x133 * x2255 + x2393)
    x2927 = x21 * x2868 + x2926
    x2928 = x21 * x2869 + x2927
    x2929 = x91 * (x104 * x2197 + x144 * x2255)
    x2930 = x21 * x2870 + x2929
    x2931 = x21 * x2871 + x2930
    x2932 = x190 * x2429 - x2431 * x524
    x2933 = x21 * x2902 + x21 * x2903 + x2454 * x2932
    x2934 = x2430 + x2932 * x9
    x2935 = x21 * x2905 + x21 * x2906 + x2457 * x2934
    x2936 = x12 * x2932 + 5.0 * x2234
    x2937 = x21 * x2908 + x21 * x2909 + x2457 * x2936
    x2938 = x133 * x2934 + x2435
    x2939 = x1768 * x2938 + x21 * x2911 + x21 * x2912
    x2940 = x133 * x2936 + x2438
    x2941 = x1768 * x2940 + x21 * x2914 + x21 * x2915
    x2942 = x144 * x2936 + x2243 * x98
    x2943 = x1768 * x2942 + x21 * x2917 + x21 * x2918
    x2944 = x21 * x2920 + x21 * x2921 + x91 * (x133 * x2938 + x2441)
    x2945 = x21 * x2923 + x21 * x2924 + x91 * (x133 * x2940 + x2443)
    x2946 = x21 * x2926 + x21 * x2927 + x91 * (x133 * x2942 + x2446)
    x2947 = x21 * x2929 + x21 * x2930 + x91 * (x144 * x2942 + x2255 * x98)
    x2948 = x0 * x2311 + x1654
    x2949 = x0 * x1045
    x2950 = x0 * x2313 + x1659
    x2951 = x1045 * x9
    x2952 = x0 * x2315 + x1665
    x2953 = x0 * x2318 + x1668
    x2954 = x176 * x4
    x2955 = x0 * x2321 + x1671
    x2956 = x170 * x4 * x9
    x2957 = x1662 * x2956
    x2958 = x0 * x2325 + x1675
    x2959 = x0 * x2327 + x1678
    x2960 = x0 * x2329 + x1681
    x2961 = x1662 * x176
    x2962 = x0 * x2331 + x1684
    x2963 = x158 * x2323
    x2964 = x0 * x2333 + x1687
    x2965 = x111 * x2280 + x144 * x2323
    x2966 = x20 * x2311 + x2180
    x2967 = x1045 * x20
    x2968 = x2454 * x2967 + x2852
    x2969 = x20 * x2313 + x2183
    x2970 = x2710 * x2951 + x2854
    x2971 = x20 * x2315 + x2186
    x2972 = x1662 * x2710 + x2856
    x2973 = x20 * x2318 + x2190
    x2974 = x2858 + x2954 * x2967
    x2975 = x20 * x2321 + x2194
    x2976 = x20 * x2957 + x2860
    x2977 = x20 * x2325 + x2198
    x2978 = x2323 * x2481 + x2862
    x2979 = x20 * x2327 + x2201
    x2980 = x171 * x2967 + x2864
    x2981 = x20 * x2329 + x2204
    x2982 = x20 * x2961 + x2866
    x2983 = x20 * x2331 + x2207
    x2984 = x20 * x2963 + x2868
    x2985 = x20 * x2333 + x2210
    x2986 = x253 * x2965 + x2870
    x2987 = x1724 * x2454
    x2988 = x1045 * x21
    x2989 = x2454 * x2988 + x2987
    x2990 = x2457 * x9
    x2991 = x1724 * x2990 + x2723 * x2951
    x2992 = x1743 * x2457
    x2993 = x1662 * x2723 + x2992
    x2994 = x1724 * x2954
    x2995 = x2954 * x2988 + x2994
    x2996 = x1743 * x2956
    x2997 = x21 * x2957 + x2996
    x2998 = x1768 * x2392
    x2999 = x2323 * x2503 + x2998
    x3000 = x171 * x1724
    x3001 = x171 * x2988 + x3000
    x3002 = x1743 * x176
    x3003 = x21 * x2961 + x3002
    x3004 = x158 * x2392
    x3005 = x21 * x2963 + x3004
    x3006 = x91 * (x104 * x2323 + x144 * x2392)
    x3007 = x2965 * x407 + x3006
    x3008 = x20 * x2852 + x2771
    x3009 = x20 * x2968 + x3008
    x3010 = x20 * x2854 + x2774
    x3011 = x20 * x2970 + x3010
    x3012 = x20 * x2856 + x2777
    x3013 = x20 * x2972 + x3012
    x3014 = x20 * x2858 + x2780
    x3015 = x20 * x2974 + x3014
    x3016 = x20 * x2860 + x2783
    x3017 = x20 * x2976 + x3016
    x3018 = x20 * x2862 + x2786
    x3019 = x20 * x2978 + x3018
    x3020 = x20 * x2864 + x2789
    x3021 = x20 * x2980 + x3020
    x3022 = x20 * x2866 + x2792
    x3023 = x20 * x2982 + x3022
    x3024 = x20 * x2868 + x2795
    x3025 = x20 * x2984 + x3024
    x3026 = x20 * x2870 + x2798
    x3027 = x20 * x2986 + x3026
    x3028 = x20 * x2989 + x2903
    x3029 = x20 * x2991 + x2906
    x3030 = x20 * x2993 + x2909
    x3031 = x20 * x2995 + x2912
    x3032 = x20 * x2997 + x2915
    x3033 = x20 * x2999 + x2918
    x3034 = x20 * x3001 + x2921
    x3035 = x20 * x3003 + x2924
    x3036 = x20 * x3005 + x2927
    x3037 = x20 * x3007 + x2930
    x3038 = x2429 * x2454
    x3039 = x21 * x2987 + x3038
    x3040 = x21 * x2989 + x3039
    x3041 = x2723 * x9
    x3042 = x1724 * x3041 + x2429 * x2990
    x3043 = x21 * x2991 + x3042
    x3044 = x2437 * x2457
    x3045 = x21 * x2992 + x3044
    x3046 = x21 * x2993 + x3045
    x3047 = x2429 * x2954
    x3048 = x21 * x2994 + x3047
    x3049 = x21 * x2995 + x3048
    x3050 = x2437 * x2956
    x3051 = x21 * x2996 + x3050
    x3052 = x21 * x2997 + x3051
    x3053 = x1768 * x2445
    x3054 = x21 * x2998 + x3053
    x3055 = x21 * x2999 + x3054
    x3056 = x171 * x2429
    x3057 = x21 * x3000 + x3056
    x3058 = x21 * x3001 + x3057
    x3059 = x176 * x2437
    x3060 = x21 * x3002 + x3059
    x3061 = x21 * x3003 + x3060
    x3062 = x158 * x2445
    x3063 = x21 * x3004 + x3062
    x3064 = x21 * x3005 + x3063
    x3065 = x91 * (x144 * x2445 + x2392 * x98)
    x3066 = x21 * x3006 + x3065
    x3067 = x21 * x3007 + x3066
    x3068 = 5.0 * x1723 + x2429 * x343 - x2431 * x756
    x3069 = x12 * x3068 + 6.0 * x2430
    x3070 = x144 * x3069 + 6.0 * x2438

    # 1000 item(s)
    result[0, 0, 0] = numpy.sum(
        x132
        * (
            x0 * x106
            + x0 * x114
            + x0 * (x0 * (x113 + x117 * x118) + x114)
            + x91 * (x128 * x99 + x92 * (x128 * x90 + x92 * (x124 + x126)))
        )
    )
    result[0, 0, 1] = numpy.sum(
        x143
        * (
            x0 * x136
            + x0 * x139
            + x0 * (x0 * (x118 * x140 + x138) + x139)
            + x91 * (x128 * x134 + x133 * x92 * (x124 + x126))
        )
    )
    result[0, 0, 2] = numpy.sum(
        x143
        * (
            x0 * x147
            + x0 * x150
            + x0 * (x0 * (x118 * x151 + x149) + x150)
            + x91 * (x128 * x145 + x144 * x92 * (x124 + x126))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x143
        * (
            x0 * x154
            + x0 * x156
            + x0 * (x0 * (x118 * x157 + x155) + x156)
            + x153 * x91 * (x124 + x126)
        )
    )
    result[0, 0, 4] = numpy.sum(
        x164
        * (
            x0 * x160
            + x0 * x162
            + x0 * (x0 * (x118 * x163 + x161) + x162)
            + x159 * x91 * (x124 + x126)
        )
    )
    result[0, 0, 5] = numpy.sum(
        x143
        * (
            x0 * x166
            + x0 * x168
            + x0 * (x0 * (x118 * x169 + x167) + x168)
            + x165 * x91 * (x124 + x126)
        )
    )
    result[0, 0, 6] = numpy.sum(
        x132
        * (x0 * x172 + x0 * x174 + x0 * (x0 * (x171 * x175 + x173) + x174) + x123 * x171)
    )
    result[0, 0, 7] = numpy.sum(
        x143
        * (x0 * x178 + x0 * x180 + x0 * (x0 * (x175 * x177 + x179) + x180) + x123 * x177)
    )
    result[0, 0, 8] = numpy.sum(
        x143
        * (x0 * x183 + x0 * x185 + x0 * (x0 * (x175 * x182 + x184) + x185) + x123 * x182)
    )
    result[0, 0, 9] = numpy.sum(
        x132
        * (x0 * x187 + x0 * x189 + x0 * (x0 * (x175 * x186 + x188) + x189) + x123 * x186)
    )
    result[0, 1, 0] = numpy.sum(
        x143 * (x0 * x247 + x0 * (x0 * x254 + x247) + x106 * x20 + x261)
    )
    result[0, 1, 1] = numpy.sum(
        x281 * (x0 * x271 + x0 * (x0 * x277 + x271) + x136 * x20 + x280)
    )
    result[0, 1, 2] = numpy.sum(
        x281 * (x0 * x285 + x0 * (x0 * x289 + x285) + x147 * x20 + x290)
    )
    result[0, 1, 3] = numpy.sum(
        x281 * (x0 * x294 + x0 * (x0 * x297 + x294) + x154 * x20 + x299)
    )
    result[0, 1, 4] = numpy.sum(
        x313 * (x0 * x305 + x0 * (x0 * x309 + x305) + x160 * x20 + x312)
    )
    result[0, 1, 5] = numpy.sum(
        x281 * (x0 * x315 + x0 * (x0 * x317 + x315) + x166 * x20 + x318)
    )
    result[0, 1, 6] = numpy.sum(
        x143 * (x0 * x320 + x0 * (x0 * x323 + x320) + x172 * x20 + x324)
    )
    result[0, 1, 7] = numpy.sum(
        x281 * (x0 * x326 + x0 * (x0 * x328 + x326) + x178 * x20 + x329)
    )
    result[0, 1, 8] = numpy.sum(
        x281 * (x0 * x332 + x0 * (x0 * x335 + x332) + x183 * x20 + x337)
    )
    result[0, 1, 9] = numpy.sum(
        x143 * (x0 * x339 + x0 * (x0 * x341 + x339) + x187 * x20 + x342)
    )
    result[0, 2, 0] = numpy.sum(
        x143 * (x0 * x401 + x0 * (x0 * x408 + x401) + x106 * x21 + x416)
    )
    result[0, 2, 1] = numpy.sum(
        x281 * (x0 * x420 + x0 * (x0 * x423 + x420) + x136 * x21 + x424)
    )
    result[0, 2, 2] = numpy.sum(
        x281 * (x0 * x431 + x0 * (x0 * x436 + x431) + x147 * x21 + x438)
    )
    result[0, 2, 3] = numpy.sum(
        x281 * (x0 * x440 + x0 * (x0 * x442 + x440) + x154 * x21 + x443)
    )
    result[0, 2, 4] = numpy.sum(
        x313 * (x0 * x447 + x0 * (x0 * x450 + x447) + x160 * x21 + x451)
    )
    result[0, 2, 5] = numpy.sum(
        x281 * (x0 * x455 + x0 * (x0 * x458 + x455) + x166 * x21 + x460)
    )
    result[0, 2, 6] = numpy.sum(
        x143 * (x0 * x462 + x0 * (x0 * x465 + x462) + x172 * x21 + x466)
    )
    result[0, 2, 7] = numpy.sum(
        x281 * (x0 * x468 + x0 * (x0 * x470 + x468) + x178 * x21 + x471)
    )
    result[0, 2, 8] = numpy.sum(
        x281 * (x0 * x473 + x0 * (x0 * x475 + x473) + x183 * x21 + x476)
    )
    result[0, 2, 9] = numpy.sum(
        x143 * (x0 * x478 + x0 * (x0 * x480 + x478) + x187 * x21 + x481)
    )
    result[0, 3, 0] = numpy.sum(x143 * (x0 * x522 + x20 * x247 + x531))
    result[0, 3, 1] = numpy.sum(x281 * (x0 * x545 + x20 * x271 + x550))
    result[0, 3, 2] = numpy.sum(x281 * (x0 * x556 + x20 * x285 + x558))
    result[0, 3, 3] = numpy.sum(x281 * (x0 * x564 + x20 * x294 + x567))
    result[0, 3, 4] = numpy.sum(x313 * (x0 * x573 + x20 * x305 + x576))
    result[0, 3, 5] = numpy.sum(x281 * (x0 * x580 + x20 * x315 + x582))
    result[0, 3, 6] = numpy.sum(x143 * (x0 * x585 + x20 * x320 + x587))
    result[0, 3, 7] = numpy.sum(x281 * (x0 * x590 + x20 * x326 + x592))
    result[0, 3, 8] = numpy.sum(x281 * (x0 * x595 + x20 * x332 + x597))
    result[0, 3, 9] = numpy.sum(x143 * (x0 * x600 + x20 * x339 + x602))
    result[0, 4, 0] = numpy.sum(x164 * (x0 * x637 + x20 * x401 + x642))
    result[0, 4, 1] = numpy.sum(x313 * (x0 * x651 + x20 * x420 + x654))
    result[0, 4, 2] = numpy.sum(x313 * (x0 * x663 + x20 * x431 + x666))
    result[0, 4, 3] = numpy.sum(x313 * (x0 * x671 + x20 * x440 + x674))
    result[0, 4, 4] = numpy.sum(x683 * (x0 * x679 + x20 * x447 + x682))
    result[0, 4, 5] = numpy.sum(x313 * (x0 * x688 + x20 * x455 + x691))
    result[0, 4, 6] = numpy.sum(x164 * (x0 * x694 + x20 * x462 + x696))
    result[0, 4, 7] = numpy.sum(x313 * (x0 * x700 + x20 * x468 + x702))
    result[0, 4, 8] = numpy.sum(x313 * (x0 * x705 + x20 * x473 + x707))
    result[0, 4, 9] = numpy.sum(x164 * (x0 * x710 + x20 * x478 + x712))
    result[0, 5, 0] = numpy.sum(x143 * (x0 * x753 + x21 * x401 + x763))
    result[0, 5, 1] = numpy.sum(x281 * (x0 * x768 + x21 * x420 + x770))
    result[0, 5, 2] = numpy.sum(x281 * (x0 * x779 + x21 * x431 + x782))
    result[0, 5, 3] = numpy.sum(x281 * (x0 * x785 + x21 * x440 + x787))
    result[0, 5, 4] = numpy.sum(x313 * (x0 * x790 + x21 * x447 + x792))
    result[0, 5, 5] = numpy.sum(x281 * (x0 * x798 + x21 * x455 + x801))
    result[0, 5, 6] = numpy.sum(x143 * (x0 * x804 + x21 * x462 + x806))
    result[0, 5, 7] = numpy.sum(x281 * (x0 * x809 + x21 * x468 + x811))
    result[0, 5, 8] = numpy.sum(x281 * (x0 * x814 + x21 * x473 + x816))
    result[0, 5, 9] = numpy.sum(x143 * (x0 * x819 + x21 * x478 + x821))
    result[0, 6, 0] = numpy.sum(x132 * (x20 * x522 + x851))
    result[0, 6, 1] = numpy.sum(x143 * (x20 * x545 + x863))
    result[0, 6, 2] = numpy.sum(x143 * (x20 * x556 + x867))
    result[0, 6, 3] = numpy.sum(x143 * (x20 * x564 + x872))
    result[0, 6, 4] = numpy.sum(x164 * (x20 * x573 + x877))
    result[0, 6, 5] = numpy.sum(x143 * (x20 * x580 + x880))
    result[0, 6, 6] = numpy.sum(x132 * (x20 * x585 + x883))
    result[0, 6, 7] = numpy.sum(x143 * (x20 * x590 + x886))
    result[0, 6, 8] = numpy.sum(x143 * (x20 * x595 + x889))
    result[0, 6, 9] = numpy.sum(x132 * (x20 * x600 + x892))
    result[0, 7, 0] = numpy.sum(x143 * (x20 * x637 + x917))
    result[0, 7, 1] = numpy.sum(x281 * (x20 * x651 + x927))
    result[0, 7, 2] = numpy.sum(x281 * (x20 * x663 + x936))
    result[0, 7, 3] = numpy.sum(x281 * (x20 * x671 + x942))
    result[0, 7, 4] = numpy.sum(x313 * (x20 * x679 + x950))
    result[0, 7, 5] = numpy.sum(x281 * (x20 * x688 + x956))
    result[0, 7, 6] = numpy.sum(x143 * (x20 * x694 + x959))
    result[0, 7, 7] = numpy.sum(x281 * (x20 * x700 + x962))
    result[0, 7, 8] = numpy.sum(x281 * (x20 * x705 + x966))
    result[0, 7, 9] = numpy.sum(x143 * (x20 * x710 + x969))
    result[0, 8, 0] = numpy.sum(x143 * (x20 * x753 + x994))
    result[0, 8, 1] = numpy.sum(x281 * (x1002 + x20 * x768))
    result[0, 8, 2] = numpy.sum(x281 * (x1011 + x20 * x779))
    result[0, 8, 3] = numpy.sum(x281 * (x1016 + x20 * x785))
    result[0, 8, 4] = numpy.sum(x313 * (x1021 + x20 * x790))
    result[0, 8, 5] = numpy.sum(x281 * (x1027 + x20 * x798))
    result[0, 8, 6] = numpy.sum(x143 * (x1030 + x20 * x804))
    result[0, 8, 7] = numpy.sum(x281 * (x1033 + x20 * x809))
    result[0, 8, 8] = numpy.sum(x281 * (x1036 + x20 * x814))
    result[0, 8, 9] = numpy.sum(x143 * (x1039 + x20 * x819))
    result[0, 9, 0] = numpy.sum(x132 * (x1069 + x21 * x753))
    result[0, 9, 1] = numpy.sum(x143 * (x1073 + x21 * x768))
    result[0, 9, 2] = numpy.sum(x143 * (x1080 + x21 * x779))
    result[0, 9, 3] = numpy.sum(x143 * (x1083 + x21 * x785))
    result[0, 9, 4] = numpy.sum(x164 * (x1086 + x21 * x790))
    result[0, 9, 5] = numpy.sum(x143 * (x1091 + x21 * x798))
    result[0, 9, 6] = numpy.sum(x132 * (x1094 + x21 * x804))
    result[0, 9, 7] = numpy.sum(x143 * (x1097 + x21 * x809))
    result[0, 9, 8] = numpy.sum(x143 * (x1100 + x21 * x814))
    result[0, 9, 9] = numpy.sum(x132 * (x1103 + x21 * x819))
    result[1, 0, 0] = numpy.sum(
        x143 * (x0 * x1104 + x0 * x246 + x0 * (x0 * (x1105 * x118 + x252) + x1104) + x261)
    )
    result[1, 0, 1] = numpy.sum(
        x281 * (x0 * x1106 + x0 * x270 + x0 * (x0 * (x1108 * x118 + x276) + x1106) + x280)
    )
    result[1, 0, 2] = numpy.sum(
        x281 * (x0 * x1109 + x0 * x284 + x0 * (x0 * (x1111 * x118 + x288) + x1109) + x290)
    )
    result[1, 0, 3] = numpy.sum(
        x281 * (x0 * x1112 + x0 * x293 + x0 * (x0 * (x1114 * x118 + x296) + x1112) + x299)
    )
    result[1, 0, 4] = numpy.sum(
        x313 * (x0 * x1115 + x0 * x304 + x0 * (x0 * (x1118 * x118 + x308) + x1115) + x312)
    )
    result[1, 0, 5] = numpy.sum(
        x281 * (x0 * x1119 + x0 * x314 + x0 * (x0 * (x1121 * x118 + x316) + x1119) + x318)
    )
    result[1, 0, 6] = numpy.sum(
        x143 * (x0 * x1122 + x0 * x319 + x0 * (x0 * (x1123 * x118 + x321) + x1122) + x324)
    )
    result[1, 0, 7] = numpy.sum(
        x281 * (x0 * x1124 + x0 * x325 + x0 * (x0 * (x1125 * x118 + x327) + x1124) + x329)
    )
    result[1, 0, 8] = numpy.sum(
        x281 * (x0 * x1126 + x0 * x331 + x0 * (x0 * (x1128 * x118 + x334) + x1126) + x337)
    )
    result[1, 0, 9] = numpy.sum(
        x143 * (x0 * x1129 + x0 * x338 + x0 * (x0 * (x0 * x1130 + x340) + x1129) + x342)
    )
    result[1, 1, 0] = numpy.sum(x281 * (x0 * x521 + x0 * (x0 * x1133 + x521) + x531))
    result[1, 1, 1] = numpy.sum(x1140 * (x0 * x544 + x0 * (x0 * x1139 + x544) + x550))
    result[1, 1, 2] = numpy.sum(x1140 * (x0 * x555 + x0 * (x0 * x1144 + x555) + x558))
    result[1, 1, 3] = numpy.sum(x1140 * (x0 * x563 + x0 * (x0 * x1147 + x563) + x567))
    result[1, 1, 4] = numpy.sum(x1151 * (x0 * x572 + x0 * (x0 * x1150 + x572) + x576))
    result[1, 1, 5] = numpy.sum(x1140 * (x0 * x579 + x0 * (x0 * x1153 + x579) + x582))
    result[1, 1, 6] = numpy.sum(x281 * (x0 * x584 + x0 * (x0 * x1155 + x584) + x587))
    result[1, 1, 7] = numpy.sum(x1140 * (x0 * x589 + x0 * (x0 * x1157 + x589) + x592))
    result[1, 1, 8] = numpy.sum(x1140 * (x0 * x594 + x0 * (x0 * x1159 + x594) + x597))
    result[1, 1, 9] = numpy.sum(x281 * (x0 * x599 + x0 * (x0 * x1161 + x599) + x602))
    result[1, 2, 0] = numpy.sum(x281 * (x0 * x636 + x0 * (x0 * x1164 + x636) + x642))
    result[1, 2, 1] = numpy.sum(x1140 * (x0 * x650 + x0 * (x0 * x1168 + x650) + x654))
    result[1, 2, 2] = numpy.sum(x1140 * (x0 * x662 + x0 * (x0 * x1172 + x662) + x666))
    result[1, 2, 3] = numpy.sum(x1140 * (x0 * x670 + x0 * (x0 * x1176 + x670) + x674))
    result[1, 2, 4] = numpy.sum(x1151 * (x0 * x678 + x0 * (x0 * x1180 + x678) + x682))
    result[1, 2, 5] = numpy.sum(x1140 * (x0 * x687 + x0 * (x0 * x1184 + x687) + x691))
    result[1, 2, 6] = numpy.sum(x281 * (x0 * x693 + x0 * (x0 * x1186 + x693) + x696))
    result[1, 2, 7] = numpy.sum(x1140 * (x0 * x699 + x0 * (x0 * x1188 + x699) + x702))
    result[1, 2, 8] = numpy.sum(x1140 * (x0 * x704 + x0 * (x0 * x1190 + x704) + x707))
    result[1, 2, 9] = numpy.sum(x281 * (x0 * x709 + x0 * (x0 * x1192 + x709) + x712))
    result[1, 3, 0] = numpy.sum(x281 * (x0 * x1196 + x851))
    result[1, 3, 1] = numpy.sum(x1140 * (x0 * x1203 + x863))
    result[1, 3, 2] = numpy.sum(x1140 * (x0 * x1208 + x867))
    result[1, 3, 3] = numpy.sum(x1140 * (x0 * x1212 + x872))
    result[1, 3, 4] = numpy.sum(x1151 * (x0 * x1216 + x877))
    result[1, 3, 5] = numpy.sum(x1140 * (x0 * x1219 + x880))
    result[1, 3, 6] = numpy.sum(x281 * (x0 * x1222 + x883))
    result[1, 3, 7] = numpy.sum(x1140 * (x0 * x1225 + x886))
    result[1, 3, 8] = numpy.sum(x1140 * (x0 * x1228 + x889))
    result[1, 3, 9] = numpy.sum(x281 * (x0 * x1231 + x892))
    result[1, 4, 0] = numpy.sum(x313 * (x0 * x1235 + x917))
    result[1, 4, 1] = numpy.sum(x1151 * (x0 * x1241 + x927))
    result[1, 4, 2] = numpy.sum(x1151 * (x0 * x1246 + x936))
    result[1, 4, 3] = numpy.sum(x1151 * (x0 * x1250 + x942))
    result[1, 4, 4] = numpy.sum(x1255 * (x0 * x1254 + x950))
    result[1, 4, 5] = numpy.sum(x1151 * (x0 * x1260 + x956))
    result[1, 4, 6] = numpy.sum(x313 * (x0 * x1263 + x959))
    result[1, 4, 7] = numpy.sum(x1151 * (x0 * x1266 + x962))
    result[1, 4, 8] = numpy.sum(x1151 * (x0 * x1270 + x966))
    result[1, 4, 9] = numpy.sum(x313 * (x0 * x1273 + x969))
    result[1, 5, 0] = numpy.sum(x281 * (x0 * x1277 + x994))
    result[1, 5, 1] = numpy.sum(x1140 * (x0 * x1282 + x1002))
    result[1, 5, 2] = numpy.sum(x1140 * (x0 * x1287 + x1011))
    result[1, 5, 3] = numpy.sum(x1140 * (x0 * x1292 + x1016))
    result[1, 5, 4] = numpy.sum(x1151 * (x0 * x1297 + x1021))
    result[1, 5, 5] = numpy.sum(x1140 * (x0 * x1302 + x1027))
    result[1, 5, 6] = numpy.sum(x281 * (x0 * x1305 + x1030))
    result[1, 5, 7] = numpy.sum(x1140 * (x0 * x1308 + x1033))
    result[1, 5, 8] = numpy.sum(x1140 * (x0 * x1311 + x1036))
    result[1, 5, 9] = numpy.sum(x281 * (x0 * x1314 + x1039))
    result[1, 6, 0] = numpy.sum(x143 * (x1196 * x20 + x1331))
    result[1, 6, 1] = numpy.sum(x281 * (x1203 * x20 + x1343))
    result[1, 6, 2] = numpy.sum(x281 * (x1208 * x20 + x1347))
    result[1, 6, 3] = numpy.sum(x281 * (x1212 * x20 + x1351))
    result[1, 6, 4] = numpy.sum(x313 * (x1216 * x20 + x1355))
    result[1, 6, 5] = numpy.sum(x281 * (x1219 * x20 + x1357))
    result[1, 6, 6] = numpy.sum(x143 * (x1222 * x20 + x1359))
    result[1, 6, 7] = numpy.sum(x281 * (x1225 * x20 + x1361))
    result[1, 6, 8] = numpy.sum(x281 * (x1228 * x20 + x1363))
    result[1, 6, 9] = numpy.sum(x143 * (x1231 * x20 + x1365))
    result[1, 7, 0] = numpy.sum(x281 * (x1235 * x20 + x1380))
    result[1, 7, 1] = numpy.sum(x1140 * (x1241 * x20 + x1387))
    result[1, 7, 2] = numpy.sum(x1140 * (x1246 * x20 + x1395))
    result[1, 7, 3] = numpy.sum(x1140 * (x1250 * x20 + x1400))
    result[1, 7, 4] = numpy.sum(x1151 * (x1254 * x20 + x1405))
    result[1, 7, 5] = numpy.sum(x1140 * (x1260 * x20 + x1411))
    result[1, 7, 6] = numpy.sum(x281 * (x1263 * x20 + x1414))
    result[1, 7, 7] = numpy.sum(x1140 * (x1266 * x20 + x1417))
    result[1, 7, 8] = numpy.sum(x1140 * (x1270 * x20 + x1420))
    result[1, 7, 9] = numpy.sum(x281 * (x1273 * x20 + x1423))
    result[1, 8, 0] = numpy.sum(x281 * (x1277 * x20 + x1437))
    result[1, 8, 1] = numpy.sum(x1140 * (x1282 * x20 + x1444))
    result[1, 8, 2] = numpy.sum(x1140 * (x1287 * x20 + x1451))
    result[1, 8, 3] = numpy.sum(x1140 * (x1292 * x20 + x1456))
    result[1, 8, 4] = numpy.sum(x1151 * (x1297 * x20 + x1461))
    result[1, 8, 5] = numpy.sum(x1140 * (x1302 * x20 + x1466))
    result[1, 8, 6] = numpy.sum(x281 * (x1305 * x20 + x1469))
    result[1, 8, 7] = numpy.sum(x1140 * (x1308 * x20 + x1472))
    result[1, 8, 8] = numpy.sum(x1140 * (x1311 * x20 + x1475))
    result[1, 8, 9] = numpy.sum(x281 * (x1314 * x20 + x1478))
    result[1, 9, 0] = numpy.sum(x143 * (x1277 * x21 + x1493))
    result[1, 9, 1] = numpy.sum(x281 * (x1282 * x21 + x1501))
    result[1, 9, 2] = numpy.sum(x281 * (x1287 * x21 + x1509))
    result[1, 9, 3] = numpy.sum(x281 * (x1292 * x21 + x1515))
    result[1, 9, 4] = numpy.sum(x313 * (x1297 * x21 + x1521))
    result[1, 9, 5] = numpy.sum(x281 * (x1302 * x21 + x1527))
    result[1, 9, 6] = numpy.sum(x143 * (x1305 * x21 + x1530))
    result[1, 9, 7] = numpy.sum(x281 * (x1308 * x21 + x1533))
    result[1, 9, 8] = numpy.sum(x281 * (x1311 * x21 + x1536))
    result[1, 9, 9] = numpy.sum(x143 * (x1314 * x21 + x1539))
    result[2, 0, 0] = numpy.sum(
        x143 * (x0 * x1540 + x0 * x400 + x0 * (x0 * (x118 * x1541 + x406) + x1540) + x416)
    )
    result[2, 0, 1] = numpy.sum(
        x281 * (x0 * x1542 + x0 * x419 + x0 * (x0 * (x118 * x1544 + x422) + x1542) + x424)
    )
    result[2, 0, 2] = numpy.sum(
        x281 * (x0 * x1545 + x0 * x430 + x0 * (x0 * (x118 * x1548 + x435) + x1545) + x438)
    )
    result[2, 0, 3] = numpy.sum(
        x281 * (x0 * x1549 + x0 * x439 + x0 * (x0 * (x118 * x1550 + x441) + x1549) + x443)
    )
    result[2, 0, 4] = numpy.sum(
        x313 * (x0 * x1551 + x0 * x446 + x0 * (x0 * (x118 * x1553 + x449) + x1551) + x451)
    )
    result[2, 0, 5] = numpy.sum(
        x281 * (x0 * x1554 + x0 * x454 + x0 * (x0 * (x118 * x1557 + x457) + x1554) + x460)
    )
    result[2, 0, 6] = numpy.sum(
        x143 * (x0 * x1558 + x0 * x461 + x0 * (x0 * (x0 * x1559 + x463) + x1558) + x466)
    )
    result[2, 0, 7] = numpy.sum(
        x281 * (x0 * x1560 + x0 * x467 + x0 * (x0 * (x0 * x1561 + x469) + x1560) + x471)
    )
    result[2, 0, 8] = numpy.sum(
        x281 * (x0 * x1562 + x0 * x472 + x0 * (x0 * (x0 * x1563 + x474) + x1562) + x476)
    )
    result[2, 0, 9] = numpy.sum(
        x143 * (x0 * x1564 + x0 * x477 + x0 * (x0 * (x118 * x1565 + x479) + x1564) + x481)
    )
    result[2, 1, 0] = numpy.sum(
        x281 * (x0 * x1566 + x0 * (x0 * x1567 + x1566) + x20 * x400 + x641)
    )
    result[2, 1, 1] = numpy.sum(
        x1140 * (x0 * x1568 + x0 * (x0 * x1569 + x1568) + x20 * x419 + x653)
    )
    result[2, 1, 2] = numpy.sum(
        x1140 * (x0 * x1570 + x0 * (x0 * x1571 + x1570) + x20 * x430 + x665)
    )
    result[2, 1, 3] = numpy.sum(
        x1140 * (x0 * x1572 + x0 * (x0 * x1573 + x1572) + x20 * x439 + x673)
    )
    result[2, 1, 4] = numpy.sum(
        x1151 * (x0 * x1574 + x0 * (x0 * x1575 + x1574) + x20 * x446 + x681)
    )
    result[2, 1, 5] = numpy.sum(
        x1140 * (x0 * x1576 + x0 * (x0 * x1577 + x1576) + x20 * x454 + x690)
    )
    result[2, 1, 6] = numpy.sum(
        x281 * (x0 * x1578 + x0 * (x0 * x1579 + x1578) + x20 * x461 + x695)
    )
    result[2, 1, 7] = numpy.sum(
        x1140 * (x0 * x1580 + x0 * (x0 * x1581 + x1580) + x20 * x467 + x701)
    )
    result[2, 1, 8] = numpy.sum(
        x1140 * (x0 * x1582 + x0 * (x0 * x1583 + x1582) + x20 * x472 + x706)
    )
    result[2, 1, 9] = numpy.sum(
        x281 * (x0 * x1584 + x0 * (x0 * x1585 + x1584) + x20 * x477 + x711)
    )
    result[2, 2, 0] = numpy.sum(x281 * (x0 * x752 + x0 * (x0 * x1588 + x752) + x763))
    result[2, 2, 1] = numpy.sum(x1140 * (x0 * x767 + x0 * (x0 * x1592 + x767) + x770))
    result[2, 2, 2] = numpy.sum(x1140 * (x0 * x778 + x0 * (x0 * x1597 + x778) + x782))
    result[2, 2, 3] = numpy.sum(x1140 * (x0 * x784 + x0 * (x0 * x1599 + x784) + x787))
    result[2, 2, 4] = numpy.sum(x1151 * (x0 * x789 + x0 * (x0 * x1601 + x789) + x792))
    result[2, 2, 5] = numpy.sum(x1140 * (x0 * x797 + x0 * (x0 * x1604 + x797) + x801))
    result[2, 2, 6] = numpy.sum(x281 * (x0 * x803 + x0 * (x0 * x1606 + x803) + x806))
    result[2, 2, 7] = numpy.sum(x1140 * (x0 * x808 + x0 * (x0 * x1608 + x808) + x811))
    result[2, 2, 8] = numpy.sum(x1140 * (x0 * x813 + x0 * (x0 * x1610 + x813) + x816))
    result[2, 2, 9] = numpy.sum(x281 * (x0 * x818 + x0 * (x0 * x1612 + x818) + x821))
    result[2, 3, 0] = numpy.sum(x281 * (x0 * x1614 + x1566 * x20 + x1615))
    result[2, 3, 1] = numpy.sum(x1140 * (x0 * x1617 + x1568 * x20 + x1618))
    result[2, 3, 2] = numpy.sum(x1140 * (x0 * x1620 + x1570 * x20 + x1621))
    result[2, 3, 3] = numpy.sum(x1140 * (x0 * x1623 + x1572 * x20 + x1624))
    result[2, 3, 4] = numpy.sum(x1151 * (x0 * x1626 + x1574 * x20 + x1627))
    result[2, 3, 5] = numpy.sum(x1140 * (x0 * x1629 + x1576 * x20 + x1630))
    result[2, 3, 6] = numpy.sum(x281 * (x0 * x1632 + x1578 * x20 + x1633))
    result[2, 3, 7] = numpy.sum(x1140 * (x0 * x1635 + x1580 * x20 + x1636))
    result[2, 3, 8] = numpy.sum(x1140 * (x0 * x1638 + x1582 * x20 + x1639))
    result[2, 3, 9] = numpy.sum(x281 * (x0 * x1641 + x1584 * x20 + x1642))
    result[2, 4, 0] = numpy.sum(x313 * (x0 * x1643 + x20 * x752 + x993))
    result[2, 4, 1] = numpy.sum(x1151 * (x0 * x1644 + x1001 + x20 * x767))
    result[2, 4, 2] = numpy.sum(x1151 * (x0 * x1645 + x1010 + x20 * x778))
    result[2, 4, 3] = numpy.sum(x1151 * (x0 * x1646 + x1015 + x20 * x784))
    result[2, 4, 4] = numpy.sum(x1255 * (x0 * x1647 + x1020 + x20 * x789))
    result[2, 4, 5] = numpy.sum(x1151 * (x0 * x1648 + x1026 + x20 * x797))
    result[2, 4, 6] = numpy.sum(x313 * (x0 * x1649 + x1029 + x20 * x803))
    result[2, 4, 7] = numpy.sum(x1151 * (x0 * x1650 + x1032 + x20 * x808))
    result[2, 4, 8] = numpy.sum(x1151 * (x0 * x1651 + x1035 + x20 * x813))
    result[2, 4, 9] = numpy.sum(x313 * (x0 * x1652 + x1038 + x20 * x818))
    result[2, 5, 0] = numpy.sum(x281 * (x0 * x1656 + x1069))
    result[2, 5, 1] = numpy.sum(x1140 * (x0 * x1661 + x1073))
    result[2, 5, 2] = numpy.sum(x1140 * (x0 * x1667 + x1080))
    result[2, 5, 3] = numpy.sum(x1140 * (x0 * x1670 + x1083))
    result[2, 5, 4] = numpy.sum(x1151 * (x0 * x1673 + x1086))
    result[2, 5, 5] = numpy.sum(x1140 * (x0 * x1677 + x1091))
    result[2, 5, 6] = numpy.sum(x281 * (x0 * x1680 + x1094))
    result[2, 5, 7] = numpy.sum(x1140 * (x0 * x1683 + x1097))
    result[2, 5, 8] = numpy.sum(x1140 * (x0 * x1686 + x1100))
    result[2, 5, 9] = numpy.sum(x281 * (x0 * x1689 + x1103))
    result[2, 6, 0] = numpy.sum(x143 * (x1614 * x20 + x1691))
    result[2, 6, 1] = numpy.sum(x281 * (x1617 * x20 + x1693))
    result[2, 6, 2] = numpy.sum(x281 * (x1620 * x20 + x1695))
    result[2, 6, 3] = numpy.sum(x281 * (x1623 * x20 + x1697))
    result[2, 6, 4] = numpy.sum(x313 * (x1626 * x20 + x1699))
    result[2, 6, 5] = numpy.sum(x281 * (x1629 * x20 + x1701))
    result[2, 6, 6] = numpy.sum(x143 * (x1632 * x20 + x1703))
    result[2, 6, 7] = numpy.sum(x281 * (x1635 * x20 + x1705))
    result[2, 6, 8] = numpy.sum(x281 * (x1638 * x20 + x1707))
    result[2, 6, 9] = numpy.sum(x143 * (x1641 * x20 + x1709))
    result[2, 7, 0] = numpy.sum(x281 * (x1643 * x20 + x1710))
    result[2, 7, 1] = numpy.sum(x1140 * (x1644 * x20 + x1711))
    result[2, 7, 2] = numpy.sum(x1140 * (x1645 * x20 + x1712))
    result[2, 7, 3] = numpy.sum(x1140 * (x1646 * x20 + x1713))
    result[2, 7, 4] = numpy.sum(x1151 * (x1647 * x20 + x1714))
    result[2, 7, 5] = numpy.sum(x1140 * (x1648 * x20 + x1715))
    result[2, 7, 6] = numpy.sum(x281 * (x1649 * x20 + x1716))
    result[2, 7, 7] = numpy.sum(x1140 * (x1650 * x20 + x1717))
    result[2, 7, 8] = numpy.sum(x1140 * (x1651 * x20 + x1718))
    result[2, 7, 9] = numpy.sum(x281 * (x1652 * x20 + x1719))
    result[2, 8, 0] = numpy.sum(x281 * (x1493 + x1656 * x20))
    result[2, 8, 1] = numpy.sum(x1140 * (x1501 + x1661 * x20))
    result[2, 8, 2] = numpy.sum(x1140 * (x1509 + x1667 * x20))
    result[2, 8, 3] = numpy.sum(x1140 * (x1515 + x1670 * x20))
    result[2, 8, 4] = numpy.sum(x1151 * (x1521 + x1673 * x20))
    result[2, 8, 5] = numpy.sum(x1140 * (x1527 + x1677 * x20))
    result[2, 8, 6] = numpy.sum(x281 * (x1530 + x1680 * x20))
    result[2, 8, 7] = numpy.sum(x1140 * (x1533 + x1683 * x20))
    result[2, 8, 8] = numpy.sum(x1140 * (x1536 + x1686 * x20))
    result[2, 8, 9] = numpy.sum(x281 * (x1539 + x1689 * x20))
    result[2, 9, 0] = numpy.sum(x143 * (x1656 * x21 + x1736))
    result[2, 9, 1] = numpy.sum(x281 * (x1661 * x21 + x1740))
    result[2, 9, 2] = numpy.sum(x281 * (x1667 * x21 + x1747))
    result[2, 9, 3] = numpy.sum(x281 * (x1670 * x21 + x1749))
    result[2, 9, 4] = numpy.sum(x313 * (x1673 * x21 + x1751))
    result[2, 9, 5] = numpy.sum(x281 * (x1677 * x21 + x1755))
    result[2, 9, 6] = numpy.sum(x143 * (x1680 * x21 + x1757))
    result[2, 9, 7] = numpy.sum(x281 * (x1683 * x21 + x1759))
    result[2, 9, 8] = numpy.sum(x281 * (x1686 * x21 + x1761))
    result[2, 9, 9] = numpy.sum(x143 * (x1689 * x21 + x1763))
    result[3, 0, 0] = numpy.sum(
        x143
        * (x0 * x1764 + x0 * x520 + x0 * (x0 * (x1132 + x118 * x1766) + x1764) + x530)
    )
    result[3, 0, 1] = numpy.sum(
        x281
        * (x0 * x1767 + x0 * x543 + x0 * (x0 * (x1138 + x118 * x1770) + x1767) + x549)
    )
    result[3, 0, 2] = numpy.sum(
        x281
        * (x0 * x1771 + x0 * x554 + x0 * (x0 * (x1143 + x118 * x1773) + x1771) + x557)
    )
    result[3, 0, 3] = numpy.sum(
        x281
        * (x0 * x1774 + x0 * x562 + x0 * (x0 * (x1146 + x118 * x1776) + x1774) + x566)
    )
    result[3, 0, 4] = numpy.sum(
        x313
        * (x0 * x1777 + x0 * x571 + x0 * (x0 * (x1149 + x118 * x1779) + x1777) + x575)
    )
    result[3, 0, 5] = numpy.sum(
        x281
        * (x0 * x1780 + x0 * x578 + x0 * (x0 * (x1152 + x118 * x1782) + x1780) + x581)
    )
    result[3, 0, 6] = numpy.sum(
        x143
        * (x0 * x1783 + x0 * x583 + x0 * (x0 * (x1154 + x118 * x1784) + x1783) + x586)
    )
    result[3, 0, 7] = numpy.sum(
        x281
        * (x0 * x1785 + x0 * x588 + x0 * (x0 * (x1156 + x118 * x1786) + x1785) + x591)
    )
    result[3, 0, 8] = numpy.sum(
        x281
        * (x0 * x1787 + x0 * x593 + x0 * (x0 * (x1158 + x118 * x1788) + x1787) + x596)
    )
    result[3, 0, 9] = numpy.sum(
        x143 * (x0 * x1789 + x0 * x598 + x0 * (x0 * (x0 * x1790 + x1160) + x1789) + x601)
    )
    result[3, 1, 0] = numpy.sum(x281 * (x0 * x1195 + x0 * (x0 * x1792 + x1195) + x850))
    result[3, 1, 1] = numpy.sum(x1140 * (x0 * x1202 + x0 * (x0 * x1794 + x1202) + x862))
    result[3, 1, 2] = numpy.sum(x1140 * (x0 * x1207 + x0 * (x0 * x1796 + x1207) + x866))
    result[3, 1, 3] = numpy.sum(x1140 * (x0 * x1211 + x0 * (x0 * x1799 + x1211) + x871))
    result[3, 1, 4] = numpy.sum(x1151 * (x0 * x1215 + x0 * (x0 * x1802 + x1215) + x876))
    result[3, 1, 5] = numpy.sum(x1140 * (x0 * x1218 + x0 * (x0 * x1805 + x1218) + x879))
    result[3, 1, 6] = numpy.sum(x281 * (x0 * x1221 + x0 * (x0 * x1807 + x1221) + x882))
    result[3, 1, 7] = numpy.sum(x1140 * (x0 * x1224 + x0 * (x0 * x1809 + x1224) + x885))
    result[3, 1, 8] = numpy.sum(x1140 * (x0 * x1227 + x0 * (x0 * x1811 + x1227) + x888))
    result[3, 1, 9] = numpy.sum(x281 * (x0 * x1230 + x0 * (x0 * x1813 + x1230) + x891))
    result[3, 2, 0] = numpy.sum(x281 * (x0 * x1234 + x0 * (x0 * x1815 + x1234) + x916))
    result[3, 2, 1] = numpy.sum(x1140 * (x0 * x1240 + x0 * (x0 * x1817 + x1240) + x926))
    result[3, 2, 2] = numpy.sum(x1140 * (x0 * x1245 + x0 * (x0 * x1819 + x1245) + x935))
    result[3, 2, 3] = numpy.sum(x1140 * (x0 * x1249 + x0 * (x0 * x1822 + x1249) + x941))
    result[3, 2, 4] = numpy.sum(x1151 * (x0 * x1253 + x0 * (x0 * x1826 + x1253) + x949))
    result[3, 2, 5] = numpy.sum(x1140 * (x0 * x1259 + x0 * (x0 * x1829 + x1259) + x955))
    result[3, 2, 6] = numpy.sum(x281 * (x0 * x1262 + x0 * (x0 * x1831 + x1262) + x958))
    result[3, 2, 7] = numpy.sum(x1140 * (x0 * x1265 + x0 * (x0 * x1833 + x1265) + x961))
    result[3, 2, 8] = numpy.sum(x1140 * (x0 * x1269 + x0 * (x0 * x1835 + x1269) + x965))
    result[3, 2, 9] = numpy.sum(x281 * (x0 * x1272 + x0 * (x0 * x1837 + x1272) + x968))
    result[3, 3, 0] = numpy.sum(x281 * (x0 * x1840 + x1331))
    result[3, 3, 1] = numpy.sum(x1140 * (x0 * x1843 + x1343))
    result[3, 3, 2] = numpy.sum(x1140 * (x0 * x1846 + x1347))
    result[3, 3, 3] = numpy.sum(x1140 * (x0 * x1850 + x1351))
    result[3, 3, 4] = numpy.sum(x1151 * (x0 * x1854 + x1355))
    result[3, 3, 5] = numpy.sum(x1140 * (x0 * x1858 + x1357))
    result[3, 3, 6] = numpy.sum(x281 * (x0 * x1861 + x1359))
    result[3, 3, 7] = numpy.sum(x1140 * (x0 * x1864 + x1361))
    result[3, 3, 8] = numpy.sum(x1140 * (x0 * x1867 + x1363))
    result[3, 3, 9] = numpy.sum(x281 * (x0 * x1870 + x1365))
    result[3, 4, 0] = numpy.sum(x313 * (x0 * x1873 + x1380))
    result[3, 4, 1] = numpy.sum(x1151 * (x0 * x1876 + x1387))
    result[3, 4, 2] = numpy.sum(x1151 * (x0 * x1879 + x1395))
    result[3, 4, 3] = numpy.sum(x1151 * (x0 * x1883 + x1400))
    result[3, 4, 4] = numpy.sum(x1255 * (x0 * x1887 + x1405))
    result[3, 4, 5] = numpy.sum(x1151 * (x0 * x1891 + x1411))
    result[3, 4, 6] = numpy.sum(x313 * (x0 * x1894 + x1414))
    result[3, 4, 7] = numpy.sum(x1151 * (x0 * x1897 + x1417))
    result[3, 4, 8] = numpy.sum(x1151 * (x0 * x1900 + x1420))
    result[3, 4, 9] = numpy.sum(x313 * (x0 * x1903 + x1423))
    result[3, 5, 0] = numpy.sum(x281 * (x0 * x1906 + x1437))
    result[3, 5, 1] = numpy.sum(x1140 * (x0 * x1909 + x1444))
    result[3, 5, 2] = numpy.sum(x1140 * (x0 * x1912 + x1451))
    result[3, 5, 3] = numpy.sum(x1140 * (x0 * x1916 + x1456))
    result[3, 5, 4] = numpy.sum(x1151 * (x0 * x1920 + x1461))
    result[3, 5, 5] = numpy.sum(x1140 * (x0 * x1924 + x1466))
    result[3, 5, 6] = numpy.sum(x281 * (x0 * x1927 + x1469))
    result[3, 5, 7] = numpy.sum(x1140 * (x0 * x1930 + x1472))
    result[3, 5, 8] = numpy.sum(x1140 * (x0 * x1933 + x1475))
    result[3, 5, 9] = numpy.sum(x281 * (x0 * x1936 + x1478))
    result[3, 6, 0] = numpy.sum(x143 * (x1840 * x20 + x1942))
    result[3, 6, 1] = numpy.sum(x281 * (x1843 * x20 + x1950))
    result[3, 6, 2] = numpy.sum(x281 * (x1846 * x20 + x1952))
    result[3, 6, 3] = numpy.sum(x281 * (x1850 * x20 + x1956))
    result[3, 6, 4] = numpy.sum(x313 * (x1854 * x20 + x1960))
    result[3, 6, 5] = numpy.sum(x281 * (x1858 * x20 + x1962))
    result[3, 6, 6] = numpy.sum(x143 * (x1861 * x20 + x1963))
    result[3, 6, 7] = numpy.sum(x281 * (x1864 * x20 + x1964))
    result[3, 6, 8] = numpy.sum(x281 * (x1867 * x20 + x1965))
    result[3, 6, 9] = numpy.sum(x143 * (x1870 * x20 + x1966))
    result[3, 7, 0] = numpy.sum(x281 * (x1873 * x20 + x1972))
    result[3, 7, 1] = numpy.sum(x1140 * (x1876 * x20 + x1976))
    result[3, 7, 2] = numpy.sum(x1140 * (x1879 * x20 + x1980))
    result[3, 7, 3] = numpy.sum(x1140 * (x1883 * x20 + x1984))
    result[3, 7, 4] = numpy.sum(x1151 * (x1887 * x20 + x1988))
    result[3, 7, 5] = numpy.sum(x1140 * (x1891 * x20 + x1992))
    result[3, 7, 6] = numpy.sum(x281 * (x1894 * x20 + x1994))
    result[3, 7, 7] = numpy.sum(x1140 * (x1897 * x20 + x1996))
    result[3, 7, 8] = numpy.sum(x1140 * (x1900 * x20 + x1998))
    result[3, 7, 9] = numpy.sum(x281 * (x1903 * x20 + x2000))
    result[3, 8, 0] = numpy.sum(x281 * (x1906 * x20 + x2007))
    result[3, 8, 1] = numpy.sum(x1140 * (x1909 * x20 + x2014))
    result[3, 8, 2] = numpy.sum(x1140 * (x1912 * x20 + x2019))
    result[3, 8, 3] = numpy.sum(x1140 * (x1916 * x20 + x2024))
    result[3, 8, 4] = numpy.sum(x1151 * (x1920 * x20 + x2031))
    result[3, 8, 5] = numpy.sum(x1140 * (x1924 * x20 + x2036))
    result[3, 8, 6] = numpy.sum(x281 * (x1927 * x20 + x2039))
    result[3, 8, 7] = numpy.sum(x1140 * (x1930 * x20 + x2042))
    result[3, 8, 8] = numpy.sum(x1140 * (x1933 * x20 + x2046))
    result[3, 8, 9] = numpy.sum(x281 * (x1936 * x20 + x2049))
    result[3, 9, 0] = numpy.sum(x143 * (x1906 * x21 + x2056))
    result[3, 9, 1] = numpy.sum(x281 * (x1909 * x21 + x2061))
    result[3, 9, 2] = numpy.sum(x281 * (x1912 * x21 + x2066))
    result[3, 9, 3] = numpy.sum(x281 * (x1916 * x21 + x2071))
    result[3, 9, 4] = numpy.sum(x313 * (x1920 * x21 + x2076))
    result[3, 9, 5] = numpy.sum(x281 * (x1924 * x21 + x2081))
    result[3, 9, 6] = numpy.sum(x143 * (x1927 * x21 + x2084))
    result[3, 9, 7] = numpy.sum(x281 * (x1930 * x21 + x2087))
    result[3, 9, 8] = numpy.sum(x281 * (x1933 * x21 + x2090))
    result[3, 9, 9] = numpy.sum(x143 * (x1936 * x21 + x2093))
    result[4, 0, 0] = numpy.sum(
        x164
        * (x0 * x2094 + x0 * x635 + x0 * (x0 * (x1163 + x118 * x2095) + x2094) + x641)
    )
    result[4, 0, 1] = numpy.sum(
        x313
        * (x0 * x2096 + x0 * x649 + x0 * (x0 * (x1167 + x118 * x2097) + x2096) + x653)
    )
    result[4, 0, 2] = numpy.sum(
        x313
        * (x0 * x2098 + x0 * x661 + x0 * (x0 * (x1171 + x118 * x2099) + x2098) + x665)
    )
    result[4, 0, 3] = numpy.sum(
        x313
        * (x0 * x2100 + x0 * x669 + x0 * (x0 * (x1175 + x118 * x2102) + x2100) + x673)
    )
    result[4, 0, 4] = numpy.sum(
        x683
        * (x0 * x2103 + x0 * x677 + x0 * (x0 * (x1179 + x118 * x2105) + x2103) + x681)
    )
    result[4, 0, 5] = numpy.sum(
        x313
        * (x0 * x2106 + x0 * x686 + x0 * (x0 * (x118 * x2108 + x1183) + x2106) + x690)
    )
    result[4, 0, 6] = numpy.sum(
        x164
        * (x0 * x2109 + x0 * x692 + x0 * (x0 * (x118 * x2110 + x1185) + x2109) + x695)
    )
    result[4, 0, 7] = numpy.sum(
        x313
        * (x0 * x2111 + x0 * x698 + x0 * (x0 * (x118 * x2112 + x1187) + x2111) + x701)
    )
    result[4, 0, 8] = numpy.sum(
        x313
        * (x0 * x2113 + x0 * x703 + x0 * (x0 * (x118 * x2114 + x1189) + x2113) + x706)
    )
    result[4, 0, 9] = numpy.sum(
        x164
        * (x0 * x2115 + x0 * x708 + x0 * (x0 * (x118 * x2116 + x1191) + x2115) + x711)
    )
    result[4, 1, 0] = numpy.sum(x313 * (x0 * x1613 + x0 * (x0 * x2117 + x1613) + x1615))
    result[4, 1, 1] = numpy.sum(x1151 * (x0 * x1616 + x0 * (x0 * x2118 + x1616) + x1618))
    result[4, 1, 2] = numpy.sum(x1151 * (x0 * x1619 + x0 * (x0 * x2119 + x1619) + x1621))
    result[4, 1, 3] = numpy.sum(x1151 * (x0 * x1622 + x0 * (x0 * x2120 + x1622) + x1624))
    result[4, 1, 4] = numpy.sum(x1255 * (x0 * x1625 + x0 * (x0 * x2121 + x1625) + x1627))
    result[4, 1, 5] = numpy.sum(x1151 * (x0 * x1628 + x0 * (x0 * x2122 + x1628) + x1630))
    result[4, 1, 6] = numpy.sum(x313 * (x0 * x1631 + x0 * (x0 * x2123 + x1631) + x1633))
    result[4, 1, 7] = numpy.sum(x1151 * (x0 * x1634 + x0 * (x0 * x2124 + x1634) + x1636))
    result[4, 1, 8] = numpy.sum(x1151 * (x0 * x1637 + x0 * (x0 * x2125 + x1637) + x1639))
    result[4, 1, 9] = numpy.sum(x313 * (x0 * x1640 + x0 * (x0 * x2126 + x1640) + x1642))
    result[4, 2, 0] = numpy.sum(x313 * (x0 * x1276 + x0 * (x0 * x2128 + x1276) + x993))
    result[4, 2, 1] = numpy.sum(x1151 * (x0 * x1281 + x0 * (x0 * x2130 + x1281) + x1001))
    result[4, 2, 2] = numpy.sum(x1151 * (x0 * x1286 + x0 * (x0 * x2132 + x1286) + x1010))
    result[4, 2, 3] = numpy.sum(x1151 * (x0 * x1291 + x0 * (x0 * x2135 + x1291) + x1015))
    result[4, 2, 4] = numpy.sum(x1255 * (x0 * x1296 + x0 * (x0 * x2138 + x1296) + x1020))
    result[4, 2, 5] = numpy.sum(x1151 * (x0 * x1301 + x0 * (x0 * x2141 + x1301) + x1026))
    result[4, 2, 6] = numpy.sum(x313 * (x0 * x1304 + x0 * (x0 * x2143 + x1304) + x1029))
    result[4, 2, 7] = numpy.sum(x1151 * (x0 * x1307 + x0 * (x0 * x2145 + x1307) + x1032))
    result[4, 2, 8] = numpy.sum(x1151 * (x0 * x1310 + x0 * (x0 * x2147 + x1310) + x1035))
    result[4, 2, 9] = numpy.sum(x313 * (x0 * x1313 + x0 * (x0 * x2149 + x1313) + x1038))
    result[4, 3, 0] = numpy.sum(x313 * (x0 * x2151 + x1691))
    result[4, 3, 1] = numpy.sum(x1151 * (x0 * x2153 + x1693))
    result[4, 3, 2] = numpy.sum(x1151 * (x0 * x2155 + x1695))
    result[4, 3, 3] = numpy.sum(x1151 * (x0 * x2157 + x1697))
    result[4, 3, 4] = numpy.sum(x1255 * (x0 * x2159 + x1699))
    result[4, 3, 5] = numpy.sum(x1151 * (x0 * x2161 + x1701))
    result[4, 3, 6] = numpy.sum(x313 * (x0 * x2163 + x1703))
    result[4, 3, 7] = numpy.sum(x1151 * (x0 * x2165 + x1705))
    result[4, 3, 8] = numpy.sum(x1151 * (x0 * x2167 + x1707))
    result[4, 3, 9] = numpy.sum(x313 * (x0 * x2169 + x1709))
    result[4, 4, 0] = numpy.sum(x683 * (x0 * x2170 + x1710))
    result[4, 4, 1] = numpy.sum(x1255 * (x0 * x2171 + x1711))
    result[4, 4, 2] = numpy.sum(x1255 * (x0 * x2172 + x1712))
    result[4, 4, 3] = numpy.sum(x1255 * (x0 * x2173 + x1713))
    result[4, 4, 4] = numpy.sum(x130 * (x0 * x2174 + x1714))
    result[4, 4, 5] = numpy.sum(x1255 * (x0 * x2175 + x1715))
    result[4, 4, 6] = numpy.sum(x683 * (x0 * x2176 + x1716))
    result[4, 4, 7] = numpy.sum(x1255 * (x0 * x2177 + x1717))
    result[4, 4, 8] = numpy.sum(x1255 * (x0 * x2178 + x1718))
    result[4, 4, 9] = numpy.sum(x683 * (x0 * x2179 + x1719))
    result[4, 5, 0] = numpy.sum(x313 * (x0 * x2182 + x1493))
    result[4, 5, 1] = numpy.sum(x1151 * (x0 * x2185 + x1501))
    result[4, 5, 2] = numpy.sum(x1151 * (x0 * x2188 + x1509))
    result[4, 5, 3] = numpy.sum(x1151 * (x0 * x2192 + x1515))
    result[4, 5, 4] = numpy.sum(x1255 * (x0 * x2196 + x1521))
    result[4, 5, 5] = numpy.sum(x1151 * (x0 * x2200 + x1527))
    result[4, 5, 6] = numpy.sum(x313 * (x0 * x2203 + x1530))
    result[4, 5, 7] = numpy.sum(x1151 * (x0 * x2206 + x1533))
    result[4, 5, 8] = numpy.sum(x1151 * (x0 * x2209 + x1536))
    result[4, 5, 9] = numpy.sum(x313 * (x0 * x2212 + x1539))
    result[4, 6, 0] = numpy.sum(x164 * (x20 * x2151 + x2213))
    result[4, 6, 1] = numpy.sum(x313 * (x20 * x2153 + x2214))
    result[4, 6, 2] = numpy.sum(x313 * (x20 * x2155 + x2215))
    result[4, 6, 3] = numpy.sum(x313 * (x20 * x2157 + x2216))
    result[4, 6, 4] = numpy.sum(x683 * (x20 * x2159 + x2217))
    result[4, 6, 5] = numpy.sum(x313 * (x20 * x2161 + x2218))
    result[4, 6, 6] = numpy.sum(x164 * (x20 * x2163 + x2219))
    result[4, 6, 7] = numpy.sum(x313 * (x20 * x2165 + x2220))
    result[4, 6, 8] = numpy.sum(x313 * (x20 * x2167 + x2221))
    result[4, 6, 9] = numpy.sum(x164 * (x20 * x2169 + x2222))
    result[4, 7, 0] = numpy.sum(x313 * (x20 * x2170 + x2223))
    result[4, 7, 1] = numpy.sum(x1151 * (x20 * x2171 + x2224))
    result[4, 7, 2] = numpy.sum(x1151 * (x20 * x2172 + x2225))
    result[4, 7, 3] = numpy.sum(x1151 * (x20 * x2173 + x2226))
    result[4, 7, 4] = numpy.sum(x1255 * (x20 * x2174 + x2227))
    result[4, 7, 5] = numpy.sum(x1151 * (x20 * x2175 + x2228))
    result[4, 7, 6] = numpy.sum(x313 * (x20 * x2176 + x2229))
    result[4, 7, 7] = numpy.sum(x1151 * (x20 * x2177 + x2230))
    result[4, 7, 8] = numpy.sum(x1151 * (x20 * x2178 + x2231))
    result[4, 7, 9] = numpy.sum(x313 * (x20 * x2179 + x2232))
    result[4, 8, 0] = numpy.sum(x313 * (x20 * x2182 + x2056))
    result[4, 8, 1] = numpy.sum(x1151 * (x20 * x2185 + x2061))
    result[4, 8, 2] = numpy.sum(x1151 * (x20 * x2188 + x2066))
    result[4, 8, 3] = numpy.sum(x1151 * (x20 * x2192 + x2071))
    result[4, 8, 4] = numpy.sum(x1255 * (x20 * x2196 + x2076))
    result[4, 8, 5] = numpy.sum(x1151 * (x20 * x2200 + x2081))
    result[4, 8, 6] = numpy.sum(x313 * (x20 * x2203 + x2084))
    result[4, 8, 7] = numpy.sum(x1151 * (x20 * x2206 + x2087))
    result[4, 8, 8] = numpy.sum(x1151 * (x20 * x2209 + x2090))
    result[4, 8, 9] = numpy.sum(x313 * (x20 * x2212 + x2093))
    result[4, 9, 0] = numpy.sum(x164 * (x21 * x2182 + x2238))
    result[4, 9, 1] = numpy.sum(x313 * (x21 * x2185 + x2242))
    result[4, 9, 2] = numpy.sum(x313 * (x21 * x2188 + x2246))
    result[4, 9, 3] = numpy.sum(x313 * (x21 * x2192 + x2250))
    result[4, 9, 4] = numpy.sum(x683 * (x21 * x2196 + x2254))
    result[4, 9, 5] = numpy.sum(x313 * (x21 * x2200 + x2258))
    result[4, 9, 6] = numpy.sum(x164 * (x21 * x2203 + x2260))
    result[4, 9, 7] = numpy.sum(x313 * (x21 * x2206 + x2262))
    result[4, 9, 8] = numpy.sum(x313 * (x21 * x2209 + x2264))
    result[4, 9, 9] = numpy.sum(x164 * (x21 * x2212 + x2266))
    result[5, 0, 0] = numpy.sum(
        x143
        * (x0 * x2267 + x0 * x751 + x0 * (x0 * (x118 * x2268 + x1587) + x2267) + x762)
    )
    result[5, 0, 1] = numpy.sum(
        x281
        * (x0 * x2269 + x0 * x766 + x0 * (x0 * (x118 * x2270 + x1591) + x2269) + x769)
    )
    result[5, 0, 2] = numpy.sum(
        x281
        * (x0 * x2271 + x0 * x777 + x0 * (x0 * (x118 * x2272 + x1596) + x2271) + x781)
    )
    result[5, 0, 3] = numpy.sum(
        x281
        * (x0 * x2273 + x0 * x783 + x0 * (x0 * (x118 * x2275 + x1598) + x2273) + x786)
    )
    result[5, 0, 4] = numpy.sum(
        x313
        * (x0 * x2276 + x0 * x788 + x0 * (x0 * (x118 * x2278 + x1600) + x2276) + x791)
    )
    result[5, 0, 5] = numpy.sum(
        x281
        * (x0 * x2279 + x0 * x796 + x0 * (x0 * (x118 * x2282 + x1603) + x2279) + x800)
    )
    result[5, 0, 6] = numpy.sum(
        x143 * (x0 * x2283 + x0 * x802 + x0 * (x0 * (x0 * x2284 + x1605) + x2283) + x805)
    )
    result[5, 0, 7] = numpy.sum(
        x281 * (x0 * x2285 + x0 * x807 + x0 * (x0 * (x0 * x2286 + x1607) + x2285) + x810)
    )
    result[5, 0, 8] = numpy.sum(
        x281 * (x0 * x2287 + x0 * x812 + x0 * (x0 * (x0 * x2288 + x1609) + x2287) + x815)
    )
    result[5, 0, 9] = numpy.sum(
        x143
        * (x0 * x2289 + x0 * x817 + x0 * (x0 * (x118 * x2290 + x1611) + x2289) + x820)
    )
    result[5, 1, 0] = numpy.sum(
        x281 * (x0 * x2291 + x0 * (x0 * x2292 + x2291) + x20 * x751 + x992)
    )
    result[5, 1, 1] = numpy.sum(
        x1140 * (x0 * x2293 + x0 * (x0 * x2294 + x2293) + x1000 + x20 * x766)
    )
    result[5, 1, 2] = numpy.sum(
        x1140 * (x0 * x2295 + x0 * (x0 * x2296 + x2295) + x1009 + x20 * x777)
    )
    result[5, 1, 3] = numpy.sum(
        x1140 * (x0 * x2297 + x0 * (x0 * x2298 + x2297) + x1014 + x20 * x783)
    )
    result[5, 1, 4] = numpy.sum(
        x1151 * (x0 * x2299 + x0 * (x0 * x2300 + x2299) + x1019 + x20 * x788)
    )
    result[5, 1, 5] = numpy.sum(
        x1140 * (x0 * x2301 + x0 * (x0 * x2302 + x2301) + x1025 + x20 * x796)
    )
    result[5, 1, 6] = numpy.sum(
        x281 * (x0 * x2303 + x0 * (x0 * x2304 + x2303) + x1028 + x20 * x802)
    )
    result[5, 1, 7] = numpy.sum(
        x1140 * (x0 * x2305 + x0 * (x0 * x2306 + x2305) + x1031 + x20 * x807)
    )
    result[5, 1, 8] = numpy.sum(
        x1140 * (x0 * x2307 + x0 * (x0 * x2308 + x2307) + x1034 + x20 * x812)
    )
    result[5, 1, 9] = numpy.sum(
        x281 * (x0 * x2309 + x0 * (x0 * x2310 + x2309) + x1037 + x20 * x817)
    )
    result[5, 2, 0] = numpy.sum(x281 * (x0 * x1655 + x0 * (x0 * x2312 + x1655) + x1068))
    result[5, 2, 1] = numpy.sum(x1140 * (x0 * x1660 + x0 * (x0 * x2314 + x1660) + x1072))
    result[5, 2, 2] = numpy.sum(x1140 * (x0 * x1666 + x0 * (x0 * x2316 + x1666) + x1079))
    result[5, 2, 3] = numpy.sum(x1140 * (x0 * x1669 + x0 * (x0 * x2319 + x1669) + x1082))
    result[5, 2, 4] = numpy.sum(x1151 * (x0 * x1672 + x0 * (x0 * x2322 + x1672) + x1085))
    result[5, 2, 5] = numpy.sum(x1140 * (x0 * x1676 + x0 * (x0 * x2326 + x1676) + x1090))
    result[5, 2, 6] = numpy.sum(x281 * (x0 * x1679 + x0 * (x0 * x2328 + x1679) + x1093))
    result[5, 2, 7] = numpy.sum(x1140 * (x0 * x1682 + x0 * (x0 * x2330 + x1682) + x1096))
    result[5, 2, 8] = numpy.sum(x1140 * (x0 * x1685 + x0 * (x0 * x2332 + x1685) + x1099))
    result[5, 2, 9] = numpy.sum(x281 * (x0 * x1688 + x0 * (x0 * x2334 + x1688) + x1102))
    result[5, 3, 0] = numpy.sum(x281 * (x0 * x2336 + x20 * x2291 + x2337))
    result[5, 3, 1] = numpy.sum(x1140 * (x0 * x2339 + x20 * x2293 + x2340))
    result[5, 3, 2] = numpy.sum(x1140 * (x0 * x2342 + x20 * x2295 + x2343))
    result[5, 3, 3] = numpy.sum(x1140 * (x0 * x2345 + x20 * x2297 + x2346))
    result[5, 3, 4] = numpy.sum(x1151 * (x0 * x2348 + x20 * x2299 + x2349))
    result[5, 3, 5] = numpy.sum(x1140 * (x0 * x2351 + x20 * x2301 + x2352))
    result[5, 3, 6] = numpy.sum(x281 * (x0 * x2354 + x20 * x2303 + x2355))
    result[5, 3, 7] = numpy.sum(x1140 * (x0 * x2357 + x20 * x2305 + x2358))
    result[5, 3, 8] = numpy.sum(x1140 * (x0 * x2360 + x20 * x2307 + x2361))
    result[5, 3, 9] = numpy.sum(x281 * (x0 * x2363 + x20 * x2309 + x2364))
    result[5, 4, 0] = numpy.sum(x313 * (x0 * x2365 + x1492 + x1655 * x20))
    result[5, 4, 1] = numpy.sum(x1151 * (x0 * x2366 + x1500 + x1660 * x20))
    result[5, 4, 2] = numpy.sum(x1151 * (x0 * x2367 + x1508 + x1666 * x20))
    result[5, 4, 3] = numpy.sum(x1151 * (x0 * x2368 + x1514 + x1669 * x20))
    result[5, 4, 4] = numpy.sum(x1255 * (x0 * x2369 + x1520 + x1672 * x20))
    result[5, 4, 5] = numpy.sum(x1151 * (x0 * x2370 + x1526 + x1676 * x20))
    result[5, 4, 6] = numpy.sum(x313 * (x0 * x2371 + x1529 + x1679 * x20))
    result[5, 4, 7] = numpy.sum(x1151 * (x0 * x2372 + x1532 + x1682 * x20))
    result[5, 4, 8] = numpy.sum(x1151 * (x0 * x2373 + x1535 + x1685 * x20))
    result[5, 4, 9] = numpy.sum(x313 * (x0 * x2374 + x1538 + x1688 * x20))
    result[5, 5, 0] = numpy.sum(x281 * (x0 * x2377 + x1736))
    result[5, 5, 1] = numpy.sum(x1140 * (x0 * x2380 + x1740))
    result[5, 5, 2] = numpy.sum(x1140 * (x0 * x2383 + x1747))
    result[5, 5, 3] = numpy.sum(x1140 * (x0 * x2387 + x1749))
    result[5, 5, 4] = numpy.sum(x1151 * (x0 * x2391 + x1751))
    result[5, 5, 5] = numpy.sum(x1140 * (x0 * x2396 + x1755))
    result[5, 5, 6] = numpy.sum(x281 * (x0 * x2399 + x1757))
    result[5, 5, 7] = numpy.sum(x1140 * (x0 * x2402 + x1759))
    result[5, 5, 8] = numpy.sum(x1140 * (x0 * x2405 + x1761))
    result[5, 5, 9] = numpy.sum(x281 * (x0 * x2408 + x1763))
    result[5, 6, 0] = numpy.sum(x143 * (x20 * x2336 + x2409))
    result[5, 6, 1] = numpy.sum(x281 * (x20 * x2339 + x2410))
    result[5, 6, 2] = numpy.sum(x281 * (x20 * x2342 + x2411))
    result[5, 6, 3] = numpy.sum(x281 * (x20 * x2345 + x2412))
    result[5, 6, 4] = numpy.sum(x313 * (x20 * x2348 + x2413))
    result[5, 6, 5] = numpy.sum(x281 * (x20 * x2351 + x2414))
    result[5, 6, 6] = numpy.sum(x143 * (x20 * x2354 + x2415))
    result[5, 6, 7] = numpy.sum(x281 * (x20 * x2357 + x2416))
    result[5, 6, 8] = numpy.sum(x281 * (x20 * x2360 + x2417))
    result[5, 6, 9] = numpy.sum(x143 * (x20 * x2363 + x2418))
    result[5, 7, 0] = numpy.sum(x281 * (x20 * x2365 + x2419))
    result[5, 7, 1] = numpy.sum(x1140 * (x20 * x2366 + x2420))
    result[5, 7, 2] = numpy.sum(x1140 * (x20 * x2367 + x2421))
    result[5, 7, 3] = numpy.sum(x1140 * (x20 * x2368 + x2422))
    result[5, 7, 4] = numpy.sum(x1151 * (x20 * x2369 + x2423))
    result[5, 7, 5] = numpy.sum(x1140 * (x20 * x2370 + x2424))
    result[5, 7, 6] = numpy.sum(x281 * (x20 * x2371 + x2425))
    result[5, 7, 7] = numpy.sum(x1140 * (x20 * x2372 + x2426))
    result[5, 7, 8] = numpy.sum(x1140 * (x20 * x2373 + x2427))
    result[5, 7, 9] = numpy.sum(x281 * (x20 * x2374 + x2428))
    result[5, 8, 0] = numpy.sum(x281 * (x20 * x2377 + x2238))
    result[5, 8, 1] = numpy.sum(x1140 * (x20 * x2380 + x2242))
    result[5, 8, 2] = numpy.sum(x1140 * (x20 * x2383 + x2246))
    result[5, 8, 3] = numpy.sum(x1140 * (x20 * x2387 + x2250))
    result[5, 8, 4] = numpy.sum(x1151 * (x20 * x2391 + x2254))
    result[5, 8, 5] = numpy.sum(x1140 * (x20 * x2396 + x2258))
    result[5, 8, 6] = numpy.sum(x281 * (x20 * x2399 + x2260))
    result[5, 8, 7] = numpy.sum(x1140 * (x20 * x2402 + x2262))
    result[5, 8, 8] = numpy.sum(x1140 * (x20 * x2405 + x2264))
    result[5, 8, 9] = numpy.sum(x281 * (x20 * x2408 + x2266))
    result[5, 9, 0] = numpy.sum(x143 * (x21 * x2377 + x2434))
    result[5, 9, 1] = numpy.sum(x281 * (x21 * x2380 + x2436))
    result[5, 9, 2] = numpy.sum(x281 * (x21 * x2383 + x2440))
    result[5, 9, 3] = numpy.sum(x281 * (x21 * x2387 + x2442))
    result[5, 9, 4] = numpy.sum(x313 * (x21 * x2391 + x2444))
    result[5, 9, 5] = numpy.sum(x281 * (x21 * x2396 + x2448))
    result[5, 9, 6] = numpy.sum(x143 * (x21 * x2399 + x2449))
    result[5, 9, 7] = numpy.sum(x281 * (x21 * x2402 + x2450))
    result[5, 9, 8] = numpy.sum(x281 * (x21 * x2405 + x2451))
    result[5, 9, 9] = numpy.sum(x143 * (x21 * x2408 + x2452))
    result[6, 0, 0] = numpy.sum(
        x132
        * (x0 * x1194 + x0 * x2453 + x0 * (x0 * (x1791 + x2454 * x2455) + x2453) + x849)
    )
    result[6, 0, 1] = numpy.sum(
        x143 * (x0 * x1201 + x0 * x2456 + x0 * (x0 * (x0 * x2458 + x1793) + x2456) + x861)
    )
    result[6, 0, 2] = numpy.sum(
        x143
        * (x0 * x1206 + x0 * x2459 + x0 * (x0 * (x1795 + x2455 * x2460) + x2459) + x865)
    )
    result[6, 0, 3] = numpy.sum(
        x143
        * (x0 * x1210 + x0 * x2461 + x0 * (x0 * (x1797 * x2462 + x1798) + x2461) + x870)
    )
    result[6, 0, 4] = numpy.sum(
        x164
        * (x0 * x1214 + x0 * x2463 + x0 * (x0 * (x1800 * x2462 + x1801) + x2463) + x875)
    )
    result[6, 0, 5] = numpy.sum(
        x143
        * (x0 * x1217 + x0 * x2464 + x0 * (x0 * (x1804 + x2455 * x2465) + x2464) + x878)
    )
    result[6, 0, 6] = numpy.sum(
        x132
        * (x0 * x1220 + x0 * x2466 + x0 * (x0 * (x118 * x2467 + x1806) + x2466) + x881)
    )
    result[6, 0, 7] = numpy.sum(
        x143
        * (x0 * x1223 + x0 * x2468 + x0 * (x0 * (x118 * x2469 + x1808) + x2468) + x884)
    )
    result[6, 0, 8] = numpy.sum(
        x143
        * (x0 * x1226 + x0 * x2470 + x0 * (x0 * (x118 * x2471 + x1810) + x2470) + x887)
    )
    result[6, 0, 9] = numpy.sum(
        x132
        * (x0 * x1229 + x0 * x2472 + x0 * (x0 * (x1812 + x186 * x2455) + x2472) + x890)
    )
    result[6, 1, 0] = numpy.sum(x143 * (x0 * x1839 + x0 * (x0 * x2475 + x1839) + x1330))
    result[6, 1, 1] = numpy.sum(x281 * (x0 * x1842 + x0 * (x0 * x2477 + x1842) + x1342))
    result[6, 1, 2] = numpy.sum(x281 * (x0 * x1845 + x0 * (x0 * x2479 + x1845) + x1346))
    result[6, 1, 3] = numpy.sum(x281 * (x0 * x1849 + x0 * (x0 * x2482 + x1849) + x1350))
    result[6, 1, 4] = numpy.sum(x313 * (x0 * x1853 + x0 * (x0 * x2484 + x1853) + x1354))
    result[6, 1, 5] = numpy.sum(x281 * (x0 * x1857 + x0 * (x0 * x2486 + x1857) + x1356))
    result[6, 1, 6] = numpy.sum(x143 * (x0 * x1860 + x0 * (x0 * x2488 + x1860) + x1358))
    result[6, 1, 7] = numpy.sum(x281 * (x0 * x1863 + x0 * (x0 * x2490 + x1863) + x1360))
    result[6, 1, 8] = numpy.sum(x281 * (x0 * x1866 + x0 * (x0 * x2492 + x1866) + x1362))
    result[6, 1, 9] = numpy.sum(x143 * (x0 * x1869 + x0 * (x0 * x2494 + x1869) + x1364))
    result[6, 2, 0] = numpy.sum(x143 * (x0 * x1872 + x0 * (x0 * x2497 + x1872) + x1379))
    result[6, 2, 1] = numpy.sum(x281 * (x0 * x1875 + x0 * (x0 * x2499 + x1875) + x1386))
    result[6, 2, 2] = numpy.sum(x281 * (x0 * x1878 + x0 * (x0 * x2501 + x1878) + x1394))
    result[6, 2, 3] = numpy.sum(x281 * (x0 * x1882 + x0 * (x0 * x2504 + x1882) + x1399))
    result[6, 2, 4] = numpy.sum(x313 * (x0 * x1886 + x0 * (x0 * x2506 + x1886) + x1404))
    result[6, 2, 5] = numpy.sum(x281 * (x0 * x1890 + x0 * (x0 * x2508 + x1890) + x1410))
    result[6, 2, 6] = numpy.sum(x143 * (x0 * x1893 + x0 * (x0 * x2510 + x1893) + x1413))
    result[6, 2, 7] = numpy.sum(x281 * (x0 * x1896 + x0 * (x0 * x2512 + x1896) + x1416))
    result[6, 2, 8] = numpy.sum(x281 * (x0 * x1899 + x0 * (x0 * x2514 + x1899) + x1419))
    result[6, 2, 9] = numpy.sum(x143 * (x0 * x1902 + x0 * (x0 * x2516 + x1902) + x1422))
    result[6, 3, 0] = numpy.sum(x143 * (x0 * x2519 + x1942))
    result[6, 3, 1] = numpy.sum(x281 * (x0 * x2522 + x1950))
    result[6, 3, 2] = numpy.sum(x281 * (x0 * x2525 + x1952))
    result[6, 3, 3] = numpy.sum(x281 * (x0 * x2528 + x1956))
    result[6, 3, 4] = numpy.sum(x313 * (x0 * x2531 + x1960))
    result[6, 3, 5] = numpy.sum(x281 * (x0 * x2534 + x1962))
    result[6, 3, 6] = numpy.sum(x143 * (x0 * x2537 + x1963))
    result[6, 3, 7] = numpy.sum(x281 * (x0 * x2540 + x1964))
    result[6, 3, 8] = numpy.sum(x281 * (x0 * x2543 + x1965))
    result[6, 3, 9] = numpy.sum(x143 * (x0 * x2546 + x1966))
    result[6, 4, 0] = numpy.sum(x164 * (x0 * x2549 + x1972))
    result[6, 4, 1] = numpy.sum(x313 * (x0 * x2552 + x1976))
    result[6, 4, 2] = numpy.sum(x313 * (x0 * x2555 + x1980))
    result[6, 4, 3] = numpy.sum(x313 * (x0 * x2558 + x1984))
    result[6, 4, 4] = numpy.sum(x683 * (x0 * x2561 + x1988))
    result[6, 4, 5] = numpy.sum(x313 * (x0 * x2564 + x1992))
    result[6, 4, 6] = numpy.sum(x164 * (x0 * x2567 + x1994))
    result[6, 4, 7] = numpy.sum(x313 * (x0 * x2570 + x1996))
    result[6, 4, 8] = numpy.sum(x313 * (x0 * x2573 + x1998))
    result[6, 4, 9] = numpy.sum(x164 * (x0 * x2576 + x2000))
    result[6, 5, 0] = numpy.sum(x143 * (x0 * x2579 + x2007))
    result[6, 5, 1] = numpy.sum(x281 * (x0 * x2582 + x2014))
    result[6, 5, 2] = numpy.sum(x281 * (x0 * x2585 + x2019))
    result[6, 5, 3] = numpy.sum(x281 * (x0 * x2588 + x2024))
    result[6, 5, 4] = numpy.sum(x313 * (x0 * x2591 + x2031))
    result[6, 5, 5] = numpy.sum(x281 * (x0 * x2594 + x2036))
    result[6, 5, 6] = numpy.sum(x143 * (x0 * x2597 + x2039))
    result[6, 5, 7] = numpy.sum(x281 * (x0 * x2600 + x2042))
    result[6, 5, 8] = numpy.sum(x281 * (x0 * x2604 + x2046))
    result[6, 5, 9] = numpy.sum(x143 * (x0 * x2607 + x2049))
    result[6, 6, 0] = numpy.sum(
        x132 * (x20 * x2517 + x20 * x2518 + x20 * x2519 + x2454 * x2608)
    )
    result[6, 6, 1] = numpy.sum(
        x143 * (x20 * x2520 + x20 * x2521 + x20 * x2522 + x2457 * x2611)
    )
    result[6, 6, 2] = numpy.sum(
        x143 * (x20 * x2523 + x20 * x2524 + x20 * x2525 + x2460 * x2608)
    )
    result[6, 6, 3] = numpy.sum(
        x143 * (x1768 * x2612 + x20 * x2526 + x20 * x2527 + x20 * x2528)
    )
    result[6, 6, 4] = numpy.sum(
        x164 * (x1768 * x2613 + x20 * x2529 + x20 * x2530 + x20 * x2531)
    )
    result[6, 6, 5] = numpy.sum(
        x143 * (x20 * x2532 + x20 * x2533 + x20 * x2534 + x2465 * x2608)
    )
    result[6, 6, 6] = numpy.sum(
        x132
        * (x20 * x2535 + x20 * x2536 + x20 * x2537 + x91 * (x133 * x2612 + 6.0 * x1954))
    )
    result[6, 6, 7] = numpy.sum(
        x143
        * (x20 * x2538 + x20 * x2539 + x20 * x2540 + x91 * (x133 * x2613 + 6.0 * x1958))
    )
    result[6, 6, 8] = numpy.sum(
        x143 * (x165 * x91 * (x2609 + x2610) + x20 * x2541 + x20 * x2542 + x20 * x2543)
    )
    result[6, 6, 9] = numpy.sum(
        x132 * (x186 * x2608 + x20 * x2544 + x20 * x2545 + x20 * x2546)
    )
    result[6, 7, 0] = numpy.sum(x143 * (x20 * x2548 + x20 * x2549 + x21 * x2517 + x2615))
    result[6, 7, 1] = numpy.sum(x281 * (x20 * x2551 + x20 * x2552 + x21 * x2520 + x2617))
    result[6, 7, 2] = numpy.sum(x281 * (x20 * x2554 + x20 * x2555 + x21 * x2523 + x2619))
    result[6, 7, 3] = numpy.sum(x281 * (x20 * x2557 + x20 * x2558 + x21 * x2526 + x2621))
    result[6, 7, 4] = numpy.sum(x313 * (x20 * x2560 + x20 * x2561 + x21 * x2529 + x2623))
    result[6, 7, 5] = numpy.sum(x281 * (x20 * x2563 + x20 * x2564 + x21 * x2532 + x2625))
    result[6, 7, 6] = numpy.sum(x143 * (x20 * x2566 + x20 * x2567 + x21 * x2535 + x2626))
    result[6, 7, 7] = numpy.sum(x281 * (x20 * x2569 + x20 * x2570 + x21 * x2538 + x2627))
    result[6, 7, 8] = numpy.sum(x281 * (x20 * x2572 + x20 * x2573 + x21 * x2541 + x2628))
    result[6, 7, 9] = numpy.sum(x143 * (x20 * x2575 + x20 * x2576 + x21 * x2544 + x2629))
    result[6, 8, 0] = numpy.sum(x143 * (x20 * x2579 + x21 * x2548 + x2632))
    result[6, 8, 1] = numpy.sum(x281 * (x20 * x2582 + x21 * x2551 + x2635))
    result[6, 8, 2] = numpy.sum(x281 * (x20 * x2585 + x21 * x2554 + x2638))
    result[6, 8, 3] = numpy.sum(x281 * (x20 * x2588 + x21 * x2557 + x2641))
    result[6, 8, 4] = numpy.sum(x313 * (x20 * x2591 + x21 * x2560 + x2644))
    result[6, 8, 5] = numpy.sum(x281 * (x20 * x2594 + x21 * x2563 + x2647))
    result[6, 8, 6] = numpy.sum(x143 * (x20 * x2597 + x21 * x2566 + x2649))
    result[6, 8, 7] = numpy.sum(x281 * (x20 * x2600 + x21 * x2569 + x2651))
    result[6, 8, 8] = numpy.sum(x281 * (x20 * x2604 + x21 * x2572 + x2653))
    result[6, 8, 9] = numpy.sum(x143 * (x20 * x2607 + x21 * x2575 + x2655))
    result[6, 9, 0] = numpy.sum(x132 * (x21 * x2579 + x2659))
    result[6, 9, 1] = numpy.sum(x143 * (x21 * x2582 + x2663))
    result[6, 9, 2] = numpy.sum(x143 * (x21 * x2585 + x2667))
    result[6, 9, 3] = numpy.sum(x143 * (x21 * x2588 + x2671))
    result[6, 9, 4] = numpy.sum(x164 * (x21 * x2591 + x2675))
    result[6, 9, 5] = numpy.sum(x143 * (x21 * x2594 + x2679))
    result[6, 9, 6] = numpy.sum(x132 * (x21 * x2597 + x2682))
    result[6, 9, 7] = numpy.sum(x143 * (x21 * x2600 + x2685))
    result[6, 9, 8] = numpy.sum(x143 * (x21 * x2604 + x2688))
    result[6, 9, 9] = numpy.sum(x132 * (x21 * x2607 + x2691))
    result[7, 0, 0] = numpy.sum(
        x143 * (x0 * x1233 + x0 * x2692 + x0 * (x0 * (x0 * x2693 + x1814) + x2692) + x915)
    )
    result[7, 0, 1] = numpy.sum(
        x281
        * (x0 * x1239 + x0 * x2694 + x0 * (x0 * (x1237 * x2695 + x1816) + x2694) + x925)
    )
    result[7, 0, 2] = numpy.sum(
        x281
        * (x0 * x1244 + x0 * x2696 + x0 * (x0 * (x1242 * x2695 + x1818) + x2696) + x934)
    )
    result[7, 0, 3] = numpy.sum(
        x281
        * (x0 * x1248 + x0 * x2697 + x0 * (x0 * (x1820 * x2462 + x1821) + x2697) + x940)
    )
    result[7, 0, 4] = numpy.sum(
        x313
        * (x0 * x1252 + x0 * x2698 + x0 * (x0 * (x1824 * x2462 + x1825) + x2698) + x948)
    )
    result[7, 0, 5] = numpy.sum(
        x281
        * (x0 * x1258 + x0 * x2699 + x0 * (x0 * (x1827 * x2462 + x1828) + x2699) + x954)
    )
    result[7, 0, 6] = numpy.sum(
        x143
        * (x0 * x1261 + x0 * x2700 + x0 * (x0 * (x118 * x2701 + x1830) + x2700) + x957)
    )
    result[7, 0, 7] = numpy.sum(
        x281
        * (x0 * x1264 + x0 * x2702 + x0 * (x0 * (x118 * x2703 + x1832) + x2702) + x960)
    )
    result[7, 0, 8] = numpy.sum(
        x281
        * (x0 * x1268 + x0 * x2704 + x0 * (x0 * (x118 * x2706 + x1834) + x2704) + x964)
    )
    result[7, 0, 9] = numpy.sum(
        x143
        * (x0 * x1271 + x0 * x2707 + x0 * (x0 * (x118 * x2708 + x1836) + x2707) + x967)
    )
    result[7, 1, 0] = numpy.sum(x281 * (x0 * x2150 + x0 * (x0 * x2709 + x2150) + x1690))
    result[7, 1, 1] = numpy.sum(x1140 * (x0 * x2152 + x0 * (x0 * x2711 + x2152) + x1692))
    result[7, 1, 2] = numpy.sum(x1140 * (x0 * x2154 + x0 * (x0 * x2712 + x2154) + x1694))
    result[7, 1, 3] = numpy.sum(x1140 * (x0 * x2156 + x0 * (x0 * x2713 + x2156) + x1696))
    result[7, 1, 4] = numpy.sum(x1151 * (x0 * x2158 + x0 * (x0 * x2714 + x2158) + x1698))
    result[7, 1, 5] = numpy.sum(x1140 * (x0 * x2160 + x0 * (x0 * x2715 + x2160) + x1700))
    result[7, 1, 6] = numpy.sum(x281 * (x0 * x2162 + x0 * (x0 * x2716 + x2162) + x1702))
    result[7, 1, 7] = numpy.sum(x1140 * (x0 * x2164 + x0 * (x0 * x2717 + x2164) + x1704))
    result[7, 1, 8] = numpy.sum(x1140 * (x0 * x2166 + x0 * (x0 * x2718 + x2166) + x1706))
    result[7, 1, 9] = numpy.sum(x281 * (x0 * x2168 + x0 * (x0 * x2719 + x2168) + x1708))
    result[7, 2, 0] = numpy.sum(x281 * (x0 * x1905 + x0 * (x0 * x2721 + x1905) + x1436))
    result[7, 2, 1] = numpy.sum(x1140 * (x0 * x1908 + x0 * (x0 * x2724 + x1908) + x1443))
    result[7, 2, 2] = numpy.sum(x1140 * (x0 * x1911 + x0 * (x0 * x2726 + x1911) + x1450))
    result[7, 2, 3] = numpy.sum(x1140 * (x0 * x1915 + x0 * (x0 * x2728 + x1915) + x1455))
    result[7, 2, 4] = numpy.sum(x1151 * (x0 * x1919 + x0 * (x0 * x2730 + x1919) + x1460))
    result[7, 2, 5] = numpy.sum(x1140 * (x0 * x1923 + x0 * (x0 * x2732 + x1923) + x1465))
    result[7, 2, 6] = numpy.sum(x281 * (x0 * x1926 + x0 * (x0 * x2734 + x1926) + x1468))
    result[7, 2, 7] = numpy.sum(x1140 * (x0 * x1929 + x0 * (x0 * x2736 + x1929) + x1471))
    result[7, 2, 8] = numpy.sum(x1140 * (x0 * x1932 + x0 * (x0 * x2738 + x1932) + x1474))
    result[7, 2, 9] = numpy.sum(x281 * (x0 * x1935 + x0 * (x0 * x2740 + x1935) + x1477))
    result[7, 3, 0] = numpy.sum(x281 * (x0 * x2742 + x2213))
    result[7, 3, 1] = numpy.sum(x1140 * (x0 * x2744 + x2214))
    result[7, 3, 2] = numpy.sum(x1140 * (x0 * x2746 + x2215))
    result[7, 3, 3] = numpy.sum(x1140 * (x0 * x2748 + x2216))
    result[7, 3, 4] = numpy.sum(x1151 * (x0 * x2750 + x2217))
    result[7, 3, 5] = numpy.sum(x1140 * (x0 * x2752 + x2218))
    result[7, 3, 6] = numpy.sum(x281 * (x0 * x2754 + x2219))
    result[7, 3, 7] = numpy.sum(x1140 * (x0 * x2756 + x2220))
    result[7, 3, 8] = numpy.sum(x1140 * (x0 * x2758 + x2221))
    result[7, 3, 9] = numpy.sum(x281 * (x0 * x2760 + x2222))
    result[7, 4, 0] = numpy.sum(x313 * (x0 * x2761 + x2223))
    result[7, 4, 1] = numpy.sum(x1151 * (x0 * x2762 + x2224))
    result[7, 4, 2] = numpy.sum(x1151 * (x0 * x2763 + x2225))
    result[7, 4, 3] = numpy.sum(x1151 * (x0 * x2764 + x2226))
    result[7, 4, 4] = numpy.sum(x1255 * (x0 * x2765 + x2227))
    result[7, 4, 5] = numpy.sum(x1151 * (x0 * x2766 + x2228))
    result[7, 4, 6] = numpy.sum(x313 * (x0 * x2767 + x2229))
    result[7, 4, 7] = numpy.sum(x1151 * (x0 * x2768 + x2230))
    result[7, 4, 8] = numpy.sum(x1151 * (x0 * x2769 + x2231))
    result[7, 4, 9] = numpy.sum(x313 * (x0 * x2770 + x2232))
    result[7, 5, 0] = numpy.sum(x281 * (x0 * x2773 + x2056))
    result[7, 5, 1] = numpy.sum(x1140 * (x0 * x2776 + x2061))
    result[7, 5, 2] = numpy.sum(x1140 * (x0 * x2779 + x2066))
    result[7, 5, 3] = numpy.sum(x1140 * (x0 * x2782 + x2071))
    result[7, 5, 4] = numpy.sum(x1151 * (x0 * x2785 + x2076))
    result[7, 5, 5] = numpy.sum(x1140 * (x0 * x2788 + x2081))
    result[7, 5, 6] = numpy.sum(x281 * (x0 * x2791 + x2084))
    result[7, 5, 7] = numpy.sum(x1140 * (x0 * x2794 + x2087))
    result[7, 5, 8] = numpy.sum(x1140 * (x0 * x2797 + x2090))
    result[7, 5, 9] = numpy.sum(x281 * (x0 * x2800 + x2093))
    result[7, 6, 0] = numpy.sum(x143 * (x20 * x2547 + x20 * x2741 + x20 * x2742 + x2615))
    result[7, 6, 1] = numpy.sum(x281 * (x20 * x2550 + x20 * x2743 + x20 * x2744 + x2617))
    result[7, 6, 2] = numpy.sum(x281 * (x20 * x2553 + x20 * x2745 + x20 * x2746 + x2619))
    result[7, 6, 3] = numpy.sum(x281 * (x20 * x2556 + x20 * x2747 + x20 * x2748 + x2621))
    result[7, 6, 4] = numpy.sum(x313 * (x20 * x2559 + x20 * x2749 + x20 * x2750 + x2623))
    result[7, 6, 5] = numpy.sum(x281 * (x20 * x2562 + x20 * x2751 + x20 * x2752 + x2625))
    result[7, 6, 6] = numpy.sum(x143 * (x20 * x2565 + x20 * x2753 + x20 * x2754 + x2626))
    result[7, 6, 7] = numpy.sum(x281 * (x20 * x2568 + x20 * x2755 + x20 * x2756 + x2627))
    result[7, 6, 8] = numpy.sum(x281 * (x20 * x2571 + x20 * x2757 + x20 * x2758 + x2628))
    result[7, 6, 9] = numpy.sum(x143 * (x20 * x2574 + x20 * x2759 + x20 * x2760 + x2629))
    result[7, 7, 0] = numpy.sum(x281 * (x20 * x2578 + x20 * x2761 + x2632))
    result[7, 7, 1] = numpy.sum(x1140 * (x20 * x2581 + x20 * x2762 + x2635))
    result[7, 7, 2] = numpy.sum(x1140 * (x20 * x2584 + x20 * x2763 + x2638))
    result[7, 7, 3] = numpy.sum(x1140 * (x20 * x2587 + x20 * x2764 + x2641))
    result[7, 7, 4] = numpy.sum(x1151 * (x20 * x2590 + x20 * x2765 + x2644))
    result[7, 7, 5] = numpy.sum(x1140 * (x20 * x2593 + x20 * x2766 + x2647))
    result[7, 7, 6] = numpy.sum(x281 * (x20 * x2596 + x20 * x2767 + x2649))
    result[7, 7, 7] = numpy.sum(x1140 * (x20 * x2599 + x20 * x2768 + x2651))
    result[7, 7, 8] = numpy.sum(x1140 * (x20 * x2603 + x20 * x2769 + x2653))
    result[7, 7, 9] = numpy.sum(x281 * (x20 * x2606 + x20 * x2770 + x2655))
    result[7, 8, 0] = numpy.sum(x281 * (x20 * x2773 + x2659))
    result[7, 8, 1] = numpy.sum(x1140 * (x20 * x2776 + x2663))
    result[7, 8, 2] = numpy.sum(x1140 * (x20 * x2779 + x2667))
    result[7, 8, 3] = numpy.sum(x1140 * (x20 * x2782 + x2671))
    result[7, 8, 4] = numpy.sum(x1151 * (x20 * x2785 + x2675))
    result[7, 8, 5] = numpy.sum(x1140 * (x20 * x2788 + x2679))
    result[7, 8, 6] = numpy.sum(x281 * (x20 * x2791 + x2682))
    result[7, 8, 7] = numpy.sum(x1140 * (x20 * x2794 + x2685))
    result[7, 8, 8] = numpy.sum(x1140 * (x20 * x2797 + x2688))
    result[7, 8, 9] = numpy.sum(x281 * (x20 * x2800 + x2691))
    result[7, 9, 0] = numpy.sum(x143 * (x21 * x2773 + x2803))
    result[7, 9, 1] = numpy.sum(x281 * (x21 * x2776 + x2806))
    result[7, 9, 2] = numpy.sum(x281 * (x21 * x2779 + x2809))
    result[7, 9, 3] = numpy.sum(x281 * (x21 * x2782 + x2812))
    result[7, 9, 4] = numpy.sum(x313 * (x21 * x2785 + x2815))
    result[7, 9, 5] = numpy.sum(x281 * (x21 * x2788 + x2818))
    result[7, 9, 6] = numpy.sum(x143 * (x21 * x2791 + x2820))
    result[7, 9, 7] = numpy.sum(x281 * (x21 * x2794 + x2822))
    result[7, 9, 8] = numpy.sum(x281 * (x21 * x2797 + x2824))
    result[7, 9, 9] = numpy.sum(x143 * (x21 * x2800 + x2826))
    result[8, 0, 0] = numpy.sum(
        x143 * (x0 * x1275 + x0 * x2827 + x0 * (x0 * (x0 * x2828 + x2127) + x2827) + x992)
    )
    result[8, 0, 1] = numpy.sum(
        x281
        * (x0 * x1280 + x0 * x2829 + x0 * (x0 * (x1278 * x2695 + x2129) + x2829) + x1000)
    )
    result[8, 0, 2] = numpy.sum(
        x281
        * (x0 * x1285 + x0 * x2830 + x0 * (x0 * (x1283 * x2695 + x2131) + x2830) + x1009)
    )
    result[8, 0, 3] = numpy.sum(
        x281
        * (x0 * x1290 + x0 * x2831 + x0 * (x0 * (x2133 * x2462 + x2134) + x2831) + x1014)
    )
    result[8, 0, 4] = numpy.sum(
        x313
        * (x0 * x1295 + x0 * x2832 + x0 * (x0 * (x2136 * x2462 + x2137) + x2832) + x1019)
    )
    result[8, 0, 5] = numpy.sum(
        x281
        * (x0 * x1300 + x0 * x2833 + x0 * (x0 * (x2139 * x2462 + x2140) + x2833) + x1025)
    )
    result[8, 0, 6] = numpy.sum(
        x143
        * (x0 * x1303 + x0 * x2834 + x0 * (x0 * (x118 * x2835 + x2142) + x2834) + x1028)
    )
    result[8, 0, 7] = numpy.sum(
        x281
        * (x0 * x1306 + x0 * x2836 + x0 * (x0 * (x118 * x2837 + x2144) + x2836) + x1031)
    )
    result[8, 0, 8] = numpy.sum(
        x281
        * (x0 * x1309 + x0 * x2838 + x0 * (x0 * (x118 * x2839 + x2146) + x2838) + x1034)
    )
    result[8, 0, 9] = numpy.sum(
        x143
        * (x0 * x1312 + x0 * x2840 + x0 * (x0 * (x118 * x2841 + x2148) + x2840) + x1037)
    )
    result[8, 1, 0] = numpy.sum(x281 * (x0 * x2335 + x0 * (x0 * x2842 + x2335) + x2337))
    result[8, 1, 1] = numpy.sum(x1140 * (x0 * x2338 + x0 * (x0 * x2843 + x2338) + x2340))
    result[8, 1, 2] = numpy.sum(x1140 * (x0 * x2341 + x0 * (x0 * x2844 + x2341) + x2343))
    result[8, 1, 3] = numpy.sum(x1140 * (x0 * x2344 + x0 * (x0 * x2845 + x2344) + x2346))
    result[8, 1, 4] = numpy.sum(x1151 * (x0 * x2347 + x0 * (x0 * x2846 + x2347) + x2349))
    result[8, 1, 5] = numpy.sum(x1140 * (x0 * x2350 + x0 * (x0 * x2847 + x2350) + x2352))
    result[8, 1, 6] = numpy.sum(x281 * (x0 * x2353 + x0 * (x0 * x2848 + x2353) + x2355))
    result[8, 1, 7] = numpy.sum(x1140 * (x0 * x2356 + x0 * (x0 * x2849 + x2356) + x2358))
    result[8, 1, 8] = numpy.sum(x1140 * (x0 * x2359 + x0 * (x0 * x2850 + x2359) + x2361))
    result[8, 1, 9] = numpy.sum(x281 * (x0 * x2362 + x0 * (x0 * x2851 + x2362) + x2364))
    result[8, 2, 0] = numpy.sum(x281 * (x0 * x2181 + x0 * (x0 * x2853 + x2181) + x1492))
    result[8, 2, 1] = numpy.sum(x1140 * (x0 * x2184 + x0 * (x0 * x2855 + x2184) + x1500))
    result[8, 2, 2] = numpy.sum(x1140 * (x0 * x2187 + x0 * (x0 * x2857 + x2187) + x1508))
    result[8, 2, 3] = numpy.sum(x1140 * (x0 * x2191 + x0 * (x0 * x2859 + x2191) + x1514))
    result[8, 2, 4] = numpy.sum(x1151 * (x0 * x2195 + x0 * (x0 * x2861 + x2195) + x1520))
    result[8, 2, 5] = numpy.sum(x1140 * (x0 * x2199 + x0 * (x0 * x2863 + x2199) + x1526))
    result[8, 2, 6] = numpy.sum(x281 * (x0 * x2202 + x0 * (x0 * x2865 + x2202) + x1529))
    result[8, 2, 7] = numpy.sum(x1140 * (x0 * x2205 + x0 * (x0 * x2867 + x2205) + x1532))
    result[8, 2, 8] = numpy.sum(x1140 * (x0 * x2208 + x0 * (x0 * x2869 + x2208) + x1535))
    result[8, 2, 9] = numpy.sum(x281 * (x0 * x2211 + x0 * (x0 * x2871 + x2211) + x1538))
    result[8, 3, 0] = numpy.sum(x281 * (x0 * x2873 + x2409))
    result[8, 3, 1] = numpy.sum(x1140 * (x0 * x2875 + x2410))
    result[8, 3, 2] = numpy.sum(x1140 * (x0 * x2877 + x2411))
    result[8, 3, 3] = numpy.sum(x1140 * (x0 * x2879 + x2412))
    result[8, 3, 4] = numpy.sum(x1151 * (x0 * x2881 + x2413))
    result[8, 3, 5] = numpy.sum(x1140 * (x0 * x2883 + x2414))
    result[8, 3, 6] = numpy.sum(x281 * (x0 * x2885 + x2415))
    result[8, 3, 7] = numpy.sum(x1140 * (x0 * x2887 + x2416))
    result[8, 3, 8] = numpy.sum(x1140 * (x0 * x2889 + x2417))
    result[8, 3, 9] = numpy.sum(x281 * (x0 * x2891 + x2418))
    result[8, 4, 0] = numpy.sum(x313 * (x0 * x2892 + x2419))
    result[8, 4, 1] = numpy.sum(x1151 * (x0 * x2893 + x2420))
    result[8, 4, 2] = numpy.sum(x1151 * (x0 * x2894 + x2421))
    result[8, 4, 3] = numpy.sum(x1151 * (x0 * x2895 + x2422))
    result[8, 4, 4] = numpy.sum(x1255 * (x0 * x2896 + x2423))
    result[8, 4, 5] = numpy.sum(x1151 * (x0 * x2897 + x2424))
    result[8, 4, 6] = numpy.sum(x313 * (x0 * x2898 + x2425))
    result[8, 4, 7] = numpy.sum(x1151 * (x0 * x2899 + x2426))
    result[8, 4, 8] = numpy.sum(x1151 * (x0 * x2900 + x2427))
    result[8, 4, 9] = numpy.sum(x313 * (x0 * x2901 + x2428))
    result[8, 5, 0] = numpy.sum(x281 * (x0 * x2904 + x2238))
    result[8, 5, 1] = numpy.sum(x1140 * (x0 * x2907 + x2242))
    result[8, 5, 2] = numpy.sum(x1140 * (x0 * x2910 + x2246))
    result[8, 5, 3] = numpy.sum(x1140 * (x0 * x2913 + x2250))
    result[8, 5, 4] = numpy.sum(x1151 * (x0 * x2916 + x2254))
    result[8, 5, 5] = numpy.sum(x1140 * (x0 * x2919 + x2258))
    result[8, 5, 6] = numpy.sum(x281 * (x0 * x2922 + x2260))
    result[8, 5, 7] = numpy.sum(x1140 * (x0 * x2925 + x2262))
    result[8, 5, 8] = numpy.sum(x1140 * (x0 * x2928 + x2264))
    result[8, 5, 9] = numpy.sum(x281 * (x0 * x2931 + x2266))
    result[8, 6, 0] = numpy.sum(x143 * (x20 * x2577 + x20 * x2872 + x20 * x2873 + x2631))
    result[8, 6, 1] = numpy.sum(x281 * (x20 * x2580 + x20 * x2874 + x20 * x2875 + x2634))
    result[8, 6, 2] = numpy.sum(x281 * (x20 * x2583 + x20 * x2876 + x20 * x2877 + x2637))
    result[8, 6, 3] = numpy.sum(x281 * (x20 * x2586 + x20 * x2878 + x20 * x2879 + x2640))
    result[8, 6, 4] = numpy.sum(x313 * (x20 * x2589 + x20 * x2880 + x20 * x2881 + x2643))
    result[8, 6, 5] = numpy.sum(x281 * (x20 * x2592 + x20 * x2882 + x20 * x2883 + x2646))
    result[8, 6, 6] = numpy.sum(x143 * (x20 * x2595 + x20 * x2884 + x20 * x2885 + x2648))
    result[8, 6, 7] = numpy.sum(x281 * (x20 * x2598 + x20 * x2886 + x20 * x2887 + x2650))
    result[8, 6, 8] = numpy.sum(x281 * (x20 * x2602 + x20 * x2888 + x20 * x2889 + x2652))
    result[8, 6, 9] = numpy.sum(x143 * (x20 * x2605 + x20 * x2890 + x20 * x2891 + x2654))
    result[8, 7, 0] = numpy.sum(x281 * (x20 * x2772 + x20 * x2892 + x2658))
    result[8, 7, 1] = numpy.sum(x1140 * (x20 * x2775 + x20 * x2893 + x2662))
    result[8, 7, 2] = numpy.sum(x1140 * (x20 * x2778 + x20 * x2894 + x2666))
    result[8, 7, 3] = numpy.sum(x1140 * (x20 * x2781 + x20 * x2895 + x2670))
    result[8, 7, 4] = numpy.sum(x1151 * (x20 * x2784 + x20 * x2896 + x2674))
    result[8, 7, 5] = numpy.sum(x1140 * (x20 * x2787 + x20 * x2897 + x2678))
    result[8, 7, 6] = numpy.sum(x281 * (x20 * x2790 + x20 * x2898 + x2681))
    result[8, 7, 7] = numpy.sum(x1140 * (x20 * x2793 + x20 * x2899 + x2684))
    result[8, 7, 8] = numpy.sum(x1140 * (x20 * x2796 + x20 * x2900 + x2687))
    result[8, 7, 9] = numpy.sum(x281 * (x20 * x2799 + x20 * x2901 + x2690))
    result[8, 8, 0] = numpy.sum(x281 * (x20 * x2904 + x2803))
    result[8, 8, 1] = numpy.sum(x1140 * (x20 * x2907 + x2806))
    result[8, 8, 2] = numpy.sum(x1140 * (x20 * x2910 + x2809))
    result[8, 8, 3] = numpy.sum(x1140 * (x20 * x2913 + x2812))
    result[8, 8, 4] = numpy.sum(x1151 * (x20 * x2916 + x2815))
    result[8, 8, 5] = numpy.sum(x1140 * (x20 * x2919 + x2818))
    result[8, 8, 6] = numpy.sum(x281 * (x20 * x2922 + x2820))
    result[8, 8, 7] = numpy.sum(x1140 * (x20 * x2925 + x2822))
    result[8, 8, 8] = numpy.sum(x1140 * (x20 * x2928 + x2824))
    result[8, 8, 9] = numpy.sum(x281 * (x20 * x2931 + x2826))
    result[8, 9, 0] = numpy.sum(x143 * (x21 * x2904 + x2933))
    result[8, 9, 1] = numpy.sum(x281 * (x21 * x2907 + x2935))
    result[8, 9, 2] = numpy.sum(x281 * (x21 * x2910 + x2937))
    result[8, 9, 3] = numpy.sum(x281 * (x21 * x2913 + x2939))
    result[8, 9, 4] = numpy.sum(x313 * (x21 * x2916 + x2941))
    result[8, 9, 5] = numpy.sum(x281 * (x21 * x2919 + x2943))
    result[8, 9, 6] = numpy.sum(x143 * (x21 * x2922 + x2944))
    result[8, 9, 7] = numpy.sum(x281 * (x21 * x2925 + x2945))
    result[8, 9, 8] = numpy.sum(x281 * (x21 * x2928 + x2946))
    result[8, 9, 9] = numpy.sum(x143 * (x21 * x2931 + x2947))
    result[9, 0, 0] = numpy.sum(
        x132
        * (x0 * x1654 + x0 * x2948 + x0 * (x0 * (x2311 + x2454 * x2949) + x2948) + x1067)
    )
    result[9, 0, 1] = numpy.sum(
        x143
        * (x0 * x1659 + x0 * x2950 + x0 * (x0 * (x2313 + x2695 * x2951) + x2950) + x1071)
    )
    result[9, 0, 2] = numpy.sum(
        x143
        * (x0 * x1665 + x0 * x2952 + x0 * (x0 * (x1662 * x2695 + x2315) + x2952) + x1078)
    )
    result[9, 0, 3] = numpy.sum(
        x143
        * (x0 * x1668 + x0 * x2953 + x0 * (x0 * (x2318 + x2949 * x2954) + x2953) + x1081)
    )
    result[9, 0, 4] = numpy.sum(
        x164
        * (x0 * x1671 + x0 * x2955 + x0 * (x0 * (x0 * x2957 + x2321) + x2955) + x1084)
    )
    result[9, 0, 5] = numpy.sum(
        x143
        * (x0 * x1675 + x0 * x2958 + x0 * (x0 * (x2323 * x2462 + x2325) + x2958) + x1089)
    )
    result[9, 0, 6] = numpy.sum(
        x132
        * (x0 * x1678 + x0 * x2959 + x0 * (x0 * (x171 * x2949 + x2327) + x2959) + x1092)
    )
    result[9, 0, 7] = numpy.sum(
        x143
        * (x0 * x1681 + x0 * x2960 + x0 * (x0 * (x0 * x2961 + x2329) + x2960) + x1095)
    )
    result[9, 0, 8] = numpy.sum(
        x143
        * (x0 * x1684 + x0 * x2962 + x0 * (x0 * (x0 * x2963 + x2331) + x2962) + x1098)
    )
    result[9, 0, 9] = numpy.sum(
        x132
        * (x0 * x1687 + x0 * x2964 + x0 * (x0 * (x118 * x2965 + x2333) + x2964) + x1101)
    )
    result[9, 1, 0] = numpy.sum(
        x143 * (x0 * x2966 + x0 * (x0 * x2968 + x2966) + x1491 + x1654 * x20)
    )
    result[9, 1, 1] = numpy.sum(
        x281 * (x0 * x2969 + x0 * (x0 * x2970 + x2969) + x1499 + x1659 * x20)
    )
    result[9, 1, 2] = numpy.sum(
        x281 * (x0 * x2971 + x0 * (x0 * x2972 + x2971) + x1507 + x1665 * x20)
    )
    result[9, 1, 3] = numpy.sum(
        x281 * (x0 * x2973 + x0 * (x0 * x2974 + x2973) + x1513 + x1668 * x20)
    )
    result[9, 1, 4] = numpy.sum(
        x313 * (x0 * x2975 + x0 * (x0 * x2976 + x2975) + x1519 + x1671 * x20)
    )
    result[9, 1, 5] = numpy.sum(
        x281 * (x0 * x2977 + x0 * (x0 * x2978 + x2977) + x1525 + x1675 * x20)
    )
    result[9, 1, 6] = numpy.sum(
        x143 * (x0 * x2979 + x0 * (x0 * x2980 + x2979) + x1528 + x1678 * x20)
    )
    result[9, 1, 7] = numpy.sum(
        x281 * (x0 * x2981 + x0 * (x0 * x2982 + x2981) + x1531 + x1681 * x20)
    )
    result[9, 1, 8] = numpy.sum(
        x281 * (x0 * x2983 + x0 * (x0 * x2984 + x2983) + x1534 + x1684 * x20)
    )
    result[9, 1, 9] = numpy.sum(
        x143 * (x0 * x2985 + x0 * (x0 * x2986 + x2985) + x1537 + x1687 * x20)
    )
    result[9, 2, 0] = numpy.sum(x143 * (x0 * x2376 + x0 * (x0 * x2989 + x2376) + x1735))
    result[9, 2, 1] = numpy.sum(x281 * (x0 * x2379 + x0 * (x0 * x2991 + x2379) + x1739))
    result[9, 2, 2] = numpy.sum(x281 * (x0 * x2382 + x0 * (x0 * x2993 + x2382) + x1746))
    result[9, 2, 3] = numpy.sum(x281 * (x0 * x2386 + x0 * (x0 * x2995 + x2386) + x1748))
    result[9, 2, 4] = numpy.sum(x313 * (x0 * x2390 + x0 * (x0 * x2997 + x2390) + x1750))
    result[9, 2, 5] = numpy.sum(x281 * (x0 * x2395 + x0 * (x0 * x2999 + x2395) + x1754))
    result[9, 2, 6] = numpy.sum(x143 * (x0 * x2398 + x0 * (x0 * x3001 + x2398) + x1756))
    result[9, 2, 7] = numpy.sum(x281 * (x0 * x2401 + x0 * (x0 * x3003 + x2401) + x1758))
    result[9, 2, 8] = numpy.sum(x281 * (x0 * x2404 + x0 * (x0 * x3005 + x2404) + x1760))
    result[9, 2, 9] = numpy.sum(x143 * (x0 * x2407 + x0 * (x0 * x3007 + x2407) + x1762))
    result[9, 3, 0] = numpy.sum(x143 * (x0 * x3009 + x20 * x2180 + x20 * x2966 + x2054))
    result[9, 3, 1] = numpy.sum(x281 * (x0 * x3011 + x20 * x2183 + x20 * x2969 + x2059))
    result[9, 3, 2] = numpy.sum(x281 * (x0 * x3013 + x20 * x2186 + x20 * x2971 + x2064))
    result[9, 3, 3] = numpy.sum(x281 * (x0 * x3015 + x20 * x2190 + x20 * x2973 + x2069))
    result[9, 3, 4] = numpy.sum(x313 * (x0 * x3017 + x20 * x2194 + x20 * x2975 + x2074))
    result[9, 3, 5] = numpy.sum(x281 * (x0 * x3019 + x20 * x2198 + x20 * x2977 + x2079))
    result[9, 3, 6] = numpy.sum(x143 * (x0 * x3021 + x20 * x2201 + x20 * x2979 + x2082))
    result[9, 3, 7] = numpy.sum(x281 * (x0 * x3023 + x20 * x2204 + x20 * x2981 + x2085))
    result[9, 3, 8] = numpy.sum(x281 * (x0 * x3025 + x20 * x2207 + x20 * x2983 + x2088))
    result[9, 3, 9] = numpy.sum(x143 * (x0 * x3027 + x20 * x2210 + x20 * x2985 + x2091))
    result[9, 4, 0] = numpy.sum(x164 * (x0 * x3028 + x20 * x2376 + x2237))
    result[9, 4, 1] = numpy.sum(x313 * (x0 * x3029 + x20 * x2379 + x2241))
    result[9, 4, 2] = numpy.sum(x313 * (x0 * x3030 + x20 * x2382 + x2245))
    result[9, 4, 3] = numpy.sum(x313 * (x0 * x3031 + x20 * x2386 + x2249))
    result[9, 4, 4] = numpy.sum(x683 * (x0 * x3032 + x20 * x2390 + x2253))
    result[9, 4, 5] = numpy.sum(x313 * (x0 * x3033 + x20 * x2395 + x2257))
    result[9, 4, 6] = numpy.sum(x164 * (x0 * x3034 + x20 * x2398 + x2259))
    result[9, 4, 7] = numpy.sum(x313 * (x0 * x3035 + x20 * x2401 + x2261))
    result[9, 4, 8] = numpy.sum(x313 * (x0 * x3036 + x20 * x2404 + x2263))
    result[9, 4, 9] = numpy.sum(x164 * (x0 * x3037 + x20 * x2407 + x2265))
    result[9, 5, 0] = numpy.sum(x143 * (x0 * x3040 + x2434))
    result[9, 5, 1] = numpy.sum(x281 * (x0 * x3043 + x2436))
    result[9, 5, 2] = numpy.sum(x281 * (x0 * x3046 + x2440))
    result[9, 5, 3] = numpy.sum(x281 * (x0 * x3049 + x2442))
    result[9, 5, 4] = numpy.sum(x313 * (x0 * x3052 + x2444))
    result[9, 5, 5] = numpy.sum(x281 * (x0 * x3055 + x2448))
    result[9, 5, 6] = numpy.sum(x143 * (x0 * x3058 + x2449))
    result[9, 5, 7] = numpy.sum(x281 * (x0 * x3061 + x2450))
    result[9, 5, 8] = numpy.sum(x281 * (x0 * x3064 + x2451))
    result[9, 5, 9] = numpy.sum(x143 * (x0 * x3067 + x2452))
    result[9, 6, 0] = numpy.sum(x132 * (x20 * x2771 + x20 * x3008 + x20 * x3009 + x2657))
    result[9, 6, 1] = numpy.sum(x143 * (x20 * x2774 + x20 * x3010 + x20 * x3011 + x2661))
    result[9, 6, 2] = numpy.sum(x143 * (x20 * x2777 + x20 * x3012 + x20 * x3013 + x2665))
    result[9, 6, 3] = numpy.sum(x143 * (x20 * x2780 + x20 * x3014 + x20 * x3015 + x2669))
    result[9, 6, 4] = numpy.sum(x164 * (x20 * x2783 + x20 * x3016 + x20 * x3017 + x2673))
    result[9, 6, 5] = numpy.sum(x143 * (x20 * x2786 + x20 * x3018 + x20 * x3019 + x2677))
    result[9, 6, 6] = numpy.sum(x132 * (x20 * x2789 + x20 * x3020 + x20 * x3021 + x2680))
    result[9, 6, 7] = numpy.sum(x143 * (x20 * x2792 + x20 * x3022 + x20 * x3023 + x2683))
    result[9, 6, 8] = numpy.sum(x143 * (x20 * x2795 + x20 * x3024 + x20 * x3025 + x2686))
    result[9, 6, 9] = numpy.sum(x132 * (x20 * x2798 + x20 * x3026 + x20 * x3027 + x2689))
    result[9, 7, 0] = numpy.sum(x143 * (x20 * x2903 + x20 * x3028 + x2802))
    result[9, 7, 1] = numpy.sum(x281 * (x20 * x2906 + x20 * x3029 + x2805))
    result[9, 7, 2] = numpy.sum(x281 * (x20 * x2909 + x20 * x3030 + x2808))
    result[9, 7, 3] = numpy.sum(x281 * (x20 * x2912 + x20 * x3031 + x2811))
    result[9, 7, 4] = numpy.sum(x313 * (x20 * x2915 + x20 * x3032 + x2814))
    result[9, 7, 5] = numpy.sum(x281 * (x20 * x2918 + x20 * x3033 + x2817))
    result[9, 7, 6] = numpy.sum(x143 * (x20 * x2921 + x20 * x3034 + x2819))
    result[9, 7, 7] = numpy.sum(x281 * (x20 * x2924 + x20 * x3035 + x2821))
    result[9, 7, 8] = numpy.sum(x281 * (x20 * x2927 + x20 * x3036 + x2823))
    result[9, 7, 9] = numpy.sum(x143 * (x20 * x2930 + x20 * x3037 + x2825))
    result[9, 8, 0] = numpy.sum(x143 * (x20 * x3040 + x2933))
    result[9, 8, 1] = numpy.sum(x281 * (x20 * x3043 + x2935))
    result[9, 8, 2] = numpy.sum(x281 * (x20 * x3046 + x2937))
    result[9, 8, 3] = numpy.sum(x281 * (x20 * x3049 + x2939))
    result[9, 8, 4] = numpy.sum(x313 * (x20 * x3052 + x2941))
    result[9, 8, 5] = numpy.sum(x281 * (x20 * x3055 + x2943))
    result[9, 8, 6] = numpy.sum(x143 * (x20 * x3058 + x2944))
    result[9, 8, 7] = numpy.sum(x281 * (x20 * x3061 + x2945))
    result[9, 8, 8] = numpy.sum(x281 * (x20 * x3064 + x2946))
    result[9, 8, 9] = numpy.sum(x143 * (x20 * x3067 + x2947))
    result[9, 9, 0] = numpy.sum(
        x132 * (x21 * x3038 + x21 * x3039 + x21 * x3040 + x2454 * x3068)
    )
    result[9, 9, 1] = numpy.sum(
        x143 * (x21 * x3042 + x21 * x3043 + x2429 * x3041 + x2990 * x3068)
    )
    result[9, 9, 2] = numpy.sum(
        x143 * (x21 * x3044 + x21 * x3045 + x21 * x3046 + x2457 * x3069)
    )
    result[9, 9, 3] = numpy.sum(
        x143 * (x21 * x3047 + x21 * x3048 + x21 * x3049 + x2954 * x3068)
    )
    result[9, 9, 4] = numpy.sum(
        x164 * (x21 * x3050 + x21 * x3051 + x21 * x3052 + x2956 * x3069)
    )
    result[9, 9, 5] = numpy.sum(
        x143 * (x1768 * x3070 + x21 * x3053 + x21 * x3054 + x21 * x3055)
    )
    result[9, 9, 6] = numpy.sum(
        x132 * (x171 * x3068 + x21 * x3056 + x21 * x3057 + x21 * x3058)
    )
    result[9, 9, 7] = numpy.sum(
        x143 * (x176 * x3069 + x21 * x3059 + x21 * x3060 + x21 * x3061)
    )
    result[9, 9, 8] = numpy.sum(
        x143 * (x158 * x3070 + x21 * x3062 + x21 * x3063 + x21 * x3064)
    )
    result[9, 9, 9] = numpy.sum(
        x132
        * (x21 * x3065 + x21 * x3066 + x21 * x3067 + x91 * (x144 * x3070 + 6.0 * x2446))
    )
    return result


def int3c2e3d_sph_334(ax, da, A, bx, db, B, cx, dc, C):
    """Cartesian (ff|g) three-center two-electron repulsion integral.
    These integrals MUST BE converted to spherical harmonics!

    Integral generation utilized Ahlrichs (truncated) vertical recursion relation.
    There, some terms are omitted, that would cancel anyway, after Cartesian->Spherical transformation.

    Generated code; DO NOT modify by hand!"""

    result = numpy.zeros((10, 10, 15), dtype=float)

    x0 = A[0] - B[0]
    x1 = ax + bx
    x2 = x1 ** (-1.0)
    x3 = -x2 * (ax * A[0] + bx * B[0])
    x4 = -x3 - C[0]
    x5 = -x3 - A[0]
    x6 = 0.5 / (ax + bx)
    x7 = x4**2
    x8 = -x2 * (ax * A[1] + bx * B[1])
    x9 = -x8 - C[1]
    x10 = x9**2
    x11 = -x2 * (ax * A[2] + bx * B[2])
    x12 = -x11 - C[2]
    x13 = x12**2
    x14 = cx + x1
    x15 = x14 ** (-1.0)
    x16 = cx * x15
    x17 = x1 * x16 * (x10 + x13 + x7)
    x18 = boys(5, x17)
    x19 = x14 ** (-1.5)
    x20 = 17.49341832762486
    x21 = A[1] - B[1]
    x22 = A[2] - B[2]
    x23 = numpy.exp(-ax * bx * x2 * (x0**2 + x21**2 + x22**2))
    x24 = x2 * x20 * x23
    x25 = 2.0 * x19 * x24
    x26 = x18 * x25
    x27 = cx ** (-1.0)
    x28 = x14 ** (-0.5)
    x29 = boys(4, x17)
    x30 = 2.0 * x2 * x20 * x23 * x27 * x28 * x29 - x26
    x31 = x30 * x6
    x32 = -2.0 * x2 * x20 * x23 * x27 * x28 * x29 * x5 + x26 * x4
    x33 = -x32
    x34 = boys(6, x17)
    x35 = x25 * x34
    x36 = -2.0 * x18 * x2 * x20 * x23 * x27 * x28 * x5 + x35 * x4
    x37 = -x36
    x38 = x16 * x37
    x39 = x38 * x4
    x40 = x31 + x33 * x5 - x39
    x41 = -x32 - x38
    x42 = 2.0 * x6
    x43 = 2.0 * x18 * x2 * x20 * x23 * x27 * x28 - x35
    x44 = x43 * x6
    x45 = boys(7, x17)
    x46 = x25 * x45
    x47 = -2.0 * x2 * x20 * x23 * x27 * x28 * x34 * x5 + x4 * x46
    x48 = -x47
    x49 = x16 * x48
    x50 = x4 * x49
    x51 = x37 * x5 + x44 - x50
    x52 = x16 * x51
    x53 = x4 * x52
    x54 = x40 * x5 + x41 * x42 - x53
    x55 = -x30 * x6
    x56 = x33 * x5 - x39 - x52 - x55
    x57 = 3.0 * x6
    x58 = -x36 - x49
    x59 = 2.0 * x2 * x20 * x23 * x27 * x28 * x34 - x46
    x60 = x59 * x6
    x61 = boys(8, x17)
    x62 = x25 * x61
    x63 = -2.0 * x2 * x20 * x23 * x27 * x28 * x45 * x5 + x4 * x62
    x64 = -x63
    x65 = x16 * x64
    x66 = x4 * x65
    x67 = x48 * x5 + x60 - x66
    x68 = x16 * x67
    x69 = x4 * x68
    x70 = x42 * x58 + x5 * x51 - x69
    x71 = x16 * x70
    x72 = x4 * x71
    x73 = x5 * x54 + x56 * x57 - x72
    x74 = 4.0 * x6
    x75 = -x43 * x6
    x76 = x6 * (2.0 * x2 * x20 * x23 * x27 * x28 * x45 - x62)
    x77 = boys(9, x17)
    x78 = x25 * x77
    x79 = 2.0 * x2 * x20 * x23 * x27 * x28 * x5 * x61 - x4 * x78
    x80 = x16 * x79
    x81 = -x4 * x80 + x5 * x64 + x76
    x82 = x16 * x81
    x83 = -x4 * x82 - x42 * (x47 + x65) + x5 * x67
    x84 = x16 * x83
    x85 = -x4 * x84 + x5 * x70 - x57 * (-x37 * x5 + x50 + x68 + x75)
    x86 = x16 * x85
    x87 = -x4 * x86 + x5 * x73 + x74 * (x40 * x5 + 2.0 * x41 * x6 - x53 - x71)
    x88 = x4 * x87
    x89 = x6 * x73
    x90 = 5.0 * x89
    x91 = x88 + x90
    x92 = x1 * x15
    x93 = x4 * x92
    x94 = x4 * x73
    x95 = x54 * x6
    x96 = 4.0 * x95
    x97 = x94 + x96
    x98 = 5.0 * x6
    x99 = x92 * x98
    x100 = x91 * x93 + x97 * x99
    x101 = x4 * x54
    x102 = x40 * x6
    x103 = 3.0 * x102
    x104 = x101 + x103
    x105 = x74 * x92
    x106 = x104 * x105 + x93 * x97
    x107 = x100 * x93 + x106 * x99
    x108 = x4 * x40
    x109 = x33 * x6
    x110 = 2.0 * x109
    x111 = x108 + x110
    x112 = x57 * x92
    x113 = x104 * x93 + x111 * x112
    x114 = x105 * x113 + x106 * x93
    x115 = x92 * (x107 * x93 + x114 * x99)
    x116 = x33 * x4
    x117 = x27 * x29 * x42
    x118 = x117 * x24 * x28
    x119 = x116 + x118
    x120 = x42 * x92
    x121 = x111 * x93 + x119 * x120
    x122 = x112 * x121 + x113 * x93
    x123 = x92 * (x105 * x122 + x114 * x93)
    x124 = x0 * x123 + x115
    x125 = x117 * x19 * x20 * x23
    x126 = x112 * (x120 * (x119 * x93 + x125 * x4) + x121 * x93) + x122 * x93
    x127 = x0 * x92
    x128 = -x59 * x6
    x129 = x6 * (2.0 * x2 * x20 * x23 * x27 * x28 * x61 - x78)
    x130 = x25 * boys(10, x17)
    x131 = x16 * x4
    x132 = (
        -x131
        * (
            -x131
            * (
                x131
                * (
                    x131
                    * (
                        x129
                        + x131 * (x130 * x4 - 2.0 * x2 * x20 * x23 * x27 * x28 * x5 * x77)
                        + x5 * x79
                    )
                    + x42 * (x63 + x80)
                    - x5 * x81
                )
                + x5 * x83
                - x57 * (x128 - x48 * x5 + x66 + x82)
            )
            + x5 * x85
            + x74 * (x5 * x51 + 2.0 * x58 * x6 - x69 - x84)
        )
        + x5 * x87
        + x98 * (x5 * x54 + 3.0 * x56 * x6 - x72 - x86)
    )
    x133 = x132 * x4
    x134 = x6 * x87
    x135 = 6.0 * x134
    x136 = x6 * x92
    x137 = 6.0 * x136
    x138 = da * db * dc
    x139 = 10.2469507659596 * x138
    x140 = 0.0006349206349206349 * x139
    x141 = x9 * x92
    x142 = x141 * (x88 + x90)
    x143 = x141 * (x94 + x96)
    x144 = x142 * x93 + x143 * x99
    x145 = x141 * (x101 + x103)
    x146 = x105 * x145 + x143 * x93
    x147 = x92 * (x144 * x93 + x146 * x99)
    x148 = x141 * (x108 + x110)
    x149 = x112 * x148 + x145 * x93
    x150 = x92 * (x105 * x149 + x146 * x93)
    x151 = x0 * x150 + x147
    x152 = x125 * x9
    x153 = x112 * (x120 * (x116 * x141 + x152) + x148 * x93) + x149 * x93
    x154 = 3.872983346207417
    x155 = 0.004444444444444444 * x138 * x154
    x156 = x12 * x92
    x157 = x156 * (x88 + x90)
    x158 = x156 * (x94 + x96)
    x159 = x157 * x93 + x158 * x99
    x160 = x156 * (x101 + x103)
    x161 = x105 * x160 + x158 * x93
    x162 = x92 * (x159 * x93 + x161 * x99)
    x163 = x156 * (x108 + x110)
    x164 = x112 * x163 + x160 * x93
    x165 = x92 * (x105 * x164 + x161 * x93)
    x166 = x0 * x165 + x162
    x167 = x12 * x125
    x168 = x112 * (x120 * (x116 * x156 + x167) + x163 * x93) + x164 * x93
    x169 = x1**2 / x14**2
    x170 = x10 * x169
    x171 = x170 * (x88 + x90)
    x172 = x170 * (x94 + x96)
    x173 = x92 * (x171 * x93 + x172 * x99)
    x174 = x170 * (x101 + x103)
    x175 = x92 * (x105 * x174 + x172 * x93)
    x176 = x0 * x175 + x173
    x177 = x112 * x170 * (x108 + x110) + x174 * x93
    x178 = 0.02222222222222222 * x138
    x179 = x169 * x9
    x180 = x12 * x179
    x181 = x180 * (x88 + x90)
    x182 = x180 * (x94 + x96)
    x183 = x92 * (x181 * x93 + x182 * x99)
    x184 = x180 * (x101 + x103)
    x185 = x92 * (x105 * x184 + x182 * x93)
    x186 = x0 * x185 + x183
    x187 = x112 * x180 * (x108 + x110) + x184 * x93
    x188 = 1.732050807568877
    x189 = x178 * x188
    x190 = x13 * x169
    x191 = x190 * (x88 + x90)
    x192 = x190 * (x94 + x96)
    x193 = x92 * (x191 * x93 + x192 * x99)
    x194 = x190 * (x101 + x103)
    x195 = x92 * (x105 * x194 + x192 * x93)
    x196 = x0 * x195 + x193
    x197 = x112 * x190 * (x108 + x110) + x194 * x93
    x198 = x9**3
    x199 = x1**3 / x14**3
    x200 = x198 * x199
    x201 = x200 * x92 * (x88 + x90)
    x202 = x200 * x92 * (x94 + x96)
    x203 = x0 * x202 + x201
    x204 = x200 * (x101 + x103)
    x205 = x10 * x199
    x206 = x12 * x205
    x207 = x206 * x92 * (x88 + x90)
    x208 = x206 * x92 * (x94 + x96)
    x209 = x0 * x208 + x207
    x210 = x206 * (x101 + x103)
    x211 = x199 * x9
    x212 = x13 * x211
    x213 = x212 * x92 * (x88 + x90)
    x214 = x212 * x92 * (x94 + x96)
    x215 = x0 * x214 + x213
    x216 = x212 * (x101 + x103)
    x217 = x12**3
    x218 = x199 * x217
    x219 = x218 * x92 * (x88 + x90)
    x220 = x218 * x92 * (x94 + x96)
    x221 = x0 * x220 + x219
    x222 = x218 * (x101 + x103)
    x223 = x1**4 / x14**4
    x224 = x223 * x9**4
    x225 = x224 * x87
    x226 = x224 * x73
    x227 = x0 * x226 + x225
    x228 = x0 * x54
    x229 = x198 * x223
    x230 = x12 * x229
    x231 = x230 * x87
    x232 = x230 * x73
    x233 = x0 * x232 + x231
    x234 = x223 * x87
    x235 = x10 * x13
    x236 = x234 * x235
    x237 = x223 * x235
    x238 = x237 * x73
    x239 = x0 * x238 + x236
    x240 = x217 * x9
    x241 = x234 * x240
    x242 = x223 * x240
    x243 = x242 * x73
    x244 = x0 * x243 + x241
    x245 = x12**4 * x223
    x246 = x245 * x87
    x247 = x245 * x73
    x248 = x0 * x247 + x246
    x249 = -x8 - A[1]
    x250 = -2.0 * x18 * x2 * x20 * x23 * x249 * x27 * x28 + x35 * x9
    x251 = -x250
    x252 = x16 * x251
    x253 = -2.0 * x2 * x20 * x23 * x249 * x27 * x28 * x29 + x26 * x9
    x254 = -x252 - x253
    x255 = x254 * x6
    x256 = -x253
    x257 = x252 * x4 - x256 * x5
    x258 = -x257
    x259 = -2.0 * x2 * x20 * x23 * x249 * x27 * x28 * x34 + x46 * x9
    x260 = -x259
    x261 = x16 * x260
    x262 = -x251 * x5 + x261 * x4
    x263 = -x262
    x264 = x16 * x263
    x265 = x264 * x4
    x266 = x255 + x258 * x5 - x265
    x267 = -x257 - x264
    x268 = -x250 - x261
    x269 = x268 * x6
    x270 = -2.0 * x2 * x20 * x23 * x249 * x27 * x28 * x45 + x62 * x9
    x271 = -x270
    x272 = x16 * x271
    x273 = -x260 * x5 + x272 * x4
    x274 = -x273
    x275 = x16 * x274
    x276 = x275 * x4
    x277 = x263 * x5 + x269 - x276
    x278 = x16 * x277
    x279 = x278 * x4
    x280 = x266 * x5 + x267 * x42 - x279
    x281 = -x6 * (x259 + x272)
    x282 = 2.0 * x2 * x20 * x23 * x249 * x27 * x28 * x61 - x78 * x9
    x283 = x16 * x282
    x284 = x271 * x5 - x283 * x4
    x285 = x16 * x284
    x286 = x274 * x5 + x281 - x285 * x4
    x287 = x16 * x286
    x288 = x277 * x5 - x287 * x4 - x42 * (x262 + x275)
    x289 = x16 * x288
    x290 = x280 * x5 - x289 * x4 + x57 * (x254 * x6 + x258 * x5 - x265 - x278)
    x291 = x290 * x4
    x292 = x280 * x6
    x293 = 4.0 * x292
    x294 = x291 + x293
    x295 = x280 * x4
    x296 = x266 * x6
    x297 = 3.0 * x296
    x298 = x295 + x297
    x299 = x105 * x298 + x294 * x93
    x300 = x266 * x4
    x301 = x258 * x6
    x302 = 2.0 * x301
    x303 = x300 + x302
    x304 = x112 * x303 + x298 * x93
    x305 = x105 * x304 + x299 * x93
    x306 = x256 * x6
    x307 = x258 * x4
    x308 = x306 + x307
    x309 = x120 * x308 + x303 * x93
    x310 = x112 * x309 + x304 * x93
    x311 = x92 * (x105 * x310 + x305 * x93)
    x312 = x123 * x21 + x311
    x313 = x93 * (x306 + x308)
    x314 = x120 * x313 + x309 * x93
    x315 = x92 * (x112 * x314 + x310 * x93)
    x316 = x21 * x92
    x317 = x126 * x316 + x315
    x318 = -x6 * (x270 + x283)
    x319 = -x130 * x9 + 2.0 * x2 * x20 * x23 * x249 * x27 * x28 * x77
    x320 = (
        -x131
        * (
            x131
            * (
                x131 * (x131 * (x131 * x319 - x282 * x5) + x284 * x5 + x318)
                - x286 * x5
                + x42 * (x273 + x285)
            )
            + x288 * x5
            + x57 * (x263 * x5 + x268 * x6 - x276 - x287)
        )
        + x290 * x5
        + x74 * (x266 * x5 + 2.0 * x267 * x6 - x279 - x289)
    )
    x321 = x320 * x4
    x322 = x290 * x6
    x323 = 5.0 * x322
    x324 = x92 * (
        x305 * x99 + x93 * (x299 * x99 + x93 * (x294 * x99 + x93 * (x321 + x323)))
    )
    x325 = 0.01454785934906616 * x138
    x326 = x290 * x9
    x327 = x326 + x89
    x328 = x280 * x9
    x329 = x328 + x95
    x330 = x105 * x329 + x327 * x93
    x331 = x266 * x9
    x332 = x102 + x331
    x333 = x112 * x332 + x329 * x93
    x334 = x105 * x333 + x330 * x93
    x335 = x258 * x9
    x336 = x109 + x335
    x337 = x120 * x336
    x338 = x332 * x93 + x337
    x339 = x112 * x338 + x333 * x93
    x340 = x92 * (x105 * x339 + x334 * x93)
    x341 = x150 * x21 + x340
    x342 = x256 * x9
    x343 = x118 + x342
    x344 = x136 * x343 + x336 * x93
    x345 = x120 * x344 + x338 * x93
    x346 = x92 * (x112 * x345 + x339 * x93)
    x347 = x153 * x316 + x346
    x348 = x320 * x9
    x349 = x134 + x348
    x350 = x92 * (x334 * x99 + x93 * (x330 * x99 + x93 * (x327 * x99 + x349 * x93)))
    x351 = x156 * (x291 + x293)
    x352 = x156 * (x295 + x297)
    x353 = x105 * x352 + x351 * x93
    x354 = x156 * x302
    x355 = x156 * x300 + x354
    x356 = x112 * x355 + x352 * x93
    x357 = x92 * (x105 * x356 + x353 * x93)
    x358 = x165 * x21 + x357
    x359 = x156 * x306
    x360 = x156 * x307 + x359
    x361 = x120 * x360 + x355 * x93
    x362 = x92 * (x112 * x361 + x356 * x93)
    x363 = x168 * x316 + x362
    x364 = x92 * (x353 * x99 + x93 * (x156 * x93 * (x321 + x323) + x351 * x99))
    x365 = x141 * (x327 + x89)
    x366 = x141 * (x329 + x95)
    x367 = x105 * x366 + x365 * x93
    x368 = x141 * (x102 + x332)
    x369 = x112 * x368 + x366 * x93
    x370 = x92 * (x105 * x369 + x367 * x93)
    x371 = x175 * x21 + x370
    x372 = x141 * (x109 + x336)
    x373 = x120 * x372
    x374 = x368 * x93 + x373
    x375 = x92 * (x112 * x374 + x369 * x93)
    x376 = x177 * x316 + x375
    x377 = x141 * (x134 + x349)
    x378 = x92 * (x367 * x99 + x93 * (x365 * x99 + x377 * x93))
    x379 = 2.23606797749979
    x380 = x178 * x379
    x381 = x156 * x89
    x382 = x156 * x326 + x381
    x383 = x156 * x95
    x384 = x156 * x328 + x383
    x385 = x105 * x384 + x382 * x93
    x386 = x102 * x156
    x387 = x156 * x331 + x386
    x388 = x112 * x387 + x384 * x93
    x389 = x92 * (x105 * x388 + x385 * x93)
    x390 = x185 * x21 + x389
    x391 = x109 * x156
    x392 = x156 * x335 + x391
    x393 = x120 * x392
    x394 = x387 * x93 + x393
    x395 = x92 * (x112 * x394 + x388 * x93)
    x396 = x187 * x316 + x395
    x397 = x134 * x156
    x398 = x156 * x348 + x397
    x399 = x92 * (x385 * x99 + x93 * (x382 * x99 + x398 * x93))
    x400 = x154 * x178
    x401 = x190 * (x291 + x293)
    x402 = x190 * (x295 + x297)
    x403 = x92 * (x105 * x402 + x401 * x93)
    x404 = x195 * x21 + x403
    x405 = x190 * x302
    x406 = x190 * x300 + x405
    x407 = x92 * (x112 * x406 + x402 * x93)
    x408 = x197 * x316 + x407
    x409 = x92 * (x190 * x93 * (x321 + x323) + x401 * x99)
    x410 = x141 * x365 + x170 * x89
    x411 = x141 * x366 + x170 * x95
    x412 = x92 * (x105 * x411 + x410 * x93)
    x413 = x202 * x21 + x412
    x414 = x102 * x170 + x141 * x368
    x415 = x92 * (x112 * x414 + x411 * x93)
    x416 = x204 * x316 + x415
    x417 = x134 * x170 + x141 * x377
    x418 = x92 * (x410 * x99 + x417 * x93)
    x419 = x141 * x382 + x180 * x89
    x420 = x141 * x384 + x180 * x95
    x421 = x92 * (x105 * x420 + x419 * x93)
    x422 = x208 * x21 + x421
    x423 = x102 * x180 + x141 * x387
    x424 = x92 * (x112 * x423 + x420 * x93)
    x425 = x210 * x316 + x424
    x426 = x134 * x180 + x141 * x398
    x427 = x92 * (x419 * x99 + x426 * x93)
    x428 = x190 * x89
    x429 = x190 * x326 + x428
    x430 = x190 * x95
    x431 = x190 * x328 + x430
    x432 = x92 * (x105 * x431 + x429 * x93)
    x433 = x21 * x214 + x432
    x434 = x102 * x190
    x435 = x190 * x331 + x434
    x436 = x92 * (x112 * x435 + x431 * x93)
    x437 = x216 * x316 + x436
    x438 = x134 * x190
    x439 = x190 * x348 + x438
    x440 = x92 * (x429 * x99 + x439 * x93)
    x441 = x218 * x92 * (x291 + x293)
    x442 = x21 * x220 + x441
    x443 = x218 * x92 * (x295 + x297)
    x444 = x222 * x316 + x443
    x445 = x218 * x92 * (x321 + x323)
    x446 = x92 * (x141 * x410 + x200 * x89)
    x447 = x21 * x226 + x446
    x448 = x92 * (x141 * x411 + x200 * x95)
    x449 = x21 * x54
    x450 = x224 * x449 + x448
    x451 = x92 * (x134 * x200 + x141 * x417)
    x452 = x92 * (x141 * x419 + x206 * x89)
    x453 = x21 * x232 + x452
    x454 = x92 * (x141 * x420 + x206 * x95)
    x455 = x230 * x449 + x454
    x456 = x92 * (x134 * x206 + x141 * x426)
    x457 = x92 * (x141 * x429 + x212 * x89)
    x458 = x21 * x238 + x457
    x459 = x92 * (x141 * x431 + x212 * x95)
    x460 = x237 * x449 + x459
    x461 = x92 * (x134 * x212 + x141 * x439)
    x462 = x218 * x89
    x463 = x92 * (x218 * x326 + x462)
    x464 = x21 * x243 + x463
    x465 = x218 * x95
    x466 = x92 * (x218 * x328 + x465)
    x467 = x242 * x449 + x466
    x468 = x134 * x218
    x469 = x92 * (x218 * x348 + x468)
    x470 = x245 * x290
    x471 = x21 * x247 + x470
    x472 = x245 * x280
    x473 = x245 * x449 + x472
    x474 = x245 * x320
    x475 = -x11 - A[2]
    x476 = x12 * x35 - 2.0 * x18 * x2 * x20 * x23 * x27 * x28 * x475
    x477 = -x476
    x478 = x16 * x477
    x479 = x12 * x26 - 2.0 * x2 * x20 * x23 * x27 * x28 * x29 * x475
    x480 = -x478 - x479
    x481 = x480 * x6
    x482 = -x479
    x483 = x4 * x478 - x482 * x5
    x484 = -x483
    x485 = x12 * x46 - 2.0 * x2 * x20 * x23 * x27 * x28 * x34 * x475
    x486 = -x485
    x487 = x16 * x486
    x488 = x4 * x487 - x477 * x5
    x489 = -x488
    x490 = x16 * x489
    x491 = x4 * x490
    x492 = x481 + x484 * x5 - x491
    x493 = -x483 - x490
    x494 = -x476 - x487
    x495 = x494 * x6
    x496 = x12 * x62 - 2.0 * x2 * x20 * x23 * x27 * x28 * x45 * x475
    x497 = -x496
    x498 = x16 * x497
    x499 = x4 * x498 - x486 * x5
    x500 = -x499
    x501 = x16 * x500
    x502 = x4 * x501
    x503 = x489 * x5 + x495 - x502
    x504 = x16 * x503
    x505 = x4 * x504
    x506 = x42 * x493 + x492 * x5 - x505
    x507 = -x480 * x6
    x508 = -x6 * (x485 + x498)
    x509 = -x12 * x78 + 2.0 * x2 * x20 * x23 * x27 * x28 * x475 * x61
    x510 = x16 * x509
    x511 = -x4 * x510 + x497 * x5
    x512 = x16 * x511
    x513 = -x4 * x512 + x5 * x500 + x508
    x514 = x16 * x513
    x515 = -x4 * x514 - x42 * (x488 + x501) + x5 * x503
    x516 = x16 * x515
    x517 = -x4 * x516 + x5 * x506 - x57 * (-x484 * x5 + x491 + x504 + x507)
    x518 = x4 * x517
    x519 = x506 * x6
    x520 = 4.0 * x519
    x521 = x518 + x520
    x522 = x4 * x506
    x523 = x492 * x6
    x524 = 3.0 * x523
    x525 = x522 + x524
    x526 = x105 * x525 + x521 * x93
    x527 = x4 * x492
    x528 = x484 * x6
    x529 = 2.0 * x528
    x530 = x527 + x529
    x531 = x112 * x530 + x525 * x93
    x532 = x105 * x531 + x526 * x93
    x533 = x482 * x6
    x534 = x4 * x484
    x535 = x533 + x534
    x536 = x120 * x535 + x530 * x93
    x537 = x112 * x536 + x531 * x93
    x538 = x92 * (x105 * x537 + x532 * x93)
    x539 = x123 * x22 + x538
    x540 = x93 * (x533 + x535)
    x541 = x120 * x540 + x536 * x93
    x542 = x92 * (x112 * x541 + x537 * x93)
    x543 = x22 * x92
    x544 = x126 * x543 + x542
    x545 = -x494 * x6
    x546 = -x6 * (x496 + x510)
    x547 = -x12 * x130 + 2.0 * x2 * x20 * x23 * x27 * x28 * x475 * x77
    x548 = (
        -x131
        * (
            x131
            * (
                x131 * (x131 * (x131 * x547 - x5 * x509) + x5 * x511 + x546)
                + x42 * (x499 + x512)
                - x5 * x513
            )
            + x5 * x515
            - x57 * (-x489 * x5 + x502 + x514 + x545)
        )
        + x5 * x517
        + x74 * (x492 * x5 + 2.0 * x493 * x6 - x505 - x516)
    )
    x549 = x4 * x548
    x550 = x517 * x6
    x551 = 5.0 * x550
    x552 = x92 * (
        x532 * x99 + x93 * (x526 * x99 + x93 * (x521 * x99 + x93 * (x549 + x551)))
    )
    x553 = x141 * (x518 + x520)
    x554 = x141 * (x522 + x524)
    x555 = x105 * x554 + x553 * x93
    x556 = x141 * (x527 + x529)
    x557 = x112 * x556 + x554 * x93
    x558 = x92 * (x105 * x557 + x555 * x93)
    x559 = x150 * x22 + x558
    x560 = x141 * x533
    x561 = x141 * x534 + x560
    x562 = x120 * x561 + x556 * x93
    x563 = x92 * (x112 * x562 + x557 * x93)
    x564 = x153 * x543 + x563
    x565 = x92 * (x555 * x99 + x93 * (x141 * x93 * (x549 + x551) + x553 * x99))
    x566 = x12 * x517 + x89
    x567 = x12 * x506 + x95
    x568 = x105 * x567 + x566 * x93
    x569 = x102 + x12 * x492
    x570 = x112 * x569 + x567 * x93
    x571 = x105 * x570 + x568 * x93
    x572 = x109 + x12 * x484
    x573 = x120 * x572
    x574 = x569 * x93 + x573
    x575 = x112 * x574 + x570 * x93
    x576 = x92 * (x105 * x575 + x571 * x93)
    x577 = x165 * x22 + x576
    x578 = x118 + x12 * x482
    x579 = x136 * x578
    x580 = x572 * x93 + x579
    x581 = x120 * x580 + x574 * x93
    x582 = x92 * (x112 * x581 + x575 * x93)
    x583 = x168 * x543 + x582
    x584 = x12 * x548 + x134
    x585 = x92 * (x571 * x99 + x93 * (x568 * x99 + x93 * (x566 * x99 + x584 * x93)))
    x586 = x170 * (x518 + x520)
    x587 = x170 * (x522 + x524)
    x588 = x92 * (x105 * x587 + x586 * x93)
    x589 = x175 * x22 + x588
    x590 = x170 * (x527 + x529)
    x591 = x92 * (x112 * x590 + x587 * x93)
    x592 = x177 * x543 + x591
    x593 = x92 * (x170 * x93 * (x549 + x551) + x586 * x99)
    x594 = x179 * x4
    x595 = x567 * x74
    x596 = x179 * x595 + x566 * x594
    x597 = x569 * x57
    x598 = x179 * x597 + x567 * x594
    x599 = x92 * (x105 * x598 + x596 * x93)
    x600 = x185 * x22 + x599
    x601 = x179 * x42
    x602 = x569 * x594 + x572 * x601
    x603 = x92 * (x112 * x602 + x598 * x93)
    x604 = x187 * x543 + x603
    x605 = x566 * x98
    x606 = x92 * (x596 * x99 + x93 * (x179 * x605 + x584 * x594))
    x607 = x156 * x566 + x381
    x608 = x156 * x567 + x383
    x609 = x105 * x608 + x607 * x93
    x610 = x156 * x569 + x386
    x611 = x112 * x610 + x608 * x93
    x612 = x92 * (x105 * x611 + x609 * x93)
    x613 = x195 * x22 + x612
    x614 = x156 * x572 + x391
    x615 = x120 * x614
    x616 = x610 * x93 + x615
    x617 = x92 * (x112 * x616 + x611 * x93)
    x618 = x197 * x543 + x617
    x619 = x156 * x584 + x397
    x620 = x92 * (x609 * x99 + x93 * (x607 * x99 + x619 * x93))
    x621 = x200 * x92 * (x518 + x520)
    x622 = x202 * x22 + x621
    x623 = x200 * x92 * (x522 + x524)
    x624 = x204 * x543 + x623
    x625 = x200 * x92 * (x549 + x551)
    x626 = x205 * x4
    x627 = x92 * (x205 * x595 + x566 * x626)
    x628 = x208 * x22 + x627
    x629 = x92 * (x205 * x597 + x567 * x626)
    x630 = x210 * x543 + x629
    x631 = x92 * (x205 * x605 + x584 * x626)
    x632 = x179 * x74
    x633 = x92 * (x594 * x607 + x608 * x632)
    x634 = x214 * x22 + x633
    x635 = x179 * x57
    x636 = x92 * (x594 * x608 + x610 * x635)
    x637 = x216 * x543 + x636
    x638 = x92 * (x179 * x607 * x98 + x594 * x619)
    x639 = x156 * x607 + x428
    x640 = x156 * x608 + x430
    x641 = x92 * (x105 * x640 + x639 * x93)
    x642 = x22 * x220 + x641
    x643 = x156 * x610 + x434
    x644 = x92 * (x112 * x643 + x640 * x93)
    x645 = x222 * x543 + x644
    x646 = x156 * x619 + x438
    x647 = x92 * (x639 * x99 + x646 * x93)
    x648 = x224 * x517
    x649 = x22 * x226 + x648
    x650 = x224 * x506
    x651 = x22 * x54
    x652 = x224 * x651 + x650
    x653 = x224 * x548
    x654 = x229 * x566
    x655 = x22 * x232 + x654
    x656 = x229 * x567
    x657 = x230 * x651 + x656
    x658 = x229 * x584
    x659 = x205 * x607
    x660 = x22 * x238 + x659
    x661 = x205 * x608
    x662 = x237 * x651 + x661
    x663 = x205 * x619
    x664 = x179 * x639
    x665 = x22 * x243 + x664
    x666 = x179 * x640
    x667 = x242 * x651 + x666
    x668 = x179 * x646
    x669 = x92 * (x156 * x639 + x462)
    x670 = x22 * x247 + x669
    x671 = x92 * (x156 * x640 + x465)
    x672 = x245 * x651 + x671
    x673 = x92 * (x156 * x646 + x468)
    x674 = x261 * x9
    x675 = x249 * x251 + x44 - x674
    x676 = x16 * x675
    x677 = x252 * x9
    x678 = x249 * x256 - x55 - x676 - x677
    x679 = x6 * x678
    x680 = x249 * x256 + x31 - x677
    x681 = x4 * x676 - x5 * x680
    x682 = -x681
    x683 = x272 * x9
    x684 = x249 * x260 + x60 - x683
    x685 = x16 * x684
    x686 = x4 * x685 - x5 * x675
    x687 = -x686
    x688 = x16 * x687
    x689 = x4 * x688
    x690 = x5 * x682 + x679 - x689
    x691 = x6 * (x249 * x251 - x674 - x685 - x75)
    x692 = x249 * x271 - x283 * x9 + x76
    x693 = x16 * x692
    x694 = -x4 * x693 + x5 * x684
    x695 = x16 * x694
    x696 = -x4 * x695 + x5 * x687 + x691
    x697 = x16 * x696
    x698 = -x4 * x697 - x42 * (x681 + x688) + x5 * x690
    x699 = x4 * x698
    x700 = x6 * x690
    x701 = 3.0 * x700
    x702 = x699 + x701
    x703 = x4 * x690
    x704 = x6 * x682
    x705 = 2.0 * x704
    x706 = x703 + x705
    x707 = x112 * x706 + x702 * x93
    x708 = x6 * x680
    x709 = x4 * x682
    x710 = x708 + x709
    x711 = x120 * x710 + x706 * x93
    x712 = x112 * x711 + x707 * x93
    x713 = x93 * (x708 + x710)
    x714 = x120 * x713 + x711 * x93
    x715 = x92 * (x112 * x714 + x712 * x93)
    x716 = x21 * x315 + x715
    x717 = x21 * x317 + x716
    x718 = x6 * (-x128 + x249 * x260 - x683 - x693)
    x719 = x16 * x9
    x720 = x129 + x249 * x282 - x319 * x719
    x721 = (
        x131
        * (
            x131 * (x131 * (x131 * x720 - x5 * x692) + x5 * x694 + x718)
            + x42 * (x686 + x695)
            - x5 * x696
        )
        + x5 * x698
        + x57 * (x5 * x682 + x6 * x678 - x689 - x697)
    )
    x722 = x4 * x721
    x723 = x6 * x698
    x724 = 4.0 * x723
    x725 = x92 * (
        x105 * x712 + x93 * (x105 * x707 + x93 * (x105 * x702 + x93 * (x722 + x724)))
    )
    x726 = x21 * x311 + x725
    x727 = x698 * x9
    x728 = 2.0 * x292
    x729 = x727 + x728
    x730 = x690 * x9
    x731 = 2.0 * x296
    x732 = x730 + x731
    x733 = x112 * x732
    x734 = x729 * x93 + x733
    x735 = x682 * x9
    x736 = x302 + x735
    x737 = x120 * x736 + x732 * x93
    x738 = x112 * x737 + x734 * x93
    x739 = x680 * x9
    x740 = 2.0 * x306
    x741 = x739 + x740
    x742 = x136 * x741 + x736 * x93
    x743 = x120 * x742 + x737 * x93
    x744 = x92 * (x112 * x743 + x738 * x93)
    x745 = x21 * x346 + x744
    x746 = x21 * x347 + x745
    x747 = x721 * x9
    x748 = 2.0 * x322
    x749 = x747 + x748
    x750 = x92 * (x105 * x738 + x93 * (x105 * x734 + x93 * (x105 * x729 + x749 * x93)))
    x751 = x21 * x340 + x750
    x752 = x156 * x701
    x753 = x156 * x699 + x752
    x754 = x156 * (x703 + x705)
    x755 = x112 * x754 + x753 * x93
    x756 = x156 * x708
    x757 = x156 * x709 + x756
    x758 = x120 * x757 + x754 * x93
    x759 = x92 * (x112 * x758 + x755 * x93)
    x760 = x21 * x362 + x759
    x761 = x21 * x363 + x760
    x762 = x92 * (x105 * x755 + x93 * (x105 * x753 + x156 * x93 * (x722 + x724)))
    x763 = x21 * x357 + x762
    x764 = x120 * x329 + x141 * x729
    x765 = x120 * x332 + x141 * x732
    x766 = x112 * x765
    x767 = x764 * x93 + x766
    x768 = x141 * x736 + x337
    x769 = x120 * x768 + x765 * x93
    x770 = x92 * (x112 * x769 + x767 * x93)
    x771 = x21 * x375 + x770
    x772 = x21 * x376 + x771
    x773 = x120 * x327 + x141 * x749
    x774 = x92 * (x105 * x767 + x93 * (x105 * x764 + x773 * x93))
    x775 = x21 * x370 + x774
    x776 = x156 * (x727 + x728)
    x777 = x156 * (x730 + x731)
    x778 = x112 * x777
    x779 = x776 * x93 + x778
    x780 = x156 * x735 + x354
    x781 = x120 * x780 + x777 * x93
    x782 = x92 * (x112 * x781 + x779 * x93)
    x783 = x21 * x395 + x782
    x784 = x21 * x396 + x783
    x785 = x156 * (x747 + x748)
    x786 = x92 * (x105 * x779 + x93 * (x105 * x776 + x785 * x93))
    x787 = x21 * x389 + x786
    x788 = x190 * x701
    x789 = x190 * x699 + x788
    x790 = x190 * (x703 + x705)
    x791 = x92 * (x112 * x790 + x789 * x93)
    x792 = x21 * x407 + x791
    x793 = x21 * x408 + x792
    x794 = x92 * (x105 * x789 + x190 * x93 * (x722 + x724))
    x795 = x21 * x403 + x794
    x796 = x120 * x366 + x141 * x764
    x797 = x120 * x368 + x141 * x765
    x798 = x112 * x797
    x799 = x92 * (x796 * x93 + x798)
    x800 = x21 * x415 + x799
    x801 = x21 * x416 + x800
    x802 = x120 * x365 + x141 * x773
    x803 = x92 * (x105 * x796 + x802 * x93)
    x804 = x21 * x412 + x803
    x805 = x120 * x384 + x141 * x776
    x806 = x120 * x387 + x141 * x777
    x807 = x112 * x806
    x808 = x92 * (x805 * x93 + x807)
    x809 = x21 * x424 + x808
    x810 = x21 * x425 + x809
    x811 = x120 * x382 + x141 * x785
    x812 = x92 * (x105 * x805 + x811 * x93)
    x813 = x21 * x421 + x812
    x814 = x190 * (x727 + x728)
    x815 = x190 * (x730 + x731)
    x816 = x112 * x815
    x817 = x92 * (x814 * x93 + x816)
    x818 = x21 * x436 + x817
    x819 = x21 * x437 + x818
    x820 = x190 * (x747 + x748)
    x821 = x92 * (x105 * x814 + x820 * x93)
    x822 = x21 * x432 + x821
    x823 = x218 * x701
    x824 = x92 * (x218 * x699 + x823)
    x825 = x21 * x443 + x824
    x826 = x21 * x444 + x825
    x827 = x218 * x92 * (x722 + x724)
    x828 = x21 * x441 + x827
    x829 = x92 * (x120 * x411 + x141 * x796)
    x830 = x21 * x448 + x829
    x831 = x21 * x450 + x830
    x832 = x92 * (x120 * x410 + x141 * x802)
    x833 = x21 * x446 + x832
    x834 = x92 * (x120 * x420 + x141 * x805)
    x835 = x21 * x454 + x834
    x836 = x21 * x455 + x835
    x837 = x92 * (x120 * x419 + x141 * x811)
    x838 = x21 * x452 + x837
    x839 = x92 * (x120 * x431 + x141 * x814)
    x840 = x21 * x459 + x839
    x841 = x21 * x460 + x840
    x842 = x92 * (x120 * x429 + x141 * x820)
    x843 = x21 * x457 + x842
    x844 = x218 * x92 * (x727 + x728)
    x845 = x21 * x466 + x844
    x846 = x21 * x467 + x845
    x847 = x218 * x92 * (x747 + x748)
    x848 = x21 * x463 + x847
    x849 = x245 * x698
    x850 = x21 * x472 + x849
    x851 = x21 * x473 + x850
    x852 = x245 * x721
    x853 = x21 * x470 + x852
    x854 = -x249 * x477 + x487 * x9
    x855 = -x854
    x856 = x16 * x855
    x857 = -x249 * x482 + x478 * x9
    x858 = -x856 - x857
    x859 = x6 * x858
    x860 = -x857
    x861 = x4 * x856 - x5 * x860
    x862 = -x861
    x863 = -x249 * x486 + x498 * x9
    x864 = -x863
    x865 = x16 * x864
    x866 = x4 * x865 - x5 * x855
    x867 = -x866
    x868 = x16 * x867
    x869 = x4 * x868
    x870 = x5 * x862 + x859 - x869
    x871 = -x6 * (x854 + x865)
    x872 = x249 * x497 - x510 * x9
    x873 = x16 * x872
    x874 = -x4 * x873 + x5 * x864
    x875 = x16 * x874
    x876 = -x4 * x875 + x5 * x867 + x871
    x877 = x16 * x876
    x878 = -x4 * x877 - x42 * (x861 + x868) + x5 * x870
    x879 = x4 * x878 + x57 * x870
    x880 = x42 * x862
    x881 = x4 * x870 + x880
    x882 = x112 * x881 + x879 * x93
    x883 = x6 * x860
    x884 = x4 * x862 + x883
    x885 = x120 * x884 + x881 * x93
    x886 = x112 * x885 + x882 * x93
    x887 = x93 * (x883 + x884)
    x888 = x120 * x887 + x885 * x93
    x889 = x92 * (x112 * x888 + x886 * x93)
    x890 = x22 * x315 + x889
    x891 = x21 * x544 + x890
    x892 = -x6 * (x863 + x873)
    x893 = x249 * x509 - x547 * x719
    x894 = (
        x131
        * (
            x131 * (x131 * (x131 * x893 - x5 * x872) + x5 * x874 + x892)
            + x42 * (x866 + x875)
            - x5 * x876
        )
        + x5 * x878
        + x57 * (x5 * x862 + x6 * x858 - x869 - x877)
    )
    x895 = x92 * (
        x105 * x886
        + x93 * (x105 * x882 + x93 * (x105 * x879 + x93 * (x4 * x894 + x74 * x878)))
    )
    x896 = x22 * x311 + x895
    x897 = 0.009523809523809524 * x138
    x898 = 2.645751311064591 * x897
    x899 = x519 + x878 * x9
    x900 = x523 + x870 * x9
    x901 = x112 * x900 + x899 * x93
    x902 = x528 + x862 * x9
    x903 = x120 * x902
    x904 = x900 * x93 + x903
    x905 = x112 * x904 + x901 * x93
    x906 = x533 + x860 * x9
    x907 = x136 * x906 + x902 * x93
    x908 = x120 * x907 + x904 * x93
    x909 = x92 * (x112 * x908 + x905 * x93)
    x910 = x22 * x346 + x909
    x911 = x21 * x564 + x910
    x912 = x550 + x894 * x9
    x913 = x92 * (x105 * x905 + x93 * (x105 * x901 + x93 * (x105 * x899 + x912 * x93)))
    x914 = x22 * x340 + x913
    x915 = 0.06666666666666667 * x138
    x916 = x12 * x878 + x292
    x917 = x12 * x870 + x296
    x918 = x112 * x917 + x916 * x93
    x919 = x12 * x862 + x301
    x920 = x120 * x919
    x921 = x917 * x93 + x920
    x922 = x112 * x921 + x918 * x93
    x923 = x12 * x860 + x306
    x924 = x136 * x923 + x919 * x93
    x925 = x120 * x924 + x921 * x93
    x926 = x92 * (x112 * x925 + x922 * x93)
    x927 = x22 * x362 + x926
    x928 = x21 * x583 + x927
    x929 = x12 * x894 + x322
    x930 = x92 * (x105 * x922 + x93 * (x105 * x918 + x93 * (x105 * x916 + x929 * x93)))
    x931 = x22 * x357 + x930
    x932 = x141 * (x519 + x899)
    x933 = x141 * (x523 + x900)
    x934 = x112 * x933 + x93 * x932
    x935 = x141 * (x528 + x902)
    x936 = x120 * x935
    x937 = x93 * x933 + x936
    x938 = x92 * (x112 * x937 + x93 * x934)
    x939 = x22 * x375 + x938
    x940 = x21 * x592 + x939
    x941 = x141 * (x550 + x912)
    x942 = x92 * (x105 * x934 + x93 * (x105 * x932 + x93 * x941))
    x943 = x22 * x370 + x942
    x944 = x136 * x567 + x141 * x916
    x945 = x136 * x569 + x141 * x917
    x946 = x112 * x945 + x93 * x944
    x947 = x136 * x572 + x141 * x919
    x948 = x120 * x947
    x949 = x93 * x945 + x948
    x950 = x92 * (x112 * x949 + x93 * x946)
    x951 = x22 * x395 + x950
    x952 = x21 * x604 + x951
    x953 = x136 * x566 + x141 * x929
    x954 = x92 * (x105 * x946 + x93 * (x105 * x944 + x93 * x953))
    x955 = x22 * x389 + x954
    x956 = x379 * x915
    x957 = x156 * (x292 + x916)
    x958 = x156 * (x296 + x917)
    x959 = x112 * x958 + x93 * x957
    x960 = x156 * (x301 + x919)
    x961 = x120 * x960
    x962 = x93 * x958 + x961
    x963 = x92 * (x112 * x962 + x93 * x959)
    x964 = x22 * x407 + x963
    x965 = x21 * x618 + x964
    x966 = x156 * (x322 + x929)
    x967 = x92 * (x105 * x959 + x93 * (x105 * x957 + x93 * x966))
    x968 = x22 * x403 + x967
    x969 = x141 * x932 + x170 * x519
    x970 = x141 * x933 + x170 * x523
    x971 = x92 * (x112 * x970 + x93 * x969)
    x972 = x22 * x415 + x971
    x973 = x21 * x624 + x972
    x974 = x141 * x941 + x170 * x550
    x975 = x92 * (x105 * x969 + x93 * x974)
    x976 = x22 * x412 + x975
    x977 = x179 * x6
    x978 = x141 * x944 + x567 * x977
    x979 = x141 * x945 + x569 * x977
    x980 = x92 * (x112 * x979 + x93 * x978)
    x981 = x22 * x424 + x980
    x982 = x21 * x630 + x981
    x983 = x141 * x953 + x566 * x977
    x984 = x92 * (x105 * x978 + x93 * x983)
    x985 = x22 * x421 + x984
    x986 = x136 * x608 + x141 * x957
    x987 = x136 * x610 + x141 * x958
    x988 = x92 * (x112 * x987 + x93 * x986)
    x989 = x22 * x436 + x988
    x990 = x21 * x637 + x989
    x991 = x136 * x607 + x141 * x966
    x992 = x92 * (x105 * x986 + x93 * x991)
    x993 = x22 * x432 + x992
    x994 = x156 * x957 + x190 * x292
    x995 = x156 * x958 + x190 * x296
    x996 = x92 * (x112 * x995 + x93 * x994)
    x997 = x22 * x443 + x996
    x998 = x21 * x645 + x997
    x999 = x156 * x966 + x190 * x322
    x1000 = x92 * (x105 * x994 + x93 * x999)
    x1001 = x1000 + x22 * x441
    x1002 = x92 * (x141 * x969 + x200 * x519)
    x1003 = x1002 + x22 * x448
    x1004 = x1003 + x21 * x652
    x1005 = x92 * (x141 * x974 + x200 * x550)
    x1006 = x1005 + x22 * x446
    x1007 = x205 * x6
    x1008 = x92 * (x1007 * x567 + x141 * x978)
    x1009 = x1008 + x22 * x454
    x1010 = x1009 + x21 * x657
    x1011 = x92 * (x1007 * x566 + x141 * x983)
    x1012 = x1011 + x22 * x452
    x1013 = x92 * (x141 * x986 + x608 * x977)
    x1014 = x1013 + x22 * x459
    x1015 = x1014 + x21 * x662
    x1016 = x92 * (x141 * x991 + x607 * x977)
    x1017 = x1016 + x22 * x457
    x1018 = x92 * (x136 * x640 + x141 * x994)
    x1019 = x1018 + x22 * x466
    x1020 = x1019 + x21 * x667
    x1021 = x92 * (x136 * x639 + x141 * x999)
    x1022 = x1021 + x22 * x463
    x1023 = x92 * (x156 * x994 + x218 * x292)
    x1024 = x1023 + x22 * x472
    x1025 = x1024 + x21 * x672
    x1026 = x92 * (x156 * x999 + x218 * x322)
    x1027 = x1026 + x22 * x470
    x1028 = x12 * x487
    x1029 = -x1028 + x44 + x475 * x477
    x1030 = x1029 * x16
    x1031 = x12 * x478
    x1032 = -x1030 - x1031 + x475 * x482 - x55
    x1033 = x1032 * x6
    x1034 = -x1031 + x31 + x475 * x482
    x1035 = x1030 * x4 - x1034 * x5
    x1036 = -x1035
    x1037 = x12 * x498
    x1038 = -x1037 + x475 * x486 + x60
    x1039 = x1038 * x16
    x1040 = -x1029 * x5 + x1039 * x4
    x1041 = -x1040
    x1042 = x1041 * x16
    x1043 = x1042 * x4
    x1044 = x1033 + x1036 * x5 - x1043
    x1045 = x6 * (-x1028 - x1039 + x475 * x477 - x75)
    x1046 = -x12 * x510 + x475 * x497 + x76
    x1047 = x1046 * x16
    x1048 = x1038 * x5 - x1047 * x4
    x1049 = x1048 * x16
    x1050 = x1041 * x5 + x1045 - x1049 * x4
    x1051 = x1050 * x16
    x1052 = x1044 * x5 - x1051 * x4 - x42 * (x1035 + x1042)
    x1053 = x1052 * x4
    x1054 = x1044 * x6
    x1055 = 3.0 * x1054
    x1056 = x1053 + x1055
    x1057 = x1044 * x4
    x1058 = x1036 * x6
    x1059 = 2.0 * x1058
    x1060 = x1057 + x1059
    x1061 = x1056 * x93 + x1060 * x112
    x1062 = x1034 * x6
    x1063 = x1036 * x4
    x1064 = x1062 + x1063
    x1065 = x1060 * x93 + x1064 * x120
    x1066 = x1061 * x93 + x1065 * x112
    x1067 = x93 * (x1062 + x1064)
    x1068 = x1065 * x93 + x1067 * x120
    x1069 = x92 * (x1066 * x93 + x1068 * x112)
    x1070 = x1069 + x22 * x542
    x1071 = x1070 + x22 * x544
    x1072 = -x1032 * x6
    x1073 = x6 * (-x1037 - x1047 - x128 + x475 * x486)
    x1074 = x12 * x16
    x1075 = -x1074 * x547 + x129 + x475 * x509
    x1076 = (
        x1052 * x5
        + x131
        * (
            -x1050 * x5
            + x131 * (x1048 * x5 + x1073 - x131 * (x1046 * x5 - x1075 * x131))
            + x42 * (x1040 + x1049)
        )
        - x57 * (-x1036 * x5 + x1043 + x1051 + x1072)
    )
    x1077 = x1076 * x4
    x1078 = x1052 * x6
    x1079 = 4.0 * x1078
    x1080 = x92 * (
        x105 * x1066 + x93 * (x105 * x1061 + x93 * (x105 * x1056 + x93 * (x1077 + x1079)))
    )
    x1081 = x1080 + x22 * x538
    x1082 = x141 * (x1053 + x1055)
    x1083 = x141 * (x1057 + x1059)
    x1084 = x1082 * x93 + x1083 * x112
    x1085 = x1062 * x141
    x1086 = x1063 * x141 + x1085
    x1087 = x1083 * x93 + x1086 * x120
    x1088 = x92 * (x1084 * x93 + x1087 * x112)
    x1089 = x1088 + x22 * x563
    x1090 = x1089 + x22 * x564
    x1091 = x92 * (x105 * x1084 + x93 * (x105 * x1082 + x141 * x93 * (x1077 + x1079)))
    x1092 = x1091 + x22 * x558
    x1093 = x1052 * x12 + 2.0 * x519
    x1094 = x1044 * x12 + 2.0 * x523
    x1095 = x1094 * x112
    x1096 = x1093 * x93 + x1095
    x1097 = x1036 * x12 + x529
    x1098 = x1094 * x93 + x1097 * x120
    x1099 = x1096 * x93 + x1098 * x112
    x1100 = x1034 * x12 + 2.0 * x533
    x1101 = x1100 * x136
    x1102 = x1097 * x93 + x1101
    x1103 = x1098 * x93 + x1102 * x120
    x1104 = x92 * (x1099 * x93 + x1103 * x112)
    x1105 = x1104 + x22 * x582
    x1106 = x1105 + x22 * x583
    x1107 = x1076 * x12 + 2.0 * x550
    x1108 = x92 * (
        x105 * x1099 + x93 * (x105 * x1096 + x93 * (x105 * x1093 + x1107 * x93))
    )
    x1109 = x1108 + x22 * x576
    x1110 = x170 * (x1053 + x1055)
    x1111 = x170 * (x1057 + x1059)
    x1112 = x92 * (x1110 * x93 + x1111 * x112)
    x1113 = x1112 + x22 * x591
    x1114 = x1113 + x22 * x592
    x1115 = x92 * (x105 * x1110 + x170 * x93 * (x1077 + x1079))
    x1116 = x1115 + x22 * x588
    x1117 = x1093 * x594 + x1094 * x635
    x1118 = x1094 * x594 + x1097 * x601
    x1119 = x92 * (x1117 * x93 + x1118 * x112)
    x1120 = x1119 + x22 * x603
    x1121 = x1120 + x22 * x604
    x1122 = x92 * (x105 * x1117 + x93 * (x1093 * x632 + x1107 * x594))
    x1123 = x1122 + x22 * x599
    x1124 = x1093 * x156 + x120 * x567
    x1125 = x1094 * x156 + x120 * x569
    x1126 = x112 * x1125
    x1127 = x1124 * x93 + x1126
    x1128 = x1097 * x156 + x573
    x1129 = x1125 * x93 + x1128 * x120
    x1130 = x92 * (x112 * x1129 + x1127 * x93)
    x1131 = x1130 + x22 * x617
    x1132 = x1131 + x22 * x618
    x1133 = x1107 * x156 + x120 * x566
    x1134 = x92 * (x105 * x1127 + x93 * (x105 * x1124 + x1133 * x93))
    x1135 = x1134 + x22 * x612
    x1136 = x200 * x92 * (x1053 + x1055)
    x1137 = x1136 + x22 * x623
    x1138 = x1137 + x22 * x624
    x1139 = x200 * x92 * (x1077 + x1079)
    x1140 = x1139 + x22 * x621
    x1141 = x205 * x57
    x1142 = x92 * (x1093 * x626 + x1094 * x1141)
    x1143 = x1142 + x22 * x629
    x1144 = x1143 + x22 * x630
    x1145 = x92 * (x1093 * x205 * x74 + x1107 * x626)
    x1146 = x1145 + x22 * x627
    x1147 = x92 * (x1124 * x594 + x1125 * x635)
    x1148 = x1147 + x22 * x636
    x1149 = x1148 + x22 * x637
    x1150 = x92 * (x1124 * x632 + x1133 * x594)
    x1151 = x1150 + x22 * x633
    x1152 = x1124 * x156 + x120 * x608
    x1153 = x1125 * x156 + x120 * x610
    x1154 = x112 * x1153
    x1155 = x92 * (x1152 * x93 + x1154)
    x1156 = x1155 + x22 * x644
    x1157 = x1156 + x22 * x645
    x1158 = x1133 * x156 + x120 * x607
    x1159 = x92 * (x105 * x1152 + x1158 * x93)
    x1160 = x1159 + x22 * x641
    x1161 = x1052 * x224
    x1162 = x1161 + x22 * x650
    x1163 = x1162 + x22 * x652
    x1164 = x1076 * x224
    x1165 = x1164 + x22 * x648
    x1166 = x1093 * x229
    x1167 = x1166 + x22 * x656
    x1168 = x1167 + x22 * x657
    x1169 = x1107 * x229
    x1170 = x1169 + x22 * x654
    x1171 = x1124 * x205
    x1172 = x1171 + x22 * x661
    x1173 = x1172 + x22 * x662
    x1174 = x1133 * x205
    x1175 = x1174 + x22 * x659
    x1176 = x1152 * x179
    x1177 = x1176 + x22 * x666
    x1178 = x1177 + x22 * x667
    x1179 = x1158 * x179
    x1180 = x1179 + x22 * x664
    x1181 = x92 * (x1152 * x156 + x120 * x640)
    x1182 = x1181 + x22 * x671
    x1183 = x1182 + x22 * x672
    x1184 = x92 * (x1158 * x156 + x120 * x639)
    x1185 = x1184 + x22 * x669
    x1186 = x685 * x9
    x1187 = -x1186 + x249 * x675 + 2.0 * x269
    x1188 = x1187 * x16
    x1189 = x676 * x9
    x1190 = x6 * (-x1188 - x1189 + x249 * x680 + 2.0 * x254 * x6)
    x1191 = -x1189 + x249 * x680 + 2.0 * x255
    x1192 = x1188 * x4 - x1191 * x5
    x1193 = -x1192
    x1194 = x249 * x684 + 2.0 * x281 - x693 * x9
    x1195 = x1194 * x16
    x1196 = x1187 * x5 - x1195 * x4
    x1197 = x1196 * x16
    x1198 = x1190 + x1193 * x5 - x1197 * x4
    x1199 = x6 * (-x1186 - x1195 + x249 * x675 + 2.0 * x268 * x6)
    x1200 = x249 * x692 + 2.0 * x318 - x719 * x720
    x1201 = (
        x1198 * x5
        - x131 * (x1196 * x5 + x1199 - x131 * (x1194 * x5 - x1200 * x131))
        - x42 * (x1192 + x1197)
    )
    x1202 = x1201 * x4
    x1203 = x1198 * x6
    x1204 = 3.0 * x1203
    x1205 = x1198 * x4
    x1206 = x1193 * x6
    x1207 = 2.0 * x1206
    x1208 = x1205 + x1207
    x1209 = x1191 * x6
    x1210 = x1193 * x4
    x1211 = x1209 + x1210
    x1212 = x120 * x1211 + x1208 * x93
    x1213 = x93 * (x1209 + x1211)
    x1214 = x120 * x1213 + x1212 * x93
    x1215 = x92 * (
        x112 * x1214 + x93 * (x112 * x1212 + x93 * (x112 * x1208 + x93 * (x1202 + x1204)))
    )
    x1216 = x1215 + x21 * x715
    x1217 = x1216 + x21 * x716
    x1218 = x1201 * x9
    x1219 = 3.0 * x723
    x1220 = x1218 + x1219
    x1221 = x1198 * x9
    x1222 = x1221 + x701
    x1223 = x1193 * x9
    x1224 = 3.0 * x704
    x1225 = x1223 + x1224
    x1226 = x120 * x1225 + x1222 * x93
    x1227 = x1191 * x9
    x1228 = 3.0 * x708
    x1229 = x1227 + x1228
    x1230 = x1225 * x93 + x1229 * x136
    x1231 = x120 * x1230 + x1226 * x93
    x1232 = x92 * (
        x112 * x1231 + x93 * (x112 * x1226 + x93 * (x112 * x1222 + x1220 * x93))
    )
    x1233 = x1232 + x21 * x744
    x1234 = x1233 + x21 * x745
    x1235 = x156 * (x1205 + x1207)
    x1236 = x1209 * x156
    x1237 = x1210 * x156 + x1236
    x1238 = x120 * x1237 + x1235 * x93
    x1239 = x92 * (x112 * x1238 + x93 * (x112 * x1235 + x156 * x93 * (x1202 + x1204)))
    x1240 = x1239 + x21 * x759
    x1241 = x1240 + x21 * x760
    x1242 = x112 * x729 + x1220 * x141
    x1243 = x1222 * x141 + x733
    x1244 = x112 * x736 + x1225 * x141
    x1245 = x120 * x1244 + x1243 * x93
    x1246 = x92 * (x112 * x1245 + x93 * (x112 * x1243 + x1242 * x93))
    x1247 = x1246 + x21 * x770
    x1248 = x1247 + x21 * x771
    x1249 = x156 * (x1218 + x1219)
    x1250 = x1221 * x156 + x752
    x1251 = x156 * (x1223 + x1224)
    x1252 = x120 * x1251 + x1250 * x93
    x1253 = x92 * (x112 * x1252 + x93 * (x112 * x1250 + x1249 * x93))
    x1254 = x1253 + x21 * x782
    x1255 = x1254 + x21 * x783
    x1256 = x190 * (x1205 + x1207)
    x1257 = x92 * (x112 * x1256 + x190 * x93 * (x1202 + x1204))
    x1258 = x1257 + x21 * x791
    x1259 = x1258 + x21 * x792
    x1260 = x112 * x764 + x1242 * x141
    x1261 = x1243 * x141 + x766
    x1262 = x92 * (x112 * x1261 + x1260 * x93)
    x1263 = x1262 + x21 * x799
    x1264 = x1263 + x21 * x800
    x1265 = x112 * x776 + x1249 * x141
    x1266 = x1250 * x141 + x778
    x1267 = x92 * (x112 * x1266 + x1265 * x93)
    x1268 = x1267 + x21 * x808
    x1269 = x1268 + x21 * x809
    x1270 = x190 * (x1218 + x1219)
    x1271 = x1221 * x190 + x788
    x1272 = x92 * (x112 * x1271 + x1270 * x93)
    x1273 = x1272 + x21 * x817
    x1274 = x1273 + x21 * x818
    x1275 = x218 * x92 * (x1202 + x1204)
    x1276 = x1275 + x21 * x824
    x1277 = x1276 + x21 * x825
    x1278 = x92 * (x112 * x796 + x1260 * x141)
    x1279 = x1278 + x21 * x829
    x1280 = x1279 + x21 * x830
    x1281 = x92 * (x112 * x805 + x1265 * x141)
    x1282 = x1281 + x21 * x834
    x1283 = x1282 + x21 * x835
    x1284 = x92 * (x112 * x814 + x1270 * x141)
    x1285 = x1284 + x21 * x839
    x1286 = x1285 + x21 * x840
    x1287 = x218 * x92 * (x1218 + x1219)
    x1288 = x1287 + x21 * x844
    x1289 = x1288 + x21 * x845
    x1290 = x1201 * x245
    x1291 = x1290 + x21 * x849
    x1292 = x1291 + x21 * x850
    x1293 = x865 * x9
    x1294 = -x1293 + x249 * x855 + x495
    x1295 = x1294 * x16
    x1296 = x856 * x9
    x1297 = x6 * (-x1295 - x1296 + x249 * x860 - x507)
    x1298 = -x1296 + x249 * x860 + x481
    x1299 = x1295 * x4 - x1298 * x5
    x1300 = -x1299
    x1301 = x249 * x864 + x508 - x873 * x9
    x1302 = x1301 * x16
    x1303 = x1294 * x5 - x1302 * x4
    x1304 = x1303 * x16
    x1305 = x1297 + x1300 * x5 - x1304 * x4
    x1306 = x6 * (-x1293 - x1302 + x249 * x855 - x545)
    x1307 = x249 * x872 + x546 - x719 * x893
    x1308 = (
        x1305 * x5
        - x131 * (x1303 * x5 + x1306 - x131 * (x1301 * x5 - x1307 * x131))
        - x42 * (x1299 + x1304)
    )
    x1309 = x1305 * x57
    x1310 = x1300 * x42
    x1311 = x1305 * x4 + x1310
    x1312 = x1298 * x6
    x1313 = x1300 * x4 + x1312
    x1314 = x120 * x1313 + x1311 * x93
    x1315 = x93 * (x1312 + x1313)
    x1316 = x120 * x1315 + x1314 * x93
    x1317 = x92 * (
        x112 * x1316
        + x93 * (x112 * x1314 + x93 * (x112 * x1311 + x93 * (x1308 * x4 + x1309)))
    )
    x1318 = x1317 + x22 * x715
    x1319 = x1318 + x21 * x890
    x1320 = x42 * x878
    x1321 = x1308 * x9 + x1320
    x1322 = x42 * x870
    x1323 = x1305 * x9 + x1322
    x1324 = x112 * x1323
    x1325 = x1300 * x9 + x880
    x1326 = x120 * x1325 + x1323 * x93
    x1327 = 2.0 * x883
    x1328 = x1298 * x9 + x1327
    x1329 = x1325 * x93 + x1328 * x136
    x1330 = x120 * x1329 + x1326 * x93
    x1331 = x92 * (x112 * x1330 + x93 * (x112 * x1326 + x93 * (x1321 * x93 + x1324)))
    x1332 = x1331 + x22 * x744
    x1333 = x1332 + x21 * x910
    x1334 = x12 * x1308 + x723
    x1335 = x12 * x1305 + x700
    x1336 = x112 * x1335
    x1337 = x12 * x1300 + x704
    x1338 = x120 * x1337
    x1339 = x1335 * x93 + x1338
    x1340 = x12 * x1298 + x708
    x1341 = x1337 * x93 + x1340 * x136
    x1342 = x120 * x1341 + x1339 * x93
    x1343 = x92 * (x112 * x1342 + x93 * (x112 * x1339 + x93 * (x1334 * x93 + x1336)))
    x1344 = x1343 + x22 * x759
    x1345 = x1344 + x21 * x927
    x1346 = x120 * x899 + x1321 * x141
    x1347 = x120 * x900 + x1323 * x141
    x1348 = x112 * x1347
    x1349 = x1325 * x141 + x903
    x1350 = x120 * x1349 + x1347 * x93
    x1351 = x92 * (x112 * x1350 + x93 * (x1346 * x93 + x1348))
    x1352 = x1351 + x22 * x770
    x1353 = x1352 + x21 * x939
    x1354 = x120 * x916
    x1355 = x1334 * x141 + x1354
    x1356 = x120 * x917
    x1357 = x1335 * x141 + x1356
    x1358 = x112 * x1357
    x1359 = x1337 * x141 + x920
    x1360 = x120 * x1359 + x1357 * x93
    x1361 = x92 * (x112 * x1360 + x93 * (x1355 * x93 + x1358))
    x1362 = x1361 + x22 * x782
    x1363 = x1362 + x21 * x951
    x1364 = x156 * (x1334 + x723)
    x1365 = x156 * (x1335 + x700)
    x1366 = x112 * x1365
    x1367 = x156 * (x1337 + x704)
    x1368 = x120 * x1367
    x1369 = x1365 * x93 + x1368
    x1370 = x92 * (x112 * x1369 + x93 * (x1364 * x93 + x1366))
    x1371 = x1370 + x22 * x791
    x1372 = x1371 + x21 * x964
    x1373 = x120 * x932 + x1346 * x141
    x1374 = x120 * x933 + x1347 * x141
    x1375 = x112 * x1374
    x1376 = x92 * (x1373 * x93 + x1375)
    x1377 = x1376 + x22 * x799
    x1378 = x1377 + x21 * x972
    x1379 = x120 * x944 + x1355 * x141
    x1380 = x120 * x945 + x1357 * x141
    x1381 = x112 * x1380
    x1382 = x92 * (x1379 * x93 + x1381)
    x1383 = x1382 + x22 * x808
    x1384 = x1383 + x21 * x981
    x1385 = x120 * x957
    x1386 = x1364 * x141 + x1385
    x1387 = x120 * x958
    x1388 = x1365 * x141 + x1387
    x1389 = x112 * x1388
    x1390 = x92 * (x1386 * x93 + x1389)
    x1391 = x1390 + x22 * x817
    x1392 = x1391 + x21 * x989
    x1393 = x1364 * x156 + x190 * x723
    x1394 = x1365 * x156 + x190 * x700
    x1395 = x112 * x1394
    x1396 = x92 * (x1393 * x93 + x1395)
    x1397 = x1396 + x22 * x824
    x1398 = x1397 + x21 * x997
    x1399 = x92 * (x120 * x969 + x1373 * x141)
    x1400 = x1399 + x22 * x829
    x1401 = x1003 * x21 + x1400
    x1402 = x92 * (x120 * x978 + x1379 * x141)
    x1403 = x1402 + x22 * x834
    x1404 = x1009 * x21 + x1403
    x1405 = x92 * (x120 * x986 + x1386 * x141)
    x1406 = x1405 + x22 * x839
    x1407 = x1014 * x21 + x1406
    x1408 = x120 * x994
    x1409 = x92 * (x1393 * x141 + x1408)
    x1410 = x1409 + x22 * x844
    x1411 = x1019 * x21 + x1410
    x1412 = x92 * (x1393 * x156 + x218 * x723)
    x1413 = x1412 + x22 * x849
    x1414 = x1024 * x21 + x1413
    x1415 = -x1029 * x249 + x1039 * x9
    x1416 = -x1415
    x1417 = x1416 * x16
    x1418 = x1030 * x9 - x1034 * x249
    x1419 = -x6 * (x1417 + x1418)
    x1420 = -x1418
    x1421 = x1417 * x4 - x1420 * x5
    x1422 = -x1421
    x1423 = x1038 * x249 - x1047 * x9
    x1424 = x1423 * x16
    x1425 = x1416 * x5 - x1424 * x4
    x1426 = x1425 * x16
    x1427 = x1419 + x1422 * x5 - x1426 * x4
    x1428 = -x6 * (x1415 + x1424)
    x1429 = x1046 * x249 - x1075 * x719
    x1430 = (
        -x131 * (x131 * (x131 * x1429 - x1423 * x5) + x1425 * x5 + x1428)
        + x1427 * x5
        - x42 * (x1421 + x1426)
    )
    x1431 = x1427 * x57
    x1432 = x1422 * x42
    x1433 = x1427 * x4 + x1432
    x1434 = x1420 * x6
    x1435 = x1422 * x4 + x1434
    x1436 = x120 * x1435 + x1433 * x93
    x1437 = x93 * (x1434 + x1435)
    x1438 = x120 * x1437 + x1436 * x93
    x1439 = x92 * (
        x112 * x1438
        + x93 * (x112 * x1436 + x93 * (x112 * x1433 + x93 * (x1430 * x4 + x1431)))
    )
    x1440 = x1439 + x22 * x889
    x1441 = x1440 + x22 * x890
    x1442 = x1078 + x1430 * x9
    x1443 = x1054 + x1427 * x9
    x1444 = x1058 + x1422 * x9
    x1445 = x120 * x1444
    x1446 = x1443 * x93 + x1445
    x1447 = x1062 + x1420 * x9
    x1448 = x136 * x1447 + x1444 * x93
    x1449 = x120 * x1448 + x1446 * x93
    x1450 = x92 * (
        x112 * x1449 + x93 * (x112 * x1446 + x93 * (x112 * x1443 + x1442 * x93))
    )
    x1451 = x1450 + x22 * x909
    x1452 = x1451 + x22 * x910
    x1453 = x12 * x1430 + x1320
    x1454 = x12 * x1427 + x1322
    x1455 = x112 * x1454
    x1456 = x12 * x1422 + x880
    x1457 = x120 * x1456
    x1458 = x1454 * x93 + x1457
    x1459 = x12 * x1420 + x1327
    x1460 = x136 * x1459 + x1456 * x93
    x1461 = x120 * x1460 + x1458 * x93
    x1462 = x92 * (x112 * x1461 + x93 * (x112 * x1458 + x93 * (x1453 * x93 + x1455)))
    x1463 = x1462 + x22 * x926
    x1464 = x1463 + x22 * x927
    x1465 = x141 * (x1078 + x1442)
    x1466 = x141 * (x1054 + x1443)
    x1467 = x141 * (x1058 + x1444)
    x1468 = x120 * x1467
    x1469 = x1466 * x93 + x1468
    x1470 = x92 * (x112 * x1469 + x93 * (x112 * x1466 + x1465 * x93))
    x1471 = x1470 + x22 * x938
    x1472 = x1471 + x22 * x939
    x1473 = x1093 * x136 + x141 * x1453
    x1474 = x1094 * x136 + x141 * x1454
    x1475 = x1097 * x136 + x141 * x1456
    x1476 = x120 * x1475
    x1477 = x1474 * x93 + x1476
    x1478 = x92 * (x112 * x1477 + x93 * (x112 * x1474 + x1473 * x93))
    x1479 = x1478 + x22 * x950
    x1480 = x1479 + x22 * x951
    x1481 = x1354 + x1453 * x156
    x1482 = x1356 + x1454 * x156
    x1483 = x112 * x1482
    x1484 = x1456 * x156 + x920
    x1485 = x120 * x1484
    x1486 = x1482 * x93 + x1485
    x1487 = x92 * (x112 * x1486 + x93 * (x1481 * x93 + x1483))
    x1488 = x1487 + x22 * x963
    x1489 = x1488 + x22 * x964
    x1490 = x1078 * x170 + x141 * x1465
    x1491 = x1054 * x170 + x141 * x1466
    x1492 = x92 * (x112 * x1491 + x1490 * x93)
    x1493 = x1492 + x22 * x971
    x1494 = x1493 + x22 * x972
    x1495 = x1093 * x977 + x141 * x1473
    x1496 = x1094 * x977 + x141 * x1474
    x1497 = x92 * (x112 * x1496 + x1495 * x93)
    x1498 = x1497 + x22 * x980
    x1499 = x1498 + x22 * x981
    x1500 = x1124 * x136 + x141 * x1481
    x1501 = x1125 * x136 + x141 * x1482
    x1502 = x92 * (x112 * x1501 + x1500 * x93)
    x1503 = x1502 + x22 * x988
    x1504 = x1503 + x22 * x989
    x1505 = x1385 + x1481 * x156
    x1506 = x1387 + x1482 * x156
    x1507 = x112 * x1506
    x1508 = x92 * (x1505 * x93 + x1507)
    x1509 = x1508 + x22 * x996
    x1510 = x1509 + x22 * x997
    x1511 = x92 * (x1078 * x200 + x141 * x1490)
    x1512 = x1002 * x22 + x1511
    x1513 = x1003 * x22 + x1512
    x1514 = x92 * (x1007 * x1093 + x141 * x1495)
    x1515 = x1008 * x22 + x1514
    x1516 = x1009 * x22 + x1515
    x1517 = x92 * (x1124 * x977 + x141 * x1500)
    x1518 = x1013 * x22 + x1517
    x1519 = x1014 * x22 + x1518
    x1520 = x92 * (x1152 * x136 + x141 * x1505)
    x1521 = x1018 * x22 + x1520
    x1522 = x1019 * x22 + x1521
    x1523 = x92 * (x1408 + x1505 * x156)
    x1524 = x1023 * x22 + x1523
    x1525 = x1024 * x22 + x1524
    x1526 = x1039 * x12
    x1527 = x1029 * x475 - x1526 + 2.0 * x495
    x1528 = x1527 * x16
    x1529 = x1030 * x12
    x1530 = x6 * (x1034 * x475 - x1528 - x1529 + 2.0 * x480 * x6)
    x1531 = x1034 * x475 - x1529 + 2.0 * x481
    x1532 = x1528 * x4 - x1531 * x5
    x1533 = -x1532
    x1534 = x1038 * x475 - x1047 * x12 + 2.0 * x508
    x1535 = x1534 * x16
    x1536 = x1527 * x5 - x1535 * x4
    x1537 = x1536 * x16
    x1538 = x1530 + x1533 * x5 - x1537 * x4
    x1539 = x6 * (x1029 * x475 - x1526 - x1535 + 2.0 * x494 * x6)
    x1540 = x1046 * x475 - x1074 * x1075 + 2.0 * x546
    x1541 = (
        -x131 * (x131 * (x131 * x1540 - x1534 * x5) + x1536 * x5 + x1539)
        + x1538 * x5
        - x42 * (x1532 + x1537)
    )
    x1542 = x1541 * x4
    x1543 = x1538 * x6
    x1544 = 3.0 * x1543
    x1545 = x1538 * x4
    x1546 = x1533 * x6
    x1547 = 2.0 * x1546
    x1548 = x1545 + x1547
    x1549 = x1531 * x6
    x1550 = x1533 * x4
    x1551 = x1549 + x1550
    x1552 = x120 * x1551 + x1548 * x93
    x1553 = x93 * (x1549 + x1551)
    x1554 = x120 * x1553 + x1552 * x93
    x1555 = x92 * (
        x112 * x1554 + x93 * (x112 * x1552 + x93 * (x112 * x1548 + x93 * (x1542 + x1544)))
    )
    x1556 = x1069 * x22 + x1555
    x1557 = x1070 * x22 + x1556
    x1558 = x141 * (x1545 + x1547)
    x1559 = x141 * x1549
    x1560 = x141 * x1550 + x1559
    x1561 = x120 * x1560 + x1558 * x93
    x1562 = x92 * (x112 * x1561 + x93 * (x112 * x1558 + x141 * x93 * (x1542 + x1544)))
    x1563 = x1088 * x22 + x1562
    x1564 = x1089 * x22 + x1563
    x1565 = 3.0 * x1078 + x12 * x1541
    x1566 = x1055 + x12 * x1538
    x1567 = 3.0 * x1058 + x12 * x1533
    x1568 = x120 * x1567 + x1566 * x93
    x1569 = 3.0 * x1062 + x12 * x1531
    x1570 = x136 * x1569
    x1571 = x1567 * x93 + x1570
    x1572 = x120 * x1571 + x1568 * x93
    x1573 = x92 * (
        x112 * x1572 + x93 * (x112 * x1568 + x93 * (x112 * x1566 + x1565 * x93))
    )
    x1574 = x1104 * x22 + x1573
    x1575 = x1105 * x22 + x1574
    x1576 = x170 * (x1545 + x1547)
    x1577 = x92 * (x112 * x1576 + x170 * x93 * (x1542 + x1544))
    x1578 = x1112 * x22 + x1577
    x1579 = x1113 * x22 + x1578
    x1580 = x1566 * x594 + x1567 * x601
    x1581 = x92 * (x112 * x1580 + x93 * (x1565 * x594 + x1566 * x635))
    x1582 = x1119 * x22 + x1581
    x1583 = x1120 * x22 + x1582
    x1584 = x1093 * x112 + x156 * x1565
    x1585 = x1095 + x156 * x1566
    x1586 = x1097 * x112 + x156 * x1567
    x1587 = x120 * x1586 + x1585 * x93
    x1588 = x92 * (x112 * x1587 + x93 * (x112 * x1585 + x1584 * x93))
    x1589 = x1130 * x22 + x1588
    x1590 = x1131 * x22 + x1589
    x1591 = x200 * x92 * (x1542 + x1544)
    x1592 = x1136 * x22 + x1591
    x1593 = x1137 * x22 + x1592
    x1594 = x92 * (x1141 * x1566 + x1565 * x626)
    x1595 = x1142 * x22 + x1594
    x1596 = x1143 * x22 + x1595
    x1597 = x92 * (x1584 * x594 + x1585 * x635)
    x1598 = x1147 * x22 + x1597
    x1599 = x1148 * x22 + x1598
    x1600 = x112 * x1124 + x156 * x1584
    x1601 = x1126 + x156 * x1585
    x1602 = x92 * (x112 * x1601 + x1600 * x93)
    x1603 = x1155 * x22 + x1602
    x1604 = x1156 * x22 + x1603
    x1605 = x1541 * x224
    x1606 = x1161 * x22 + x1605
    x1607 = x1162 * x22 + x1606
    x1608 = x1565 * x229
    x1609 = x1166 * x22 + x1608
    x1610 = x1167 * x22 + x1609
    x1611 = x1584 * x205
    x1612 = x1171 * x22 + x1611
    x1613 = x1172 * x22 + x1612
    x1614 = x1600 * x179
    x1615 = x1176 * x22 + x1614
    x1616 = x1177 * x22 + x1615
    x1617 = x92 * (x112 * x1152 + x156 * x1600)
    x1618 = x1181 * x22 + x1617
    x1619 = x1182 * x22 + x1618
    x1620 = x0 * x315 + x311
    x1621 = x169 * x7
    x1622 = x120 * (x1621 * x306 + x313 * x93) + x314 * x93
    x1623 = x0 * x346 + x340
    x1624 = x169 * x4
    x1625 = x1624 * x6
    x1626 = x120 * (x1625 * x343 + x344 * x93) + x345 * x93
    x1627 = x0 * x362 + x357
    x1628 = x12 * x1624
    x1629 = x120 * (x1628 * x306 + x360 * x93) + x361 * x93
    x1630 = x0 * x375 + x370
    x1631 = x141 * x343 + x152
    x1632 = x120 * (x136 * x1631 + x372 * x93) + x374 * x93
    x1633 = x0 * x395 + x389
    x1634 = x156 * x342 + x167
    x1635 = x120 * (x136 * x1634 + x392 * x93) + x394 * x93
    x1636 = x0 * x407 + x403
    x1637 = x190 * x306
    x1638 = x120 * (x1637 + x190 * x307) + x406 * x93
    x1639 = x0 * x415 + x412
    x1640 = x120 * (x109 * x170 + x141 * x372)
    x1641 = x1640 + x414 * x93
    x1642 = x0 * x424 + x421
    x1643 = x120 * (x109 * x180 + x141 * x392)
    x1644 = x1643 + x423 * x93
    x1645 = x0 * x436 + x432
    x1646 = x109 * x190
    x1647 = x120 * (x1646 + x190 * x335)
    x1648 = x1647 + x435 * x93
    x1649 = x0 * x443 + x441
    x1650 = x218 * x302
    x1651 = x1650 + x218 * x300
    x1652 = x0 * x448 + x446
    x1653 = x102 * x200 + x141 * x414
    x1654 = x0 * x454 + x452
    x1655 = x102 * x206 + x141 * x423
    x1656 = x0 * x459 + x457
    x1657 = x102 * x212 + x141 * x435
    x1658 = x0 * x466 + x463
    x1659 = x102 * x218
    x1660 = x1659 + x218 * x331
    x1661 = x0 * x472 + x470
    x1662 = x245 * x266
    x1663 = x1621 * x708 + x713 * x93
    x1664 = x92 * (x120 * x1663 + x714 * x93)
    x1665 = x1622 * x316 + x1664
    x1666 = 0.003174603174603175 * x139
    x1667 = x1625 * x741 + x742 * x93
    x1668 = x92 * (x120 * x1667 + x743 * x93)
    x1669 = x1626 * x316 + x1668
    x1670 = x1628 * x708 + x757 * x93
    x1671 = x92 * (x120 * x1670 + x758 * x93)
    x1672 = x1629 * x316 + x1671
    x1673 = x120 * x343 + x141 * x741
    x1674 = x136 * x1673 + x768 * x93
    x1675 = x92 * (x120 * x1674 + x769 * x93)
    x1676 = x1632 * x316 + x1675
    x1677 = 0.1111111111111111 * x138
    x1678 = x156 * (x739 + x740)
    x1679 = x136 * x1678 + x780 * x93
    x1680 = x92 * (x120 * x1679 + x781 * x93)
    x1681 = x1635 * x316 + x1680
    x1682 = x1677 * x188
    x1683 = x190 * x708
    x1684 = x1683 + x190 * x709
    x1685 = x92 * (x120 * x1684 + x790 * x93)
    x1686 = x1638 * x316 + x1685
    x1687 = x141 * x768 + x373
    x1688 = x92 * (x120 * x1687 + x797 * x93)
    x1689 = x1641 * x316 + x1688
    x1690 = x141 * x780 + x393
    x1691 = x92 * (x120 * x1690 + x806 * x93)
    x1692 = x1644 * x316 + x1691
    x1693 = x190 * x735 + x405
    x1694 = x92 * (x120 * x1693 + x815 * x93)
    x1695 = x1648 * x316 + x1694
    x1696 = x218 * x92 * (x703 + x705)
    x1697 = x1651 * x316 + x1696
    x1698 = x92 * (x120 * x414 + x141 * x797)
    x1699 = x1653 * x316 + x1698
    x1700 = x92 * (x120 * x423 + x141 * x806)
    x1701 = x1655 * x316 + x1700
    x1702 = x92 * (x120 * x435 + x141 * x815)
    x1703 = x1657 * x316 + x1702
    x1704 = x218 * x92 * (x730 + x731)
    x1705 = x1660 * x316 + x1704
    x1706 = x245 * x690
    x1707 = x1662 * x21 + x1706
    x1708 = x1621 * x883 + x887 * x93
    x1709 = x92 * (x120 * x1708 + x888 * x93)
    x1710 = x1622 * x543 + x1709
    x1711 = x1625 * x906 + x907 * x93
    x1712 = x92 * (x120 * x1711 + x908 * x93)
    x1713 = x1626 * x543 + x1712
    x1714 = x1625 * x923 + x924 * x93
    x1715 = x92 * (x120 * x1714 + x925 * x93)
    x1716 = x1629 * x543 + x1715
    x1717 = x141 * x906 + x560
    x1718 = x136 * x1717 + x93 * x935
    x1719 = x92 * (x120 * x1718 + x93 * x937)
    x1720 = x1632 * x543 + x1719
    x1721 = x141 * x923 + x579
    x1722 = x136 * x1721 + x93 * x947
    x1723 = x92 * (x120 * x1722 + x93 * x949)
    x1724 = x1635 * x543 + x1723
    x1725 = x156 * x923 + x359
    x1726 = x136 * x1725 + x93 * x960
    x1727 = x92 * (x120 * x1726 + x93 * x962)
    x1728 = x1638 * x543 + x1727
    x1729 = x141 * x935 + x170 * x528
    x1730 = x120 * x1729
    x1731 = x92 * (x1730 + x93 * x970)
    x1732 = x1641 * x543 + x1731
    x1733 = x141 * x947 + x572 * x977
    x1734 = x120 * x1733
    x1735 = x92 * (x1734 + x93 * x979)
    x1736 = x1644 * x543 + x1735
    x1737 = x136 * x614 + x141 * x960
    x1738 = x120 * x1737
    x1739 = x92 * (x1738 + x93 * x987)
    x1740 = x1648 * x543 + x1739
    x1741 = x156 * x960 + x190 * x301
    x1742 = x120 * x1741
    x1743 = x92 * (x1742 + x93 * x995)
    x1744 = x1651 * x543 + x1743
    x1745 = x92 * (x141 * x970 + x200 * x523)
    x1746 = x1653 * x543 + x1745
    x1747 = x92 * (x1007 * x569 + x141 * x979)
    x1748 = x1655 * x543 + x1747
    x1749 = x92 * (x141 * x987 + x610 * x977)
    x1750 = x1657 * x543 + x1749
    x1751 = x92 * (x136 * x643 + x141 * x995)
    x1752 = x1660 * x543 + x1751
    x1753 = x92 * (x156 * x995 + x218 * x296)
    x1754 = x1662 * x22 + x1753
    x1755 = x1209 * x1621 + x1213 * x93
    x1756 = x92 * (x120 * x1755 + x1214 * x93)
    x1757 = x1664 * x21 + x1756
    x1758 = x1665 * x21 + x1757
    x1759 = x1229 * x1625 + x1230 * x93
    x1760 = x92 * (x120 * x1759 + x1231 * x93)
    x1761 = x1668 * x21 + x1760
    x1762 = x1669 * x21 + x1761
    x1763 = x1209 * x1628 + x1237 * x93
    x1764 = x92 * (x120 * x1763 + x1238 * x93)
    x1765 = x1671 * x21 + x1764
    x1766 = x1672 * x21 + x1765
    x1767 = x112 * x741 + x1229 * x141
    x1768 = x1244 * x93 + x136 * x1767
    x1769 = x92 * (x120 * x1768 + x1245 * x93)
    x1770 = x1675 * x21 + x1769
    x1771 = x1676 * x21 + x1770
    x1772 = x156 * (x1227 + x1228)
    x1773 = x1251 * x93 + x136 * x1772
    x1774 = x92 * (x120 * x1773 + x1252 * x93)
    x1775 = x1680 * x21 + x1774
    x1776 = x1681 * x21 + x1775
    x1777 = x1209 * x190
    x1778 = x1210 * x190 + x1777
    x1779 = x92 * (x120 * x1778 + x1256 * x93)
    x1780 = x1685 * x21 + x1779
    x1781 = x1686 * x21 + x1780
    x1782 = x112 * x768 + x1244 * x141
    x1783 = x92 * (x120 * x1782 + x1261 * x93)
    x1784 = x1688 * x21 + x1783
    x1785 = x1689 * x21 + x1784
    x1786 = x112 * x780 + x1251 * x141
    x1787 = x92 * (x120 * x1786 + x1266 * x93)
    x1788 = x1691 * x21 + x1787
    x1789 = x1692 * x21 + x1788
    x1790 = x190 * (x1223 + x1224)
    x1791 = x92 * (x120 * x1790 + x1271 * x93)
    x1792 = x1694 * x21 + x1791
    x1793 = x1695 * x21 + x1792
    x1794 = x218 * x92 * (x1205 + x1207)
    x1795 = x1696 * x21 + x1794
    x1796 = x1697 * x21 + x1795
    x1797 = x92 * (x1261 * x141 + x798)
    x1798 = x1698 * x21 + x1797
    x1799 = x1699 * x21 + x1798
    x1800 = x92 * (x1266 * x141 + x807)
    x1801 = x1700 * x21 + x1800
    x1802 = x1701 * x21 + x1801
    x1803 = x92 * (x1271 * x141 + x816)
    x1804 = x1702 * x21 + x1803
    x1805 = x1703 * x21 + x1804
    x1806 = x92 * (x1221 * x218 + x823)
    x1807 = x1704 * x21 + x1806
    x1808 = x1705 * x21 + x1807
    x1809 = x1198 * x245
    x1810 = x1706 * x21 + x1809
    x1811 = x1707 * x21 + x1810
    x1812 = x1312 * x1621 + x1315 * x93
    x1813 = x92 * (x120 * x1812 + x1316 * x93)
    x1814 = x1664 * x22 + x1813
    x1815 = x1710 * x21 + x1814
    x1816 = 5.916079783099616 * x897
    x1817 = x1328 * x1625 + x1329 * x93
    x1818 = x92 * (x120 * x1817 + x1330 * x93)
    x1819 = x1668 * x22 + x1818
    x1820 = x1713 * x21 + x1819
    x1821 = x1340 * x1625 + x1341 * x93
    x1822 = x92 * (x120 * x1821 + x1342 * x93)
    x1823 = x1671 * x22 + x1822
    x1824 = x1716 * x21 + x1823
    x1825 = x120 * x906 + x1328 * x141
    x1826 = x1349 * x93 + x136 * x1825
    x1827 = x92 * (x120 * x1826 + x1350 * x93)
    x1828 = x1675 * x22 + x1827
    x1829 = x1720 * x21 + x1828
    x1830 = x120 * x923
    x1831 = x1340 * x141 + x1830
    x1832 = x1359 * x93 + x136 * x1831
    x1833 = x92 * (x120 * x1832 + x1360 * x93)
    x1834 = x1680 * x22 + x1833
    x1835 = x1724 * x21 + x1834
    x1836 = 0.3333333333333333 * x138
    x1837 = x1340 * x156 + x756
    x1838 = x136 * x1837 + x1367 * x93
    x1839 = x92 * (x120 * x1838 + x1369 * x93)
    x1840 = x1685 * x22 + x1839
    x1841 = x1728 * x21 + x1840
    x1842 = x1349 * x141 + x936
    x1843 = x92 * (x120 * x1842 + x1374 * x93)
    x1844 = x1688 * x22 + x1843
    x1845 = x1732 * x21 + x1844
    x1846 = x1359 * x141 + x948
    x1847 = x92 * (x120 * x1846 + x1380 * x93)
    x1848 = x1691 * x22 + x1847
    x1849 = x1736 * x21 + x1848
    x1850 = x1367 * x141 + x961
    x1851 = x92 * (x120 * x1850 + x1388 * x93)
    x1852 = x1694 * x22 + x1851
    x1853 = x1740 * x21 + x1852
    x1854 = x1367 * x156 + x190 * x704
    x1855 = x120 * x1854
    x1856 = x92 * (x1394 * x93 + x1855)
    x1857 = x1696 * x22 + x1856
    x1858 = x1744 * x21 + x1857
    x1859 = x92 * (x120 * x970 + x1374 * x141)
    x1860 = x1698 * x22 + x1859
    x1861 = x1746 * x21 + x1860
    x1862 = x92 * (x120 * x979 + x1380 * x141)
    x1863 = x1700 * x22 + x1862
    x1864 = x1748 * x21 + x1863
    x1865 = x92 * (x120 * x987 + x1388 * x141)
    x1866 = x1702 * x22 + x1865
    x1867 = x1750 * x21 + x1866
    x1868 = x120 * x995
    x1869 = x92 * (x1394 * x141 + x1868)
    x1870 = x1704 * x22 + x1869
    x1871 = x1752 * x21 + x1870
    x1872 = x92 * (x1394 * x156 + x218 * x700)
    x1873 = x1706 * x22 + x1872
    x1874 = x1754 * x21 + x1873
    x1875 = x1434 * x1621 + x1437 * x93
    x1876 = x92 * (x120 * x1875 + x1438 * x93)
    x1877 = x1709 * x22 + x1876
    x1878 = x1710 * x22 + x1877
    x1879 = x1447 * x1625 + x1448 * x93
    x1880 = x92 * (x120 * x1879 + x1449 * x93)
    x1881 = x1712 * x22 + x1880
    x1882 = x1713 * x22 + x1881
    x1883 = x1459 * x1625 + x1460 * x93
    x1884 = x92 * (x120 * x1883 + x1461 * x93)
    x1885 = x1715 * x22 + x1884
    x1886 = x1716 * x22 + x1885
    x1887 = x1085 + x141 * x1447
    x1888 = x136 * x1887 + x1467 * x93
    x1889 = x92 * (x120 * x1888 + x1469 * x93)
    x1890 = x1719 * x22 + x1889
    x1891 = x1720 * x22 + x1890
    x1892 = x1101 + x141 * x1459
    x1893 = x136 * x1892 + x1475 * x93
    x1894 = x92 * (x120 * x1893 + x1477 * x93)
    x1895 = x1723 * x22 + x1894
    x1896 = x1724 * x22 + x1895
    x1897 = x1459 * x156 + x1830
    x1898 = x136 * x1897 + x1484 * x93
    x1899 = x92 * (x120 * x1898 + x1486 * x93)
    x1900 = x1727 * x22 + x1899
    x1901 = x1728 * x22 + x1900
    x1902 = x1058 * x170 + x141 * x1467
    x1903 = x120 * x1902
    x1904 = x92 * (x1491 * x93 + x1903)
    x1905 = x1731 * x22 + x1904
    x1906 = x1732 * x22 + x1905
    x1907 = x1097 * x977 + x141 * x1475
    x1908 = x120 * x1907
    x1909 = x92 * (x1496 * x93 + x1908)
    x1910 = x1735 * x22 + x1909
    x1911 = x1736 * x22 + x1910
    x1912 = x1128 * x136 + x141 * x1484
    x1913 = x120 * x1912
    x1914 = x92 * (x1501 * x93 + x1913)
    x1915 = x1739 * x22 + x1914
    x1916 = x1740 * x22 + x1915
    x1917 = x1484 * x156 + x961
    x1918 = x120 * x1917
    x1919 = x92 * (x1506 * x93 + x1918)
    x1920 = x1743 * x22 + x1919
    x1921 = x1744 * x22 + x1920
    x1922 = x92 * (x1054 * x200 + x141 * x1491)
    x1923 = x1745 * x22 + x1922
    x1924 = x1746 * x22 + x1923
    x1925 = x92 * (x1007 * x1094 + x141 * x1496)
    x1926 = x1747 * x22 + x1925
    x1927 = x1748 * x22 + x1926
    x1928 = x92 * (x1125 * x977 + x141 * x1501)
    x1929 = x1749 * x22 + x1928
    x1930 = x1750 * x22 + x1929
    x1931 = x92 * (x1153 * x136 + x141 * x1506)
    x1932 = x1751 * x22 + x1931
    x1933 = x1752 * x22 + x1932
    x1934 = x92 * (x1506 * x156 + x1868)
    x1935 = x1753 * x22 + x1934
    x1936 = x1754 * x22 + x1935
    x1937 = x1187 * x249 - x1195 * x9 + 3.0 * x691
    x1938 = x16 * x1937
    x1939 = x1188 * x9
    x1940 = x6 * (x1191 * x249 - x1938 - x1939 + 3.0 * x6 * x678)
    x1941 = x1191 * x249 - x1939 + 3.0 * x679
    x1942 = -x1938 * x4 + x1941 * x5
    x1943 = x1194 * x249 - x1200 * x719 + 3.0 * x718
    x1944 = x131 * (x131 * x1943 - x1937 * x5) + x1940 + x1942 * x5
    x1945 = x1944 * x4
    x1946 = x1942 * x6
    x1947 = 2.0 * x1946
    x1948 = x1941 * x6
    x1949 = x1942 * x4
    x1950 = x1948 + x1949
    x1951 = x93 * (x1948 + x1950)
    x1952 = x1621 * x1948 + x1951 * x93
    x1953 = x1756 * x21 + x92 * (
        x120 * x1952 + x93 * (x120 * x1951 + x93 * (x120 * x1950 + x93 * (x1945 + x1947)))
    )
    x1954 = x1757 * x21 + x1953
    x1955 = x1944 * x9
    x1956 = 4.0 * x1203
    x1957 = x1955 + x1956
    x1958 = x1942 * x9
    x1959 = 4.0 * x1206
    x1960 = x1958 + x1959
    x1961 = x1941 * x9
    x1962 = 4.0 * x1209
    x1963 = x1961 + x1962
    x1964 = x136 * x1963 + x1960 * x93
    x1965 = x1625 * x1963 + x1964 * x93
    x1966 = x1760 * x21 + x92 * (
        x120 * x1965 + x93 * (x120 * x1964 + x93 * (x120 * x1960 + x1957 * x93))
    )
    x1967 = x1761 * x21 + x1966
    x1968 = x156 * x1948
    x1969 = x156 * x1949 + x1968
    x1970 = x1628 * x1948 + x1969 * x93
    x1971 = x1764 * x21 + x92 * (
        x120 * x1970 + x93 * (x120 * x1969 + x156 * x93 * (x1945 + x1947))
    )
    x1972 = x1765 * x21 + x1971
    x1973 = x105 * x1222 + x141 * x1957
    x1974 = x105 * x1225 + x141 * x1960
    x1975 = x105 * x1229 + x141 * x1963
    x1976 = x136 * x1975 + x1974 * x93
    x1977 = x1769 * x21 + x92 * (x120 * x1976 + x93 * (x120 * x1974 + x1973 * x93))
    x1978 = x1770 * x21 + x1977
    x1979 = x156 * (x1955 + x1956)
    x1980 = x156 * (x1958 + x1959)
    x1981 = x156 * (x1961 + x1962)
    x1982 = x136 * x1981 + x1980 * x93
    x1983 = x1774 * x21 + x92 * (x120 * x1982 + x93 * (x120 * x1980 + x1979 * x93))
    x1984 = x1775 * x21 + x1983
    x1985 = x190 * x1948
    x1986 = x190 * x1949 + x1985
    x1987 = x1779 * x21 + x92 * (x120 * x1986 + x190 * x93 * (x1945 + x1947))
    x1988 = x1780 * x21 + x1987
    x1989 = x105 * x1243 + x141 * x1973
    x1990 = x105 * x1244 + x141 * x1974
    x1991 = x1783 * x21 + x92 * (x120 * x1990 + x1989 * x93)
    x1992 = x1784 * x21 + x1991
    x1993 = x105 * x1250 + x141 * x1979
    x1994 = x105 * x1251 + x141 * x1980
    x1995 = x1787 * x21 + x92 * (x120 * x1994 + x1993 * x93)
    x1996 = x1788 * x21 + x1995
    x1997 = x190 * (x1955 + x1956)
    x1998 = x190 * (x1958 + x1959)
    x1999 = x1791 * x21 + x92 * (x120 * x1998 + x1997 * x93)
    x2000 = x1792 * x21 + x1999
    x2001 = x1794 * x21 + x218 * x92 * (x1945 + x1947)
    x2002 = x1795 * x21 + x2001
    x2003 = x1797 * x21 + x92 * (x105 * x1261 + x141 * x1989)
    x2004 = x1798 * x21 + x2003
    x2005 = x1800 * x21 + x92 * (x105 * x1266 + x141 * x1993)
    x2006 = x1801 * x21 + x2005
    x2007 = x1803 * x21 + x92 * (x105 * x1271 + x141 * x1997)
    x2008 = x1804 * x21 + x2007
    x2009 = x1806 * x21 + x218 * x92 * (x1955 + x1956)
    x2010 = x1807 * x21 + x2009
    x2011 = x1809 * x21 + x1944 * x245
    x2012 = x1810 * x21 + x2011
    x2013 = x1294 * x249 - x1302 * x9 + 2.0 * x871
    x2014 = x16 * x2013
    x2015 = x1295 * x9
    x2016 = x6 * (x1298 * x249 - x2014 - x2015 + 2.0 * x6 * x858)
    x2017 = x1298 * x249 - x2015 + 2.0 * x859
    x2018 = -x2014 * x4 + x2017 * x5
    x2019 = x1301 * x249 - x1307 * x719 + 2.0 * x892
    x2020 = x131 * (x131 * x2019 - x2013 * x5) + x2016 + x2018 * x5
    x2021 = x2018 * x42
    x2022 = x2017 * x6
    x2023 = x2018 * x4 + x2022
    x2024 = x93 * (x2022 + x2023)
    x2025 = x1621 * x2022 + x2024 * x93
    x2026 = x92 * (
        x120 * x2025
        + x93 * (x120 * x2024 + x93 * (x120 * x2023 + x93 * (x2020 * x4 + x2021)))
    )
    x2027 = x1756 * x22 + x2026
    x2028 = x1814 * x21 + x2027
    x2029 = x1309 + x2020 * x9
    x2030 = x1300 * x57 + x2018 * x9
    x2031 = 3.0 * x1312 + x2017 * x9
    x2032 = x136 * x2031 + x2030 * x93
    x2033 = x1625 * x2031 + x2032 * x93
    x2034 = x92 * (
        x120 * x2033 + x93 * (x120 * x2032 + x93 * (x120 * x2030 + x2029 * x93))
    )
    x2035 = x1760 * x22 + x2034
    x2036 = x1819 * x21 + x2035
    x2037 = x12 * x2020 + x1203
    x2038 = x12 * x2018 + x1206
    x2039 = x120 * x2038
    x2040 = x12 * x2017 + x1209
    x2041 = x136 * x2040 + x2038 * x93
    x2042 = x1625 * x2040 + x2041 * x93
    x2043 = x92 * (x120 * x2042 + x93 * (x120 * x2041 + x93 * (x2037 * x93 + x2039)))
    x2044 = x1764 * x22 + x2043
    x2045 = x1823 * x21 + x2044
    x2046 = x1324 + x141 * x2029
    x2047 = x112 * x1325 + x141 * x2030
    x2048 = x112 * x1328 + x141 * x2031
    x2049 = x136 * x2048 + x2047 * x93
    x2050 = x92 * (x120 * x2049 + x93 * (x120 * x2047 + x2046 * x93))
    x2051 = x1769 * x22 + x2050
    x2052 = x1828 * x21 + x2051
    x2053 = x1336 + x141 * x2037
    x2054 = x112 * x1337 + x141 * x2038
    x2055 = x112 * x1340 + x141 * x2040
    x2056 = x136 * x2055 + x2054 * x93
    x2057 = x92 * (x120 * x2056 + x93 * (x120 * x2054 + x2053 * x93))
    x2058 = x1774 * x22 + x2057
    x2059 = x1834 * x21 + x2058
    x2060 = x156 * (x1203 + x2037)
    x2061 = x156 * (x1206 + x2038)
    x2062 = x120 * x2061
    x2063 = x1236 + x156 * x2040
    x2064 = x136 * x2063 + x2061 * x93
    x2065 = x92 * (x120 * x2064 + x93 * (x2060 * x93 + x2062))
    x2066 = x1779 * x22 + x2065
    x2067 = x1840 * x21 + x2066
    x2068 = x1348 + x141 * x2046
    x2069 = x112 * x1349 + x141 * x2047
    x2070 = x92 * (x120 * x2069 + x2068 * x93)
    x2071 = x1783 * x22 + x2070
    x2072 = x1844 * x21 + x2071
    x2073 = x1358 + x141 * x2053
    x2074 = x112 * x1359 + x141 * x2054
    x2075 = x92 * (x120 * x2074 + x2073 * x93)
    x2076 = x1787 * x22 + x2075
    x2077 = x1848 * x21 + x2076
    x2078 = x1366 + x141 * x2060
    x2079 = x112 * x1367 + x141 * x2061
    x2080 = x92 * (x120 * x2079 + x2078 * x93)
    x2081 = x1791 * x22 + x2080
    x2082 = x1852 * x21 + x2081
    x2083 = x1203 * x190 + x156 * x2060
    x2084 = x1206 * x190 + x156 * x2061
    x2085 = x120 * x2084
    x2086 = x92 * (x2083 * x93 + x2085)
    x2087 = x1794 * x22 + x2086
    x2088 = x1857 * x21 + x2087
    x2089 = x92 * (x1375 + x141 * x2068)
    x2090 = x1797 * x22 + x2089
    x2091 = x1860 * x21 + x2090
    x2092 = x92 * (x1381 + x141 * x2073)
    x2093 = x1800 * x22 + x2092
    x2094 = x1863 * x21 + x2093
    x2095 = x92 * (x1389 + x141 * x2078)
    x2096 = x1803 * x22 + x2095
    x2097 = x1866 * x21 + x2096
    x2098 = x92 * (x1395 + x141 * x2083)
    x2099 = x1806 * x22 + x2098
    x2100 = x1870 * x21 + x2099
    x2101 = x92 * (x1203 * x218 + x156 * x2083)
    x2102 = x1809 * x22 + x2101
    x2103 = x1873 * x21 + x2102
    x2104 = x1045 + x1416 * x249 - x1424 * x9
    x2105 = x16 * x2104
    x2106 = x1417 * x9
    x2107 = x6 * (-x1072 + x1420 * x249 - x2105 - x2106)
    x2108 = x1033 + x1420 * x249 - x2106
    x2109 = -x2105 * x4 + x2108 * x5
    x2110 = x1073 + x1423 * x249 - x1429 * x719
    x2111 = x131 * (x131 * x2110 - x2104 * x5) + x2107 + x2109 * x5
    x2112 = x2108 * x6
    x2113 = x2109 * x4 + x2112
    x2114 = x93 * (x2112 + x2113)
    x2115 = x1621 * x2112 + x2114 * x93
    x2116 = x92 * (
        x120 * x2115
        + x93 * (x120 * x2114 + x93 * (x120 * x2113 + x93 * (x2109 * x42 + x2111 * x4)))
    )
    x2117 = x1813 * x22 + x2116
    x2118 = x1814 * x22 + x2117
    x2119 = x1427 * x42 + x2111 * x9
    x2120 = x1432 + x2109 * x9
    x2121 = 2.0 * x1434 + x2108 * x9
    x2122 = x136 * x2121 + x2120 * x93
    x2123 = x1625 * x2121 + x2122 * x93
    x2124 = x92 * (
        x120 * x2123 + x93 * (x120 * x2122 + x93 * (x120 * x2120 + x2119 * x93))
    )
    x2125 = x1818 * x22 + x2124
    x2126 = x1819 * x22 + x2125
    x2127 = x12 * x2111 + x1305 * x42
    x2128 = x12 * x2109 + x1310
    x2129 = x12 * x2108 + 2.0 * x1312
    x2130 = x136 * x2129 + x2128 * x93
    x2131 = x1625 * x2129 + x2130 * x93
    x2132 = x92 * (
        x120 * x2131 + x93 * (x120 * x2130 + x93 * (x120 * x2128 + x2127 * x93))
    )
    x2133 = x1822 * x22 + x2132
    x2134 = x1823 * x22 + x2133
    x2135 = x120 * x1443 + x141 * x2119
    x2136 = x141 * x2120 + x1445
    x2137 = x120 * x1447 + x141 * x2121
    x2138 = x136 * x2137 + x2136 * x93
    x2139 = x92 * (x120 * x2138 + x93 * (x120 * x2136 + x2135 * x93))
    x2140 = x1827 * x22 + x2139
    x2141 = x1828 * x22 + x2140
    x2142 = x120 * x1454 + x141 * x2127
    x2143 = x141 * x2128 + x1457
    x2144 = x120 * x1459 + x141 * x2129
    x2145 = x136 * x2144 + x2143 * x93
    x2146 = x92 * (x120 * x2145 + x93 * (x120 * x2143 + x2142 * x93))
    x2147 = x1833 * x22 + x2146
    x2148 = x1834 * x22 + x2147
    x2149 = x120 * x1335 + x156 * x2127
    x2150 = x1338 + x156 * x2128
    x2151 = x120 * x1340 + x156 * x2129
    x2152 = x136 * x2151 + x2150 * x93
    x2153 = x92 * (x120 * x2152 + x93 * (x120 * x2150 + x2149 * x93))
    x2154 = x1839 * x22 + x2153
    x2155 = x1840 * x22 + x2154
    x2156 = x120 * x1466 + x141 * x2135
    x2157 = x141 * x2136 + x1468
    x2158 = x92 * (x120 * x2157 + x2156 * x93)
    x2159 = x1843 * x22 + x2158
    x2160 = x1844 * x22 + x2159
    x2161 = x120 * x1474 + x141 * x2142
    x2162 = x141 * x2143 + x1476
    x2163 = x92 * (x120 * x2162 + x2161 * x93)
    x2164 = x1847 * x22 + x2163
    x2165 = x1848 * x22 + x2164
    x2166 = x120 * x1482 + x141 * x2149
    x2167 = x141 * x2150 + x1485
    x2168 = x92 * (x120 * x2167 + x2166 * x93)
    x2169 = x1851 * x22 + x2168
    x2170 = x1852 * x22 + x2169
    x2171 = x120 * x1365 + x156 * x2149
    x2172 = x1368 + x156 * x2150
    x2173 = x92 * (x120 * x2172 + x2171 * x93)
    x2174 = x1856 * x22 + x2173
    x2175 = x1857 * x22 + x2174
    x2176 = x92 * (x120 * x1491 + x141 * x2156)
    x2177 = x1859 * x22 + x2176
    x2178 = x1860 * x22 + x2177
    x2179 = x92 * (x120 * x1496 + x141 * x2161)
    x2180 = x1862 * x22 + x2179
    x2181 = x1863 * x22 + x2180
    x2182 = x92 * (x120 * x1501 + x141 * x2166)
    x2183 = x1865 * x22 + x2182
    x2184 = x1866 * x22 + x2183
    x2185 = x92 * (x120 * x1506 + x141 * x2171)
    x2186 = x1869 * x22 + x2185
    x2187 = x1870 * x22 + x2186
    x2188 = x92 * (x120 * x1394 + x156 * x2171)
    x2189 = x1872 * x22 + x2188
    x2190 = x1873 * x22 + x2189
    x2191 = x1527 * x249 - x1535 * x9
    x2192 = x16 * x2191
    x2193 = x1528 * x9 - x1531 * x249
    x2194 = -x6 * (x2192 + x2193)
    x2195 = -x2193
    x2196 = -x2192 * x4 + x2195 * x5
    x2197 = x1534 * x249 - x1540 * x719
    x2198 = x131 * (x131 * x2197 - x2191 * x5) + x2194 + x2196 * x5
    x2199 = x2196 * x42
    x2200 = x2195 * x6
    x2201 = x2196 * x4 + x2200
    x2202 = x93 * (x2200 + x2201)
    x2203 = x1621 * x2200 + x2202 * x93
    x2204 = x92 * (
        x120 * x2203
        + x93 * (x120 * x2202 + x93 * (x120 * x2201 + x93 * (x2198 * x4 + x2199)))
    )
    x2205 = x1876 * x22 + x2204
    x2206 = x1877 * x22 + x2205
    x2207 = x1543 + x2198 * x9
    x2208 = x1546 + x2196 * x9
    x2209 = x120 * x2208
    x2210 = x1549 + x2195 * x9
    x2211 = x136 * x2210 + x2208 * x93
    x2212 = x1625 * x2210 + x2211 * x93
    x2213 = x92 * (x120 * x2212 + x93 * (x120 * x2211 + x93 * (x2207 * x93 + x2209)))
    x2214 = x1880 * x22 + x2213
    x2215 = x1881 * x22 + x2214
    x2216 = x12 * x2198 + x1431
    x2217 = x12 * x2196 + x1422 * x57
    x2218 = x120 * x2217
    x2219 = x12 * x2195 + 3.0 * x1434
    x2220 = x136 * x2219 + x2217 * x93
    x2221 = x1625 * x2219 + x2220 * x93
    x2222 = x92 * (x120 * x2221 + x93 * (x120 * x2220 + x93 * (x2216 * x93 + x2218)))
    x2223 = x1884 * x22 + x2222
    x2224 = x1885 * x22 + x2223
    x2225 = x141 * (x1543 + x2207)
    x2226 = x141 * (x1546 + x2208)
    x2227 = x120 * x2226
    x2228 = x141 * x2210 + x1559
    x2229 = x136 * x2228 + x2226 * x93
    x2230 = x92 * (x120 * x2229 + x93 * (x2225 * x93 + x2227))
    x2231 = x1889 * x22 + x2230
    x2232 = x1890 * x22 + x2231
    x2233 = x136 * x1566 + x141 * x2216
    x2234 = x136 * x1567 + x141 * x2217
    x2235 = x120 * x2234
    x2236 = x141 * x2219 + x1570
    x2237 = x136 * x2236 + x2234 * x93
    x2238 = x92 * (x120 * x2237 + x93 * (x2233 * x93 + x2235))
    x2239 = x1894 * x22 + x2238
    x2240 = x1895 * x22 + x2239
    x2241 = x1455 + x156 * x2216
    x2242 = x112 * x1456 + x156 * x2217
    x2243 = x120 * x2242
    x2244 = x112 * x1459 + x156 * x2219
    x2245 = x136 * x2244 + x2242 * x93
    x2246 = x92 * (x120 * x2245 + x93 * (x2241 * x93 + x2243))
    x2247 = x1899 * x22 + x2246
    x2248 = x1900 * x22 + x2247
    x2249 = x141 * x2225 + x1543 * x170
    x2250 = x141 * x2226 + x1546 * x170
    x2251 = x120 * x2250
    x2252 = x92 * (x2249 * x93 + x2251)
    x2253 = x1904 * x22 + x2252
    x2254 = x1905 * x22 + x2253
    x2255 = x141 * x2233 + x1566 * x977
    x2256 = x141 * x2234 + x1567 * x977
    x2257 = x120 * x2256
    x2258 = x92 * (x2255 * x93 + x2257)
    x2259 = x1909 * x22 + x2258
    x2260 = x1910 * x22 + x2259
    x2261 = x136 * x1585 + x141 * x2241
    x2262 = x136 * x1586 + x141 * x2242
    x2263 = x120 * x2262
    x2264 = x92 * (x2261 * x93 + x2263)
    x2265 = x1914 * x22 + x2264
    x2266 = x1915 * x22 + x2265
    x2267 = x1483 + x156 * x2241
    x2268 = x112 * x1484 + x156 * x2242
    x2269 = x120 * x2268
    x2270 = x92 * (x2267 * x93 + x2269)
    x2271 = x1919 * x22 + x2270
    x2272 = x1920 * x22 + x2271
    x2273 = x92 * (x141 * x2249 + x1543 * x200)
    x2274 = x1922 * x22 + x2273
    x2275 = x1923 * x22 + x2274
    x2276 = x92 * (x1007 * x1566 + x141 * x2255)
    x2277 = x1925 * x22 + x2276
    x2278 = x1926 * x22 + x2277
    x2279 = x92 * (x141 * x2261 + x1585 * x977)
    x2280 = x1928 * x22 + x2279
    x2281 = x1929 * x22 + x2280
    x2282 = x92 * (x136 * x1601 + x141 * x2267)
    x2283 = x1931 * x22 + x2282
    x2284 = x1932 * x22 + x2283
    x2285 = x92 * (x1507 + x156 * x2267)
    x2286 = x1934 * x22 + x2285
    x2287 = x1935 * x22 + x2286
    x2288 = x0 * x542 + x538
    x2289 = x120 * (x1621 * x533 + x540 * x93) + x541 * x93
    x2290 = x0 * x563 + x558
    x2291 = x120 * (x533 * x594 + x561 * x93) + x562 * x93
    x2292 = x0 * x582 + x576
    x2293 = x120 * (x1625 * x578 + x580 * x93) + x581 * x93
    x2294 = x0 * x591 + x588
    x2295 = x170 * x533
    x2296 = x120 * (x170 * x534 + x2295) + x590 * x93
    x2297 = x0 * x603 + x599
    x2298 = x578 * x977
    x2299 = x120 * (x2298 + x572 * x594) + x602 * x93
    x2300 = x0 * x617 + x612
    x2301 = x156 * x578 + x167
    x2302 = x136 * x2301
    x2303 = x120 * (x2302 + x614 * x93) + x616 * x93
    x2304 = x0 * x623 + x621
    x2305 = x200 * (x527 + x529)
    x2306 = x0 * x629 + x627
    x2307 = x205 * x42
    x2308 = x2307 * x572 + x569 * x626
    x2309 = x0 * x636 + x633
    x2310 = x594 * x610 + x601 * x614
    x2311 = x0 * x644 + x641
    x2312 = x156 * x614 + x1646
    x2313 = x120 * x2312
    x2314 = x2313 + x643 * x93
    x2315 = x0 * x650 + x648
    x2316 = x224 * x492
    x2317 = x0 * x656 + x654
    x2318 = x229 * x569
    x2319 = x0 * x661 + x659
    x2320 = x205 * x610
    x2321 = x0 * x666 + x664
    x2322 = x179 * x643
    x2323 = x0 * x671 + x669
    x2324 = x156 * x643 + x1659
    x2325 = x21 * x542 + x889
    x2326 = x1709 + x2289 * x316
    x2327 = x21 * x563 + x909
    x2328 = x1712 + x2291 * x316
    x2329 = x21 * x582 + x926
    x2330 = x1715 + x2293 * x316
    x2331 = x21 * x591 + x938
    x2332 = x1719 + x2296 * x316
    x2333 = x21 * x603 + x950
    x2334 = x1723 + x2299 * x316
    x2335 = x21 * x617 + x963
    x2336 = x1727 + x2303 * x316
    x2337 = x21 * x623 + x971
    x2338 = x1731 + x2305 * x316
    x2339 = x21 * x629 + x980
    x2340 = x1735 + x2308 * x316
    x2341 = x21 * x636 + x988
    x2342 = x1739 + x2310 * x316
    x2343 = x21 * x644 + x996
    x2344 = x1743 + x2314 * x316
    x2345 = x1002 + x21 * x650
    x2346 = x1745 + x21 * x2316
    x2347 = x1008 + x21 * x656
    x2348 = x1747 + x21 * x2318
    x2349 = x1013 + x21 * x661
    x2350 = x1749 + x21 * x2320
    x2351 = x1018 + x21 * x666
    x2352 = x1751 + x21 * x2322
    x2353 = x1023 + x21 * x671
    x2354 = x1753 + x2324 * x316
    x2355 = x1062 * x1621 + x1067 * x93
    x2356 = x92 * (x1068 * x93 + x120 * x2355)
    x2357 = x2289 * x543 + x2356
    x2358 = x1062 * x594 + x1086 * x93
    x2359 = x92 * (x1087 * x93 + x120 * x2358)
    x2360 = x2291 * x543 + x2359
    x2361 = x1100 * x1625 + x1102 * x93
    x2362 = x92 * (x1103 * x93 + x120 * x2361)
    x2363 = x2293 * x543 + x2362
    x2364 = x1062 * x170
    x2365 = x1063 * x170 + x2364
    x2366 = x92 * (x1111 * x93 + x120 * x2365)
    x2367 = x2296 * x543 + x2366
    x2368 = x1100 * x977
    x2369 = x1097 * x594 + x2368
    x2370 = x92 * (x1118 * x93 + x120 * x2369)
    x2371 = x2299 * x543 + x2370
    x2372 = x1100 * x156 + x120 * x578
    x2373 = x136 * x2372
    x2374 = x1128 * x93 + x2373
    x2375 = x92 * (x1129 * x93 + x120 * x2374)
    x2376 = x2303 * x543 + x2375
    x2377 = x200 * x92 * (x1057 + x1059)
    x2378 = x2305 * x543 + x2377
    x2379 = x92 * (x1094 * x626 + x1097 * x2307)
    x2380 = x2308 * x543 + x2379
    x2381 = x92 * (x1125 * x594 + x1128 * x601)
    x2382 = x2310 * x543 + x2381
    x2383 = x1128 * x156 + x615
    x2384 = x92 * (x1153 * x93 + x120 * x2383)
    x2385 = x2314 * x543 + x2384
    x2386 = x1044 * x224
    x2387 = x22 * x2316 + x2386
    x2388 = x1094 * x229
    x2389 = x22 * x2318 + x2388
    x2390 = x1125 * x205
    x2391 = x22 * x2320 + x2390
    x2392 = x1153 * x179
    x2393 = x22 * x2322 + x2392
    x2394 = x92 * (x1153 * x156 + x120 * x643)
    x2395 = x2324 * x543 + x2394
    x2396 = x1709 * x21 + x1813
    x2397 = x21 * x2326 + x2396
    x2398 = x1317 + x21 * x889
    x2399 = x1712 * x21 + x1818
    x2400 = x21 * x2328 + x2399
    x2401 = x1331 + x21 * x909
    x2402 = x1715 * x21 + x1822
    x2403 = x21 * x2330 + x2402
    x2404 = x1343 + x21 * x926
    x2405 = x1719 * x21 + x1827
    x2406 = x21 * x2332 + x2405
    x2407 = x1351 + x21 * x938
    x2408 = x1723 * x21 + x1833
    x2409 = x21 * x2334 + x2408
    x2410 = x1361 + x21 * x950
    x2411 = x1727 * x21 + x1839
    x2412 = x21 * x2336 + x2411
    x2413 = x1370 + x21 * x963
    x2414 = x1731 * x21 + x1843
    x2415 = x21 * x2338 + x2414
    x2416 = x1376 + x21 * x971
    x2417 = x1735 * x21 + x1847
    x2418 = x21 * x2340 + x2417
    x2419 = x1382 + x21 * x980
    x2420 = x1739 * x21 + x1851
    x2421 = x21 * x2342 + x2420
    x2422 = x1390 + x21 * x988
    x2423 = x1743 * x21 + x1856
    x2424 = x21 * x2344 + x2423
    x2425 = x1396 + x21 * x996
    x2426 = x1745 * x21 + x1859
    x2427 = x21 * x2346 + x2426
    x2428 = x1002 * x21 + x1399
    x2429 = x1747 * x21 + x1862
    x2430 = x21 * x2348 + x2429
    x2431 = x1008 * x21 + x1402
    x2432 = x1749 * x21 + x1865
    x2433 = x21 * x2350 + x2432
    x2434 = x1013 * x21 + x1405
    x2435 = x1751 * x21 + x1869
    x2436 = x21 * x2352 + x2435
    x2437 = x1018 * x21 + x1409
    x2438 = x1753 * x21 + x1872
    x2439 = x21 * x2354 + x2438
    x2440 = x1023 * x21 + x1412
    x2441 = x1877 + x21 * x2357
    x2442 = x1881 + x21 * x2360
    x2443 = x1885 + x21 * x2363
    x2444 = x1890 + x21 * x2367
    x2445 = x1895 + x21 * x2371
    x2446 = x1900 + x21 * x2376
    x2447 = x1905 + x21 * x2378
    x2448 = x1910 + x21 * x2380
    x2449 = x1915 + x21 * x2382
    x2450 = x1920 + x21 * x2385
    x2451 = x1923 + x21 * x2387
    x2452 = x1926 + x21 * x2389
    x2453 = x1929 + x21 * x2391
    x2454 = x1932 + x21 * x2393
    x2455 = x1935 + x21 * x2395
    x2456 = x1549 * x1621 + x1553 * x93
    x2457 = x92 * (x120 * x2456 + x1554 * x93)
    x2458 = x22 * x2356 + x2457
    x2459 = x22 * x2357 + x2458
    x2460 = x1549 * x594 + x1560 * x93
    x2461 = x92 * (x120 * x2460 + x1561 * x93)
    x2462 = x22 * x2359 + x2461
    x2463 = x22 * x2360 + x2462
    x2464 = x1569 * x1625 + x1571 * x93
    x2465 = x92 * (x120 * x2464 + x1572 * x93)
    x2466 = x22 * x2362 + x2465
    x2467 = x22 * x2363 + x2466
    x2468 = x1549 * x170
    x2469 = x1550 * x170 + x2468
    x2470 = x92 * (x120 * x2469 + x1576 * x93)
    x2471 = x22 * x2366 + x2470
    x2472 = x22 * x2367 + x2471
    x2473 = x1569 * x977
    x2474 = x1567 * x594 + x2473
    x2475 = x92 * (x120 * x2474 + x1580 * x93)
    x2476 = x22 * x2370 + x2475
    x2477 = x22 * x2371 + x2476
    x2478 = x1100 * x112 + x156 * x1569
    x2479 = x136 * x2478
    x2480 = x1586 * x93 + x2479
    x2481 = x92 * (x120 * x2480 + x1587 * x93)
    x2482 = x22 * x2375 + x2481
    x2483 = x22 * x2376 + x2482
    x2484 = x200 * x92 * (x1545 + x1547)
    x2485 = x22 * x2377 + x2484
    x2486 = x22 * x2378 + x2485
    x2487 = x92 * (x1566 * x626 + x1567 * x2307)
    x2488 = x22 * x2379 + x2487
    x2489 = x22 * x2380 + x2488
    x2490 = x92 * (x1585 * x594 + x1586 * x601)
    x2491 = x22 * x2381 + x2490
    x2492 = x22 * x2382 + x2491
    x2493 = x112 * x1128 + x156 * x1586
    x2494 = x92 * (x120 * x2493 + x1601 * x93)
    x2495 = x22 * x2384 + x2494
    x2496 = x22 * x2385 + x2495
    x2497 = x1538 * x224
    x2498 = x22 * x2386 + x2497
    x2499 = x22 * x2387 + x2498
    x2500 = x1566 * x229
    x2501 = x22 * x2388 + x2500
    x2502 = x22 * x2389 + x2501
    x2503 = x1585 * x205
    x2504 = x22 * x2390 + x2503
    x2505 = x22 * x2391 + x2504
    x2506 = x1601 * x179
    x2507 = x22 * x2392 + x2506
    x2508 = x22 * x2393 + x2507
    x2509 = x92 * (x1154 + x156 * x1601)
    x2510 = x22 * x2394 + x2509
    x2511 = x22 * x2395 + x2510
    x2512 = x1813 * x21 + x2026
    x2513 = x21 * x2396 + x2512
    x2514 = x1818 * x21 + x2034
    x2515 = x21 * x2399 + x2514
    x2516 = x1822 * x21 + x2043
    x2517 = x21 * x2402 + x2516
    x2518 = x1827 * x21 + x2050
    x2519 = x21 * x2405 + x2518
    x2520 = x1833 * x21 + x2057
    x2521 = x21 * x2408 + x2520
    x2522 = x1839 * x21 + x2065
    x2523 = x21 * x2411 + x2522
    x2524 = x1843 * x21 + x2070
    x2525 = x21 * x2414 + x2524
    x2526 = x1847 * x21 + x2075
    x2527 = x21 * x2417 + x2526
    x2528 = x1851 * x21 + x2080
    x2529 = x21 * x2420 + x2528
    x2530 = x1856 * x21 + x2086
    x2531 = x21 * x2423 + x2530
    x2532 = x1859 * x21 + x2089
    x2533 = x21 * x2426 + x2532
    x2534 = x1862 * x21 + x2092
    x2535 = x21 * x2429 + x2534
    x2536 = x1865 * x21 + x2095
    x2537 = x21 * x2432 + x2536
    x2538 = x1869 * x21 + x2098
    x2539 = x21 * x2435 + x2538
    x2540 = x1872 * x21 + x2101
    x2541 = x21 * x2438 + x2540
    x2542 = x1877 * x21 + x2117
    x2543 = x1881 * x21 + x2125
    x2544 = x1885 * x21 + x2133
    x2545 = x1890 * x21 + x2140
    x2546 = x1895 * x21 + x2147
    x2547 = x1900 * x21 + x2154
    x2548 = x1905 * x21 + x2159
    x2549 = x1910 * x21 + x2164
    x2550 = x1915 * x21 + x2169
    x2551 = x1920 * x21 + x2174
    x2552 = x1923 * x21 + x2177
    x2553 = x1926 * x21 + x2180
    x2554 = x1929 * x21 + x2183
    x2555 = x1932 * x21 + x2186
    x2556 = x1935 * x21 + x2189
    x2557 = 3.0 * x1045 - x12 * x1535 + x1527 * x475
    x2558 = x16 * x2557
    x2559 = x12 * x1528
    x2560 = x6 * (3.0 * x1032 * x6 + x1531 * x475 - x2558 - x2559)
    x2561 = 3.0 * x1033 + x1531 * x475 - x2559
    x2562 = -x2558 * x4 + x2561 * x5
    x2563 = 3.0 * x1073 - x1074 * x1540 + x1534 * x475
    x2564 = x131 * (x131 * x2563 - x2557 * x5) + x2560 + x2562 * x5
    x2565 = x2564 * x4
    x2566 = x2562 * x6
    x2567 = 2.0 * x2566
    x2568 = x2561 * x6
    x2569 = x2562 * x4
    x2570 = x2568 + x2569
    x2571 = x93 * (x2568 + x2570)
    x2572 = x1621 * x2568 + x2571 * x93
    x2573 = x22 * x2457 + x92 * (
        x120 * x2572 + x93 * (x120 * x2571 + x93 * (x120 * x2570 + x93 * (x2565 + x2567)))
    )
    x2574 = x22 * x2458 + x2573
    x2575 = x141 * x2568
    x2576 = x141 * x2569 + x2575
    x2577 = x2568 * x594 + x2576 * x93
    x2578 = x22 * x2461 + x92 * (
        x120 * x2577 + x93 * (x120 * x2576 + x141 * x93 * (x2565 + x2567))
    )
    x2579 = x22 * x2462 + x2578
    x2580 = x12 * x2564 + 4.0 * x1543
    x2581 = x12 * x2562 + 4.0 * x1546
    x2582 = x12 * x2561 + 4.0 * x1549
    x2583 = x136 * x2582
    x2584 = x2581 * x93 + x2583
    x2585 = x1625 * x2582 + x2584 * x93
    x2586 = x22 * x2465 + x92 * (
        x120 * x2585 + x93 * (x120 * x2584 + x93 * (x120 * x2581 + x2580 * x93))
    )
    x2587 = x22 * x2466 + x2586
    x2588 = x170 * x2568
    x2589 = x170 * x2569 + x2588
    x2590 = x22 * x2470 + x92 * (x120 * x2589 + x170 * x93 * (x2565 + x2567))
    x2591 = x22 * x2471 + x2590
    x2592 = x2582 * x977
    x2593 = x2581 * x594 + x2592
    x2594 = x22 * x2475 + x92 * (x120 * x2593 + x93 * (x2580 * x594 + x2581 * x601))
    x2595 = x22 * x2476 + x2594
    x2596 = x105 * x1566 + x156 * x2580
    x2597 = x105 * x1567 + x156 * x2581
    x2598 = x105 * x1569 + x156 * x2582
    x2599 = x136 * x2598
    x2600 = x2597 * x93 + x2599
    x2601 = x22 * x2481 + x92 * (x120 * x2600 + x93 * (x120 * x2597 + x2596 * x93))
    x2602 = x22 * x2482 + x2601
    x2603 = x200 * x92 * (x2565 + x2567) + x22 * x2484
    x2604 = x22 * x2485 + x2603
    x2605 = x22 * x2487 + x92 * (x2307 * x2581 + x2580 * x626)
    x2606 = x22 * x2488 + x2605
    x2607 = x22 * x2490 + x92 * (x2596 * x594 + x2597 * x601)
    x2608 = x22 * x2491 + x2607
    x2609 = x105 * x1585 + x156 * x2596
    x2610 = x105 * x1586 + x156 * x2597
    x2611 = x22 * x2494 + x92 * (x120 * x2610 + x2609 * x93)
    x2612 = x22 * x2495 + x2611
    x2613 = x22 * x2497 + x224 * x2564
    x2614 = x22 * x2498 + x2613
    x2615 = x22 * x2500 + x229 * x2580
    x2616 = x22 * x2501 + x2615
    x2617 = x205 * x2596 + x22 * x2503
    x2618 = x22 * x2504 + x2617
    x2619 = x179 * x2609 + x22 * x2506
    x2620 = x22 * x2507 + x2619
    x2621 = x22 * x2509 + x92 * (x105 * x1601 + x156 * x2609)
    x2622 = x22 * x2510 + x2621
    x2623 = x0 * x1664 + x715
    x2624 = x4**3
    x2625 = x199 * x2624
    x2626 = x1663 * x93 + x2625 * x708
    x2627 = x0 * x1668 + x744
    x2628 = x199 * x7
    x2629 = x2628 * x6
    x2630 = x1667 * x93 + x2629 * x741
    x2631 = x0 * x1671 + x759
    x2632 = x12 * x2628
    x2633 = x1670 * x93 + x2632 * x708
    x2634 = x0 * x1675 + x770
    x2635 = x1625 * x1673 + x1674 * x93
    x2636 = x0 * x1680 + x782
    x2637 = x1625 * x1678 + x1679 * x93
    x2638 = x0 * x1685 + x791
    x2639 = x13 * x199 * x4
    x2640 = x1684 * x93 + x2639 * x708
    x2641 = x0 * x1688 + x799
    x2642 = x120 * x1631 + x141 * x1673
    x2643 = x136 * x2642 + x1687 * x93
    x2644 = x0 * x1691 + x808
    x2645 = x120 * x1634 + x141 * x1678
    x2646 = x136 * x2645 + x1690 * x93
    x2647 = x0 * x1694 + x817
    x2648 = x190 * (x739 + x740)
    x2649 = x136 * x2648 + x1693 * x93
    x2650 = x0 * x1696 + x824
    x2651 = x218 * x708
    x2652 = x218 * x709 + x2651
    x2653 = x0 * x1698 + x829
    x2654 = x141 * x1687 + x1640
    x2655 = x0 * x1700 + x834
    x2656 = x141 * x1690 + x1643
    x2657 = x0 * x1702 + x839
    x2658 = x141 * x1693 + x1647
    x2659 = x0 * x1704 + x844
    x2660 = x1650 + x218 * x735
    x2661 = x0 * x1706 + x849
    x2662 = x245 * x682
    x2663 = x92 * (x1209 * x2625 + x1755 * x93)
    x2664 = x2626 * x316 + x2663
    x2665 = x92 * (x1229 * x2629 + x1759 * x93)
    x2666 = x2630 * x316 + x2665
    x2667 = x92 * (x1209 * x2632 + x1763 * x93)
    x2668 = x2633 * x316 + x2667
    x2669 = x92 * (x1625 * x1767 + x1768 * x93)
    x2670 = x2635 * x316 + x2669
    x2671 = x92 * (x1625 * x1772 + x1773 * x93)
    x2672 = x2637 * x316 + x2671
    x2673 = x92 * (x1209 * x2639 + x1778 * x93)
    x2674 = x2640 * x316 + x2673
    x2675 = x112 * x1673 + x141 * x1767
    x2676 = x92 * (x136 * x2675 + x1782 * x93)
    x2677 = x2643 * x316 + x2676
    x2678 = x112 * x1678 + x141 * x1772
    x2679 = x92 * (x136 * x2678 + x1786 * x93)
    x2680 = x2646 * x316 + x2679
    x2681 = x190 * (x1227 + x1228)
    x2682 = x92 * (x136 * x2681 + x1790 * x93)
    x2683 = x2649 * x316 + x2682
    x2684 = x1209 * x218
    x2685 = x92 * (x1210 * x218 + x2684)
    x2686 = x2652 * x316 + x2685
    x2687 = x92 * (x112 * x1687 + x141 * x1782)
    x2688 = x2654 * x316 + x2687
    x2689 = x92 * (x112 * x1690 + x141 * x1786)
    x2690 = x2656 * x316 + x2689
    x2691 = x92 * (x112 * x1693 + x141 * x1790)
    x2692 = x2658 * x316 + x2691
    x2693 = x218 * x92 * (x1223 + x1224)
    x2694 = x2660 * x316 + x2693
    x2695 = x1193 * x245
    x2696 = x21 * x2662 + x2695
    x2697 = x92 * (x1312 * x2625 + x1812 * x93)
    x2698 = x2626 * x543 + x2697
    x2699 = x92 * (x1328 * x2629 + x1817 * x93)
    x2700 = x2630 * x543 + x2699
    x2701 = x92 * (x1340 * x2629 + x1821 * x93)
    x2702 = x2633 * x543 + x2701
    x2703 = x92 * (x1625 * x1825 + x1826 * x93)
    x2704 = x2635 * x543 + x2703
    x2705 = x92 * (x1625 * x1831 + x1832 * x93)
    x2706 = x2637 * x543 + x2705
    x2707 = x92 * (x1625 * x1837 + x1838 * x93)
    x2708 = x2640 * x543 + x2707
    x2709 = x120 * x1717 + x141 * x1825
    x2710 = x92 * (x136 * x2709 + x1842 * x93)
    x2711 = x2643 * x543 + x2710
    x2712 = x120 * x1721 + x141 * x1831
    x2713 = x92 * (x136 * x2712 + x1846 * x93)
    x2714 = x2646 * x543 + x2713
    x2715 = x120 * x1725
    x2716 = x141 * x1837 + x2715
    x2717 = x92 * (x136 * x2716 + x1850 * x93)
    x2718 = x2649 * x543 + x2717
    x2719 = x156 * x1837 + x1683
    x2720 = x92 * (x136 * x2719 + x1854 * x93)
    x2721 = x2652 * x543 + x2720
    x2722 = x92 * (x141 * x1842 + x1730)
    x2723 = x2654 * x543 + x2722
    x2724 = x92 * (x141 * x1846 + x1734)
    x2725 = x2656 * x543 + x2724
    x2726 = x92 * (x141 * x1850 + x1738)
    x2727 = x2658 * x543 + x2726
    x2728 = x92 * (x141 * x1854 + x1742)
    x2729 = x2660 * x543 + x2728
    x2730 = x92 * (x156 * x1854 + x218 * x704)
    x2731 = x22 * x2662 + x2730
    x2732 = x92 * (x1948 * x2625 + x1952 * x93)
    x2733 = x21 * x2663 + x2732
    x2734 = x21 * x2664 + x2733
    x2735 = x92 * (x1963 * x2629 + x1965 * x93)
    x2736 = x21 * x2665 + x2735
    x2737 = x21 * x2666 + x2736
    x2738 = x92 * (x1948 * x2632 + x1970 * x93)
    x2739 = x21 * x2667 + x2738
    x2740 = x21 * x2668 + x2739
    x2741 = x92 * (x1625 * x1975 + x1976 * x93)
    x2742 = x21 * x2669 + x2741
    x2743 = x21 * x2670 + x2742
    x2744 = x92 * (x1625 * x1981 + x1982 * x93)
    x2745 = x21 * x2671 + x2744
    x2746 = x21 * x2672 + x2745
    x2747 = x92 * (x1948 * x2639 + x1986 * x93)
    x2748 = x21 * x2673 + x2747
    x2749 = x21 * x2674 + x2748
    x2750 = x105 * x1767 + x141 * x1975
    x2751 = x92 * (x136 * x2750 + x1990 * x93)
    x2752 = x21 * x2676 + x2751
    x2753 = x21 * x2677 + x2752
    x2754 = x105 * x1772 + x141 * x1981
    x2755 = x92 * (x136 * x2754 + x1994 * x93)
    x2756 = x21 * x2679 + x2755
    x2757 = x21 * x2680 + x2756
    x2758 = x190 * (x1961 + x1962)
    x2759 = x92 * (x136 * x2758 + x1998 * x93)
    x2760 = x21 * x2682 + x2759
    x2761 = x21 * x2683 + x2760
    x2762 = x1948 * x218
    x2763 = x92 * (x1949 * x218 + x2762)
    x2764 = x21 * x2685 + x2763
    x2765 = x21 * x2686 + x2764
    x2766 = x92 * (x105 * x1782 + x141 * x1990)
    x2767 = x21 * x2687 + x2766
    x2768 = x21 * x2688 + x2767
    x2769 = x92 * (x105 * x1786 + x141 * x1994)
    x2770 = x21 * x2689 + x2769
    x2771 = x21 * x2690 + x2770
    x2772 = x92 * (x105 * x1790 + x141 * x1998)
    x2773 = x21 * x2691 + x2772
    x2774 = x21 * x2692 + x2773
    x2775 = x218 * x92 * (x1958 + x1959)
    x2776 = x21 * x2693 + x2775
    x2777 = x21 * x2694 + x2776
    x2778 = x1942 * x245
    x2779 = x21 * x2695 + x2778
    x2780 = x21 * x2696 + x2779
    x2781 = x92 * (x2022 * x2625 + x2025 * x93)
    x2782 = x22 * x2663 + x2781
    x2783 = x21 * x2698 + x2782
    x2784 = x92 * (x2031 * x2629 + x2033 * x93)
    x2785 = x22 * x2665 + x2784
    x2786 = x21 * x2700 + x2785
    x2787 = x92 * (x2040 * x2629 + x2042 * x93)
    x2788 = x22 * x2667 + x2787
    x2789 = x21 * x2702 + x2788
    x2790 = x92 * (x1625 * x2048 + x2049 * x93)
    x2791 = x22 * x2669 + x2790
    x2792 = x21 * x2704 + x2791
    x2793 = x92 * (x1625 * x2055 + x2056 * x93)
    x2794 = x22 * x2671 + x2793
    x2795 = x21 * x2706 + x2794
    x2796 = x92 * (x1625 * x2063 + x2064 * x93)
    x2797 = x22 * x2673 + x2796
    x2798 = x21 * x2708 + x2797
    x2799 = x112 * x1825 + x141 * x2048
    x2800 = x92 * (x136 * x2799 + x2069 * x93)
    x2801 = x22 * x2676 + x2800
    x2802 = x21 * x2711 + x2801
    x2803 = x112 * x1831 + x141 * x2055
    x2804 = x92 * (x136 * x2803 + x2074 * x93)
    x2805 = x22 * x2679 + x2804
    x2806 = x21 * x2714 + x2805
    x2807 = x112 * x1837 + x141 * x2063
    x2808 = x92 * (x136 * x2807 + x2079 * x93)
    x2809 = x22 * x2682 + x2808
    x2810 = x21 * x2718 + x2809
    x2811 = x156 * x2063 + x1777
    x2812 = x92 * (x136 * x2811 + x2084 * x93)
    x2813 = x22 * x2685 + x2812
    x2814 = x21 * x2721 + x2813
    x2815 = x92 * (x112 * x1842 + x141 * x2069)
    x2816 = x22 * x2687 + x2815
    x2817 = x21 * x2723 + x2816
    x2818 = x92 * (x112 * x1846 + x141 * x2074)
    x2819 = x22 * x2689 + x2818
    x2820 = x21 * x2725 + x2819
    x2821 = x92 * (x112 * x1850 + x141 * x2079)
    x2822 = x22 * x2691 + x2821
    x2823 = x21 * x2727 + x2822
    x2824 = x92 * (x112 * x1854 + x141 * x2084)
    x2825 = x22 * x2693 + x2824
    x2826 = x21 * x2729 + x2825
    x2827 = x92 * (x1206 * x218 + x156 * x2084)
    x2828 = x22 * x2695 + x2827
    x2829 = x21 * x2731 + x2828
    x2830 = x92 * (x2112 * x2625 + x2115 * x93)
    x2831 = x22 * x2697 + x2830
    x2832 = x22 * x2698 + x2831
    x2833 = x92 * (x2121 * x2629 + x2123 * x93)
    x2834 = x22 * x2699 + x2833
    x2835 = x22 * x2700 + x2834
    x2836 = x92 * (x2129 * x2629 + x2131 * x93)
    x2837 = x22 * x2701 + x2836
    x2838 = x22 * x2702 + x2837
    x2839 = x92 * (x1625 * x2137 + x2138 * x93)
    x2840 = x22 * x2703 + x2839
    x2841 = x22 * x2704 + x2840
    x2842 = x92 * (x1625 * x2144 + x2145 * x93)
    x2843 = x22 * x2705 + x2842
    x2844 = x22 * x2706 + x2843
    x2845 = x92 * (x1625 * x2151 + x2152 * x93)
    x2846 = x22 * x2707 + x2845
    x2847 = x22 * x2708 + x2846
    x2848 = x120 * x1887 + x141 * x2137
    x2849 = x92 * (x136 * x2848 + x2157 * x93)
    x2850 = x22 * x2710 + x2849
    x2851 = x22 * x2711 + x2850
    x2852 = x120 * x1892 + x141 * x2144
    x2853 = x92 * (x136 * x2852 + x2162 * x93)
    x2854 = x22 * x2713 + x2853
    x2855 = x22 * x2714 + x2854
    x2856 = x120 * x1897 + x141 * x2151
    x2857 = x92 * (x136 * x2856 + x2167 * x93)
    x2858 = x22 * x2717 + x2857
    x2859 = x22 * x2718 + x2858
    x2860 = x120 * x1837 + x156 * x2151
    x2861 = x92 * (x136 * x2860 + x2172 * x93)
    x2862 = x22 * x2720 + x2861
    x2863 = x22 * x2721 + x2862
    x2864 = x92 * (x141 * x2157 + x1903)
    x2865 = x22 * x2722 + x2864
    x2866 = x22 * x2723 + x2865
    x2867 = x92 * (x141 * x2162 + x1908)
    x2868 = x22 * x2724 + x2867
    x2869 = x22 * x2725 + x2868
    x2870 = x92 * (x141 * x2167 + x1913)
    x2871 = x22 * x2726 + x2870
    x2872 = x22 * x2727 + x2871
    x2873 = x92 * (x141 * x2172 + x1918)
    x2874 = x22 * x2728 + x2873
    x2875 = x22 * x2729 + x2874
    x2876 = x92 * (x156 * x2172 + x1855)
    x2877 = x22 * x2730 + x2876
    x2878 = x22 * x2731 + x2877
    x2879 = 4.0 * x1190 - x1938 * x9 + x1941 * x249
    x2880 = x2879 * x6
    x2881 = 4.0 * x1199 + x1937 * x249 - x1943 * x719
    x2882 = -x131 * x2881 + x2879 * x5
    x2883 = x2882 * x4
    x2884 = (
        x21 * x2732
        + x21 * x2733
        + x92 * (x2625 * x2880 + x93 * (x1621 * x2880 + x93**2 * (2.0 * x2880 + x2883)))
    )
    x2885 = x2879 * x9
    x2886 = 5.0 * x1948
    x2887 = x2885 + x2886
    x2888 = x136 * x2887
    x2889 = x2882 * x9
    x2890 = 5.0 * x1946
    x2891 = x2889 + x2890
    x2892 = (
        x21 * x2735
        + x21 * x2736
        + x92 * (x2629 * x2887 + x93 * (x1625 * x2887 + x93 * (x2888 + x2891 * x93)))
    )
    x2893 = x156 * x2880
    x2894 = (
        x21 * x2738
        + x21 * x2739
        + x92 * (x2632 * x2880 + x93 * (x1628 * x2880 + x93 * (x156 * x2883 + x2893)))
    )
    x2895 = x141 * x2887 + x1963 * x99
    x2896 = x136 * x2895
    x2897 = x141 * x2891 + x1960 * x99
    x2898 = (
        x21 * x2741 + x21 * x2742 + x92 * (x1625 * x2895 + x93 * (x2896 + x2897 * x93))
    )
    x2899 = x156 * (x2885 + x2886)
    x2900 = x136 * x2899
    x2901 = x156 * (x2889 + x2890)
    x2902 = (
        x21 * x2744 + x21 * x2745 + x92 * (x1625 * x2899 + x93 * (x2900 + x2901 * x93))
    )
    x2903 = x190 * x2880
    x2904 = (
        x21 * x2747 + x21 * x2748 + x92 * (x2639 * x2880 + x93 * (x190 * x2883 + x2903))
    )
    x2905 = x141 * x2895 + x1975 * x99
    x2906 = x136 * x2905
    x2907 = x141 * x2897 + x1974 * x99
    x2908 = x21 * x2751 + x21 * x2752 + x92 * (x2906 + x2907 * x93)
    x2909 = x141 * x2899 + x1981 * x99
    x2910 = x136 * x2909
    x2911 = x141 * x2901 + x1980 * x99
    x2912 = x21 * x2755 + x21 * x2756 + x92 * (x2910 + x2911 * x93)
    x2913 = x190 * (x2885 + x2886)
    x2914 = x136 * x2913
    x2915 = x190 * (x2889 + x2890)
    x2916 = x21 * x2759 + x21 * x2760 + x92 * (x2914 + x2915 * x93)
    x2917 = x218 * x2880
    x2918 = x21 * x2763 + x21 * x2764 + x92 * (x218 * x2883 + x2917)
    x2919 = x21 * x2766 + x21 * x2767 + x92 * (x141 * x2907 + x1990 * x99)
    x2920 = x21 * x2769 + x21 * x2770 + x92 * (x141 * x2911 + x1994 * x99)
    x2921 = x21 * x2772 + x21 * x2773 + x92 * (x141 * x2915 + x1998 * x99)
    x2922 = x21 * x2775 + x21 * x2776 + x218 * x92 * (x2889 + x2890)
    x2923 = x21 * x2778 + x21 * x2779 + x245 * x2882
    x2924 = 3.0 * x1297 - x2014 * x9 + x2017 * x249
    x2925 = x2924 * x6
    x2926 = 3.0 * x1306 + x2013 * x249 - x2019 * x719
    x2927 = -x131 * x2926 + x2924 * x5
    x2928 = x92 * (
        x2625 * x2925 + x93 * (x1621 * x2925 + x93**2 * (2.0 * x2925 + x2927 * x4))
    )
    x2929 = x21 * x2782 + x22 * x2732 + x2928
    x2930 = 4.0 * x2022 + x2924 * x9
    x2931 = x2018 * x74 + x2927 * x9
    x2932 = x92 * (
        x2629 * x2930 + x93 * (x1625 * x2930 + x93 * (x136 * x2930 + x2931 * x93))
    )
    x2933 = x21 * x2785 + x22 * x2735 + x2932
    x2934 = x12 * x2924 + x1948
    x2935 = x12 * x2927 + x1946
    x2936 = x92 * (
        x2629 * x2934 + x93 * (x1625 * x2934 + x93 * (x136 * x2934 + x2935 * x93))
    )
    x2937 = x21 * x2788 + x22 * x2738 + x2936
    x2938 = x105 * x2031 + x141 * x2930
    x2939 = x105 * x2030 + x141 * x2931
    x2940 = x92 * (x1625 * x2938 + x93 * (x136 * x2938 + x2939 * x93))
    x2941 = x21 * x2791 + x22 * x2741 + x2940
    x2942 = x105 * x2040 + x141 * x2934
    x2943 = x105 * x2038 + x141 * x2935
    x2944 = x92 * (x1625 * x2942 + x93 * (x136 * x2942 + x2943 * x93))
    x2945 = x21 * x2794 + x22 * x2744 + x2944
    x2946 = x156 * x2934 + x1968
    x2947 = x156 * (x1946 + x2935)
    x2948 = x92 * (x1625 * x2946 + x93 * (x136 * x2946 + x2947 * x93))
    x2949 = x21 * x2797 + x22 * x2747 + x2948
    x2950 = x105 * x2048 + x141 * x2938
    x2951 = x105 * x2047 + x141 * x2939
    x2952 = x92 * (x136 * x2950 + x2951 * x93)
    x2953 = x21 * x2801 + x22 * x2751 + x2952
    x2954 = x105 * x2055 + x141 * x2942
    x2955 = x105 * x2054 + x141 * x2943
    x2956 = x92 * (x136 * x2954 + x2955 * x93)
    x2957 = x21 * x2805 + x22 * x2755 + x2956
    x2958 = x105 * x2063 + x141 * x2946
    x2959 = x105 * x2061 + x141 * x2947
    x2960 = x92 * (x136 * x2958 + x2959 * x93)
    x2961 = x21 * x2809 + x22 * x2759 + x2960
    x2962 = x156 * x2946 + x1985
    x2963 = x156 * x2947 + x190 * x1946
    x2964 = x92 * (x136 * x2962 + x2963 * x93)
    x2965 = x21 * x2813 + x22 * x2763 + x2964
    x2966 = x92 * (x105 * x2069 + x141 * x2951)
    x2967 = x21 * x2816 + x22 * x2766 + x2966
    x2968 = x92 * (x105 * x2074 + x141 * x2955)
    x2969 = x21 * x2819 + x22 * x2769 + x2968
    x2970 = x92 * (x105 * x2079 + x141 * x2959)
    x2971 = x21 * x2822 + x22 * x2772 + x2970
    x2972 = x92 * (x105 * x2084 + x141 * x2963)
    x2973 = x21 * x2825 + x22 * x2775 + x2972
    x2974 = x92 * (x156 * x2963 + x1946 * x218)
    x2975 = x21 * x2828 + x22 * x2778 + x2974
    x2976 = 2.0 * x1419 - x2105 * x9 + x2108 * x249
    x2977 = x2976 * x6
    x2978 = 2.0 * x1428 + x2104 * x249 - x2110 * x719
    x2979 = -x131 * x2978 + x2976 * x5
    x2980 = x92 * (
        x2625 * x2977 + x93 * (x1621 * x2977 + x93**2 * (2.0 * x2977 + x2979 * x4))
    )
    x2981 = x22 * x2781 + x2980
    x2982 = x22 * x2782 + x2981
    x2983 = 3.0 * x2112
    x2984 = x2976 * x9 + x2983
    x2985 = x2109 * x57
    x2986 = x2979 * x9 + x2985
    x2987 = x92 * (
        x2629 * x2984 + x93 * (x1625 * x2984 + x93 * (x136 * x2984 + x2986 * x93))
    )
    x2988 = x22 * x2784 + x2987
    x2989 = x22 * x2785 + x2988
    x2990 = x12 * x2976 + 2.0 * x2022
    x2991 = x12 * x2979 + x2021
    x2992 = x92 * (
        x2629 * x2990 + x93 * (x1625 * x2990 + x93 * (x136 * x2990 + x2991 * x93))
    )
    x2993 = x22 * x2787 + x2992
    x2994 = x22 * x2788 + x2993
    x2995 = x112 * x2121 + x141 * x2984
    x2996 = x112 * x2120 + x141 * x2986
    x2997 = x92 * (x1625 * x2995 + x93 * (x136 * x2995 + x2996 * x93))
    x2998 = x22 * x2790 + x2997
    x2999 = x22 * x2791 + x2998
    x3000 = x112 * x2129
    x3001 = x141 * x2990 + x3000
    x3002 = x112 * x2128
    x3003 = x141 * x2991 + x3002
    x3004 = x92 * (x1625 * x3001 + x93 * (x136 * x3001 + x3003 * x93))
    x3005 = x22 * x2793 + x3004
    x3006 = x22 * x2794 + x3005
    x3007 = x120 * x2040 + x156 * x2990
    x3008 = x156 * x2991 + x2039
    x3009 = x92 * (x1625 * x3007 + x93 * (x136 * x3007 + x3008 * x93))
    x3010 = x22 * x2796 + x3009
    x3011 = x22 * x2797 + x3010
    x3012 = x112 * x2137 + x141 * x2995
    x3013 = x112 * x2136 + x141 * x2996
    x3014 = x92 * (x136 * x3012 + x3013 * x93)
    x3015 = x22 * x2800 + x3014
    x3016 = x22 * x2801 + x3015
    x3017 = x112 * x2144 + x141 * x3001
    x3018 = x112 * x2143 + x141 * x3003
    x3019 = x92 * (x136 * x3017 + x3018 * x93)
    x3020 = x22 * x2804 + x3019
    x3021 = x22 * x2805 + x3020
    x3022 = x112 * x2151
    x3023 = x141 * x3007 + x3022
    x3024 = x112 * x2150
    x3025 = x141 * x3008 + x3024
    x3026 = x92 * (x136 * x3023 + x3025 * x93)
    x3027 = x22 * x2808 + x3026
    x3028 = x22 * x2809 + x3027
    x3029 = x120 * x2063 + x156 * x3007
    x3030 = x156 * x3008 + x2062
    x3031 = x92 * (x136 * x3029 + x3030 * x93)
    x3032 = x22 * x2812 + x3031
    x3033 = x22 * x2813 + x3032
    x3034 = x92 * (x112 * x2157 + x141 * x3013)
    x3035 = x22 * x2815 + x3034
    x3036 = x22 * x2816 + x3035
    x3037 = x92 * (x112 * x2162 + x141 * x3018)
    x3038 = x22 * x2818 + x3037
    x3039 = x22 * x2819 + x3038
    x3040 = x92 * (x112 * x2167 + x141 * x3025)
    x3041 = x22 * x2821 + x3040
    x3042 = x22 * x2822 + x3041
    x3043 = x112 * x2172
    x3044 = x92 * (x141 * x3030 + x3043)
    x3045 = x22 * x2824 + x3044
    x3046 = x22 * x2825 + x3045
    x3047 = x92 * (x156 * x3030 + x2085)
    x3048 = x22 * x2827 + x3047
    x3049 = x22 * x2828 + x3048
    x3050 = x1530 - x2192 * x9 + x2195 * x249
    x3051 = x3050 * x6
    x3052 = x1539 + x2191 * x249 - x2197 * x719
    x3053 = -x131 * x3052 + x3050 * x5
    x3054 = x92 * (
        x2625 * x3051 + x93 * (x1621 * x3051 + x93**2 * (2.0 * x3051 + x3053 * x4))
    )
    x3055 = x22 * x2830 + x3054
    x3056 = x22 * x2831 + x3055
    x3057 = 2.0 * x2200 + x3050 * x9
    x3058 = x2199 + x3053 * x9
    x3059 = x92 * (
        x2629 * x3057 + x93 * (x1625 * x3057 + x93 * (x136 * x3057 + x3058 * x93))
    )
    x3060 = x22 * x2833 + x3059
    x3061 = x22 * x2834 + x3060
    x3062 = x12 * x3050 + x2983
    x3063 = x12 * x3053 + x2985
    x3064 = x92 * (
        x2629 * x3062 + x93 * (x1625 * x3062 + x93 * (x136 * x3062 + x3063 * x93))
    )
    x3065 = x22 * x2836 + x3064
    x3066 = x22 * x2837 + x3065
    x3067 = x120 * x2210 + x141 * x3057
    x3068 = x141 * x3058 + x2209
    x3069 = x92 * (x1625 * x3067 + x93 * (x136 * x3067 + x3068 * x93))
    x3070 = x22 * x2839 + x3069
    x3071 = x22 * x2840 + x3070
    x3072 = x120 * x2219 + x141 * x3062
    x3073 = x141 * x3063 + x2218
    x3074 = x92 * (x1625 * x3072 + x93 * (x136 * x3072 + x3073 * x93))
    x3075 = x22 * x2842 + x3074
    x3076 = x22 * x2843 + x3075
    x3077 = x156 * x3062 + x3000
    x3078 = x156 * x3063 + x3002
    x3079 = x92 * (x1625 * x3077 + x93 * (x136 * x3077 + x3078 * x93))
    x3080 = x22 * x2845 + x3079
    x3081 = x22 * x2846 + x3080
    x3082 = x120 * x2228 + x141 * x3067
    x3083 = x141 * x3068 + x2227
    x3084 = x92 * (x136 * x3082 + x3083 * x93)
    x3085 = x22 * x2849 + x3084
    x3086 = x22 * x2850 + x3085
    x3087 = x120 * x2236 + x141 * x3072
    x3088 = x141 * x3073 + x2235
    x3089 = x92 * (x136 * x3087 + x3088 * x93)
    x3090 = x22 * x2853 + x3089
    x3091 = x22 * x2854 + x3090
    x3092 = x120 * x2244 + x141 * x3077
    x3093 = x141 * x3078 + x2243
    x3094 = x92 * (x136 * x3092 + x3093 * x93)
    x3095 = x22 * x2857 + x3094
    x3096 = x22 * x2858 + x3095
    x3097 = x156 * x3077 + x3022
    x3098 = x156 * x3078 + x3024
    x3099 = x92 * (x136 * x3097 + x3098 * x93)
    x3100 = x22 * x2861 + x3099
    x3101 = x22 * x2862 + x3100
    x3102 = x92 * (x141 * x3083 + x2251)
    x3103 = x22 * x2864 + x3102
    x3104 = x22 * x2865 + x3103
    x3105 = x92 * (x141 * x3088 + x2257)
    x3106 = x22 * x2867 + x3105
    x3107 = x22 * x2868 + x3106
    x3108 = x92 * (x141 * x3093 + x2263)
    x3109 = x22 * x2870 + x3108
    x3110 = x22 * x2871 + x3109
    x3111 = x92 * (x141 * x3098 + x2269)
    x3112 = x22 * x2873 + x3111
    x3113 = x22 * x2874 + x3112
    x3114 = x92 * (x156 * x3098 + x3043)
    x3115 = x22 * x2876 + x3114
    x3116 = x22 * x2877 + x3115
    x3117 = x0 * x1709 + x889
    x3118 = x1708 * x93 + x2625 * x883
    x3119 = x0 * x1712 + x909
    x3120 = x1711 * x93 + x2629 * x906
    x3121 = x0 * x1715 + x926
    x3122 = x1714 * x93 + x2629 * x923
    x3123 = x0 * x1719 + x938
    x3124 = x1625 * x1717 + x1718 * x93
    x3125 = x0 * x1723 + x950
    x3126 = x1625 * x1721 + x1722 * x93
    x3127 = x0 * x1727 + x963
    x3128 = x1625 * x1725 + x1726 * x93
    x3129 = x0 * x1731 + x971
    x3130 = x141 * x1717 + x2295
    x3131 = x136 * x3130 + x1729 * x93
    x3132 = x0 * x1735 + x980
    x3133 = x141 * x1721 + x2298
    x3134 = x136 * x3133 + x1733 * x93
    x3135 = x0 * x1739 + x988
    x3136 = x141 * x1725 + x2302
    x3137 = x136 * x3136 + x1737 * x93
    x3138 = x0 * x1743 + x996
    x3139 = x156 * x1725 + x1637
    x3140 = x136 * x3139 + x1741 * x93
    x3141 = x0 * x1745 + x1002
    x3142 = x141 * x1729 + x200 * x528
    x3143 = x0 * x1747 + x1008
    x3144 = x1007 * x572 + x141 * x1733
    x3145 = x0 * x1749 + x1013
    x3146 = x141 * x1737 + x614 * x977
    x3147 = x0 * x1751 + x1018
    x3148 = x136 * x2312 + x141 * x1741
    x3149 = x0 * x1753 + x1023
    x3150 = x156 * x1741 + x218 * x301
    x3151 = x2697 + x3118 * x316
    x3152 = x2699 + x3120 * x316
    x3153 = x2701 + x3122 * x316
    x3154 = x2703 + x3124 * x316
    x3155 = x2705 + x3126 * x316
    x3156 = x2707 + x3128 * x316
    x3157 = x2710 + x3131 * x316
    x3158 = x2713 + x3134 * x316
    x3159 = x2717 + x3137 * x316
    x3160 = x2720 + x3140 * x316
    x3161 = x2722 + x3142 * x316
    x3162 = x2724 + x3144 * x316
    x3163 = x2726 + x3146 * x316
    x3164 = x2728 + x3148 * x316
    x3165 = x2730 + x3150 * x316
    x3166 = x92 * (x1434 * x2625 + x1875 * x93)
    x3167 = x3118 * x543 + x3166
    x3168 = x92 * (x1447 * x2629 + x1879 * x93)
    x3169 = x3120 * x543 + x3168
    x3170 = x92 * (x1459 * x2629 + x1883 * x93)
    x3171 = x3122 * x543 + x3170
    x3172 = x92 * (x1625 * x1887 + x1888 * x93)
    x3173 = x3124 * x543 + x3172
    x3174 = x92 * (x1625 * x1892 + x1893 * x93)
    x3175 = x3126 * x543 + x3174
    x3176 = x92 * (x1625 * x1897 + x1898 * x93)
    x3177 = x3128 * x543 + x3176
    x3178 = x141 * x1887 + x2364
    x3179 = x92 * (x136 * x3178 + x1902 * x93)
    x3180 = x3131 * x543 + x3179
    x3181 = x141 * x1892 + x2368
    x3182 = x92 * (x136 * x3181 + x1907 * x93)
    x3183 = x3134 * x543 + x3182
    x3184 = x141 * x1897 + x2373
    x3185 = x92 * (x136 * x3184 + x1912 * x93)
    x3186 = x3137 * x543 + x3185
    x3187 = x156 * x1897 + x2715
    x3188 = x92 * (x136 * x3187 + x1917 * x93)
    x3189 = x3140 * x543 + x3188
    x3190 = x92 * (x1058 * x200 + x141 * x1902)
    x3191 = x3142 * x543 + x3190
    x3192 = x92 * (x1007 * x1097 + x141 * x1907)
    x3193 = x3144 * x543 + x3192
    x3194 = x92 * (x1128 * x977 + x141 * x1912)
    x3195 = x3146 * x543 + x3194
    x3196 = x92 * (x136 * x2383 + x141 * x1917)
    x3197 = x3148 * x543 + x3196
    x3198 = x92 * (x156 * x1917 + x1742)
    x3199 = x3150 * x543 + x3198
    x3200 = x21 * x2697 + x2781
    x3201 = x21 * x3151 + x3200
    x3202 = x21 * x2699 + x2784
    x3203 = x21 * x3152 + x3202
    x3204 = x21 * x2701 + x2787
    x3205 = x21 * x3153 + x3204
    x3206 = x21 * x2703 + x2790
    x3207 = x21 * x3154 + x3206
    x3208 = x21 * x2705 + x2793
    x3209 = x21 * x3155 + x3208
    x3210 = x21 * x2707 + x2796
    x3211 = x21 * x3156 + x3210
    x3212 = x21 * x2710 + x2800
    x3213 = x21 * x3157 + x3212
    x3214 = x21 * x2713 + x2804
    x3215 = x21 * x3158 + x3214
    x3216 = x21 * x2717 + x2808
    x3217 = x21 * x3159 + x3216
    x3218 = x21 * x2720 + x2812
    x3219 = x21 * x3160 + x3218
    x3220 = x21 * x2722 + x2815
    x3221 = x21 * x3161 + x3220
    x3222 = x21 * x2724 + x2818
    x3223 = x21 * x3162 + x3222
    x3224 = x21 * x2726 + x2821
    x3225 = x21 * x3163 + x3224
    x3226 = x21 * x2728 + x2824
    x3227 = x21 * x3164 + x3226
    x3228 = x21 * x2730 + x2827
    x3229 = x21 * x3165 + x3228
    x3230 = x21 * x3167 + x2831
    x3231 = 0.009523809523809524 * x139
    x3232 = x21 * x3169 + x2834
    x3233 = x154 * x915
    x3234 = x21 * x3171 + x2837
    x3235 = x21 * x3173 + x2840
    x3236 = x21 * x3175 + x2843
    x3237 = x1836 * x188
    x3238 = x21 * x3177 + x2846
    x3239 = x21 * x3180 + x2850
    x3240 = x21 * x3183 + x2854
    x3241 = x21 * x3186 + x2858
    x3242 = x21 * x3189 + x2862
    x3243 = x21 * x3191 + x2865
    x3244 = x21 * x3193 + x2868
    x3245 = x21 * x3195 + x2871
    x3246 = x21 * x3197 + x2874
    x3247 = x21 * x3199 + x2877
    x3248 = x92 * (x2200 * x2625 + x2203 * x93)
    x3249 = x22 * x3166 + x3248
    x3250 = x22 * x3167 + x3249
    x3251 = x92 * (x2210 * x2629 + x2212 * x93)
    x3252 = x22 * x3168 + x3251
    x3253 = x22 * x3169 + x3252
    x3254 = x92 * (x2219 * x2629 + x2221 * x93)
    x3255 = x22 * x3170 + x3254
    x3256 = x22 * x3171 + x3255
    x3257 = x92 * (x1625 * x2228 + x2229 * x93)
    x3258 = x22 * x3172 + x3257
    x3259 = x22 * x3173 + x3258
    x3260 = x92 * (x1625 * x2236 + x2237 * x93)
    x3261 = x22 * x3174 + x3260
    x3262 = x22 * x3175 + x3261
    x3263 = x92 * (x1625 * x2244 + x2245 * x93)
    x3264 = x22 * x3176 + x3263
    x3265 = x22 * x3177 + x3264
    x3266 = x141 * x2228 + x2468
    x3267 = x92 * (x136 * x3266 + x2250 * x93)
    x3268 = x22 * x3179 + x3267
    x3269 = x22 * x3180 + x3268
    x3270 = x141 * x2236 + x2473
    x3271 = x92 * (x136 * x3270 + x2256 * x93)
    x3272 = x22 * x3182 + x3271
    x3273 = x22 * x3183 + x3272
    x3274 = x141 * x2244 + x2479
    x3275 = x92 * (x136 * x3274 + x2262 * x93)
    x3276 = x22 * x3185 + x3275
    x3277 = x22 * x3186 + x3276
    x3278 = x112 * x1897 + x156 * x2244
    x3279 = x92 * (x136 * x3278 + x2268 * x93)
    x3280 = x22 * x3188 + x3279
    x3281 = x22 * x3189 + x3280
    x3282 = x92 * (x141 * x2250 + x1546 * x200)
    x3283 = x22 * x3190 + x3282
    x3284 = x22 * x3191 + x3283
    x3285 = x92 * (x1007 * x1567 + x141 * x2256)
    x3286 = x22 * x3192 + x3285
    x3287 = x22 * x3193 + x3286
    x3288 = x92 * (x141 * x2262 + x1586 * x977)
    x3289 = x22 * x3194 + x3288
    x3290 = x22 * x3195 + x3289
    x3291 = x92 * (x136 * x2493 + x141 * x2268)
    x3292 = x22 * x3196 + x3291
    x3293 = x22 * x3197 + x3292
    x3294 = x92 * (x112 * x1917 + x156 * x2268)
    x3295 = x22 * x3198 + x3294
    x3296 = x22 * x3199 + x3295
    x3297 = x21 * x2781 + x21 * x3200 + x2928
    x3298 = x21 * x2784 + x21 * x3202 + x2932
    x3299 = x21 * x2787 + x21 * x3204 + x2936
    x3300 = x21 * x2790 + x21 * x3206 + x2940
    x3301 = x21 * x2793 + x21 * x3208 + x2944
    x3302 = x21 * x2796 + x21 * x3210 + x2948
    x3303 = x21 * x2800 + x21 * x3212 + x2952
    x3304 = x21 * x2804 + x21 * x3214 + x2956
    x3305 = x21 * x2808 + x21 * x3216 + x2960
    x3306 = x21 * x2812 + x21 * x3218 + x2964
    x3307 = x21 * x2815 + x21 * x3220 + x2966
    x3308 = x21 * x2818 + x21 * x3222 + x2968
    x3309 = x21 * x2821 + x21 * x3224 + x2970
    x3310 = x21 * x2824 + x21 * x3226 + x2972
    x3311 = x21 * x2827 + x21 * x3228 + x2974
    x3312 = x21 * x2831 + x2981
    x3313 = x21 * x2834 + x2988
    x3314 = x21 * x2837 + x2993
    x3315 = x21 * x2840 + x2998
    x3316 = x21 * x2843 + x3005
    x3317 = x21 * x2846 + x3010
    x3318 = x21 * x2850 + x3015
    x3319 = x21 * x2854 + x3020
    x3320 = x21 * x2858 + x3027
    x3321 = x21 * x2862 + x3032
    x3322 = x21 * x2865 + x3035
    x3323 = x21 * x2868 + x3038
    x3324 = x21 * x2871 + x3041
    x3325 = x21 * x2874 + x3045
    x3326 = x21 * x2877 + x3048
    x3327 = x249 * x2561 - x2558 * x9
    x3328 = x3327 * x6
    x3329 = x249 * x2557 - x2563 * x719
    x3330 = -x131 * x3329 + x3327 * x5
    x3331 = x22 * x3248 + x92 * (
        x2625 * x3328 + x93 * (x1621 * x3328 + x93**2 * (2.0 * x3328 + x3330 * x4))
    )
    x3332 = x22 * x3249 + x3331
    x3333 = x2568 + x3327 * x9
    x3334 = x2566 + x3330 * x9
    x3335 = x22 * x3251 + x92 * (
        x2629 * x3333 + x93 * (x1625 * x3333 + x93 * (x136 * x3333 + x3334 * x93))
    )
    x3336 = x22 * x3252 + x3335
    x3337 = x12 * x3327 + 4.0 * x2200
    x3338 = x12 * x3330 + x2196 * x74
    x3339 = x22 * x3254 + x92 * (
        x2629 * x3337 + x93 * (x1625 * x3337 + x93 * (x136 * x3337 + x3338 * x93))
    )
    x3340 = x22 * x3255 + x3339
    x3341 = x141 * x3333 + x2575
    x3342 = x141 * (x2566 + x3334)
    x3343 = x22 * x3257 + x92 * (x1625 * x3341 + x93 * (x136 * x3341 + x3342 * x93))
    x3344 = x22 * x3258 + x3343
    x3345 = x141 * x3337 + x2583
    x3346 = x136 * x2581 + x141 * x3338
    x3347 = x22 * x3260 + x92 * (x1625 * x3345 + x93 * (x136 * x3345 + x3346 * x93))
    x3348 = x22 * x3261 + x3347
    x3349 = x105 * x2219 + x156 * x3337
    x3350 = x105 * x2217 + x156 * x3338
    x3351 = x22 * x3263 + x92 * (x1625 * x3349 + x93 * (x136 * x3349 + x3350 * x93))
    x3352 = x22 * x3264 + x3351
    x3353 = x141 * x3341 + x2588
    x3354 = x141 * x3342 + x170 * x2566
    x3355 = x22 * x3267 + x92 * (x136 * x3353 + x3354 * x93)
    x3356 = x22 * x3268 + x3355
    x3357 = x141 * x3345 + x2592
    x3358 = x141 * x3346 + x2581 * x977
    x3359 = x22 * x3271 + x92 * (x136 * x3357 + x3358 * x93)
    x3360 = x22 * x3272 + x3359
    x3361 = x141 * x3349 + x2599
    x3362 = x136 * x2597 + x141 * x3350
    x3363 = x22 * x3275 + x92 * (x136 * x3361 + x3362 * x93)
    x3364 = x22 * x3276 + x3363
    x3365 = x105 * x2244 + x156 * x3349
    x3366 = x105 * x2242 + x156 * x3350
    x3367 = x22 * x3279 + x92 * (x136 * x3365 + x3366 * x93)
    x3368 = x22 * x3280 + x3367
    x3369 = x22 * x3282 + x92 * (x141 * x3354 + x200 * x2566)
    x3370 = x22 * x3283 + x3369
    x3371 = x22 * x3285 + x92 * (x1007 * x2581 + x141 * x3358)
    x3372 = x22 * x3286 + x3371
    x3373 = x22 * x3288 + x92 * (x141 * x3362 + x2597 * x977)
    x3374 = x22 * x3289 + x3373
    x3375 = x22 * x3291 + x92 * (x136 * x2610 + x141 * x3366)
    x3376 = x22 * x3292 + x3375
    x3377 = x22 * x3294 + x92 * (x105 * x2268 + x156 * x3366)
    x3378 = x22 * x3295 + x3377
    x3379 = x0 * x2356 + x1069
    x3380 = x1062 * x2625 + x2355 * x93
    x3381 = x0 * x2359 + x1088
    x3382 = x2628 * x9
    x3383 = x1062 * x3382 + x2358 * x93
    x3384 = x0 * x2362 + x1104
    x3385 = x1100 * x2629 + x2361 * x93
    x3386 = x0 * x2366 + x1112
    x3387 = x1062 * x626 + x2365 * x93
    x3388 = x0 * x2370 + x1119
    x3389 = x211 * x4
    x3390 = x3389 * x6
    x3391 = x1100 * x3390 + x2369 * x93
    x3392 = x0 * x2375 + x1130
    x3393 = x1625 * x2372 + x2374 * x93
    x3394 = x0 * x2377 + x1136
    x3395 = x1062 * x200
    x3396 = x1063 * x200 + x3395
    x3397 = x0 * x2379 + x1142
    x3398 = x1007 * x1100
    x3399 = x1097 * x626 + x3398
    x3400 = x0 * x2381 + x1147
    x3401 = x2372 * x977
    x3402 = x1128 * x594 + x3401
    x3403 = x0 * x2384 + x1155
    x3404 = x120 * x2301 + x156 * x2372
    x3405 = x136 * x3404
    x3406 = x2383 * x93 + x3405
    x3407 = x0 * x2386 + x1161
    x3408 = x1036 * x224
    x3409 = x0 * x2388 + x1166
    x3410 = x1097 * x229
    x3411 = x0 * x2390 + x1171
    x3412 = x1128 * x205
    x3413 = x0 * x2392 + x1176
    x3414 = x179 * x2383
    x3415 = x0 * x2394 + x1181
    x3416 = x156 * x2383 + x2313
    x3417 = x1876 + x21 * x2356
    x3418 = x316 * x3380 + x3166
    x3419 = x1880 + x21 * x2359
    x3420 = x316 * x3383 + x3168
    x3421 = x1884 + x21 * x2362
    x3422 = x316 * x3385 + x3170
    x3423 = x1889 + x21 * x2366
    x3424 = x316 * x3387 + x3172
    x3425 = x1894 + x21 * x2370
    x3426 = x316 * x3391 + x3174
    x3427 = x1899 + x21 * x2375
    x3428 = x316 * x3393 + x3176
    x3429 = x1904 + x21 * x2377
    x3430 = x316 * x3396 + x3179
    x3431 = x1909 + x21 * x2379
    x3432 = x316 * x3399 + x3182
    x3433 = x1914 + x21 * x2381
    x3434 = x316 * x3402 + x3185
    x3435 = x1919 + x21 * x2384
    x3436 = x316 * x3406 + x3188
    x3437 = x1922 + x21 * x2386
    x3438 = x21 * x3408 + x3190
    x3439 = x1925 + x21 * x2388
    x3440 = x21 * x3410 + x3192
    x3441 = x1928 + x21 * x2390
    x3442 = x21 * x3412 + x3194
    x3443 = x1931 + x21 * x2392
    x3444 = x21 * x3414 + x3196
    x3445 = x1934 + x21 * x2394
    x3446 = x316 * x3416 + x3198
    x3447 = x92 * (x1549 * x2625 + x2456 * x93)
    x3448 = x3380 * x543 + x3447
    x3449 = x92 * (x1549 * x3382 + x2460 * x93)
    x3450 = x3383 * x543 + x3449
    x3451 = x92 * (x1569 * x2629 + x2464 * x93)
    x3452 = x3385 * x543 + x3451
    x3453 = x92 * (x1549 * x626 + x2469 * x93)
    x3454 = x3387 * x543 + x3453
    x3455 = x92 * (x1569 * x3390 + x2474 * x93)
    x3456 = x3391 * x543 + x3455
    x3457 = x92 * (x1625 * x2478 + x2480 * x93)
    x3458 = x3393 * x543 + x3457
    x3459 = x1549 * x200
    x3460 = x92 * (x1550 * x200 + x3459)
    x3461 = x3396 * x543 + x3460
    x3462 = x1007 * x1569
    x3463 = x92 * (x1567 * x626 + x3462)
    x3464 = x3399 * x543 + x3463
    x3465 = x2478 * x977
    x3466 = x92 * (x1586 * x594 + x3465)
    x3467 = x3402 * x543 + x3466
    x3468 = x112 * x2372 + x156 * x2478
    x3469 = x136 * x3468
    x3470 = x92 * (x2493 * x93 + x3469)
    x3471 = x3406 * x543 + x3470
    x3472 = x1533 * x224
    x3473 = x22 * x3408 + x3472
    x3474 = x1567 * x229
    x3475 = x22 * x3410 + x3474
    x3476 = x1586 * x205
    x3477 = x22 * x3412 + x3476
    x3478 = x179 * x2493
    x3479 = x22 * x3414 + x3478
    x3480 = x92 * (x112 * x2383 + x156 * x2493)
    x3481 = x3416 * x543 + x3480
    x3482 = x21 * x3166 + x2830
    x3483 = x21 * x3418 + x3482
    x3484 = x1876 * x21 + x2116
    x3485 = x21 * x3168 + x2833
    x3486 = x21 * x3420 + x3485
    x3487 = x1880 * x21 + x2124
    x3488 = x21 * x3170 + x2836
    x3489 = x21 * x3422 + x3488
    x3490 = x1884 * x21 + x2132
    x3491 = x21 * x3172 + x2839
    x3492 = x21 * x3424 + x3491
    x3493 = x1889 * x21 + x2139
    x3494 = x21 * x3174 + x2842
    x3495 = x21 * x3426 + x3494
    x3496 = x1894 * x21 + x2146
    x3497 = x21 * x3176 + x2845
    x3498 = x21 * x3428 + x3497
    x3499 = x1899 * x21 + x2153
    x3500 = x21 * x3179 + x2849
    x3501 = x21 * x3430 + x3500
    x3502 = x1904 * x21 + x2158
    x3503 = x21 * x3182 + x2853
    x3504 = x21 * x3432 + x3503
    x3505 = x1909 * x21 + x2163
    x3506 = x21 * x3185 + x2857
    x3507 = x21 * x3434 + x3506
    x3508 = x1914 * x21 + x2168
    x3509 = x21 * x3188 + x2861
    x3510 = x21 * x3436 + x3509
    x3511 = x1919 * x21 + x2173
    x3512 = x21 * x3190 + x2864
    x3513 = x21 * x3438 + x3512
    x3514 = x1922 * x21 + x2176
    x3515 = x21 * x3192 + x2867
    x3516 = x21 * x3440 + x3515
    x3517 = x1925 * x21 + x2179
    x3518 = x21 * x3194 + x2870
    x3519 = x21 * x3442 + x3518
    x3520 = x1928 * x21 + x2182
    x3521 = x21 * x3196 + x2873
    x3522 = x21 * x3444 + x3521
    x3523 = x1931 * x21 + x2185
    x3524 = x21 * x3198 + x2876
    x3525 = x21 * x3446 + x3524
    x3526 = x1934 * x21 + x2188
    x3527 = x21 * x3448 + x3249
    x3528 = x21 * x3450 + x3252
    x3529 = x21 * x3452 + x3255
    x3530 = x21 * x3454 + x3258
    x3531 = x21 * x3456 + x3261
    x3532 = x21 * x3458 + x3264
    x3533 = x21 * x3461 + x3268
    x3534 = x21 * x3464 + x3272
    x3535 = x21 * x3467 + x3276
    x3536 = x21 * x3471 + x3280
    x3537 = x21 * x3473 + x3283
    x3538 = x21 * x3475 + x3286
    x3539 = x21 * x3477 + x3289
    x3540 = x21 * x3479 + x3292
    x3541 = x21 * x3481 + x3295
    x3542 = x92 * (x2568 * x2625 + x2572 * x93)
    x3543 = x22 * x3447 + x3542
    x3544 = x22 * x3448 + x3543
    x3545 = x92 * (x2568 * x3382 + x2577 * x93)
    x3546 = x22 * x3449 + x3545
    x3547 = x22 * x3450 + x3546
    x3548 = x92 * (x2582 * x2629 + x2585 * x93)
    x3549 = x22 * x3451 + x3548
    x3550 = x22 * x3452 + x3549
    x3551 = x92 * (x2568 * x626 + x2589 * x93)
    x3552 = x22 * x3453 + x3551
    x3553 = x22 * x3454 + x3552
    x3554 = x2582 * x4
    x3555 = x92 * (x211 * x3554 * x6 + x2593 * x93)
    x3556 = x22 * x3455 + x3555
    x3557 = x22 * x3456 + x3556
    x3558 = x92 * (x1625 * x2598 + x2600 * x93)
    x3559 = x22 * x3457 + x3558
    x3560 = x22 * x3458 + x3559
    x3561 = x200 * x2568
    x3562 = x92 * (x200 * x2569 + x3561)
    x3563 = x22 * x3460 + x3562
    x3564 = x22 * x3461 + x3563
    x3565 = x1007 * x2582
    x3566 = x92 * (x2581 * x626 + x3565)
    x3567 = x22 * x3463 + x3566
    x3568 = x22 * x3464 + x3567
    x3569 = x2598 * x977
    x3570 = x92 * (x2597 * x594 + x3569)
    x3571 = x22 * x3466 + x3570
    x3572 = x22 * x3467 + x3571
    x3573 = x105 * x2478 + x156 * x2598
    x3574 = x136 * x3573
    x3575 = x92 * (x2610 * x93 + x3574)
    x3576 = x22 * x3470 + x3575
    x3577 = x22 * x3471 + x3576
    x3578 = x224 * x2562
    x3579 = x22 * x3472 + x3578
    x3580 = x22 * x3473 + x3579
    x3581 = x229 * x2581
    x3582 = x22 * x3474 + x3581
    x3583 = x22 * x3475 + x3582
    x3584 = x205 * x2597
    x3585 = x22 * x3476 + x3584
    x3586 = x22 * x3477 + x3585
    x3587 = x179 * x2610
    x3588 = x22 * x3478 + x3587
    x3589 = x22 * x3479 + x3588
    x3590 = x92 * (x105 * x2493 + x156 * x2610)
    x3591 = x22 * x3480 + x3590
    x3592 = x22 * x3481 + x3591
    x3593 = x21 * x2830 + x21 * x3482 + x2980
    x3594 = x21 * x2833 + x21 * x3485 + x2987
    x3595 = x21 * x2836 + x21 * x3488 + x2992
    x3596 = x21 * x2839 + x21 * x3491 + x2997
    x3597 = x21 * x2842 + x21 * x3494 + x3004
    x3598 = x21 * x2845 + x21 * x3497 + x3009
    x3599 = x21 * x2849 + x21 * x3500 + x3014
    x3600 = x21 * x2853 + x21 * x3503 + x3019
    x3601 = x21 * x2857 + x21 * x3506 + x3026
    x3602 = x21 * x2861 + x21 * x3509 + x3031
    x3603 = x21 * x2864 + x21 * x3512 + x3034
    x3604 = x21 * x2867 + x21 * x3515 + x3037
    x3605 = x21 * x2870 + x21 * x3518 + x3040
    x3606 = x21 * x2873 + x21 * x3521 + x3044
    x3607 = x21 * x2876 + x21 * x3524 + x3047
    x3608 = x21 * x3249 + x3055
    x3609 = x21 * x3252 + x3060
    x3610 = x21 * x3255 + x3065
    x3611 = x21 * x3258 + x3070
    x3612 = x21 * x3261 + x3075
    x3613 = x21 * x3264 + x3080
    x3614 = x21 * x3268 + x3085
    x3615 = x21 * x3272 + x3090
    x3616 = x21 * x3276 + x3095
    x3617 = x21 * x3280 + x3100
    x3618 = x21 * x3283 + x3103
    x3619 = x21 * x3286 + x3106
    x3620 = x21 * x3289 + x3109
    x3621 = x21 * x3292 + x3112
    x3622 = x21 * x3295 + x3115
    x3623 = -x12 * x2558 + 4.0 * x1530 + x2561 * x475
    x3624 = x3623 * x6
    x3625 = -x1074 * x2563 + 4.0 * x1539 + x2557 * x475
    x3626 = -x131 * x3625 + x3623 * x5
    x3627 = x3626 * x4
    x3628 = (
        x22 * x3542
        + x22 * x3543
        + x92 * (x2625 * x3624 + x93 * (x1621 * x3624 + x93**2 * (2.0 * x3624 + x3627)))
    )
    x3629 = x141 * x3624
    x3630 = (
        x22 * x3545
        + x22 * x3546
        + x92 * (x3382 * x3624 + x93 * (x3624 * x594 + x93 * (x141 * x3627 + x3629)))
    )
    x3631 = x12 * x3623 + 5.0 * x2568
    x3632 = x136 * x3631
    x3633 = x12 * x3626 + 5.0 * x2566
    x3634 = (
        x22 * x3548
        + x22 * x3549
        + x92 * (x2629 * x3631 + x93 * (x1625 * x3631 + x93 * (x3632 + x3633 * x93)))
    )
    x3635 = x170 * x3624
    x3636 = (
        x22 * x3551 + x22 * x3552 + x92 * (x3624 * x626 + x93 * (x170 * x3627 + x3635))
    )
    x3637 = x3631 * x977
    x3638 = (
        x22 * x3555 + x22 * x3556 + x92 * (x3390 * x3631 + x93 * (x3633 * x594 + x3637))
    )
    x3639 = x156 * x3631 + x2582 * x99
    x3640 = x136 * x3639
    x3641 = x156 * x3633 + x2581 * x99
    x3642 = (
        x22 * x3558 + x22 * x3559 + x92 * (x1625 * x3639 + x93 * (x3640 + x3641 * x93))
    )
    x3643 = x200 * x3624
    x3644 = x22 * x3562 + x22 * x3563 + x92 * (x200 * x3627 + x3643)
    x3645 = x1007 * x3631
    x3646 = x22 * x3566 + x22 * x3567 + x92 * (x3633 * x626 + x3645)
    x3647 = x3639 * x977
    x3648 = x22 * x3570 + x22 * x3571 + x92 * (x3641 * x594 + x3647)
    x3649 = x156 * x3639 + x2598 * x99
    x3650 = x136 * x3649
    x3651 = x156 * x3641 + x2597 * x99
    x3652 = x22 * x3575 + x22 * x3576 + x92 * (x3650 + x3651 * x93)
    x3653 = x22 * x3578 + x22 * x3579 + x224 * x3626
    x3654 = x22 * x3581 + x22 * x3582 + x229 * x3633
    x3655 = x205 * x3641 + x22 * x3584 + x22 * x3585
    x3656 = x179 * x3651 + x22 * x3587 + x22 * x3588
    x3657 = x22 * x3590 + x22 * x3591 + x92 * (x156 * x3651 + x2610 * x99)
    x3658 = x0 * x2663 + x1756
    x3659 = x223 * x4**4
    x3660 = x0 * x1191
    x3661 = x0 * x2665 + x1760
    x3662 = x223 * x2624
    x3663 = x1229 * x3662
    x3664 = x0 * x2667 + x1764
    x3665 = x12 * x3662
    x3666 = x0 * x2669 + x1769
    x3667 = x0 * x2628
    x3668 = x0 * x2671 + x1774
    x3669 = x0 * x2673 + x1779
    x3670 = x13 * x7
    x3671 = x223 * x3660
    x3672 = x0 * x2676 + x1783
    x3673 = x0 * x1624
    x3674 = x0 * x2679 + x1787
    x3675 = x0 * x2682 + x1791
    x3676 = x0 * x2685 + x1794
    x3677 = x217 * x4
    x3678 = x0 * x2687 + x1797
    x3679 = x112 * x2642 + x141 * x2675
    x3680 = x0 * x2689 + x1800
    x3681 = x112 * x2645 + x141 * x2678
    x3682 = x0 * x2691 + x1803
    x3683 = x112 * x2648 + x141 * x2681
    x3684 = x0 * x2693 + x1806
    x3685 = x218 * (x1227 + x1228)
    x3686 = x0 * x2695 + x1809
    x3687 = x1941 * x3659
    x3688 = x1191 * x21
    x3689 = x3659 * x3688 + x3687
    x3690 = x1963 * x3662
    x3691 = x21 * x3663 + x3690
    x3692 = x1941 * x3665
    x3693 = x3665 * x3688 + x3692
    x3694 = x1975 * x2628
    x3695 = x21 * x2628
    x3696 = x1767 * x3695 + x3694
    x3697 = x1981 * x2628
    x3698 = x1772 * x3695 + x3697
    x3699 = x1941 * x223
    x3700 = x3670 * x3699
    x3701 = x223 * x3688
    x3702 = x3670 * x3701 + x3700
    x3703 = x1624 * x2750
    x3704 = x1624 * x21
    x3705 = x2675 * x3704 + x3703
    x3706 = x1624 * x2754
    x3707 = x2678 * x3704 + x3706
    x3708 = x1624 * x2758
    x3709 = x2681 * x3704 + x3708
    x3710 = x3677 * x3699
    x3711 = x3677 * x3701 + x3710
    x3712 = x92 * (x105 * x2675 + x141 * x2750)
    x3713 = x316 * x3679 + x3712
    x3714 = x92 * (x105 * x2678 + x141 * x2754)
    x3715 = x316 * x3681 + x3714
    x3716 = x92 * (x105 * x2681 + x141 * x2758)
    x3717 = x316 * x3683 + x3716
    x3718 = x218 * x92 * (x1961 + x1962)
    x3719 = x316 * x3685 + x3718
    x3720 = x1941 * x245
    x3721 = x245 * x3688 + x3720
    x3722 = x2017 * x3659
    x3723 = x1191 * x22
    x3724 = x3659 * x3723 + x3722
    x3725 = x2031 * x3662
    x3726 = x22 * x3663 + x3725
    x3727 = x2040 * x3662
    x3728 = x3665 * x3723 + x3727
    x3729 = x2048 * x2628
    x3730 = x22 * x2628
    x3731 = x1767 * x3730 + x3729
    x3732 = x2055 * x2628
    x3733 = x1772 * x3730 + x3732
    x3734 = x2063 * x2628
    x3735 = x223 * x3723
    x3736 = x3670 * x3735 + x3734
    x3737 = x1624 * x2799
    x3738 = x1624 * x22
    x3739 = x2675 * x3738 + x3737
    x3740 = x1624 * x2803
    x3741 = x2678 * x3738 + x3740
    x3742 = x1624 * x2807
    x3743 = x2681 * x3738 + x3742
    x3744 = x1624 * x2811
    x3745 = x3677 * x3735 + x3744
    x3746 = x92 * (x112 * x2709 + x141 * x2799)
    x3747 = x3679 * x543 + x3746
    x3748 = x92 * (x112 * x2712 + x141 * x2803)
    x3749 = x3681 * x543 + x3748
    x3750 = x92 * (x112 * x2716 + x141 * x2807)
    x3751 = x3683 * x543 + x3750
    x3752 = x92 * (x112 * x2719 + x141 * x2811)
    x3753 = x3685 * x543 + x3752
    x3754 = x92 * (x156 * x2811 + x2684)
    x3755 = x245 * x3723 + x3754
    x3756 = x2879 * x3659
    x3757 = x21 * x3687 + x3756
    x3758 = x21 * x3689 + x3757
    x3759 = x2887 * x3662
    x3760 = x21 * x3690 + x3759
    x3761 = x21 * x3691 + x3760
    x3762 = x2879 * x3665
    x3763 = x21 * x3692 + x3762
    x3764 = x21 * x3693 + x3763
    x3765 = x2628 * x2895
    x3766 = x21 * x3694 + x3765
    x3767 = x21 * x3696 + x3766
    x3768 = x2628 * x2899
    x3769 = x21 * x3697 + x3768
    x3770 = x21 * x3698 + x3769
    x3771 = x223 * x2879
    x3772 = x3670 * x3771
    x3773 = x21 * x3700 + x3772
    x3774 = x21 * x3702 + x3773
    x3775 = x1624 * x2905
    x3776 = x21 * x3703 + x3775
    x3777 = x21 * x3705 + x3776
    x3778 = x1624 * x2909
    x3779 = x21 * x3706 + x3778
    x3780 = x21 * x3707 + x3779
    x3781 = x1624 * x2913
    x3782 = x21 * x3708 + x3781
    x3783 = x21 * x3709 + x3782
    x3784 = x3677 * x3771
    x3785 = x21 * x3710 + x3784
    x3786 = x21 * x3711 + x3785
    x3787 = x92 * (x141 * x2905 + x2750 * x99)
    x3788 = x21 * x3712 + x3787
    x3789 = x21 * x3713 + x3788
    x3790 = x92 * (x141 * x2909 + x2754 * x99)
    x3791 = x21 * x3714 + x3790
    x3792 = x21 * x3715 + x3791
    x3793 = x92 * (x141 * x2913 + x2758 * x99)
    x3794 = x21 * x3716 + x3793
    x3795 = x21 * x3717 + x3794
    x3796 = x218 * x92 * (x2885 + x2886)
    x3797 = x21 * x3718 + x3796
    x3798 = x21 * x3719 + x3797
    x3799 = x245 * x2879
    x3800 = x21 * x3720 + x3799
    x3801 = x21 * x3721 + x3800
    x3802 = x2924 * x3659
    x3803 = x22 * x3687 + x3802
    x3804 = x21 * x3724 + x3803
    x3805 = x2930 * x3662
    x3806 = x22 * x3690 + x3805
    x3807 = x21 * x3726 + x3806
    x3808 = x2934 * x3662
    x3809 = x22 * x3692 + x3808
    x3810 = x21 * x3728 + x3809
    x3811 = x2628 * x2938
    x3812 = x22 * x3694 + x3811
    x3813 = x21 * x3731 + x3812
    x3814 = x2628 * x2942
    x3815 = x22 * x3697 + x3814
    x3816 = x21 * x3733 + x3815
    x3817 = x2628 * x2946
    x3818 = x22 * x3700 + x3817
    x3819 = x21 * x3736 + x3818
    x3820 = x1624 * x2950
    x3821 = x22 * x3703 + x3820
    x3822 = x21 * x3739 + x3821
    x3823 = x1624 * x2954
    x3824 = x22 * x3706 + x3823
    x3825 = x21 * x3741 + x3824
    x3826 = x1624 * x2958
    x3827 = x22 * x3708 + x3826
    x3828 = x21 * x3743 + x3827
    x3829 = x1624 * x2962
    x3830 = x22 * x3710 + x3829
    x3831 = x21 * x3745 + x3830
    x3832 = x92 * (x105 * x2799 + x141 * x2950)
    x3833 = x22 * x3712 + x3832
    x3834 = x21 * x3747 + x3833
    x3835 = x92 * (x105 * x2803 + x141 * x2954)
    x3836 = x22 * x3714 + x3835
    x3837 = x21 * x3749 + x3836
    x3838 = x92 * (x105 * x2807 + x141 * x2958)
    x3839 = x22 * x3716 + x3838
    x3840 = x21 * x3751 + x3839
    x3841 = x92 * (x105 * x2811 + x141 * x2962)
    x3842 = x22 * x3718 + x3841
    x3843 = x21 * x3753 + x3842
    x3844 = x92 * (x156 * x2962 + x2762)
    x3845 = x22 * x3720 + x3844
    x3846 = x21 * x3755 + x3845
    x3847 = x2976 * x3659
    x3848 = x22 * x3722 + x3847
    x3849 = x22 * x3724 + x3848
    x3850 = x2984 * x3662
    x3851 = x22 * x3725 + x3850
    x3852 = x22 * x3726 + x3851
    x3853 = x2990 * x3662
    x3854 = x22 * x3727 + x3853
    x3855 = x22 * x3728 + x3854
    x3856 = x2628 * x2995
    x3857 = x22 * x3729 + x3856
    x3858 = x22 * x3731 + x3857
    x3859 = x2628 * x3001
    x3860 = x22 * x3732 + x3859
    x3861 = x22 * x3733 + x3860
    x3862 = x2628 * x3007
    x3863 = x22 * x3734 + x3862
    x3864 = x22 * x3736 + x3863
    x3865 = x1624 * x3012
    x3866 = x22 * x3737 + x3865
    x3867 = x22 * x3739 + x3866
    x3868 = x1624 * x3017
    x3869 = x22 * x3740 + x3868
    x3870 = x22 * x3741 + x3869
    x3871 = x1624 * x3023
    x3872 = x22 * x3742 + x3871
    x3873 = x22 * x3743 + x3872
    x3874 = x1624 * x3029
    x3875 = x22 * x3744 + x3874
    x3876 = x22 * x3745 + x3875
    x3877 = x92 * (x112 * x2848 + x141 * x3012)
    x3878 = x22 * x3746 + x3877
    x3879 = x22 * x3747 + x3878
    x3880 = x92 * (x112 * x2852 + x141 * x3017)
    x3881 = x22 * x3748 + x3880
    x3882 = x22 * x3749 + x3881
    x3883 = x92 * (x112 * x2856 + x141 * x3023)
    x3884 = x22 * x3750 + x3883
    x3885 = x22 * x3751 + x3884
    x3886 = x112 * x2860
    x3887 = x92 * (x141 * x3029 + x3886)
    x3888 = x22 * x3752 + x3887
    x3889 = x22 * x3753 + x3888
    x3890 = x92 * (x120 * x2811 + x156 * x3029)
    x3891 = x22 * x3754 + x3890
    x3892 = x22 * x3755 + x3891
    x3893 = 5.0 * x1940 + x249 * x2879 - x2881 * x719
    x3894 = x3893 * x9
    x3895 = 6.0 * x2880
    x3896 = x3894 + x3895
    x3897 = x141 * x3896 + 6.0 * x2888
    x3898 = x156 * (x3894 + x3895)
    x3899 = x223 * x3893
    x3900 = x141 * x3897 + 6.0 * x2896
    x3901 = x141 * x3898 + 6.0 * x2900
    x3902 = x190 * (x3894 + x3895)
    x3903 = 4.0 * x2016 + x249 * x2924 - x2926 * x719
    x3904 = x3659 * x3903
    x3905 = 5.0 * x2925 + x3903 * x9
    x3906 = x3662 * x3905
    x3907 = x12 * x3903 + x2880
    x3908 = x3662 * x3907
    x3909 = x141 * x3905 + x2930 * x99
    x3910 = x2628 * x3909
    x3911 = x141 * x3907 + x2934 * x99
    x3912 = x2628 * x3911
    x3913 = x156 * x3907 + x2893
    x3914 = x2628 * x3913
    x3915 = x141 * x3909 + x2938 * x99
    x3916 = x1624 * x3915
    x3917 = x141 * x3911 + x2942 * x99
    x3918 = x1624 * x3917
    x3919 = x141 * x3913 + x2946 * x99
    x3920 = x1624 * x3919
    x3921 = x156 * x3913 + x2903
    x3922 = x1624 * x3921
    x3923 = x92 * (x141 * x3915 + x2950 * x99)
    x3924 = x92 * (x141 * x3917 + x2954 * x99)
    x3925 = x92 * (x141 * x3919 + x2958 * x99)
    x3926 = x92 * (x141 * x3921 + x2962 * x99)
    x3927 = x92 * (x156 * x3921 + x2917)
    x3928 = 3.0 * x2107 + x249 * x2976 - x2978 * x719
    x3929 = x3659 * x3928
    x3930 = x22 * x3802 + x3929
    x3931 = 4.0 * x2977 + x3928 * x9
    x3932 = x3662 * x3931
    x3933 = x22 * x3805 + x3932
    x3934 = x12 * x3928 + 2.0 * x2925
    x3935 = x3662 * x3934
    x3936 = x22 * x3808 + x3935
    x3937 = x105 * x2984 + x141 * x3931
    x3938 = x2628 * x3937
    x3939 = x22 * x3811 + x3938
    x3940 = x105 * x2990 + x141 * x3934
    x3941 = x2628 * x3940
    x3942 = x22 * x3814 + x3941
    x3943 = x120 * x2934 + x156 * x3934
    x3944 = x2628 * x3943
    x3945 = x22 * x3817 + x3944
    x3946 = x105 * x2995 + x141 * x3937
    x3947 = x1624 * x3946
    x3948 = x22 * x3820 + x3947
    x3949 = x105 * x3001 + x141 * x3940
    x3950 = x1624 * x3949
    x3951 = x22 * x3823 + x3950
    x3952 = x105 * x3007 + x141 * x3943
    x3953 = x1624 * x3952
    x3954 = x22 * x3826 + x3953
    x3955 = x120 * x2946 + x156 * x3943
    x3956 = x1624 * x3955
    x3957 = x22 * x3829 + x3956
    x3958 = x92 * (x105 * x3012 + x141 * x3946)
    x3959 = x22 * x3832 + x3958
    x3960 = x92 * (x105 * x3017 + x141 * x3949)
    x3961 = x22 * x3835 + x3960
    x3962 = x92 * (x105 * x3023 + x141 * x3952)
    x3963 = x22 * x3838 + x3962
    x3964 = x92 * (x105 * x3029 + x141 * x3955)
    x3965 = x22 * x3841 + x3964
    x3966 = x92 * (x120 * x2962 + x156 * x3955)
    x3967 = x22 * x3844 + x3966
    x3968 = 2.0 * x2194 + x249 * x3050 - x3052 * x719
    x3969 = x3659 * x3968
    x3970 = x22 * x3847 + x3969
    x3971 = x22 * x3848 + x3970
    x3972 = 3.0 * x3051 + x3968 * x9
    x3973 = x3662 * x3972
    x3974 = x22 * x3850 + x3973
    x3975 = x22 * x3851 + x3974
    x3976 = x12 * x3968 + 3.0 * x2977
    x3977 = x3662 * x3976
    x3978 = x22 * x3853 + x3977
    x3979 = x22 * x3854 + x3978
    x3980 = x112 * x3057 + x141 * x3972
    x3981 = x2628 * x3980
    x3982 = x22 * x3856 + x3981
    x3983 = x22 * x3857 + x3982
    x3984 = x112 * x3062 + x141 * x3976
    x3985 = x2628 * x3984
    x3986 = x22 * x3859 + x3985
    x3987 = x22 * x3860 + x3986
    x3988 = x112 * x2990 + x156 * x3976
    x3989 = x2628 * x3988
    x3990 = x22 * x3862 + x3989
    x3991 = x22 * x3863 + x3990
    x3992 = x112 * x3067 + x141 * x3980
    x3993 = x1624 * x3992
    x3994 = x22 * x3865 + x3993
    x3995 = x22 * x3866 + x3994
    x3996 = x112 * x3072 + x141 * x3984
    x3997 = x1624 * x3996
    x3998 = x22 * x3868 + x3997
    x3999 = x22 * x3869 + x3998
    x4000 = x112 * x3077 + x141 * x3988
    x4001 = x1624 * x4000
    x4002 = x22 * x3871 + x4001
    x4003 = x22 * x3872 + x4002
    x4004 = x112 * x3007 + x156 * x3988
    x4005 = x1624 * x4004
    x4006 = x22 * x3874 + x4005
    x4007 = x22 * x3875 + x4006
    x4008 = x92 * (x112 * x3082 + x141 * x3992)
    x4009 = x22 * x3877 + x4008
    x4010 = x22 * x3878 + x4009
    x4011 = x92 * (x112 * x3087 + x141 * x3996)
    x4012 = x22 * x3880 + x4011
    x4013 = x22 * x3881 + x4012
    x4014 = x92 * (x112 * x3092 + x141 * x4000)
    x4015 = x22 * x3883 + x4014
    x4016 = x22 * x3884 + x4015
    x4017 = x92 * (x112 * x3097 + x141 * x4004)
    x4018 = x22 * x3887 + x4017
    x4019 = x22 * x3888 + x4018
    x4020 = x92 * (x112 * x3029 + x156 * x4004)
    x4021 = x22 * x3890 + x4020
    x4022 = x22 * x3891 + x4021
    x4023 = x0 * x2697 + x1813
    x4024 = x1298 * x3659
    x4025 = x0 * x2699 + x1818
    x4026 = x0 * x3662
    x4027 = x0 * x2701 + x1822
    x4028 = x0 * x2703 + x1827
    x4029 = x0 * x2705 + x1833
    x4030 = x0 * x2707 + x1839
    x4031 = x0 * x2710 + x1843
    x4032 = x0 * x2713 + x1847
    x4033 = x0 * x2717 + x1851
    x4034 = x0 * x2720 + x1856
    x4035 = x0 * x2722 + x1859
    x4036 = x120 * x3130 + x141 * x2709
    x4037 = x0 * x2724 + x1862
    x4038 = x120 * x3133 + x141 * x2712
    x4039 = x0 * x2726 + x1865
    x4040 = x120 * x3136 + x141 * x2716
    x4041 = x0 * x2728 + x1869
    x4042 = x120 * x3139
    x4043 = x141 * x2719 + x4042
    x4044 = x0 * x2730 + x1872
    x4045 = x156 * x2719 + x2651
    x4046 = x21 * x4024 + x3722
    x4047 = x21 * x3662
    x4048 = x1328 * x4047 + x3725
    x4049 = x1340 * x4047 + x3727
    x4050 = x1825 * x3695 + x3729
    x4051 = x1831 * x3695 + x3732
    x4052 = x1837 * x3695 + x3734
    x4053 = x2709 * x3704 + x3737
    x4054 = x2712 * x3704 + x3740
    x4055 = x2716 * x3704 + x3742
    x4056 = x2719 * x3704 + x3744
    x4057 = x316 * x4036 + x3746
    x4058 = x316 * x4038 + x3748
    x4059 = x316 * x4040 + x3750
    x4060 = x316 * x4043 + x3752
    x4061 = x316 * x4045 + x3754
    x4062 = x2108 * x3659
    x4063 = x22 * x4024 + x4062
    x4064 = x2121 * x3662
    x4065 = x22 * x3662
    x4066 = x1328 * x4065 + x4064
    x4067 = x2129 * x3662
    x4068 = x1340 * x4065 + x4067
    x4069 = x2137 * x2628
    x4070 = x1825 * x3730 + x4069
    x4071 = x2144 * x2628
    x4072 = x1831 * x3730 + x4071
    x4073 = x2151 * x2628
    x4074 = x1837 * x3730 + x4073
    x4075 = x1624 * x2848
    x4076 = x2709 * x3738 + x4075
    x4077 = x1624 * x2852
    x4078 = x2712 * x3738 + x4077
    x4079 = x1624 * x2856
    x4080 = x2716 * x3738 + x4079
    x4081 = x1624 * x2860
    x4082 = x2719 * x3738 + x4081
    x4083 = x92 * (x120 * x3178 + x141 * x2848)
    x4084 = x4036 * x543 + x4083
    x4085 = x92 * (x120 * x3181 + x141 * x2852)
    x4086 = x4038 * x543 + x4085
    x4087 = x92 * (x120 * x3184 + x141 * x2856)
    x4088 = x4040 * x543 + x4087
    x4089 = x92 * (x120 * x3187 + x141 * x2860)
    x4090 = x4043 * x543 + x4089
    x4091 = x92 * (x120 * x2719 + x156 * x2860)
    x4092 = x4045 * x543 + x4091
    x4093 = x21 * x3722 + x3802
    x4094 = x21 * x4046 + x4093
    x4095 = x21 * x3725 + x3805
    x4096 = x21 * x4048 + x4095
    x4097 = x21 * x3727 + x3808
    x4098 = x21 * x4049 + x4097
    x4099 = x21 * x3729 + x3811
    x4100 = x21 * x4050 + x4099
    x4101 = x21 * x3732 + x3814
    x4102 = x21 * x4051 + x4101
    x4103 = x21 * x3734 + x3817
    x4104 = x21 * x4052 + x4103
    x4105 = x21 * x3737 + x3820
    x4106 = x21 * x4053 + x4105
    x4107 = x21 * x3740 + x3823
    x4108 = x21 * x4054 + x4107
    x4109 = x21 * x3742 + x3826
    x4110 = x21 * x4055 + x4109
    x4111 = x21 * x3744 + x3829
    x4112 = x21 * x4056 + x4111
    x4113 = x21 * x3746 + x3832
    x4114 = x21 * x4057 + x4113
    x4115 = x21 * x3748 + x3835
    x4116 = x21 * x4058 + x4115
    x4117 = x21 * x3750 + x3838
    x4118 = x21 * x4059 + x4117
    x4119 = x21 * x3752 + x3841
    x4120 = x21 * x4060 + x4119
    x4121 = x21 * x3754 + x3844
    x4122 = x21 * x4061 + x4121
    x4123 = x21 * x4063 + x3848
    x4124 = x21 * x4066 + x3851
    x4125 = x21 * x4068 + x3854
    x4126 = x21 * x4070 + x3857
    x4127 = x21 * x4072 + x3860
    x4128 = x21 * x4074 + x3863
    x4129 = x21 * x4076 + x3866
    x4130 = x21 * x4078 + x3869
    x4131 = x21 * x4080 + x3872
    x4132 = x21 * x4082 + x3875
    x4133 = x21 * x4084 + x3878
    x4134 = x21 * x4086 + x3881
    x4135 = x21 * x4088 + x3884
    x4136 = x21 * x4090 + x3888
    x4137 = x21 * x4092 + x3891
    x4138 = x3050 * x3659
    x4139 = x22 * x4062 + x4138
    x4140 = x22 * x4063 + x4139
    x4141 = x3057 * x3662
    x4142 = x22 * x4064 + x4141
    x4143 = x22 * x4066 + x4142
    x4144 = x3062 * x3662
    x4145 = x22 * x4067 + x4144
    x4146 = x22 * x4068 + x4145
    x4147 = x2628 * x3067
    x4148 = x22 * x4069 + x4147
    x4149 = x22 * x4070 + x4148
    x4150 = x2628 * x3072
    x4151 = x22 * x4071 + x4150
    x4152 = x22 * x4072 + x4151
    x4153 = x2628 * x3077
    x4154 = x22 * x4073 + x4153
    x4155 = x22 * x4074 + x4154
    x4156 = x1624 * x3082
    x4157 = x22 * x4075 + x4156
    x4158 = x22 * x4076 + x4157
    x4159 = x1624 * x3087
    x4160 = x22 * x4077 + x4159
    x4161 = x22 * x4078 + x4160
    x4162 = x1624 * x3092
    x4163 = x22 * x4079 + x4162
    x4164 = x22 * x4080 + x4163
    x4165 = x1624 * x3097
    x4166 = x22 * x4081 + x4165
    x4167 = x22 * x4082 + x4166
    x4168 = x92 * (x120 * x3266 + x141 * x3082)
    x4169 = x22 * x4083 + x4168
    x4170 = x22 * x4084 + x4169
    x4171 = x92 * (x120 * x3270 + x141 * x3087)
    x4172 = x22 * x4085 + x4171
    x4173 = x22 * x4086 + x4172
    x4174 = x92 * (x120 * x3274 + x141 * x3092)
    x4175 = x22 * x4087 + x4174
    x4176 = x22 * x4088 + x4175
    x4177 = x92 * (x120 * x3278 + x141 * x3097)
    x4178 = x22 * x4089 + x4177
    x4179 = x22 * x4090 + x4178
    x4180 = x92 * (x156 * x3097 + x3886)
    x4181 = x22 * x4091 + x4180
    x4182 = x22 * x4092 + x4181
    x4183 = x249 * x3327 + x2560 - x3329 * x719
    x4184 = x22 * x4138 + x3659 * x4183
    x4185 = x22 * x4139 + x4184
    x4186 = 2.0 * x3328 + x4183 * x9
    x4187 = x22 * x4141 + x3662 * x4186
    x4188 = x22 * x4142 + x4187
    x4189 = x12 * x4183 + 4.0 * x3051
    x4190 = x22 * x4144 + x3662 * x4189
    x4191 = x22 * x4145 + x4190
    x4192 = x120 * x3333 + x141 * x4186
    x4193 = x22 * x4147 + x2628 * x4192
    x4194 = x22 * x4148 + x4193
    x4195 = x120 * x3337 + x141 * x4189
    x4196 = x22 * x4150 + x2628 * x4195
    x4197 = x22 * x4151 + x4196
    x4198 = x105 * x3062 + x156 * x4189
    x4199 = x22 * x4153 + x2628 * x4198
    x4200 = x22 * x4154 + x4199
    x4201 = x120 * x3341 + x141 * x4192
    x4202 = x1624 * x4201 + x22 * x4156
    x4203 = x22 * x4157 + x4202
    x4204 = x120 * x3345 + x141 * x4195
    x4205 = x1624 * x4204 + x22 * x4159
    x4206 = x22 * x4160 + x4205
    x4207 = x120 * x3349 + x141 * x4198
    x4208 = x1624 * x4207 + x22 * x4162
    x4209 = x22 * x4163 + x4208
    x4210 = x105 * x3077 + x156 * x4198
    x4211 = x1624 * x4210 + x22 * x4165
    x4212 = x22 * x4166 + x4211
    x4213 = x22 * x4168 + x92 * (x120 * x3353 + x141 * x4201)
    x4214 = x22 * x4169 + x4213
    x4215 = x22 * x4171 + x92 * (x120 * x3357 + x141 * x4204)
    x4216 = x22 * x4172 + x4215
    x4217 = x22 * x4174 + x92 * (x120 * x3361 + x141 * x4207)
    x4218 = x22 * x4175 + x4217
    x4219 = x22 * x4177 + x92 * (x120 * x3365 + x141 * x4210)
    x4220 = x22 * x4178 + x4219
    x4221 = x22 * x4180 + x92 * (x105 * x3097 + x156 * x4210)
    x4222 = x22 * x4181 + x4221
    x4223 = x0 * x3166 + x1876
    x4224 = x1420 * x3659
    x4225 = x0 * x3168 + x1880
    x4226 = x0 * x3170 + x1884
    x4227 = x0 * x3172 + x1889
    x4228 = x0 * x3174 + x1894
    x4229 = x0 * x3176 + x1899
    x4230 = x0 * x3179 + x1904
    x4231 = x0 * x3182 + x1909
    x4232 = x0 * x3185 + x1914
    x4233 = x0 * x3188 + x1919
    x4234 = x0 * x3190 + x1922
    x4235 = x141 * x3178 + x3395
    x4236 = x0 * x3192 + x1925
    x4237 = x141 * x3181 + x3398
    x4238 = x0 * x3194 + x1928
    x4239 = x141 * x3184 + x3401
    x4240 = x0 * x3196 + x1931
    x4241 = x141 * x3187 + x3405
    x4242 = x0 * x3198 + x1934
    x4243 = x156 * x3187 + x4042
    x4244 = x21 * x4224 + x4062
    x4245 = x1447 * x4047 + x4064
    x4246 = x1459 * x4047 + x4067
    x4247 = x1887 * x3695 + x4069
    x4248 = x1892 * x3695 + x4071
    x4249 = x1897 * x3695 + x4073
    x4250 = x3178 * x3704 + x4075
    x4251 = x3181 * x3704 + x4077
    x4252 = x3184 * x3704 + x4079
    x4253 = x3187 * x3704 + x4081
    x4254 = x316 * x4235 + x4083
    x4255 = x316 * x4237 + x4085
    x4256 = x316 * x4239 + x4087
    x4257 = x316 * x4241 + x4089
    x4258 = x316 * x4243 + x4091
    x4259 = x2195 * x3659
    x4260 = x22 * x4224 + x4259
    x4261 = x2210 * x3662
    x4262 = x1447 * x4065 + x4261
    x4263 = x2219 * x3662
    x4264 = x1459 * x4065 + x4263
    x4265 = x2228 * x2628
    x4266 = x1887 * x3730 + x4265
    x4267 = x2236 * x2628
    x4268 = x1892 * x3730 + x4267
    x4269 = x2244 * x2628
    x4270 = x1897 * x3730 + x4269
    x4271 = x1624 * x3266
    x4272 = x3178 * x3738 + x4271
    x4273 = x1624 * x3270
    x4274 = x3181 * x3738 + x4273
    x4275 = x1624 * x3274
    x4276 = x3184 * x3738 + x4275
    x4277 = x1624 * x3278
    x4278 = x3187 * x3738 + x4277
    x4279 = x92 * (x141 * x3266 + x3459)
    x4280 = x4235 * x543 + x4279
    x4281 = x92 * (x141 * x3270 + x3462)
    x4282 = x4237 * x543 + x4281
    x4283 = x92 * (x141 * x3274 + x3465)
    x4284 = x4239 * x543 + x4283
    x4285 = x92 * (x141 * x3278 + x3469)
    x4286 = x4241 * x543 + x4285
    x4287 = x92 * (x112 * x3187 + x156 * x3278)
    x4288 = x4243 * x543 + x4287
    x4289 = x21 * x4062 + x3847
    x4290 = x21 * x4244 + x4289
    x4291 = x21 * x4064 + x3850
    x4292 = x21 * x4245 + x4291
    x4293 = x21 * x4067 + x3853
    x4294 = x21 * x4246 + x4293
    x4295 = x21 * x4069 + x3856
    x4296 = x21 * x4247 + x4295
    x4297 = x21 * x4071 + x3859
    x4298 = x21 * x4248 + x4297
    x4299 = x21 * x4073 + x3862
    x4300 = x21 * x4249 + x4299
    x4301 = x21 * x4075 + x3865
    x4302 = x21 * x4250 + x4301
    x4303 = x21 * x4077 + x3868
    x4304 = x21 * x4251 + x4303
    x4305 = x21 * x4079 + x3871
    x4306 = x21 * x4252 + x4305
    x4307 = x21 * x4081 + x3874
    x4308 = x21 * x4253 + x4307
    x4309 = x21 * x4083 + x3877
    x4310 = x21 * x4254 + x4309
    x4311 = x21 * x4085 + x3880
    x4312 = x21 * x4255 + x4311
    x4313 = x21 * x4087 + x3883
    x4314 = x21 * x4256 + x4313
    x4315 = x21 * x4089 + x3887
    x4316 = x21 * x4257 + x4315
    x4317 = x21 * x4091 + x3890
    x4318 = x21 * x4258 + x4317
    x4319 = x21 * x4260 + x4139
    x4320 = x21 * x4262 + x4142
    x4321 = x21 * x4264 + x4145
    x4322 = x21 * x4266 + x4148
    x4323 = x21 * x4268 + x4151
    x4324 = x21 * x4270 + x4154
    x4325 = x21 * x4272 + x4157
    x4326 = x21 * x4274 + x4160
    x4327 = x21 * x4276 + x4163
    x4328 = x21 * x4278 + x4166
    x4329 = x21 * x4280 + x4169
    x4330 = x21 * x4282 + x4172
    x4331 = x21 * x4284 + x4175
    x4332 = x21 * x4286 + x4178
    x4333 = x21 * x4288 + x4181
    x4334 = x3327 * x3659
    x4335 = x22 * x4259 + x4334
    x4336 = x22 * x4260 + x4335
    x4337 = x3333 * x3662
    x4338 = x22 * x4261 + x4337
    x4339 = x22 * x4262 + x4338
    x4340 = x3337 * x3662
    x4341 = x22 * x4263 + x4340
    x4342 = x22 * x4264 + x4341
    x4343 = x2628 * x3341
    x4344 = x22 * x4265 + x4343
    x4345 = x22 * x4266 + x4344
    x4346 = x2628 * x3345
    x4347 = x22 * x4267 + x4346
    x4348 = x22 * x4268 + x4347
    x4349 = x2628 * x3349
    x4350 = x22 * x4269 + x4349
    x4351 = x22 * x4270 + x4350
    x4352 = x1624 * x3353
    x4353 = x22 * x4271 + x4352
    x4354 = x22 * x4272 + x4353
    x4355 = x1624 * x3357
    x4356 = x22 * x4273 + x4355
    x4357 = x22 * x4274 + x4356
    x4358 = x1624 * x3361
    x4359 = x22 * x4275 + x4358
    x4360 = x22 * x4276 + x4359
    x4361 = x1624 * x3365
    x4362 = x22 * x4277 + x4361
    x4363 = x22 * x4278 + x4362
    x4364 = x92 * (x141 * x3353 + x3561)
    x4365 = x22 * x4279 + x4364
    x4366 = x22 * x4280 + x4365
    x4367 = x92 * (x141 * x3357 + x3565)
    x4368 = x22 * x4281 + x4367
    x4369 = x22 * x4282 + x4368
    x4370 = x92 * (x141 * x3361 + x3569)
    x4371 = x22 * x4283 + x4370
    x4372 = x22 * x4284 + x4371
    x4373 = x92 * (x141 * x3365 + x3574)
    x4374 = x22 * x4285 + x4373
    x4375 = x22 * x4286 + x4374
    x4376 = x92 * (x105 * x3278 + x156 * x3365)
    x4377 = x22 * x4287 + x4376
    x4378 = x22 * x4288 + x4377
    x4379 = x249 * x3623 - x3625 * x719
    x4380 = x22 * x4334 + x22 * x4335 + x3659 * x4379
    x4381 = x3624 + x4379 * x9
    x4382 = x22 * x4337 + x22 * x4338 + x3662 * x4381
    x4383 = x12 * x4379 + 5.0 * x3328
    x4384 = x22 * x4340 + x22 * x4341 + x3662 * x4383
    x4385 = x141 * x4381 + x3629
    x4386 = x22 * x4343 + x22 * x4344 + x2628 * x4385
    x4387 = x141 * x4383 + x3632
    x4388 = x22 * x4346 + x22 * x4347 + x2628 * x4387
    x4389 = x156 * x4383 + x3337 * x99
    x4390 = x22 * x4349 + x22 * x4350 + x2628 * x4389
    x4391 = x141 * x4385 + x3635
    x4392 = x1624 * x4391 + x22 * x4352 + x22 * x4353
    x4393 = x141 * x4387 + x3637
    x4394 = x1624 * x4393 + x22 * x4355 + x22 * x4356
    x4395 = x141 * x4389 + x3640
    x4396 = x1624 * x4395 + x22 * x4358 + x22 * x4359
    x4397 = x156 * x4389 + x3349 * x99
    x4398 = x1624 * x4397 + x22 * x4361 + x22 * x4362
    x4399 = x22 * x4364 + x22 * x4365 + x92 * (x141 * x4391 + x3643)
    x4400 = x22 * x4367 + x22 * x4368 + x92 * (x141 * x4393 + x3645)
    x4401 = x22 * x4370 + x22 * x4371 + x92 * (x141 * x4395 + x3647)
    x4402 = x22 * x4373 + x22 * x4374 + x92 * (x141 * x4397 + x3650)
    x4403 = x22 * x4376 + x22 * x4377 + x92 * (x156 * x4397 + x3365 * x99)
    x4404 = x0 * x3447 + x2457
    x4405 = x0 * x1531
    x4406 = x0 * x3449 + x2461
    x4407 = x1531 * x9
    x4408 = x0 * x3451 + x2465
    x4409 = x0 * x3453 + x2470
    x4410 = x223 * x7
    x4411 = x10 * x4410
    x4412 = x0 * x3455 + x2475
    x4413 = x4410 * x9
    x4414 = x0 * x1569
    x4415 = x0 * x3457 + x2481
    x4416 = x0 * x3460 + x2484
    x4417 = x229 * x4
    x4418 = x0 * x3463 + x2487
    x4419 = x10 * x223
    x4420 = x4 * x4419
    x4421 = x0 * x3466 + x2490
    x4422 = x2478 * x3389
    x4423 = x0 * x3470 + x2494
    x4424 = x0 * x3472 + x2497
    x4425 = x0 * x3474 + x2500
    x4426 = x1569 * x229
    x4427 = x0 * x3476 + x2503
    x4428 = x205 * x2478
    x4429 = x0 * x3478 + x2506
    x4430 = x179 * x3468
    x4431 = x0 * x3480 + x2509
    x4432 = x112 * x3404 + x156 * x3468
    x4433 = x21 * x3447 + x3248
    x4434 = x1531 * x21
    x4435 = x3659 * x4434 + x4259
    x4436 = x21 * x3449 + x3251
    x4437 = x4047 * x4407 + x4261
    x4438 = x21 * x3451 + x3254
    x4439 = x1569 * x4047 + x4263
    x4440 = x21 * x3453 + x3257
    x4441 = x4265 + x4411 * x4434
    x4442 = x21 * x3455 + x3260
    x4443 = x1569 * x21
    x4444 = x4267 + x4413 * x4443
    x4445 = x21 * x3457 + x3263
    x4446 = x2478 * x3695 + x4269
    x4447 = x21 * x3460 + x3267
    x4448 = x4271 + x4417 * x4434
    x4449 = x21 * x3463 + x3271
    x4450 = x4273 + x4420 * x4443
    x4451 = x21 * x3466 + x3275
    x4452 = x21 * x4422 + x4275
    x4453 = x21 * x3470 + x3279
    x4454 = x3468 * x3704 + x4277
    x4455 = x21 * x3472 + x3282
    x4456 = x224 * x4434 + x4279
    x4457 = x21 * x3474 + x3285
    x4458 = x21 * x4426 + x4281
    x4459 = x21 * x3476 + x3288
    x4460 = x21 * x4428 + x4283
    x4461 = x21 * x3478 + x3291
    x4462 = x21 * x4430 + x4285
    x4463 = x21 * x3480 + x3294
    x4464 = x316 * x4432 + x4287
    x4465 = x2561 * x3659
    x4466 = x1531 * x22
    x4467 = x3659 * x4466 + x4465
    x4468 = x3662 * x9
    x4469 = x2561 * x4468 + x4065 * x4407
    x4470 = x2582 * x3662
    x4471 = x1569 * x4065 + x4470
    x4472 = x2561 * x4411
    x4473 = x4411 * x4466 + x4472
    x4474 = x2582 * x4413
    x4475 = x1569 * x22
    x4476 = x4413 * x4475 + x4474
    x4477 = x2598 * x2628
    x4478 = x2478 * x3730 + x4477
    x4479 = x2561 * x4417
    x4480 = x4417 * x4466 + x4479
    x4481 = x3554 * x4419
    x4482 = x4420 * x4475 + x4481
    x4483 = x2598 * x3389
    x4484 = x22 * x4422 + x4483
    x4485 = x1624 * x3573
    x4486 = x3468 * x3738 + x4485
    x4487 = x224 * x2561
    x4488 = x224 * x4466 + x4487
    x4489 = x229 * x2582
    x4490 = x22 * x4426 + x4489
    x4491 = x205 * x2598
    x4492 = x22 * x4428 + x4491
    x4493 = x179 * x3573
    x4494 = x22 * x4430 + x4493
    x4495 = x92 * (x105 * x3468 + x156 * x3573)
    x4496 = x4432 * x543 + x4495
    x4497 = x21 * x4259 + x4138
    x4498 = x21 * x4435 + x4497
    x4499 = x21 * x4261 + x4141
    x4500 = x21 * x4437 + x4499
    x4501 = x21 * x4263 + x4144
    x4502 = x21 * x4439 + x4501
    x4503 = x21 * x4265 + x4147
    x4504 = x21 * x4441 + x4503
    x4505 = x21 * x4267 + x4150
    x4506 = x21 * x4444 + x4505
    x4507 = x21 * x4269 + x4153
    x4508 = x21 * x4446 + x4507
    x4509 = x21 * x4271 + x4156
    x4510 = x21 * x4448 + x4509
    x4511 = x21 * x4273 + x4159
    x4512 = x21 * x4450 + x4511
    x4513 = x21 * x4275 + x4162
    x4514 = x21 * x4452 + x4513
    x4515 = x21 * x4277 + x4165
    x4516 = x21 * x4454 + x4515
    x4517 = x21 * x4279 + x4168
    x4518 = x21 * x4456 + x4517
    x4519 = x21 * x4281 + x4171
    x4520 = x21 * x4458 + x4519
    x4521 = x21 * x4283 + x4174
    x4522 = x21 * x4460 + x4521
    x4523 = x21 * x4285 + x4177
    x4524 = x21 * x4462 + x4523
    x4525 = x21 * x4287 + x4180
    x4526 = x21 * x4464 + x4525
    x4527 = x21 * x4467 + x4335
    x4528 = x21 * x4469 + x4338
    x4529 = x21 * x4471 + x4341
    x4530 = x21 * x4473 + x4344
    x4531 = x21 * x4476 + x4347
    x4532 = x21 * x4478 + x4350
    x4533 = x21 * x4480 + x4353
    x4534 = x21 * x4482 + x4356
    x4535 = x21 * x4484 + x4359
    x4536 = x21 * x4486 + x4362
    x4537 = x21 * x4488 + x4365
    x4538 = x21 * x4490 + x4368
    x4539 = x21 * x4492 + x4371
    x4540 = x21 * x4494 + x4374
    x4541 = x21 * x4496 + x4377
    x4542 = x3623 * x3659
    x4543 = x22 * x4465 + x4542
    x4544 = x22 * x4467 + x4543
    x4545 = x4065 * x9
    x4546 = x2561 * x4545 + x3623 * x4468
    x4547 = x22 * x4469 + x4546
    x4548 = x3631 * x3662
    x4549 = x22 * x4470 + x4548
    x4550 = x22 * x4471 + x4549
    x4551 = x3623 * x4411
    x4552 = x22 * x4472 + x4551
    x4553 = x22 * x4473 + x4552
    x4554 = x3631 * x4413
    x4555 = x22 * x4474 + x4554
    x4556 = x22 * x4476 + x4555
    x4557 = x2628 * x3639
    x4558 = x22 * x4477 + x4557
    x4559 = x22 * x4478 + x4558
    x4560 = x3623 * x4417
    x4561 = x22 * x4479 + x4560
    x4562 = x22 * x4480 + x4561
    x4563 = x3631 * x4420
    x4564 = x22 * x4481 + x4563
    x4565 = x22 * x4482 + x4564
    x4566 = x3389 * x3639
    x4567 = x22 * x4483 + x4566
    x4568 = x22 * x4484 + x4567
    x4569 = x1624 * x3649
    x4570 = x22 * x4485 + x4569
    x4571 = x22 * x4486 + x4570
    x4572 = x224 * x3623
    x4573 = x22 * x4487 + x4572
    x4574 = x22 * x4488 + x4573
    x4575 = x229 * x3631
    x4576 = x22 * x4489 + x4575
    x4577 = x22 * x4490 + x4576
    x4578 = x205 * x3639
    x4579 = x22 * x4491 + x4578
    x4580 = x22 * x4492 + x4579
    x4581 = x179 * x3649
    x4582 = x22 * x4493 + x4581
    x4583 = x22 * x4494 + x4582
    x4584 = x92 * (x156 * x3649 + x3573 * x99)
    x4585 = x22 * x4495 + x4584
    x4586 = x22 * x4496 + x4585
    x4587 = -x1074 * x3625 + 5.0 * x2560 + x3623 * x475
    x4588 = x12 * x4587 + 6.0 * x3624
    x4589 = x156 * x4588 + 6.0 * x3632
    x4590 = x156 * x4589 + 6.0 * x3640

    # 1500 item(s)
    result[0, 0, 0] = numpy.sum(
        x140
        * (
            x0 * x115
            + x0 * x124
            + x0 * (x0 * (x123 + x126 * x127) + x124)
            + x92
            * (
                x107 * x137
                + x93 * (x100 * x137 + x93 * (x137 * x91 + x93 * (x133 + x135)))
            )
        )
    )
    result[0, 0, 1] = numpy.sum(
        x155
        * (
            x0 * x147
            + x0 * x151
            + x0 * (x0 * (x127 * x153 + x150) + x151)
            + x92 * (x137 * x144 + x93 * (x137 * x142 + x141 * x93 * (x133 + x135)))
        )
    )
    result[0, 0, 2] = numpy.sum(
        x155
        * (
            x0 * x162
            + x0 * x166
            + x0 * (x0 * (x127 * x168 + x165) + x166)
            + x92 * (x137 * x159 + x93 * (x137 * x157 + x156 * x93 * (x133 + x135)))
        )
    )
    result[0, 0, 3] = numpy.sum(
        x178
        * (
            x0 * x173
            + x0 * x176
            + x0 * (x0 * (x127 * x177 + x175) + x176)
            + x92 * (x137 * x171 + x170 * x93 * (x133 + x135))
        )
    )
    result[0, 0, 4] = numpy.sum(
        x189
        * (
            x0 * x183
            + x0 * x186
            + x0 * (x0 * (x127 * x187 + x185) + x186)
            + x92 * (x137 * x181 + x180 * x93 * (x133 + x135))
        )
    )
    result[0, 0, 5] = numpy.sum(
        x178
        * (
            x0 * x193
            + x0 * x196
            + x0 * (x0 * (x127 * x197 + x195) + x196)
            + x92 * (x137 * x191 + x190 * x93 * (x133 + x135))
        )
    )
    result[0, 0, 6] = numpy.sum(
        x155
        * (
            x0 * x201
            + x0 * x203
            + x0 * (x0 * (x127 * x204 + x202) + x203)
            + x200 * x92 * (x133 + x135)
        )
    )
    result[0, 0, 7] = numpy.sum(
        x189
        * (
            x0 * x207
            + x0 * x209
            + x0 * (x0 * (x127 * x210 + x208) + x209)
            + x206 * x92 * (x133 + x135)
        )
    )
    result[0, 0, 8] = numpy.sum(
        x189
        * (
            x0 * x213
            + x0 * x215
            + x0 * (x0 * (x127 * x216 + x214) + x215)
            + x212 * x92 * (x133 + x135)
        )
    )
    result[0, 0, 9] = numpy.sum(
        x155
        * (
            x0 * x219
            + x0 * x221
            + x0 * (x0 * (x127 * x222 + x220) + x221)
            + x218 * x92 * (x133 + x135)
        )
    )
    result[0, 0, 10] = numpy.sum(
        x140
        * (x0 * x225 + x0 * x227 + x0 * (x0 * (x224 * x228 + x226) + x227) + x132 * x224)
    )
    result[0, 0, 11] = numpy.sum(
        x155
        * (x0 * x231 + x0 * x233 + x0 * (x0 * (x228 * x230 + x232) + x233) + x132 * x230)
    )
    result[0, 0, 12] = numpy.sum(
        x178
        * (x0 * x236 + x0 * x239 + x0 * (x0 * (x228 * x237 + x238) + x239) + x132 * x237)
    )
    result[0, 0, 13] = numpy.sum(
        x155
        * (x0 * x241 + x0 * x244 + x0 * (x0 * (x228 * x242 + x243) + x244) + x132 * x242)
    )
    result[0, 0, 14] = numpy.sum(
        x140
        * (x0 * x246 + x0 * x248 + x0 * (x0 * (x228 * x245 + x247) + x248) + x132 * x245)
    )
    result[0, 1, 0] = numpy.sum(
        x325 * (x0 * x312 + x0 * (x0 * x317 + x312) + x115 * x21 + x324)
    )
    result[0, 1, 1] = numpy.sum(
        x189 * (x0 * x341 + x0 * (x0 * x347 + x341) + x147 * x21 + x350)
    )
    result[0, 1, 2] = numpy.sum(
        x189 * (x0 * x358 + x0 * (x0 * x363 + x358) + x162 * x21 + x364)
    )
    result[0, 1, 3] = numpy.sum(
        x380 * (x0 * x371 + x0 * (x0 * x376 + x371) + x173 * x21 + x378)
    )
    result[0, 1, 4] = numpy.sum(
        x400 * (x0 * x390 + x0 * (x0 * x396 + x390) + x183 * x21 + x399)
    )
    result[0, 1, 5] = numpy.sum(
        x380 * (x0 * x404 + x0 * (x0 * x408 + x404) + x193 * x21 + x409)
    )
    result[0, 1, 6] = numpy.sum(
        x189 * (x0 * x413 + x0 * (x0 * x416 + x413) + x201 * x21 + x418)
    )
    result[0, 1, 7] = numpy.sum(
        x400 * (x0 * x422 + x0 * (x0 * x425 + x422) + x207 * x21 + x427)
    )
    result[0, 1, 8] = numpy.sum(
        x400 * (x0 * x433 + x0 * (x0 * x437 + x433) + x21 * x213 + x440)
    )
    result[0, 1, 9] = numpy.sum(
        x189 * (x0 * x442 + x0 * (x0 * x444 + x442) + x21 * x219 + x445)
    )
    result[0, 1, 10] = numpy.sum(
        x325 * (x0 * x447 + x0 * (x0 * x450 + x447) + x21 * x225 + x451)
    )
    result[0, 1, 11] = numpy.sum(
        x189 * (x0 * x453 + x0 * (x0 * x455 + x453) + x21 * x231 + x456)
    )
    result[0, 1, 12] = numpy.sum(
        x380 * (x0 * x458 + x0 * (x0 * x460 + x458) + x21 * x236 + x461)
    )
    result[0, 1, 13] = numpy.sum(
        x189 * (x0 * x464 + x0 * (x0 * x467 + x464) + x21 * x241 + x469)
    )
    result[0, 1, 14] = numpy.sum(
        x325 * (x0 * x471 + x0 * (x0 * x473 + x471) + x21 * x246 + x474)
    )
    result[0, 2, 0] = numpy.sum(
        x325 * (x0 * x539 + x0 * (x0 * x544 + x539) + x115 * x22 + x552)
    )
    result[0, 2, 1] = numpy.sum(
        x189 * (x0 * x559 + x0 * (x0 * x564 + x559) + x147 * x22 + x565)
    )
    result[0, 2, 2] = numpy.sum(
        x189 * (x0 * x577 + x0 * (x0 * x583 + x577) + x162 * x22 + x585)
    )
    result[0, 2, 3] = numpy.sum(
        x380 * (x0 * x589 + x0 * (x0 * x592 + x589) + x173 * x22 + x593)
    )
    result[0, 2, 4] = numpy.sum(
        x400 * (x0 * x600 + x0 * (x0 * x604 + x600) + x183 * x22 + x606)
    )
    result[0, 2, 5] = numpy.sum(
        x380 * (x0 * x613 + x0 * (x0 * x618 + x613) + x193 * x22 + x620)
    )
    result[0, 2, 6] = numpy.sum(
        x189 * (x0 * x622 + x0 * (x0 * x624 + x622) + x201 * x22 + x625)
    )
    result[0, 2, 7] = numpy.sum(
        x400 * (x0 * x628 + x0 * (x0 * x630 + x628) + x207 * x22 + x631)
    )
    result[0, 2, 8] = numpy.sum(
        x400 * (x0 * x634 + x0 * (x0 * x637 + x634) + x213 * x22 + x638)
    )
    result[0, 2, 9] = numpy.sum(
        x189 * (x0 * x642 + x0 * (x0 * x645 + x642) + x219 * x22 + x647)
    )
    result[0, 2, 10] = numpy.sum(
        x325 * (x0 * x649 + x0 * (x0 * x652 + x649) + x22 * x225 + x653)
    )
    result[0, 2, 11] = numpy.sum(
        x189 * (x0 * x655 + x0 * (x0 * x657 + x655) + x22 * x231 + x658)
    )
    result[0, 2, 12] = numpy.sum(
        x380 * (x0 * x660 + x0 * (x0 * x662 + x660) + x22 * x236 + x663)
    )
    result[0, 2, 13] = numpy.sum(
        x189 * (x0 * x665 + x0 * (x0 * x667 + x665) + x22 * x241 + x668)
    )
    result[0, 2, 14] = numpy.sum(
        x325 * (x0 * x670 + x0 * (x0 * x672 + x670) + x22 * x246 + x673)
    )
    result[0, 3, 0] = numpy.sum(x325 * (x0 * x717 + x21 * x312 + x726))
    result[0, 3, 1] = numpy.sum(x189 * (x0 * x746 + x21 * x341 + x751))
    result[0, 3, 2] = numpy.sum(x189 * (x0 * x761 + x21 * x358 + x763))
    result[0, 3, 3] = numpy.sum(x380 * (x0 * x772 + x21 * x371 + x775))
    result[0, 3, 4] = numpy.sum(x400 * (x0 * x784 + x21 * x390 + x787))
    result[0, 3, 5] = numpy.sum(x380 * (x0 * x793 + x21 * x404 + x795))
    result[0, 3, 6] = numpy.sum(x189 * (x0 * x801 + x21 * x413 + x804))
    result[0, 3, 7] = numpy.sum(x400 * (x0 * x810 + x21 * x422 + x813))
    result[0, 3, 8] = numpy.sum(x400 * (x0 * x819 + x21 * x433 + x822))
    result[0, 3, 9] = numpy.sum(x189 * (x0 * x826 + x21 * x442 + x828))
    result[0, 3, 10] = numpy.sum(x325 * (x0 * x831 + x21 * x447 + x833))
    result[0, 3, 11] = numpy.sum(x189 * (x0 * x836 + x21 * x453 + x838))
    result[0, 3, 12] = numpy.sum(x380 * (x0 * x841 + x21 * x458 + x843))
    result[0, 3, 13] = numpy.sum(x189 * (x0 * x846 + x21 * x464 + x848))
    result[0, 3, 14] = numpy.sum(x325 * (x0 * x851 + x21 * x471 + x853))
    result[0, 4, 0] = numpy.sum(x898 * (x0 * x891 + x21 * x539 + x896))
    result[0, 4, 1] = numpy.sum(x915 * (x0 * x911 + x21 * x559 + x914))
    result[0, 4, 2] = numpy.sum(x915 * (x0 * x928 + x21 * x577 + x931))
    result[0, 4, 3] = numpy.sum(x400 * (x0 * x940 + x21 * x589 + x943))
    result[0, 4, 4] = numpy.sum(x956 * (x0 * x952 + x21 * x600 + x955))
    result[0, 4, 5] = numpy.sum(x400 * (x0 * x965 + x21 * x613 + x968))
    result[0, 4, 6] = numpy.sum(x915 * (x0 * x973 + x21 * x622 + x976))
    result[0, 4, 7] = numpy.sum(x956 * (x0 * x982 + x21 * x628 + x985))
    result[0, 4, 8] = numpy.sum(x956 * (x0 * x990 + x21 * x634 + x993))
    result[0, 4, 9] = numpy.sum(x915 * (x0 * x998 + x1001 + x21 * x642))
    result[0, 4, 10] = numpy.sum(x898 * (x0 * x1004 + x1006 + x21 * x649))
    result[0, 4, 11] = numpy.sum(x915 * (x0 * x1010 + x1012 + x21 * x655))
    result[0, 4, 12] = numpy.sum(x400 * (x0 * x1015 + x1017 + x21 * x660))
    result[0, 4, 13] = numpy.sum(x915 * (x0 * x1020 + x1022 + x21 * x665))
    result[0, 4, 14] = numpy.sum(x898 * (x0 * x1025 + x1027 + x21 * x670))
    result[0, 5, 0] = numpy.sum(x325 * (x0 * x1071 + x1081 + x22 * x539))
    result[0, 5, 1] = numpy.sum(x189 * (x0 * x1090 + x1092 + x22 * x559))
    result[0, 5, 2] = numpy.sum(x189 * (x0 * x1106 + x1109 + x22 * x577))
    result[0, 5, 3] = numpy.sum(x380 * (x0 * x1114 + x1116 + x22 * x589))
    result[0, 5, 4] = numpy.sum(x400 * (x0 * x1121 + x1123 + x22 * x600))
    result[0, 5, 5] = numpy.sum(x380 * (x0 * x1132 + x1135 + x22 * x613))
    result[0, 5, 6] = numpy.sum(x189 * (x0 * x1138 + x1140 + x22 * x622))
    result[0, 5, 7] = numpy.sum(x400 * (x0 * x1144 + x1146 + x22 * x628))
    result[0, 5, 8] = numpy.sum(x400 * (x0 * x1149 + x1151 + x22 * x634))
    result[0, 5, 9] = numpy.sum(x189 * (x0 * x1157 + x1160 + x22 * x642))
    result[0, 5, 10] = numpy.sum(x325 * (x0 * x1163 + x1165 + x22 * x649))
    result[0, 5, 11] = numpy.sum(x189 * (x0 * x1168 + x1170 + x22 * x655))
    result[0, 5, 12] = numpy.sum(x380 * (x0 * x1173 + x1175 + x22 * x660))
    result[0, 5, 13] = numpy.sum(x189 * (x0 * x1178 + x1180 + x22 * x665))
    result[0, 5, 14] = numpy.sum(x325 * (x0 * x1183 + x1185 + x22 * x670))
    result[0, 6, 0] = numpy.sum(x140 * (x1217 + x21 * x717))
    result[0, 6, 1] = numpy.sum(x155 * (x1234 + x21 * x746))
    result[0, 6, 2] = numpy.sum(x155 * (x1241 + x21 * x761))
    result[0, 6, 3] = numpy.sum(x178 * (x1248 + x21 * x772))
    result[0, 6, 4] = numpy.sum(x189 * (x1255 + x21 * x784))
    result[0, 6, 5] = numpy.sum(x178 * (x1259 + x21 * x793))
    result[0, 6, 6] = numpy.sum(x155 * (x1264 + x21 * x801))
    result[0, 6, 7] = numpy.sum(x189 * (x1269 + x21 * x810))
    result[0, 6, 8] = numpy.sum(x189 * (x1274 + x21 * x819))
    result[0, 6, 9] = numpy.sum(x155 * (x1277 + x21 * x826))
    result[0, 6, 10] = numpy.sum(x140 * (x1280 + x21 * x831))
    result[0, 6, 11] = numpy.sum(x155 * (x1283 + x21 * x836))
    result[0, 6, 12] = numpy.sum(x178 * (x1286 + x21 * x841))
    result[0, 6, 13] = numpy.sum(x155 * (x1289 + x21 * x846))
    result[0, 6, 14] = numpy.sum(x140 * (x1292 + x21 * x851))
    result[0, 7, 0] = numpy.sum(x325 * (x1319 + x21 * x891))
    result[0, 7, 1] = numpy.sum(x189 * (x1333 + x21 * x911))
    result[0, 7, 2] = numpy.sum(x189 * (x1345 + x21 * x928))
    result[0, 7, 3] = numpy.sum(x380 * (x1353 + x21 * x940))
    result[0, 7, 4] = numpy.sum(x400 * (x1363 + x21 * x952))
    result[0, 7, 5] = numpy.sum(x380 * (x1372 + x21 * x965))
    result[0, 7, 6] = numpy.sum(x189 * (x1378 + x21 * x973))
    result[0, 7, 7] = numpy.sum(x400 * (x1384 + x21 * x982))
    result[0, 7, 8] = numpy.sum(x400 * (x1392 + x21 * x990))
    result[0, 7, 9] = numpy.sum(x189 * (x1398 + x21 * x998))
    result[0, 7, 10] = numpy.sum(x325 * (x1004 * x21 + x1401))
    result[0, 7, 11] = numpy.sum(x189 * (x1010 * x21 + x1404))
    result[0, 7, 12] = numpy.sum(x380 * (x1015 * x21 + x1407))
    result[0, 7, 13] = numpy.sum(x189 * (x1020 * x21 + x1411))
    result[0, 7, 14] = numpy.sum(x325 * (x1025 * x21 + x1414))
    result[0, 8, 0] = numpy.sum(x325 * (x1071 * x21 + x1441))
    result[0, 8, 1] = numpy.sum(x189 * (x1090 * x21 + x1452))
    result[0, 8, 2] = numpy.sum(x189 * (x1106 * x21 + x1464))
    result[0, 8, 3] = numpy.sum(x380 * (x1114 * x21 + x1472))
    result[0, 8, 4] = numpy.sum(x400 * (x1121 * x21 + x1480))
    result[0, 8, 5] = numpy.sum(x380 * (x1132 * x21 + x1489))
    result[0, 8, 6] = numpy.sum(x189 * (x1138 * x21 + x1494))
    result[0, 8, 7] = numpy.sum(x400 * (x1144 * x21 + x1499))
    result[0, 8, 8] = numpy.sum(x400 * (x1149 * x21 + x1504))
    result[0, 8, 9] = numpy.sum(x189 * (x1157 * x21 + x1510))
    result[0, 8, 10] = numpy.sum(x325 * (x1163 * x21 + x1513))
    result[0, 8, 11] = numpy.sum(x189 * (x1168 * x21 + x1516))
    result[0, 8, 12] = numpy.sum(x380 * (x1173 * x21 + x1519))
    result[0, 8, 13] = numpy.sum(x189 * (x1178 * x21 + x1522))
    result[0, 8, 14] = numpy.sum(x325 * (x1183 * x21 + x1525))
    result[0, 9, 0] = numpy.sum(x140 * (x1071 * x22 + x1557))
    result[0, 9, 1] = numpy.sum(x155 * (x1090 * x22 + x1564))
    result[0, 9, 2] = numpy.sum(x155 * (x1106 * x22 + x1575))
    result[0, 9, 3] = numpy.sum(x178 * (x1114 * x22 + x1579))
    result[0, 9, 4] = numpy.sum(x189 * (x1121 * x22 + x1583))
    result[0, 9, 5] = numpy.sum(x178 * (x1132 * x22 + x1590))
    result[0, 9, 6] = numpy.sum(x155 * (x1138 * x22 + x1593))
    result[0, 9, 7] = numpy.sum(x189 * (x1144 * x22 + x1596))
    result[0, 9, 8] = numpy.sum(x189 * (x1149 * x22 + x1599))
    result[0, 9, 9] = numpy.sum(x155 * (x1157 * x22 + x1604))
    result[0, 9, 10] = numpy.sum(x140 * (x1163 * x22 + x1607))
    result[0, 9, 11] = numpy.sum(x155 * (x1168 * x22 + x1610))
    result[0, 9, 12] = numpy.sum(x178 * (x1173 * x22 + x1613))
    result[0, 9, 13] = numpy.sum(x155 * (x1178 * x22 + x1616))
    result[0, 9, 14] = numpy.sum(x140 * (x1183 * x22 + x1619))
    result[1, 0, 0] = numpy.sum(
        x325 * (x0 * x1620 + x0 * x311 + x0 * (x0 * (x127 * x1622 + x315) + x1620) + x324)
    )
    result[1, 0, 1] = numpy.sum(
        x189 * (x0 * x1623 + x0 * x340 + x0 * (x0 * (x127 * x1626 + x346) + x1623) + x350)
    )
    result[1, 0, 2] = numpy.sum(
        x189 * (x0 * x1627 + x0 * x357 + x0 * (x0 * (x127 * x1629 + x362) + x1627) + x364)
    )
    result[1, 0, 3] = numpy.sum(
        x380 * (x0 * x1630 + x0 * x370 + x0 * (x0 * (x127 * x1632 + x375) + x1630) + x378)
    )
    result[1, 0, 4] = numpy.sum(
        x400 * (x0 * x1633 + x0 * x389 + x0 * (x0 * (x127 * x1635 + x395) + x1633) + x399)
    )
    result[1, 0, 5] = numpy.sum(
        x380 * (x0 * x1636 + x0 * x403 + x0 * (x0 * (x127 * x1638 + x407) + x1636) + x409)
    )
    result[1, 0, 6] = numpy.sum(
        x189 * (x0 * x1639 + x0 * x412 + x0 * (x0 * (x127 * x1641 + x415) + x1639) + x418)
    )
    result[1, 0, 7] = numpy.sum(
        x400 * (x0 * x1642 + x0 * x421 + x0 * (x0 * (x127 * x1644 + x424) + x1642) + x427)
    )
    result[1, 0, 8] = numpy.sum(
        x400 * (x0 * x1645 + x0 * x432 + x0 * (x0 * (x127 * x1648 + x436) + x1645) + x440)
    )
    result[1, 0, 9] = numpy.sum(
        x189 * (x0 * x1649 + x0 * x441 + x0 * (x0 * (x127 * x1651 + x443) + x1649) + x445)
    )
    result[1, 0, 10] = numpy.sum(
        x325 * (x0 * x1652 + x0 * x446 + x0 * (x0 * (x127 * x1653 + x448) + x1652) + x451)
    )
    result[1, 0, 11] = numpy.sum(
        x189 * (x0 * x1654 + x0 * x452 + x0 * (x0 * (x127 * x1655 + x454) + x1654) + x456)
    )
    result[1, 0, 12] = numpy.sum(
        x380 * (x0 * x1656 + x0 * x457 + x0 * (x0 * (x127 * x1657 + x459) + x1656) + x461)
    )
    result[1, 0, 13] = numpy.sum(
        x189 * (x0 * x1658 + x0 * x463 + x0 * (x0 * (x127 * x1660 + x466) + x1658) + x469)
    )
    result[1, 0, 14] = numpy.sum(
        x325 * (x0 * x1661 + x0 * x470 + x0 * (x0 * (x0 * x1662 + x472) + x1661) + x474)
    )
    result[1, 1, 0] = numpy.sum(x1666 * (x0 * x716 + x0 * (x0 * x1665 + x716) + x726))
    result[1, 1, 1] = numpy.sum(x400 * (x0 * x745 + x0 * (x0 * x1669 + x745) + x751))
    result[1, 1, 2] = numpy.sum(x400 * (x0 * x760 + x0 * (x0 * x1672 + x760) + x763))
    result[1, 1, 3] = numpy.sum(x1677 * (x0 * x771 + x0 * (x0 * x1676 + x771) + x775))
    result[1, 1, 4] = numpy.sum(x1682 * (x0 * x783 + x0 * (x0 * x1681 + x783) + x787))
    result[1, 1, 5] = numpy.sum(x1677 * (x0 * x792 + x0 * (x0 * x1686 + x792) + x795))
    result[1, 1, 6] = numpy.sum(x400 * (x0 * x800 + x0 * (x0 * x1689 + x800) + x804))
    result[1, 1, 7] = numpy.sum(x1682 * (x0 * x809 + x0 * (x0 * x1692 + x809) + x813))
    result[1, 1, 8] = numpy.sum(x1682 * (x0 * x818 + x0 * (x0 * x1695 + x818) + x822))
    result[1, 1, 9] = numpy.sum(x400 * (x0 * x825 + x0 * (x0 * x1697 + x825) + x828))
    result[1, 1, 10] = numpy.sum(x1666 * (x0 * x830 + x0 * (x0 * x1699 + x830) + x833))
    result[1, 1, 11] = numpy.sum(x400 * (x0 * x835 + x0 * (x0 * x1701 + x835) + x838))
    result[1, 1, 12] = numpy.sum(x1677 * (x0 * x840 + x0 * (x0 * x1703 + x840) + x843))
    result[1, 1, 13] = numpy.sum(x400 * (x0 * x845 + x0 * (x0 * x1705 + x845) + x848))
    result[1, 1, 14] = numpy.sum(x1666 * (x0 * x850 + x0 * (x0 * x1707 + x850) + x853))
    result[1, 2, 0] = numpy.sum(x1666 * (x0 * x890 + x0 * (x0 * x1710 + x890) + x896))
    result[1, 2, 1] = numpy.sum(x400 * (x0 * x910 + x0 * (x0 * x1713 + x910) + x914))
    result[1, 2, 2] = numpy.sum(x400 * (x0 * x927 + x0 * (x0 * x1716 + x927) + x931))
    result[1, 2, 3] = numpy.sum(x1677 * (x0 * x939 + x0 * (x0 * x1720 + x939) + x943))
    result[1, 2, 4] = numpy.sum(x1682 * (x0 * x951 + x0 * (x0 * x1724 + x951) + x955))
    result[1, 2, 5] = numpy.sum(x1677 * (x0 * x964 + x0 * (x0 * x1728 + x964) + x968))
    result[1, 2, 6] = numpy.sum(x400 * (x0 * x972 + x0 * (x0 * x1732 + x972) + x976))
    result[1, 2, 7] = numpy.sum(x1682 * (x0 * x981 + x0 * (x0 * x1736 + x981) + x985))
    result[1, 2, 8] = numpy.sum(x1682 * (x0 * x989 + x0 * (x0 * x1740 + x989) + x993))
    result[1, 2, 9] = numpy.sum(x400 * (x0 * x997 + x0 * (x0 * x1744 + x997) + x1001))
    result[1, 2, 10] = numpy.sum(x1666 * (x0 * x1003 + x0 * (x0 * x1746 + x1003) + x1006))
    result[1, 2, 11] = numpy.sum(x400 * (x0 * x1009 + x0 * (x0 * x1748 + x1009) + x1012))
    result[1, 2, 12] = numpy.sum(x1677 * (x0 * x1014 + x0 * (x0 * x1750 + x1014) + x1017))
    result[1, 2, 13] = numpy.sum(x400 * (x0 * x1019 + x0 * (x0 * x1752 + x1019) + x1022))
    result[1, 2, 14] = numpy.sum(x1666 * (x0 * x1024 + x0 * (x0 * x1754 + x1024) + x1027))
    result[1, 3, 0] = numpy.sum(x1666 * (x0 * x1758 + x1217))
    result[1, 3, 1] = numpy.sum(x400 * (x0 * x1762 + x1234))
    result[1, 3, 2] = numpy.sum(x400 * (x0 * x1766 + x1241))
    result[1, 3, 3] = numpy.sum(x1677 * (x0 * x1771 + x1248))
    result[1, 3, 4] = numpy.sum(x1682 * (x0 * x1776 + x1255))
    result[1, 3, 5] = numpy.sum(x1677 * (x0 * x1781 + x1259))
    result[1, 3, 6] = numpy.sum(x400 * (x0 * x1785 + x1264))
    result[1, 3, 7] = numpy.sum(x1682 * (x0 * x1789 + x1269))
    result[1, 3, 8] = numpy.sum(x1682 * (x0 * x1793 + x1274))
    result[1, 3, 9] = numpy.sum(x400 * (x0 * x1796 + x1277))
    result[1, 3, 10] = numpy.sum(x1666 * (x0 * x1799 + x1280))
    result[1, 3, 11] = numpy.sum(x400 * (x0 * x1802 + x1283))
    result[1, 3, 12] = numpy.sum(x1677 * (x0 * x1805 + x1286))
    result[1, 3, 13] = numpy.sum(x400 * (x0 * x1808 + x1289))
    result[1, 3, 14] = numpy.sum(x1666 * (x0 * x1811 + x1292))
    result[1, 4, 0] = numpy.sum(x1816 * (x0 * x1815 + x1319))
    result[1, 4, 1] = numpy.sum(x956 * (x0 * x1820 + x1333))
    result[1, 4, 2] = numpy.sum(x956 * (x0 * x1824 + x1345))
    result[1, 4, 3] = numpy.sum(x1682 * (x0 * x1829 + x1353))
    result[1, 4, 4] = numpy.sum(x1836 * (x0 * x1835 + x1363))
    result[1, 4, 5] = numpy.sum(x1682 * (x0 * x1841 + x1372))
    result[1, 4, 6] = numpy.sum(x956 * (x0 * x1845 + x1378))
    result[1, 4, 7] = numpy.sum(x1836 * (x0 * x1849 + x1384))
    result[1, 4, 8] = numpy.sum(x1836 * (x0 * x1853 + x1392))
    result[1, 4, 9] = numpy.sum(x956 * (x0 * x1858 + x1398))
    result[1, 4, 10] = numpy.sum(x1816 * (x0 * x1861 + x1401))
    result[1, 4, 11] = numpy.sum(x956 * (x0 * x1864 + x1404))
    result[1, 4, 12] = numpy.sum(x1682 * (x0 * x1867 + x1407))
    result[1, 4, 13] = numpy.sum(x956 * (x0 * x1871 + x1411))
    result[1, 4, 14] = numpy.sum(x1816 * (x0 * x1874 + x1414))
    result[1, 5, 0] = numpy.sum(x1666 * (x0 * x1878 + x1441))
    result[1, 5, 1] = numpy.sum(x400 * (x0 * x1882 + x1452))
    result[1, 5, 2] = numpy.sum(x400 * (x0 * x1886 + x1464))
    result[1, 5, 3] = numpy.sum(x1677 * (x0 * x1891 + x1472))
    result[1, 5, 4] = numpy.sum(x1682 * (x0 * x1896 + x1480))
    result[1, 5, 5] = numpy.sum(x1677 * (x0 * x1901 + x1489))
    result[1, 5, 6] = numpy.sum(x400 * (x0 * x1906 + x1494))
    result[1, 5, 7] = numpy.sum(x1682 * (x0 * x1911 + x1499))
    result[1, 5, 8] = numpy.sum(x1682 * (x0 * x1916 + x1504))
    result[1, 5, 9] = numpy.sum(x400 * (x0 * x1921 + x1510))
    result[1, 5, 10] = numpy.sum(x1666 * (x0 * x1924 + x1513))
    result[1, 5, 11] = numpy.sum(x400 * (x0 * x1927 + x1516))
    result[1, 5, 12] = numpy.sum(x1677 * (x0 * x1930 + x1519))
    result[1, 5, 13] = numpy.sum(x400 * (x0 * x1933 + x1522))
    result[1, 5, 14] = numpy.sum(x1666 * (x0 * x1936 + x1525))
    result[1, 6, 0] = numpy.sum(x325 * (x1758 * x21 + x1954))
    result[1, 6, 1] = numpy.sum(x189 * (x1762 * x21 + x1967))
    result[1, 6, 2] = numpy.sum(x189 * (x1766 * x21 + x1972))
    result[1, 6, 3] = numpy.sum(x380 * (x1771 * x21 + x1978))
    result[1, 6, 4] = numpy.sum(x400 * (x1776 * x21 + x1984))
    result[1, 6, 5] = numpy.sum(x380 * (x1781 * x21 + x1988))
    result[1, 6, 6] = numpy.sum(x189 * (x1785 * x21 + x1992))
    result[1, 6, 7] = numpy.sum(x400 * (x1789 * x21 + x1996))
    result[1, 6, 8] = numpy.sum(x400 * (x1793 * x21 + x2000))
    result[1, 6, 9] = numpy.sum(x189 * (x1796 * x21 + x2002))
    result[1, 6, 10] = numpy.sum(x325 * (x1799 * x21 + x2004))
    result[1, 6, 11] = numpy.sum(x189 * (x1802 * x21 + x2006))
    result[1, 6, 12] = numpy.sum(x380 * (x1805 * x21 + x2008))
    result[1, 6, 13] = numpy.sum(x189 * (x1808 * x21 + x2010))
    result[1, 6, 14] = numpy.sum(x325 * (x1811 * x21 + x2012))
    result[1, 7, 0] = numpy.sum(x1666 * (x1815 * x21 + x2028))
    result[1, 7, 1] = numpy.sum(x400 * (x1820 * x21 + x2036))
    result[1, 7, 2] = numpy.sum(x400 * (x1824 * x21 + x2045))
    result[1, 7, 3] = numpy.sum(x1677 * (x1829 * x21 + x2052))
    result[1, 7, 4] = numpy.sum(x1682 * (x1835 * x21 + x2059))
    result[1, 7, 5] = numpy.sum(x1677 * (x1841 * x21 + x2067))
    result[1, 7, 6] = numpy.sum(x400 * (x1845 * x21 + x2072))
    result[1, 7, 7] = numpy.sum(x1682 * (x1849 * x21 + x2077))
    result[1, 7, 8] = numpy.sum(x1682 * (x1853 * x21 + x2082))
    result[1, 7, 9] = numpy.sum(x400 * (x1858 * x21 + x2088))
    result[1, 7, 10] = numpy.sum(x1666 * (x1861 * x21 + x2091))
    result[1, 7, 11] = numpy.sum(x400 * (x1864 * x21 + x2094))
    result[1, 7, 12] = numpy.sum(x1677 * (x1867 * x21 + x2097))
    result[1, 7, 13] = numpy.sum(x400 * (x1871 * x21 + x2100))
    result[1, 7, 14] = numpy.sum(x1666 * (x1874 * x21 + x2103))
    result[1, 8, 0] = numpy.sum(x1666 * (x1878 * x21 + x2118))
    result[1, 8, 1] = numpy.sum(x400 * (x1882 * x21 + x2126))
    result[1, 8, 2] = numpy.sum(x400 * (x1886 * x21 + x2134))
    result[1, 8, 3] = numpy.sum(x1677 * (x1891 * x21 + x2141))
    result[1, 8, 4] = numpy.sum(x1682 * (x1896 * x21 + x2148))
    result[1, 8, 5] = numpy.sum(x1677 * (x1901 * x21 + x2155))
    result[1, 8, 6] = numpy.sum(x400 * (x1906 * x21 + x2160))
    result[1, 8, 7] = numpy.sum(x1682 * (x1911 * x21 + x2165))
    result[1, 8, 8] = numpy.sum(x1682 * (x1916 * x21 + x2170))
    result[1, 8, 9] = numpy.sum(x400 * (x1921 * x21 + x2175))
    result[1, 8, 10] = numpy.sum(x1666 * (x1924 * x21 + x2178))
    result[1, 8, 11] = numpy.sum(x400 * (x1927 * x21 + x2181))
    result[1, 8, 12] = numpy.sum(x1677 * (x1930 * x21 + x2184))
    result[1, 8, 13] = numpy.sum(x400 * (x1933 * x21 + x2187))
    result[1, 8, 14] = numpy.sum(x1666 * (x1936 * x21 + x2190))
    result[1, 9, 0] = numpy.sum(x325 * (x1878 * x22 + x2206))
    result[1, 9, 1] = numpy.sum(x189 * (x1882 * x22 + x2215))
    result[1, 9, 2] = numpy.sum(x189 * (x1886 * x22 + x2224))
    result[1, 9, 3] = numpy.sum(x380 * (x1891 * x22 + x2232))
    result[1, 9, 4] = numpy.sum(x400 * (x1896 * x22 + x2240))
    result[1, 9, 5] = numpy.sum(x380 * (x1901 * x22 + x2248))
    result[1, 9, 6] = numpy.sum(x189 * (x1906 * x22 + x2254))
    result[1, 9, 7] = numpy.sum(x400 * (x1911 * x22 + x2260))
    result[1, 9, 8] = numpy.sum(x400 * (x1916 * x22 + x2266))
    result[1, 9, 9] = numpy.sum(x189 * (x1921 * x22 + x2272))
    result[1, 9, 10] = numpy.sum(x325 * (x1924 * x22 + x2275))
    result[1, 9, 11] = numpy.sum(x189 * (x1927 * x22 + x2278))
    result[1, 9, 12] = numpy.sum(x380 * (x1930 * x22 + x2281))
    result[1, 9, 13] = numpy.sum(x189 * (x1933 * x22 + x2284))
    result[1, 9, 14] = numpy.sum(x325 * (x1936 * x22 + x2287))
    result[2, 0, 0] = numpy.sum(
        x325 * (x0 * x2288 + x0 * x538 + x0 * (x0 * (x127 * x2289 + x542) + x2288) + x552)
    )
    result[2, 0, 1] = numpy.sum(
        x189 * (x0 * x2290 + x0 * x558 + x0 * (x0 * (x127 * x2291 + x563) + x2290) + x565)
    )
    result[2, 0, 2] = numpy.sum(
        x189 * (x0 * x2292 + x0 * x576 + x0 * (x0 * (x127 * x2293 + x582) + x2292) + x585)
    )
    result[2, 0, 3] = numpy.sum(
        x380 * (x0 * x2294 + x0 * x588 + x0 * (x0 * (x127 * x2296 + x591) + x2294) + x593)
    )
    result[2, 0, 4] = numpy.sum(
        x400 * (x0 * x2297 + x0 * x599 + x0 * (x0 * (x127 * x2299 + x603) + x2297) + x606)
    )
    result[2, 0, 5] = numpy.sum(
        x380 * (x0 * x2300 + x0 * x612 + x0 * (x0 * (x127 * x2303 + x617) + x2300) + x620)
    )
    result[2, 0, 6] = numpy.sum(
        x189 * (x0 * x2304 + x0 * x621 + x0 * (x0 * (x127 * x2305 + x623) + x2304) + x625)
    )
    result[2, 0, 7] = numpy.sum(
        x400 * (x0 * x2306 + x0 * x627 + x0 * (x0 * (x127 * x2308 + x629) + x2306) + x631)
    )
    result[2, 0, 8] = numpy.sum(
        x400 * (x0 * x2309 + x0 * x633 + x0 * (x0 * (x127 * x2310 + x636) + x2309) + x638)
    )
    result[2, 0, 9] = numpy.sum(
        x189 * (x0 * x2311 + x0 * x641 + x0 * (x0 * (x127 * x2314 + x644) + x2311) + x647)
    )
    result[2, 0, 10] = numpy.sum(
        x325 * (x0 * x2315 + x0 * x648 + x0 * (x0 * (x0 * x2316 + x650) + x2315) + x653)
    )
    result[2, 0, 11] = numpy.sum(
        x189 * (x0 * x2317 + x0 * x654 + x0 * (x0 * (x0 * x2318 + x656) + x2317) + x658)
    )
    result[2, 0, 12] = numpy.sum(
        x380 * (x0 * x2319 + x0 * x659 + x0 * (x0 * (x0 * x2320 + x661) + x2319) + x663)
    )
    result[2, 0, 13] = numpy.sum(
        x189 * (x0 * x2321 + x0 * x664 + x0 * (x0 * (x0 * x2322 + x666) + x2321) + x668)
    )
    result[2, 0, 14] = numpy.sum(
        x325 * (x0 * x2323 + x0 * x669 + x0 * (x0 * (x127 * x2324 + x671) + x2323) + x673)
    )
    result[2, 1, 0] = numpy.sum(
        x1666 * (x0 * x2325 + x0 * (x0 * x2326 + x2325) + x21 * x538 + x895)
    )
    result[2, 1, 1] = numpy.sum(
        x400 * (x0 * x2327 + x0 * (x0 * x2328 + x2327) + x21 * x558 + x913)
    )
    result[2, 1, 2] = numpy.sum(
        x400 * (x0 * x2329 + x0 * (x0 * x2330 + x2329) + x21 * x576 + x930)
    )
    result[2, 1, 3] = numpy.sum(
        x1677 * (x0 * x2331 + x0 * (x0 * x2332 + x2331) + x21 * x588 + x942)
    )
    result[2, 1, 4] = numpy.sum(
        x1682 * (x0 * x2333 + x0 * (x0 * x2334 + x2333) + x21 * x599 + x954)
    )
    result[2, 1, 5] = numpy.sum(
        x1677 * (x0 * x2335 + x0 * (x0 * x2336 + x2335) + x21 * x612 + x967)
    )
    result[2, 1, 6] = numpy.sum(
        x400 * (x0 * x2337 + x0 * (x0 * x2338 + x2337) + x21 * x621 + x975)
    )
    result[2, 1, 7] = numpy.sum(
        x1682 * (x0 * x2339 + x0 * (x0 * x2340 + x2339) + x21 * x627 + x984)
    )
    result[2, 1, 8] = numpy.sum(
        x1682 * (x0 * x2341 + x0 * (x0 * x2342 + x2341) + x21 * x633 + x992)
    )
    result[2, 1, 9] = numpy.sum(
        x400 * (x0 * x2343 + x0 * (x0 * x2344 + x2343) + x1000 + x21 * x641)
    )
    result[2, 1, 10] = numpy.sum(
        x1666 * (x0 * x2345 + x0 * (x0 * x2346 + x2345) + x1005 + x21 * x648)
    )
    result[2, 1, 11] = numpy.sum(
        x400 * (x0 * x2347 + x0 * (x0 * x2348 + x2347) + x1011 + x21 * x654)
    )
    result[2, 1, 12] = numpy.sum(
        x1677 * (x0 * x2349 + x0 * (x0 * x2350 + x2349) + x1016 + x21 * x659)
    )
    result[2, 1, 13] = numpy.sum(
        x400 * (x0 * x2351 + x0 * (x0 * x2352 + x2351) + x1021 + x21 * x664)
    )
    result[2, 1, 14] = numpy.sum(
        x1666 * (x0 * x2353 + x0 * (x0 * x2354 + x2353) + x1026 + x21 * x669)
    )
    result[2, 2, 0] = numpy.sum(x1666 * (x0 * x1070 + x0 * (x0 * x2357 + x1070) + x1081))
    result[2, 2, 1] = numpy.sum(x400 * (x0 * x1089 + x0 * (x0 * x2360 + x1089) + x1092))
    result[2, 2, 2] = numpy.sum(x400 * (x0 * x1105 + x0 * (x0 * x2363 + x1105) + x1109))
    result[2, 2, 3] = numpy.sum(x1677 * (x0 * x1113 + x0 * (x0 * x2367 + x1113) + x1116))
    result[2, 2, 4] = numpy.sum(x1682 * (x0 * x1120 + x0 * (x0 * x2371 + x1120) + x1123))
    result[2, 2, 5] = numpy.sum(x1677 * (x0 * x1131 + x0 * (x0 * x2376 + x1131) + x1135))
    result[2, 2, 6] = numpy.sum(x400 * (x0 * x1137 + x0 * (x0 * x2378 + x1137) + x1140))
    result[2, 2, 7] = numpy.sum(x1682 * (x0 * x1143 + x0 * (x0 * x2380 + x1143) + x1146))
    result[2, 2, 8] = numpy.sum(x1682 * (x0 * x1148 + x0 * (x0 * x2382 + x1148) + x1151))
    result[2, 2, 9] = numpy.sum(x400 * (x0 * x1156 + x0 * (x0 * x2385 + x1156) + x1160))
    result[2, 2, 10] = numpy.sum(x1666 * (x0 * x1162 + x0 * (x0 * x2387 + x1162) + x1165))
    result[2, 2, 11] = numpy.sum(x400 * (x0 * x1167 + x0 * (x0 * x2389 + x1167) + x1170))
    result[2, 2, 12] = numpy.sum(x1677 * (x0 * x1172 + x0 * (x0 * x2391 + x1172) + x1175))
    result[2, 2, 13] = numpy.sum(x400 * (x0 * x1177 + x0 * (x0 * x2393 + x1177) + x1180))
    result[2, 2, 14] = numpy.sum(x1666 * (x0 * x1182 + x0 * (x0 * x2395 + x1182) + x1185))
    result[2, 3, 0] = numpy.sum(x1666 * (x0 * x2397 + x21 * x2325 + x2398))
    result[2, 3, 1] = numpy.sum(x400 * (x0 * x2400 + x21 * x2327 + x2401))
    result[2, 3, 2] = numpy.sum(x400 * (x0 * x2403 + x21 * x2329 + x2404))
    result[2, 3, 3] = numpy.sum(x1677 * (x0 * x2406 + x21 * x2331 + x2407))
    result[2, 3, 4] = numpy.sum(x1682 * (x0 * x2409 + x21 * x2333 + x2410))
    result[2, 3, 5] = numpy.sum(x1677 * (x0 * x2412 + x21 * x2335 + x2413))
    result[2, 3, 6] = numpy.sum(x400 * (x0 * x2415 + x21 * x2337 + x2416))
    result[2, 3, 7] = numpy.sum(x1682 * (x0 * x2418 + x21 * x2339 + x2419))
    result[2, 3, 8] = numpy.sum(x1682 * (x0 * x2421 + x21 * x2341 + x2422))
    result[2, 3, 9] = numpy.sum(x400 * (x0 * x2424 + x21 * x2343 + x2425))
    result[2, 3, 10] = numpy.sum(x1666 * (x0 * x2427 + x21 * x2345 + x2428))
    result[2, 3, 11] = numpy.sum(x400 * (x0 * x2430 + x21 * x2347 + x2431))
    result[2, 3, 12] = numpy.sum(x1677 * (x0 * x2433 + x21 * x2349 + x2434))
    result[2, 3, 13] = numpy.sum(x400 * (x0 * x2436 + x21 * x2351 + x2437))
    result[2, 3, 14] = numpy.sum(x1666 * (x0 * x2439 + x21 * x2353 + x2440))
    result[2, 4, 0] = numpy.sum(x1816 * (x0 * x2441 + x1070 * x21 + x1440))
    result[2, 4, 1] = numpy.sum(x956 * (x0 * x2442 + x1089 * x21 + x1451))
    result[2, 4, 2] = numpy.sum(x956 * (x0 * x2443 + x1105 * x21 + x1463))
    result[2, 4, 3] = numpy.sum(x1682 * (x0 * x2444 + x1113 * x21 + x1471))
    result[2, 4, 4] = numpy.sum(x1836 * (x0 * x2445 + x1120 * x21 + x1479))
    result[2, 4, 5] = numpy.sum(x1682 * (x0 * x2446 + x1131 * x21 + x1488))
    result[2, 4, 6] = numpy.sum(x956 * (x0 * x2447 + x1137 * x21 + x1493))
    result[2, 4, 7] = numpy.sum(x1836 * (x0 * x2448 + x1143 * x21 + x1498))
    result[2, 4, 8] = numpy.sum(x1836 * (x0 * x2449 + x1148 * x21 + x1503))
    result[2, 4, 9] = numpy.sum(x956 * (x0 * x2450 + x1156 * x21 + x1509))
    result[2, 4, 10] = numpy.sum(x1816 * (x0 * x2451 + x1162 * x21 + x1512))
    result[2, 4, 11] = numpy.sum(x956 * (x0 * x2452 + x1167 * x21 + x1515))
    result[2, 4, 12] = numpy.sum(x1682 * (x0 * x2453 + x1172 * x21 + x1518))
    result[2, 4, 13] = numpy.sum(x956 * (x0 * x2454 + x1177 * x21 + x1521))
    result[2, 4, 14] = numpy.sum(x1816 * (x0 * x2455 + x1182 * x21 + x1524))
    result[2, 5, 0] = numpy.sum(x1666 * (x0 * x2459 + x1557))
    result[2, 5, 1] = numpy.sum(x400 * (x0 * x2463 + x1564))
    result[2, 5, 2] = numpy.sum(x400 * (x0 * x2467 + x1575))
    result[2, 5, 3] = numpy.sum(x1677 * (x0 * x2472 + x1579))
    result[2, 5, 4] = numpy.sum(x1682 * (x0 * x2477 + x1583))
    result[2, 5, 5] = numpy.sum(x1677 * (x0 * x2483 + x1590))
    result[2, 5, 6] = numpy.sum(x400 * (x0 * x2486 + x1593))
    result[2, 5, 7] = numpy.sum(x1682 * (x0 * x2489 + x1596))
    result[2, 5, 8] = numpy.sum(x1682 * (x0 * x2492 + x1599))
    result[2, 5, 9] = numpy.sum(x400 * (x0 * x2496 + x1604))
    result[2, 5, 10] = numpy.sum(x1666 * (x0 * x2499 + x1607))
    result[2, 5, 11] = numpy.sum(x400 * (x0 * x2502 + x1610))
    result[2, 5, 12] = numpy.sum(x1677 * (x0 * x2505 + x1613))
    result[2, 5, 13] = numpy.sum(x400 * (x0 * x2508 + x1616))
    result[2, 5, 14] = numpy.sum(x1666 * (x0 * x2511 + x1619))
    result[2, 6, 0] = numpy.sum(x325 * (x21 * x2397 + x2513))
    result[2, 6, 1] = numpy.sum(x189 * (x21 * x2400 + x2515))
    result[2, 6, 2] = numpy.sum(x189 * (x21 * x2403 + x2517))
    result[2, 6, 3] = numpy.sum(x380 * (x21 * x2406 + x2519))
    result[2, 6, 4] = numpy.sum(x400 * (x21 * x2409 + x2521))
    result[2, 6, 5] = numpy.sum(x380 * (x21 * x2412 + x2523))
    result[2, 6, 6] = numpy.sum(x189 * (x21 * x2415 + x2525))
    result[2, 6, 7] = numpy.sum(x400 * (x21 * x2418 + x2527))
    result[2, 6, 8] = numpy.sum(x400 * (x21 * x2421 + x2529))
    result[2, 6, 9] = numpy.sum(x189 * (x21 * x2424 + x2531))
    result[2, 6, 10] = numpy.sum(x325 * (x21 * x2427 + x2533))
    result[2, 6, 11] = numpy.sum(x189 * (x21 * x2430 + x2535))
    result[2, 6, 12] = numpy.sum(x380 * (x21 * x2433 + x2537))
    result[2, 6, 13] = numpy.sum(x189 * (x21 * x2436 + x2539))
    result[2, 6, 14] = numpy.sum(x325 * (x21 * x2439 + x2541))
    result[2, 7, 0] = numpy.sum(x1666 * (x21 * x2441 + x2542))
    result[2, 7, 1] = numpy.sum(x400 * (x21 * x2442 + x2543))
    result[2, 7, 2] = numpy.sum(x400 * (x21 * x2443 + x2544))
    result[2, 7, 3] = numpy.sum(x1677 * (x21 * x2444 + x2545))
    result[2, 7, 4] = numpy.sum(x1682 * (x21 * x2445 + x2546))
    result[2, 7, 5] = numpy.sum(x1677 * (x21 * x2446 + x2547))
    result[2, 7, 6] = numpy.sum(x400 * (x21 * x2447 + x2548))
    result[2, 7, 7] = numpy.sum(x1682 * (x21 * x2448 + x2549))
    result[2, 7, 8] = numpy.sum(x1682 * (x21 * x2449 + x2550))
    result[2, 7, 9] = numpy.sum(x400 * (x21 * x2450 + x2551))
    result[2, 7, 10] = numpy.sum(x1666 * (x21 * x2451 + x2552))
    result[2, 7, 11] = numpy.sum(x400 * (x21 * x2452 + x2553))
    result[2, 7, 12] = numpy.sum(x1677 * (x21 * x2453 + x2554))
    result[2, 7, 13] = numpy.sum(x400 * (x21 * x2454 + x2555))
    result[2, 7, 14] = numpy.sum(x1666 * (x21 * x2455 + x2556))
    result[2, 8, 0] = numpy.sum(x1666 * (x21 * x2459 + x2206))
    result[2, 8, 1] = numpy.sum(x400 * (x21 * x2463 + x2215))
    result[2, 8, 2] = numpy.sum(x400 * (x21 * x2467 + x2224))
    result[2, 8, 3] = numpy.sum(x1677 * (x21 * x2472 + x2232))
    result[2, 8, 4] = numpy.sum(x1682 * (x21 * x2477 + x2240))
    result[2, 8, 5] = numpy.sum(x1677 * (x21 * x2483 + x2248))
    result[2, 8, 6] = numpy.sum(x400 * (x21 * x2486 + x2254))
    result[2, 8, 7] = numpy.sum(x1682 * (x21 * x2489 + x2260))
    result[2, 8, 8] = numpy.sum(x1682 * (x21 * x2492 + x2266))
    result[2, 8, 9] = numpy.sum(x400 * (x21 * x2496 + x2272))
    result[2, 8, 10] = numpy.sum(x1666 * (x21 * x2499 + x2275))
    result[2, 8, 11] = numpy.sum(x400 * (x21 * x2502 + x2278))
    result[2, 8, 12] = numpy.sum(x1677 * (x21 * x2505 + x2281))
    result[2, 8, 13] = numpy.sum(x400 * (x21 * x2508 + x2284))
    result[2, 8, 14] = numpy.sum(x1666 * (x21 * x2511 + x2287))
    result[2, 9, 0] = numpy.sum(x325 * (x22 * x2459 + x2574))
    result[2, 9, 1] = numpy.sum(x189 * (x22 * x2463 + x2579))
    result[2, 9, 2] = numpy.sum(x189 * (x22 * x2467 + x2587))
    result[2, 9, 3] = numpy.sum(x380 * (x22 * x2472 + x2591))
    result[2, 9, 4] = numpy.sum(x400 * (x22 * x2477 + x2595))
    result[2, 9, 5] = numpy.sum(x380 * (x22 * x2483 + x2602))
    result[2, 9, 6] = numpy.sum(x189 * (x22 * x2486 + x2604))
    result[2, 9, 7] = numpy.sum(x400 * (x22 * x2489 + x2606))
    result[2, 9, 8] = numpy.sum(x400 * (x22 * x2492 + x2608))
    result[2, 9, 9] = numpy.sum(x189 * (x22 * x2496 + x2612))
    result[2, 9, 10] = numpy.sum(x325 * (x22 * x2499 + x2614))
    result[2, 9, 11] = numpy.sum(x189 * (x22 * x2502 + x2616))
    result[2, 9, 12] = numpy.sum(x380 * (x22 * x2505 + x2618))
    result[2, 9, 13] = numpy.sum(x189 * (x22 * x2508 + x2620))
    result[2, 9, 14] = numpy.sum(x325 * (x22 * x2511 + x2622))
    result[3, 0, 0] = numpy.sum(
        x325
        * (x0 * x2623 + x0 * x715 + x0 * (x0 * (x127 * x2626 + x1664) + x2623) + x725)
    )
    result[3, 0, 1] = numpy.sum(
        x189
        * (x0 * x2627 + x0 * x744 + x0 * (x0 * (x127 * x2630 + x1668) + x2627) + x750)
    )
    result[3, 0, 2] = numpy.sum(
        x189
        * (x0 * x2631 + x0 * x759 + x0 * (x0 * (x127 * x2633 + x1671) + x2631) + x762)
    )
    result[3, 0, 3] = numpy.sum(
        x380
        * (x0 * x2634 + x0 * x770 + x0 * (x0 * (x127 * x2635 + x1675) + x2634) + x774)
    )
    result[3, 0, 4] = numpy.sum(
        x400
        * (x0 * x2636 + x0 * x782 + x0 * (x0 * (x127 * x2637 + x1680) + x2636) + x786)
    )
    result[3, 0, 5] = numpy.sum(
        x380
        * (x0 * x2638 + x0 * x791 + x0 * (x0 * (x127 * x2640 + x1685) + x2638) + x794)
    )
    result[3, 0, 6] = numpy.sum(
        x189
        * (x0 * x2641 + x0 * x799 + x0 * (x0 * (x127 * x2643 + x1688) + x2641) + x803)
    )
    result[3, 0, 7] = numpy.sum(
        x400
        * (x0 * x2644 + x0 * x808 + x0 * (x0 * (x127 * x2646 + x1691) + x2644) + x812)
    )
    result[3, 0, 8] = numpy.sum(
        x400
        * (x0 * x2647 + x0 * x817 + x0 * (x0 * (x127 * x2649 + x1694) + x2647) + x821)
    )
    result[3, 0, 9] = numpy.sum(
        x189
        * (x0 * x2650 + x0 * x824 + x0 * (x0 * (x127 * x2652 + x1696) + x2650) + x827)
    )
    result[3, 0, 10] = numpy.sum(
        x325
        * (x0 * x2653 + x0 * x829 + x0 * (x0 * (x127 * x2654 + x1698) + x2653) + x832)
    )
    result[3, 0, 11] = numpy.sum(
        x189
        * (x0 * x2655 + x0 * x834 + x0 * (x0 * (x127 * x2656 + x1700) + x2655) + x837)
    )
    result[3, 0, 12] = numpy.sum(
        x380
        * (x0 * x2657 + x0 * x839 + x0 * (x0 * (x127 * x2658 + x1702) + x2657) + x842)
    )
    result[3, 0, 13] = numpy.sum(
        x189
        * (x0 * x2659 + x0 * x844 + x0 * (x0 * (x127 * x2660 + x1704) + x2659) + x847)
    )
    result[3, 0, 14] = numpy.sum(
        x325 * (x0 * x2661 + x0 * x849 + x0 * (x0 * (x0 * x2662 + x1706) + x2661) + x852)
    )
    result[3, 1, 0] = numpy.sum(x1666 * (x0 * x1757 + x0 * (x0 * x2664 + x1757) + x1216))
    result[3, 1, 1] = numpy.sum(x400 * (x0 * x1761 + x0 * (x0 * x2666 + x1761) + x1233))
    result[3, 1, 2] = numpy.sum(x400 * (x0 * x1765 + x0 * (x0 * x2668 + x1765) + x1240))
    result[3, 1, 3] = numpy.sum(x1677 * (x0 * x1770 + x0 * (x0 * x2670 + x1770) + x1247))
    result[3, 1, 4] = numpy.sum(x1682 * (x0 * x1775 + x0 * (x0 * x2672 + x1775) + x1254))
    result[3, 1, 5] = numpy.sum(x1677 * (x0 * x1780 + x0 * (x0 * x2674 + x1780) + x1258))
    result[3, 1, 6] = numpy.sum(x400 * (x0 * x1784 + x0 * (x0 * x2677 + x1784) + x1263))
    result[3, 1, 7] = numpy.sum(x1682 * (x0 * x1788 + x0 * (x0 * x2680 + x1788) + x1268))
    result[3, 1, 8] = numpy.sum(x1682 * (x0 * x1792 + x0 * (x0 * x2683 + x1792) + x1273))
    result[3, 1, 9] = numpy.sum(x400 * (x0 * x1795 + x0 * (x0 * x2686 + x1795) + x1276))
    result[3, 1, 10] = numpy.sum(x1666 * (x0 * x1798 + x0 * (x0 * x2688 + x1798) + x1279))
    result[3, 1, 11] = numpy.sum(x400 * (x0 * x1801 + x0 * (x0 * x2690 + x1801) + x1282))
    result[3, 1, 12] = numpy.sum(x1677 * (x0 * x1804 + x0 * (x0 * x2692 + x1804) + x1285))
    result[3, 1, 13] = numpy.sum(x400 * (x0 * x1807 + x0 * (x0 * x2694 + x1807) + x1288))
    result[3, 1, 14] = numpy.sum(x1666 * (x0 * x1810 + x0 * (x0 * x2696 + x1810) + x1291))
    result[3, 2, 0] = numpy.sum(x1666 * (x0 * x1814 + x0 * (x0 * x2698 + x1814) + x1318))
    result[3, 2, 1] = numpy.sum(x400 * (x0 * x1819 + x0 * (x0 * x2700 + x1819) + x1332))
    result[3, 2, 2] = numpy.sum(x400 * (x0 * x1823 + x0 * (x0 * x2702 + x1823) + x1344))
    result[3, 2, 3] = numpy.sum(x1677 * (x0 * x1828 + x0 * (x0 * x2704 + x1828) + x1352))
    result[3, 2, 4] = numpy.sum(x1682 * (x0 * x1834 + x0 * (x0 * x2706 + x1834) + x1362))
    result[3, 2, 5] = numpy.sum(x1677 * (x0 * x1840 + x0 * (x0 * x2708 + x1840) + x1371))
    result[3, 2, 6] = numpy.sum(x400 * (x0 * x1844 + x0 * (x0 * x2711 + x1844) + x1377))
    result[3, 2, 7] = numpy.sum(x1682 * (x0 * x1848 + x0 * (x0 * x2714 + x1848) + x1383))
    result[3, 2, 8] = numpy.sum(x1682 * (x0 * x1852 + x0 * (x0 * x2718 + x1852) + x1391))
    result[3, 2, 9] = numpy.sum(x400 * (x0 * x1857 + x0 * (x0 * x2721 + x1857) + x1397))
    result[3, 2, 10] = numpy.sum(x1666 * (x0 * x1860 + x0 * (x0 * x2723 + x1860) + x1400))
    result[3, 2, 11] = numpy.sum(x400 * (x0 * x1863 + x0 * (x0 * x2725 + x1863) + x1403))
    result[3, 2, 12] = numpy.sum(x1677 * (x0 * x1866 + x0 * (x0 * x2727 + x1866) + x1406))
    result[3, 2, 13] = numpy.sum(x400 * (x0 * x1870 + x0 * (x0 * x2729 + x1870) + x1410))
    result[3, 2, 14] = numpy.sum(x1666 * (x0 * x1873 + x0 * (x0 * x2731 + x1873) + x1413))
    result[3, 3, 0] = numpy.sum(x1666 * (x0 * x2734 + x1954))
    result[3, 3, 1] = numpy.sum(x400 * (x0 * x2737 + x1967))
    result[3, 3, 2] = numpy.sum(x400 * (x0 * x2740 + x1972))
    result[3, 3, 3] = numpy.sum(x1677 * (x0 * x2743 + x1978))
    result[3, 3, 4] = numpy.sum(x1682 * (x0 * x2746 + x1984))
    result[3, 3, 5] = numpy.sum(x1677 * (x0 * x2749 + x1988))
    result[3, 3, 6] = numpy.sum(x400 * (x0 * x2753 + x1992))
    result[3, 3, 7] = numpy.sum(x1682 * (x0 * x2757 + x1996))
    result[3, 3, 8] = numpy.sum(x1682 * (x0 * x2761 + x2000))
    result[3, 3, 9] = numpy.sum(x400 * (x0 * x2765 + x2002))
    result[3, 3, 10] = numpy.sum(x1666 * (x0 * x2768 + x2004))
    result[3, 3, 11] = numpy.sum(x400 * (x0 * x2771 + x2006))
    result[3, 3, 12] = numpy.sum(x1677 * (x0 * x2774 + x2008))
    result[3, 3, 13] = numpy.sum(x400 * (x0 * x2777 + x2010))
    result[3, 3, 14] = numpy.sum(x1666 * (x0 * x2780 + x2012))
    result[3, 4, 0] = numpy.sum(x1816 * (x0 * x2783 + x2028))
    result[3, 4, 1] = numpy.sum(x956 * (x0 * x2786 + x2036))
    result[3, 4, 2] = numpy.sum(x956 * (x0 * x2789 + x2045))
    result[3, 4, 3] = numpy.sum(x1682 * (x0 * x2792 + x2052))
    result[3, 4, 4] = numpy.sum(x1836 * (x0 * x2795 + x2059))
    result[3, 4, 5] = numpy.sum(x1682 * (x0 * x2798 + x2067))
    result[3, 4, 6] = numpy.sum(x956 * (x0 * x2802 + x2072))
    result[3, 4, 7] = numpy.sum(x1836 * (x0 * x2806 + x2077))
    result[3, 4, 8] = numpy.sum(x1836 * (x0 * x2810 + x2082))
    result[3, 4, 9] = numpy.sum(x956 * (x0 * x2814 + x2088))
    result[3, 4, 10] = numpy.sum(x1816 * (x0 * x2817 + x2091))
    result[3, 4, 11] = numpy.sum(x956 * (x0 * x2820 + x2094))
    result[3, 4, 12] = numpy.sum(x1682 * (x0 * x2823 + x2097))
    result[3, 4, 13] = numpy.sum(x956 * (x0 * x2826 + x2100))
    result[3, 4, 14] = numpy.sum(x1816 * (x0 * x2829 + x2103))
    result[3, 5, 0] = numpy.sum(x1666 * (x0 * x2832 + x2118))
    result[3, 5, 1] = numpy.sum(x400 * (x0 * x2835 + x2126))
    result[3, 5, 2] = numpy.sum(x400 * (x0 * x2838 + x2134))
    result[3, 5, 3] = numpy.sum(x1677 * (x0 * x2841 + x2141))
    result[3, 5, 4] = numpy.sum(x1682 * (x0 * x2844 + x2148))
    result[3, 5, 5] = numpy.sum(x1677 * (x0 * x2847 + x2155))
    result[3, 5, 6] = numpy.sum(x400 * (x0 * x2851 + x2160))
    result[3, 5, 7] = numpy.sum(x1682 * (x0 * x2855 + x2165))
    result[3, 5, 8] = numpy.sum(x1682 * (x0 * x2859 + x2170))
    result[3, 5, 9] = numpy.sum(x400 * (x0 * x2863 + x2175))
    result[3, 5, 10] = numpy.sum(x1666 * (x0 * x2866 + x2178))
    result[3, 5, 11] = numpy.sum(x400 * (x0 * x2869 + x2181))
    result[3, 5, 12] = numpy.sum(x1677 * (x0 * x2872 + x2184))
    result[3, 5, 13] = numpy.sum(x400 * (x0 * x2875 + x2187))
    result[3, 5, 14] = numpy.sum(x1666 * (x0 * x2878 + x2190))
    result[3, 6, 0] = numpy.sum(x325 * (x21 * x2734 + x2884))
    result[3, 6, 1] = numpy.sum(x189 * (x21 * x2737 + x2892))
    result[3, 6, 2] = numpy.sum(x189 * (x21 * x2740 + x2894))
    result[3, 6, 3] = numpy.sum(x380 * (x21 * x2743 + x2898))
    result[3, 6, 4] = numpy.sum(x400 * (x21 * x2746 + x2902))
    result[3, 6, 5] = numpy.sum(x380 * (x21 * x2749 + x2904))
    result[3, 6, 6] = numpy.sum(x189 * (x21 * x2753 + x2908))
    result[3, 6, 7] = numpy.sum(x400 * (x21 * x2757 + x2912))
    result[3, 6, 8] = numpy.sum(x400 * (x21 * x2761 + x2916))
    result[3, 6, 9] = numpy.sum(x189 * (x21 * x2765 + x2918))
    result[3, 6, 10] = numpy.sum(x325 * (x21 * x2768 + x2919))
    result[3, 6, 11] = numpy.sum(x189 * (x21 * x2771 + x2920))
    result[3, 6, 12] = numpy.sum(x380 * (x21 * x2774 + x2921))
    result[3, 6, 13] = numpy.sum(x189 * (x21 * x2777 + x2922))
    result[3, 6, 14] = numpy.sum(x325 * (x21 * x2780 + x2923))
    result[3, 7, 0] = numpy.sum(x1666 * (x21 * x2783 + x2929))
    result[3, 7, 1] = numpy.sum(x400 * (x21 * x2786 + x2933))
    result[3, 7, 2] = numpy.sum(x400 * (x21 * x2789 + x2937))
    result[3, 7, 3] = numpy.sum(x1677 * (x21 * x2792 + x2941))
    result[3, 7, 4] = numpy.sum(x1682 * (x21 * x2795 + x2945))
    result[3, 7, 5] = numpy.sum(x1677 * (x21 * x2798 + x2949))
    result[3, 7, 6] = numpy.sum(x400 * (x21 * x2802 + x2953))
    result[3, 7, 7] = numpy.sum(x1682 * (x21 * x2806 + x2957))
    result[3, 7, 8] = numpy.sum(x1682 * (x21 * x2810 + x2961))
    result[3, 7, 9] = numpy.sum(x400 * (x21 * x2814 + x2965))
    result[3, 7, 10] = numpy.sum(x1666 * (x21 * x2817 + x2967))
    result[3, 7, 11] = numpy.sum(x400 * (x21 * x2820 + x2969))
    result[3, 7, 12] = numpy.sum(x1677 * (x21 * x2823 + x2971))
    result[3, 7, 13] = numpy.sum(x400 * (x21 * x2826 + x2973))
    result[3, 7, 14] = numpy.sum(x1666 * (x21 * x2829 + x2975))
    result[3, 8, 0] = numpy.sum(x1666 * (x21 * x2832 + x2982))
    result[3, 8, 1] = numpy.sum(x400 * (x21 * x2835 + x2989))
    result[3, 8, 2] = numpy.sum(x400 * (x21 * x2838 + x2994))
    result[3, 8, 3] = numpy.sum(x1677 * (x21 * x2841 + x2999))
    result[3, 8, 4] = numpy.sum(x1682 * (x21 * x2844 + x3006))
    result[3, 8, 5] = numpy.sum(x1677 * (x21 * x2847 + x3011))
    result[3, 8, 6] = numpy.sum(x400 * (x21 * x2851 + x3016))
    result[3, 8, 7] = numpy.sum(x1682 * (x21 * x2855 + x3021))
    result[3, 8, 8] = numpy.sum(x1682 * (x21 * x2859 + x3028))
    result[3, 8, 9] = numpy.sum(x400 * (x21 * x2863 + x3033))
    result[3, 8, 10] = numpy.sum(x1666 * (x21 * x2866 + x3036))
    result[3, 8, 11] = numpy.sum(x400 * (x21 * x2869 + x3039))
    result[3, 8, 12] = numpy.sum(x1677 * (x21 * x2872 + x3042))
    result[3, 8, 13] = numpy.sum(x400 * (x21 * x2875 + x3046))
    result[3, 8, 14] = numpy.sum(x1666 * (x21 * x2878 + x3049))
    result[3, 9, 0] = numpy.sum(x325 * (x22 * x2832 + x3056))
    result[3, 9, 1] = numpy.sum(x189 * (x22 * x2835 + x3061))
    result[3, 9, 2] = numpy.sum(x189 * (x22 * x2838 + x3066))
    result[3, 9, 3] = numpy.sum(x380 * (x22 * x2841 + x3071))
    result[3, 9, 4] = numpy.sum(x400 * (x22 * x2844 + x3076))
    result[3, 9, 5] = numpy.sum(x380 * (x22 * x2847 + x3081))
    result[3, 9, 6] = numpy.sum(x189 * (x22 * x2851 + x3086))
    result[3, 9, 7] = numpy.sum(x400 * (x22 * x2855 + x3091))
    result[3, 9, 8] = numpy.sum(x400 * (x22 * x2859 + x3096))
    result[3, 9, 9] = numpy.sum(x189 * (x22 * x2863 + x3101))
    result[3, 9, 10] = numpy.sum(x325 * (x22 * x2866 + x3104))
    result[3, 9, 11] = numpy.sum(x189 * (x22 * x2869 + x3107))
    result[3, 9, 12] = numpy.sum(x380 * (x22 * x2872 + x3110))
    result[3, 9, 13] = numpy.sum(x189 * (x22 * x2875 + x3113))
    result[3, 9, 14] = numpy.sum(x325 * (x22 * x2878 + x3116))
    result[4, 0, 0] = numpy.sum(
        x898
        * (x0 * x3117 + x0 * x889 + x0 * (x0 * (x127 * x3118 + x1709) + x3117) + x895)
    )
    result[4, 0, 1] = numpy.sum(
        x915
        * (x0 * x3119 + x0 * x909 + x0 * (x0 * (x127 * x3120 + x1712) + x3119) + x913)
    )
    result[4, 0, 2] = numpy.sum(
        x915
        * (x0 * x3121 + x0 * x926 + x0 * (x0 * (x127 * x3122 + x1715) + x3121) + x930)
    )
    result[4, 0, 3] = numpy.sum(
        x400
        * (x0 * x3123 + x0 * x938 + x0 * (x0 * (x127 * x3124 + x1719) + x3123) + x942)
    )
    result[4, 0, 4] = numpy.sum(
        x956
        * (x0 * x3125 + x0 * x950 + x0 * (x0 * (x127 * x3126 + x1723) + x3125) + x954)
    )
    result[4, 0, 5] = numpy.sum(
        x400
        * (x0 * x3127 + x0 * x963 + x0 * (x0 * (x127 * x3128 + x1727) + x3127) + x967)
    )
    result[4, 0, 6] = numpy.sum(
        x915
        * (x0 * x3129 + x0 * x971 + x0 * (x0 * (x127 * x3131 + x1731) + x3129) + x975)
    )
    result[4, 0, 7] = numpy.sum(
        x956
        * (x0 * x3132 + x0 * x980 + x0 * (x0 * (x127 * x3134 + x1735) + x3132) + x984)
    )
    result[4, 0, 8] = numpy.sum(
        x956
        * (x0 * x3135 + x0 * x988 + x0 * (x0 * (x127 * x3137 + x1739) + x3135) + x992)
    )
    result[4, 0, 9] = numpy.sum(
        x915
        * (x0 * x3138 + x0 * x996 + x0 * (x0 * (x127 * x3140 + x1743) + x3138) + x1000)
    )
    result[4, 0, 10] = numpy.sum(
        x898
        * (x0 * x1002 + x0 * x3141 + x0 * (x0 * (x127 * x3142 + x1745) + x3141) + x1005)
    )
    result[4, 0, 11] = numpy.sum(
        x915
        * (x0 * x1008 + x0 * x3143 + x0 * (x0 * (x127 * x3144 + x1747) + x3143) + x1011)
    )
    result[4, 0, 12] = numpy.sum(
        x400
        * (x0 * x1013 + x0 * x3145 + x0 * (x0 * (x127 * x3146 + x1749) + x3145) + x1016)
    )
    result[4, 0, 13] = numpy.sum(
        x915
        * (x0 * x1018 + x0 * x3147 + x0 * (x0 * (x127 * x3148 + x1751) + x3147) + x1021)
    )
    result[4, 0, 14] = numpy.sum(
        x898
        * (x0 * x1023 + x0 * x3149 + x0 * (x0 * (x127 * x3150 + x1753) + x3149) + x1026)
    )
    result[4, 1, 0] = numpy.sum(x1816 * (x0 * x2396 + x0 * (x0 * x3151 + x2396) + x2398))
    result[4, 1, 1] = numpy.sum(x956 * (x0 * x2399 + x0 * (x0 * x3152 + x2399) + x2401))
    result[4, 1, 2] = numpy.sum(x956 * (x0 * x2402 + x0 * (x0 * x3153 + x2402) + x2404))
    result[4, 1, 3] = numpy.sum(x1682 * (x0 * x2405 + x0 * (x0 * x3154 + x2405) + x2407))
    result[4, 1, 4] = numpy.sum(x1836 * (x0 * x2408 + x0 * (x0 * x3155 + x2408) + x2410))
    result[4, 1, 5] = numpy.sum(x1682 * (x0 * x2411 + x0 * (x0 * x3156 + x2411) + x2413))
    result[4, 1, 6] = numpy.sum(x956 * (x0 * x2414 + x0 * (x0 * x3157 + x2414) + x2416))
    result[4, 1, 7] = numpy.sum(x1836 * (x0 * x2417 + x0 * (x0 * x3158 + x2417) + x2419))
    result[4, 1, 8] = numpy.sum(x1836 * (x0 * x2420 + x0 * (x0 * x3159 + x2420) + x2422))
    result[4, 1, 9] = numpy.sum(x956 * (x0 * x2423 + x0 * (x0 * x3160 + x2423) + x2425))
    result[4, 1, 10] = numpy.sum(x1816 * (x0 * x2426 + x0 * (x0 * x3161 + x2426) + x2428))
    result[4, 1, 11] = numpy.sum(x956 * (x0 * x2429 + x0 * (x0 * x3162 + x2429) + x2431))
    result[4, 1, 12] = numpy.sum(x1682 * (x0 * x2432 + x0 * (x0 * x3163 + x2432) + x2434))
    result[4, 1, 13] = numpy.sum(x956 * (x0 * x2435 + x0 * (x0 * x3164 + x2435) + x2437))
    result[4, 1, 14] = numpy.sum(x1816 * (x0 * x2438 + x0 * (x0 * x3165 + x2438) + x2440))
    result[4, 2, 0] = numpy.sum(x1816 * (x0 * x1877 + x0 * (x0 * x3167 + x1877) + x1440))
    result[4, 2, 1] = numpy.sum(x956 * (x0 * x1881 + x0 * (x0 * x3169 + x1881) + x1451))
    result[4, 2, 2] = numpy.sum(x956 * (x0 * x1885 + x0 * (x0 * x3171 + x1885) + x1463))
    result[4, 2, 3] = numpy.sum(x1682 * (x0 * x1890 + x0 * (x0 * x3173 + x1890) + x1471))
    result[4, 2, 4] = numpy.sum(x1836 * (x0 * x1895 + x0 * (x0 * x3175 + x1895) + x1479))
    result[4, 2, 5] = numpy.sum(x1682 * (x0 * x1900 + x0 * (x0 * x3177 + x1900) + x1488))
    result[4, 2, 6] = numpy.sum(x956 * (x0 * x1905 + x0 * (x0 * x3180 + x1905) + x1493))
    result[4, 2, 7] = numpy.sum(x1836 * (x0 * x1910 + x0 * (x0 * x3183 + x1910) + x1498))
    result[4, 2, 8] = numpy.sum(x1836 * (x0 * x1915 + x0 * (x0 * x3186 + x1915) + x1503))
    result[4, 2, 9] = numpy.sum(x956 * (x0 * x1920 + x0 * (x0 * x3189 + x1920) + x1509))
    result[4, 2, 10] = numpy.sum(x1816 * (x0 * x1923 + x0 * (x0 * x3191 + x1923) + x1512))
    result[4, 2, 11] = numpy.sum(x956 * (x0 * x1926 + x0 * (x0 * x3193 + x1926) + x1515))
    result[4, 2, 12] = numpy.sum(x1682 * (x0 * x1929 + x0 * (x0 * x3195 + x1929) + x1518))
    result[4, 2, 13] = numpy.sum(x956 * (x0 * x1932 + x0 * (x0 * x3197 + x1932) + x1521))
    result[4, 2, 14] = numpy.sum(x1816 * (x0 * x1935 + x0 * (x0 * x3199 + x1935) + x1524))
    result[4, 3, 0] = numpy.sum(x1816 * (x0 * x3201 + x2513))
    result[4, 3, 1] = numpy.sum(x956 * (x0 * x3203 + x2515))
    result[4, 3, 2] = numpy.sum(x956 * (x0 * x3205 + x2517))
    result[4, 3, 3] = numpy.sum(x1682 * (x0 * x3207 + x2519))
    result[4, 3, 4] = numpy.sum(x1836 * (x0 * x3209 + x2521))
    result[4, 3, 5] = numpy.sum(x1682 * (x0 * x3211 + x2523))
    result[4, 3, 6] = numpy.sum(x956 * (x0 * x3213 + x2525))
    result[4, 3, 7] = numpy.sum(x1836 * (x0 * x3215 + x2527))
    result[4, 3, 8] = numpy.sum(x1836 * (x0 * x3217 + x2529))
    result[4, 3, 9] = numpy.sum(x956 * (x0 * x3219 + x2531))
    result[4, 3, 10] = numpy.sum(x1816 * (x0 * x3221 + x2533))
    result[4, 3, 11] = numpy.sum(x956 * (x0 * x3223 + x2535))
    result[4, 3, 12] = numpy.sum(x1682 * (x0 * x3225 + x2537))
    result[4, 3, 13] = numpy.sum(x956 * (x0 * x3227 + x2539))
    result[4, 3, 14] = numpy.sum(x1816 * (x0 * x3229 + x2541))
    result[4, 4, 0] = numpy.sum(x3231 * (x0 * x3230 + x2542))
    result[4, 4, 1] = numpy.sum(x3233 * (x0 * x3232 + x2543))
    result[4, 4, 2] = numpy.sum(x3233 * (x0 * x3234 + x2544))
    result[4, 4, 3] = numpy.sum(x1836 * (x0 * x3235 + x2545))
    result[4, 4, 4] = numpy.sum(x3237 * (x0 * x3236 + x2546))
    result[4, 4, 5] = numpy.sum(x1836 * (x0 * x3238 + x2547))
    result[4, 4, 6] = numpy.sum(x3233 * (x0 * x3239 + x2548))
    result[4, 4, 7] = numpy.sum(x3237 * (x0 * x3240 + x2549))
    result[4, 4, 8] = numpy.sum(x3237 * (x0 * x3241 + x2550))
    result[4, 4, 9] = numpy.sum(x3233 * (x0 * x3242 + x2551))
    result[4, 4, 10] = numpy.sum(x3231 * (x0 * x3243 + x2552))
    result[4, 4, 11] = numpy.sum(x3233 * (x0 * x3244 + x2553))
    result[4, 4, 12] = numpy.sum(x1836 * (x0 * x3245 + x2554))
    result[4, 4, 13] = numpy.sum(x3233 * (x0 * x3246 + x2555))
    result[4, 4, 14] = numpy.sum(x3231 * (x0 * x3247 + x2556))
    result[4, 5, 0] = numpy.sum(x1816 * (x0 * x3250 + x2206))
    result[4, 5, 1] = numpy.sum(x956 * (x0 * x3253 + x2215))
    result[4, 5, 2] = numpy.sum(x956 * (x0 * x3256 + x2224))
    result[4, 5, 3] = numpy.sum(x1682 * (x0 * x3259 + x2232))
    result[4, 5, 4] = numpy.sum(x1836 * (x0 * x3262 + x2240))
    result[4, 5, 5] = numpy.sum(x1682 * (x0 * x3265 + x2248))
    result[4, 5, 6] = numpy.sum(x956 * (x0 * x3269 + x2254))
    result[4, 5, 7] = numpy.sum(x1836 * (x0 * x3273 + x2260))
    result[4, 5, 8] = numpy.sum(x1836 * (x0 * x3277 + x2266))
    result[4, 5, 9] = numpy.sum(x956 * (x0 * x3281 + x2272))
    result[4, 5, 10] = numpy.sum(x1816 * (x0 * x3284 + x2275))
    result[4, 5, 11] = numpy.sum(x956 * (x0 * x3287 + x2278))
    result[4, 5, 12] = numpy.sum(x1682 * (x0 * x3290 + x2281))
    result[4, 5, 13] = numpy.sum(x956 * (x0 * x3293 + x2284))
    result[4, 5, 14] = numpy.sum(x1816 * (x0 * x3296 + x2287))
    result[4, 6, 0] = numpy.sum(x898 * (x21 * x3201 + x3297))
    result[4, 6, 1] = numpy.sum(x915 * (x21 * x3203 + x3298))
    result[4, 6, 2] = numpy.sum(x915 * (x21 * x3205 + x3299))
    result[4, 6, 3] = numpy.sum(x400 * (x21 * x3207 + x3300))
    result[4, 6, 4] = numpy.sum(x956 * (x21 * x3209 + x3301))
    result[4, 6, 5] = numpy.sum(x400 * (x21 * x3211 + x3302))
    result[4, 6, 6] = numpy.sum(x915 * (x21 * x3213 + x3303))
    result[4, 6, 7] = numpy.sum(x956 * (x21 * x3215 + x3304))
    result[4, 6, 8] = numpy.sum(x956 * (x21 * x3217 + x3305))
    result[4, 6, 9] = numpy.sum(x915 * (x21 * x3219 + x3306))
    result[4, 6, 10] = numpy.sum(x898 * (x21 * x3221 + x3307))
    result[4, 6, 11] = numpy.sum(x915 * (x21 * x3223 + x3308))
    result[4, 6, 12] = numpy.sum(x400 * (x21 * x3225 + x3309))
    result[4, 6, 13] = numpy.sum(x915 * (x21 * x3227 + x3310))
    result[4, 6, 14] = numpy.sum(x898 * (x21 * x3229 + x3311))
    result[4, 7, 0] = numpy.sum(x1816 * (x21 * x3230 + x3312))
    result[4, 7, 1] = numpy.sum(x956 * (x21 * x3232 + x3313))
    result[4, 7, 2] = numpy.sum(x956 * (x21 * x3234 + x3314))
    result[4, 7, 3] = numpy.sum(x1682 * (x21 * x3235 + x3315))
    result[4, 7, 4] = numpy.sum(x1836 * (x21 * x3236 + x3316))
    result[4, 7, 5] = numpy.sum(x1682 * (x21 * x3238 + x3317))
    result[4, 7, 6] = numpy.sum(x956 * (x21 * x3239 + x3318))
    result[4, 7, 7] = numpy.sum(x1836 * (x21 * x3240 + x3319))
    result[4, 7, 8] = numpy.sum(x1836 * (x21 * x3241 + x3320))
    result[4, 7, 9] = numpy.sum(x956 * (x21 * x3242 + x3321))
    result[4, 7, 10] = numpy.sum(x1816 * (x21 * x3243 + x3322))
    result[4, 7, 11] = numpy.sum(x956 * (x21 * x3244 + x3323))
    result[4, 7, 12] = numpy.sum(x1682 * (x21 * x3245 + x3324))
    result[4, 7, 13] = numpy.sum(x956 * (x21 * x3246 + x3325))
    result[4, 7, 14] = numpy.sum(x1816 * (x21 * x3247 + x3326))
    result[4, 8, 0] = numpy.sum(x1816 * (x21 * x3250 + x3056))
    result[4, 8, 1] = numpy.sum(x956 * (x21 * x3253 + x3061))
    result[4, 8, 2] = numpy.sum(x956 * (x21 * x3256 + x3066))
    result[4, 8, 3] = numpy.sum(x1682 * (x21 * x3259 + x3071))
    result[4, 8, 4] = numpy.sum(x1836 * (x21 * x3262 + x3076))
    result[4, 8, 5] = numpy.sum(x1682 * (x21 * x3265 + x3081))
    result[4, 8, 6] = numpy.sum(x956 * (x21 * x3269 + x3086))
    result[4, 8, 7] = numpy.sum(x1836 * (x21 * x3273 + x3091))
    result[4, 8, 8] = numpy.sum(x1836 * (x21 * x3277 + x3096))
    result[4, 8, 9] = numpy.sum(x956 * (x21 * x3281 + x3101))
    result[4, 8, 10] = numpy.sum(x1816 * (x21 * x3284 + x3104))
    result[4, 8, 11] = numpy.sum(x956 * (x21 * x3287 + x3107))
    result[4, 8, 12] = numpy.sum(x1682 * (x21 * x3290 + x3110))
    result[4, 8, 13] = numpy.sum(x956 * (x21 * x3293 + x3113))
    result[4, 8, 14] = numpy.sum(x1816 * (x21 * x3296 + x3116))
    result[4, 9, 0] = numpy.sum(x898 * (x22 * x3250 + x3332))
    result[4, 9, 1] = numpy.sum(x915 * (x22 * x3253 + x3336))
    result[4, 9, 2] = numpy.sum(x915 * (x22 * x3256 + x3340))
    result[4, 9, 3] = numpy.sum(x400 * (x22 * x3259 + x3344))
    result[4, 9, 4] = numpy.sum(x956 * (x22 * x3262 + x3348))
    result[4, 9, 5] = numpy.sum(x400 * (x22 * x3265 + x3352))
    result[4, 9, 6] = numpy.sum(x915 * (x22 * x3269 + x3356))
    result[4, 9, 7] = numpy.sum(x956 * (x22 * x3273 + x3360))
    result[4, 9, 8] = numpy.sum(x956 * (x22 * x3277 + x3364))
    result[4, 9, 9] = numpy.sum(x915 * (x22 * x3281 + x3368))
    result[4, 9, 10] = numpy.sum(x898 * (x22 * x3284 + x3370))
    result[4, 9, 11] = numpy.sum(x915 * (x22 * x3287 + x3372))
    result[4, 9, 12] = numpy.sum(x400 * (x22 * x3290 + x3374))
    result[4, 9, 13] = numpy.sum(x915 * (x22 * x3293 + x3376))
    result[4, 9, 14] = numpy.sum(x898 * (x22 * x3296 + x3378))
    result[5, 0, 0] = numpy.sum(
        x325
        * (x0 * x1069 + x0 * x3379 + x0 * (x0 * (x127 * x3380 + x2356) + x3379) + x1080)
    )
    result[5, 0, 1] = numpy.sum(
        x189
        * (x0 * x1088 + x0 * x3381 + x0 * (x0 * (x127 * x3383 + x2359) + x3381) + x1091)
    )
    result[5, 0, 2] = numpy.sum(
        x189
        * (x0 * x1104 + x0 * x3384 + x0 * (x0 * (x127 * x3385 + x2362) + x3384) + x1108)
    )
    result[5, 0, 3] = numpy.sum(
        x380
        * (x0 * x1112 + x0 * x3386 + x0 * (x0 * (x127 * x3387 + x2366) + x3386) + x1115)
    )
    result[5, 0, 4] = numpy.sum(
        x400
        * (x0 * x1119 + x0 * x3388 + x0 * (x0 * (x127 * x3391 + x2370) + x3388) + x1122)
    )
    result[5, 0, 5] = numpy.sum(
        x380
        * (x0 * x1130 + x0 * x3392 + x0 * (x0 * (x127 * x3393 + x2375) + x3392) + x1134)
    )
    result[5, 0, 6] = numpy.sum(
        x189
        * (x0 * x1136 + x0 * x3394 + x0 * (x0 * (x127 * x3396 + x2377) + x3394) + x1139)
    )
    result[5, 0, 7] = numpy.sum(
        x400
        * (x0 * x1142 + x0 * x3397 + x0 * (x0 * (x127 * x3399 + x2379) + x3397) + x1145)
    )
    result[5, 0, 8] = numpy.sum(
        x400
        * (x0 * x1147 + x0 * x3400 + x0 * (x0 * (x127 * x3402 + x2381) + x3400) + x1150)
    )
    result[5, 0, 9] = numpy.sum(
        x189
        * (x0 * x1155 + x0 * x3403 + x0 * (x0 * (x127 * x3406 + x2384) + x3403) + x1159)
    )
    result[5, 0, 10] = numpy.sum(
        x325
        * (x0 * x1161 + x0 * x3407 + x0 * (x0 * (x0 * x3408 + x2386) + x3407) + x1164)
    )
    result[5, 0, 11] = numpy.sum(
        x189
        * (x0 * x1166 + x0 * x3409 + x0 * (x0 * (x0 * x3410 + x2388) + x3409) + x1169)
    )
    result[5, 0, 12] = numpy.sum(
        x380
        * (x0 * x1171 + x0 * x3411 + x0 * (x0 * (x0 * x3412 + x2390) + x3411) + x1174)
    )
    result[5, 0, 13] = numpy.sum(
        x189
        * (x0 * x1176 + x0 * x3413 + x0 * (x0 * (x0 * x3414 + x2392) + x3413) + x1179)
    )
    result[5, 0, 14] = numpy.sum(
        x325
        * (x0 * x1181 + x0 * x3415 + x0 * (x0 * (x127 * x3416 + x2394) + x3415) + x1184)
    )
    result[5, 1, 0] = numpy.sum(
        x1666 * (x0 * x3417 + x0 * (x0 * x3418 + x3417) + x1069 * x21 + x1439)
    )
    result[5, 1, 1] = numpy.sum(
        x400 * (x0 * x3419 + x0 * (x0 * x3420 + x3419) + x1088 * x21 + x1450)
    )
    result[5, 1, 2] = numpy.sum(
        x400 * (x0 * x3421 + x0 * (x0 * x3422 + x3421) + x1104 * x21 + x1462)
    )
    result[5, 1, 3] = numpy.sum(
        x1677 * (x0 * x3423 + x0 * (x0 * x3424 + x3423) + x1112 * x21 + x1470)
    )
    result[5, 1, 4] = numpy.sum(
        x1682 * (x0 * x3425 + x0 * (x0 * x3426 + x3425) + x1119 * x21 + x1478)
    )
    result[5, 1, 5] = numpy.sum(
        x1677 * (x0 * x3427 + x0 * (x0 * x3428 + x3427) + x1130 * x21 + x1487)
    )
    result[5, 1, 6] = numpy.sum(
        x400 * (x0 * x3429 + x0 * (x0 * x3430 + x3429) + x1136 * x21 + x1492)
    )
    result[5, 1, 7] = numpy.sum(
        x1682 * (x0 * x3431 + x0 * (x0 * x3432 + x3431) + x1142 * x21 + x1497)
    )
    result[5, 1, 8] = numpy.sum(
        x1682 * (x0 * x3433 + x0 * (x0 * x3434 + x3433) + x1147 * x21 + x1502)
    )
    result[5, 1, 9] = numpy.sum(
        x400 * (x0 * x3435 + x0 * (x0 * x3436 + x3435) + x1155 * x21 + x1508)
    )
    result[5, 1, 10] = numpy.sum(
        x1666 * (x0 * x3437 + x0 * (x0 * x3438 + x3437) + x1161 * x21 + x1511)
    )
    result[5, 1, 11] = numpy.sum(
        x400 * (x0 * x3439 + x0 * (x0 * x3440 + x3439) + x1166 * x21 + x1514)
    )
    result[5, 1, 12] = numpy.sum(
        x1677 * (x0 * x3441 + x0 * (x0 * x3442 + x3441) + x1171 * x21 + x1517)
    )
    result[5, 1, 13] = numpy.sum(
        x400 * (x0 * x3443 + x0 * (x0 * x3444 + x3443) + x1176 * x21 + x1520)
    )
    result[5, 1, 14] = numpy.sum(
        x1666 * (x0 * x3445 + x0 * (x0 * x3446 + x3445) + x1181 * x21 + x1523)
    )
    result[5, 2, 0] = numpy.sum(x1666 * (x0 * x2458 + x0 * (x0 * x3448 + x2458) + x1556))
    result[5, 2, 1] = numpy.sum(x400 * (x0 * x2462 + x0 * (x0 * x3450 + x2462) + x1563))
    result[5, 2, 2] = numpy.sum(x400 * (x0 * x2466 + x0 * (x0 * x3452 + x2466) + x1574))
    result[5, 2, 3] = numpy.sum(x1677 * (x0 * x2471 + x0 * (x0 * x3454 + x2471) + x1578))
    result[5, 2, 4] = numpy.sum(x1682 * (x0 * x2476 + x0 * (x0 * x3456 + x2476) + x1582))
    result[5, 2, 5] = numpy.sum(x1677 * (x0 * x2482 + x0 * (x0 * x3458 + x2482) + x1589))
    result[5, 2, 6] = numpy.sum(x400 * (x0 * x2485 + x0 * (x0 * x3461 + x2485) + x1592))
    result[5, 2, 7] = numpy.sum(x1682 * (x0 * x2488 + x0 * (x0 * x3464 + x2488) + x1595))
    result[5, 2, 8] = numpy.sum(x1682 * (x0 * x2491 + x0 * (x0 * x3467 + x2491) + x1598))
    result[5, 2, 9] = numpy.sum(x400 * (x0 * x2495 + x0 * (x0 * x3471 + x2495) + x1603))
    result[5, 2, 10] = numpy.sum(x1666 * (x0 * x2498 + x0 * (x0 * x3473 + x2498) + x1606))
    result[5, 2, 11] = numpy.sum(x400 * (x0 * x2501 + x0 * (x0 * x3475 + x2501) + x1609))
    result[5, 2, 12] = numpy.sum(x1677 * (x0 * x2504 + x0 * (x0 * x3477 + x2504) + x1612))
    result[5, 2, 13] = numpy.sum(x400 * (x0 * x2507 + x0 * (x0 * x3479 + x2507) + x1615))
    result[5, 2, 14] = numpy.sum(x1666 * (x0 * x2510 + x0 * (x0 * x3481 + x2510) + x1618))
    result[5, 3, 0] = numpy.sum(x1666 * (x0 * x3483 + x21 * x3417 + x3484))
    result[5, 3, 1] = numpy.sum(x400 * (x0 * x3486 + x21 * x3419 + x3487))
    result[5, 3, 2] = numpy.sum(x400 * (x0 * x3489 + x21 * x3421 + x3490))
    result[5, 3, 3] = numpy.sum(x1677 * (x0 * x3492 + x21 * x3423 + x3493))
    result[5, 3, 4] = numpy.sum(x1682 * (x0 * x3495 + x21 * x3425 + x3496))
    result[5, 3, 5] = numpy.sum(x1677 * (x0 * x3498 + x21 * x3427 + x3499))
    result[5, 3, 6] = numpy.sum(x400 * (x0 * x3501 + x21 * x3429 + x3502))
    result[5, 3, 7] = numpy.sum(x1682 * (x0 * x3504 + x21 * x3431 + x3505))
    result[5, 3, 8] = numpy.sum(x1682 * (x0 * x3507 + x21 * x3433 + x3508))
    result[5, 3, 9] = numpy.sum(x400 * (x0 * x3510 + x21 * x3435 + x3511))
    result[5, 3, 10] = numpy.sum(x1666 * (x0 * x3513 + x21 * x3437 + x3514))
    result[5, 3, 11] = numpy.sum(x400 * (x0 * x3516 + x21 * x3439 + x3517))
    result[5, 3, 12] = numpy.sum(x1677 * (x0 * x3519 + x21 * x3441 + x3520))
    result[5, 3, 13] = numpy.sum(x400 * (x0 * x3522 + x21 * x3443 + x3523))
    result[5, 3, 14] = numpy.sum(x1666 * (x0 * x3525 + x21 * x3445 + x3526))
    result[5, 4, 0] = numpy.sum(x1816 * (x0 * x3527 + x21 * x2458 + x2205))
    result[5, 4, 1] = numpy.sum(x956 * (x0 * x3528 + x21 * x2462 + x2214))
    result[5, 4, 2] = numpy.sum(x956 * (x0 * x3529 + x21 * x2466 + x2223))
    result[5, 4, 3] = numpy.sum(x1682 * (x0 * x3530 + x21 * x2471 + x2231))
    result[5, 4, 4] = numpy.sum(x1836 * (x0 * x3531 + x21 * x2476 + x2239))
    result[5, 4, 5] = numpy.sum(x1682 * (x0 * x3532 + x21 * x2482 + x2247))
    result[5, 4, 6] = numpy.sum(x956 * (x0 * x3533 + x21 * x2485 + x2253))
    result[5, 4, 7] = numpy.sum(x1836 * (x0 * x3534 + x21 * x2488 + x2259))
    result[5, 4, 8] = numpy.sum(x1836 * (x0 * x3535 + x21 * x2491 + x2265))
    result[5, 4, 9] = numpy.sum(x956 * (x0 * x3536 + x21 * x2495 + x2271))
    result[5, 4, 10] = numpy.sum(x1816 * (x0 * x3537 + x21 * x2498 + x2274))
    result[5, 4, 11] = numpy.sum(x956 * (x0 * x3538 + x21 * x2501 + x2277))
    result[5, 4, 12] = numpy.sum(x1682 * (x0 * x3539 + x21 * x2504 + x2280))
    result[5, 4, 13] = numpy.sum(x956 * (x0 * x3540 + x21 * x2507 + x2283))
    result[5, 4, 14] = numpy.sum(x1816 * (x0 * x3541 + x21 * x2510 + x2286))
    result[5, 5, 0] = numpy.sum(x1666 * (x0 * x3544 + x2574))
    result[5, 5, 1] = numpy.sum(x400 * (x0 * x3547 + x2579))
    result[5, 5, 2] = numpy.sum(x400 * (x0 * x3550 + x2587))
    result[5, 5, 3] = numpy.sum(x1677 * (x0 * x3553 + x2591))
    result[5, 5, 4] = numpy.sum(x1682 * (x0 * x3557 + x2595))
    result[5, 5, 5] = numpy.sum(x1677 * (x0 * x3560 + x2602))
    result[5, 5, 6] = numpy.sum(x400 * (x0 * x3564 + x2604))
    result[5, 5, 7] = numpy.sum(x1682 * (x0 * x3568 + x2606))
    result[5, 5, 8] = numpy.sum(x1682 * (x0 * x3572 + x2608))
    result[5, 5, 9] = numpy.sum(x400 * (x0 * x3577 + x2612))
    result[5, 5, 10] = numpy.sum(x1666 * (x0 * x3580 + x2614))
    result[5, 5, 11] = numpy.sum(x400 * (x0 * x3583 + x2616))
    result[5, 5, 12] = numpy.sum(x1677 * (x0 * x3586 + x2618))
    result[5, 5, 13] = numpy.sum(x400 * (x0 * x3589 + x2620))
    result[5, 5, 14] = numpy.sum(x1666 * (x0 * x3592 + x2622))
    result[5, 6, 0] = numpy.sum(x325 * (x21 * x3483 + x3593))
    result[5, 6, 1] = numpy.sum(x189 * (x21 * x3486 + x3594))
    result[5, 6, 2] = numpy.sum(x189 * (x21 * x3489 + x3595))
    result[5, 6, 3] = numpy.sum(x380 * (x21 * x3492 + x3596))
    result[5, 6, 4] = numpy.sum(x400 * (x21 * x3495 + x3597))
    result[5, 6, 5] = numpy.sum(x380 * (x21 * x3498 + x3598))
    result[5, 6, 6] = numpy.sum(x189 * (x21 * x3501 + x3599))
    result[5, 6, 7] = numpy.sum(x400 * (x21 * x3504 + x3600))
    result[5, 6, 8] = numpy.sum(x400 * (x21 * x3507 + x3601))
    result[5, 6, 9] = numpy.sum(x189 * (x21 * x3510 + x3602))
    result[5, 6, 10] = numpy.sum(x325 * (x21 * x3513 + x3603))
    result[5, 6, 11] = numpy.sum(x189 * (x21 * x3516 + x3604))
    result[5, 6, 12] = numpy.sum(x380 * (x21 * x3519 + x3605))
    result[5, 6, 13] = numpy.sum(x189 * (x21 * x3522 + x3606))
    result[5, 6, 14] = numpy.sum(x325 * (x21 * x3525 + x3607))
    result[5, 7, 0] = numpy.sum(x1666 * (x21 * x3527 + x3608))
    result[5, 7, 1] = numpy.sum(x400 * (x21 * x3528 + x3609))
    result[5, 7, 2] = numpy.sum(x400 * (x21 * x3529 + x3610))
    result[5, 7, 3] = numpy.sum(x1677 * (x21 * x3530 + x3611))
    result[5, 7, 4] = numpy.sum(x1682 * (x21 * x3531 + x3612))
    result[5, 7, 5] = numpy.sum(x1677 * (x21 * x3532 + x3613))
    result[5, 7, 6] = numpy.sum(x400 * (x21 * x3533 + x3614))
    result[5, 7, 7] = numpy.sum(x1682 * (x21 * x3534 + x3615))
    result[5, 7, 8] = numpy.sum(x1682 * (x21 * x3535 + x3616))
    result[5, 7, 9] = numpy.sum(x400 * (x21 * x3536 + x3617))
    result[5, 7, 10] = numpy.sum(x1666 * (x21 * x3537 + x3618))
    result[5, 7, 11] = numpy.sum(x400 * (x21 * x3538 + x3619))
    result[5, 7, 12] = numpy.sum(x1677 * (x21 * x3539 + x3620))
    result[5, 7, 13] = numpy.sum(x400 * (x21 * x3540 + x3621))
    result[5, 7, 14] = numpy.sum(x1666 * (x21 * x3541 + x3622))
    result[5, 8, 0] = numpy.sum(x1666 * (x21 * x3544 + x3332))
    result[5, 8, 1] = numpy.sum(x400 * (x21 * x3547 + x3336))
    result[5, 8, 2] = numpy.sum(x400 * (x21 * x3550 + x3340))
    result[5, 8, 3] = numpy.sum(x1677 * (x21 * x3553 + x3344))
    result[5, 8, 4] = numpy.sum(x1682 * (x21 * x3557 + x3348))
    result[5, 8, 5] = numpy.sum(x1677 * (x21 * x3560 + x3352))
    result[5, 8, 6] = numpy.sum(x400 * (x21 * x3564 + x3356))
    result[5, 8, 7] = numpy.sum(x1682 * (x21 * x3568 + x3360))
    result[5, 8, 8] = numpy.sum(x1682 * (x21 * x3572 + x3364))
    result[5, 8, 9] = numpy.sum(x400 * (x21 * x3577 + x3368))
    result[5, 8, 10] = numpy.sum(x1666 * (x21 * x3580 + x3370))
    result[5, 8, 11] = numpy.sum(x400 * (x21 * x3583 + x3372))
    result[5, 8, 12] = numpy.sum(x1677 * (x21 * x3586 + x3374))
    result[5, 8, 13] = numpy.sum(x400 * (x21 * x3589 + x3376))
    result[5, 8, 14] = numpy.sum(x1666 * (x21 * x3592 + x3378))
    result[5, 9, 0] = numpy.sum(x325 * (x22 * x3544 + x3628))
    result[5, 9, 1] = numpy.sum(x189 * (x22 * x3547 + x3630))
    result[5, 9, 2] = numpy.sum(x189 * (x22 * x3550 + x3634))
    result[5, 9, 3] = numpy.sum(x380 * (x22 * x3553 + x3636))
    result[5, 9, 4] = numpy.sum(x400 * (x22 * x3557 + x3638))
    result[5, 9, 5] = numpy.sum(x380 * (x22 * x3560 + x3642))
    result[5, 9, 6] = numpy.sum(x189 * (x22 * x3564 + x3644))
    result[5, 9, 7] = numpy.sum(x400 * (x22 * x3568 + x3646))
    result[5, 9, 8] = numpy.sum(x400 * (x22 * x3572 + x3648))
    result[5, 9, 9] = numpy.sum(x189 * (x22 * x3577 + x3652))
    result[5, 9, 10] = numpy.sum(x325 * (x22 * x3580 + x3653))
    result[5, 9, 11] = numpy.sum(x189 * (x22 * x3583 + x3654))
    result[5, 9, 12] = numpy.sum(x380 * (x22 * x3586 + x3655))
    result[5, 9, 13] = numpy.sum(x189 * (x22 * x3589 + x3656))
    result[5, 9, 14] = numpy.sum(x325 * (x22 * x3592 + x3657))
    result[6, 0, 0] = numpy.sum(
        x140
        * (x0 * x1756 + x0 * x3658 + x0 * (x0 * (x2663 + x3659 * x3660) + x3658) + x1215)
    )
    result[6, 0, 1] = numpy.sum(
        x155
        * (x0 * x1760 + x0 * x3661 + x0 * (x0 * (x0 * x3663 + x2665) + x3661) + x1232)
    )
    result[6, 0, 2] = numpy.sum(
        x155
        * (x0 * x1764 + x0 * x3664 + x0 * (x0 * (x2667 + x3660 * x3665) + x3664) + x1239)
    )
    result[6, 0, 3] = numpy.sum(
        x178
        * (x0 * x1769 + x0 * x3666 + x0 * (x0 * (x1767 * x3667 + x2669) + x3666) + x1246)
    )
    result[6, 0, 4] = numpy.sum(
        x189
        * (x0 * x1774 + x0 * x3668 + x0 * (x0 * (x1772 * x3667 + x2671) + x3668) + x1253)
    )
    result[6, 0, 5] = numpy.sum(
        x178
        * (x0 * x1779 + x0 * x3669 + x0 * (x0 * (x2673 + x3670 * x3671) + x3669) + x1257)
    )
    result[6, 0, 6] = numpy.sum(
        x155
        * (x0 * x1783 + x0 * x3672 + x0 * (x0 * (x2675 * x3673 + x2676) + x3672) + x1262)
    )
    result[6, 0, 7] = numpy.sum(
        x189
        * (x0 * x1787 + x0 * x3674 + x0 * (x0 * (x2678 * x3673 + x2679) + x3674) + x1267)
    )
    result[6, 0, 8] = numpy.sum(
        x189
        * (x0 * x1791 + x0 * x3675 + x0 * (x0 * (x2681 * x3673 + x2682) + x3675) + x1272)
    )
    result[6, 0, 9] = numpy.sum(
        x155
        * (x0 * x1794 + x0 * x3676 + x0 * (x0 * (x2685 + x3671 * x3677) + x3676) + x1275)
    )
    result[6, 0, 10] = numpy.sum(
        x140
        * (x0 * x1797 + x0 * x3678 + x0 * (x0 * (x127 * x3679 + x2687) + x3678) + x1278)
    )
    result[6, 0, 11] = numpy.sum(
        x155
        * (x0 * x1800 + x0 * x3680 + x0 * (x0 * (x127 * x3681 + x2689) + x3680) + x1281)
    )
    result[6, 0, 12] = numpy.sum(
        x178
        * (x0 * x1803 + x0 * x3682 + x0 * (x0 * (x127 * x3683 + x2691) + x3682) + x1284)
    )
    result[6, 0, 13] = numpy.sum(
        x155
        * (x0 * x1806 + x0 * x3684 + x0 * (x0 * (x127 * x3685 + x2693) + x3684) + x1287)
    )
    result[6, 0, 14] = numpy.sum(
        x140
        * (x0 * x1809 + x0 * x3686 + x0 * (x0 * (x245 * x3660 + x2695) + x3686) + x1290)
    )
    result[6, 1, 0] = numpy.sum(x325 * (x0 * x2733 + x0 * (x0 * x3689 + x2733) + x1953))
    result[6, 1, 1] = numpy.sum(x189 * (x0 * x2736 + x0 * (x0 * x3691 + x2736) + x1966))
    result[6, 1, 2] = numpy.sum(x189 * (x0 * x2739 + x0 * (x0 * x3693 + x2739) + x1971))
    result[6, 1, 3] = numpy.sum(x380 * (x0 * x2742 + x0 * (x0 * x3696 + x2742) + x1977))
    result[6, 1, 4] = numpy.sum(x400 * (x0 * x2745 + x0 * (x0 * x3698 + x2745) + x1983))
    result[6, 1, 5] = numpy.sum(x380 * (x0 * x2748 + x0 * (x0 * x3702 + x2748) + x1987))
    result[6, 1, 6] = numpy.sum(x189 * (x0 * x2752 + x0 * (x0 * x3705 + x2752) + x1991))
    result[6, 1, 7] = numpy.sum(x400 * (x0 * x2756 + x0 * (x0 * x3707 + x2756) + x1995))
    result[6, 1, 8] = numpy.sum(x400 * (x0 * x2760 + x0 * (x0 * x3709 + x2760) + x1999))
    result[6, 1, 9] = numpy.sum(x189 * (x0 * x2764 + x0 * (x0 * x3711 + x2764) + x2001))
    result[6, 1, 10] = numpy.sum(x325 * (x0 * x2767 + x0 * (x0 * x3713 + x2767) + x2003))
    result[6, 1, 11] = numpy.sum(x189 * (x0 * x2770 + x0 * (x0 * x3715 + x2770) + x2005))
    result[6, 1, 12] = numpy.sum(x380 * (x0 * x2773 + x0 * (x0 * x3717 + x2773) + x2007))
    result[6, 1, 13] = numpy.sum(x189 * (x0 * x2776 + x0 * (x0 * x3719 + x2776) + x2009))
    result[6, 1, 14] = numpy.sum(x325 * (x0 * x2779 + x0 * (x0 * x3721 + x2779) + x2011))
    result[6, 2, 0] = numpy.sum(x325 * (x0 * x2782 + x0 * (x0 * x3724 + x2782) + x2027))
    result[6, 2, 1] = numpy.sum(x189 * (x0 * x2785 + x0 * (x0 * x3726 + x2785) + x2035))
    result[6, 2, 2] = numpy.sum(x189 * (x0 * x2788 + x0 * (x0 * x3728 + x2788) + x2044))
    result[6, 2, 3] = numpy.sum(x380 * (x0 * x2791 + x0 * (x0 * x3731 + x2791) + x2051))
    result[6, 2, 4] = numpy.sum(x400 * (x0 * x2794 + x0 * (x0 * x3733 + x2794) + x2058))
    result[6, 2, 5] = numpy.sum(x380 * (x0 * x2797 + x0 * (x0 * x3736 + x2797) + x2066))
    result[6, 2, 6] = numpy.sum(x189 * (x0 * x2801 + x0 * (x0 * x3739 + x2801) + x2071))
    result[6, 2, 7] = numpy.sum(x400 * (x0 * x2805 + x0 * (x0 * x3741 + x2805) + x2076))
    result[6, 2, 8] = numpy.sum(x400 * (x0 * x2809 + x0 * (x0 * x3743 + x2809) + x2081))
    result[6, 2, 9] = numpy.sum(x189 * (x0 * x2813 + x0 * (x0 * x3745 + x2813) + x2087))
    result[6, 2, 10] = numpy.sum(x325 * (x0 * x2816 + x0 * (x0 * x3747 + x2816) + x2090))
    result[6, 2, 11] = numpy.sum(x189 * (x0 * x2819 + x0 * (x0 * x3749 + x2819) + x2093))
    result[6, 2, 12] = numpy.sum(x380 * (x0 * x2822 + x0 * (x0 * x3751 + x2822) + x2096))
    result[6, 2, 13] = numpy.sum(x189 * (x0 * x2825 + x0 * (x0 * x3753 + x2825) + x2099))
    result[6, 2, 14] = numpy.sum(x325 * (x0 * x2828 + x0 * (x0 * x3755 + x2828) + x2102))
    result[6, 3, 0] = numpy.sum(x325 * (x0 * x3758 + x2884))
    result[6, 3, 1] = numpy.sum(x189 * (x0 * x3761 + x2892))
    result[6, 3, 2] = numpy.sum(x189 * (x0 * x3764 + x2894))
    result[6, 3, 3] = numpy.sum(x380 * (x0 * x3767 + x2898))
    result[6, 3, 4] = numpy.sum(x400 * (x0 * x3770 + x2902))
    result[6, 3, 5] = numpy.sum(x380 * (x0 * x3774 + x2904))
    result[6, 3, 6] = numpy.sum(x189 * (x0 * x3777 + x2908))
    result[6, 3, 7] = numpy.sum(x400 * (x0 * x3780 + x2912))
    result[6, 3, 8] = numpy.sum(x400 * (x0 * x3783 + x2916))
    result[6, 3, 9] = numpy.sum(x189 * (x0 * x3786 + x2918))
    result[6, 3, 10] = numpy.sum(x325 * (x0 * x3789 + x2919))
    result[6, 3, 11] = numpy.sum(x189 * (x0 * x3792 + x2920))
    result[6, 3, 12] = numpy.sum(x380 * (x0 * x3795 + x2921))
    result[6, 3, 13] = numpy.sum(x189 * (x0 * x3798 + x2922))
    result[6, 3, 14] = numpy.sum(x325 * (x0 * x3801 + x2923))
    result[6, 4, 0] = numpy.sum(x898 * (x0 * x3804 + x2929))
    result[6, 4, 1] = numpy.sum(x915 * (x0 * x3807 + x2933))
    result[6, 4, 2] = numpy.sum(x915 * (x0 * x3810 + x2937))
    result[6, 4, 3] = numpy.sum(x400 * (x0 * x3813 + x2941))
    result[6, 4, 4] = numpy.sum(x956 * (x0 * x3816 + x2945))
    result[6, 4, 5] = numpy.sum(x400 * (x0 * x3819 + x2949))
    result[6, 4, 6] = numpy.sum(x915 * (x0 * x3822 + x2953))
    result[6, 4, 7] = numpy.sum(x956 * (x0 * x3825 + x2957))
    result[6, 4, 8] = numpy.sum(x956 * (x0 * x3828 + x2961))
    result[6, 4, 9] = numpy.sum(x915 * (x0 * x3831 + x2965))
    result[6, 4, 10] = numpy.sum(x898 * (x0 * x3834 + x2967))
    result[6, 4, 11] = numpy.sum(x915 * (x0 * x3837 + x2969))
    result[6, 4, 12] = numpy.sum(x400 * (x0 * x3840 + x2971))
    result[6, 4, 13] = numpy.sum(x915 * (x0 * x3843 + x2973))
    result[6, 4, 14] = numpy.sum(x898 * (x0 * x3846 + x2975))
    result[6, 5, 0] = numpy.sum(x325 * (x0 * x3849 + x2982))
    result[6, 5, 1] = numpy.sum(x189 * (x0 * x3852 + x2989))
    result[6, 5, 2] = numpy.sum(x189 * (x0 * x3855 + x2994))
    result[6, 5, 3] = numpy.sum(x380 * (x0 * x3858 + x2999))
    result[6, 5, 4] = numpy.sum(x400 * (x0 * x3861 + x3006))
    result[6, 5, 5] = numpy.sum(x380 * (x0 * x3864 + x3011))
    result[6, 5, 6] = numpy.sum(x189 * (x0 * x3867 + x3016))
    result[6, 5, 7] = numpy.sum(x400 * (x0 * x3870 + x3021))
    result[6, 5, 8] = numpy.sum(x400 * (x0 * x3873 + x3028))
    result[6, 5, 9] = numpy.sum(x189 * (x0 * x3876 + x3033))
    result[6, 5, 10] = numpy.sum(x325 * (x0 * x3879 + x3036))
    result[6, 5, 11] = numpy.sum(x189 * (x0 * x3882 + x3039))
    result[6, 5, 12] = numpy.sum(x380 * (x0 * x3885 + x3042))
    result[6, 5, 13] = numpy.sum(x189 * (x0 * x3889 + x3046))
    result[6, 5, 14] = numpy.sum(x325 * (x0 * x3892 + x3049))
    result[6, 6, 0] = numpy.sum(
        x140 * (x21 * x3756 + x21 * x3757 + x21 * x3758 + x3659 * x3893)
    )
    result[6, 6, 1] = numpy.sum(
        x155 * (x21 * x3759 + x21 * x3760 + x21 * x3761 + x3662 * x3896)
    )
    result[6, 6, 2] = numpy.sum(
        x155 * (x21 * x3762 + x21 * x3763 + x21 * x3764 + x3665 * x3893)
    )
    result[6, 6, 3] = numpy.sum(
        x178 * (x21 * x3765 + x21 * x3766 + x21 * x3767 + x2628 * x3897)
    )
    result[6, 6, 4] = numpy.sum(
        x189 * (x21 * x3768 + x21 * x3769 + x21 * x3770 + x2628 * x3898)
    )
    result[6, 6, 5] = numpy.sum(
        x178 * (x21 * x3772 + x21 * x3773 + x21 * x3774 + x3670 * x3899)
    )
    result[6, 6, 6] = numpy.sum(
        x155 * (x1624 * x3900 + x21 * x3775 + x21 * x3776 + x21 * x3777)
    )
    result[6, 6, 7] = numpy.sum(
        x189 * (x1624 * x3901 + x21 * x3778 + x21 * x3779 + x21 * x3780)
    )
    result[6, 6, 8] = numpy.sum(
        x189 * (x1624 * x3902 + x21 * x3781 + x21 * x3782 + x21 * x3783)
    )
    result[6, 6, 9] = numpy.sum(
        x155 * (x21 * x3784 + x21 * x3785 + x21 * x3786 + x3677 * x3899)
    )
    result[6, 6, 10] = numpy.sum(
        x140
        * (x21 * x3787 + x21 * x3788 + x21 * x3789 + x92 * (x141 * x3900 + 6.0 * x2906))
    )
    result[6, 6, 11] = numpy.sum(
        x155
        * (x21 * x3790 + x21 * x3791 + x21 * x3792 + x92 * (x141 * x3901 + 6.0 * x2910))
    )
    result[6, 6, 12] = numpy.sum(
        x178
        * (x21 * x3793 + x21 * x3794 + x21 * x3795 + x92 * (x141 * x3902 + 6.0 * x2914))
    )
    result[6, 6, 13] = numpy.sum(
        x155 * (x21 * x3796 + x21 * x3797 + x21 * x3798 + x218 * x92 * (x3894 + x3895))
    )
    result[6, 6, 14] = numpy.sum(
        x140 * (x21 * x3799 + x21 * x3800 + x21 * x3801 + x245 * x3893)
    )
    result[6, 7, 0] = numpy.sum(x325 * (x21 * x3803 + x21 * x3804 + x22 * x3756 + x3904))
    result[6, 7, 1] = numpy.sum(x189 * (x21 * x3806 + x21 * x3807 + x22 * x3759 + x3906))
    result[6, 7, 2] = numpy.sum(x189 * (x21 * x3809 + x21 * x3810 + x22 * x3762 + x3908))
    result[6, 7, 3] = numpy.sum(x380 * (x21 * x3812 + x21 * x3813 + x22 * x3765 + x3910))
    result[6, 7, 4] = numpy.sum(x400 * (x21 * x3815 + x21 * x3816 + x22 * x3768 + x3912))
    result[6, 7, 5] = numpy.sum(x380 * (x21 * x3818 + x21 * x3819 + x22 * x3772 + x3914))
    result[6, 7, 6] = numpy.sum(x189 * (x21 * x3821 + x21 * x3822 + x22 * x3775 + x3916))
    result[6, 7, 7] = numpy.sum(x400 * (x21 * x3824 + x21 * x3825 + x22 * x3778 + x3918))
    result[6, 7, 8] = numpy.sum(x400 * (x21 * x3827 + x21 * x3828 + x22 * x3781 + x3920))
    result[6, 7, 9] = numpy.sum(x189 * (x21 * x3830 + x21 * x3831 + x22 * x3784 + x3922))
    result[6, 7, 10] = numpy.sum(x325 * (x21 * x3833 + x21 * x3834 + x22 * x3787 + x3923))
    result[6, 7, 11] = numpy.sum(x189 * (x21 * x3836 + x21 * x3837 + x22 * x3790 + x3924))
    result[6, 7, 12] = numpy.sum(x380 * (x21 * x3839 + x21 * x3840 + x22 * x3793 + x3925))
    result[6, 7, 13] = numpy.sum(x189 * (x21 * x3842 + x21 * x3843 + x22 * x3796 + x3926))
    result[6, 7, 14] = numpy.sum(x325 * (x21 * x3845 + x21 * x3846 + x22 * x3799 + x3927))
    result[6, 8, 0] = numpy.sum(x325 * (x21 * x3849 + x22 * x3803 + x3930))
    result[6, 8, 1] = numpy.sum(x189 * (x21 * x3852 + x22 * x3806 + x3933))
    result[6, 8, 2] = numpy.sum(x189 * (x21 * x3855 + x22 * x3809 + x3936))
    result[6, 8, 3] = numpy.sum(x380 * (x21 * x3858 + x22 * x3812 + x3939))
    result[6, 8, 4] = numpy.sum(x400 * (x21 * x3861 + x22 * x3815 + x3942))
    result[6, 8, 5] = numpy.sum(x380 * (x21 * x3864 + x22 * x3818 + x3945))
    result[6, 8, 6] = numpy.sum(x189 * (x21 * x3867 + x22 * x3821 + x3948))
    result[6, 8, 7] = numpy.sum(x400 * (x21 * x3870 + x22 * x3824 + x3951))
    result[6, 8, 8] = numpy.sum(x400 * (x21 * x3873 + x22 * x3827 + x3954))
    result[6, 8, 9] = numpy.sum(x189 * (x21 * x3876 + x22 * x3830 + x3957))
    result[6, 8, 10] = numpy.sum(x325 * (x21 * x3879 + x22 * x3833 + x3959))
    result[6, 8, 11] = numpy.sum(x189 * (x21 * x3882 + x22 * x3836 + x3961))
    result[6, 8, 12] = numpy.sum(x380 * (x21 * x3885 + x22 * x3839 + x3963))
    result[6, 8, 13] = numpy.sum(x189 * (x21 * x3889 + x22 * x3842 + x3965))
    result[6, 8, 14] = numpy.sum(x325 * (x21 * x3892 + x22 * x3845 + x3967))
    result[6, 9, 0] = numpy.sum(x140 * (x22 * x3849 + x3971))
    result[6, 9, 1] = numpy.sum(x155 * (x22 * x3852 + x3975))
    result[6, 9, 2] = numpy.sum(x155 * (x22 * x3855 + x3979))
    result[6, 9, 3] = numpy.sum(x178 * (x22 * x3858 + x3983))
    result[6, 9, 4] = numpy.sum(x189 * (x22 * x3861 + x3987))
    result[6, 9, 5] = numpy.sum(x178 * (x22 * x3864 + x3991))
    result[6, 9, 6] = numpy.sum(x155 * (x22 * x3867 + x3995))
    result[6, 9, 7] = numpy.sum(x189 * (x22 * x3870 + x3999))
    result[6, 9, 8] = numpy.sum(x189 * (x22 * x3873 + x4003))
    result[6, 9, 9] = numpy.sum(x155 * (x22 * x3876 + x4007))
    result[6, 9, 10] = numpy.sum(x140 * (x22 * x3879 + x4010))
    result[6, 9, 11] = numpy.sum(x155 * (x22 * x3882 + x4013))
    result[6, 9, 12] = numpy.sum(x178 * (x22 * x3885 + x4016))
    result[6, 9, 13] = numpy.sum(x155 * (x22 * x3889 + x4019))
    result[6, 9, 14] = numpy.sum(x140 * (x22 * x3892 + x4022))
    result[7, 0, 0] = numpy.sum(
        x325
        * (x0 * x1813 + x0 * x4023 + x0 * (x0 * (x0 * x4024 + x2697) + x4023) + x1317)
    )
    result[7, 0, 1] = numpy.sum(
        x189
        * (x0 * x1818 + x0 * x4025 + x0 * (x0 * (x1328 * x4026 + x2699) + x4025) + x1331)
    )
    result[7, 0, 2] = numpy.sum(
        x189
        * (x0 * x1822 + x0 * x4027 + x0 * (x0 * (x1340 * x4026 + x2701) + x4027) + x1343)
    )
    result[7, 0, 3] = numpy.sum(
        x380
        * (x0 * x1827 + x0 * x4028 + x0 * (x0 * (x1825 * x3667 + x2703) + x4028) + x1351)
    )
    result[7, 0, 4] = numpy.sum(
        x400
        * (x0 * x1833 + x0 * x4029 + x0 * (x0 * (x1831 * x3667 + x2705) + x4029) + x1361)
    )
    result[7, 0, 5] = numpy.sum(
        x380
        * (x0 * x1839 + x0 * x4030 + x0 * (x0 * (x1837 * x3667 + x2707) + x4030) + x1370)
    )
    result[7, 0, 6] = numpy.sum(
        x189
        * (x0 * x1843 + x0 * x4031 + x0 * (x0 * (x2709 * x3673 + x2710) + x4031) + x1376)
    )
    result[7, 0, 7] = numpy.sum(
        x400
        * (x0 * x1847 + x0 * x4032 + x0 * (x0 * (x2712 * x3673 + x2713) + x4032) + x1382)
    )
    result[7, 0, 8] = numpy.sum(
        x400
        * (x0 * x1851 + x0 * x4033 + x0 * (x0 * (x2716 * x3673 + x2717) + x4033) + x1390)
    )
    result[7, 0, 9] = numpy.sum(
        x189
        * (x0 * x1856 + x0 * x4034 + x0 * (x0 * (x2719 * x3673 + x2720) + x4034) + x1396)
    )
    result[7, 0, 10] = numpy.sum(
        x325
        * (x0 * x1859 + x0 * x4035 + x0 * (x0 * (x127 * x4036 + x2722) + x4035) + x1399)
    )
    result[7, 0, 11] = numpy.sum(
        x189
        * (x0 * x1862 + x0 * x4037 + x0 * (x0 * (x127 * x4038 + x2724) + x4037) + x1402)
    )
    result[7, 0, 12] = numpy.sum(
        x380
        * (x0 * x1865 + x0 * x4039 + x0 * (x0 * (x127 * x4040 + x2726) + x4039) + x1405)
    )
    result[7, 0, 13] = numpy.sum(
        x189
        * (x0 * x1869 + x0 * x4041 + x0 * (x0 * (x127 * x4043 + x2728) + x4041) + x1409)
    )
    result[7, 0, 14] = numpy.sum(
        x325
        * (x0 * x1872 + x0 * x4044 + x0 * (x0 * (x127 * x4045 + x2730) + x4044) + x1412)
    )
    result[7, 1, 0] = numpy.sum(x1666 * (x0 * x3200 + x0 * (x0 * x4046 + x3200) + x2512))
    result[7, 1, 1] = numpy.sum(x400 * (x0 * x3202 + x0 * (x0 * x4048 + x3202) + x2514))
    result[7, 1, 2] = numpy.sum(x400 * (x0 * x3204 + x0 * (x0 * x4049 + x3204) + x2516))
    result[7, 1, 3] = numpy.sum(x1677 * (x0 * x3206 + x0 * (x0 * x4050 + x3206) + x2518))
    result[7, 1, 4] = numpy.sum(x1682 * (x0 * x3208 + x0 * (x0 * x4051 + x3208) + x2520))
    result[7, 1, 5] = numpy.sum(x1677 * (x0 * x3210 + x0 * (x0 * x4052 + x3210) + x2522))
    result[7, 1, 6] = numpy.sum(x400 * (x0 * x3212 + x0 * (x0 * x4053 + x3212) + x2524))
    result[7, 1, 7] = numpy.sum(x1682 * (x0 * x3214 + x0 * (x0 * x4054 + x3214) + x2526))
    result[7, 1, 8] = numpy.sum(x1682 * (x0 * x3216 + x0 * (x0 * x4055 + x3216) + x2528))
    result[7, 1, 9] = numpy.sum(x400 * (x0 * x3218 + x0 * (x0 * x4056 + x3218) + x2530))
    result[7, 1, 10] = numpy.sum(x1666 * (x0 * x3220 + x0 * (x0 * x4057 + x3220) + x2532))
    result[7, 1, 11] = numpy.sum(x400 * (x0 * x3222 + x0 * (x0 * x4058 + x3222) + x2534))
    result[7, 1, 12] = numpy.sum(x1677 * (x0 * x3224 + x0 * (x0 * x4059 + x3224) + x2536))
    result[7, 1, 13] = numpy.sum(x400 * (x0 * x3226 + x0 * (x0 * x4060 + x3226) + x2538))
    result[7, 1, 14] = numpy.sum(x1666 * (x0 * x3228 + x0 * (x0 * x4061 + x3228) + x2540))
    result[7, 2, 0] = numpy.sum(x1666 * (x0 * x2831 + x0 * (x0 * x4063 + x2831) + x2117))
    result[7, 2, 1] = numpy.sum(x400 * (x0 * x2834 + x0 * (x0 * x4066 + x2834) + x2125))
    result[7, 2, 2] = numpy.sum(x400 * (x0 * x2837 + x0 * (x0 * x4068 + x2837) + x2133))
    result[7, 2, 3] = numpy.sum(x1677 * (x0 * x2840 + x0 * (x0 * x4070 + x2840) + x2140))
    result[7, 2, 4] = numpy.sum(x1682 * (x0 * x2843 + x0 * (x0 * x4072 + x2843) + x2147))
    result[7, 2, 5] = numpy.sum(x1677 * (x0 * x2846 + x0 * (x0 * x4074 + x2846) + x2154))
    result[7, 2, 6] = numpy.sum(x400 * (x0 * x2850 + x0 * (x0 * x4076 + x2850) + x2159))
    result[7, 2, 7] = numpy.sum(x1682 * (x0 * x2854 + x0 * (x0 * x4078 + x2854) + x2164))
    result[7, 2, 8] = numpy.sum(x1682 * (x0 * x2858 + x0 * (x0 * x4080 + x2858) + x2169))
    result[7, 2, 9] = numpy.sum(x400 * (x0 * x2862 + x0 * (x0 * x4082 + x2862) + x2174))
    result[7, 2, 10] = numpy.sum(x1666 * (x0 * x2865 + x0 * (x0 * x4084 + x2865) + x2177))
    result[7, 2, 11] = numpy.sum(x400 * (x0 * x2868 + x0 * (x0 * x4086 + x2868) + x2180))
    result[7, 2, 12] = numpy.sum(x1677 * (x0 * x2871 + x0 * (x0 * x4088 + x2871) + x2183))
    result[7, 2, 13] = numpy.sum(x400 * (x0 * x2874 + x0 * (x0 * x4090 + x2874) + x2186))
    result[7, 2, 14] = numpy.sum(x1666 * (x0 * x2877 + x0 * (x0 * x4092 + x2877) + x2189))
    result[7, 3, 0] = numpy.sum(x1666 * (x0 * x4094 + x3297))
    result[7, 3, 1] = numpy.sum(x400 * (x0 * x4096 + x3298))
    result[7, 3, 2] = numpy.sum(x400 * (x0 * x4098 + x3299))
    result[7, 3, 3] = numpy.sum(x1677 * (x0 * x4100 + x3300))
    result[7, 3, 4] = numpy.sum(x1682 * (x0 * x4102 + x3301))
    result[7, 3, 5] = numpy.sum(x1677 * (x0 * x4104 + x3302))
    result[7, 3, 6] = numpy.sum(x400 * (x0 * x4106 + x3303))
    result[7, 3, 7] = numpy.sum(x1682 * (x0 * x4108 + x3304))
    result[7, 3, 8] = numpy.sum(x1682 * (x0 * x4110 + x3305))
    result[7, 3, 9] = numpy.sum(x400 * (x0 * x4112 + x3306))
    result[7, 3, 10] = numpy.sum(x1666 * (x0 * x4114 + x3307))
    result[7, 3, 11] = numpy.sum(x400 * (x0 * x4116 + x3308))
    result[7, 3, 12] = numpy.sum(x1677 * (x0 * x4118 + x3309))
    result[7, 3, 13] = numpy.sum(x400 * (x0 * x4120 + x3310))
    result[7, 3, 14] = numpy.sum(x1666 * (x0 * x4122 + x3311))
    result[7, 4, 0] = numpy.sum(x1816 * (x0 * x4123 + x3312))
    result[7, 4, 1] = numpy.sum(x956 * (x0 * x4124 + x3313))
    result[7, 4, 2] = numpy.sum(x956 * (x0 * x4125 + x3314))
    result[7, 4, 3] = numpy.sum(x1682 * (x0 * x4126 + x3315))
    result[7, 4, 4] = numpy.sum(x1836 * (x0 * x4127 + x3316))
    result[7, 4, 5] = numpy.sum(x1682 * (x0 * x4128 + x3317))
    result[7, 4, 6] = numpy.sum(x956 * (x0 * x4129 + x3318))
    result[7, 4, 7] = numpy.sum(x1836 * (x0 * x4130 + x3319))
    result[7, 4, 8] = numpy.sum(x1836 * (x0 * x4131 + x3320))
    result[7, 4, 9] = numpy.sum(x956 * (x0 * x4132 + x3321))
    result[7, 4, 10] = numpy.sum(x1816 * (x0 * x4133 + x3322))
    result[7, 4, 11] = numpy.sum(x956 * (x0 * x4134 + x3323))
    result[7, 4, 12] = numpy.sum(x1682 * (x0 * x4135 + x3324))
    result[7, 4, 13] = numpy.sum(x956 * (x0 * x4136 + x3325))
    result[7, 4, 14] = numpy.sum(x1816 * (x0 * x4137 + x3326))
    result[7, 5, 0] = numpy.sum(x1666 * (x0 * x4140 + x3056))
    result[7, 5, 1] = numpy.sum(x400 * (x0 * x4143 + x3061))
    result[7, 5, 2] = numpy.sum(x400 * (x0 * x4146 + x3066))
    result[7, 5, 3] = numpy.sum(x1677 * (x0 * x4149 + x3071))
    result[7, 5, 4] = numpy.sum(x1682 * (x0 * x4152 + x3076))
    result[7, 5, 5] = numpy.sum(x1677 * (x0 * x4155 + x3081))
    result[7, 5, 6] = numpy.sum(x400 * (x0 * x4158 + x3086))
    result[7, 5, 7] = numpy.sum(x1682 * (x0 * x4161 + x3091))
    result[7, 5, 8] = numpy.sum(x1682 * (x0 * x4164 + x3096))
    result[7, 5, 9] = numpy.sum(x400 * (x0 * x4167 + x3101))
    result[7, 5, 10] = numpy.sum(x1666 * (x0 * x4170 + x3104))
    result[7, 5, 11] = numpy.sum(x400 * (x0 * x4173 + x3107))
    result[7, 5, 12] = numpy.sum(x1677 * (x0 * x4176 + x3110))
    result[7, 5, 13] = numpy.sum(x400 * (x0 * x4179 + x3113))
    result[7, 5, 14] = numpy.sum(x1666 * (x0 * x4182 + x3116))
    result[7, 6, 0] = numpy.sum(x325 * (x21 * x3802 + x21 * x4093 + x21 * x4094 + x3904))
    result[7, 6, 1] = numpy.sum(x189 * (x21 * x3805 + x21 * x4095 + x21 * x4096 + x3906))
    result[7, 6, 2] = numpy.sum(x189 * (x21 * x3808 + x21 * x4097 + x21 * x4098 + x3908))
    result[7, 6, 3] = numpy.sum(x380 * (x21 * x3811 + x21 * x4099 + x21 * x4100 + x3910))
    result[7, 6, 4] = numpy.sum(x400 * (x21 * x3814 + x21 * x4101 + x21 * x4102 + x3912))
    result[7, 6, 5] = numpy.sum(x380 * (x21 * x3817 + x21 * x4103 + x21 * x4104 + x3914))
    result[7, 6, 6] = numpy.sum(x189 * (x21 * x3820 + x21 * x4105 + x21 * x4106 + x3916))
    result[7, 6, 7] = numpy.sum(x400 * (x21 * x3823 + x21 * x4107 + x21 * x4108 + x3918))
    result[7, 6, 8] = numpy.sum(x400 * (x21 * x3826 + x21 * x4109 + x21 * x4110 + x3920))
    result[7, 6, 9] = numpy.sum(x189 * (x21 * x3829 + x21 * x4111 + x21 * x4112 + x3922))
    result[7, 6, 10] = numpy.sum(x325 * (x21 * x3832 + x21 * x4113 + x21 * x4114 + x3923))
    result[7, 6, 11] = numpy.sum(x189 * (x21 * x3835 + x21 * x4115 + x21 * x4116 + x3924))
    result[7, 6, 12] = numpy.sum(x380 * (x21 * x3838 + x21 * x4117 + x21 * x4118 + x3925))
    result[7, 6, 13] = numpy.sum(x189 * (x21 * x3841 + x21 * x4119 + x21 * x4120 + x3926))
    result[7, 6, 14] = numpy.sum(x325 * (x21 * x3844 + x21 * x4121 + x21 * x4122 + x3927))
    result[7, 7, 0] = numpy.sum(x1666 * (x21 * x3848 + x21 * x4123 + x3930))
    result[7, 7, 1] = numpy.sum(x400 * (x21 * x3851 + x21 * x4124 + x3933))
    result[7, 7, 2] = numpy.sum(x400 * (x21 * x3854 + x21 * x4125 + x3936))
    result[7, 7, 3] = numpy.sum(x1677 * (x21 * x3857 + x21 * x4126 + x3939))
    result[7, 7, 4] = numpy.sum(x1682 * (x21 * x3860 + x21 * x4127 + x3942))
    result[7, 7, 5] = numpy.sum(x1677 * (x21 * x3863 + x21 * x4128 + x3945))
    result[7, 7, 6] = numpy.sum(x400 * (x21 * x3866 + x21 * x4129 + x3948))
    result[7, 7, 7] = numpy.sum(x1682 * (x21 * x3869 + x21 * x4130 + x3951))
    result[7, 7, 8] = numpy.sum(x1682 * (x21 * x3872 + x21 * x4131 + x3954))
    result[7, 7, 9] = numpy.sum(x400 * (x21 * x3875 + x21 * x4132 + x3957))
    result[7, 7, 10] = numpy.sum(x1666 * (x21 * x3878 + x21 * x4133 + x3959))
    result[7, 7, 11] = numpy.sum(x400 * (x21 * x3881 + x21 * x4134 + x3961))
    result[7, 7, 12] = numpy.sum(x1677 * (x21 * x3884 + x21 * x4135 + x3963))
    result[7, 7, 13] = numpy.sum(x400 * (x21 * x3888 + x21 * x4136 + x3965))
    result[7, 7, 14] = numpy.sum(x1666 * (x21 * x3891 + x21 * x4137 + x3967))
    result[7, 8, 0] = numpy.sum(x1666 * (x21 * x4140 + x3971))
    result[7, 8, 1] = numpy.sum(x400 * (x21 * x4143 + x3975))
    result[7, 8, 2] = numpy.sum(x400 * (x21 * x4146 + x3979))
    result[7, 8, 3] = numpy.sum(x1677 * (x21 * x4149 + x3983))
    result[7, 8, 4] = numpy.sum(x1682 * (x21 * x4152 + x3987))
    result[7, 8, 5] = numpy.sum(x1677 * (x21 * x4155 + x3991))
    result[7, 8, 6] = numpy.sum(x400 * (x21 * x4158 + x3995))
    result[7, 8, 7] = numpy.sum(x1682 * (x21 * x4161 + x3999))
    result[7, 8, 8] = numpy.sum(x1682 * (x21 * x4164 + x4003))
    result[7, 8, 9] = numpy.sum(x400 * (x21 * x4167 + x4007))
    result[7, 8, 10] = numpy.sum(x1666 * (x21 * x4170 + x4010))
    result[7, 8, 11] = numpy.sum(x400 * (x21 * x4173 + x4013))
    result[7, 8, 12] = numpy.sum(x1677 * (x21 * x4176 + x4016))
    result[7, 8, 13] = numpy.sum(x400 * (x21 * x4179 + x4019))
    result[7, 8, 14] = numpy.sum(x1666 * (x21 * x4182 + x4022))
    result[7, 9, 0] = numpy.sum(x325 * (x22 * x4140 + x4185))
    result[7, 9, 1] = numpy.sum(x189 * (x22 * x4143 + x4188))
    result[7, 9, 2] = numpy.sum(x189 * (x22 * x4146 + x4191))
    result[7, 9, 3] = numpy.sum(x380 * (x22 * x4149 + x4194))
    result[7, 9, 4] = numpy.sum(x400 * (x22 * x4152 + x4197))
    result[7, 9, 5] = numpy.sum(x380 * (x22 * x4155 + x4200))
    result[7, 9, 6] = numpy.sum(x189 * (x22 * x4158 + x4203))
    result[7, 9, 7] = numpy.sum(x400 * (x22 * x4161 + x4206))
    result[7, 9, 8] = numpy.sum(x400 * (x22 * x4164 + x4209))
    result[7, 9, 9] = numpy.sum(x189 * (x22 * x4167 + x4212))
    result[7, 9, 10] = numpy.sum(x325 * (x22 * x4170 + x4214))
    result[7, 9, 11] = numpy.sum(x189 * (x22 * x4173 + x4216))
    result[7, 9, 12] = numpy.sum(x380 * (x22 * x4176 + x4218))
    result[7, 9, 13] = numpy.sum(x189 * (x22 * x4179 + x4220))
    result[7, 9, 14] = numpy.sum(x325 * (x22 * x4182 + x4222))
    result[8, 0, 0] = numpy.sum(
        x325
        * (x0 * x1876 + x0 * x4223 + x0 * (x0 * (x0 * x4224 + x3166) + x4223) + x1439)
    )
    result[8, 0, 1] = numpy.sum(
        x189
        * (x0 * x1880 + x0 * x4225 + x0 * (x0 * (x1447 * x4026 + x3168) + x4225) + x1450)
    )
    result[8, 0, 2] = numpy.sum(
        x189
        * (x0 * x1884 + x0 * x4226 + x0 * (x0 * (x1459 * x4026 + x3170) + x4226) + x1462)
    )
    result[8, 0, 3] = numpy.sum(
        x380
        * (x0 * x1889 + x0 * x4227 + x0 * (x0 * (x1887 * x3667 + x3172) + x4227) + x1470)
    )
    result[8, 0, 4] = numpy.sum(
        x400
        * (x0 * x1894 + x0 * x4228 + x0 * (x0 * (x1892 * x3667 + x3174) + x4228) + x1478)
    )
    result[8, 0, 5] = numpy.sum(
        x380
        * (x0 * x1899 + x0 * x4229 + x0 * (x0 * (x1897 * x3667 + x3176) + x4229) + x1487)
    )
    result[8, 0, 6] = numpy.sum(
        x189
        * (x0 * x1904 + x0 * x4230 + x0 * (x0 * (x3178 * x3673 + x3179) + x4230) + x1492)
    )
    result[8, 0, 7] = numpy.sum(
        x400
        * (x0 * x1909 + x0 * x4231 + x0 * (x0 * (x3181 * x3673 + x3182) + x4231) + x1497)
    )
    result[8, 0, 8] = numpy.sum(
        x400
        * (x0 * x1914 + x0 * x4232 + x0 * (x0 * (x3184 * x3673 + x3185) + x4232) + x1502)
    )
    result[8, 0, 9] = numpy.sum(
        x189
        * (x0 * x1919 + x0 * x4233 + x0 * (x0 * (x3187 * x3673 + x3188) + x4233) + x1508)
    )
    result[8, 0, 10] = numpy.sum(
        x325
        * (x0 * x1922 + x0 * x4234 + x0 * (x0 * (x127 * x4235 + x3190) + x4234) + x1511)
    )
    result[8, 0, 11] = numpy.sum(
        x189
        * (x0 * x1925 + x0 * x4236 + x0 * (x0 * (x127 * x4237 + x3192) + x4236) + x1514)
    )
    result[8, 0, 12] = numpy.sum(
        x380
        * (x0 * x1928 + x0 * x4238 + x0 * (x0 * (x127 * x4239 + x3194) + x4238) + x1517)
    )
    result[8, 0, 13] = numpy.sum(
        x189
        * (x0 * x1931 + x0 * x4240 + x0 * (x0 * (x127 * x4241 + x3196) + x4240) + x1520)
    )
    result[8, 0, 14] = numpy.sum(
        x325
        * (x0 * x1934 + x0 * x4242 + x0 * (x0 * (x127 * x4243 + x3198) + x4242) + x1523)
    )
    result[8, 1, 0] = numpy.sum(x1666 * (x0 * x3482 + x0 * (x0 * x4244 + x3482) + x3484))
    result[8, 1, 1] = numpy.sum(x400 * (x0 * x3485 + x0 * (x0 * x4245 + x3485) + x3487))
    result[8, 1, 2] = numpy.sum(x400 * (x0 * x3488 + x0 * (x0 * x4246 + x3488) + x3490))
    result[8, 1, 3] = numpy.sum(x1677 * (x0 * x3491 + x0 * (x0 * x4247 + x3491) + x3493))
    result[8, 1, 4] = numpy.sum(x1682 * (x0 * x3494 + x0 * (x0 * x4248 + x3494) + x3496))
    result[8, 1, 5] = numpy.sum(x1677 * (x0 * x3497 + x0 * (x0 * x4249 + x3497) + x3499))
    result[8, 1, 6] = numpy.sum(x400 * (x0 * x3500 + x0 * (x0 * x4250 + x3500) + x3502))
    result[8, 1, 7] = numpy.sum(x1682 * (x0 * x3503 + x0 * (x0 * x4251 + x3503) + x3505))
    result[8, 1, 8] = numpy.sum(x1682 * (x0 * x3506 + x0 * (x0 * x4252 + x3506) + x3508))
    result[8, 1, 9] = numpy.sum(x400 * (x0 * x3509 + x0 * (x0 * x4253 + x3509) + x3511))
    result[8, 1, 10] = numpy.sum(x1666 * (x0 * x3512 + x0 * (x0 * x4254 + x3512) + x3514))
    result[8, 1, 11] = numpy.sum(x400 * (x0 * x3515 + x0 * (x0 * x4255 + x3515) + x3517))
    result[8, 1, 12] = numpy.sum(x1677 * (x0 * x3518 + x0 * (x0 * x4256 + x3518) + x3520))
    result[8, 1, 13] = numpy.sum(x400 * (x0 * x3521 + x0 * (x0 * x4257 + x3521) + x3523))
    result[8, 1, 14] = numpy.sum(x1666 * (x0 * x3524 + x0 * (x0 * x4258 + x3524) + x3526))
    result[8, 2, 0] = numpy.sum(x1666 * (x0 * x3249 + x0 * (x0 * x4260 + x3249) + x2205))
    result[8, 2, 1] = numpy.sum(x400 * (x0 * x3252 + x0 * (x0 * x4262 + x3252) + x2214))
    result[8, 2, 2] = numpy.sum(x400 * (x0 * x3255 + x0 * (x0 * x4264 + x3255) + x2223))
    result[8, 2, 3] = numpy.sum(x1677 * (x0 * x3258 + x0 * (x0 * x4266 + x3258) + x2231))
    result[8, 2, 4] = numpy.sum(x1682 * (x0 * x3261 + x0 * (x0 * x4268 + x3261) + x2239))
    result[8, 2, 5] = numpy.sum(x1677 * (x0 * x3264 + x0 * (x0 * x4270 + x3264) + x2247))
    result[8, 2, 6] = numpy.sum(x400 * (x0 * x3268 + x0 * (x0 * x4272 + x3268) + x2253))
    result[8, 2, 7] = numpy.sum(x1682 * (x0 * x3272 + x0 * (x0 * x4274 + x3272) + x2259))
    result[8, 2, 8] = numpy.sum(x1682 * (x0 * x3276 + x0 * (x0 * x4276 + x3276) + x2265))
    result[8, 2, 9] = numpy.sum(x400 * (x0 * x3280 + x0 * (x0 * x4278 + x3280) + x2271))
    result[8, 2, 10] = numpy.sum(x1666 * (x0 * x3283 + x0 * (x0 * x4280 + x3283) + x2274))
    result[8, 2, 11] = numpy.sum(x400 * (x0 * x3286 + x0 * (x0 * x4282 + x3286) + x2277))
    result[8, 2, 12] = numpy.sum(x1677 * (x0 * x3289 + x0 * (x0 * x4284 + x3289) + x2280))
    result[8, 2, 13] = numpy.sum(x400 * (x0 * x3292 + x0 * (x0 * x4286 + x3292) + x2283))
    result[8, 2, 14] = numpy.sum(x1666 * (x0 * x3295 + x0 * (x0 * x4288 + x3295) + x2286))
    result[8, 3, 0] = numpy.sum(x1666 * (x0 * x4290 + x3593))
    result[8, 3, 1] = numpy.sum(x400 * (x0 * x4292 + x3594))
    result[8, 3, 2] = numpy.sum(x400 * (x0 * x4294 + x3595))
    result[8, 3, 3] = numpy.sum(x1677 * (x0 * x4296 + x3596))
    result[8, 3, 4] = numpy.sum(x1682 * (x0 * x4298 + x3597))
    result[8, 3, 5] = numpy.sum(x1677 * (x0 * x4300 + x3598))
    result[8, 3, 6] = numpy.sum(x400 * (x0 * x4302 + x3599))
    result[8, 3, 7] = numpy.sum(x1682 * (x0 * x4304 + x3600))
    result[8, 3, 8] = numpy.sum(x1682 * (x0 * x4306 + x3601))
    result[8, 3, 9] = numpy.sum(x400 * (x0 * x4308 + x3602))
    result[8, 3, 10] = numpy.sum(x1666 * (x0 * x4310 + x3603))
    result[8, 3, 11] = numpy.sum(x400 * (x0 * x4312 + x3604))
    result[8, 3, 12] = numpy.sum(x1677 * (x0 * x4314 + x3605))
    result[8, 3, 13] = numpy.sum(x400 * (x0 * x4316 + x3606))
    result[8, 3, 14] = numpy.sum(x1666 * (x0 * x4318 + x3607))
    result[8, 4, 0] = numpy.sum(x1816 * (x0 * x4319 + x3608))
    result[8, 4, 1] = numpy.sum(x956 * (x0 * x4320 + x3609))
    result[8, 4, 2] = numpy.sum(x956 * (x0 * x4321 + x3610))
    result[8, 4, 3] = numpy.sum(x1682 * (x0 * x4322 + x3611))
    result[8, 4, 4] = numpy.sum(x1836 * (x0 * x4323 + x3612))
    result[8, 4, 5] = numpy.sum(x1682 * (x0 * x4324 + x3613))
    result[8, 4, 6] = numpy.sum(x956 * (x0 * x4325 + x3614))
    result[8, 4, 7] = numpy.sum(x1836 * (x0 * x4326 + x3615))
    result[8, 4, 8] = numpy.sum(x1836 * (x0 * x4327 + x3616))
    result[8, 4, 9] = numpy.sum(x956 * (x0 * x4328 + x3617))
    result[8, 4, 10] = numpy.sum(x1816 * (x0 * x4329 + x3618))
    result[8, 4, 11] = numpy.sum(x956 * (x0 * x4330 + x3619))
    result[8, 4, 12] = numpy.sum(x1682 * (x0 * x4331 + x3620))
    result[8, 4, 13] = numpy.sum(x956 * (x0 * x4332 + x3621))
    result[8, 4, 14] = numpy.sum(x1816 * (x0 * x4333 + x3622))
    result[8, 5, 0] = numpy.sum(x1666 * (x0 * x4336 + x3332))
    result[8, 5, 1] = numpy.sum(x400 * (x0 * x4339 + x3336))
    result[8, 5, 2] = numpy.sum(x400 * (x0 * x4342 + x3340))
    result[8, 5, 3] = numpy.sum(x1677 * (x0 * x4345 + x3344))
    result[8, 5, 4] = numpy.sum(x1682 * (x0 * x4348 + x3348))
    result[8, 5, 5] = numpy.sum(x1677 * (x0 * x4351 + x3352))
    result[8, 5, 6] = numpy.sum(x400 * (x0 * x4354 + x3356))
    result[8, 5, 7] = numpy.sum(x1682 * (x0 * x4357 + x3360))
    result[8, 5, 8] = numpy.sum(x1682 * (x0 * x4360 + x3364))
    result[8, 5, 9] = numpy.sum(x400 * (x0 * x4363 + x3368))
    result[8, 5, 10] = numpy.sum(x1666 * (x0 * x4366 + x3370))
    result[8, 5, 11] = numpy.sum(x400 * (x0 * x4369 + x3372))
    result[8, 5, 12] = numpy.sum(x1677 * (x0 * x4372 + x3374))
    result[8, 5, 13] = numpy.sum(x400 * (x0 * x4375 + x3376))
    result[8, 5, 14] = numpy.sum(x1666 * (x0 * x4378 + x3378))
    result[8, 6, 0] = numpy.sum(x325 * (x21 * x3847 + x21 * x4289 + x21 * x4290 + x3929))
    result[8, 6, 1] = numpy.sum(x189 * (x21 * x3850 + x21 * x4291 + x21 * x4292 + x3932))
    result[8, 6, 2] = numpy.sum(x189 * (x21 * x3853 + x21 * x4293 + x21 * x4294 + x3935))
    result[8, 6, 3] = numpy.sum(x380 * (x21 * x3856 + x21 * x4295 + x21 * x4296 + x3938))
    result[8, 6, 4] = numpy.sum(x400 * (x21 * x3859 + x21 * x4297 + x21 * x4298 + x3941))
    result[8, 6, 5] = numpy.sum(x380 * (x21 * x3862 + x21 * x4299 + x21 * x4300 + x3944))
    result[8, 6, 6] = numpy.sum(x189 * (x21 * x3865 + x21 * x4301 + x21 * x4302 + x3947))
    result[8, 6, 7] = numpy.sum(x400 * (x21 * x3868 + x21 * x4303 + x21 * x4304 + x3950))
    result[8, 6, 8] = numpy.sum(x400 * (x21 * x3871 + x21 * x4305 + x21 * x4306 + x3953))
    result[8, 6, 9] = numpy.sum(x189 * (x21 * x3874 + x21 * x4307 + x21 * x4308 + x3956))
    result[8, 6, 10] = numpy.sum(x325 * (x21 * x3877 + x21 * x4309 + x21 * x4310 + x3958))
    result[8, 6, 11] = numpy.sum(x189 * (x21 * x3880 + x21 * x4311 + x21 * x4312 + x3960))
    result[8, 6, 12] = numpy.sum(x380 * (x21 * x3883 + x21 * x4313 + x21 * x4314 + x3962))
    result[8, 6, 13] = numpy.sum(x189 * (x21 * x3887 + x21 * x4315 + x21 * x4316 + x3964))
    result[8, 6, 14] = numpy.sum(x325 * (x21 * x3890 + x21 * x4317 + x21 * x4318 + x3966))
    result[8, 7, 0] = numpy.sum(x1666 * (x21 * x4139 + x21 * x4319 + x3970))
    result[8, 7, 1] = numpy.sum(x400 * (x21 * x4142 + x21 * x4320 + x3974))
    result[8, 7, 2] = numpy.sum(x400 * (x21 * x4145 + x21 * x4321 + x3978))
    result[8, 7, 3] = numpy.sum(x1677 * (x21 * x4148 + x21 * x4322 + x3982))
    result[8, 7, 4] = numpy.sum(x1682 * (x21 * x4151 + x21 * x4323 + x3986))
    result[8, 7, 5] = numpy.sum(x1677 * (x21 * x4154 + x21 * x4324 + x3990))
    result[8, 7, 6] = numpy.sum(x400 * (x21 * x4157 + x21 * x4325 + x3994))
    result[8, 7, 7] = numpy.sum(x1682 * (x21 * x4160 + x21 * x4326 + x3998))
    result[8, 7, 8] = numpy.sum(x1682 * (x21 * x4163 + x21 * x4327 + x4002))
    result[8, 7, 9] = numpy.sum(x400 * (x21 * x4166 + x21 * x4328 + x4006))
    result[8, 7, 10] = numpy.sum(x1666 * (x21 * x4169 + x21 * x4329 + x4009))
    result[8, 7, 11] = numpy.sum(x400 * (x21 * x4172 + x21 * x4330 + x4012))
    result[8, 7, 12] = numpy.sum(x1677 * (x21 * x4175 + x21 * x4331 + x4015))
    result[8, 7, 13] = numpy.sum(x400 * (x21 * x4178 + x21 * x4332 + x4018))
    result[8, 7, 14] = numpy.sum(x1666 * (x21 * x4181 + x21 * x4333 + x4021))
    result[8, 8, 0] = numpy.sum(x1666 * (x21 * x4336 + x4185))
    result[8, 8, 1] = numpy.sum(x400 * (x21 * x4339 + x4188))
    result[8, 8, 2] = numpy.sum(x400 * (x21 * x4342 + x4191))
    result[8, 8, 3] = numpy.sum(x1677 * (x21 * x4345 + x4194))
    result[8, 8, 4] = numpy.sum(x1682 * (x21 * x4348 + x4197))
    result[8, 8, 5] = numpy.sum(x1677 * (x21 * x4351 + x4200))
    result[8, 8, 6] = numpy.sum(x400 * (x21 * x4354 + x4203))
    result[8, 8, 7] = numpy.sum(x1682 * (x21 * x4357 + x4206))
    result[8, 8, 8] = numpy.sum(x1682 * (x21 * x4360 + x4209))
    result[8, 8, 9] = numpy.sum(x400 * (x21 * x4363 + x4212))
    result[8, 8, 10] = numpy.sum(x1666 * (x21 * x4366 + x4214))
    result[8, 8, 11] = numpy.sum(x400 * (x21 * x4369 + x4216))
    result[8, 8, 12] = numpy.sum(x1677 * (x21 * x4372 + x4218))
    result[8, 8, 13] = numpy.sum(x400 * (x21 * x4375 + x4220))
    result[8, 8, 14] = numpy.sum(x1666 * (x21 * x4378 + x4222))
    result[8, 9, 0] = numpy.sum(x325 * (x22 * x4336 + x4380))
    result[8, 9, 1] = numpy.sum(x189 * (x22 * x4339 + x4382))
    result[8, 9, 2] = numpy.sum(x189 * (x22 * x4342 + x4384))
    result[8, 9, 3] = numpy.sum(x380 * (x22 * x4345 + x4386))
    result[8, 9, 4] = numpy.sum(x400 * (x22 * x4348 + x4388))
    result[8, 9, 5] = numpy.sum(x380 * (x22 * x4351 + x4390))
    result[8, 9, 6] = numpy.sum(x189 * (x22 * x4354 + x4392))
    result[8, 9, 7] = numpy.sum(x400 * (x22 * x4357 + x4394))
    result[8, 9, 8] = numpy.sum(x400 * (x22 * x4360 + x4396))
    result[8, 9, 9] = numpy.sum(x189 * (x22 * x4363 + x4398))
    result[8, 9, 10] = numpy.sum(x325 * (x22 * x4366 + x4399))
    result[8, 9, 11] = numpy.sum(x189 * (x22 * x4369 + x4400))
    result[8, 9, 12] = numpy.sum(x380 * (x22 * x4372 + x4401))
    result[8, 9, 13] = numpy.sum(x189 * (x22 * x4375 + x4402))
    result[8, 9, 14] = numpy.sum(x325 * (x22 * x4378 + x4403))
    result[9, 0, 0] = numpy.sum(
        x140
        * (x0 * x2457 + x0 * x4404 + x0 * (x0 * (x3447 + x3659 * x4405) + x4404) + x1555)
    )
    result[9, 0, 1] = numpy.sum(
        x155
        * (x0 * x2461 + x0 * x4406 + x0 * (x0 * (x3449 + x4026 * x4407) + x4406) + x1562)
    )
    result[9, 0, 2] = numpy.sum(
        x155
        * (x0 * x2465 + x0 * x4408 + x0 * (x0 * (x1569 * x4026 + x3451) + x4408) + x1573)
    )
    result[9, 0, 3] = numpy.sum(
        x178
        * (x0 * x2470 + x0 * x4409 + x0 * (x0 * (x3453 + x4405 * x4411) + x4409) + x1577)
    )
    result[9, 0, 4] = numpy.sum(
        x189
        * (x0 * x2475 + x0 * x4412 + x0 * (x0 * (x3455 + x4413 * x4414) + x4412) + x1581)
    )
    result[9, 0, 5] = numpy.sum(
        x178
        * (x0 * x2481 + x0 * x4415 + x0 * (x0 * (x2478 * x3667 + x3457) + x4415) + x1588)
    )
    result[9, 0, 6] = numpy.sum(
        x155
        * (x0 * x2484 + x0 * x4416 + x0 * (x0 * (x3460 + x4405 * x4417) + x4416) + x1591)
    )
    result[9, 0, 7] = numpy.sum(
        x189
        * (x0 * x2487 + x0 * x4418 + x0 * (x0 * (x3463 + x4414 * x4420) + x4418) + x1594)
    )
    result[9, 0, 8] = numpy.sum(
        x189
        * (x0 * x2490 + x0 * x4421 + x0 * (x0 * (x0 * x4422 + x3466) + x4421) + x1597)
    )
    result[9, 0, 9] = numpy.sum(
        x155
        * (x0 * x2494 + x0 * x4423 + x0 * (x0 * (x3468 * x3673 + x3470) + x4423) + x1602)
    )
    result[9, 0, 10] = numpy.sum(
        x140
        * (x0 * x2497 + x0 * x4424 + x0 * (x0 * (x224 * x4405 + x3472) + x4424) + x1605)
    )
    result[9, 0, 11] = numpy.sum(
        x155
        * (x0 * x2500 + x0 * x4425 + x0 * (x0 * (x0 * x4426 + x3474) + x4425) + x1608)
    )
    result[9, 0, 12] = numpy.sum(
        x178
        * (x0 * x2503 + x0 * x4427 + x0 * (x0 * (x0 * x4428 + x3476) + x4427) + x1611)
    )
    result[9, 0, 13] = numpy.sum(
        x155
        * (x0 * x2506 + x0 * x4429 + x0 * (x0 * (x0 * x4430 + x3478) + x4429) + x1614)
    )
    result[9, 0, 14] = numpy.sum(
        x140
        * (x0 * x2509 + x0 * x4431 + x0 * (x0 * (x127 * x4432 + x3480) + x4431) + x1617)
    )
    result[9, 1, 0] = numpy.sum(
        x325 * (x0 * x4433 + x0 * (x0 * x4435 + x4433) + x21 * x2457 + x2204)
    )
    result[9, 1, 1] = numpy.sum(
        x189 * (x0 * x4436 + x0 * (x0 * x4437 + x4436) + x21 * x2461 + x2213)
    )
    result[9, 1, 2] = numpy.sum(
        x189 * (x0 * x4438 + x0 * (x0 * x4439 + x4438) + x21 * x2465 + x2222)
    )
    result[9, 1, 3] = numpy.sum(
        x380 * (x0 * x4440 + x0 * (x0 * x4441 + x4440) + x21 * x2470 + x2230)
    )
    result[9, 1, 4] = numpy.sum(
        x400 * (x0 * x4442 + x0 * (x0 * x4444 + x4442) + x21 * x2475 + x2238)
    )
    result[9, 1, 5] = numpy.sum(
        x380 * (x0 * x4445 + x0 * (x0 * x4446 + x4445) + x21 * x2481 + x2246)
    )
    result[9, 1, 6] = numpy.sum(
        x189 * (x0 * x4447 + x0 * (x0 * x4448 + x4447) + x21 * x2484 + x2252)
    )
    result[9, 1, 7] = numpy.sum(
        x400 * (x0 * x4449 + x0 * (x0 * x4450 + x4449) + x21 * x2487 + x2258)
    )
    result[9, 1, 8] = numpy.sum(
        x400 * (x0 * x4451 + x0 * (x0 * x4452 + x4451) + x21 * x2490 + x2264)
    )
    result[9, 1, 9] = numpy.sum(
        x189 * (x0 * x4453 + x0 * (x0 * x4454 + x4453) + x21 * x2494 + x2270)
    )
    result[9, 1, 10] = numpy.sum(
        x325 * (x0 * x4455 + x0 * (x0 * x4456 + x4455) + x21 * x2497 + x2273)
    )
    result[9, 1, 11] = numpy.sum(
        x189 * (x0 * x4457 + x0 * (x0 * x4458 + x4457) + x21 * x2500 + x2276)
    )
    result[9, 1, 12] = numpy.sum(
        x380 * (x0 * x4459 + x0 * (x0 * x4460 + x4459) + x21 * x2503 + x2279)
    )
    result[9, 1, 13] = numpy.sum(
        x189 * (x0 * x4461 + x0 * (x0 * x4462 + x4461) + x21 * x2506 + x2282)
    )
    result[9, 1, 14] = numpy.sum(
        x325 * (x0 * x4463 + x0 * (x0 * x4464 + x4463) + x21 * x2509 + x2285)
    )
    result[9, 2, 0] = numpy.sum(x325 * (x0 * x3543 + x0 * (x0 * x4467 + x3543) + x2573))
    result[9, 2, 1] = numpy.sum(x189 * (x0 * x3546 + x0 * (x0 * x4469 + x3546) + x2578))
    result[9, 2, 2] = numpy.sum(x189 * (x0 * x3549 + x0 * (x0 * x4471 + x3549) + x2586))
    result[9, 2, 3] = numpy.sum(x380 * (x0 * x3552 + x0 * (x0 * x4473 + x3552) + x2590))
    result[9, 2, 4] = numpy.sum(x400 * (x0 * x3556 + x0 * (x0 * x4476 + x3556) + x2594))
    result[9, 2, 5] = numpy.sum(x380 * (x0 * x3559 + x0 * (x0 * x4478 + x3559) + x2601))
    result[9, 2, 6] = numpy.sum(x189 * (x0 * x3563 + x0 * (x0 * x4480 + x3563) + x2603))
    result[9, 2, 7] = numpy.sum(x400 * (x0 * x3567 + x0 * (x0 * x4482 + x3567) + x2605))
    result[9, 2, 8] = numpy.sum(x400 * (x0 * x3571 + x0 * (x0 * x4484 + x3571) + x2607))
    result[9, 2, 9] = numpy.sum(x189 * (x0 * x3576 + x0 * (x0 * x4486 + x3576) + x2611))
    result[9, 2, 10] = numpy.sum(x325 * (x0 * x3579 + x0 * (x0 * x4488 + x3579) + x2613))
    result[9, 2, 11] = numpy.sum(x189 * (x0 * x3582 + x0 * (x0 * x4490 + x3582) + x2615))
    result[9, 2, 12] = numpy.sum(x380 * (x0 * x3585 + x0 * (x0 * x4492 + x3585) + x2617))
    result[9, 2, 13] = numpy.sum(x189 * (x0 * x3588 + x0 * (x0 * x4494 + x3588) + x2619))
    result[9, 2, 14] = numpy.sum(x325 * (x0 * x3591 + x0 * (x0 * x4496 + x3591) + x2621))
    result[9, 3, 0] = numpy.sum(x325 * (x0 * x4498 + x21 * x3248 + x21 * x4433 + x3054))
    result[9, 3, 1] = numpy.sum(x189 * (x0 * x4500 + x21 * x3251 + x21 * x4436 + x3059))
    result[9, 3, 2] = numpy.sum(x189 * (x0 * x4502 + x21 * x3254 + x21 * x4438 + x3064))
    result[9, 3, 3] = numpy.sum(x380 * (x0 * x4504 + x21 * x3257 + x21 * x4440 + x3069))
    result[9, 3, 4] = numpy.sum(x400 * (x0 * x4506 + x21 * x3260 + x21 * x4442 + x3074))
    result[9, 3, 5] = numpy.sum(x380 * (x0 * x4508 + x21 * x3263 + x21 * x4445 + x3079))
    result[9, 3, 6] = numpy.sum(x189 * (x0 * x4510 + x21 * x3267 + x21 * x4447 + x3084))
    result[9, 3, 7] = numpy.sum(x400 * (x0 * x4512 + x21 * x3271 + x21 * x4449 + x3089))
    result[9, 3, 8] = numpy.sum(x400 * (x0 * x4514 + x21 * x3275 + x21 * x4451 + x3094))
    result[9, 3, 9] = numpy.sum(x189 * (x0 * x4516 + x21 * x3279 + x21 * x4453 + x3099))
    result[9, 3, 10] = numpy.sum(x325 * (x0 * x4518 + x21 * x3282 + x21 * x4455 + x3102))
    result[9, 3, 11] = numpy.sum(x189 * (x0 * x4520 + x21 * x3285 + x21 * x4457 + x3105))
    result[9, 3, 12] = numpy.sum(x380 * (x0 * x4522 + x21 * x3288 + x21 * x4459 + x3108))
    result[9, 3, 13] = numpy.sum(x189 * (x0 * x4524 + x21 * x3291 + x21 * x4461 + x3111))
    result[9, 3, 14] = numpy.sum(x325 * (x0 * x4526 + x21 * x3294 + x21 * x4463 + x3114))
    result[9, 4, 0] = numpy.sum(x898 * (x0 * x4527 + x21 * x3543 + x3331))
    result[9, 4, 1] = numpy.sum(x915 * (x0 * x4528 + x21 * x3546 + x3335))
    result[9, 4, 2] = numpy.sum(x915 * (x0 * x4529 + x21 * x3549 + x3339))
    result[9, 4, 3] = numpy.sum(x400 * (x0 * x4530 + x21 * x3552 + x3343))
    result[9, 4, 4] = numpy.sum(x956 * (x0 * x4531 + x21 * x3556 + x3347))
    result[9, 4, 5] = numpy.sum(x400 * (x0 * x4532 + x21 * x3559 + x3351))
    result[9, 4, 6] = numpy.sum(x915 * (x0 * x4533 + x21 * x3563 + x3355))
    result[9, 4, 7] = numpy.sum(x956 * (x0 * x4534 + x21 * x3567 + x3359))
    result[9, 4, 8] = numpy.sum(x956 * (x0 * x4535 + x21 * x3571 + x3363))
    result[9, 4, 9] = numpy.sum(x915 * (x0 * x4536 + x21 * x3576 + x3367))
    result[9, 4, 10] = numpy.sum(x898 * (x0 * x4537 + x21 * x3579 + x3369))
    result[9, 4, 11] = numpy.sum(x915 * (x0 * x4538 + x21 * x3582 + x3371))
    result[9, 4, 12] = numpy.sum(x400 * (x0 * x4539 + x21 * x3585 + x3373))
    result[9, 4, 13] = numpy.sum(x915 * (x0 * x4540 + x21 * x3588 + x3375))
    result[9, 4, 14] = numpy.sum(x898 * (x0 * x4541 + x21 * x3591 + x3377))
    result[9, 5, 0] = numpy.sum(x325 * (x0 * x4544 + x3628))
    result[9, 5, 1] = numpy.sum(x189 * (x0 * x4547 + x3630))
    result[9, 5, 2] = numpy.sum(x189 * (x0 * x4550 + x3634))
    result[9, 5, 3] = numpy.sum(x380 * (x0 * x4553 + x3636))
    result[9, 5, 4] = numpy.sum(x400 * (x0 * x4556 + x3638))
    result[9, 5, 5] = numpy.sum(x380 * (x0 * x4559 + x3642))
    result[9, 5, 6] = numpy.sum(x189 * (x0 * x4562 + x3644))
    result[9, 5, 7] = numpy.sum(x400 * (x0 * x4565 + x3646))
    result[9, 5, 8] = numpy.sum(x400 * (x0 * x4568 + x3648))
    result[9, 5, 9] = numpy.sum(x189 * (x0 * x4571 + x3652))
    result[9, 5, 10] = numpy.sum(x325 * (x0 * x4574 + x3653))
    result[9, 5, 11] = numpy.sum(x189 * (x0 * x4577 + x3654))
    result[9, 5, 12] = numpy.sum(x380 * (x0 * x4580 + x3655))
    result[9, 5, 13] = numpy.sum(x189 * (x0 * x4583 + x3656))
    result[9, 5, 14] = numpy.sum(x325 * (x0 * x4586 + x3657))
    result[9, 6, 0] = numpy.sum(x140 * (x21 * x4138 + x21 * x4497 + x21 * x4498 + x3969))
    result[9, 6, 1] = numpy.sum(x155 * (x21 * x4141 + x21 * x4499 + x21 * x4500 + x3973))
    result[9, 6, 2] = numpy.sum(x155 * (x21 * x4144 + x21 * x4501 + x21 * x4502 + x3977))
    result[9, 6, 3] = numpy.sum(x178 * (x21 * x4147 + x21 * x4503 + x21 * x4504 + x3981))
    result[9, 6, 4] = numpy.sum(x189 * (x21 * x4150 + x21 * x4505 + x21 * x4506 + x3985))
    result[9, 6, 5] = numpy.sum(x178 * (x21 * x4153 + x21 * x4507 + x21 * x4508 + x3989))
    result[9, 6, 6] = numpy.sum(x155 * (x21 * x4156 + x21 * x4509 + x21 * x4510 + x3993))
    result[9, 6, 7] = numpy.sum(x189 * (x21 * x4159 + x21 * x4511 + x21 * x4512 + x3997))
    result[9, 6, 8] = numpy.sum(x189 * (x21 * x4162 + x21 * x4513 + x21 * x4514 + x4001))
    result[9, 6, 9] = numpy.sum(x155 * (x21 * x4165 + x21 * x4515 + x21 * x4516 + x4005))
    result[9, 6, 10] = numpy.sum(x140 * (x21 * x4168 + x21 * x4517 + x21 * x4518 + x4008))
    result[9, 6, 11] = numpy.sum(x155 * (x21 * x4171 + x21 * x4519 + x21 * x4520 + x4011))
    result[9, 6, 12] = numpy.sum(x178 * (x21 * x4174 + x21 * x4521 + x21 * x4522 + x4014))
    result[9, 6, 13] = numpy.sum(x155 * (x21 * x4177 + x21 * x4523 + x21 * x4524 + x4017))
    result[9, 6, 14] = numpy.sum(x140 * (x21 * x4180 + x21 * x4525 + x21 * x4526 + x4020))
    result[9, 7, 0] = numpy.sum(x325 * (x21 * x4335 + x21 * x4527 + x4184))
    result[9, 7, 1] = numpy.sum(x189 * (x21 * x4338 + x21 * x4528 + x4187))
    result[9, 7, 2] = numpy.sum(x189 * (x21 * x4341 + x21 * x4529 + x4190))
    result[9, 7, 3] = numpy.sum(x380 * (x21 * x4344 + x21 * x4530 + x4193))
    result[9, 7, 4] = numpy.sum(x400 * (x21 * x4347 + x21 * x4531 + x4196))
    result[9, 7, 5] = numpy.sum(x380 * (x21 * x4350 + x21 * x4532 + x4199))
    result[9, 7, 6] = numpy.sum(x189 * (x21 * x4353 + x21 * x4533 + x4202))
    result[9, 7, 7] = numpy.sum(x400 * (x21 * x4356 + x21 * x4534 + x4205))
    result[9, 7, 8] = numpy.sum(x400 * (x21 * x4359 + x21 * x4535 + x4208))
    result[9, 7, 9] = numpy.sum(x189 * (x21 * x4362 + x21 * x4536 + x4211))
    result[9, 7, 10] = numpy.sum(x325 * (x21 * x4365 + x21 * x4537 + x4213))
    result[9, 7, 11] = numpy.sum(x189 * (x21 * x4368 + x21 * x4538 + x4215))
    result[9, 7, 12] = numpy.sum(x380 * (x21 * x4371 + x21 * x4539 + x4217))
    result[9, 7, 13] = numpy.sum(x189 * (x21 * x4374 + x21 * x4540 + x4219))
    result[9, 7, 14] = numpy.sum(x325 * (x21 * x4377 + x21 * x4541 + x4221))
    result[9, 8, 0] = numpy.sum(x325 * (x21 * x4544 + x4380))
    result[9, 8, 1] = numpy.sum(x189 * (x21 * x4547 + x4382))
    result[9, 8, 2] = numpy.sum(x189 * (x21 * x4550 + x4384))
    result[9, 8, 3] = numpy.sum(x380 * (x21 * x4553 + x4386))
    result[9, 8, 4] = numpy.sum(x400 * (x21 * x4556 + x4388))
    result[9, 8, 5] = numpy.sum(x380 * (x21 * x4559 + x4390))
    result[9, 8, 6] = numpy.sum(x189 * (x21 * x4562 + x4392))
    result[9, 8, 7] = numpy.sum(x400 * (x21 * x4565 + x4394))
    result[9, 8, 8] = numpy.sum(x400 * (x21 * x4568 + x4396))
    result[9, 8, 9] = numpy.sum(x189 * (x21 * x4571 + x4398))
    result[9, 8, 10] = numpy.sum(x325 * (x21 * x4574 + x4399))
    result[9, 8, 11] = numpy.sum(x189 * (x21 * x4577 + x4400))
    result[9, 8, 12] = numpy.sum(x380 * (x21 * x4580 + x4401))
    result[9, 8, 13] = numpy.sum(x189 * (x21 * x4583 + x4402))
    result[9, 8, 14] = numpy.sum(x325 * (x21 * x4586 + x4403))
    result[9, 9, 0] = numpy.sum(
        x140 * (x22 * x4542 + x22 * x4543 + x22 * x4544 + x3659 * x4587)
    )
    result[9, 9, 1] = numpy.sum(
        x155 * (x22 * x4546 + x22 * x4547 + x3623 * x4545 + x4468 * x4587)
    )
    result[9, 9, 2] = numpy.sum(
        x155 * (x22 * x4548 + x22 * x4549 + x22 * x4550 + x3662 * x4588)
    )
    result[9, 9, 3] = numpy.sum(
        x178 * (x22 * x4551 + x22 * x4552 + x22 * x4553 + x4411 * x4587)
    )
    result[9, 9, 4] = numpy.sum(
        x189 * (x22 * x4554 + x22 * x4555 + x22 * x4556 + x4413 * x4588)
    )
    result[9, 9, 5] = numpy.sum(
        x178 * (x22 * x4557 + x22 * x4558 + x22 * x4559 + x2628 * x4589)
    )
    result[9, 9, 6] = numpy.sum(
        x155 * (x22 * x4560 + x22 * x4561 + x22 * x4562 + x4417 * x4587)
    )
    result[9, 9, 7] = numpy.sum(
        x189 * (x22 * x4563 + x22 * x4564 + x22 * x4565 + x4420 * x4588)
    )
    result[9, 9, 8] = numpy.sum(
        x189 * (x22 * x4566 + x22 * x4567 + x22 * x4568 + x3389 * x4589)
    )
    result[9, 9, 9] = numpy.sum(
        x155 * (x1624 * x4590 + x22 * x4569 + x22 * x4570 + x22 * x4571)
    )
    result[9, 9, 10] = numpy.sum(
        x140 * (x22 * x4572 + x22 * x4573 + x22 * x4574 + x224 * x4587)
    )
    result[9, 9, 11] = numpy.sum(
        x155 * (x22 * x4575 + x22 * x4576 + x22 * x4577 + x229 * x4588)
    )
    result[9, 9, 12] = numpy.sum(
        x178 * (x205 * x4589 + x22 * x4578 + x22 * x4579 + x22 * x4580)
    )
    result[9, 9, 13] = numpy.sum(
        x155 * (x179 * x4590 + x22 * x4581 + x22 * x4582 + x22 * x4583)
    )
    result[9, 9, 14] = numpy.sum(
        x140
        * (x22 * x4584 + x22 * x4585 + x22 * x4586 + x92 * (x156 * x4590 + 6.0 * x3650))
    )
    return result


int3c2e3d_sph = {
    (0, 0, 0): int3c2e3d_sph_000,
    (0, 0, 1): int3c2e3d_sph_001,
    (0, 0, 2): int3c2e3d_sph_002,
    (0, 0, 3): int3c2e3d_sph_003,
    (0, 0, 4): int3c2e3d_sph_004,
    (0, 1, 0): int3c2e3d_sph_010,
    (0, 1, 1): int3c2e3d_sph_011,
    (0, 1, 2): int3c2e3d_sph_012,
    (0, 1, 3): int3c2e3d_sph_013,
    (0, 1, 4): int3c2e3d_sph_014,
    (0, 2, 0): int3c2e3d_sph_020,
    (0, 2, 1): int3c2e3d_sph_021,
    (0, 2, 2): int3c2e3d_sph_022,
    (0, 2, 3): int3c2e3d_sph_023,
    (0, 2, 4): int3c2e3d_sph_024,
    (0, 3, 0): int3c2e3d_sph_030,
    (0, 3, 1): int3c2e3d_sph_031,
    (0, 3, 2): int3c2e3d_sph_032,
    (0, 3, 3): int3c2e3d_sph_033,
    (0, 3, 4): int3c2e3d_sph_034,
    (1, 0, 0): int3c2e3d_sph_100,
    (1, 0, 1): int3c2e3d_sph_101,
    (1, 0, 2): int3c2e3d_sph_102,
    (1, 0, 3): int3c2e3d_sph_103,
    (1, 0, 4): int3c2e3d_sph_104,
    (1, 1, 0): int3c2e3d_sph_110,
    (1, 1, 1): int3c2e3d_sph_111,
    (1, 1, 2): int3c2e3d_sph_112,
    (1, 1, 3): int3c2e3d_sph_113,
    (1, 1, 4): int3c2e3d_sph_114,
    (1, 2, 0): int3c2e3d_sph_120,
    (1, 2, 1): int3c2e3d_sph_121,
    (1, 2, 2): int3c2e3d_sph_122,
    (1, 2, 3): int3c2e3d_sph_123,
    (1, 2, 4): int3c2e3d_sph_124,
    (1, 3, 0): int3c2e3d_sph_130,
    (1, 3, 1): int3c2e3d_sph_131,
    (1, 3, 2): int3c2e3d_sph_132,
    (1, 3, 3): int3c2e3d_sph_133,
    (1, 3, 4): int3c2e3d_sph_134,
    (2, 0, 0): int3c2e3d_sph_200,
    (2, 0, 1): int3c2e3d_sph_201,
    (2, 0, 2): int3c2e3d_sph_202,
    (2, 0, 3): int3c2e3d_sph_203,
    (2, 0, 4): int3c2e3d_sph_204,
    (2, 1, 0): int3c2e3d_sph_210,
    (2, 1, 1): int3c2e3d_sph_211,
    (2, 1, 2): int3c2e3d_sph_212,
    (2, 1, 3): int3c2e3d_sph_213,
    (2, 1, 4): int3c2e3d_sph_214,
    (2, 2, 0): int3c2e3d_sph_220,
    (2, 2, 1): int3c2e3d_sph_221,
    (2, 2, 2): int3c2e3d_sph_222,
    (2, 2, 3): int3c2e3d_sph_223,
    (2, 2, 4): int3c2e3d_sph_224,
    (2, 3, 0): int3c2e3d_sph_230,
    (2, 3, 1): int3c2e3d_sph_231,
    (2, 3, 2): int3c2e3d_sph_232,
    (2, 3, 3): int3c2e3d_sph_233,
    (2, 3, 4): int3c2e3d_sph_234,
    (3, 0, 0): int3c2e3d_sph_300,
    (3, 0, 1): int3c2e3d_sph_301,
    (3, 0, 2): int3c2e3d_sph_302,
    (3, 0, 3): int3c2e3d_sph_303,
    (3, 0, 4): int3c2e3d_sph_304,
    (3, 1, 0): int3c2e3d_sph_310,
    (3, 1, 1): int3c2e3d_sph_311,
    (3, 1, 2): int3c2e3d_sph_312,
    (3, 1, 3): int3c2e3d_sph_313,
    (3, 1, 4): int3c2e3d_sph_314,
    (3, 2, 0): int3c2e3d_sph_320,
    (3, 2, 1): int3c2e3d_sph_321,
    (3, 2, 2): int3c2e3d_sph_322,
    (3, 2, 3): int3c2e3d_sph_323,
    (3, 2, 4): int3c2e3d_sph_324,
    (3, 3, 0): int3c2e3d_sph_330,
    (3, 3, 1): int3c2e3d_sph_331,
    (3, 3, 2): int3c2e3d_sph_332,
    (3, 3, 3): int3c2e3d_sph_333,
    (3, 3, 4): int3c2e3d_sph_334,
}
