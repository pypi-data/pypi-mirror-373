import numpy as np
import pytest

from pysisyphus.calculators import Composite, DFTD4, Turbomole
from pysisyphus.elem_data import INV_ATOMIC_NUMBERS
from pysisyphus.helpers import geom_loader
from pysisyphus.testing import using


@pytest.fixture
def aminal_xyz():
    return """81

    C 4.70355701 -3.56230820 -0.21903839
    C 5.40249061 -3.15189201 -1.36973353
    C 3.49009381 -2.98487025 0.07472869
    C 2.93187124 -1.97031634 -0.72902036
    C 3.65162356 -1.54955827 -1.88451608
    C 4.88001060 -2.16992236 -2.19655879
    O 3.20244702 -0.57052854 -2.63110950
    C 1.52490479 -1.58065942 -0.57509454
    N 0.85494332 -2.13572633 0.53604952
    N 1.13328178 0.18329024 -0.10376645
    C -0.60445777 -2.12743159 0.39771260
    C -1.17960658 -0.71042074 0.50728863
    C -0.33953827 0.27781860 -0.31175856
    C 1.30552115 -1.40165573 1.73616068
    C 1.50978584 0.08771980 1.32158767
    N -2.53046036 -0.68541982 -0.00998294
    C -3.48818169 -0.25121802 0.73913067
    C -4.85160933 -0.19805121 0.29206500
    C -5.86443204 0.28568027 1.14178517
    C -5.21630690 -0.62349176 -1.01199396
    C -7.17599892 0.35363898 0.73940604
    C -6.54788381 -0.55950604 -1.43080768
    C -7.51853811 -0.07249217 -0.55870185
    O -4.30692759 -1.09418846 -1.87241834
    H 5.11419003 -4.35914676 0.39099669
    H 2.92130355 -3.38288728 0.90745729
    H 5.39119071 -1.81358367 -3.08261714
    H 3.21407297 0.38968292 -1.84468167
    H 0.97014575 -1.60683902 -1.51674827
    H -1.04479703 -2.77434856 1.16682028
    H -0.86453006 -2.55523558 -0.57712139
    H -1.16675998 -0.39275048 1.56526117
    H -0.66515734 1.29310956 -0.05822242
    H -0.53450775 0.11701817 -1.38015526
    H 2.24958292 -1.80861252 2.10485863
    H 0.56074657 -1.51963594 2.52845128
    H 2.56104105 0.37053611 1.40229717
    H 0.91410176 0.77934621 1.92630303
    H -3.29075089 0.09884899 1.76597151
    H -5.59231354 0.61306299 2.14284292
    H -7.95778801 0.72560968 1.39147183
    H -6.77643085 -0.89591639 -2.43454187
    H -3.42191198 -1.06099978 -1.40040646
    O 3.13685814 1.18822185 -1.01940653
    C 1.81122790 1.40710319 -0.86910586
    C 1.52594415 2.69565033 -0.13663264
    C 0.39632495 3.45790842 -0.42356733
    C 2.43019636 3.19840646 0.82932526
    C 2.12929108 4.35735335 1.53489554
    C 0.08705814 4.63033707 0.25974260
    C 0.95923408 5.06470755 1.26365886
    O 3.60774717 2.59033776 1.09348288
    H 1.26701412 1.38504743 -1.83112528
    H -0.26494583 3.13890416 -1.22770324
    H 2.82951612 4.73178449 2.27288025
    H -0.80171930 5.18844657 -0.00753748
    H 3.75834698 1.95851727 0.34486226
    C -0.33534505 8.17133476 2.69072678
    C -0.38067316 6.99508421 1.74177535
    O 0.77040663 6.18655732 2.01203668
    H -1.20068974 8.82010564 2.52003703
    H 0.57428663 8.75651632 2.53519745
    H -0.35551919 7.83029133 3.72949229
    H -0.35849419 7.33256905 0.69460961
    H -1.29579792 6.40097285 1.89309132
    C -10.75368207 -0.15860944 -2.24990428
    C -9.26074601 -0.38314471 -2.17581942
    O -8.83089835 0.03093259 -0.86903480
    H -11.12406116 -0.46184552 -3.23320880
    H -10.99390750 0.89899923 -2.09942903
    H -11.27135223 -0.74504459 -1.48702252
    H -8.73140155 0.20767691 -2.93851710
    H -9.01091723 -1.44308390 -2.32232312
    C 8.58904482 -4.28374886 -2.75480451
    C 7.33921244 -3.43191098 -2.74949664
    O 6.58658770 -3.78650811 -1.58279293
    H 9.19787741 -4.04486746 -3.63258360
    H 8.33240865 -5.34607158 -2.78822024
    H 9.18633273 -4.09919157 -1.85710752
    H 6.73232316 -3.61315874 -3.64858255
    H 7.58986267 -2.36124248 -2.71539694
    """


@using("dftd4")
@pytest.mark.parametrize(
    "grad, ref_energy",
    (
        (False, -0.06991716314879085),
        (True, -0.06991716314879085),
    ),
)
def test_d4(grad, ref_energy):
    """Adapted from 'test_blypd4' from DFTD4's github page."""
    numbers = np.array([1, 1, 6, 5, 1, 15, 8, 17, 13, 15, 5, 1, 9, 15, 1, 15])
    atoms = [INV_ATOMIC_NUMBERS[num] for num in numbers]
    coords3d = np.array(
        [
            [+2.79274810283778, +3.82998228828316, -2.79287054959216],
            [-1.43447454186833, +0.43418729987882, +5.53854345129809],
            [-3.26268343665218, -2.50644032426151, -1.56631149351046],
            [+2.14548759959147, -0.88798018953965, -2.24592534506187],
            [-4.30233097423181, -3.93631518670031, -0.48930754109119],
            [+0.06107643564880, -3.82467931731366, -2.22333344469482],
            [+0.41168550401858, +0.58105573172764, +5.56854609916143],
            [+4.41363836635653, +3.92515871809283, +2.57961724984000],
            [+1.33707758998700, +1.40194471661647, +1.97530004949523],
            [+3.08342709834868, +1.72520024666801, -4.42666116106828],
            [-3.02346932078505, +0.04438199934191, -0.27636197425010],
            [+1.11508390868455, -0.97617412809198, +6.25462847718180],
            [+0.61938955433011, +2.17903547389232, -6.21279842416963],
            [-2.67491681346835, +3.00175899761859, +1.05038813614845],
            [-4.13181080289514, -2.34226739863660, -3.44356159392859],
            [+2.85007173009739, -2.64884892757600, +0.71010806424206],
        ]
    )
    calc = DFTD4("blyp")
    results = calc.get_energy(atoms, coords3d)
    energy = results["energy"]
    assert energy == pytest.approx(ref_energy)


@using("dftd4")
def test_r2scan3c(aminal_xyz):
    calc = DFTD4("r2scan-3c", model_params={"ga": 2.0, "gc": 1.0})
    geom = geom_loader(aminal_xyz)  # "calculator_000.001.input.xyz")
    res = calc.get_energy(geom.atoms, geom.coords)
    energy = res["energy"]
    # Reference value from Turbomole
    assert energy == pytest.approx(-0.0401878743, abs=5e-6)
