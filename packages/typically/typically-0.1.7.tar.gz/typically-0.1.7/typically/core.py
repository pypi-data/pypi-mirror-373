# ruff: noqa

from builtins import (
    object,
    staticmethod,
    classmethod,
    type,
    super,
    int,
    float,
    complex,
    str,
    bytes,
    bytearray,
    memoryview,
    bool,
    slice,
    tuple,
    list,
    dict,
    set,
    frozenset,
    enumerate,
    range,
    property,
    abs,
    all,
    any,
    ascii,
    bin,
    breakpoint,
    callable,
    chr,
    aiter,
    anext,
    compile,
    delattr,
    dir,
    divmod,
    eval,
    exec,
    filter,
    format,
    getattr,
    globals,
    hasattr,
    hash,
    hex,
    id,
    input,
    iter,
    isinstance,
    issubclass,
    len,
    locals,
    map,
    max,
    min,
    next,
    oct,
    open,
    ord,
    print,
    pow,
    quit,
    reversed,
    repr,
    round,
    setattr,
    sorted,
    sum,
    vars,
    zip,
    BaseException,
    GeneratorExit,
    KeyboardInterrupt,
    SystemExit,
    Exception,
    StopIteration,
    OSError,
    EnvironmentError,
    IOError,
    ArithmeticError,
    AssertionError,
    AttributeError,
    BufferError,
    EOFError,
    ImportError,
    LookupError,
    MemoryError,
    NameError,
    ReferenceError,
    RuntimeError,
    StopAsyncIteration,
    SyntaxError,
    SystemError,
    TypeError,
    ValueError,
    FloatingPointError,
    OverflowError,
    ZeroDivisionError,
    ModuleNotFoundError,
    IndexError,
    KeyError,
    UnboundLocalError,
    BlockingIOError,
    ChildProcessError,
    ConnectionError,
    BrokenPipeError,
    ConnectionAbortedError,
    ConnectionRefusedError,
    ConnectionResetError,
    FileExistsError,
    FileNotFoundError,
    InterruptedError,
    IsADirectoryError,
    NotADirectoryError,
    PermissionError,
    ProcessLookupError,
    TimeoutError,
    NotImplementedError,
    RecursionError,
    IndentationError,
    TabError,
    UnicodeError,
    UnicodeDecodeError,
    UnicodeEncodeError,
    UnicodeTranslateError,
    Warning,
    UserWarning,
    DeprecationWarning,
    SyntaxWarning,
    RuntimeWarning,
    FutureWarning,
    PendingDeprecationWarning,
    ImportWarning,
    UnicodeWarning,
    BytesWarning,
    ResourceWarning,
    EncodingWarning,
    BaseExceptionGroup,
    ExceptionGroup,
)

from re import (
    Pattern,
    Match,
    # Scanner # experimental
)

from abc import (
    ABC,
    abstractmethod,
)
from collections import (
    OrderedDict,
    # namedtuple,
    Counter,
    ChainMap,
)

from collections.abc import (
    Hashable,
    Awaitable,
    Coroutine,
    AsyncIterable,
    AsyncIterator,
    AsyncGenerator,
    Iterable,
    Iterator,
    Reversible,
    Generator,
    Sized,
    Container,
    Collection,
    Callable,
    Set,
    MutableSet,
    Mapping,
    MappingView,
    KeysView,
    ItemsView,
    ValuesView,
    MutableMapping,
    Sequence,
    # ByteString, # unfinished
    MutableSequence,
)
from typing import (
    IO,
    TYPE_CHECKING,
    Annotated,
    Any,
    AnyStr,
    ClassVar,
    Deque,
    Generic,
    Literal,
    LiteralString,
    NamedTuple,
    NewType,
    Optional,
    ParamSpec,
    ParamSpecArgs,
    ParamSpecKwargs,
    Protocol,
    Self,
    TypeAlias,
    TypeVar,
    Union,
    cast,
    get_args,
    get_origin,
    get_overloads,
    get_type_hints,
    overload,
    reveal_type,
    runtime_checkable,
)
from dataclasses import (
    dataclass,
    field,
)
from datetime import (
    datetime,
    timedelta,
)
from pathlib import Path
from enum import (
    Enum,
    StrEnum,
    EnumType,
    IntEnum,
    # Flag,
)
from functools import (
    cache,
    cached_property,
    lru_cache,
    partial,
    partialmethod,
)
from http import (
    HTTPMethod,
    HTTPStatus,
)
from queue import (
    Empty,
    Full,
    LifoQueue,
    Queue,
    SimpleQueue,
    PriorityQueue,
)

from typing_extensions import (
    TypedDict,
    DefaultDict,
    Deque,
    get_annotations,
    get_original_bases,
    get_protocol_members,
    is_protocol,
)

from types import (
    FunctionType,
    LambdaType,
    CodeType,
    MappingProxyType,
    GeneratorType,
    AsyncGeneratorType,
    MethodDescriptorType,
    ClassMethodDescriptorType,
    GetSetDescriptorType,
    MemberDescriptorType,
    DynamicClassAttribute,
    coroutine,
    GenericAlias,
    UnionType,
    EllipsisType,
    NoneType,
    NotImplementedType,
)

T = TypeVar("T")

Unknown: TypeAlias = Any

Incomplete: TypeAlias = Any

IndentCharacter: TypeAlias = Literal["space", "tab"]

PathKind: TypeAlias = Literal["file", "dir", "socket"]

StrOrPath: TypeAlias = str | Path

T_StrOrPath = TypeVar("T_StrOrPath", bound=StrOrPath)
