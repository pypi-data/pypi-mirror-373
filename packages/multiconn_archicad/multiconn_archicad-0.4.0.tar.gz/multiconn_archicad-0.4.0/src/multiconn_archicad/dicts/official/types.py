from __future__ import annotations
from typing import List, Literal, TypedDict
from typing_extensions import NotRequired

### This file is automatically generated and split. Do not edit directly. ###


class AddOnCommandId(TypedDict):
    commandNamespace: str
    commandName: str


class AddOnCommandIdArrayItem(TypedDict):
    addOnCommandId: AddOnCommandId


AddOnCommandIds = List[AddOnCommandIdArrayItem]


class AddOnCommandParameters(TypedDict):
    pass


class AddOnCommandResponse(TypedDict):
    pass


AttributeIndex = float


AttributeType = Literal[
    "BuildingMaterial",
    "Composite",
    "Fill",
    "Layer",
    "LayerCombination",
    "Line",
    "PenTable",
    "Profile",
    "Surface",
    "ZoneCategory",
]


AttributeName = str


AttributeFolderName = str


AttributeFolderPath = List[AttributeFolderName]


class AttributeFolderCreationParameters(TypedDict):
    attributeType: AttributeType
    path: AttributeFolderPath


AppearanceType = Literal["ScaleWithPlan", "ScaleIndependent"]


PenIndex = int


FillPattern = int


FillTypeId = Literal[
    "Vector", "Symbol", "Solid", "Empty", "LinearGradient", "RadialGradient", "Image"
]


MaterialTypeId = Literal[
    "General", "Simple", "Matte", "Metal", "Plastic", "Glass", "Glowing", "Constant"
]


class ProfileModifier(TypedDict):
    name: str
    value: float


class ProfileModifierListItem(TypedDict):
    profileModifier: ProfileModifier


ProfileModifierList = List[ProfileModifierListItem]


class Texture(TypedDict):
    name: str


LineType = Literal["SolidLine", "DashedLine", "SymbolLine"]


LineItemType = Literal[
    "IllegalItemType",
    "SeparatorItemType",
    "CenterDotItemType",
    "CenterLineItemType",
    "DotItemType",
    "RightAngleItemType",
    "ParallelItemType",
    "LineItemType",
    "CircItemType",
    "ArcItemType",
]


class DashItem(TypedDict):
    dash: float
    gap: float


class DashItemWrapperItem(TypedDict):
    dashItem: DashItem


class Point2D(TypedDict):
    x: float
    y: float


NavigatorItemType = Literal[
    "UndefinedItem",
    "ProjectMapRootItem",
    "StoryItem",
    "SectionItem",
    "ElevationItem",
    "InteriorElevationItem",
    "WorksheetItem",
    "DetailItem",
    "DocumentFrom3DItem",
    "Perspective3DItem",
    "Axonometry3DItem",
    "CameraSetItem",
    "CameraItem",
    "ScheduleItem",
    "ProjectIndexItem",
    "TextListItem",
    "GraphicListItem",
    "InfoItem",
    "HelpItem",
    "FolderItem",
    "LayoutBookRootItem",
    "SubsetItem",
    "LayoutItem",
    "DrawingItem",
    "MasterFolderItem",
    "MasterLayoutItem",
]


NavigatorItemMapType = Literal["ProjectMap", "ViewMap", "MyViewMap", "LayoutBook"]


class PublisherSetId(TypedDict):
    type: Literal["PublisherSets"]
    name: str


class OtherNavigatorTreeId(TypedDict):
    type: NavigatorItemMapType


NavigatorTreeId = PublisherSetId | OtherNavigatorTreeId


class UserDefinedPropertyUserId(TypedDict):
    type: Literal["UserDefined"]
    localizedName: List[str]


class BuiltInPropertyUserId(TypedDict):
    type: Literal["BuiltIn"]
    nonLocalizedName: str


PropertyUserId = UserDefinedPropertyUserId | BuiltInPropertyUserId


PropertyUserIds = List[PropertyUserId]


PropertyType = Literal["UserDefined", "BuiltIn"]


class NormalNumberPropertyValue(TypedDict):
    type: Literal["number"]
    status: Literal["normal"]
    value: float


class NormalIntegerPropertyValue(TypedDict):
    type: Literal["integer"]
    status: Literal["normal"]
    value: int


class NormalStringPropertyValue(TypedDict):
    type: Literal["string"]
    status: Literal["normal"]
    value: str


class NormalBooleanPropertyValue(TypedDict):
    type: Literal["boolean"]
    status: Literal["normal"]
    value: bool


class NormalLengthPropertyValue(TypedDict):
    type: Literal["length"]
    status: Literal["normal"]
    value: float


class NormalAreaPropertyValue(TypedDict):
    type: Literal["area"]
    status: Literal["normal"]
    value: float


class NormalVolumePropertyValue(TypedDict):
    type: Literal["volume"]
    status: Literal["normal"]
    value: float


class NormalAnglePropertyValue(TypedDict):
    type: Literal["angle"]
    status: Literal["normal"]
    value: float


class NormalNumberListPropertyValue(TypedDict):
    type: Literal["numberList"]
    status: Literal["normal"]
    value: List[float]


class NormalIntegerListPropertyValue(TypedDict):
    type: Literal["integerList"]
    status: Literal["normal"]
    value: List[int]


class NormalStringListPropertyValue(TypedDict):
    type: Literal["stringList"]
    status: Literal["normal"]
    value: List[str]


class NormalBooleanListPropertyValue(TypedDict):
    type: Literal["booleanList"]
    status: Literal["normal"]
    value: List[bool]


class NormalLengthListPropertyValue(TypedDict):
    type: Literal["lengthList"]
    status: Literal["normal"]
    value: List[float]


class NormalAreaListPropertyValue(TypedDict):
    type: Literal["areaList"]
    status: Literal["normal"]
    value: List[float]


class NormalVolumeListPropertyValue(TypedDict):
    type: Literal["volumeList"]
    status: Literal["normal"]
    value: List[float]


class NormalAngleListPropertyValue(TypedDict):
    type: Literal["angleList"]
    status: Literal["normal"]
    value: List[float]


PropertyValueType = Literal[
    "number",
    "integer",
    "string",
    "boolean",
    "length",
    "area",
    "volume",
    "angle",
    "numberList",
    "integerList",
    "stringList",
    "booleanList",
    "lengthList",
    "areaList",
    "volumeList",
    "angleList",
    "singleEnum",
    "multiEnum",
]


class UserUndefinedPropertyValue(TypedDict):
    type: PropertyValueType
    status: Literal["userUndefined"]


class NotAvailablePropertyValue(TypedDict):
    type: PropertyValueType
    status: Literal["notAvailable"]


class NotEvaluatedPropertyValue(TypedDict):
    type: PropertyValueType
    status: Literal["notEvaluated"]


class DisplayValueEnumId(TypedDict):
    type: Literal["displayValue"]
    displayValue: str


class NonLocalizedValueEnumId(TypedDict):
    type: Literal["nonLocalizedValue"]
    nonLocalizedValue: str


EnumValueId = DisplayValueEnumId | NonLocalizedValueEnumId


class EnumValueIdWrapperItem(TypedDict):
    enumValueId: EnumValueId


EnumValueIds = List[EnumValueIdWrapperItem]


class PossibleEnumValue(TypedDict):
    enumValueId: EnumValueId
    displayValue: str
    nonLocalizedValue: NotRequired[str]


class PossibleEnumValuesArrayItem(TypedDict):
    enumValue: PossibleEnumValue


PossibleEnumValues = List[PossibleEnumValuesArrayItem]


class Error(TypedDict):
    code: int
    message: str


class ErrorItem(TypedDict):
    error: Error


class SuccessfulExecutionResult(TypedDict):
    success: Literal[True]


class FailedExecutionResult(TypedDict):
    success: Literal[False]
    error: Error


ExecutionResult = SuccessfulExecutionResult | FailedExecutionResult


ExecutionResults = List[ExecutionResult]


Guid = str


Date = str


class ElementId(TypedDict):
    guid: Guid


class ElementIdArrayItem(TypedDict):
    elementId: ElementId


Elements = List[ElementIdArrayItem]


ElementType = Literal[
    "Wall",
    "Column",
    "Beam",
    "Window",
    "Door",
    "Object",
    "Lamp",
    "Slab",
    "Roof",
    "Mesh",
    "Zone",
    "CurtainWall",
    "Shell",
    "Skylight",
    "Morph",
    "Stair",
    "Railing",
    "Opening",
]


ElementTypes = List[ElementType]


class TypeOfElement(TypedDict):
    elementId: ElementId
    elementType: ElementType


class TypeOfElementWrapperItem(TypedDict):
    typeOfElement: TypeOfElement


TypeOfElementOrError = TypeOfElementWrapperItem | ErrorItem


TypeOfElementOrErrorList = List[TypeOfElementOrError]


class ElementsWrapper(TypedDict):
    elements: Elements


ElementsOrError = ElementsWrapper | ErrorItem


ElementsOrErrorArray = List[ElementsOrError]


class Image(TypedDict):
    content: str


class ImageWrapperItem(TypedDict):
    image: Image


ImageOrError = ImageWrapperItem | ErrorItem


Images = List[ImageOrError]


class FolderParameters(TypedDict):
    name: str


class BoundingBox2D(TypedDict):
    xMin: float
    yMin: float
    xMax: float
    yMax: float


class BoundingBox2DWrapperItem(TypedDict):
    boundingBox2D: BoundingBox2D


BoundingBox2DOrError = BoundingBox2DWrapperItem | ErrorItem


BoundingBoxes2D = List[BoundingBox2DOrError]


class BoundingBox3D(TypedDict):
    xMin: float
    yMin: float
    zMin: float
    xMax: float
    yMax: float
    zMax: float


class BoundingBox3DWrapperItem(TypedDict):
    boundingBox3D: BoundingBox3D


BoundingBox3DOrError = BoundingBox3DWrapperItem | ErrorItem


BoundingBoxes3D = List[BoundingBox3DOrError]


class RGBColor(TypedDict):
    red: float
    green: float
    blue: float


NumberingStyle = Literal["Undefined", "abc", "ABC", "1", "01", "001", "0001", "noID"]


class Subset(TypedDict):
    name: str
    includeToIDSequence: bool
    customNumbering: bool
    continueNumbering: bool
    useUpperPrefix: bool
    addOwnPrefix: bool
    customNumber: str
    autoNumber: str
    numberingStyle: NumberingStyle
    startAt: int
    ownPrefix: str


class LayoutParameters(TypedDict):
    horizontalSize: float
    verticalSize: float
    leftMargin: float
    topMargin: float
    rightMargin: float
    bottomMargin: float
    customLayoutNumber: str
    customLayoutNumbering: bool
    doNotIncludeInNumbering: bool
    displayMasterLayoutBelow: bool
    layoutPageNumber: int
    actPageIndex: int
    currentRevisionId: str
    currentFinalRevisionId: str
    hasIssuedRevision: bool
    hasActualRevision: bool


class ComponentId(TypedDict):
    guid: Guid


class ElementComponentId(TypedDict):
    elementId: ElementId
    componentId: ComponentId


class ElementComponentIdArrayItem(TypedDict):
    elementComponentId: ElementComponentId


ElementComponents = List[ElementComponentIdArrayItem]


class ElementComponentsWrapper(TypedDict):
    elementComponents: ElementComponents


ElementComponentsOrError = ElementComponentsWrapper | ErrorItem


ElementComponentsOrErrorArray = List[ElementComponentsOrError]


class AttributeFolderId(TypedDict):
    guid: Guid


class AttributeFolderIdWrapperItem(TypedDict):
    attributeFolderId: AttributeFolderId


AttributeFolderIds = List[AttributeFolderIdWrapperItem]


class AttributeId(TypedDict):
    guid: Guid


class AttributeIdWrapperItem(TypedDict):
    attributeId: AttributeId


AttributeIdOrError = AttributeIdWrapperItem | ErrorItem


AttributeIds = List[AttributeIdWrapperItem]


class AttributeIndexAndGuid(TypedDict):
    guid: Guid
    index: AttributeIndex


class AttributeIndexAndGuidWrapperItem(TypedDict):
    attributeIndexAndGuid: AttributeIndexAndGuid


AttributeIndexAndGuidOrError = AttributeIndexAndGuidWrapperItem | ErrorItem


AttributeIndicesAndGuids = List[AttributeIndexAndGuidOrError]


class AttributeFolder(TypedDict):
    attributeType: AttributeType
    path: AttributeFolderPath
    attributeFolderId: AttributeFolderId
    attributeIds: AttributeIds
    attributeFolderIds: AttributeFolderIds


class AttributeFolderWrapperItem(TypedDict):
    attributeFolder: AttributeFolder


AttributeFolderOrError = AttributeFolderWrapperItem | ErrorItem


AttributeFolders = List[AttributeFolderOrError]


class AttributeFolderRenameParameters(TypedDict):
    attributeFolderId: AttributeFolderId
    newName: AttributeFolderName


class AttributeHeader(TypedDict):
    attributeId: AttributeId
    name: AttributeName


class AttributeHeaderArrayItem(TypedDict):
    attribute: AttributeHeader


AttributeHeaders = List[AttributeHeaderArrayItem]


class LayerAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    intersectionGroupNr: int
    isLocked: bool
    isHidden: bool
    isWireframe: bool


class LayerAttributeWrapperItem(TypedDict):
    layerAttribute: LayerAttribute


LayerAttributeOrError = LayerAttributeWrapperItem | ErrorItem


LayerAttributes = List[LayerAttributeOrError]


class FillAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    subType: FillTypeId
    pattern: FillPattern
    appearanceType: AppearanceType


class FillAttributeWrapperItem(TypedDict):
    fillAttribute: FillAttribute


FillAttributeOrError = FillAttributeWrapperItem | ErrorItem


FillAttributes = List[FillAttributeOrError]


class SurfaceAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    materialType: MaterialTypeId
    ambientReflection: int
    diffuseReflection: int
    specularReflection: int
    transparencyAttenuation: int
    emissionAttenuation: int
    surfaceColor: RGBColor
    specularColor: RGBColor
    emissionColor: RGBColor
    fillId: AttributeIdOrError
    transparency: int
    shine: int
    texture: NotRequired[Texture]


class SurfaceAttributeWrapperItem(TypedDict):
    surfaceAttribute: SurfaceAttribute


SurfaceAttributeOrError = SurfaceAttributeWrapperItem | ErrorItem


SurfaceAttributes = List[SurfaceAttributeOrError]


class ProfileAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    useWith: ElementTypes
    width: float
    height: float
    minimumWidth: float
    minimumHeight: float
    widthStretchable: bool
    heightStretchable: bool
    hasCoreSkin: bool
    profileModifiers: ProfileModifierList


class ProfileAttributeWrapperItem(TypedDict):
    profileAttribute: ProfileAttribute


ProfileAttributeOrError = ProfileAttributeWrapperItem | ErrorItem


ProfileAttributes = List[ProfileAttributeOrError]


class CompositeLine(TypedDict):
    lineId: AttributeIdOrError
    linePenIndex: NotRequired[PenIndex]


class CompositeLineListItem(TypedDict):
    compositeLine: CompositeLine


CompositeLineList = List[CompositeLineListItem]


class CompositeSkin(TypedDict):
    buildingMaterialId: AttributeIdOrError
    framePenIndex: NotRequired[PenIndex]
    thickness: float
    isCore: bool
    isFinish: bool


class CompositeSkinListItem(TypedDict):
    compositeSkin: CompositeSkin


CompositeSkinList = List[CompositeSkinListItem]


class CompositeAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    totalThickness: float
    compositeSkins: CompositeSkinList
    compositeLines: CompositeLineList
    useWith: ElementTypes


class CompositeAttributeWrapperItem(TypedDict):
    compositeAttribute: CompositeAttribute


CompositeAttributeOrError = CompositeAttributeWrapperItem | ErrorItem


CompositeAttributes = List[CompositeAttributeOrError]


class Pen(TypedDict):
    index: PenIndex
    color: RGBColor
    weight: float
    description: str


class PenArrayItem(TypedDict):
    pen: Pen


Pens = List[PenArrayItem]


class LineItem(TypedDict):
    lineItemType: LineItemType
    centerOffset: float
    length: float
    begPosition: Point2D
    endPosition: Point2D
    radius: float
    begAngle: float
    endAngle: float


class LineItemWrapperItem(TypedDict):
    lineItem: LineItem


DashOrLineItem = DashItemWrapperItem | LineItemWrapperItem


LineItems = List[DashOrLineItem]


class LineAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    appearanceType: AppearanceType
    displayScale: float
    period: float
    height: float
    lineType: LineType
    lineItems: NotRequired[LineItems]


class LineAttributeWrapperItem(TypedDict):
    lineAttribute: LineAttribute


LineAttributeOrError = LineAttributeWrapperItem | ErrorItem


LineAttributes = List[LineAttributeOrError]


class ZoneCategoryAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    categoryCode: str
    stampName: str
    stampMainGuid: Guid
    stampRevisionGuid: Guid
    color: RGBColor


class ZoneCategoryAttributeWrapperItem(TypedDict):
    zoneCategoryAttribute: ZoneCategoryAttribute


ZoneCategoryAttributeOrError = ZoneCategoryAttributeWrapperItem | ErrorItem


ZoneCategoryAttributes = List[ZoneCategoryAttributeOrError]


class BuildingMaterialAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    id: str
    connectionPriority: int
    cutFillId: AttributeIdOrError
    cutFillPenIndex: PenIndex
    cutSurfaceId: AttributeIdOrError


class BuildingMaterialAttributeWrapperItem(TypedDict):
    buildingMaterialAttribute: BuildingMaterialAttribute


BuildingMaterialAttributeOrError = BuildingMaterialAttributeWrapperItem | ErrorItem


BuildingMaterialAttributes = List[BuildingMaterialAttributeOrError]


class LayerCombinationAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    layerAttributeIds: AttributeIds


class LayerCombinationAttributeWrapperItem(TypedDict):
    layerCombinationAttribute: LayerCombinationAttribute


LayerCombinationAttributeOrError = LayerCombinationAttributeWrapperItem | ErrorItem


class ClassificationSystemId(TypedDict):
    guid: Guid


class ClassificationSystemIdArrayItem(TypedDict):
    classificationSystemId: ClassificationSystemId


ClassificationSystemIds = List[ClassificationSystemIdArrayItem]


class ClassificationItemId(TypedDict):
    guid: Guid


class ClassificationItemIdArrayItem(TypedDict):
    classificationItemId: ClassificationItemId


ClassificationItemIds = List[ClassificationItemIdArrayItem]


class ClassificationId(TypedDict):
    classificationSystemId: ClassificationSystemId
    classificationItemId: NotRequired[ClassificationItemId]


class ClassificationIdWrapperItem(TypedDict):
    classificationId: ClassificationId


ClassificationIdOrError = ClassificationIdWrapperItem | ErrorItem


ClassificationIdsOrErrors = List[ClassificationIdOrError]


class ElementClassification(TypedDict):
    elementId: ElementId
    classificationId: ClassificationId


ElementClassifications = List[ElementClassification]


class ElementClassificationWrapperItem(TypedDict):
    classificationIds: ClassificationIdsOrErrors


ElementClassificationOrError = ElementClassificationWrapperItem | ErrorItem


ElementClassificationsOrErrors = List[ElementClassificationOrError]


class ClassificationItemDetails(TypedDict):
    classificationItemId: ClassificationItemId
    id: str
    name: str
    description: str


class ClassificationItemWrapperItem(TypedDict):
    classificationItem: ClassificationItemDetails


ClassificationItemOrError = ClassificationItemWrapperItem | ErrorItem


class ClassificationSystem(TypedDict):
    classificationSystemId: ClassificationSystemId
    name: str
    description: str
    source: str
    version: str
    date: Date


ClassificationSystems = List[ClassificationSystem]


class ClassificationSystemWrapperItem(TypedDict):
    classificationSystem: ClassificationSystem


ClassificationSystemOrError = ClassificationSystemWrapperItem | ErrorItem


ClassificationSystemsOrErrors = List[ClassificationSystemOrError]


class NavigatorItemId(TypedDict):
    guid: Guid


class NavigatorItemIdWrapperItem(TypedDict):
    navigatorItemId: NavigatorItemId


NavigatorItemIds = List[NavigatorItemIdWrapperItem]


class GeneralNavigatorItemData(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str


class NavigatorItemIdAndType(TypedDict):
    navigatorItemType: NavigatorItemType
    navigatorItemId: NavigatorItemId


class NavigatorItemIdAndTypeWrapperItem(TypedDict):
    navigatorItemIdAndType: NavigatorItemIdAndType


NavigatorItemIdAndTypeOrError = NavigatorItemIdAndTypeWrapperItem | ErrorItem


NavigatorItemIdAndTypeList = List[NavigatorItemIdAndTypeOrError]


class DetailNavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str


class DetailNavigatorItemWrapperItem(TypedDict):
    detailNavigatorItem: DetailNavigatorItem


DetailNavigatorItemOrError = DetailNavigatorItemWrapperItem | ErrorItem


DetailNavigatorItems = List[DetailNavigatorItemOrError]


class Document3DNavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str


class Document3DNavigatorItemWrapperItem(TypedDict):
    document3DNavigatorItem: Document3DNavigatorItem


Document3DNavigatorItemOrError = Document3DNavigatorItemWrapperItem | ErrorItem


Document3DNavigatorItems = List[Document3DNavigatorItemOrError]


class ElevationNavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str


class ElevationNavigatorItemWrapperItem(TypedDict):
    elevationNavigatorItem: ElevationNavigatorItem


ElevationNavigatorItemOrError = ElevationNavigatorItemWrapperItem | ErrorItem


ElevationNavigatorItems = List[ElevationNavigatorItemOrError]


class InteriorElevationNavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str


class InteriorElevationNavigatorItemWrapperItem(TypedDict):
    interiorElevationNavigatorItem: InteriorElevationNavigatorItem


InteriorElevationNavigatorItemOrError = (
    InteriorElevationNavigatorItemWrapperItem | ErrorItem
)


InteriorElevationNavigatorItems = List[InteriorElevationNavigatorItemOrError]


class SectionNavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str


class SectionNavigatorItemWrapperItem(TypedDict):
    sectionNavigatorItem: SectionNavigatorItem


SectionNavigatorItemOrError = SectionNavigatorItemWrapperItem | ErrorItem


SectionNavigatorItems = List[SectionNavigatorItemOrError]


class StoryNavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str
    floorLevel: float
    floorNumber: float


class StoryNavigatorItemWrapperItem(TypedDict):
    storyNavigatorItem: StoryNavigatorItem


StoryNavigatorItemOrError = StoryNavigatorItemWrapperItem | ErrorItem


StoryNavigatorItems = List[StoryNavigatorItemOrError]


class WorksheetNavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str


class WorksheetNavigatorItemWrapperItem(TypedDict):
    worksheetNavigatorItem: WorksheetNavigatorItem


WorksheetNavigatorItemOrError = WorksheetNavigatorItemWrapperItem | ErrorItem


WorksheetNavigatorItems = List[WorksheetNavigatorItemOrError]


class BuiltInContainerNavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str
    contentIds: NavigatorItemIds


class BuiltInContainerNavigatorItemWrapperItem(TypedDict):
    builtInContainerNavigatorItem: BuiltInContainerNavigatorItem


BuiltInContainerNavigatorItemOrError = BuiltInContainerNavigatorItemWrapperItem | ErrorItem


BuiltInContainerNavigatorItems = List[BuiltInContainerNavigatorItemOrError]


class PropertyId(TypedDict):
    guid: Guid


class PropertyIdArrayItem(TypedDict):
    propertyId: PropertyId


PropertyIds = List[PropertyIdArrayItem]


class PropertyGroupId(TypedDict):
    guid: Guid


class PropertyGroupIdArrayItem(TypedDict):
    propertyGroupId: PropertyGroupId


PropertyGroupIds = List[PropertyGroupIdArrayItem]


PropertyIdOrError = PropertyIdArrayItem | ErrorItem


PropertyIdsOrErrors = List[PropertyIdOrError]


class PropertyGroup(TypedDict):
    propertyGroupId: PropertyGroupId
    name: str


class PropertyGroupWrapperItem(TypedDict):
    propertyGroup: PropertyGroup


PropertyGroupOrError = PropertyGroupWrapperItem | ErrorItem


PropertyGroupsOrErrors = List[PropertyGroupOrError]


class NormalSingleEnumPropertyValue(TypedDict):
    type: Literal["singleEnum"]
    status: Literal["normal"]
    value: EnumValueId


class NormalMultiEnumPropertyValue(TypedDict):
    type: Literal["multiEnum"]
    status: Literal["normal"]
    value: EnumValueIds


NormalOrUserUndefinedPropertyValue = (
    NormalNumberPropertyValue
    | NormalIntegerPropertyValue
    | NormalStringPropertyValue
    | NormalBooleanPropertyValue
    | NormalLengthPropertyValue
    | NormalAreaPropertyValue
    | NormalVolumePropertyValue
    | NormalAnglePropertyValue
    | NormalNumberListPropertyValue
    | NormalIntegerListPropertyValue
    | NormalStringListPropertyValue
    | NormalBooleanListPropertyValue
    | NormalLengthListPropertyValue
    | NormalAreaListPropertyValue
    | NormalVolumeListPropertyValue
    | NormalAngleListPropertyValue
    | NormalSingleEnumPropertyValue
    | NormalMultiEnumPropertyValue
    | UserUndefinedPropertyValue
)


PropertyValue = (
    NormalOrUserUndefinedPropertyValue
    | NotAvailablePropertyValue
    | NotEvaluatedPropertyValue
)


class PropertyValueWrapperItem(TypedDict):
    propertyValue: PropertyValue


PropertyValueOrErrorItem = PropertyValueWrapperItem | ErrorItem


PropertyValues = List[PropertyValueOrErrorItem]


class PropertyValuesWrapperItem(TypedDict):
    propertyValues: PropertyValues


PropertyValuesOrError = PropertyValuesWrapperItem | ErrorItem


PropertyValuesOrErrorArray = List[PropertyValuesOrError]


class ElementPropertyValue(TypedDict):
    elementId: ElementId
    propertyId: PropertyId
    propertyValue: NormalOrUserUndefinedPropertyValue


ElementPropertyValues = List[ElementPropertyValue]


class PropertyIdsOfElement(TypedDict):
    elementId: ElementId
    propertyIds: PropertyIds


class PropertyIdsOfElementWrapperItem(TypedDict):
    propertyIdsOfElement: PropertyIdsOfElement


PropertyIdsOfElementOrError = PropertyIdsOfElementWrapperItem | ErrorItem


PropertyIdsOfElementOrErrorArray = List[PropertyIdsOfElementOrError]


class RenameNavigatorItemByName(TypedDict):
    navigatorItemId: NavigatorItemId
    newName: str


class RenameNavigatorItemById(TypedDict):
    navigatorItemId: NavigatorItemId
    newId: str


class RenameNavigatorItemByNameAndId(TypedDict):
    navigatorItemId: NavigatorItemId
    newName: str
    newId: str


class PenTableAttribute(TypedDict):
    attributeId: AttributeId
    name: AttributeName
    pens: Pens


class PenTableAttributeWrapperItem(TypedDict):
    penTableAttribute: PenTableAttribute


PenTableAttributeOrError = PenTableAttributeWrapperItem | ErrorItem


PenTableAttributes = List[PenTableAttributeOrError]


LayerCombinationAttributes = List[LayerCombinationAttributeOrError]


class ClassificationItemAvailability(TypedDict):
    classificationItemId: ClassificationItemId
    availableProperties: PropertyIds


class ClassificationItemAvailabilityWrapperItem(TypedDict):
    classificationItemAvailability: ClassificationItemAvailability


ClassificationItemAvailabilityOrError = (
    ClassificationItemAvailabilityWrapperItem | ErrorItem
)


ClassificationItemAvailabilityList = List[ClassificationItemAvailabilityOrError]


class PropertyDefinitionAvailability(TypedDict):
    propertyId: PropertyId
    availableClassifications: ClassificationItemIds


class PropertyDefinitionAvailabilityWrapperItem(TypedDict):
    propertyDefinitionAvailability: PropertyDefinitionAvailability


PropertyDefinitionAvailabilityOrError = (
    PropertyDefinitionAvailabilityWrapperItem | ErrorItem
)


PropertyDefinitionAvailabilityList = List[PropertyDefinitionAvailabilityOrError]


ClassificationItemsOrErrors = List[ClassificationItemOrError]


class PropertyBasicDefaultValue(TypedDict):
    basicDefaultValue: PropertyValue


PropertyDefaultValue = PropertyBasicDefaultValue


class PropertyDefinition(TypedDict):
    propertyId: NotRequired[PropertyId]
    group: PropertyGroup
    name: str
    description: str
    isEditable: bool
    type: str
    possibleEnumValues: NotRequired[PossibleEnumValues]
    defaultValue: NotRequired[PropertyDefaultValue]


class PropertyDefinitionWrapperItem(TypedDict):
    propertyDefinition: PropertyDefinition


PropertyDefinitionOrError = PropertyDefinitionWrapperItem | ErrorItem


PropertyDefinitionsOrErrors = List[PropertyDefinitionOrError]


class AttributeFolderStructureArrayItem(TypedDict):
    attributeFolder: AttributeFolderStructure


AttributeFolderStructures = List[AttributeFolderStructureArrayItem]


class AttributeFolderStructure(TypedDict):
    attributeFolderId: AttributeFolderId
    name: AttributeFolderName
    attributes: NotRequired[AttributeHeaders]
    subfolders: NotRequired[AttributeFolderStructures]


AttributeFolderStructureOrError = AttributeFolderStructure | ErrorItem


class ClassificationItemArrayItem(TypedDict):
    classificationItem: ClassificationItemInTree


ClassificationItems = List[ClassificationItemArrayItem]


class ClassificationItemInTree(TypedDict):
    classificationItemId: ClassificationItemId
    id: str
    name: str
    description: str
    children: NotRequired[ClassificationItems]


class NavigatorItemArrayItem(TypedDict):
    navigatorItem: NavigatorItem


NavigatorItems = List[NavigatorItemArrayItem]


class NavigatorItem(TypedDict):
    navigatorItemId: NavigatorItemId
    prefix: str
    name: str
    type: NavigatorItemType
    sourceNavigatorItemId: NotRequired[NavigatorItemId]
    children: NotRequired[NavigatorItems]


class NavigatorTree(TypedDict):
    rootItem: NavigatorItem
