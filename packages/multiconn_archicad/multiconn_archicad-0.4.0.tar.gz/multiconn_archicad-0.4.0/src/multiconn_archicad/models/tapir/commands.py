from __future__ import annotations
from typing import Annotated, List

from pydantic import BaseModel, ConfigDict, Field

### This file is automatically generated and split. Do not edit directly. ###



from .types import (
    Attribute,
    AttributeIdArrayItem,
    AttributePropertyValue,
    AttributeType,
    BoundingBox3DArrayItem,
    BuildingMaterialDataArrayItem,
    ClassificationSystemIdArrayItem,
    ColumnsDatum,
    Comment,
    CompositeDataArrayItem,
    Conflict,
    ConnectedElement,
    DatabaseIdArrayItem,
    DetailsOfElement,
    DocumentRevision,
    ElementClassification,
    ElementClassificationItemArray,
    ElementFilter,
    ElementIdArrayItem,
    ElementPropertyValue,
    ElementType,
    ElementsWithDetail,
    ElementsWithGDLParameter,
    ElementsWithMoveVector,
    ErrorItem,
    FailedExecutionResult,
    FavoritesFromElement,
    FieldModel,
    GDLParameterList,
    HighlightedColor,
    Hotlink,
    Issue,
    IssueCommentStatus,
    IssueElementType,
    IssueId,
    IssueIdArrayItem,
    LayerDataArrayItem,
    Library,
    MeshesDatum,
    ModelViewOption,
    NavigatorItemIdArrayItem,
    NavigatorItemIdsWithViewSetting,
    ObjectsDatum,
    PolylinesDatum,
    ProjectLocation,
    Property,
    PropertyDefinitionArrayItem,
    PropertyDetails,
    PropertyGroupArrayItem,
    PropertyGroupIdArrayItem,
    PropertyIdArrayItem,
    PropertyValuesArrayItem,
    RevisionChange,
    RevisionChangesArrayItem,
    RevisionIssue,
    SlabsDatum,
    StoryParameters,
    StorySettings,
    Subelement,
    SuccessfulExecutionResult,
    SurveyPoint,
    ViewSettings,
    ViewTransformations,
    WindowType,
    ZonesDatum,
)


class GetAddOnVersionResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    version: Annotated[
        str, Field(description='Version number in the form of "1.1.1".', min_length=1)
    ]


class GetArchicadLocationResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    archicadLocation: Annotated[
        str,
        Field(
            description="The location of the Archicad executable in the filesystem.",
            min_length=1,
        ),
    ]


class GetCurrentWindowTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    currentWindowType: WindowType


class GetProjectInfoResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    isUntitled: Annotated[
        bool, Field(description="True, if the project is not saved yet.")
    ]
    isTeamwork: Annotated[
        bool,
        Field(description="True, if the project is a Teamwork (BIMcloud) project."),
    ]
    projectLocation: Annotated[
        str | None,
        Field(
            description="The location of the project in the filesystem or a BIMcloud project reference.",
            min_length=1,
        ),
    ] = None
    projectPath: Annotated[
        str | None,
        Field(
            description="The path of the project. A filesystem path or a BIMcloud server relative path.",
            min_length=1,
        ),
    ] = None
    projectName: Annotated[
        str | None, Field(description="The name of the project.", min_length=1)
    ] = None


class GetProjectInfoFieldsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    fields: Annotated[
        List[FieldModel], Field(description="A list of project info fields.")
    ]


class SetProjectInfoFieldParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectInfoId: Annotated[
        str, Field(description="The id of the project info field.", min_length=1)
    ]
    projectInfoValue: Annotated[
        str, Field(description="The new value of the project info field.", min_length=1)
    ]


class GetStoriesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    firstStory: Annotated[int, Field(description="First story index.")]
    lastStory: Annotated[int, Field(description="Last story index.")]
    actStory: Annotated[
        int, Field(description="Actual (currently visible in 2D) story index.")
    ]
    skipNullFloor: Annotated[
        bool,
        Field(
            description="Floor indices above ground-floor level may start with 1 instead of 0."
        ),
    ]
    stories: Annotated[
        List[StoryParameters],
        Field(
            description="A list of project stories, each with their complete parameters."
        ),
    ]


class SetStoriesParameters(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    stories: Annotated[
        List[StorySettings],
        Field(
            description="A list of story settings, used as input for creating or modifying multiple stories."
        ),
    ]


class OpenProjectParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectFilePath: Annotated[
        str, Field(description="The target project file to open.")
    ]


class GetGeoLocationResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    projectLocation: ProjectLocation
    surveyPoint: SurveyPoint


class ChangeSelectionOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResultsOfAddToSelection: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]
    executionResultsOfRemoveFromSelection: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class SetDetailsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class Get3DBoundingBoxesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    boundingBoxes3D: Annotated[
        List[BoundingBox3DArrayItem | ErrorItem],
        Field(description="A list of 3D bounding boxes."),
    ]


class MoveElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class SetGDLParametersOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetClassificationsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementClassifications: Annotated[
        List[ElementClassificationItemArray | ErrorItem],
        Field(
            description="The list of element classification item identifiers. Order of the ids are the same as in the input. Non-existing elements or non-existing classification systems are represented by error objects."
        ),
    ]


class SetClassificationsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class CreateColumnsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    columnsData: Annotated[
        List[ColumnsDatum], Field(description="Array of data to create Columns.")
    ]


class CreateSlabsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    slabsData: Annotated[
        List[SlabsDatum], Field(description="Array of data to create Slabs.")
    ]


class CreatePolylinesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    polylinesData: Annotated[
        List[PolylinesDatum], Field(description="Array of data to create Polylines.")
    ]


class CreateObjectsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    objectsData: Annotated[
        List[ObjectsDatum], Field(description="Array of data to create Objects.")
    ]


class CreateMeshesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    meshesData: Annotated[
        List[MeshesDatum], Field(description="Array of data to create Meshes.")
    ]


class ApplyFavoritesToElementDefaultsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    favorites: Annotated[List[str], Field(description="The favorites to apply.")]


class ApplyFavoritesToElementDefaultsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class CreateFavoritesFromElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetAllPropertiesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: Annotated[
        List[PropertyDetails], Field(description="A list of property identifiers.")
    ]


class GetPropertyValuesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValuesForElements: Annotated[
        List[PropertyValuesArrayItem | ErrorItem],
        Field(
            description="List of property value lists. The order of the outer list is that of the given elements. The order of the inner lists are that of the given properties."
        ),
    ]


class SetPropertyValuesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetPropertyValuesOfAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyValuesForAttributes: Annotated[
        List[PropertyValuesArrayItem | ErrorItem],
        Field(
            description="List of property value lists. The order of the outer list is that of the given attributes. The order of the inner lists are that of the given properties."
        ),
    ]


class SetPropertyValuesOfAttributesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class CreatePropertyGroupsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroups: Annotated[
        List[PropertyGroupArrayItem],
        Field(description="The parameters of the new property groups."),
    ]


class CreatePropertyGroupsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupIds: Annotated[
        List[PropertyGroupIdArrayItem],
        Field(description="The identifiers of the created property groups."),
    ]


class DeletePropertyGroupsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyGroupIds: Annotated[
        List[PropertyGroupIdArrayItem],
        Field(description="The identifiers of property groups to delete."),
    ]


class DeletePropertyGroupsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class CreatePropertyDefinitionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIds: Annotated[
        List[PropertyIdArrayItem | ErrorItem],
        Field(description="A list of property identifiers."),
    ]


class DeletePropertyDefinitionsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyIds: Annotated[
        List[PropertyIdArrayItem],
        Field(description="The identifiers of properties to delete."),
    ]


class DeletePropertyDefinitionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetAttributesByTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeType: AttributeType


class CreateLayersParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layerDataArray: Annotated[
        List[LayerDataArrayItem],
        Field(description="Array of data to create new Layers."),
    ]
    overwriteExisting: Annotated[
        bool | None,
        Field(
            description="Overwrite the Layer if exists with the same name. The default is false."
        ),
    ] = None


class CreateBuildingMaterialsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buildingMaterialDataArray: Annotated[
        List[BuildingMaterialDataArrayItem],
        Field(description="Array of data to create new Building Materials."),
    ]
    overwriteExisting: Annotated[
        bool | None,
        Field(
            description="Overwrite the Building Material if exists with the same name. The default is false."
        ),
    ] = None


class GetBuildingMaterialPhysicalPropertiesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    properties: Annotated[
        List[Property], Field(description="Physical properties list.")
    ]


class GetLibrariesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    libraries: Annotated[
        List[Library], Field(description="A list of project libraries.")
    ]


class PublishPublisherSetParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    publisherSetName: Annotated[
        str, Field(description="The name of the publisher set.", min_length=1)
    ]
    outputPath: Annotated[
        str | None,
        Field(
            description="Full local or LAN path for publishing. Optional, by default the path set in the settings of the publiser set will be used.",
            min_length=1,
        ),
    ] = None


class GetModelViewOptionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    modelViewOptions: List[ModelViewOption]


class GetViewSettingsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    viewSettings: List[ViewSettings | ErrorItem]


class SetViewSettingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIdsWithViewSettings: List[NavigatorItemIdsWithViewSetting]


class SetViewSettingsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResults: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult],
        Field(description="A list of execution results."),
    ]


class GetView2DTransformationsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    transformations: List[ViewTransformations | ErrorItem]


class CreateIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="The name of the issue.")]
    parentIssueId: IssueId | None = None
    tagText: Annotated[
        str | None, Field(description="Tag text of the issue, optional.")
    ] = None


class CreateIssueResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class DeleteIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    acceptAllElements: Annotated[
        bool | None,
        Field(
            description="Accept all creation/deletion/modification of the deleted issue. By default false."
        ),
    ] = None


class AddCommentToIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    author: Annotated[
        str | None, Field(description="The author of the new comment.")
    ] = None
    status: IssueCommentStatus | None = None
    text: Annotated[str, Field(description="Comment text to add.")]


class GetCommentsFromIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId


class GetCommentsFromIssueResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    comments: Annotated[
        List[Comment], Field(description="A list of existing comments.")
    ]


class GetElementsAttachedToIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    type: IssueElementType


class ExportIssuesToBCFParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issues: Annotated[
        List[IssueIdArrayItem] | None,
        Field(description="Leave it empty to export all issues."),
    ] = None
    exportPath: Annotated[
        str, Field(description="The os path to the bcf file, including it's name.")
    ]
    useExternalId: Annotated[
        bool,
        Field(
            description="Use external IFC ID or Archicad IFC ID as referenced in BCF topics."
        ),
    ]
    alignBySurveyPoint: Annotated[
        bool,
        Field(
            description="Align BCF views by Archicad Survey Point or Archicad Project Origin."
        ),
    ]


class ImportIssuesFromBCFParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    importPath: Annotated[
        str, Field(description="The os path to the bcf file, including it's name.")
    ]
    alignBySurveyPoint: Annotated[
        bool,
        Field(
            description="Align BCF views by Archicad Survey Point or Archicad Project Origin."
        ),
    ]


class GetRevisionIssuesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionIssues: List[RevisionIssue]


class GetRevisionChangesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChanges: List[RevisionChange]


class GetDocumentRevisionsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    documentRevisions: List[DocumentRevision]


class GetCurrentRevisionChangesOfLayoutsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    currentRevisionChangesOfLayouts: RevisionChangesArrayItem | ErrorItem


class GetRevisionChangesOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    revisionChangesOfElements: RevisionChangesArrayItem | ErrorItem


class GenerateDocumentationParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    destinationFolder: Annotated[
        str,
        Field(
            description="Destination folder for the generated documentation files.",
            min_length=1,
        ),
    ]


class SetDetailsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementsWithDetails: Annotated[
        List[ElementsWithDetail], Field(description="The elements with parameters.")
    ]


class MoveElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementsWithMoveVectors: Annotated[
        List[ElementsWithMoveVector],
        Field(description="The elements with move vector pairs."),
    ]


class GetGDLParametersOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    gdlParametersOfElements: Annotated[
        List[GDLParameterList], Field(description="The GDL parameters of elements.")
    ]


class SetGDLParametersOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementsWithGDLParameters: Annotated[
        List[ElementsWithGDLParameter],
        Field(description="The elements with GDL parameters dictionary pairs."),
    ]


class SetClassificationsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementClassifications: Annotated[
        List[ElementClassification],
        Field(description="A list of element classification identifiers."),
    ]


class CreateZonesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    zonesData: Annotated[
        List[ZonesDatum], Field(description="Array of data to create Zones.")
    ]


class CreateFavoritesFromElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    favoritesFromElements: List[FavoritesFromElement]


class SetPropertyValuesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementPropertyValues: Annotated[
        List[ElementPropertyValue],
        Field(description="A list of element property values."),
    ]


class SetPropertyValuesOfAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributePropertyValues: Annotated[
        List[AttributePropertyValue],
        Field(description="A list of attribute property values."),
    ]


class CreatePropertyDefinitionsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propertyDefinitions: Annotated[
        List[PropertyDefinitionArrayItem],
        Field(description="The parameters of the new properties."),
    ]


class GetAttributesByTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributes: Annotated[List[Attribute], Field(description="Details of attributes.")]


class ReserveElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    executionResult: Annotated[
        SuccessfulExecutionResult | FailedExecutionResult,
        Field(description="The result of the execution."),
    ]
    conflicts: List[Conflict] | None = None


class GetIssuesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issues: Annotated[List[Issue], Field(description="A list of existing issues.")]


class GetElementsByTypeParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elementType: ElementType
    filters: Annotated[List[ElementFilter] | None, Field(min_length=1)] = None
    databases: Annotated[
        List[DatabaseIdArrayItem] | None,
        Field(description="A list of Archicad databases."),
    ] = None


class GetAllElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    filters: Annotated[List[ElementFilter] | None, Field(min_length=1)] = None
    databases: Annotated[
        List[DatabaseIdArrayItem] | None,
        Field(description="A list of Archicad databases."),
    ] = None


class GetDetailsOfElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    detailsOfElements: List[DetailsOfElement]


class CreateCompositesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    compositeDataArray: Annotated[
        List[CompositeDataArrayItem],
        Field(description="Array of data to create Composites."),
    ]
    overwriteExisting: Annotated[
        bool | None,
        Field(
            description="Overwrite the Composite if exists with the same name. The default is false."
        ),
    ] = None


class GetDatabaseIdFromNavigatorItemIdParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdArrayItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetDatabaseIdFromNavigatorItemIdResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    databases: Annotated[
        List[DatabaseIdArrayItem], Field(description="A list of Archicad databases.")
    ]


class GetViewSettingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    navigatorItemIds: Annotated[
        List[NavigatorItemIdArrayItem],
        Field(description="A list of navigator item identifiers."),
    ]


class GetView2DTransformationsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    databases: Annotated[
        List[DatabaseIdArrayItem] | None,
        Field(description="A list of Archicad databases."),
    ] = None


class GetCurrentRevisionChangesOfLayoutsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    layoutDatabaseIds: Annotated[
        List[DatabaseIdArrayItem], Field(description="A list of Archicad databases.")
    ]


class GetSelectedElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetElementsByTypeResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    executionResultForDatabases: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult] | None,
        Field(description="A list of execution results."),
    ] = None


class GetAllElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    executionResultForDatabases: Annotated[
        List[SuccessfulExecutionResult | FailedExecutionResult] | None,
        Field(description="A list of execution results."),
    ] = None


class ChangeSelectionOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    addElementsToSelection: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None
    removeElementsFromSelection: Annotated[
        List[ElementIdArrayItem] | None, Field(description="A list of elements.")
    ] = None


class FilterElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    filters: Annotated[List[ElementFilter] | None, Field(min_length=1)] = None


class FilterElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetDetailsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class Get3DBoundingBoxesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetSubelementsOfHierarchicalElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetSubelementsOfHierarchicalElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    subelements: List[Subelement]


class GetConnectedElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    connectedElementType: ElementType


class GetConnectedElementsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    connectedElements: List[ConnectedElement]


class HighlightElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    highlightedColors: Annotated[
        List[HighlightedColor],
        Field(description="A list of colors to highlight elements."),
    ]
    wireframe3D: Annotated[
        bool | None,
        Field(
            description="Optional parameter. Switch non highlighted elements in the 3D window to wireframe."
        ),
    ] = None
    nonHighlightedColor: Annotated[
        List[int] | None,
        Field(
            description="Optional parameter. Color of the non highlighted elements as an [r, g, b, a] array. Each component must be in the 0-255 range.",
            max_length=4,
            min_length=4,
        ),
    ] = None


class DeleteElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetGDLParametersOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetClassificationsOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    classificationSystemIds: Annotated[
        List[ClassificationSystemIdArrayItem],
        Field(description="A list of classification system identifiers."),
    ]


class CreateColumnsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreateSlabsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreateZonesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreatePolylinesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreateObjectsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class CreateMeshesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetPropertyValuesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    properties: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class GetPropertyValuesOfAttributesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]
    properties: Annotated[
        List[PropertyIdArrayItem], Field(description="A list of property identifiers.")
    ]


class CreateLayersResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]


class CreateBuildingMaterialsResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]


class CreateCompositesResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]


class GetBuildingMaterialPhysicalPropertiesParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    attributeIds: Annotated[
        List[AttributeIdArrayItem], Field(description="A list of attributes.")
    ]


class ReserveElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class ReleaseElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class UpdateDrawingsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class AttachElementsToIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]
    type: IssueElementType


class DetachElementsFromIssueParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    issueId: IssueId
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetElementsAttachedToIssueResult(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetRevisionChangesOfElementsParameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    elements: Annotated[
        List[ElementIdArrayItem], Field(description="A list of elements.")
    ]


class GetHotlinksResult(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    hotlinks: Annotated[List[Hotlink], Field(description="A list of hotlink nodes.")]
