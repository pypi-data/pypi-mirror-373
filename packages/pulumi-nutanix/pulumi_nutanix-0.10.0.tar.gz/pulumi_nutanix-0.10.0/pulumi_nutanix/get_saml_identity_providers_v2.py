# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSamlIdentityProvidersV2Result',
    'AwaitableGetSamlIdentityProvidersV2Result',
    'get_saml_identity_providers_v2',
    'get_saml_identity_providers_v2_output',
]

@pulumi.output_type
class GetSamlIdentityProvidersV2Result:
    """
    A collection of values returned by getSamlIdentityProvidersV2.
    """
    def __init__(__self__, filter=None, id=None, identity_providers=None, limit=None, order_by=None, page=None, select=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_providers and not isinstance(identity_providers, list):
            raise TypeError("Expected argument 'identity_providers' to be a list")
        pulumi.set(__self__, "identity_providers", identity_providers)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if page and not isinstance(page, int):
            raise TypeError("Expected argument 'page' to be a int")
        pulumi.set(__self__, "page", page)
        if select and not isinstance(select, str):
            raise TypeError("Expected argument 'select' to be a str")
        pulumi.set(__self__, "select", select)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> Sequence['outputs.GetSamlIdentityProvidersV2IdentityProviderResult']:
        return pulumi.get(self, "identity_providers")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "order_by")

    @_builtins.property
    @pulumi.getter
    def page(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "page")

    @_builtins.property
    @pulumi.getter
    def select(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "select")


class AwaitableGetSamlIdentityProvidersV2Result(GetSamlIdentityProvidersV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSamlIdentityProvidersV2Result(
            filter=self.filter,
            id=self.id,
            identity_providers=self.identity_providers,
            limit=self.limit,
            order_by=self.order_by,
            page=self.page,
            select=self.select)


def get_saml_identity_providers_v2(filter: Optional[_builtins.str] = None,
                                   limit: Optional[_builtins.int] = None,
                                   order_by: Optional[_builtins.str] = None,
                                   page: Optional[_builtins.int] = None,
                                   select: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSamlIdentityProvidersV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['orderBy'] = order_by
    __args__['page'] = page
    __args__['select'] = select
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getSamlIdentityProvidersV2:getSamlIdentityProvidersV2', __args__, opts=opts, typ=GetSamlIdentityProvidersV2Result).value

    return AwaitableGetSamlIdentityProvidersV2Result(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        identity_providers=pulumi.get(__ret__, 'identity_providers'),
        limit=pulumi.get(__ret__, 'limit'),
        order_by=pulumi.get(__ret__, 'order_by'),
        page=pulumi.get(__ret__, 'page'),
        select=pulumi.get(__ret__, 'select'))
def get_saml_identity_providers_v2_output(filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          limit: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                          order_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          page: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                          select: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSamlIdentityProvidersV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['orderBy'] = order_by
    __args__['page'] = page
    __args__['select'] = select
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getSamlIdentityProvidersV2:getSamlIdentityProvidersV2', __args__, opts=opts, typ=GetSamlIdentityProvidersV2Result)
    return __ret__.apply(lambda __response__: GetSamlIdentityProvidersV2Result(
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        identity_providers=pulumi.get(__response__, 'identity_providers'),
        limit=pulumi.get(__response__, 'limit'),
        order_by=pulumi.get(__response__, 'order_by'),
        page=pulumi.get(__response__, 'page'),
        select=pulumi.get(__response__, 'select')))
