# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSamlIdentityProviderV2Result',
    'AwaitableGetSamlIdentityProviderV2Result',
    'get_saml_identity_provider_v2',
    'get_saml_identity_provider_v2_output',
]

@pulumi.output_type
class GetSamlIdentityProviderV2Result:
    """
    A collection of values returned by getSamlIdentityProviderV2.
    """
    def __init__(__self__, created_by=None, created_time=None, custom_attributes=None, email_attribute=None, entity_issuer=None, ext_id=None, groups_attribute=None, groups_delim=None, id=None, idp_metadatas=None, is_signed_authn_req_enabled=None, last_updated_time=None, name=None, username_attribute=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if custom_attributes and not isinstance(custom_attributes, list):
            raise TypeError("Expected argument 'custom_attributes' to be a list")
        pulumi.set(__self__, "custom_attributes", custom_attributes)
        if email_attribute and not isinstance(email_attribute, str):
            raise TypeError("Expected argument 'email_attribute' to be a str")
        pulumi.set(__self__, "email_attribute", email_attribute)
        if entity_issuer and not isinstance(entity_issuer, str):
            raise TypeError("Expected argument 'entity_issuer' to be a str")
        pulumi.set(__self__, "entity_issuer", entity_issuer)
        if ext_id and not isinstance(ext_id, str):
            raise TypeError("Expected argument 'ext_id' to be a str")
        pulumi.set(__self__, "ext_id", ext_id)
        if groups_attribute and not isinstance(groups_attribute, str):
            raise TypeError("Expected argument 'groups_attribute' to be a str")
        pulumi.set(__self__, "groups_attribute", groups_attribute)
        if groups_delim and not isinstance(groups_delim, str):
            raise TypeError("Expected argument 'groups_delim' to be a str")
        pulumi.set(__self__, "groups_delim", groups_delim)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_metadatas and not isinstance(idp_metadatas, list):
            raise TypeError("Expected argument 'idp_metadatas' to be a list")
        pulumi.set(__self__, "idp_metadatas", idp_metadatas)
        if is_signed_authn_req_enabled and not isinstance(is_signed_authn_req_enabled, bool):
            raise TypeError("Expected argument 'is_signed_authn_req_enabled' to be a bool")
        pulumi.set(__self__, "is_signed_authn_req_enabled", is_signed_authn_req_enabled)
        if last_updated_time and not isinstance(last_updated_time, str):
            raise TypeError("Expected argument 'last_updated_time' to be a str")
        pulumi.set(__self__, "last_updated_time", last_updated_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if username_attribute and not isinstance(username_attribute, str):
            raise TypeError("Expected argument 'username_attribute' to be a str")
        pulumi.set(__self__, "username_attribute", username_attribute)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "custom_attributes")

    @_builtins.property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> _builtins.str:
        return pulumi.get(self, "email_attribute")

    @_builtins.property
    @pulumi.getter(name="entityIssuer")
    def entity_issuer(self) -> _builtins.str:
        return pulumi.get(self, "entity_issuer")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> _builtins.str:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> _builtins.str:
        return pulumi.get(self, "groups_attribute")

    @_builtins.property
    @pulumi.getter(name="groupsDelim")
    def groups_delim(self) -> _builtins.str:
        return pulumi.get(self, "groups_delim")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idpMetadatas")
    def idp_metadatas(self) -> Sequence['outputs.GetSamlIdentityProviderV2IdpMetadataResult']:
        return pulumi.get(self, "idp_metadatas")

    @_builtins.property
    @pulumi.getter(name="isSignedAuthnReqEnabled")
    def is_signed_authn_req_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_signed_authn_req_enabled")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> _builtins.str:
        return pulumi.get(self, "last_updated_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="usernameAttribute")
    def username_attribute(self) -> _builtins.str:
        return pulumi.get(self, "username_attribute")


class AwaitableGetSamlIdentityProviderV2Result(GetSamlIdentityProviderV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSamlIdentityProviderV2Result(
            created_by=self.created_by,
            created_time=self.created_time,
            custom_attributes=self.custom_attributes,
            email_attribute=self.email_attribute,
            entity_issuer=self.entity_issuer,
            ext_id=self.ext_id,
            groups_attribute=self.groups_attribute,
            groups_delim=self.groups_delim,
            id=self.id,
            idp_metadatas=self.idp_metadatas,
            is_signed_authn_req_enabled=self.is_signed_authn_req_enabled,
            last_updated_time=self.last_updated_time,
            name=self.name,
            username_attribute=self.username_attribute)


def get_saml_identity_provider_v2(ext_id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSamlIdentityProviderV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getSamlIdentityProviderV2:getSamlIdentityProviderV2', __args__, opts=opts, typ=GetSamlIdentityProviderV2Result).value

    return AwaitableGetSamlIdentityProviderV2Result(
        created_by=pulumi.get(__ret__, 'created_by'),
        created_time=pulumi.get(__ret__, 'created_time'),
        custom_attributes=pulumi.get(__ret__, 'custom_attributes'),
        email_attribute=pulumi.get(__ret__, 'email_attribute'),
        entity_issuer=pulumi.get(__ret__, 'entity_issuer'),
        ext_id=pulumi.get(__ret__, 'ext_id'),
        groups_attribute=pulumi.get(__ret__, 'groups_attribute'),
        groups_delim=pulumi.get(__ret__, 'groups_delim'),
        id=pulumi.get(__ret__, 'id'),
        idp_metadatas=pulumi.get(__ret__, 'idp_metadatas'),
        is_signed_authn_req_enabled=pulumi.get(__ret__, 'is_signed_authn_req_enabled'),
        last_updated_time=pulumi.get(__ret__, 'last_updated_time'),
        name=pulumi.get(__ret__, 'name'),
        username_attribute=pulumi.get(__ret__, 'username_attribute'))
def get_saml_identity_provider_v2_output(ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSamlIdentityProviderV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getSamlIdentityProviderV2:getSamlIdentityProviderV2', __args__, opts=opts, typ=GetSamlIdentityProviderV2Result)
    return __ret__.apply(lambda __response__: GetSamlIdentityProviderV2Result(
        created_by=pulumi.get(__response__, 'created_by'),
        created_time=pulumi.get(__response__, 'created_time'),
        custom_attributes=pulumi.get(__response__, 'custom_attributes'),
        email_attribute=pulumi.get(__response__, 'email_attribute'),
        entity_issuer=pulumi.get(__response__, 'entity_issuer'),
        ext_id=pulumi.get(__response__, 'ext_id'),
        groups_attribute=pulumi.get(__response__, 'groups_attribute'),
        groups_delim=pulumi.get(__response__, 'groups_delim'),
        id=pulumi.get(__response__, 'id'),
        idp_metadatas=pulumi.get(__response__, 'idp_metadatas'),
        is_signed_authn_req_enabled=pulumi.get(__response__, 'is_signed_authn_req_enabled'),
        last_updated_time=pulumi.get(__response__, 'last_updated_time'),
        name=pulumi.get(__response__, 'name'),
        username_attribute=pulumi.get(__response__, 'username_attribute')))
