# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, analysis_vm_efficiency_map=None, api_version=None, authorized_public_key_lists=None, build=None, ca_certificate_lists=None, categories=None, certification_signing_info=None, client_auth=None, cluster_arch=None, cluster_id=None, domain_server_credentials=None, domain_server_name=None, domain_server_nameserver=None, enabled_feature_lists=None, encryption_status=None, external_data_services_ip=None, external_ip=None, external_subnet=None, gpu_driver_version=None, http_proxy_lists=None, http_proxy_whitelists=None, id=None, internal_subnet=None, is_available=None, management_server_lists=None, masquerading_ip=None, masquerading_port=None, metadata=None, name=None, name_server_ip_lists=None, nfs_subnet_whitelists=None, nodes=None, ntp_server_ip_lists=None, operation_mode=None, owner_reference=None, project_reference=None, service_lists=None, smtp_server_address=None, smtp_server_credentials=None, smtp_server_email_address=None, smtp_server_proxy_type_lists=None, smtp_server_type=None, software_map_ncc=None, software_map_nos=None, ssl_key_expire_datetime=None, ssl_key_name=None, ssl_key_signing_info=None, ssl_key_type=None, state=None, supported_information_verbosity=None, timezone=None):
        if analysis_vm_efficiency_map and not isinstance(analysis_vm_efficiency_map, dict):
            raise TypeError("Expected argument 'analysis_vm_efficiency_map' to be a dict")
        pulumi.set(__self__, "analysis_vm_efficiency_map", analysis_vm_efficiency_map)
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if authorized_public_key_lists and not isinstance(authorized_public_key_lists, list):
            raise TypeError("Expected argument 'authorized_public_key_lists' to be a list")
        pulumi.set(__self__, "authorized_public_key_lists", authorized_public_key_lists)
        if build and not isinstance(build, dict):
            raise TypeError("Expected argument 'build' to be a dict")
        pulumi.set(__self__, "build", build)
        if ca_certificate_lists and not isinstance(ca_certificate_lists, list):
            raise TypeError("Expected argument 'ca_certificate_lists' to be a list")
        pulumi.set(__self__, "ca_certificate_lists", ca_certificate_lists)
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        pulumi.set(__self__, "categories", categories)
        if certification_signing_info and not isinstance(certification_signing_info, dict):
            raise TypeError("Expected argument 'certification_signing_info' to be a dict")
        pulumi.set(__self__, "certification_signing_info", certification_signing_info)
        if client_auth and not isinstance(client_auth, dict):
            raise TypeError("Expected argument 'client_auth' to be a dict")
        pulumi.set(__self__, "client_auth", client_auth)
        if cluster_arch and not isinstance(cluster_arch, str):
            raise TypeError("Expected argument 'cluster_arch' to be a str")
        pulumi.set(__self__, "cluster_arch", cluster_arch)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if domain_server_credentials and not isinstance(domain_server_credentials, dict):
            raise TypeError("Expected argument 'domain_server_credentials' to be a dict")
        pulumi.set(__self__, "domain_server_credentials", domain_server_credentials)
        if domain_server_name and not isinstance(domain_server_name, str):
            raise TypeError("Expected argument 'domain_server_name' to be a str")
        pulumi.set(__self__, "domain_server_name", domain_server_name)
        if domain_server_nameserver and not isinstance(domain_server_nameserver, str):
            raise TypeError("Expected argument 'domain_server_nameserver' to be a str")
        pulumi.set(__self__, "domain_server_nameserver", domain_server_nameserver)
        if enabled_feature_lists and not isinstance(enabled_feature_lists, list):
            raise TypeError("Expected argument 'enabled_feature_lists' to be a list")
        pulumi.set(__self__, "enabled_feature_lists", enabled_feature_lists)
        if encryption_status and not isinstance(encryption_status, str):
            raise TypeError("Expected argument 'encryption_status' to be a str")
        pulumi.set(__self__, "encryption_status", encryption_status)
        if external_data_services_ip and not isinstance(external_data_services_ip, str):
            raise TypeError("Expected argument 'external_data_services_ip' to be a str")
        pulumi.set(__self__, "external_data_services_ip", external_data_services_ip)
        if external_ip and not isinstance(external_ip, str):
            raise TypeError("Expected argument 'external_ip' to be a str")
        pulumi.set(__self__, "external_ip", external_ip)
        if external_subnet and not isinstance(external_subnet, str):
            raise TypeError("Expected argument 'external_subnet' to be a str")
        pulumi.set(__self__, "external_subnet", external_subnet)
        if gpu_driver_version and not isinstance(gpu_driver_version, str):
            raise TypeError("Expected argument 'gpu_driver_version' to be a str")
        pulumi.set(__self__, "gpu_driver_version", gpu_driver_version)
        if http_proxy_lists and not isinstance(http_proxy_lists, list):
            raise TypeError("Expected argument 'http_proxy_lists' to be a list")
        pulumi.set(__self__, "http_proxy_lists", http_proxy_lists)
        if http_proxy_whitelists and not isinstance(http_proxy_whitelists, list):
            raise TypeError("Expected argument 'http_proxy_whitelists' to be a list")
        pulumi.set(__self__, "http_proxy_whitelists", http_proxy_whitelists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal_subnet and not isinstance(internal_subnet, str):
            raise TypeError("Expected argument 'internal_subnet' to be a str")
        pulumi.set(__self__, "internal_subnet", internal_subnet)
        if is_available and not isinstance(is_available, bool):
            raise TypeError("Expected argument 'is_available' to be a bool")
        pulumi.set(__self__, "is_available", is_available)
        if management_server_lists and not isinstance(management_server_lists, list):
            raise TypeError("Expected argument 'management_server_lists' to be a list")
        pulumi.set(__self__, "management_server_lists", management_server_lists)
        if masquerading_ip and not isinstance(masquerading_ip, str):
            raise TypeError("Expected argument 'masquerading_ip' to be a str")
        pulumi.set(__self__, "masquerading_ip", masquerading_ip)
        if masquerading_port and not isinstance(masquerading_port, int):
            raise TypeError("Expected argument 'masquerading_port' to be a int")
        pulumi.set(__self__, "masquerading_port", masquerading_port)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_server_ip_lists and not isinstance(name_server_ip_lists, list):
            raise TypeError("Expected argument 'name_server_ip_lists' to be a list")
        pulumi.set(__self__, "name_server_ip_lists", name_server_ip_lists)
        if nfs_subnet_whitelists and not isinstance(nfs_subnet_whitelists, list):
            raise TypeError("Expected argument 'nfs_subnet_whitelists' to be a list")
        pulumi.set(__self__, "nfs_subnet_whitelists", nfs_subnet_whitelists)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if ntp_server_ip_lists and not isinstance(ntp_server_ip_lists, list):
            raise TypeError("Expected argument 'ntp_server_ip_lists' to be a list")
        pulumi.set(__self__, "ntp_server_ip_lists", ntp_server_ip_lists)
        if operation_mode and not isinstance(operation_mode, str):
            raise TypeError("Expected argument 'operation_mode' to be a str")
        pulumi.set(__self__, "operation_mode", operation_mode)
        if owner_reference and not isinstance(owner_reference, dict):
            raise TypeError("Expected argument 'owner_reference' to be a dict")
        pulumi.set(__self__, "owner_reference", owner_reference)
        if project_reference and not isinstance(project_reference, dict):
            raise TypeError("Expected argument 'project_reference' to be a dict")
        pulumi.set(__self__, "project_reference", project_reference)
        if service_lists and not isinstance(service_lists, list):
            raise TypeError("Expected argument 'service_lists' to be a list")
        pulumi.set(__self__, "service_lists", service_lists)
        if smtp_server_address and not isinstance(smtp_server_address, dict):
            raise TypeError("Expected argument 'smtp_server_address' to be a dict")
        pulumi.set(__self__, "smtp_server_address", smtp_server_address)
        if smtp_server_credentials and not isinstance(smtp_server_credentials, dict):
            raise TypeError("Expected argument 'smtp_server_credentials' to be a dict")
        pulumi.set(__self__, "smtp_server_credentials", smtp_server_credentials)
        if smtp_server_email_address and not isinstance(smtp_server_email_address, str):
            raise TypeError("Expected argument 'smtp_server_email_address' to be a str")
        pulumi.set(__self__, "smtp_server_email_address", smtp_server_email_address)
        if smtp_server_proxy_type_lists and not isinstance(smtp_server_proxy_type_lists, list):
            raise TypeError("Expected argument 'smtp_server_proxy_type_lists' to be a list")
        pulumi.set(__self__, "smtp_server_proxy_type_lists", smtp_server_proxy_type_lists)
        if smtp_server_type and not isinstance(smtp_server_type, str):
            raise TypeError("Expected argument 'smtp_server_type' to be a str")
        pulumi.set(__self__, "smtp_server_type", smtp_server_type)
        if software_map_ncc and not isinstance(software_map_ncc, dict):
            raise TypeError("Expected argument 'software_map_ncc' to be a dict")
        pulumi.set(__self__, "software_map_ncc", software_map_ncc)
        if software_map_nos and not isinstance(software_map_nos, dict):
            raise TypeError("Expected argument 'software_map_nos' to be a dict")
        pulumi.set(__self__, "software_map_nos", software_map_nos)
        if ssl_key_expire_datetime and not isinstance(ssl_key_expire_datetime, str):
            raise TypeError("Expected argument 'ssl_key_expire_datetime' to be a str")
        pulumi.set(__self__, "ssl_key_expire_datetime", ssl_key_expire_datetime)
        if ssl_key_name and not isinstance(ssl_key_name, str):
            raise TypeError("Expected argument 'ssl_key_name' to be a str")
        pulumi.set(__self__, "ssl_key_name", ssl_key_name)
        if ssl_key_signing_info and not isinstance(ssl_key_signing_info, dict):
            raise TypeError("Expected argument 'ssl_key_signing_info' to be a dict")
        pulumi.set(__self__, "ssl_key_signing_info", ssl_key_signing_info)
        if ssl_key_type and not isinstance(ssl_key_type, str):
            raise TypeError("Expected argument 'ssl_key_type' to be a str")
        pulumi.set(__self__, "ssl_key_type", ssl_key_type)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if supported_information_verbosity and not isinstance(supported_information_verbosity, str):
            raise TypeError("Expected argument 'supported_information_verbosity' to be a str")
        pulumi.set(__self__, "supported_information_verbosity", supported_information_verbosity)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)

    @_builtins.property
    @pulumi.getter(name="analysisVmEfficiencyMap")
    def analysis_vm_efficiency_map(self) -> Mapping[str, _builtins.str]:
        """
        - Map of cluster efficiency which includes numbers of inefficient vms. The value is populated by analytics on PC. (Readonly)
        """
        return pulumi.get(self, "analysis_vm_efficiency_map")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        """
        The API version.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="authorizedPublicKeyLists")
    def authorized_public_key_lists(self) -> Sequence['outputs.GetClusterAuthorizedPublicKeyListResult']:
        return pulumi.get(self, "authorized_public_key_lists")

    @_builtins.property
    @pulumi.getter
    def build(self) -> Mapping[str, _builtins.str]:
        """
        - Cluster build details.
        """
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter(name="caCertificateLists")
    def ca_certificate_lists(self) -> Sequence['outputs.GetClusterCaCertificateListResult']:
        """
        - Zone name used in value of TZ environment variable.
        """
        return pulumi.get(self, "ca_certificate_lists")

    @_builtins.property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetClusterCategoryResult']:
        """
        - Categories for the image.
        """
        return pulumi.get(self, "categories")

    @_builtins.property
    @pulumi.getter(name="certificationSigningInfo")
    def certification_signing_info(self) -> Mapping[str, _builtins.str]:
        """
        - Customer information used in Certificate Signing Request for creating digital certificates.
        """
        return pulumi.get(self, "certification_signing_info")

    @_builtins.property
    @pulumi.getter(name="clientAuth")
    def client_auth(self) -> Mapping[str, _builtins.str]:
        """
        - Client authentication config.
        """
        return pulumi.get(self, "client_auth")

    @_builtins.property
    @pulumi.getter(name="clusterArch")
    def cluster_arch(self) -> _builtins.str:
        """
        - Cluster architecture. (Readonly, Options: Options : X86_64 , PPC64LE)
        """
        return pulumi.get(self, "cluster_arch")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="domainServerCredentials")
    def domain_server_credentials(self) -> Mapping[str, _builtins.str]:
        """
        - Cluster domain credentials.
        """
        return pulumi.get(self, "domain_server_credentials")

    @_builtins.property
    @pulumi.getter(name="domainServerName")
    def domain_server_name(self) -> _builtins.str:
        """
        - Joined domain name. In 'put' request, empty name will unjoin the cluster from current domain.
        """
        return pulumi.get(self, "domain_server_name")

    @_builtins.property
    @pulumi.getter(name="domainServerNameserver")
    def domain_server_nameserver(self) -> _builtins.str:
        """
        -  The IP of the nameserver that can resolve the domain name. Must set when joining the domain.
        """
        return pulumi.get(self, "domain_server_nameserver")

    @_builtins.property
    @pulumi.getter(name="enabledFeatureLists")
    def enabled_feature_lists(self) -> Sequence[_builtins.str]:
        """
        - Array of enabled features.
        """
        return pulumi.get(self, "enabled_feature_lists")

    @_builtins.property
    @pulumi.getter(name="encryptionStatus")
    def encryption_status(self) -> _builtins.str:
        """
        - Cluster encryption status.
        """
        return pulumi.get(self, "encryption_status")

    @_builtins.property
    @pulumi.getter(name="externalDataServicesIp")
    def external_data_services_ip(self) -> _builtins.str:
        """
        - The cluster IP address that provides external entities access to various cluster data services.
        """
        return pulumi.get(self, "external_data_services_ip")

    @_builtins.property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> _builtins.str:
        """
        - The local IP of cluster visible externally.
        """
        return pulumi.get(self, "external_ip")

    @_builtins.property
    @pulumi.getter(name="externalSubnet")
    def external_subnet(self) -> _builtins.str:
        """
        - External subnet for cross server communication. The format is IP/netmask. (default 172.16.0.0/255.240.0.0)
        """
        return pulumi.get(self, "external_subnet")

    @_builtins.property
    @pulumi.getter(name="gpuDriverVersion")
    def gpu_driver_version(self) -> _builtins.str:
        """
        - GPU driver version.
        """
        return pulumi.get(self, "gpu_driver_version")

    @_builtins.property
    @pulumi.getter(name="httpProxyLists")
    def http_proxy_lists(self) -> Sequence['outputs.GetClusterHttpProxyListResult']:
        """
        - List of proxies to connect to the service centers.
        """
        return pulumi.get(self, "http_proxy_lists")

    @_builtins.property
    @pulumi.getter(name="httpProxyWhitelists")
    def http_proxy_whitelists(self) -> Sequence['outputs.GetClusterHttpProxyWhitelistResult']:
        """
        - HTTP proxy whitelist.
        """
        return pulumi.get(self, "http_proxy_whitelists")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internalSubnet")
    def internal_subnet(self) -> _builtins.str:
        """
        - The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.
        """
        return pulumi.get(self, "internal_subnet")

    @_builtins.property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> _builtins.bool:
        """
        - Indicates if cluster is available to contact. (Readonly)
        """
        return pulumi.get(self, "is_available")

    @_builtins.property
    @pulumi.getter(name="managementServerLists")
    def management_server_lists(self) -> Sequence['outputs.GetClusterManagementServerListResult']:
        """
        - List of cluster management servers. (Readonly)
        """
        return pulumi.get(self, "management_server_lists")

    @_builtins.property
    @pulumi.getter(name="masqueradingIp")
    def masquerading_ip(self) -> _builtins.str:
        """
        - The cluster NAT'd or proxy IP which maps to the cluster local IP.
        """
        return pulumi.get(self, "masquerading_ip")

    @_builtins.property
    @pulumi.getter(name="masqueradingPort")
    def masquerading_port(self) -> _builtins.int:
        """
        - Port used together with masquerading_ip to connect to the cluster.
        """
        return pulumi.get(self, "masquerading_port")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        - The image kind metadata.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameServerIpLists")
    def name_server_ip_lists(self) -> Sequence[_builtins.str]:
        """
        - The list of IP addresses of the name servers.
        """
        return pulumi.get(self, "name_server_ip_lists")

    @_builtins.property
    @pulumi.getter(name="nfsSubnetWhitelists")
    def nfs_subnet_whitelists(self) -> Sequence[_builtins.str]:
        """
        - Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.
        """
        return pulumi.get(self, "nfs_subnet_whitelists")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClusterNodeResult']:
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="ntpServerIpLists")
    def ntp_server_ip_lists(self) -> Sequence[_builtins.str]:
        """
        - The list of IP addresses or FQDNs of the NTP servers.
        """
        return pulumi.get(self, "ntp_server_ip_lists")

    @_builtins.property
    @pulumi.getter(name="operationMode")
    def operation_mode(self) -> _builtins.str:
        """
        - Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to run vms on a single node cluster in read only mode, he can set the cluster peration mode to override. Writes will be allowed in override mode.
        """
        return pulumi.get(self, "operation_mode")

    @_builtins.property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, _builtins.str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @_builtins.property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, _builtins.str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @_builtins.property
    @pulumi.getter(name="serviceLists")
    def service_lists(self) -> Sequence[_builtins.str]:
        """
        - Array of enabled cluster services. For example, a cluster can function as both AOS and cloud data gateway. - 'AOS': Regular Prism Element - 'PRISM_CENTRAL': Prism Central - 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway - 'AFS': Cluster for file server - 'WITNESS' : Witness cluster - 'XI_PORTAL': Xi cluster.
        """
        return pulumi.get(self, "service_lists")

    @_builtins.property
    @pulumi.getter(name="smtpServerAddress")
    def smtp_server_address(self) -> Mapping[str, _builtins.str]:
        """
        - SMTP Server Address.
        """
        return pulumi.get(self, "smtp_server_address")

    @_builtins.property
    @pulumi.getter(name="smtpServerCredentials")
    def smtp_server_credentials(self) -> Mapping[str, _builtins.str]:
        """
        - SMTP Server Credentials.
        """
        return pulumi.get(self, "smtp_server_credentials")

    @_builtins.property
    @pulumi.getter(name="smtpServerEmailAddress")
    def smtp_server_email_address(self) -> _builtins.str:
        """
        - SMTP Server Email Address.
        """
        return pulumi.get(self, "smtp_server_email_address")

    @_builtins.property
    @pulumi.getter(name="smtpServerProxyTypeLists")
    def smtp_server_proxy_type_lists(self) -> Sequence[_builtins.str]:
        """
        - SMTP Server Proxy Type List
        """
        return pulumi.get(self, "smtp_server_proxy_type_lists")

    @_builtins.property
    @pulumi.getter(name="smtpServerType")
    def smtp_server_type(self) -> _builtins.str:
        """
        - SMTP Server type.
        """
        return pulumi.get(self, "smtp_server_type")

    @_builtins.property
    @pulumi.getter(name="softwareMapNcc")
    def software_map_ncc(self) -> Mapping[str, _builtins.str]:
        """
        - Map of software on the cluster with software type as the key.
        """
        return pulumi.get(self, "software_map_ncc")

    @_builtins.property
    @pulumi.getter(name="softwareMapNos")
    def software_map_nos(self) -> Mapping[str, _builtins.str]:
        """
        - Map of software on the cluster with software type as the key.
        """
        return pulumi.get(self, "software_map_nos")

    @_builtins.property
    @pulumi.getter(name="sslKeyExpireDatetime")
    def ssl_key_expire_datetime(self) -> _builtins.str:
        """
        - UTC date and time in RFC-3339 format when the key expires
        """
        return pulumi.get(self, "ssl_key_expire_datetime")

    @_builtins.property
    @pulumi.getter(name="sslKeyName")
    def ssl_key_name(self) -> _builtins.str:
        return pulumi.get(self, "ssl_key_name")

    @_builtins.property
    @pulumi.getter(name="sslKeySigningInfo")
    def ssl_key_signing_info(self) -> Mapping[str, _builtins.str]:
        """
        - Customer information used in Certificate Signing Request for creating digital certificates.
        """
        return pulumi.get(self, "ssl_key_signing_info")

    @_builtins.property
    @pulumi.getter(name="sslKeyType")
    def ssl_key_type(self) -> _builtins.str:
        """
        - SSL key type. Key types with RSA_2048, ECDSA_256 and ECDSA_384 are supported for key generation and importing.
        """
        return pulumi.get(self, "ssl_key_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        - The state of the cluster entity.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="supportedInformationVerbosity")
    def supported_information_verbosity(self) -> _builtins.str:
        """
        - Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information (Default value: BASIC_PLUS_CORE_DUMP)
        """
        return pulumi.get(self, "supported_information_verbosity")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> _builtins.str:
        """
        - Zone name used in value of TZ environment variable.
        """
        return pulumi.get(self, "timezone")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            analysis_vm_efficiency_map=self.analysis_vm_efficiency_map,
            api_version=self.api_version,
            authorized_public_key_lists=self.authorized_public_key_lists,
            build=self.build,
            ca_certificate_lists=self.ca_certificate_lists,
            categories=self.categories,
            certification_signing_info=self.certification_signing_info,
            client_auth=self.client_auth,
            cluster_arch=self.cluster_arch,
            cluster_id=self.cluster_id,
            domain_server_credentials=self.domain_server_credentials,
            domain_server_name=self.domain_server_name,
            domain_server_nameserver=self.domain_server_nameserver,
            enabled_feature_lists=self.enabled_feature_lists,
            encryption_status=self.encryption_status,
            external_data_services_ip=self.external_data_services_ip,
            external_ip=self.external_ip,
            external_subnet=self.external_subnet,
            gpu_driver_version=self.gpu_driver_version,
            http_proxy_lists=self.http_proxy_lists,
            http_proxy_whitelists=self.http_proxy_whitelists,
            id=self.id,
            internal_subnet=self.internal_subnet,
            is_available=self.is_available,
            management_server_lists=self.management_server_lists,
            masquerading_ip=self.masquerading_ip,
            masquerading_port=self.masquerading_port,
            metadata=self.metadata,
            name=self.name,
            name_server_ip_lists=self.name_server_ip_lists,
            nfs_subnet_whitelists=self.nfs_subnet_whitelists,
            nodes=self.nodes,
            ntp_server_ip_lists=self.ntp_server_ip_lists,
            operation_mode=self.operation_mode,
            owner_reference=self.owner_reference,
            project_reference=self.project_reference,
            service_lists=self.service_lists,
            smtp_server_address=self.smtp_server_address,
            smtp_server_credentials=self.smtp_server_credentials,
            smtp_server_email_address=self.smtp_server_email_address,
            smtp_server_proxy_type_lists=self.smtp_server_proxy_type_lists,
            smtp_server_type=self.smtp_server_type,
            software_map_ncc=self.software_map_ncc,
            software_map_nos=self.software_map_nos,
            ssl_key_expire_datetime=self.ssl_key_expire_datetime,
            ssl_key_name=self.ssl_key_name,
            ssl_key_signing_info=self.ssl_key_signing_info,
            ssl_key_type=self.ssl_key_type,
            state=self.state,
            supported_information_verbosity=self.supported_information_verbosity,
            timezone=self.timezone)


def get_cluster(categories: Optional[Sequence[Union['GetClusterCategoryArgs', 'GetClusterCategoryArgsDict']]] = None,
                cluster_id: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Describes Clusters


    :param Sequence[Union['GetClusterCategoryArgs', 'GetClusterCategoryArgsDict']] categories: - Categories for the image.
    :param _builtins.str cluster_id: Represents clusters uuid
    :param _builtins.str name: Represents the name of cluster
    """
    __args__ = dict()
    __args__['categories'] = categories
    __args__['clusterId'] = cluster_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        analysis_vm_efficiency_map=pulumi.get(__ret__, 'analysis_vm_efficiency_map'),
        api_version=pulumi.get(__ret__, 'api_version'),
        authorized_public_key_lists=pulumi.get(__ret__, 'authorized_public_key_lists'),
        build=pulumi.get(__ret__, 'build'),
        ca_certificate_lists=pulumi.get(__ret__, 'ca_certificate_lists'),
        categories=pulumi.get(__ret__, 'categories'),
        certification_signing_info=pulumi.get(__ret__, 'certification_signing_info'),
        client_auth=pulumi.get(__ret__, 'client_auth'),
        cluster_arch=pulumi.get(__ret__, 'cluster_arch'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        domain_server_credentials=pulumi.get(__ret__, 'domain_server_credentials'),
        domain_server_name=pulumi.get(__ret__, 'domain_server_name'),
        domain_server_nameserver=pulumi.get(__ret__, 'domain_server_nameserver'),
        enabled_feature_lists=pulumi.get(__ret__, 'enabled_feature_lists'),
        encryption_status=pulumi.get(__ret__, 'encryption_status'),
        external_data_services_ip=pulumi.get(__ret__, 'external_data_services_ip'),
        external_ip=pulumi.get(__ret__, 'external_ip'),
        external_subnet=pulumi.get(__ret__, 'external_subnet'),
        gpu_driver_version=pulumi.get(__ret__, 'gpu_driver_version'),
        http_proxy_lists=pulumi.get(__ret__, 'http_proxy_lists'),
        http_proxy_whitelists=pulumi.get(__ret__, 'http_proxy_whitelists'),
        id=pulumi.get(__ret__, 'id'),
        internal_subnet=pulumi.get(__ret__, 'internal_subnet'),
        is_available=pulumi.get(__ret__, 'is_available'),
        management_server_lists=pulumi.get(__ret__, 'management_server_lists'),
        masquerading_ip=pulumi.get(__ret__, 'masquerading_ip'),
        masquerading_port=pulumi.get(__ret__, 'masquerading_port'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        name_server_ip_lists=pulumi.get(__ret__, 'name_server_ip_lists'),
        nfs_subnet_whitelists=pulumi.get(__ret__, 'nfs_subnet_whitelists'),
        nodes=pulumi.get(__ret__, 'nodes'),
        ntp_server_ip_lists=pulumi.get(__ret__, 'ntp_server_ip_lists'),
        operation_mode=pulumi.get(__ret__, 'operation_mode'),
        owner_reference=pulumi.get(__ret__, 'owner_reference'),
        project_reference=pulumi.get(__ret__, 'project_reference'),
        service_lists=pulumi.get(__ret__, 'service_lists'),
        smtp_server_address=pulumi.get(__ret__, 'smtp_server_address'),
        smtp_server_credentials=pulumi.get(__ret__, 'smtp_server_credentials'),
        smtp_server_email_address=pulumi.get(__ret__, 'smtp_server_email_address'),
        smtp_server_proxy_type_lists=pulumi.get(__ret__, 'smtp_server_proxy_type_lists'),
        smtp_server_type=pulumi.get(__ret__, 'smtp_server_type'),
        software_map_ncc=pulumi.get(__ret__, 'software_map_ncc'),
        software_map_nos=pulumi.get(__ret__, 'software_map_nos'),
        ssl_key_expire_datetime=pulumi.get(__ret__, 'ssl_key_expire_datetime'),
        ssl_key_name=pulumi.get(__ret__, 'ssl_key_name'),
        ssl_key_signing_info=pulumi.get(__ret__, 'ssl_key_signing_info'),
        ssl_key_type=pulumi.get(__ret__, 'ssl_key_type'),
        state=pulumi.get(__ret__, 'state'),
        supported_information_verbosity=pulumi.get(__ret__, 'supported_information_verbosity'),
        timezone=pulumi.get(__ret__, 'timezone'))
def get_cluster_output(categories: Optional[pulumi.Input[Optional[Sequence[Union['GetClusterCategoryArgs', 'GetClusterCategoryArgsDict']]]]] = None,
                       cluster_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterResult]:
    """
    Describes Clusters


    :param Sequence[Union['GetClusterCategoryArgs', 'GetClusterCategoryArgsDict']] categories: - Categories for the image.
    :param _builtins.str cluster_id: Represents clusters uuid
    :param _builtins.str name: Represents the name of cluster
    """
    __args__ = dict()
    __args__['categories'] = categories
    __args__['clusterId'] = cluster_id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult)
    return __ret__.apply(lambda __response__: GetClusterResult(
        analysis_vm_efficiency_map=pulumi.get(__response__, 'analysis_vm_efficiency_map'),
        api_version=pulumi.get(__response__, 'api_version'),
        authorized_public_key_lists=pulumi.get(__response__, 'authorized_public_key_lists'),
        build=pulumi.get(__response__, 'build'),
        ca_certificate_lists=pulumi.get(__response__, 'ca_certificate_lists'),
        categories=pulumi.get(__response__, 'categories'),
        certification_signing_info=pulumi.get(__response__, 'certification_signing_info'),
        client_auth=pulumi.get(__response__, 'client_auth'),
        cluster_arch=pulumi.get(__response__, 'cluster_arch'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        domain_server_credentials=pulumi.get(__response__, 'domain_server_credentials'),
        domain_server_name=pulumi.get(__response__, 'domain_server_name'),
        domain_server_nameserver=pulumi.get(__response__, 'domain_server_nameserver'),
        enabled_feature_lists=pulumi.get(__response__, 'enabled_feature_lists'),
        encryption_status=pulumi.get(__response__, 'encryption_status'),
        external_data_services_ip=pulumi.get(__response__, 'external_data_services_ip'),
        external_ip=pulumi.get(__response__, 'external_ip'),
        external_subnet=pulumi.get(__response__, 'external_subnet'),
        gpu_driver_version=pulumi.get(__response__, 'gpu_driver_version'),
        http_proxy_lists=pulumi.get(__response__, 'http_proxy_lists'),
        http_proxy_whitelists=pulumi.get(__response__, 'http_proxy_whitelists'),
        id=pulumi.get(__response__, 'id'),
        internal_subnet=pulumi.get(__response__, 'internal_subnet'),
        is_available=pulumi.get(__response__, 'is_available'),
        management_server_lists=pulumi.get(__response__, 'management_server_lists'),
        masquerading_ip=pulumi.get(__response__, 'masquerading_ip'),
        masquerading_port=pulumi.get(__response__, 'masquerading_port'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        name_server_ip_lists=pulumi.get(__response__, 'name_server_ip_lists'),
        nfs_subnet_whitelists=pulumi.get(__response__, 'nfs_subnet_whitelists'),
        nodes=pulumi.get(__response__, 'nodes'),
        ntp_server_ip_lists=pulumi.get(__response__, 'ntp_server_ip_lists'),
        operation_mode=pulumi.get(__response__, 'operation_mode'),
        owner_reference=pulumi.get(__response__, 'owner_reference'),
        project_reference=pulumi.get(__response__, 'project_reference'),
        service_lists=pulumi.get(__response__, 'service_lists'),
        smtp_server_address=pulumi.get(__response__, 'smtp_server_address'),
        smtp_server_credentials=pulumi.get(__response__, 'smtp_server_credentials'),
        smtp_server_email_address=pulumi.get(__response__, 'smtp_server_email_address'),
        smtp_server_proxy_type_lists=pulumi.get(__response__, 'smtp_server_proxy_type_lists'),
        smtp_server_type=pulumi.get(__response__, 'smtp_server_type'),
        software_map_ncc=pulumi.get(__response__, 'software_map_ncc'),
        software_map_nos=pulumi.get(__response__, 'software_map_nos'),
        ssl_key_expire_datetime=pulumi.get(__response__, 'ssl_key_expire_datetime'),
        ssl_key_name=pulumi.get(__response__, 'ssl_key_name'),
        ssl_key_signing_info=pulumi.get(__response__, 'ssl_key_signing_info'),
        ssl_key_type=pulumi.get(__response__, 'ssl_key_type'),
        state=pulumi.get(__response__, 'state'),
        supported_information_verbosity=pulumi.get(__response__, 'supported_information_verbosity'),
        timezone=pulumi.get(__response__, 'timezone')))
