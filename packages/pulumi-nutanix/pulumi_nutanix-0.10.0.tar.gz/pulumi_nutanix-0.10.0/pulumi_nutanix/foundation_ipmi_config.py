# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FoundationIpmiConfigArgs', 'FoundationIpmiConfig']

@pulumi.input_type
class FoundationIpmiConfigArgs:
    def __init__(__self__, *,
                 blocks: pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockArgs']]],
                 ipmi_gateway: pulumi.Input[_builtins.str],
                 ipmi_netmask: pulumi.Input[_builtins.str],
                 ipmi_password: pulumi.Input[_builtins.str],
                 ipmi_user: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a FoundationIpmiConfig resource.
        :param pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockArgs']]] blocks: - (Required) List of blocks.
        :param pulumi.Input[_builtins.str] ipmi_gateway: - (Required) IPMI gateway.
        :param pulumi.Input[_builtins.str] ipmi_netmask: - (Required) IPMI netmask.
        :param pulumi.Input[_builtins.str] ipmi_password: - (Required) IPMI password.
        :param pulumi.Input[_builtins.str] ipmi_user: - (Required) IPMI username.
        """
        pulumi.set(__self__, "blocks", blocks)
        pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        pulumi.set(__self__, "ipmi_password", ipmi_password)
        pulumi.set(__self__, "ipmi_user", ipmi_user)

    @_builtins.property
    @pulumi.getter
    def blocks(self) -> pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockArgs']]]:
        """
        - (Required) List of blocks.
        """
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockArgs']]]):
        pulumi.set(self, "blocks", value)

    @_builtins.property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> pulumi.Input[_builtins.str]:
        """
        - (Required) IPMI gateway.
        """
        return pulumi.get(self, "ipmi_gateway")

    @ipmi_gateway.setter
    def ipmi_gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipmi_gateway", value)

    @_builtins.property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> pulumi.Input[_builtins.str]:
        """
        - (Required) IPMI netmask.
        """
        return pulumi.get(self, "ipmi_netmask")

    @ipmi_netmask.setter
    def ipmi_netmask(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipmi_netmask", value)

    @_builtins.property
    @pulumi.getter(name="ipmiPassword")
    def ipmi_password(self) -> pulumi.Input[_builtins.str]:
        """
        - (Required) IPMI password.
        """
        return pulumi.get(self, "ipmi_password")

    @ipmi_password.setter
    def ipmi_password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipmi_password", value)

    @_builtins.property
    @pulumi.getter(name="ipmiUser")
    def ipmi_user(self) -> pulumi.Input[_builtins.str]:
        """
        - (Required) IPMI username.
        """
        return pulumi.get(self, "ipmi_user")

    @ipmi_user.setter
    def ipmi_user(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipmi_user", value)


@pulumi.input_type
class _FoundationIpmiConfigState:
    def __init__(__self__, *,
                 blocks: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockArgs']]]] = None,
                 ipmi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_netmask: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_password: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_user: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FoundationIpmiConfig resources.
        :param pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockArgs']]] blocks: - (Required) List of blocks.
        :param pulumi.Input[_builtins.str] ipmi_gateway: - (Required) IPMI gateway.
        :param pulumi.Input[_builtins.str] ipmi_netmask: - (Required) IPMI netmask.
        :param pulumi.Input[_builtins.str] ipmi_password: - (Required) IPMI password.
        :param pulumi.Input[_builtins.str] ipmi_user: - (Required) IPMI username.
        """
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)
        if ipmi_gateway is not None:
            pulumi.set(__self__, "ipmi_gateway", ipmi_gateway)
        if ipmi_netmask is not None:
            pulumi.set(__self__, "ipmi_netmask", ipmi_netmask)
        if ipmi_password is not None:
            pulumi.set(__self__, "ipmi_password", ipmi_password)
        if ipmi_user is not None:
            pulumi.set(__self__, "ipmi_user", ipmi_user)

    @_builtins.property
    @pulumi.getter
    def blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockArgs']]]]:
        """
        - (Required) List of blocks.
        """
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FoundationIpmiConfigBlockArgs']]]]):
        pulumi.set(self, "blocks", value)

    @_builtins.property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Required) IPMI gateway.
        """
        return pulumi.get(self, "ipmi_gateway")

    @ipmi_gateway.setter
    def ipmi_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipmi_gateway", value)

    @_builtins.property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Required) IPMI netmask.
        """
        return pulumi.get(self, "ipmi_netmask")

    @ipmi_netmask.setter
    def ipmi_netmask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipmi_netmask", value)

    @_builtins.property
    @pulumi.getter(name="ipmiPassword")
    def ipmi_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Required) IPMI password.
        """
        return pulumi.get(self, "ipmi_password")

    @ipmi_password.setter
    def ipmi_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipmi_password", value)

    @_builtins.property
    @pulumi.getter(name="ipmiUser")
    def ipmi_user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Required) IPMI username.
        """
        return pulumi.get(self, "ipmi_user")

    @ipmi_user.setter
    def ipmi_user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipmi_user", value)


@pulumi.type_token("nutanix:index/foundationIpmiConfig:FoundationIpmiConfig")
class FoundationIpmiConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blocks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FoundationIpmiConfigBlockArgs', 'FoundationIpmiConfigBlockArgsDict']]]]] = None,
                 ipmi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_netmask: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_password: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_user: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a FoundationIpmiConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FoundationIpmiConfigBlockArgs', 'FoundationIpmiConfigBlockArgsDict']]]] blocks: - (Required) List of blocks.
        :param pulumi.Input[_builtins.str] ipmi_gateway: - (Required) IPMI gateway.
        :param pulumi.Input[_builtins.str] ipmi_netmask: - (Required) IPMI netmask.
        :param pulumi.Input[_builtins.str] ipmi_password: - (Required) IPMI password.
        :param pulumi.Input[_builtins.str] ipmi_user: - (Required) IPMI username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FoundationIpmiConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FoundationIpmiConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FoundationIpmiConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FoundationIpmiConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blocks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FoundationIpmiConfigBlockArgs', 'FoundationIpmiConfigBlockArgsDict']]]]] = None,
                 ipmi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_netmask: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_password: Optional[pulumi.Input[_builtins.str]] = None,
                 ipmi_user: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FoundationIpmiConfigArgs.__new__(FoundationIpmiConfigArgs)

            if blocks is None and not opts.urn:
                raise TypeError("Missing required property 'blocks'")
            __props__.__dict__["blocks"] = blocks
            if ipmi_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'ipmi_gateway'")
            __props__.__dict__["ipmi_gateway"] = ipmi_gateway
            if ipmi_netmask is None and not opts.urn:
                raise TypeError("Missing required property 'ipmi_netmask'")
            __props__.__dict__["ipmi_netmask"] = ipmi_netmask
            if ipmi_password is None and not opts.urn:
                raise TypeError("Missing required property 'ipmi_password'")
            __props__.__dict__["ipmi_password"] = ipmi_password
            if ipmi_user is None and not opts.urn:
                raise TypeError("Missing required property 'ipmi_user'")
            __props__.__dict__["ipmi_user"] = ipmi_user
        super(FoundationIpmiConfig, __self__).__init__(
            'nutanix:index/foundationIpmiConfig:FoundationIpmiConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            blocks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FoundationIpmiConfigBlockArgs', 'FoundationIpmiConfigBlockArgsDict']]]]] = None,
            ipmi_gateway: Optional[pulumi.Input[_builtins.str]] = None,
            ipmi_netmask: Optional[pulumi.Input[_builtins.str]] = None,
            ipmi_password: Optional[pulumi.Input[_builtins.str]] = None,
            ipmi_user: Optional[pulumi.Input[_builtins.str]] = None) -> 'FoundationIpmiConfig':
        """
        Get an existing FoundationIpmiConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['FoundationIpmiConfigBlockArgs', 'FoundationIpmiConfigBlockArgsDict']]]] blocks: - (Required) List of blocks.
        :param pulumi.Input[_builtins.str] ipmi_gateway: - (Required) IPMI gateway.
        :param pulumi.Input[_builtins.str] ipmi_netmask: - (Required) IPMI netmask.
        :param pulumi.Input[_builtins.str] ipmi_password: - (Required) IPMI password.
        :param pulumi.Input[_builtins.str] ipmi_user: - (Required) IPMI username.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FoundationIpmiConfigState.__new__(_FoundationIpmiConfigState)

        __props__.__dict__["blocks"] = blocks
        __props__.__dict__["ipmi_gateway"] = ipmi_gateway
        __props__.__dict__["ipmi_netmask"] = ipmi_netmask
        __props__.__dict__["ipmi_password"] = ipmi_password
        __props__.__dict__["ipmi_user"] = ipmi_user
        return FoundationIpmiConfig(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def blocks(self) -> pulumi.Output[Sequence['outputs.FoundationIpmiConfigBlock']]:
        """
        - (Required) List of blocks.
        """
        return pulumi.get(self, "blocks")

    @_builtins.property
    @pulumi.getter(name="ipmiGateway")
    def ipmi_gateway(self) -> pulumi.Output[_builtins.str]:
        """
        - (Required) IPMI gateway.
        """
        return pulumi.get(self, "ipmi_gateway")

    @_builtins.property
    @pulumi.getter(name="ipmiNetmask")
    def ipmi_netmask(self) -> pulumi.Output[_builtins.str]:
        """
        - (Required) IPMI netmask.
        """
        return pulumi.get(self, "ipmi_netmask")

    @_builtins.property
    @pulumi.getter(name="ipmiPassword")
    def ipmi_password(self) -> pulumi.Output[_builtins.str]:
        """
        - (Required) IPMI password.
        """
        return pulumi.get(self, "ipmi_password")

    @_builtins.property
    @pulumi.getter(name="ipmiUser")
    def ipmi_user(self) -> pulumi.Output[_builtins.str]:
        """
        - (Required) IPMI username.
        """
        return pulumi.get(self, "ipmi_user")

