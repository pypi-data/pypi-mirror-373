# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNdbDatabaseResult',
    'AwaitableGetNdbDatabaseResult',
    'get_ndb_database',
    'get_ndb_database_output',
]

@pulumi.output_type
class GetNdbDatabaseResult:
    """
    A collection of values returned by getNdbDatabase.
    """
    def __init__(__self__, clone=None, clustered=None, database_cluster_type=None, database_id=None, database_name=None, database_nodes=None, databases=None, date_created=None, date_modified=None, dbserver_logical_cluster=None, dbserver_logical_cluster_id=None, description=None, era_created=None, id=None, infos=None, lcm_configs=None, linked_databases=None, metric=None, name=None, parent_database_id=None, properties=None, status=None, tags=None, time_machine_id=None, time_machines=None, time_zone=None, type=None):
        if clone and not isinstance(clone, bool):
            raise TypeError("Expected argument 'clone' to be a bool")
        pulumi.set(__self__, "clone", clone)
        if clustered and not isinstance(clustered, bool):
            raise TypeError("Expected argument 'clustered' to be a bool")
        pulumi.set(__self__, "clustered", clustered)
        if database_cluster_type and not isinstance(database_cluster_type, str):
            raise TypeError("Expected argument 'database_cluster_type' to be a str")
        pulumi.set(__self__, "database_cluster_type", database_cluster_type)
        if database_id and not isinstance(database_id, str):
            raise TypeError("Expected argument 'database_id' to be a str")
        pulumi.set(__self__, "database_id", database_id)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if database_nodes and not isinstance(database_nodes, list):
            raise TypeError("Expected argument 'database_nodes' to be a list")
        pulumi.set(__self__, "database_nodes", database_nodes)
        if databases and not isinstance(databases, dict):
            raise TypeError("Expected argument 'databases' to be a dict")
        pulumi.set(__self__, "databases", databases)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if date_modified and not isinstance(date_modified, str):
            raise TypeError("Expected argument 'date_modified' to be a str")
        pulumi.set(__self__, "date_modified", date_modified)
        if dbserver_logical_cluster and not isinstance(dbserver_logical_cluster, dict):
            raise TypeError("Expected argument 'dbserver_logical_cluster' to be a dict")
        pulumi.set(__self__, "dbserver_logical_cluster", dbserver_logical_cluster)
        if dbserver_logical_cluster_id and not isinstance(dbserver_logical_cluster_id, str):
            raise TypeError("Expected argument 'dbserver_logical_cluster_id' to be a str")
        pulumi.set(__self__, "dbserver_logical_cluster_id", dbserver_logical_cluster_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if era_created and not isinstance(era_created, bool):
            raise TypeError("Expected argument 'era_created' to be a bool")
        pulumi.set(__self__, "era_created", era_created)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if infos and not isinstance(infos, list):
            raise TypeError("Expected argument 'infos' to be a list")
        pulumi.set(__self__, "infos", infos)
        if lcm_configs and not isinstance(lcm_configs, list):
            raise TypeError("Expected argument 'lcm_configs' to be a list")
        pulumi.set(__self__, "lcm_configs", lcm_configs)
        if linked_databases and not isinstance(linked_databases, list):
            raise TypeError("Expected argument 'linked_databases' to be a list")
        pulumi.set(__self__, "linked_databases", linked_databases)
        if metric and not isinstance(metric, dict):
            raise TypeError("Expected argument 'metric' to be a dict")
        pulumi.set(__self__, "metric", metric)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_database_id and not isinstance(parent_database_id, str):
            raise TypeError("Expected argument 'parent_database_id' to be a str")
        pulumi.set(__self__, "parent_database_id", parent_database_id)
        if properties and not isinstance(properties, list):
            raise TypeError("Expected argument 'properties' to be a list")
        pulumi.set(__self__, "properties", properties)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if time_machine_id and not isinstance(time_machine_id, str):
            raise TypeError("Expected argument 'time_machine_id' to be a str")
        pulumi.set(__self__, "time_machine_id", time_machine_id)
        if time_machines and not isinstance(time_machines, list):
            raise TypeError("Expected argument 'time_machines' to be a list")
        pulumi.set(__self__, "time_machines", time_machines)
        if time_zone and not isinstance(time_zone, str):
            raise TypeError("Expected argument 'time_zone' to be a str")
        pulumi.set(__self__, "time_zone", time_zone)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def clone(self) -> _builtins.bool:
        """
        - if cloned
        """
        return pulumi.get(self, "clone")

    @_builtins.property
    @pulumi.getter
    def clustered(self) -> _builtins.bool:
        """
        - if clustered or not
        """
        return pulumi.get(self, "clustered")

    @_builtins.property
    @pulumi.getter(name="databaseClusterType")
    def database_cluster_type(self) -> _builtins.str:
        return pulumi.get(self, "database_cluster_type")

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> _builtins.str:
        return pulumi.get(self, "database_id")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        """
        - database instance name
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="databaseNodes")
    def database_nodes(self) -> Sequence['outputs.GetNdbDatabaseDatabaseNodeResult']:
        """
        - nodes info
        """
        return pulumi.get(self, "database_nodes")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        """
        - creation date
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> _builtins.str:
        """
        - date modified
        """
        return pulumi.get(self, "date_modified")

    @_builtins.property
    @pulumi.getter(name="dbserverLogicalCluster")
    def dbserver_logical_cluster(self) -> Mapping[str, _builtins.str]:
        """
        - NA
        """
        return pulumi.get(self, "dbserver_logical_cluster")

    @_builtins.property
    @pulumi.getter(name="dbserverLogicalClusterId")
    def dbserver_logical_cluster_id(self) -> _builtins.str:
        """
        - NA
        """
        return pulumi.get(self, "dbserver_logical_cluster_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        - description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eraCreated")
    def era_created(self) -> _builtins.bool:
        return pulumi.get(self, "era_created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        - id of database instance
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetNdbDatabaseInfoResult']:
        """
        - info regarding disks, vm, storage, etc.
        """
        return pulumi.get(self, "infos")

    @_builtins.property
    @pulumi.getter(name="lcmConfigs")
    def lcm_configs(self) -> Sequence['outputs.GetNdbDatabaseLcmConfigResult']:
        """
        - lcm configuration
        """
        return pulumi.get(self, "lcm_configs")

    @_builtins.property
    @pulumi.getter(name="linkedDatabases")
    def linked_databases(self) -> Sequence['outputs.GetNdbDatabaseLinkedDatabaseResult']:
        """
        - list of databases created in instance with info
        """
        return pulumi.get(self, "linked_databases")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Mapping[str, _builtins.str]:
        """
        - metrics
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        - name of database instance
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> _builtins.str:
        """
        - parent database ID
        """
        return pulumi.get(self, "parent_database_id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbDatabasePropertyResult']:
        """
        - properties
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        - status of database instance
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbDatabaseTagResult']:
        """
        - tags attached
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> _builtins.str:
        """
        - time machine ID
        """
        return pulumi.get(self, "time_machine_id")

    @_builtins.property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Sequence['outputs.GetNdbDatabaseTimeMachineResult']:
        """
        - time machine related config info
        """
        return pulumi.get(self, "time_machines")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        - timezone
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        - database engine type
        """
        return pulumi.get(self, "type")


class AwaitableGetNdbDatabaseResult(GetNdbDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNdbDatabaseResult(
            clone=self.clone,
            clustered=self.clustered,
            database_cluster_type=self.database_cluster_type,
            database_id=self.database_id,
            database_name=self.database_name,
            database_nodes=self.database_nodes,
            databases=self.databases,
            date_created=self.date_created,
            date_modified=self.date_modified,
            dbserver_logical_cluster=self.dbserver_logical_cluster,
            dbserver_logical_cluster_id=self.dbserver_logical_cluster_id,
            description=self.description,
            era_created=self.era_created,
            id=self.id,
            infos=self.infos,
            lcm_configs=self.lcm_configs,
            linked_databases=self.linked_databases,
            metric=self.metric,
            name=self.name,
            parent_database_id=self.parent_database_id,
            properties=self.properties,
            status=self.status,
            tags=self.tags,
            time_machine_id=self.time_machine_id,
            time_machines=self.time_machines,
            time_zone=self.time_zone,
            type=self.type)


def get_ndb_database(database_id: Optional[_builtins.str] = None,
                     tags: Optional[Sequence[Union['GetNdbDatabaseTagArgs', 'GetNdbDatabaseTagArgsDict']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNdbDatabaseResult:
    """
    Describes a database instance in Nutanix Database Service

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    db1 = nutanix.get_ndb_database(database_id="<sample-id>")
    pulumi.export("db1Output", db1)
    ```


    :param _builtins.str database_id: ID of database instance
    :param Sequence[Union['GetNdbDatabaseTagArgs', 'GetNdbDatabaseTagArgsDict']] tags: - tags attached
    """
    __args__ = dict()
    __args__['databaseId'] = database_id
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getNdbDatabase:getNdbDatabase', __args__, opts=opts, typ=GetNdbDatabaseResult).value

    return AwaitableGetNdbDatabaseResult(
        clone=pulumi.get(__ret__, 'clone'),
        clustered=pulumi.get(__ret__, 'clustered'),
        database_cluster_type=pulumi.get(__ret__, 'database_cluster_type'),
        database_id=pulumi.get(__ret__, 'database_id'),
        database_name=pulumi.get(__ret__, 'database_name'),
        database_nodes=pulumi.get(__ret__, 'database_nodes'),
        databases=pulumi.get(__ret__, 'databases'),
        date_created=pulumi.get(__ret__, 'date_created'),
        date_modified=pulumi.get(__ret__, 'date_modified'),
        dbserver_logical_cluster=pulumi.get(__ret__, 'dbserver_logical_cluster'),
        dbserver_logical_cluster_id=pulumi.get(__ret__, 'dbserver_logical_cluster_id'),
        description=pulumi.get(__ret__, 'description'),
        era_created=pulumi.get(__ret__, 'era_created'),
        id=pulumi.get(__ret__, 'id'),
        infos=pulumi.get(__ret__, 'infos'),
        lcm_configs=pulumi.get(__ret__, 'lcm_configs'),
        linked_databases=pulumi.get(__ret__, 'linked_databases'),
        metric=pulumi.get(__ret__, 'metric'),
        name=pulumi.get(__ret__, 'name'),
        parent_database_id=pulumi.get(__ret__, 'parent_database_id'),
        properties=pulumi.get(__ret__, 'properties'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        time_machine_id=pulumi.get(__ret__, 'time_machine_id'),
        time_machines=pulumi.get(__ret__, 'time_machines'),
        time_zone=pulumi.get(__ret__, 'time_zone'),
        type=pulumi.get(__ret__, 'type'))
def get_ndb_database_output(database_id: Optional[pulumi.Input[_builtins.str]] = None,
                            tags: Optional[pulumi.Input[Optional[Sequence[Union['GetNdbDatabaseTagArgs', 'GetNdbDatabaseTagArgsDict']]]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNdbDatabaseResult]:
    """
    Describes a database instance in Nutanix Database Service

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    db1 = nutanix.get_ndb_database(database_id="<sample-id>")
    pulumi.export("db1Output", db1)
    ```


    :param _builtins.str database_id: ID of database instance
    :param Sequence[Union['GetNdbDatabaseTagArgs', 'GetNdbDatabaseTagArgsDict']] tags: - tags attached
    """
    __args__ = dict()
    __args__['databaseId'] = database_id
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getNdbDatabase:getNdbDatabase', __args__, opts=opts, typ=GetNdbDatabaseResult)
    return __ret__.apply(lambda __response__: GetNdbDatabaseResult(
        clone=pulumi.get(__response__, 'clone'),
        clustered=pulumi.get(__response__, 'clustered'),
        database_cluster_type=pulumi.get(__response__, 'database_cluster_type'),
        database_id=pulumi.get(__response__, 'database_id'),
        database_name=pulumi.get(__response__, 'database_name'),
        database_nodes=pulumi.get(__response__, 'database_nodes'),
        databases=pulumi.get(__response__, 'databases'),
        date_created=pulumi.get(__response__, 'date_created'),
        date_modified=pulumi.get(__response__, 'date_modified'),
        dbserver_logical_cluster=pulumi.get(__response__, 'dbserver_logical_cluster'),
        dbserver_logical_cluster_id=pulumi.get(__response__, 'dbserver_logical_cluster_id'),
        description=pulumi.get(__response__, 'description'),
        era_created=pulumi.get(__response__, 'era_created'),
        id=pulumi.get(__response__, 'id'),
        infos=pulumi.get(__response__, 'infos'),
        lcm_configs=pulumi.get(__response__, 'lcm_configs'),
        linked_databases=pulumi.get(__response__, 'linked_databases'),
        metric=pulumi.get(__response__, 'metric'),
        name=pulumi.get(__response__, 'name'),
        parent_database_id=pulumi.get(__response__, 'parent_database_id'),
        properties=pulumi.get(__response__, 'properties'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        time_machine_id=pulumi.get(__response__, 'time_machine_id'),
        time_machines=pulumi.get(__response__, 'time_machines'),
        time_zone=pulumi.get(__response__, 'time_zone'),
        type=pulumi.get(__response__, 'type')))
