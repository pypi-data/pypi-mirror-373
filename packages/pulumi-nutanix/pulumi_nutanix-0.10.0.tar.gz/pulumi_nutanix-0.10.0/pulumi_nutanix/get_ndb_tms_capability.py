# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNdbTmsCapabilityResult',
    'AwaitableGetNdbTmsCapabilityResult',
    'get_ndb_tms_capability',
    'get_ndb_tms_capability_output',
]

@pulumi.output_type
class GetNdbTmsCapabilityResult:
    """
    A collection of values returned by getNdbTmsCapability.
    """
    def __init__(__self__, capabilities=None, capability_reset_time=None, database_ids=None, heal_with_reset_capability=None, id=None, last_continuous_snapshot_time=None, last_continuous_snapshots=None, last_db_logs=None, log_catchup_start_time=None, log_time_info=None, nx_cluster_association_type=None, nx_cluster_id=None, output_time_zone=None, overall_continuous_range_end_time=None, sla_id=None, source=None, time_machine_id=None, type=None):
        if capabilities and not isinstance(capabilities, list):
            raise TypeError("Expected argument 'capabilities' to be a list")
        pulumi.set(__self__, "capabilities", capabilities)
        if capability_reset_time and not isinstance(capability_reset_time, str):
            raise TypeError("Expected argument 'capability_reset_time' to be a str")
        pulumi.set(__self__, "capability_reset_time", capability_reset_time)
        if database_ids and not isinstance(database_ids, list):
            raise TypeError("Expected argument 'database_ids' to be a list")
        pulumi.set(__self__, "database_ids", database_ids)
        if heal_with_reset_capability and not isinstance(heal_with_reset_capability, bool):
            raise TypeError("Expected argument 'heal_with_reset_capability' to be a bool")
        pulumi.set(__self__, "heal_with_reset_capability", heal_with_reset_capability)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_continuous_snapshot_time and not isinstance(last_continuous_snapshot_time, str):
            raise TypeError("Expected argument 'last_continuous_snapshot_time' to be a str")
        pulumi.set(__self__, "last_continuous_snapshot_time", last_continuous_snapshot_time)
        if last_continuous_snapshots and not isinstance(last_continuous_snapshots, list):
            raise TypeError("Expected argument 'last_continuous_snapshots' to be a list")
        pulumi.set(__self__, "last_continuous_snapshots", last_continuous_snapshots)
        if last_db_logs and not isinstance(last_db_logs, list):
            raise TypeError("Expected argument 'last_db_logs' to be a list")
        pulumi.set(__self__, "last_db_logs", last_db_logs)
        if log_catchup_start_time and not isinstance(log_catchup_start_time, str):
            raise TypeError("Expected argument 'log_catchup_start_time' to be a str")
        pulumi.set(__self__, "log_catchup_start_time", log_catchup_start_time)
        if log_time_info and not isinstance(log_time_info, dict):
            raise TypeError("Expected argument 'log_time_info' to be a dict")
        pulumi.set(__self__, "log_time_info", log_time_info)
        if nx_cluster_association_type and not isinstance(nx_cluster_association_type, str):
            raise TypeError("Expected argument 'nx_cluster_association_type' to be a str")
        pulumi.set(__self__, "nx_cluster_association_type", nx_cluster_association_type)
        if nx_cluster_id and not isinstance(nx_cluster_id, str):
            raise TypeError("Expected argument 'nx_cluster_id' to be a str")
        pulumi.set(__self__, "nx_cluster_id", nx_cluster_id)
        if output_time_zone and not isinstance(output_time_zone, str):
            raise TypeError("Expected argument 'output_time_zone' to be a str")
        pulumi.set(__self__, "output_time_zone", output_time_zone)
        if overall_continuous_range_end_time and not isinstance(overall_continuous_range_end_time, str):
            raise TypeError("Expected argument 'overall_continuous_range_end_time' to be a str")
        pulumi.set(__self__, "overall_continuous_range_end_time", overall_continuous_range_end_time)
        if sla_id and not isinstance(sla_id, str):
            raise TypeError("Expected argument 'sla_id' to be a str")
        pulumi.set(__self__, "sla_id", sla_id)
        if source and not isinstance(source, bool):
            raise TypeError("Expected argument 'source' to be a bool")
        pulumi.set(__self__, "source", source)
        if time_machine_id and not isinstance(time_machine_id, str):
            raise TypeError("Expected argument 'time_machine_id' to be a str")
        pulumi.set(__self__, "time_machine_id", time_machine_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.GetNdbTmsCapabilityCapabilityResult']:
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="capabilityResetTime")
    def capability_reset_time(self) -> _builtins.str:
        return pulumi.get(self, "capability_reset_time")

    @_builtins.property
    @pulumi.getter(name="databaseIds")
    def database_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "database_ids")

    @_builtins.property
    @pulumi.getter(name="healWithResetCapability")
    def heal_with_reset_capability(self) -> _builtins.bool:
        return pulumi.get(self, "heal_with_reset_capability")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastContinuousSnapshotTime")
    def last_continuous_snapshot_time(self) -> _builtins.str:
        return pulumi.get(self, "last_continuous_snapshot_time")

    @_builtins.property
    @pulumi.getter(name="lastContinuousSnapshots")
    def last_continuous_snapshots(self) -> Sequence['outputs.GetNdbTmsCapabilityLastContinuousSnapshotResult']:
        return pulumi.get(self, "last_continuous_snapshots")

    @_builtins.property
    @pulumi.getter(name="lastDbLogs")
    def last_db_logs(self) -> Sequence['outputs.GetNdbTmsCapabilityLastDbLogResult']:
        return pulumi.get(self, "last_db_logs")

    @_builtins.property
    @pulumi.getter(name="logCatchupStartTime")
    def log_catchup_start_time(self) -> _builtins.str:
        return pulumi.get(self, "log_catchup_start_time")

    @_builtins.property
    @pulumi.getter(name="logTimeInfo")
    def log_time_info(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "log_time_info")

    @_builtins.property
    @pulumi.getter(name="nxClusterAssociationType")
    def nx_cluster_association_type(self) -> _builtins.str:
        return pulumi.get(self, "nx_cluster_association_type")

    @_builtins.property
    @pulumi.getter(name="nxClusterId")
    def nx_cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "nx_cluster_id")

    @_builtins.property
    @pulumi.getter(name="outputTimeZone")
    def output_time_zone(self) -> _builtins.str:
        return pulumi.get(self, "output_time_zone")

    @_builtins.property
    @pulumi.getter(name="overallContinuousRangeEndTime")
    def overall_continuous_range_end_time(self) -> _builtins.str:
        return pulumi.get(self, "overall_continuous_range_end_time")

    @_builtins.property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> _builtins.str:
        return pulumi.get(self, "sla_id")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.bool:
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> _builtins.str:
        return pulumi.get(self, "time_machine_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetNdbTmsCapabilityResult(GetNdbTmsCapabilityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNdbTmsCapabilityResult(
            capabilities=self.capabilities,
            capability_reset_time=self.capability_reset_time,
            database_ids=self.database_ids,
            heal_with_reset_capability=self.heal_with_reset_capability,
            id=self.id,
            last_continuous_snapshot_time=self.last_continuous_snapshot_time,
            last_continuous_snapshots=self.last_continuous_snapshots,
            last_db_logs=self.last_db_logs,
            log_catchup_start_time=self.log_catchup_start_time,
            log_time_info=self.log_time_info,
            nx_cluster_association_type=self.nx_cluster_association_type,
            nx_cluster_id=self.nx_cluster_id,
            output_time_zone=self.output_time_zone,
            overall_continuous_range_end_time=self.overall_continuous_range_end_time,
            sla_id=self.sla_id,
            source=self.source,
            time_machine_id=self.time_machine_id,
            type=self.type)


def get_ndb_tms_capability(time_machine_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNdbTmsCapabilityResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['timeMachineId'] = time_machine_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getNdbTmsCapability:getNdbTmsCapability', __args__, opts=opts, typ=GetNdbTmsCapabilityResult).value

    return AwaitableGetNdbTmsCapabilityResult(
        capabilities=pulumi.get(__ret__, 'capabilities'),
        capability_reset_time=pulumi.get(__ret__, 'capability_reset_time'),
        database_ids=pulumi.get(__ret__, 'database_ids'),
        heal_with_reset_capability=pulumi.get(__ret__, 'heal_with_reset_capability'),
        id=pulumi.get(__ret__, 'id'),
        last_continuous_snapshot_time=pulumi.get(__ret__, 'last_continuous_snapshot_time'),
        last_continuous_snapshots=pulumi.get(__ret__, 'last_continuous_snapshots'),
        last_db_logs=pulumi.get(__ret__, 'last_db_logs'),
        log_catchup_start_time=pulumi.get(__ret__, 'log_catchup_start_time'),
        log_time_info=pulumi.get(__ret__, 'log_time_info'),
        nx_cluster_association_type=pulumi.get(__ret__, 'nx_cluster_association_type'),
        nx_cluster_id=pulumi.get(__ret__, 'nx_cluster_id'),
        output_time_zone=pulumi.get(__ret__, 'output_time_zone'),
        overall_continuous_range_end_time=pulumi.get(__ret__, 'overall_continuous_range_end_time'),
        sla_id=pulumi.get(__ret__, 'sla_id'),
        source=pulumi.get(__ret__, 'source'),
        time_machine_id=pulumi.get(__ret__, 'time_machine_id'),
        type=pulumi.get(__ret__, 'type'))
def get_ndb_tms_capability_output(time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNdbTmsCapabilityResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['timeMachineId'] = time_machine_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getNdbTmsCapability:getNdbTmsCapability', __args__, opts=opts, typ=GetNdbTmsCapabilityResult)
    return __ret__.apply(lambda __response__: GetNdbTmsCapabilityResult(
        capabilities=pulumi.get(__response__, 'capabilities'),
        capability_reset_time=pulumi.get(__response__, 'capability_reset_time'),
        database_ids=pulumi.get(__response__, 'database_ids'),
        heal_with_reset_capability=pulumi.get(__response__, 'heal_with_reset_capability'),
        id=pulumi.get(__response__, 'id'),
        last_continuous_snapshot_time=pulumi.get(__response__, 'last_continuous_snapshot_time'),
        last_continuous_snapshots=pulumi.get(__response__, 'last_continuous_snapshots'),
        last_db_logs=pulumi.get(__response__, 'last_db_logs'),
        log_catchup_start_time=pulumi.get(__response__, 'log_catchup_start_time'),
        log_time_info=pulumi.get(__response__, 'log_time_info'),
        nx_cluster_association_type=pulumi.get(__response__, 'nx_cluster_association_type'),
        nx_cluster_id=pulumi.get(__response__, 'nx_cluster_id'),
        output_time_zone=pulumi.get(__response__, 'output_time_zone'),
        overall_continuous_range_end_time=pulumi.get(__response__, 'overall_continuous_range_end_time'),
        sla_id=pulumi.get(__response__, 'sla_id'),
        source=pulumi.get(__response__, 'source'),
        time_machine_id=pulumi.get(__response__, 'time_machine_id'),
        type=pulumi.get(__response__, 'type')))
