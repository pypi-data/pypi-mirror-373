# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetFoundationCentralImagedClustersListResult',
    'AwaitableGetFoundationCentralImagedClustersListResult',
    'get_foundation_central_imaged_clusters_list',
    'get_foundation_central_imaged_clusters_list_output',
]

@pulumi.output_type
class GetFoundationCentralImagedClustersListResult:
    """
    A collection of values returned by getFoundationCentralImagedClustersList.
    """
    def __init__(__self__, filters=None, id=None, imaged_clusters=None, length=None, metadatas=None, offset=None):
        if filters and not isinstance(filters, dict):
            raise TypeError("Expected argument 'filters' to be a dict")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if imaged_clusters and not isinstance(imaged_clusters, list):
            raise TypeError("Expected argument 'imaged_clusters' to be a list")
        pulumi.set(__self__, "imaged_clusters", imaged_clusters)
        if length and not isinstance(length, int):
            raise TypeError("Expected argument 'length' to be a int")
        pulumi.set(__self__, "length", length)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional['outputs.GetFoundationCentralImagedClustersListFiltersResult']:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imagedClusters")
    def imaged_clusters(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListImagedClusterResult']:
        return pulumi.get(self, "imaged_clusters")

    @_builtins.property
    @pulumi.getter
    def length(self) -> Optional[_builtins.int]:
        """
        The number of records retrieved.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetFoundationCentralImagedClustersListMetadataResult']:
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> Optional[_builtins.int]:
        """
        Offset from the start of the object list.
        """
        return pulumi.get(self, "offset")


class AwaitableGetFoundationCentralImagedClustersListResult(GetFoundationCentralImagedClustersListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFoundationCentralImagedClustersListResult(
            filters=self.filters,
            id=self.id,
            imaged_clusters=self.imaged_clusters,
            length=self.length,
            metadatas=self.metadatas,
            offset=self.offset)


def get_foundation_central_imaged_clusters_list(filters: Optional[Union['GetFoundationCentralImagedClustersListFiltersArgs', 'GetFoundationCentralImagedClustersListFiltersArgsDict']] = None,
                                                length: Optional[_builtins.int] = None,
                                                offset: Optional[_builtins.int] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFoundationCentralImagedClustersListResult:
    """
    List all the clusters created using Foundation Central.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    imaged_clusters_list = nutanix.get_foundation_central_imaged_clusters_list()
    ```


    :param _builtins.int length: The number of records retrieved.
    :param _builtins.int offset: Offset from the start of the object list.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['length'] = length
    __args__['offset'] = offset
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getFoundationCentralImagedClustersList:getFoundationCentralImagedClustersList', __args__, opts=opts, typ=GetFoundationCentralImagedClustersListResult).value

    return AwaitableGetFoundationCentralImagedClustersListResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        imaged_clusters=pulumi.get(__ret__, 'imaged_clusters'),
        length=pulumi.get(__ret__, 'length'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        offset=pulumi.get(__ret__, 'offset'))
def get_foundation_central_imaged_clusters_list_output(filters: Optional[pulumi.Input[Optional[Union['GetFoundationCentralImagedClustersListFiltersArgs', 'GetFoundationCentralImagedClustersListFiltersArgsDict']]]] = None,
                                                       length: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                                       offset: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFoundationCentralImagedClustersListResult]:
    """
    List all the clusters created using Foundation Central.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    imaged_clusters_list = nutanix.get_foundation_central_imaged_clusters_list()
    ```


    :param _builtins.int length: The number of records retrieved.
    :param _builtins.int offset: Offset from the start of the object list.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['length'] = length
    __args__['offset'] = offset
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getFoundationCentralImagedClustersList:getFoundationCentralImagedClustersList', __args__, opts=opts, typ=GetFoundationCentralImagedClustersListResult)
    return __ret__.apply(lambda __response__: GetFoundationCentralImagedClustersListResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        imaged_clusters=pulumi.get(__response__, 'imaged_clusters'),
        length=pulumi.get(__response__, 'length'),
        metadatas=pulumi.get(__response__, 'metadatas'),
        offset=pulumi.get(__response__, 'offset')))
