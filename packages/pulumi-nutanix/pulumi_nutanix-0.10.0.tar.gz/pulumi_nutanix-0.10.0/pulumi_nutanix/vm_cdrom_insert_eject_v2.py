# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmCdromInsertEjectV2Args', 'VmCdromInsertEjectV2']

@pulumi.input_type
class VmCdromInsertEjectV2Args:
    def __init__(__self__, *,
                 ext_id: pulumi.Input[_builtins.str],
                 vm_ext_id: pulumi.Input[_builtins.str],
                 backing_infos: Optional[pulumi.Input[Sequence[pulumi.Input['VmCdromInsertEjectV2BackingInfoArgs']]]] = None):
        """
        The set of arguments for constructing a VmCdromInsertEjectV2 resource.
        """
        pulumi.set(__self__, "ext_id", ext_id)
        pulumi.set(__self__, "vm_ext_id", vm_ext_id)
        if backing_infos is not None:
            pulumi.set(__self__, "backing_infos", backing_infos)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "vm_ext_id")

    @vm_ext_id.setter
    def vm_ext_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vm_ext_id", value)

    @_builtins.property
    @pulumi.getter(name="backingInfos")
    def backing_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCdromInsertEjectV2BackingInfoArgs']]]]:
        return pulumi.get(self, "backing_infos")

    @backing_infos.setter
    def backing_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCdromInsertEjectV2BackingInfoArgs']]]]):
        pulumi.set(self, "backing_infos", value)


@pulumi.input_type
class _VmCdromInsertEjectV2State:
    def __init__(__self__, *,
                 backing_infos: Optional[pulumi.Input[Sequence[pulumi.Input['VmCdromInsertEjectV2BackingInfoArgs']]]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VmCdromInsertEjectV2 resources.
        """
        if backing_infos is not None:
            pulumi.set(__self__, "backing_infos", backing_infos)
        if ext_id is not None:
            pulumi.set(__self__, "ext_id", ext_id)
        if vm_ext_id is not None:
            pulumi.set(__self__, "vm_ext_id", vm_ext_id)

    @_builtins.property
    @pulumi.getter(name="backingInfos")
    def backing_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCdromInsertEjectV2BackingInfoArgs']]]]:
        return pulumi.get(self, "backing_infos")

    @backing_infos.setter
    def backing_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCdromInsertEjectV2BackingInfoArgs']]]]):
        pulumi.set(self, "backing_infos", value)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vm_ext_id")

    @vm_ext_id.setter
    def vm_ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_ext_id", value)


@pulumi.type_token("nutanix:index/vmCdromInsertEjectV2:VmCdromInsertEjectV2")
class VmCdromInsertEjectV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backing_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCdromInsertEjectV2BackingInfoArgs', 'VmCdromInsertEjectV2BackingInfoArgsDict']]]]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a VmCdromInsertEjectV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmCdromInsertEjectV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VmCdromInsertEjectV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmCdromInsertEjectV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmCdromInsertEjectV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backing_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCdromInsertEjectV2BackingInfoArgs', 'VmCdromInsertEjectV2BackingInfoArgsDict']]]]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmCdromInsertEjectV2Args.__new__(VmCdromInsertEjectV2Args)

            __props__.__dict__["backing_infos"] = backing_infos
            if ext_id is None and not opts.urn:
                raise TypeError("Missing required property 'ext_id'")
            __props__.__dict__["ext_id"] = ext_id
            if vm_ext_id is None and not opts.urn:
                raise TypeError("Missing required property 'vm_ext_id'")
            __props__.__dict__["vm_ext_id"] = vm_ext_id
        super(VmCdromInsertEjectV2, __self__).__init__(
            'nutanix:index/vmCdromInsertEjectV2:VmCdromInsertEjectV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backing_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCdromInsertEjectV2BackingInfoArgs', 'VmCdromInsertEjectV2BackingInfoArgsDict']]]]] = None,
            ext_id: Optional[pulumi.Input[_builtins.str]] = None,
            vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VmCdromInsertEjectV2':
        """
        Get an existing VmCdromInsertEjectV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmCdromInsertEjectV2State.__new__(_VmCdromInsertEjectV2State)

        __props__.__dict__["backing_infos"] = backing_infos
        __props__.__dict__["ext_id"] = ext_id
        __props__.__dict__["vm_ext_id"] = vm_ext_id
        return VmCdromInsertEjectV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backingInfos")
    def backing_infos(self) -> pulumi.Output[Optional[Sequence['outputs.VmCdromInsertEjectV2BackingInfo']]]:
        return pulumi.get(self, "backing_infos")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vm_ext_id")

