# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUserV2Result',
    'AwaitableGetUserV2Result',
    'get_user_v2',
    'get_user_v2_output',
]

@pulumi.output_type
class GetUserV2Result:
    """
    A collection of values returned by getUserV2.
    """
    def __init__(__self__, additional_attributes=None, buckets_access_keys=None, created_by=None, created_time=None, description=None, display_name=None, email_id=None, ext_id=None, first_name=None, id=None, idp_id=None, is_force_reset_password=None, last_login_time=None, last_name=None, last_updated_time=None, links=None, locale=None, middle_initial=None, password=None, region=None, status=None, user_type=None, username=None):
        if additional_attributes and not isinstance(additional_attributes, list):
            raise TypeError("Expected argument 'additional_attributes' to be a list")
        pulumi.set(__self__, "additional_attributes", additional_attributes)
        if buckets_access_keys and not isinstance(buckets_access_keys, list):
            raise TypeError("Expected argument 'buckets_access_keys' to be a list")
        pulumi.set(__self__, "buckets_access_keys", buckets_access_keys)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if email_id and not isinstance(email_id, str):
            raise TypeError("Expected argument 'email_id' to be a str")
        pulumi.set(__self__, "email_id", email_id)
        if ext_id and not isinstance(ext_id, str):
            raise TypeError("Expected argument 'ext_id' to be a str")
        pulumi.set(__self__, "ext_id", ext_id)
        if first_name and not isinstance(first_name, str):
            raise TypeError("Expected argument 'first_name' to be a str")
        pulumi.set(__self__, "first_name", first_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_id and not isinstance(idp_id, str):
            raise TypeError("Expected argument 'idp_id' to be a str")
        pulumi.set(__self__, "idp_id", idp_id)
        if is_force_reset_password and not isinstance(is_force_reset_password, bool):
            raise TypeError("Expected argument 'is_force_reset_password' to be a bool")
        pulumi.set(__self__, "is_force_reset_password", is_force_reset_password)
        if last_login_time and not isinstance(last_login_time, str):
            raise TypeError("Expected argument 'last_login_time' to be a str")
        pulumi.set(__self__, "last_login_time", last_login_time)
        if last_name and not isinstance(last_name, str):
            raise TypeError("Expected argument 'last_name' to be a str")
        pulumi.set(__self__, "last_name", last_name)
        if last_updated_time and not isinstance(last_updated_time, str):
            raise TypeError("Expected argument 'last_updated_time' to be a str")
        pulumi.set(__self__, "last_updated_time", last_updated_time)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if locale and not isinstance(locale, str):
            raise TypeError("Expected argument 'locale' to be a str")
        pulumi.set(__self__, "locale", locale)
        if middle_initial and not isinstance(middle_initial, str):
            raise TypeError("Expected argument 'middle_initial' to be a str")
        pulumi.set(__self__, "middle_initial", middle_initial)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if user_type and not isinstance(user_type, str):
            raise TypeError("Expected argument 'user_type' to be a str")
        pulumi.set(__self__, "user_type", user_type)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> Sequence['outputs.GetUserV2AdditionalAttributeResult']:
        """
        -  Any additional attribute for the User.
        """
        return pulumi.get(self, "additional_attributes")

    @_builtins.property
    @pulumi.getter(name="bucketsAccessKeys")
    def buckets_access_keys(self) -> Sequence['outputs.GetUserV2BucketsAccessKeyResult']:
        """
        - Bucket Access Keys for the User.
        """
        return pulumi.get(self, "buckets_access_keys")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        - User or Service who created the User.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        """
        - Creation time for the Bucket Access Key.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        - Description of the user.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        - Display name for the User.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="emailId")
    def email_id(self) -> _builtins.str:
        """
        - Email Id for the User.
        """
        return pulumi.get(self, "email_id")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> _builtins.str:
        """
        - A globally unique identifier of an instance that is suitable for external consumption.
        """
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> _builtins.str:
        """
        - First name for the User.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> _builtins.str:
        """
        - Identifier of the IDP for the User.
        """
        return pulumi.get(self, "idp_id")

    @_builtins.property
    @pulumi.getter(name="isForceResetPassword")
    def is_force_reset_password(self) -> _builtins.bool:
        """
        - Flag to force the User to reset password.
        """
        return pulumi.get(self, "is_force_reset_password")

    @_builtins.property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> _builtins.str:
        """
        - Last successful logged in time for the User.
        """
        return pulumi.get(self, "last_login_time")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> _builtins.str:
        """
        - Last name for the User.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> _builtins.str:
        """
        - Last updated time of the User.
        """
        return pulumi.get(self, "last_updated_time")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetUserV2LinkResult']:
        """
        - A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def locale(self) -> _builtins.str:
        """
        - Default locale for the User.
        """
        return pulumi.get(self, "locale")

    @_builtins.property
    @pulumi.getter(name="middleInitial")
    def middle_initial(self) -> _builtins.str:
        """
        - Middle name for the User.
        """
        return pulumi.get(self, "middle_initial")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        - Default Region for the User.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        - Status of the User. `ACTIVE`: Denotes that the local User is active. `INACTIVE`: Denotes that the local User is inactive and needs to be reactivated.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> _builtins.str:
        """
        - Enum: `$UNKNOWN` `$REDACTED` `LOCAL` `SAML` `LDAP` `EXTERNAL`
        Type of the User.
        """
        return pulumi.get(self, "user_type")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        - Identifier for the User in the form an email address.
        """
        return pulumi.get(self, "username")


class AwaitableGetUserV2Result(GetUserV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserV2Result(
            additional_attributes=self.additional_attributes,
            buckets_access_keys=self.buckets_access_keys,
            created_by=self.created_by,
            created_time=self.created_time,
            description=self.description,
            display_name=self.display_name,
            email_id=self.email_id,
            ext_id=self.ext_id,
            first_name=self.first_name,
            id=self.id,
            idp_id=self.idp_id,
            is_force_reset_password=self.is_force_reset_password,
            last_login_time=self.last_login_time,
            last_name=self.last_name,
            last_updated_time=self.last_updated_time,
            links=self.links,
            locale=self.locale,
            middle_initial=self.middle_initial,
            password=self.password,
            region=self.region,
            status=self.status,
            user_type=self.user_type,
            username=self.username)


def get_user_v2(ext_id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserV2Result:
    """
    Provides a datasource to View a User.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    get_user = nutanix.get_user_v2(ext_id="d3a3232a-9055-4740-b54f-b21a33524565")
    ```

    ## Argument Reference

    The following arguments are supported:

    * `ext_id`: -(Required) External Identifier of the User.


    :param _builtins.str ext_id: - A globally unique identifier of an instance that is suitable for external consumption.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getUserV2:getUserV2', __args__, opts=opts, typ=GetUserV2Result).value

    return AwaitableGetUserV2Result(
        additional_attributes=pulumi.get(__ret__, 'additional_attributes'),
        buckets_access_keys=pulumi.get(__ret__, 'buckets_access_keys'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_time=pulumi.get(__ret__, 'created_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        email_id=pulumi.get(__ret__, 'email_id'),
        ext_id=pulumi.get(__ret__, 'ext_id'),
        first_name=pulumi.get(__ret__, 'first_name'),
        id=pulumi.get(__ret__, 'id'),
        idp_id=pulumi.get(__ret__, 'idp_id'),
        is_force_reset_password=pulumi.get(__ret__, 'is_force_reset_password'),
        last_login_time=pulumi.get(__ret__, 'last_login_time'),
        last_name=pulumi.get(__ret__, 'last_name'),
        last_updated_time=pulumi.get(__ret__, 'last_updated_time'),
        links=pulumi.get(__ret__, 'links'),
        locale=pulumi.get(__ret__, 'locale'),
        middle_initial=pulumi.get(__ret__, 'middle_initial'),
        password=pulumi.get(__ret__, 'password'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        user_type=pulumi.get(__ret__, 'user_type'),
        username=pulumi.get(__ret__, 'username'))
def get_user_v2_output(ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserV2Result]:
    """
    Provides a datasource to View a User.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    get_user = nutanix.get_user_v2(ext_id="d3a3232a-9055-4740-b54f-b21a33524565")
    ```

    ## Argument Reference

    The following arguments are supported:

    * `ext_id`: -(Required) External Identifier of the User.


    :param _builtins.str ext_id: - A globally unique identifier of an instance that is suitable for external consumption.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getUserV2:getUserV2', __args__, opts=opts, typ=GetUserV2Result)
    return __ret__.apply(lambda __response__: GetUserV2Result(
        additional_attributes=pulumi.get(__response__, 'additional_attributes'),
        buckets_access_keys=pulumi.get(__response__, 'buckets_access_keys'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_time=pulumi.get(__response__, 'created_time'),
        description=pulumi.get(__response__, 'description'),
        display_name=pulumi.get(__response__, 'display_name'),
        email_id=pulumi.get(__response__, 'email_id'),
        ext_id=pulumi.get(__response__, 'ext_id'),
        first_name=pulumi.get(__response__, 'first_name'),
        id=pulumi.get(__response__, 'id'),
        idp_id=pulumi.get(__response__, 'idp_id'),
        is_force_reset_password=pulumi.get(__response__, 'is_force_reset_password'),
        last_login_time=pulumi.get(__response__, 'last_login_time'),
        last_name=pulumi.get(__response__, 'last_name'),
        last_updated_time=pulumi.get(__response__, 'last_updated_time'),
        links=pulumi.get(__response__, 'links'),
        locale=pulumi.get(__response__, 'locale'),
        middle_initial=pulumi.get(__response__, 'middle_initial'),
        password=pulumi.get(__response__, 'password'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        user_type=pulumi.get(__response__, 'user_type'),
        username=pulumi.get(__response__, 'username')))
