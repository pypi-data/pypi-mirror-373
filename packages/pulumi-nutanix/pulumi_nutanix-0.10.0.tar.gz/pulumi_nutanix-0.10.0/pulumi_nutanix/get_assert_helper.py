# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAssertHelperResult',
    'AwaitableGetAssertHelperResult',
    'get_assert_helper',
    'get_assert_helper_output',
]

@pulumi.output_type
class GetAssertHelperResult:
    """
    A collection of values returned by getAssertHelper.
    """
    def __init__(__self__, checks=None, id=None):
        if checks and not isinstance(checks, list):
            raise TypeError("Expected argument 'checks' to be a list")
        pulumi.set(__self__, "checks", checks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def checks(self) -> Optional[Sequence['outputs.GetAssertHelperCheckResult']]:
        return pulumi.get(self, "checks")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetAssertHelperResult(GetAssertHelperResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAssertHelperResult(
            checks=self.checks,
            id=self.id)


def get_assert_helper(checks: Optional[Sequence[Union['GetAssertHelperCheckArgs', 'GetAssertHelperCheckArgsDict']]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAssertHelperResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['checks'] = checks
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getAssertHelper:getAssertHelper', __args__, opts=opts, typ=GetAssertHelperResult).value

    return AwaitableGetAssertHelperResult(
        checks=pulumi.get(__ret__, 'checks'),
        id=pulumi.get(__ret__, 'id'))
def get_assert_helper_output(checks: Optional[pulumi.Input[Optional[Sequence[Union['GetAssertHelperCheckArgs', 'GetAssertHelperCheckArgsDict']]]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAssertHelperResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['checks'] = checks
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getAssertHelper:getAssertHelper', __args__, opts=opts, typ=GetAssertHelperResult)
    return __ret__.apply(lambda __response__: GetAssertHelperResult(
        checks=pulumi.get(__response__, 'checks'),
        id=pulumi.get(__response__, 'id')))
