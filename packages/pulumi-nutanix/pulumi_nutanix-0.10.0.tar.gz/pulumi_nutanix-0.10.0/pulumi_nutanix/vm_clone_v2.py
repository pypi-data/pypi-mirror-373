# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmCloneV2Args', 'VmCloneV2']

@pulumi.input_type
class VmCloneV2Args:
    def __init__(__self__, *,
                 vm_ext_id: pulumi.Input[_builtins.str],
                 boot_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2BootConfigArgs']]]] = None,
                 guest_customizations: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestCustomizationArgs']]]] = None,
                 memory_size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2NicArgs']]]] = None,
                 num_cores_per_socket: Optional[pulumi.Input[_builtins.int]] = None,
                 num_sockets: Optional[pulumi.Input[_builtins.int]] = None,
                 num_threads_per_core: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a VmCloneV2 resource.
        """
        pulumi.set(__self__, "vm_ext_id", vm_ext_id)
        if boot_configs is not None:
            pulumi.set(__self__, "boot_configs", boot_configs)
        if guest_customizations is not None:
            pulumi.set(__self__, "guest_customizations", guest_customizations)
        if memory_size_bytes is not None:
            pulumi.set(__self__, "memory_size_bytes", memory_size_bytes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if num_cores_per_socket is not None:
            pulumi.set(__self__, "num_cores_per_socket", num_cores_per_socket)
        if num_sockets is not None:
            pulumi.set(__self__, "num_sockets", num_sockets)
        if num_threads_per_core is not None:
            pulumi.set(__self__, "num_threads_per_core", num_threads_per_core)

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "vm_ext_id")

    @vm_ext_id.setter
    def vm_ext_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vm_ext_id", value)

    @_builtins.property
    @pulumi.getter(name="bootConfigs")
    def boot_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2BootConfigArgs']]]]:
        return pulumi.get(self, "boot_configs")

    @boot_configs.setter
    def boot_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2BootConfigArgs']]]]):
        pulumi.set(self, "boot_configs", value)

    @_builtins.property
    @pulumi.getter(name="guestCustomizations")
    def guest_customizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestCustomizationArgs']]]]:
        return pulumi.get(self, "guest_customizations")

    @guest_customizations.setter
    def guest_customizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestCustomizationArgs']]]]):
        pulumi.set(self, "guest_customizations", value)

    @_builtins.property
    @pulumi.getter(name="memorySizeBytes")
    def memory_size_bytes(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "memory_size_bytes")

    @memory_size_bytes.setter
    def memory_size_bytes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory_size_bytes", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2NicArgs']]]]:
        return pulumi.get(self, "nics")

    @nics.setter
    def nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2NicArgs']]]]):
        pulumi.set(self, "nics", value)

    @_builtins.property
    @pulumi.getter(name="numCoresPerSocket")
    def num_cores_per_socket(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "num_cores_per_socket")

    @num_cores_per_socket.setter
    def num_cores_per_socket(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "num_cores_per_socket", value)

    @_builtins.property
    @pulumi.getter(name="numSockets")
    def num_sockets(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "num_sockets")

    @num_sockets.setter
    def num_sockets(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "num_sockets", value)

    @_builtins.property
    @pulumi.getter(name="numThreadsPerCore")
    def num_threads_per_core(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "num_threads_per_core")

    @num_threads_per_core.setter
    def num_threads_per_core(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "num_threads_per_core", value)


@pulumi.input_type
class _VmCloneV2State:
    def __init__(__self__, *,
                 apc_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ApcConfigArgs']]]] = None,
                 bios_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                 boot_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2BootConfigArgs']]]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2CategoryArgs']]]] = None,
                 cd_roms: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2CdRomArgs']]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ClusterArgs']]]] = None,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2DiskArgs']]]] = None,
                 enabled_cpu_features: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 generation_uuid: Optional[pulumi.Input[_builtins.str]] = None,
                 gpuses: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GpusArgs']]]] = None,
                 guest_customizations: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestCustomizationArgs']]]] = None,
                 guest_tools: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestToolArgs']]]] = None,
                 hardware_clock_timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2HostArgs']]]] = None,
                 is_agent_vm: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_branding_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_cpu_hotplug_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_cpu_passthrough_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_gpu_console_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_memory_overcommit_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_scsi_controller_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vcpu_hard_pinning_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vga_console_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2LinkArgs']]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 memory_size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2NicArgs']]]] = None,
                 num_cores_per_socket: Optional[pulumi.Input[_builtins.int]] = None,
                 num_numa_nodes: Optional[pulumi.Input[_builtins.int]] = None,
                 num_sockets: Optional[pulumi.Input[_builtins.int]] = None,
                 num_threads_per_core: Optional[pulumi.Input[_builtins.int]] = None,
                 ownership_infos: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2OwnershipInfoArgs']]]] = None,
                 power_state: Optional[pulumi.Input[_builtins.str]] = None,
                 protection_policy_states: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ProtectionPolicyStateArgs']]]] = None,
                 protection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_ports: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2SerialPortArgs']]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2SourceArgs']]]] = None,
                 storage_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2StorageConfigArgs']]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vtpm_configs: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2VtpmConfigArgs']]]] = None):
        """
        Input properties used for looking up and filtering VmCloneV2 resources.
        """
        if apc_configs is not None:
            pulumi.set(__self__, "apc_configs", apc_configs)
        if bios_uuid is not None:
            pulumi.set(__self__, "bios_uuid", bios_uuid)
        if boot_configs is not None:
            pulumi.set(__self__, "boot_configs", boot_configs)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if cd_roms is not None:
            pulumi.set(__self__, "cd_roms", cd_roms)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if enabled_cpu_features is not None:
            pulumi.set(__self__, "enabled_cpu_features", enabled_cpu_features)
        if ext_id is not None:
            pulumi.set(__self__, "ext_id", ext_id)
        if generation_uuid is not None:
            pulumi.set(__self__, "generation_uuid", generation_uuid)
        if gpuses is not None:
            pulumi.set(__self__, "gpuses", gpuses)
        if guest_customizations is not None:
            pulumi.set(__self__, "guest_customizations", guest_customizations)
        if guest_tools is not None:
            pulumi.set(__self__, "guest_tools", guest_tools)
        if hardware_clock_timezone is not None:
            pulumi.set(__self__, "hardware_clock_timezone", hardware_clock_timezone)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if is_agent_vm is not None:
            pulumi.set(__self__, "is_agent_vm", is_agent_vm)
        if is_branding_enabled is not None:
            pulumi.set(__self__, "is_branding_enabled", is_branding_enabled)
        if is_cpu_hotplug_enabled is not None:
            pulumi.set(__self__, "is_cpu_hotplug_enabled", is_cpu_hotplug_enabled)
        if is_cpu_passthrough_enabled is not None:
            pulumi.set(__self__, "is_cpu_passthrough_enabled", is_cpu_passthrough_enabled)
        if is_gpu_console_enabled is not None:
            pulumi.set(__self__, "is_gpu_console_enabled", is_gpu_console_enabled)
        if is_memory_overcommit_enabled is not None:
            pulumi.set(__self__, "is_memory_overcommit_enabled", is_memory_overcommit_enabled)
        if is_scsi_controller_enabled is not None:
            pulumi.set(__self__, "is_scsi_controller_enabled", is_scsi_controller_enabled)
        if is_vcpu_hard_pinning_enabled is not None:
            pulumi.set(__self__, "is_vcpu_hard_pinning_enabled", is_vcpu_hard_pinning_enabled)
        if is_vga_console_enabled is not None:
            pulumi.set(__self__, "is_vga_console_enabled", is_vga_console_enabled)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if memory_size_bytes is not None:
            pulumi.set(__self__, "memory_size_bytes", memory_size_bytes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if num_cores_per_socket is not None:
            pulumi.set(__self__, "num_cores_per_socket", num_cores_per_socket)
        if num_numa_nodes is not None:
            pulumi.set(__self__, "num_numa_nodes", num_numa_nodes)
        if num_sockets is not None:
            pulumi.set(__self__, "num_sockets", num_sockets)
        if num_threads_per_core is not None:
            pulumi.set(__self__, "num_threads_per_core", num_threads_per_core)
        if ownership_infos is not None:
            pulumi.set(__self__, "ownership_infos", ownership_infos)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if protection_policy_states is not None:
            pulumi.set(__self__, "protection_policy_states", protection_policy_states)
        if protection_type is not None:
            pulumi.set(__self__, "protection_type", protection_type)
        if serial_ports is not None:
            pulumi.set(__self__, "serial_ports", serial_ports)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if storage_configs is not None:
            pulumi.set(__self__, "storage_configs", storage_configs)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if vm_ext_id is not None:
            pulumi.set(__self__, "vm_ext_id", vm_ext_id)
        if vtpm_configs is not None:
            pulumi.set(__self__, "vtpm_configs", vtpm_configs)

    @_builtins.property
    @pulumi.getter(name="apcConfigs")
    def apc_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ApcConfigArgs']]]]:
        return pulumi.get(self, "apc_configs")

    @apc_configs.setter
    def apc_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ApcConfigArgs']]]]):
        pulumi.set(self, "apc_configs", value)

    @_builtins.property
    @pulumi.getter(name="biosUuid")
    def bios_uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "bios_uuid")

    @bios_uuid.setter
    def bios_uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bios_uuid", value)

    @_builtins.property
    @pulumi.getter(name="bootConfigs")
    def boot_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2BootConfigArgs']]]]:
        return pulumi.get(self, "boot_configs")

    @boot_configs.setter
    def boot_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2BootConfigArgs']]]]):
        pulumi.set(self, "boot_configs", value)

    @_builtins.property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2CategoryArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2CategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @_builtins.property
    @pulumi.getter(name="cdRoms")
    def cd_roms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2CdRomArgs']]]]:
        return pulumi.get(self, "cd_roms")

    @cd_roms.setter
    def cd_roms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2CdRomArgs']]]]):
        pulumi.set(self, "cd_roms", value)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ClusterArgs']]]]:
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ClusterArgs']]]]):
        pulumi.set(self, "clusters", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2DiskArgs']]]]:
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2DiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter(name="enabledCpuFeatures")
    def enabled_cpu_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "enabled_cpu_features")

    @enabled_cpu_features.setter
    def enabled_cpu_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "enabled_cpu_features", value)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="generationUuid")
    def generation_uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "generation_uuid")

    @generation_uuid.setter
    def generation_uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "generation_uuid", value)

    @_builtins.property
    @pulumi.getter
    def gpuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GpusArgs']]]]:
        return pulumi.get(self, "gpuses")

    @gpuses.setter
    def gpuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GpusArgs']]]]):
        pulumi.set(self, "gpuses", value)

    @_builtins.property
    @pulumi.getter(name="guestCustomizations")
    def guest_customizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestCustomizationArgs']]]]:
        return pulumi.get(self, "guest_customizations")

    @guest_customizations.setter
    def guest_customizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestCustomizationArgs']]]]):
        pulumi.set(self, "guest_customizations", value)

    @_builtins.property
    @pulumi.getter(name="guestTools")
    def guest_tools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestToolArgs']]]]:
        return pulumi.get(self, "guest_tools")

    @guest_tools.setter
    def guest_tools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2GuestToolArgs']]]]):
        pulumi.set(self, "guest_tools", value)

    @_builtins.property
    @pulumi.getter(name="hardwareClockTimezone")
    def hardware_clock_timezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hardware_clock_timezone")

    @hardware_clock_timezone.setter
    def hardware_clock_timezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hardware_clock_timezone", value)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2HostArgs']]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2HostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter(name="isAgentVm")
    def is_agent_vm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_agent_vm")

    @is_agent_vm.setter
    def is_agent_vm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_agent_vm", value)

    @_builtins.property
    @pulumi.getter(name="isBrandingEnabled")
    def is_branding_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_branding_enabled")

    @is_branding_enabled.setter
    def is_branding_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_branding_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isCpuHotplugEnabled")
    def is_cpu_hotplug_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_cpu_hotplug_enabled")

    @is_cpu_hotplug_enabled.setter
    def is_cpu_hotplug_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_cpu_hotplug_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isCpuPassthroughEnabled")
    def is_cpu_passthrough_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_cpu_passthrough_enabled")

    @is_cpu_passthrough_enabled.setter
    def is_cpu_passthrough_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_cpu_passthrough_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isGpuConsoleEnabled")
    def is_gpu_console_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_gpu_console_enabled")

    @is_gpu_console_enabled.setter
    def is_gpu_console_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_gpu_console_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isMemoryOvercommitEnabled")
    def is_memory_overcommit_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_memory_overcommit_enabled")

    @is_memory_overcommit_enabled.setter
    def is_memory_overcommit_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_memory_overcommit_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isScsiControllerEnabled")
    def is_scsi_controller_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_scsi_controller_enabled")

    @is_scsi_controller_enabled.setter
    def is_scsi_controller_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_scsi_controller_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isVcpuHardPinningEnabled")
    def is_vcpu_hard_pinning_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_vcpu_hard_pinning_enabled")

    @is_vcpu_hard_pinning_enabled.setter
    def is_vcpu_hard_pinning_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_vcpu_hard_pinning_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isVgaConsoleEnabled")
    def is_vga_console_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_vga_console_enabled")

    @is_vga_console_enabled.setter
    def is_vga_console_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_vga_console_enabled", value)

    @_builtins.property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2LinkArgs']]]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2LinkArgs']]]]):
        pulumi.set(self, "links", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter(name="memorySizeBytes")
    def memory_size_bytes(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "memory_size_bytes")

    @memory_size_bytes.setter
    def memory_size_bytes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "memory_size_bytes", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2NicArgs']]]]:
        return pulumi.get(self, "nics")

    @nics.setter
    def nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2NicArgs']]]]):
        pulumi.set(self, "nics", value)

    @_builtins.property
    @pulumi.getter(name="numCoresPerSocket")
    def num_cores_per_socket(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "num_cores_per_socket")

    @num_cores_per_socket.setter
    def num_cores_per_socket(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "num_cores_per_socket", value)

    @_builtins.property
    @pulumi.getter(name="numNumaNodes")
    def num_numa_nodes(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "num_numa_nodes")

    @num_numa_nodes.setter
    def num_numa_nodes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "num_numa_nodes", value)

    @_builtins.property
    @pulumi.getter(name="numSockets")
    def num_sockets(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "num_sockets")

    @num_sockets.setter
    def num_sockets(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "num_sockets", value)

    @_builtins.property
    @pulumi.getter(name="numThreadsPerCore")
    def num_threads_per_core(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "num_threads_per_core")

    @num_threads_per_core.setter
    def num_threads_per_core(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "num_threads_per_core", value)

    @_builtins.property
    @pulumi.getter(name="ownershipInfos")
    def ownership_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2OwnershipInfoArgs']]]]:
        return pulumi.get(self, "ownership_infos")

    @ownership_infos.setter
    def ownership_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2OwnershipInfoArgs']]]]):
        pulumi.set(self, "ownership_infos", value)

    @_builtins.property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "power_state")

    @power_state.setter
    def power_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "power_state", value)

    @_builtins.property
    @pulumi.getter(name="protectionPolicyStates")
    def protection_policy_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ProtectionPolicyStateArgs']]]]:
        return pulumi.get(self, "protection_policy_states")

    @protection_policy_states.setter
    def protection_policy_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2ProtectionPolicyStateArgs']]]]):
        pulumi.set(self, "protection_policy_states", value)

    @_builtins.property
    @pulumi.getter(name="protectionType")
    def protection_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "protection_type")

    @protection_type.setter
    def protection_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protection_type", value)

    @_builtins.property
    @pulumi.getter(name="serialPorts")
    def serial_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2SerialPortArgs']]]]:
        return pulumi.get(self, "serial_ports")

    @serial_ports.setter
    def serial_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2SerialPortArgs']]]]):
        pulumi.set(self, "serial_ports", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2SourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2SourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter(name="storageConfigs")
    def storage_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2StorageConfigArgs']]]]:
        return pulumi.get(self, "storage_configs")

    @storage_configs.setter
    def storage_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2StorageConfigArgs']]]]):
        pulumi.set(self, "storage_configs", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_time", value)

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vm_ext_id")

    @vm_ext_id.setter
    def vm_ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_ext_id", value)

    @_builtins.property
    @pulumi.getter(name="vtpmConfigs")
    def vtpm_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2VtpmConfigArgs']]]]:
        return pulumi.get(self, "vtpm_configs")

    @vtpm_configs.setter
    def vtpm_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmCloneV2VtpmConfigArgs']]]]):
        pulumi.set(self, "vtpm_configs", value)


@pulumi.type_token("nutanix:index/vmCloneV2:VmCloneV2")
class VmCloneV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2BootConfigArgs', 'VmCloneV2BootConfigArgsDict']]]]] = None,
                 guest_customizations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2GuestCustomizationArgs', 'VmCloneV2GuestCustomizationArgsDict']]]]] = None,
                 memory_size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2NicArgs', 'VmCloneV2NicArgsDict']]]]] = None,
                 num_cores_per_socket: Optional[pulumi.Input[_builtins.int]] = None,
                 num_sockets: Optional[pulumi.Input[_builtins.int]] = None,
                 num_threads_per_core: Optional[pulumi.Input[_builtins.int]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a VmCloneV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmCloneV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VmCloneV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmCloneV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmCloneV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2BootConfigArgs', 'VmCloneV2BootConfigArgsDict']]]]] = None,
                 guest_customizations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2GuestCustomizationArgs', 'VmCloneV2GuestCustomizationArgsDict']]]]] = None,
                 memory_size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2NicArgs', 'VmCloneV2NicArgsDict']]]]] = None,
                 num_cores_per_socket: Optional[pulumi.Input[_builtins.int]] = None,
                 num_sockets: Optional[pulumi.Input[_builtins.int]] = None,
                 num_threads_per_core: Optional[pulumi.Input[_builtins.int]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmCloneV2Args.__new__(VmCloneV2Args)

            __props__.__dict__["boot_configs"] = boot_configs
            __props__.__dict__["guest_customizations"] = guest_customizations
            __props__.__dict__["memory_size_bytes"] = memory_size_bytes
            __props__.__dict__["name"] = name
            __props__.__dict__["nics"] = nics
            __props__.__dict__["num_cores_per_socket"] = num_cores_per_socket
            __props__.__dict__["num_sockets"] = num_sockets
            __props__.__dict__["num_threads_per_core"] = num_threads_per_core
            if vm_ext_id is None and not opts.urn:
                raise TypeError("Missing required property 'vm_ext_id'")
            __props__.__dict__["vm_ext_id"] = vm_ext_id
            __props__.__dict__["apc_configs"] = None
            __props__.__dict__["bios_uuid"] = None
            __props__.__dict__["categories"] = None
            __props__.__dict__["cd_roms"] = None
            __props__.__dict__["clusters"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["disks"] = None
            __props__.__dict__["enabled_cpu_features"] = None
            __props__.__dict__["ext_id"] = None
            __props__.__dict__["generation_uuid"] = None
            __props__.__dict__["gpuses"] = None
            __props__.__dict__["guest_tools"] = None
            __props__.__dict__["hardware_clock_timezone"] = None
            __props__.__dict__["hosts"] = None
            __props__.__dict__["is_agent_vm"] = None
            __props__.__dict__["is_branding_enabled"] = None
            __props__.__dict__["is_cpu_hotplug_enabled"] = None
            __props__.__dict__["is_cpu_passthrough_enabled"] = None
            __props__.__dict__["is_gpu_console_enabled"] = None
            __props__.__dict__["is_memory_overcommit_enabled"] = None
            __props__.__dict__["is_scsi_controller_enabled"] = None
            __props__.__dict__["is_vcpu_hard_pinning_enabled"] = None
            __props__.__dict__["is_vga_console_enabled"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["machine_type"] = None
            __props__.__dict__["num_numa_nodes"] = None
            __props__.__dict__["ownership_infos"] = None
            __props__.__dict__["power_state"] = None
            __props__.__dict__["protection_policy_states"] = None
            __props__.__dict__["protection_type"] = None
            __props__.__dict__["serial_ports"] = None
            __props__.__dict__["sources"] = None
            __props__.__dict__["storage_configs"] = None
            __props__.__dict__["tenant_id"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["vtpm_configs"] = None
        super(VmCloneV2, __self__).__init__(
            'nutanix:index/vmCloneV2:VmCloneV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apc_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2ApcConfigArgs', 'VmCloneV2ApcConfigArgsDict']]]]] = None,
            bios_uuid: Optional[pulumi.Input[_builtins.str]] = None,
            boot_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2BootConfigArgs', 'VmCloneV2BootConfigArgsDict']]]]] = None,
            categories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2CategoryArgs', 'VmCloneV2CategoryArgsDict']]]]] = None,
            cd_roms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2CdRomArgs', 'VmCloneV2CdRomArgsDict']]]]] = None,
            clusters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2ClusterArgs', 'VmCloneV2ClusterArgsDict']]]]] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2DiskArgs', 'VmCloneV2DiskArgsDict']]]]] = None,
            enabled_cpu_features: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ext_id: Optional[pulumi.Input[_builtins.str]] = None,
            generation_uuid: Optional[pulumi.Input[_builtins.str]] = None,
            gpuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2GpusArgs', 'VmCloneV2GpusArgsDict']]]]] = None,
            guest_customizations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2GuestCustomizationArgs', 'VmCloneV2GuestCustomizationArgsDict']]]]] = None,
            guest_tools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2GuestToolArgs', 'VmCloneV2GuestToolArgsDict']]]]] = None,
            hardware_clock_timezone: Optional[pulumi.Input[_builtins.str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2HostArgs', 'VmCloneV2HostArgsDict']]]]] = None,
            is_agent_vm: Optional[pulumi.Input[_builtins.bool]] = None,
            is_branding_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_cpu_hotplug_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_cpu_passthrough_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_gpu_console_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_memory_overcommit_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_scsi_controller_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_vcpu_hard_pinning_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_vga_console_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2LinkArgs', 'VmCloneV2LinkArgsDict']]]]] = None,
            machine_type: Optional[pulumi.Input[_builtins.str]] = None,
            memory_size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2NicArgs', 'VmCloneV2NicArgsDict']]]]] = None,
            num_cores_per_socket: Optional[pulumi.Input[_builtins.int]] = None,
            num_numa_nodes: Optional[pulumi.Input[_builtins.int]] = None,
            num_sockets: Optional[pulumi.Input[_builtins.int]] = None,
            num_threads_per_core: Optional[pulumi.Input[_builtins.int]] = None,
            ownership_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2OwnershipInfoArgs', 'VmCloneV2OwnershipInfoArgsDict']]]]] = None,
            power_state: Optional[pulumi.Input[_builtins.str]] = None,
            protection_policy_states: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2ProtectionPolicyStateArgs', 'VmCloneV2ProtectionPolicyStateArgsDict']]]]] = None,
            protection_type: Optional[pulumi.Input[_builtins.str]] = None,
            serial_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2SerialPortArgs', 'VmCloneV2SerialPortArgsDict']]]]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2SourceArgs', 'VmCloneV2SourceArgsDict']]]]] = None,
            storage_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2StorageConfigArgs', 'VmCloneV2StorageConfigArgsDict']]]]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            update_time: Optional[pulumi.Input[_builtins.str]] = None,
            vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
            vtpm_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmCloneV2VtpmConfigArgs', 'VmCloneV2VtpmConfigArgsDict']]]]] = None) -> 'VmCloneV2':
        """
        Get an existing VmCloneV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmCloneV2State.__new__(_VmCloneV2State)

        __props__.__dict__["apc_configs"] = apc_configs
        __props__.__dict__["bios_uuid"] = bios_uuid
        __props__.__dict__["boot_configs"] = boot_configs
        __props__.__dict__["categories"] = categories
        __props__.__dict__["cd_roms"] = cd_roms
        __props__.__dict__["clusters"] = clusters
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["disks"] = disks
        __props__.__dict__["enabled_cpu_features"] = enabled_cpu_features
        __props__.__dict__["ext_id"] = ext_id
        __props__.__dict__["generation_uuid"] = generation_uuid
        __props__.__dict__["gpuses"] = gpuses
        __props__.__dict__["guest_customizations"] = guest_customizations
        __props__.__dict__["guest_tools"] = guest_tools
        __props__.__dict__["hardware_clock_timezone"] = hardware_clock_timezone
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["is_agent_vm"] = is_agent_vm
        __props__.__dict__["is_branding_enabled"] = is_branding_enabled
        __props__.__dict__["is_cpu_hotplug_enabled"] = is_cpu_hotplug_enabled
        __props__.__dict__["is_cpu_passthrough_enabled"] = is_cpu_passthrough_enabled
        __props__.__dict__["is_gpu_console_enabled"] = is_gpu_console_enabled
        __props__.__dict__["is_memory_overcommit_enabled"] = is_memory_overcommit_enabled
        __props__.__dict__["is_scsi_controller_enabled"] = is_scsi_controller_enabled
        __props__.__dict__["is_vcpu_hard_pinning_enabled"] = is_vcpu_hard_pinning_enabled
        __props__.__dict__["is_vga_console_enabled"] = is_vga_console_enabled
        __props__.__dict__["links"] = links
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["memory_size_bytes"] = memory_size_bytes
        __props__.__dict__["name"] = name
        __props__.__dict__["nics"] = nics
        __props__.__dict__["num_cores_per_socket"] = num_cores_per_socket
        __props__.__dict__["num_numa_nodes"] = num_numa_nodes
        __props__.__dict__["num_sockets"] = num_sockets
        __props__.__dict__["num_threads_per_core"] = num_threads_per_core
        __props__.__dict__["ownership_infos"] = ownership_infos
        __props__.__dict__["power_state"] = power_state
        __props__.__dict__["protection_policy_states"] = protection_policy_states
        __props__.__dict__["protection_type"] = protection_type
        __props__.__dict__["serial_ports"] = serial_ports
        __props__.__dict__["sources"] = sources
        __props__.__dict__["storage_configs"] = storage_configs
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["vm_ext_id"] = vm_ext_id
        __props__.__dict__["vtpm_configs"] = vtpm_configs
        return VmCloneV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apcConfigs")
    def apc_configs(self) -> pulumi.Output[Sequence['outputs.VmCloneV2ApcConfig']]:
        return pulumi.get(self, "apc_configs")

    @_builtins.property
    @pulumi.getter(name="biosUuid")
    def bios_uuid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "bios_uuid")

    @_builtins.property
    @pulumi.getter(name="bootConfigs")
    def boot_configs(self) -> pulumi.Output[Sequence['outputs.VmCloneV2BootConfig']]:
        return pulumi.get(self, "boot_configs")

    @_builtins.property
    @pulumi.getter
    def categories(self) -> pulumi.Output[Sequence['outputs.VmCloneV2Category']]:
        return pulumi.get(self, "categories")

    @_builtins.property
    @pulumi.getter(name="cdRoms")
    def cd_roms(self) -> pulumi.Output[Sequence['outputs.VmCloneV2CdRom']]:
        return pulumi.get(self, "cd_roms")

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> pulumi.Output[Sequence['outputs.VmCloneV2Cluster']]:
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Sequence['outputs.VmCloneV2Disk']]:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter(name="enabledCpuFeatures")
    def enabled_cpu_features(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "enabled_cpu_features")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="generationUuid")
    def generation_uuid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "generation_uuid")

    @_builtins.property
    @pulumi.getter
    def gpuses(self) -> pulumi.Output[Sequence['outputs.VmCloneV2Gpus']]:
        return pulumi.get(self, "gpuses")

    @_builtins.property
    @pulumi.getter(name="guestCustomizations")
    def guest_customizations(self) -> pulumi.Output[Sequence['outputs.VmCloneV2GuestCustomization']]:
        return pulumi.get(self, "guest_customizations")

    @_builtins.property
    @pulumi.getter(name="guestTools")
    def guest_tools(self) -> pulumi.Output[Sequence['outputs.VmCloneV2GuestTool']]:
        return pulumi.get(self, "guest_tools")

    @_builtins.property
    @pulumi.getter(name="hardwareClockTimezone")
    def hardware_clock_timezone(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hardware_clock_timezone")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence['outputs.VmCloneV2Host']]:
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter(name="isAgentVm")
    def is_agent_vm(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_agent_vm")

    @_builtins.property
    @pulumi.getter(name="isBrandingEnabled")
    def is_branding_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_branding_enabled")

    @_builtins.property
    @pulumi.getter(name="isCpuHotplugEnabled")
    def is_cpu_hotplug_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_cpu_hotplug_enabled")

    @_builtins.property
    @pulumi.getter(name="isCpuPassthroughEnabled")
    def is_cpu_passthrough_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_cpu_passthrough_enabled")

    @_builtins.property
    @pulumi.getter(name="isGpuConsoleEnabled")
    def is_gpu_console_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_gpu_console_enabled")

    @_builtins.property
    @pulumi.getter(name="isMemoryOvercommitEnabled")
    def is_memory_overcommit_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_memory_overcommit_enabled")

    @_builtins.property
    @pulumi.getter(name="isScsiControllerEnabled")
    def is_scsi_controller_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_scsi_controller_enabled")

    @_builtins.property
    @pulumi.getter(name="isVcpuHardPinningEnabled")
    def is_vcpu_hard_pinning_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_vcpu_hard_pinning_enabled")

    @_builtins.property
    @pulumi.getter(name="isVgaConsoleEnabled")
    def is_vga_console_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_vga_console_enabled")

    @_builtins.property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.VmCloneV2Link']]:
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter(name="memorySizeBytes")
    def memory_size_bytes(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "memory_size_bytes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nics(self) -> pulumi.Output[Sequence['outputs.VmCloneV2Nic']]:
        return pulumi.get(self, "nics")

    @_builtins.property
    @pulumi.getter(name="numCoresPerSocket")
    def num_cores_per_socket(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "num_cores_per_socket")

    @_builtins.property
    @pulumi.getter(name="numNumaNodes")
    def num_numa_nodes(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "num_numa_nodes")

    @_builtins.property
    @pulumi.getter(name="numSockets")
    def num_sockets(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "num_sockets")

    @_builtins.property
    @pulumi.getter(name="numThreadsPerCore")
    def num_threads_per_core(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "num_threads_per_core")

    @_builtins.property
    @pulumi.getter(name="ownershipInfos")
    def ownership_infos(self) -> pulumi.Output[Sequence['outputs.VmCloneV2OwnershipInfo']]:
        return pulumi.get(self, "ownership_infos")

    @_builtins.property
    @pulumi.getter(name="powerState")
    def power_state(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "power_state")

    @_builtins.property
    @pulumi.getter(name="protectionPolicyStates")
    def protection_policy_states(self) -> pulumi.Output[Sequence['outputs.VmCloneV2ProtectionPolicyState']]:
        return pulumi.get(self, "protection_policy_states")

    @_builtins.property
    @pulumi.getter(name="protectionType")
    def protection_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "protection_type")

    @_builtins.property
    @pulumi.getter(name="serialPorts")
    def serial_ports(self) -> pulumi.Output[Sequence['outputs.VmCloneV2SerialPort']]:
        return pulumi.get(self, "serial_ports")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Sequence['outputs.VmCloneV2Source']]:
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter(name="storageConfigs")
    def storage_configs(self) -> pulumi.Output[Sequence['outputs.VmCloneV2StorageConfig']]:
        return pulumi.get(self, "storage_configs")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "update_time")

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vm_ext_id")

    @_builtins.property
    @pulumi.getter(name="vtpmConfigs")
    def vtpm_configs(self) -> pulumi.Output[Sequence['outputs.VmCloneV2VtpmConfig']]:
        return pulumi.get(self, "vtpm_configs")

