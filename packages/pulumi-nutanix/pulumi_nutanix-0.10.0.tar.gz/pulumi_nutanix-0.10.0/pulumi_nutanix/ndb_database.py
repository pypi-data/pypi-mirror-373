# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NdbDatabaseArgs', 'NdbDatabase']

@pulumi.input_type
class NdbDatabaseArgs:
    def __init__(__self__, *,
                 actionarguments: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseActionargumentArgs']]]] = None,
                 autotunestagingdrive: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoArgs']]]] = None,
                 clustered: Optional[pulumi.Input[_builtins.bool]] = None,
                 computeprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 createdbserver: Optional[pulumi.Input[_builtins.bool]] = None,
                 database_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 databasetype: Optional[pulumi.Input[_builtins.str]] = None,
                 dbparameterprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 dbserverid: Optional[pulumi.Input[_builtins.str]] = None,
                 delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_logical_cluster: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 forced: Optional[pulumi.Input[_builtins.bool]] = None,
                 maintenance_tasks: Optional[pulumi.Input['NdbDatabaseMaintenanceTasksArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networkprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 newdbservertimezone: Optional[pulumi.Input[_builtins.str]] = None,
                 nodecount: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeArgs']]]] = None,
                 nxclusterid: Optional[pulumi.Input[_builtins.str]] = None,
                 postgresql_info: Optional[pulumi.Input['NdbDatabasePostgresqlInfoArgs']] = None,
                 remove: Optional[pulumi.Input[_builtins.bool]] = None,
                 soft_remove: Optional[pulumi.Input[_builtins.bool]] = None,
                 softwareprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 softwareprofileversionid: Optional[pulumi.Input[_builtins.str]] = None,
                 sshpublickey: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTagArgs']]]] = None,
                 timemachineinfo: Optional[pulumi.Input['NdbDatabaseTimemachineinfoArgs']] = None,
                 vm_password: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NdbDatabase resource.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseActionargumentArgs']]] actionarguments: - (Optional) action arguments for database. For postgress, you can use postgresql_info
        :param pulumi.Input[_builtins.bool] autotunestagingdrive: - (Optional) Enable auto tuning of staging drive. Default: true
        :param pulumi.Input[_builtins.bool] clustered: - (Optional) If clustered database. Default: false
        :param pulumi.Input[_builtins.str] computeprofileid: - (Optional) ID of compute profile
        :param pulumi.Input[_builtins.bool] createdbserver: - (Optional) Set this to create new DB server VM. Default: true
        :param pulumi.Input[_builtins.str] databasetype: - (Required) Type of database. Valid values: postgres_database
        :param pulumi.Input[_builtins.str] dbparameterprofileid: - (Optional) DB parameters profile ID
        :param pulumi.Input[_builtins.str] dbserverid: - (Optional) DB server VM ID for creating instance on registered DB server VM
        :param pulumi.Input[_builtins.bool] delete: - (Optional) Delete the database from the VM. Default value is true
        :param pulumi.Input[_builtins.bool] delete_logical_cluster: - (Optional) Delete the logical cluster. Default is true
        :param pulumi.Input[_builtins.bool] delete_time_machine: - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        :param pulumi.Input[_builtins.str] description: - (Optional) The description
        :param pulumi.Input[_builtins.bool] forced: - (Optional) Force delete of instance. Default is false
        :param pulumi.Input[_builtins.str] name: - (Required) Name of the instance.
        :param pulumi.Input[_builtins.str] networkprofileid: - (Optional) ID of network profile
        :param pulumi.Input[_builtins.str] newdbservertimezone: - (Optional) Timezone of new DB server VM
        :param pulumi.Input[_builtins.int] nodecount: - (Optional) No. of nodes/db server vms. Default: 1
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeArgs']]] nodes: - (Optional) nodes info
        :param pulumi.Input[_builtins.str] nxclusterid: - (Optional) Cluster ID for DB server VM
        :param pulumi.Input['NdbDatabasePostgresqlInfoArgs'] postgresql_info: - (Optional) action arguments for postgress type database.
        :param pulumi.Input[_builtins.bool] remove: - (Optional) Unregister the database from NDB. Default value is true
        :param pulumi.Input[_builtins.bool] soft_remove: - (Optional) Soft remove. Default will be false
        :param pulumi.Input[_builtins.str] softwareprofileid: - (Optional) ID of software profile
        :param pulumi.Input[_builtins.str] softwareprofileversionid: - (Optional) ID of version in software profile
        :param pulumi.Input[_builtins.str] sshpublickey: - (Optional) public key for ssh access to DB server VM
        :param pulumi.Input['NdbDatabaseTimemachineinfoArgs'] timemachineinfo: - (Optional) time machine config
        :param pulumi.Input[_builtins.str] vm_password: - (Optional) password for DB server VM and era drive user
        """
        if actionarguments is not None:
            pulumi.set(__self__, "actionarguments", actionarguments)
        if autotunestagingdrive is not None:
            pulumi.set(__self__, "autotunestagingdrive", autotunestagingdrive)
        if cluster_infos is not None:
            pulumi.set(__self__, "cluster_infos", cluster_infos)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if computeprofileid is not None:
            pulumi.set(__self__, "computeprofileid", computeprofileid)
        if createdbserver is not None:
            pulumi.set(__self__, "createdbserver", createdbserver)
        if database_instance_id is not None:
            pulumi.set(__self__, "database_instance_id", database_instance_id)
        if databasetype is not None:
            pulumi.set(__self__, "databasetype", databasetype)
        if dbparameterprofileid is not None:
            pulumi.set(__self__, "dbparameterprofileid", dbparameterprofileid)
        if dbserverid is not None:
            pulumi.set(__self__, "dbserverid", dbserverid)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if delete_logical_cluster is not None:
            pulumi.set(__self__, "delete_logical_cluster", delete_logical_cluster)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if forced is not None:
            pulumi.set(__self__, "forced", forced)
        if maintenance_tasks is not None:
            pulumi.set(__self__, "maintenance_tasks", maintenance_tasks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networkprofileid is not None:
            pulumi.set(__self__, "networkprofileid", networkprofileid)
        if newdbservertimezone is not None:
            pulumi.set(__self__, "newdbservertimezone", newdbservertimezone)
        if nodecount is not None:
            pulumi.set(__self__, "nodecount", nodecount)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if nxclusterid is not None:
            pulumi.set(__self__, "nxclusterid", nxclusterid)
        if postgresql_info is not None:
            pulumi.set(__self__, "postgresql_info", postgresql_info)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if soft_remove is not None:
            pulumi.set(__self__, "soft_remove", soft_remove)
        if softwareprofileid is not None:
            pulumi.set(__self__, "softwareprofileid", softwareprofileid)
        if softwareprofileversionid is not None:
            pulumi.set(__self__, "softwareprofileversionid", softwareprofileversionid)
        if sshpublickey is not None:
            pulumi.set(__self__, "sshpublickey", sshpublickey)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timemachineinfo is not None:
            pulumi.set(__self__, "timemachineinfo", timemachineinfo)
        if vm_password is not None:
            pulumi.set(__self__, "vm_password", vm_password)

    @_builtins.property
    @pulumi.getter
    def actionarguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseActionargumentArgs']]]]:
        """
        - (Optional) action arguments for database. For postgress, you can use postgresql_info
        """
        return pulumi.get(self, "actionarguments")

    @actionarguments.setter
    def actionarguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseActionargumentArgs']]]]):
        pulumi.set(self, "actionarguments", value)

    @_builtins.property
    @pulumi.getter
    def autotunestagingdrive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Enable auto tuning of staging drive. Default: true
        """
        return pulumi.get(self, "autotunestagingdrive")

    @autotunestagingdrive.setter
    def autotunestagingdrive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autotunestagingdrive", value)

    @_builtins.property
    @pulumi.getter(name="clusterInfos")
    def cluster_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoArgs']]]]:
        return pulumi.get(self, "cluster_infos")

    @cluster_infos.setter
    def cluster_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoArgs']]]]):
        pulumi.set(self, "cluster_infos", value)

    @_builtins.property
    @pulumi.getter
    def clustered(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) If clustered database. Default: false
        """
        return pulumi.get(self, "clustered")

    @clustered.setter
    def clustered(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "clustered", value)

    @_builtins.property
    @pulumi.getter
    def computeprofileid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) ID of compute profile
        """
        return pulumi.get(self, "computeprofileid")

    @computeprofileid.setter
    def computeprofileid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "computeprofileid", value)

    @_builtins.property
    @pulumi.getter
    def createdbserver(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Set this to create new DB server VM. Default: true
        """
        return pulumi.get(self, "createdbserver")

    @createdbserver.setter
    def createdbserver(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "createdbserver", value)

    @_builtins.property
    @pulumi.getter(name="databaseInstanceId")
    def database_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "database_instance_id")

    @database_instance_id.setter
    def database_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def databasetype(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Required) Type of database. Valid values: postgres_database
        """
        return pulumi.get(self, "databasetype")

    @databasetype.setter
    def databasetype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "databasetype", value)

    @_builtins.property
    @pulumi.getter
    def dbparameterprofileid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) DB parameters profile ID
        """
        return pulumi.get(self, "dbparameterprofileid")

    @dbparameterprofileid.setter
    def dbparameterprofileid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dbparameterprofileid", value)

    @_builtins.property
    @pulumi.getter
    def dbserverid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) DB server VM ID for creating instance on registered DB server VM
        """
        return pulumi.get(self, "dbserverid")

    @dbserverid.setter
    def dbserverid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dbserverid", value)

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Delete the database from the VM. Default value is true
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete", value)

    @_builtins.property
    @pulumi.getter(name="deleteLogicalCluster")
    def delete_logical_cluster(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Delete the logical cluster. Default is true
        """
        return pulumi.get(self, "delete_logical_cluster")

    @delete_logical_cluster.setter
    def delete_logical_cluster(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_logical_cluster", value)

    @_builtins.property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        return pulumi.get(self, "delete_time_machine")

    @delete_time_machine.setter
    def delete_time_machine(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_time_machine", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def forced(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Force delete of instance. Default is false
        """
        return pulumi.get(self, "forced")

    @forced.setter
    def forced(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "forced", value)

    @_builtins.property
    @pulumi.getter(name="maintenanceTasks")
    def maintenance_tasks(self) -> Optional[pulumi.Input['NdbDatabaseMaintenanceTasksArgs']]:
        return pulumi.get(self, "maintenance_tasks")

    @maintenance_tasks.setter
    def maintenance_tasks(self, value: Optional[pulumi.Input['NdbDatabaseMaintenanceTasksArgs']]):
        pulumi.set(self, "maintenance_tasks", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def networkprofileid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) ID of network profile
        """
        return pulumi.get(self, "networkprofileid")

    @networkprofileid.setter
    def networkprofileid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "networkprofileid", value)

    @_builtins.property
    @pulumi.getter
    def newdbservertimezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) Timezone of new DB server VM
        """
        return pulumi.get(self, "newdbservertimezone")

    @newdbservertimezone.setter
    def newdbservertimezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "newdbservertimezone", value)

    @_builtins.property
    @pulumi.getter
    def nodecount(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - (Optional) No. of nodes/db server vms. Default: 1
        """
        return pulumi.get(self, "nodecount")

    @nodecount.setter
    def nodecount(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nodecount", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeArgs']]]]:
        """
        - (Optional) nodes info
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def nxclusterid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) Cluster ID for DB server VM
        """
        return pulumi.get(self, "nxclusterid")

    @nxclusterid.setter
    def nxclusterid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nxclusterid", value)

    @_builtins.property
    @pulumi.getter(name="postgresqlInfo")
    def postgresql_info(self) -> Optional[pulumi.Input['NdbDatabasePostgresqlInfoArgs']]:
        """
        - (Optional) action arguments for postgress type database.
        """
        return pulumi.get(self, "postgresql_info")

    @postgresql_info.setter
    def postgresql_info(self, value: Optional[pulumi.Input['NdbDatabasePostgresqlInfoArgs']]):
        pulumi.set(self, "postgresql_info", value)

    @_builtins.property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Unregister the database from NDB. Default value is true
        """
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "remove", value)

    @_builtins.property
    @pulumi.getter(name="softRemove")
    def soft_remove(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Soft remove. Default will be false
        """
        return pulumi.get(self, "soft_remove")

    @soft_remove.setter
    def soft_remove(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "soft_remove", value)

    @_builtins.property
    @pulumi.getter
    def softwareprofileid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) ID of software profile
        """
        return pulumi.get(self, "softwareprofileid")

    @softwareprofileid.setter
    def softwareprofileid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "softwareprofileid", value)

    @_builtins.property
    @pulumi.getter
    def softwareprofileversionid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) ID of version in software profile
        """
        return pulumi.get(self, "softwareprofileversionid")

    @softwareprofileversionid.setter
    def softwareprofileversionid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "softwareprofileversionid", value)

    @_builtins.property
    @pulumi.getter
    def sshpublickey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) public key for ssh access to DB server VM
        """
        return pulumi.get(self, "sshpublickey")

    @sshpublickey.setter
    def sshpublickey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sshpublickey", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timemachineinfo(self) -> Optional[pulumi.Input['NdbDatabaseTimemachineinfoArgs']]:
        """
        - (Optional) time machine config
        """
        return pulumi.get(self, "timemachineinfo")

    @timemachineinfo.setter
    def timemachineinfo(self, value: Optional[pulumi.Input['NdbDatabaseTimemachineinfoArgs']]):
        pulumi.set(self, "timemachineinfo", value)

    @_builtins.property
    @pulumi.getter(name="vmPassword")
    def vm_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) password for DB server VM and era drive user
        """
        return pulumi.get(self, "vm_password")

    @vm_password.setter
    def vm_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_password", value)


@pulumi.input_type
class _NdbDatabaseState:
    def __init__(__self__, *,
                 actionarguments: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseActionargumentArgs']]]] = None,
                 autotunestagingdrive: Optional[pulumi.Input[_builtins.bool]] = None,
                 clone: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoArgs']]]] = None,
                 clustered: Optional[pulumi.Input[_builtins.bool]] = None,
                 computeprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 createdbserver: Optional[pulumi.Input[_builtins.bool]] = None,
                 database_cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 database_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_nodes: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeArgs']]]] = None,
                 databasetype: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 date_modified: Optional[pulumi.Input[_builtins.str]] = None,
                 dbparameterprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 dbserver_logical_cluster: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 dbserver_logical_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dbserverid: Optional[pulumi.Input[_builtins.str]] = None,
                 delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_logical_cluster: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 forced: Optional[pulumi.Input[_builtins.bool]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoArgs']]]] = None,
                 lcm_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigArgs']]]] = None,
                 linked_databases: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLinkedDatabaseArgs']]]] = None,
                 maintenance_tasks: Optional[pulumi.Input['NdbDatabaseMaintenanceTasksArgs']] = None,
                 metric: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networkprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 newdbservertimezone: Optional[pulumi.Input[_builtins.str]] = None,
                 nodecount: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeArgs']]]] = None,
                 nxclusterid: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 postgresql_info: Optional[pulumi.Input['NdbDatabasePostgresqlInfoArgs']] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabasePropertyArgs']]]] = None,
                 remove: Optional[pulumi.Input[_builtins.bool]] = None,
                 soft_remove: Optional[pulumi.Input[_builtins.bool]] = None,
                 softwareprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 softwareprofileversionid: Optional[pulumi.Input[_builtins.str]] = None,
                 sshpublickey: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTagArgs']]]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 time_machines: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineArgs']]]] = None,
                 time_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 timemachineinfo: Optional[pulumi.Input['NdbDatabaseTimemachineinfoArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_password: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering NdbDatabase resources.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseActionargumentArgs']]] actionarguments: - (Optional) action arguments for database. For postgress, you can use postgresql_info
        :param pulumi.Input[_builtins.bool] autotunestagingdrive: - (Optional) Enable auto tuning of staging drive. Default: true
        :param pulumi.Input[_builtins.bool] clustered: - (Optional) If clustered database. Default: false
        :param pulumi.Input[_builtins.str] computeprofileid: - (Optional) ID of compute profile
        :param pulumi.Input[_builtins.bool] createdbserver: - (Optional) Set this to create new DB server VM. Default: true
        :param pulumi.Input[_builtins.str] databasetype: - (Required) Type of database. Valid values: postgres_database
        :param pulumi.Input[_builtins.str] dbparameterprofileid: - (Optional) DB parameters profile ID
        :param pulumi.Input[_builtins.str] dbserverid: - (Optional) DB server VM ID for creating instance on registered DB server VM
        :param pulumi.Input[_builtins.bool] delete: - (Optional) Delete the database from the VM. Default value is true
        :param pulumi.Input[_builtins.bool] delete_logical_cluster: - (Optional) Delete the logical cluster. Default is true
        :param pulumi.Input[_builtins.bool] delete_time_machine: - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        :param pulumi.Input[_builtins.str] description: - (Optional) The description
        :param pulumi.Input[_builtins.bool] forced: - (Optional) Force delete of instance. Default is false
        :param pulumi.Input[_builtins.str] name: - (Required) Name of the instance.
        :param pulumi.Input[_builtins.str] networkprofileid: - (Optional) ID of network profile
        :param pulumi.Input[_builtins.str] newdbservertimezone: - (Optional) Timezone of new DB server VM
        :param pulumi.Input[_builtins.int] nodecount: - (Optional) No. of nodes/db server vms. Default: 1
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeArgs']]] nodes: - (Optional) nodes info
        :param pulumi.Input[_builtins.str] nxclusterid: - (Optional) Cluster ID for DB server VM
        :param pulumi.Input['NdbDatabasePostgresqlInfoArgs'] postgresql_info: - (Optional) action arguments for postgress type database.
        :param pulumi.Input[Sequence[pulumi.Input['NdbDatabasePropertyArgs']]] properties: List of all the properties
        :param pulumi.Input[_builtins.bool] remove: - (Optional) Unregister the database from NDB. Default value is true
        :param pulumi.Input[_builtins.bool] soft_remove: - (Optional) Soft remove. Default will be false
        :param pulumi.Input[_builtins.str] softwareprofileid: - (Optional) ID of software profile
        :param pulumi.Input[_builtins.str] softwareprofileversionid: - (Optional) ID of version in software profile
        :param pulumi.Input[_builtins.str] sshpublickey: - (Optional) public key for ssh access to DB server VM
        :param pulumi.Input['NdbDatabaseTimemachineinfoArgs'] timemachineinfo: - (Optional) time machine config
        :param pulumi.Input[_builtins.str] vm_password: - (Optional) password for DB server VM and era drive user
        """
        if actionarguments is not None:
            pulumi.set(__self__, "actionarguments", actionarguments)
        if autotunestagingdrive is not None:
            pulumi.set(__self__, "autotunestagingdrive", autotunestagingdrive)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if cluster_infos is not None:
            pulumi.set(__self__, "cluster_infos", cluster_infos)
        if clustered is not None:
            pulumi.set(__self__, "clustered", clustered)
        if computeprofileid is not None:
            pulumi.set(__self__, "computeprofileid", computeprofileid)
        if createdbserver is not None:
            pulumi.set(__self__, "createdbserver", createdbserver)
        if database_cluster_type is not None:
            pulumi.set(__self__, "database_cluster_type", database_cluster_type)
        if database_instance_id is not None:
            pulumi.set(__self__, "database_instance_id", database_instance_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_nodes is not None:
            pulumi.set(__self__, "database_nodes", database_nodes)
        if databasetype is not None:
            pulumi.set(__self__, "databasetype", databasetype)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if date_modified is not None:
            pulumi.set(__self__, "date_modified", date_modified)
        if dbparameterprofileid is not None:
            pulumi.set(__self__, "dbparameterprofileid", dbparameterprofileid)
        if dbserver_logical_cluster is not None:
            pulumi.set(__self__, "dbserver_logical_cluster", dbserver_logical_cluster)
        if dbserver_logical_cluster_id is not None:
            pulumi.set(__self__, "dbserver_logical_cluster_id", dbserver_logical_cluster_id)
        if dbserverid is not None:
            pulumi.set(__self__, "dbserverid", dbserverid)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if delete_logical_cluster is not None:
            pulumi.set(__self__, "delete_logical_cluster", delete_logical_cluster)
        if delete_time_machine is not None:
            pulumi.set(__self__, "delete_time_machine", delete_time_machine)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if forced is not None:
            pulumi.set(__self__, "forced", forced)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if lcm_configs is not None:
            pulumi.set(__self__, "lcm_configs", lcm_configs)
        if linked_databases is not None:
            pulumi.set(__self__, "linked_databases", linked_databases)
        if maintenance_tasks is not None:
            pulumi.set(__self__, "maintenance_tasks", maintenance_tasks)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networkprofileid is not None:
            pulumi.set(__self__, "networkprofileid", networkprofileid)
        if newdbservertimezone is not None:
            pulumi.set(__self__, "newdbservertimezone", newdbservertimezone)
        if nodecount is not None:
            pulumi.set(__self__, "nodecount", nodecount)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if nxclusterid is not None:
            pulumi.set(__self__, "nxclusterid", nxclusterid)
        if parent_database_id is not None:
            pulumi.set(__self__, "parent_database_id", parent_database_id)
        if postgresql_info is not None:
            pulumi.set(__self__, "postgresql_info", postgresql_info)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if soft_remove is not None:
            pulumi.set(__self__, "soft_remove", soft_remove)
        if softwareprofileid is not None:
            pulumi.set(__self__, "softwareprofileid", softwareprofileid)
        if softwareprofileversionid is not None:
            pulumi.set(__self__, "softwareprofileversionid", softwareprofileversionid)
        if sshpublickey is not None:
            pulumi.set(__self__, "sshpublickey", sshpublickey)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_machine_id is not None:
            pulumi.set(__self__, "time_machine_id", time_machine_id)
        if time_machines is not None:
            pulumi.set(__self__, "time_machines", time_machines)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if timemachineinfo is not None:
            pulumi.set(__self__, "timemachineinfo", timemachineinfo)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vm_password is not None:
            pulumi.set(__self__, "vm_password", vm_password)

    @_builtins.property
    @pulumi.getter
    def actionarguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseActionargumentArgs']]]]:
        """
        - (Optional) action arguments for database. For postgress, you can use postgresql_info
        """
        return pulumi.get(self, "actionarguments")

    @actionarguments.setter
    def actionarguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseActionargumentArgs']]]]):
        pulumi.set(self, "actionarguments", value)

    @_builtins.property
    @pulumi.getter
    def autotunestagingdrive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Enable auto tuning of staging drive. Default: true
        """
        return pulumi.get(self, "autotunestagingdrive")

    @autotunestagingdrive.setter
    def autotunestagingdrive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autotunestagingdrive", value)

    @_builtins.property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "clone", value)

    @_builtins.property
    @pulumi.getter(name="clusterInfos")
    def cluster_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoArgs']]]]:
        return pulumi.get(self, "cluster_infos")

    @cluster_infos.setter
    def cluster_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseClusterInfoArgs']]]]):
        pulumi.set(self, "cluster_infos", value)

    @_builtins.property
    @pulumi.getter
    def clustered(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) If clustered database. Default: false
        """
        return pulumi.get(self, "clustered")

    @clustered.setter
    def clustered(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "clustered", value)

    @_builtins.property
    @pulumi.getter
    def computeprofileid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) ID of compute profile
        """
        return pulumi.get(self, "computeprofileid")

    @computeprofileid.setter
    def computeprofileid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "computeprofileid", value)

    @_builtins.property
    @pulumi.getter
    def createdbserver(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Set this to create new DB server VM. Default: true
        """
        return pulumi.get(self, "createdbserver")

    @createdbserver.setter
    def createdbserver(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "createdbserver", value)

    @_builtins.property
    @pulumi.getter(name="databaseClusterType")
    def database_cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "database_cluster_type")

    @database_cluster_type.setter
    def database_cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="databaseInstanceId")
    def database_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "database_instance_id")

    @database_instance_id.setter
    def database_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_name", value)

    @_builtins.property
    @pulumi.getter(name="databaseNodes")
    def database_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeArgs']]]]:
        return pulumi.get(self, "database_nodes")

    @database_nodes.setter
    def database_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseDatabaseNodeArgs']]]]):
        pulumi.set(self, "database_nodes", value)

    @_builtins.property
    @pulumi.getter
    def databasetype(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Required) Type of database. Valid values: postgres_database
        """
        return pulumi.get(self, "databasetype")

    @databasetype.setter
    def databasetype(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "databasetype", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "date_modified")

    @date_modified.setter
    def date_modified(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_modified", value)

    @_builtins.property
    @pulumi.getter
    def dbparameterprofileid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) DB parameters profile ID
        """
        return pulumi.get(self, "dbparameterprofileid")

    @dbparameterprofileid.setter
    def dbparameterprofileid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dbparameterprofileid", value)

    @_builtins.property
    @pulumi.getter(name="dbserverLogicalCluster")
    def dbserver_logical_cluster(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "dbserver_logical_cluster")

    @dbserver_logical_cluster.setter
    def dbserver_logical_cluster(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dbserver_logical_cluster", value)

    @_builtins.property
    @pulumi.getter(name="dbserverLogicalClusterId")
    def dbserver_logical_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dbserver_logical_cluster_id")

    @dbserver_logical_cluster_id.setter
    def dbserver_logical_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dbserver_logical_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def dbserverid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) DB server VM ID for creating instance on registered DB server VM
        """
        return pulumi.get(self, "dbserverid")

    @dbserverid.setter
    def dbserverid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dbserverid", value)

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Delete the database from the VM. Default value is true
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete", value)

    @_builtins.property
    @pulumi.getter(name="deleteLogicalCluster")
    def delete_logical_cluster(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Delete the logical cluster. Default is true
        """
        return pulumi.get(self, "delete_logical_cluster")

    @delete_logical_cluster.setter
    def delete_logical_cluster(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_logical_cluster", value)

    @_builtins.property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        return pulumi.get(self, "delete_time_machine")

    @delete_time_machine.setter
    def delete_time_machine(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_time_machine", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def forced(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Force delete of instance. Default is false
        """
        return pulumi.get(self, "forced")

    @forced.setter
    def forced(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "forced", value)

    @_builtins.property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoArgs']]]]:
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @_builtins.property
    @pulumi.getter(name="lcmConfigs")
    def lcm_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigArgs']]]]:
        return pulumi.get(self, "lcm_configs")

    @lcm_configs.setter
    def lcm_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLcmConfigArgs']]]]):
        pulumi.set(self, "lcm_configs", value)

    @_builtins.property
    @pulumi.getter(name="linkedDatabases")
    def linked_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLinkedDatabaseArgs']]]]:
        return pulumi.get(self, "linked_databases")

    @linked_databases.setter
    def linked_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseLinkedDatabaseArgs']]]]):
        pulumi.set(self, "linked_databases", value)

    @_builtins.property
    @pulumi.getter(name="maintenanceTasks")
    def maintenance_tasks(self) -> Optional[pulumi.Input['NdbDatabaseMaintenanceTasksArgs']]:
        return pulumi.get(self, "maintenance_tasks")

    @maintenance_tasks.setter
    def maintenance_tasks(self, value: Optional[pulumi.Input['NdbDatabaseMaintenanceTasksArgs']]):
        pulumi.set(self, "maintenance_tasks", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def networkprofileid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) ID of network profile
        """
        return pulumi.get(self, "networkprofileid")

    @networkprofileid.setter
    def networkprofileid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "networkprofileid", value)

    @_builtins.property
    @pulumi.getter
    def newdbservertimezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) Timezone of new DB server VM
        """
        return pulumi.get(self, "newdbservertimezone")

    @newdbservertimezone.setter
    def newdbservertimezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "newdbservertimezone", value)

    @_builtins.property
    @pulumi.getter
    def nodecount(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - (Optional) No. of nodes/db server vms. Default: 1
        """
        return pulumi.get(self, "nodecount")

    @nodecount.setter
    def nodecount(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nodecount", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeArgs']]]]:
        """
        - (Optional) nodes info
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def nxclusterid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) Cluster ID for DB server VM
        """
        return pulumi.get(self, "nxclusterid")

    @nxclusterid.setter
    def nxclusterid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nxclusterid", value)

    @_builtins.property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "parent_database_id")

    @parent_database_id.setter
    def parent_database_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_database_id", value)

    @_builtins.property
    @pulumi.getter(name="postgresqlInfo")
    def postgresql_info(self) -> Optional[pulumi.Input['NdbDatabasePostgresqlInfoArgs']]:
        """
        - (Optional) action arguments for postgress type database.
        """
        return pulumi.get(self, "postgresql_info")

    @postgresql_info.setter
    def postgresql_info(self, value: Optional[pulumi.Input['NdbDatabasePostgresqlInfoArgs']]):
        pulumi.set(self, "postgresql_info", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabasePropertyArgs']]]]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabasePropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Unregister the database from NDB. Default value is true
        """
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "remove", value)

    @_builtins.property
    @pulumi.getter(name="softRemove")
    def soft_remove(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - (Optional) Soft remove. Default will be false
        """
        return pulumi.get(self, "soft_remove")

    @soft_remove.setter
    def soft_remove(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "soft_remove", value)

    @_builtins.property
    @pulumi.getter
    def softwareprofileid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) ID of software profile
        """
        return pulumi.get(self, "softwareprofileid")

    @softwareprofileid.setter
    def softwareprofileid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "softwareprofileid", value)

    @_builtins.property
    @pulumi.getter
    def softwareprofileversionid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) ID of version in software profile
        """
        return pulumi.get(self, "softwareprofileversionid")

    @softwareprofileversionid.setter
    def softwareprofileversionid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "softwareprofileversionid", value)

    @_builtins.property
    @pulumi.getter
    def sshpublickey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) public key for ssh access to DB server VM
        """
        return pulumi.get(self, "sshpublickey")

    @sshpublickey.setter
    def sshpublickey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sshpublickey", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "time_machine_id")

    @time_machine_id.setter
    def time_machine_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_machine_id", value)

    @_builtins.property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineArgs']]]]:
        return pulumi.get(self, "time_machines")

    @time_machines.setter
    def time_machines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NdbDatabaseTimeMachineArgs']]]]):
        pulumi.set(self, "time_machines", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_zone", value)

    @_builtins.property
    @pulumi.getter
    def timemachineinfo(self) -> Optional[pulumi.Input['NdbDatabaseTimemachineinfoArgs']]:
        """
        - (Optional) time machine config
        """
        return pulumi.get(self, "timemachineinfo")

    @timemachineinfo.setter
    def timemachineinfo(self, value: Optional[pulumi.Input['NdbDatabaseTimemachineinfoArgs']]):
        pulumi.set(self, "timemachineinfo", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vmPassword")
    def vm_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - (Optional) password for DB server VM and era drive user
        """
        return pulumi.get(self, "vm_password")

    @vm_password.setter
    def vm_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_password", value)


@pulumi.type_token("nutanix:index/ndbDatabase:NdbDatabase")
class NdbDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actionarguments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseActionargumentArgs', 'NdbDatabaseActionargumentArgsDict']]]]] = None,
                 autotunestagingdrive: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseClusterInfoArgs', 'NdbDatabaseClusterInfoArgsDict']]]]] = None,
                 clustered: Optional[pulumi.Input[_builtins.bool]] = None,
                 computeprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 createdbserver: Optional[pulumi.Input[_builtins.bool]] = None,
                 database_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 databasetype: Optional[pulumi.Input[_builtins.str]] = None,
                 dbparameterprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 dbserverid: Optional[pulumi.Input[_builtins.str]] = None,
                 delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_logical_cluster: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 forced: Optional[pulumi.Input[_builtins.bool]] = None,
                 maintenance_tasks: Optional[pulumi.Input[Union['NdbDatabaseMaintenanceTasksArgs', 'NdbDatabaseMaintenanceTasksArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networkprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 newdbservertimezone: Optional[pulumi.Input[_builtins.str]] = None,
                 nodecount: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseNodeArgs', 'NdbDatabaseNodeArgsDict']]]]] = None,
                 nxclusterid: Optional[pulumi.Input[_builtins.str]] = None,
                 postgresql_info: Optional[pulumi.Input[Union['NdbDatabasePostgresqlInfoArgs', 'NdbDatabasePostgresqlInfoArgsDict']]] = None,
                 remove: Optional[pulumi.Input[_builtins.bool]] = None,
                 soft_remove: Optional[pulumi.Input[_builtins.bool]] = None,
                 softwareprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 softwareprofileversionid: Optional[pulumi.Input[_builtins.str]] = None,
                 sshpublickey: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseTagArgs', 'NdbDatabaseTagArgsDict']]]]] = None,
                 timemachineinfo: Optional[pulumi.Input[Union['NdbDatabaseTimemachineinfoArgs', 'NdbDatabaseTimemachineinfoArgsDict']]] = None,
                 vm_password: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Provides a resource to create database instance based on the input parameters. For 1.8.0 release, only postgress database type is qualified and officially supported.

        ## Example Usage

        ### NDB database resource with new database server VM

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        dbp = nutanix.NdbDatabase("dbp",
            databasetype="postgres_database",
            description="add description",
            softwareprofileid="{{ software_profile_id }}",
            softwareprofileversionid="{{ software_profile_version_id }}",
            computeprofileid="{{ compute_profile_id }}",
            networkprofileid="{{ network_profile_id }}",
            dbparameterprofileid="{{ db_parameter_profile_id }}",
            postgresql_info={
                "listener_port": "{{ listner_port }}",
                "database_size": "{{ 200 }}",
                "db_password": "password",
                "database_names": "testdb1",
            },
            nxclusterid=local["clusters"]["EraCluster"]["id"],
            sshpublickey="{{ ssh-public-key }}",
            nodes=[{
                "vmname": "test-era-vm1",
                "networkprofileid": "<network-profile-uuid>",
            }],
            timemachineinfo={
                "name": "test-pg-inst",
                "description": "description of time machine",
                "slaid": "{{ sla_id }}",
                "schedule": {
                    "snapshottimeofday": {
                        "hours": 16,
                        "minutes": 0,
                        "seconds": 0,
                    },
                    "continuousschedule": {
                        "enabled": True,
                        "logbackupinterval": 30,
                        "snapshotsperday": 1,
                    },
                    "weeklyschedule": {
                        "enabled": True,
                        "dayofweek": "WEDNESDAY",
                    },
                    "monthlyschedule": {
                        "enabled": True,
                        "dayofmonth": 27,
                    },
                    "quartelyschedule": {
                        "enabled": True,
                        "startmonth": "JANUARY",
                        "dayofmonth": 27,
                    },
                    "yearlyschedule": {
                        "enabled": False,
                        "dayofmonth": 31,
                        "month": "DECEMBER",
                    },
                },
            })
        ```

        ### NDB database resource with registered database server VM

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        dbp = nutanix.NdbDatabase("dbp",
            actionarguments=[{
                "name": "host_ip",
                "value": "{{ hostIP }}",
            }],
            createdbserver=False,
            databasetype="postgres_database",
            dbparameterprofileid="{{ db_parameter_profile_id }}",
            dbserver_id="{{ dbserver_id }}",
            description="add description",
            nodes=[{
                "dbserverid": "{{ dbserver_id }}",
            }],
            postgresql_info={
                "database_names": "testdb1",
                "database_size": "{{ 200 }}",
                "db_password": "password",
                "listener_port": "{{ listner_port }}",
            },
            timemachineinfo={
                "description": "description of time machine",
                "name": "test-pg-inst",
                "schedule": {
                    "continuousschedule": {
                        "enabled": True,
                        "logbackupinterval": 30,
                        "snapshotsperday": 1,
                    },
                    "monthlyschedule": {
                        "dayofmonth": 27,
                        "enabled": True,
                    },
                    "quartelyschedule": {
                        "dayofmonth": 27,
                        "enabled": True,
                        "startmonth": "JANUARY",
                    },
                    "snapshottimeofday": {
                        "hours": 16,
                        "minutes": 0,
                        "seconds": 0,
                    },
                    "weeklyschedule": {
                        "dayofweek": "WEDNESDAY",
                        "enabled": True,
                    },
                    "yearlyschedule": {
                        "dayofmonth": 31,
                        "enabled": False,
                        "month": "DECEMBER",
                    },
                },
                "slaid": "{{ sla_id }}",
            })
        ```

        ## lifecycle

        * `Update` : - Currently only update of instance's name and description is supported using this resource

        See detailed information in [NDB Database Instance](https://www.nutanix.dev/api_references/ndb/#/9d9eee4304496-provision-a-database).

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseActionargumentArgs', 'NdbDatabaseActionargumentArgsDict']]]] actionarguments: - (Optional) action arguments for database. For postgress, you can use postgresql_info
        :param pulumi.Input[_builtins.bool] autotunestagingdrive: - (Optional) Enable auto tuning of staging drive. Default: true
        :param pulumi.Input[_builtins.bool] clustered: - (Optional) If clustered database. Default: false
        :param pulumi.Input[_builtins.str] computeprofileid: - (Optional) ID of compute profile
        :param pulumi.Input[_builtins.bool] createdbserver: - (Optional) Set this to create new DB server VM. Default: true
        :param pulumi.Input[_builtins.str] databasetype: - (Required) Type of database. Valid values: postgres_database
        :param pulumi.Input[_builtins.str] dbparameterprofileid: - (Optional) DB parameters profile ID
        :param pulumi.Input[_builtins.str] dbserverid: - (Optional) DB server VM ID for creating instance on registered DB server VM
        :param pulumi.Input[_builtins.bool] delete: - (Optional) Delete the database from the VM. Default value is true
        :param pulumi.Input[_builtins.bool] delete_logical_cluster: - (Optional) Delete the logical cluster. Default is true
        :param pulumi.Input[_builtins.bool] delete_time_machine: - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        :param pulumi.Input[_builtins.str] description: - (Optional) The description
        :param pulumi.Input[_builtins.bool] forced: - (Optional) Force delete of instance. Default is false
        :param pulumi.Input[_builtins.str] name: - (Required) Name of the instance.
        :param pulumi.Input[_builtins.str] networkprofileid: - (Optional) ID of network profile
        :param pulumi.Input[_builtins.str] newdbservertimezone: - (Optional) Timezone of new DB server VM
        :param pulumi.Input[_builtins.int] nodecount: - (Optional) No. of nodes/db server vms. Default: 1
        :param pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseNodeArgs', 'NdbDatabaseNodeArgsDict']]]] nodes: - (Optional) nodes info
        :param pulumi.Input[_builtins.str] nxclusterid: - (Optional) Cluster ID for DB server VM
        :param pulumi.Input[Union['NdbDatabasePostgresqlInfoArgs', 'NdbDatabasePostgresqlInfoArgsDict']] postgresql_info: - (Optional) action arguments for postgress type database.
        :param pulumi.Input[_builtins.bool] remove: - (Optional) Unregister the database from NDB. Default value is true
        :param pulumi.Input[_builtins.bool] soft_remove: - (Optional) Soft remove. Default will be false
        :param pulumi.Input[_builtins.str] softwareprofileid: - (Optional) ID of software profile
        :param pulumi.Input[_builtins.str] softwareprofileversionid: - (Optional) ID of version in software profile
        :param pulumi.Input[_builtins.str] sshpublickey: - (Optional) public key for ssh access to DB server VM
        :param pulumi.Input[Union['NdbDatabaseTimemachineinfoArgs', 'NdbDatabaseTimemachineinfoArgsDict']] timemachineinfo: - (Optional) time machine config
        :param pulumi.Input[_builtins.str] vm_password: - (Optional) password for DB server VM and era drive user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NdbDatabaseArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create database instance based on the input parameters. For 1.8.0 release, only postgress database type is qualified and officially supported.

        ## Example Usage

        ### NDB database resource with new database server VM

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        dbp = nutanix.NdbDatabase("dbp",
            databasetype="postgres_database",
            description="add description",
            softwareprofileid="{{ software_profile_id }}",
            softwareprofileversionid="{{ software_profile_version_id }}",
            computeprofileid="{{ compute_profile_id }}",
            networkprofileid="{{ network_profile_id }}",
            dbparameterprofileid="{{ db_parameter_profile_id }}",
            postgresql_info={
                "listener_port": "{{ listner_port }}",
                "database_size": "{{ 200 }}",
                "db_password": "password",
                "database_names": "testdb1",
            },
            nxclusterid=local["clusters"]["EraCluster"]["id"],
            sshpublickey="{{ ssh-public-key }}",
            nodes=[{
                "vmname": "test-era-vm1",
                "networkprofileid": "<network-profile-uuid>",
            }],
            timemachineinfo={
                "name": "test-pg-inst",
                "description": "description of time machine",
                "slaid": "{{ sla_id }}",
                "schedule": {
                    "snapshottimeofday": {
                        "hours": 16,
                        "minutes": 0,
                        "seconds": 0,
                    },
                    "continuousschedule": {
                        "enabled": True,
                        "logbackupinterval": 30,
                        "snapshotsperday": 1,
                    },
                    "weeklyschedule": {
                        "enabled": True,
                        "dayofweek": "WEDNESDAY",
                    },
                    "monthlyschedule": {
                        "enabled": True,
                        "dayofmonth": 27,
                    },
                    "quartelyschedule": {
                        "enabled": True,
                        "startmonth": "JANUARY",
                        "dayofmonth": 27,
                    },
                    "yearlyschedule": {
                        "enabled": False,
                        "dayofmonth": 31,
                        "month": "DECEMBER",
                    },
                },
            })
        ```

        ### NDB database resource with registered database server VM

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        dbp = nutanix.NdbDatabase("dbp",
            actionarguments=[{
                "name": "host_ip",
                "value": "{{ hostIP }}",
            }],
            createdbserver=False,
            databasetype="postgres_database",
            dbparameterprofileid="{{ db_parameter_profile_id }}",
            dbserver_id="{{ dbserver_id }}",
            description="add description",
            nodes=[{
                "dbserverid": "{{ dbserver_id }}",
            }],
            postgresql_info={
                "database_names": "testdb1",
                "database_size": "{{ 200 }}",
                "db_password": "password",
                "listener_port": "{{ listner_port }}",
            },
            timemachineinfo={
                "description": "description of time machine",
                "name": "test-pg-inst",
                "schedule": {
                    "continuousschedule": {
                        "enabled": True,
                        "logbackupinterval": 30,
                        "snapshotsperday": 1,
                    },
                    "monthlyschedule": {
                        "dayofmonth": 27,
                        "enabled": True,
                    },
                    "quartelyschedule": {
                        "dayofmonth": 27,
                        "enabled": True,
                        "startmonth": "JANUARY",
                    },
                    "snapshottimeofday": {
                        "hours": 16,
                        "minutes": 0,
                        "seconds": 0,
                    },
                    "weeklyschedule": {
                        "dayofweek": "WEDNESDAY",
                        "enabled": True,
                    },
                    "yearlyschedule": {
                        "dayofmonth": 31,
                        "enabled": False,
                        "month": "DECEMBER",
                    },
                },
                "slaid": "{{ sla_id }}",
            })
        ```

        ## lifecycle

        * `Update` : - Currently only update of instance's name and description is supported using this resource

        See detailed information in [NDB Database Instance](https://www.nutanix.dev/api_references/ndb/#/9d9eee4304496-provision-a-database).

        :param str resource_name: The name of the resource.
        :param NdbDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NdbDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actionarguments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseActionargumentArgs', 'NdbDatabaseActionargumentArgsDict']]]]] = None,
                 autotunestagingdrive: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseClusterInfoArgs', 'NdbDatabaseClusterInfoArgsDict']]]]] = None,
                 clustered: Optional[pulumi.Input[_builtins.bool]] = None,
                 computeprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 createdbserver: Optional[pulumi.Input[_builtins.bool]] = None,
                 database_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 databasetype: Optional[pulumi.Input[_builtins.str]] = None,
                 dbparameterprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 dbserverid: Optional[pulumi.Input[_builtins.str]] = None,
                 delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_logical_cluster: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_time_machine: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 forced: Optional[pulumi.Input[_builtins.bool]] = None,
                 maintenance_tasks: Optional[pulumi.Input[Union['NdbDatabaseMaintenanceTasksArgs', 'NdbDatabaseMaintenanceTasksArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networkprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 newdbservertimezone: Optional[pulumi.Input[_builtins.str]] = None,
                 nodecount: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseNodeArgs', 'NdbDatabaseNodeArgsDict']]]]] = None,
                 nxclusterid: Optional[pulumi.Input[_builtins.str]] = None,
                 postgresql_info: Optional[pulumi.Input[Union['NdbDatabasePostgresqlInfoArgs', 'NdbDatabasePostgresqlInfoArgsDict']]] = None,
                 remove: Optional[pulumi.Input[_builtins.bool]] = None,
                 soft_remove: Optional[pulumi.Input[_builtins.bool]] = None,
                 softwareprofileid: Optional[pulumi.Input[_builtins.str]] = None,
                 softwareprofileversionid: Optional[pulumi.Input[_builtins.str]] = None,
                 sshpublickey: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseTagArgs', 'NdbDatabaseTagArgsDict']]]]] = None,
                 timemachineinfo: Optional[pulumi.Input[Union['NdbDatabaseTimemachineinfoArgs', 'NdbDatabaseTimemachineinfoArgsDict']]] = None,
                 vm_password: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NdbDatabaseArgs.__new__(NdbDatabaseArgs)

            __props__.__dict__["actionarguments"] = actionarguments
            __props__.__dict__["autotunestagingdrive"] = autotunestagingdrive
            __props__.__dict__["cluster_infos"] = cluster_infos
            __props__.__dict__["clustered"] = clustered
            __props__.__dict__["computeprofileid"] = computeprofileid
            __props__.__dict__["createdbserver"] = createdbserver
            __props__.__dict__["database_instance_id"] = database_instance_id
            __props__.__dict__["databasetype"] = databasetype
            __props__.__dict__["dbparameterprofileid"] = dbparameterprofileid
            __props__.__dict__["dbserverid"] = dbserverid
            __props__.__dict__["delete"] = delete
            __props__.__dict__["delete_logical_cluster"] = delete_logical_cluster
            __props__.__dict__["delete_time_machine"] = delete_time_machine
            __props__.__dict__["description"] = description
            __props__.__dict__["forced"] = forced
            __props__.__dict__["maintenance_tasks"] = maintenance_tasks
            __props__.__dict__["name"] = name
            __props__.__dict__["networkprofileid"] = networkprofileid
            __props__.__dict__["newdbservertimezone"] = newdbservertimezone
            __props__.__dict__["nodecount"] = nodecount
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["nxclusterid"] = nxclusterid
            __props__.__dict__["postgresql_info"] = postgresql_info
            __props__.__dict__["remove"] = remove
            __props__.__dict__["soft_remove"] = soft_remove
            __props__.__dict__["softwareprofileid"] = softwareprofileid
            __props__.__dict__["softwareprofileversionid"] = softwareprofileversionid
            __props__.__dict__["sshpublickey"] = None if sshpublickey is None else pulumi.Output.secret(sshpublickey)
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timemachineinfo"] = timemachineinfo
            __props__.__dict__["vm_password"] = None if vm_password is None else pulumi.Output.secret(vm_password)
            __props__.__dict__["clone"] = None
            __props__.__dict__["database_cluster_type"] = None
            __props__.__dict__["database_name"] = None
            __props__.__dict__["database_nodes"] = None
            __props__.__dict__["date_created"] = None
            __props__.__dict__["date_modified"] = None
            __props__.__dict__["dbserver_logical_cluster"] = None
            __props__.__dict__["dbserver_logical_cluster_id"] = None
            __props__.__dict__["infos"] = None
            __props__.__dict__["lcm_configs"] = None
            __props__.__dict__["linked_databases"] = None
            __props__.__dict__["metric"] = None
            __props__.__dict__["parent_database_id"] = None
            __props__.__dict__["properties"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["time_machine_id"] = None
            __props__.__dict__["time_machines"] = None
            __props__.__dict__["time_zone"] = None
            __props__.__dict__["type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["sshpublickey", "vmPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(NdbDatabase, __self__).__init__(
            'nutanix:index/ndbDatabase:NdbDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actionarguments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseActionargumentArgs', 'NdbDatabaseActionargumentArgsDict']]]]] = None,
            autotunestagingdrive: Optional[pulumi.Input[_builtins.bool]] = None,
            clone: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseClusterInfoArgs', 'NdbDatabaseClusterInfoArgsDict']]]]] = None,
            clustered: Optional[pulumi.Input[_builtins.bool]] = None,
            computeprofileid: Optional[pulumi.Input[_builtins.str]] = None,
            createdbserver: Optional[pulumi.Input[_builtins.bool]] = None,
            database_cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
            database_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            database_name: Optional[pulumi.Input[_builtins.str]] = None,
            database_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseDatabaseNodeArgs', 'NdbDatabaseDatabaseNodeArgsDict']]]]] = None,
            databasetype: Optional[pulumi.Input[_builtins.str]] = None,
            date_created: Optional[pulumi.Input[_builtins.str]] = None,
            date_modified: Optional[pulumi.Input[_builtins.str]] = None,
            dbparameterprofileid: Optional[pulumi.Input[_builtins.str]] = None,
            dbserver_logical_cluster: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            dbserver_logical_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            dbserverid: Optional[pulumi.Input[_builtins.str]] = None,
            delete: Optional[pulumi.Input[_builtins.bool]] = None,
            delete_logical_cluster: Optional[pulumi.Input[_builtins.bool]] = None,
            delete_time_machine: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            forced: Optional[pulumi.Input[_builtins.bool]] = None,
            infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseInfoArgs', 'NdbDatabaseInfoArgsDict']]]]] = None,
            lcm_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseLcmConfigArgs', 'NdbDatabaseLcmConfigArgsDict']]]]] = None,
            linked_databases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseLinkedDatabaseArgs', 'NdbDatabaseLinkedDatabaseArgsDict']]]]] = None,
            maintenance_tasks: Optional[pulumi.Input[Union['NdbDatabaseMaintenanceTasksArgs', 'NdbDatabaseMaintenanceTasksArgsDict']]] = None,
            metric: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            networkprofileid: Optional[pulumi.Input[_builtins.str]] = None,
            newdbservertimezone: Optional[pulumi.Input[_builtins.str]] = None,
            nodecount: Optional[pulumi.Input[_builtins.int]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseNodeArgs', 'NdbDatabaseNodeArgsDict']]]]] = None,
            nxclusterid: Optional[pulumi.Input[_builtins.str]] = None,
            parent_database_id: Optional[pulumi.Input[_builtins.str]] = None,
            postgresql_info: Optional[pulumi.Input[Union['NdbDatabasePostgresqlInfoArgs', 'NdbDatabasePostgresqlInfoArgsDict']]] = None,
            properties: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabasePropertyArgs', 'NdbDatabasePropertyArgsDict']]]]] = None,
            remove: Optional[pulumi.Input[_builtins.bool]] = None,
            soft_remove: Optional[pulumi.Input[_builtins.bool]] = None,
            softwareprofileid: Optional[pulumi.Input[_builtins.str]] = None,
            softwareprofileversionid: Optional[pulumi.Input[_builtins.str]] = None,
            sshpublickey: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseTagArgs', 'NdbDatabaseTagArgsDict']]]]] = None,
            time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
            time_machines: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseTimeMachineArgs', 'NdbDatabaseTimeMachineArgsDict']]]]] = None,
            time_zone: Optional[pulumi.Input[_builtins.str]] = None,
            timemachineinfo: Optional[pulumi.Input[Union['NdbDatabaseTimemachineinfoArgs', 'NdbDatabaseTimemachineinfoArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vm_password: Optional[pulumi.Input[_builtins.str]] = None) -> 'NdbDatabase':
        """
        Get an existing NdbDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseActionargumentArgs', 'NdbDatabaseActionargumentArgsDict']]]] actionarguments: - (Optional) action arguments for database. For postgress, you can use postgresql_info
        :param pulumi.Input[_builtins.bool] autotunestagingdrive: - (Optional) Enable auto tuning of staging drive. Default: true
        :param pulumi.Input[_builtins.bool] clustered: - (Optional) If clustered database. Default: false
        :param pulumi.Input[_builtins.str] computeprofileid: - (Optional) ID of compute profile
        :param pulumi.Input[_builtins.bool] createdbserver: - (Optional) Set this to create new DB server VM. Default: true
        :param pulumi.Input[_builtins.str] databasetype: - (Required) Type of database. Valid values: postgres_database
        :param pulumi.Input[_builtins.str] dbparameterprofileid: - (Optional) DB parameters profile ID
        :param pulumi.Input[_builtins.str] dbserverid: - (Optional) DB server VM ID for creating instance on registered DB server VM
        :param pulumi.Input[_builtins.bool] delete: - (Optional) Delete the database from the VM. Default value is true
        :param pulumi.Input[_builtins.bool] delete_logical_cluster: - (Optional) Delete the logical cluster. Default is true
        :param pulumi.Input[_builtins.bool] delete_time_machine: - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        :param pulumi.Input[_builtins.str] description: - (Optional) The description
        :param pulumi.Input[_builtins.bool] forced: - (Optional) Force delete of instance. Default is false
        :param pulumi.Input[_builtins.str] name: - (Required) Name of the instance.
        :param pulumi.Input[_builtins.str] networkprofileid: - (Optional) ID of network profile
        :param pulumi.Input[_builtins.str] newdbservertimezone: - (Optional) Timezone of new DB server VM
        :param pulumi.Input[_builtins.int] nodecount: - (Optional) No. of nodes/db server vms. Default: 1
        :param pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabaseNodeArgs', 'NdbDatabaseNodeArgsDict']]]] nodes: - (Optional) nodes info
        :param pulumi.Input[_builtins.str] nxclusterid: - (Optional) Cluster ID for DB server VM
        :param pulumi.Input[Union['NdbDatabasePostgresqlInfoArgs', 'NdbDatabasePostgresqlInfoArgsDict']] postgresql_info: - (Optional) action arguments for postgress type database.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NdbDatabasePropertyArgs', 'NdbDatabasePropertyArgsDict']]]] properties: List of all the properties
        :param pulumi.Input[_builtins.bool] remove: - (Optional) Unregister the database from NDB. Default value is true
        :param pulumi.Input[_builtins.bool] soft_remove: - (Optional) Soft remove. Default will be false
        :param pulumi.Input[_builtins.str] softwareprofileid: - (Optional) ID of software profile
        :param pulumi.Input[_builtins.str] softwareprofileversionid: - (Optional) ID of version in software profile
        :param pulumi.Input[_builtins.str] sshpublickey: - (Optional) public key for ssh access to DB server VM
        :param pulumi.Input[Union['NdbDatabaseTimemachineinfoArgs', 'NdbDatabaseTimemachineinfoArgsDict']] timemachineinfo: - (Optional) time machine config
        :param pulumi.Input[_builtins.str] vm_password: - (Optional) password for DB server VM and era drive user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NdbDatabaseState.__new__(_NdbDatabaseState)

        __props__.__dict__["actionarguments"] = actionarguments
        __props__.__dict__["autotunestagingdrive"] = autotunestagingdrive
        __props__.__dict__["clone"] = clone
        __props__.__dict__["cluster_infos"] = cluster_infos
        __props__.__dict__["clustered"] = clustered
        __props__.__dict__["computeprofileid"] = computeprofileid
        __props__.__dict__["createdbserver"] = createdbserver
        __props__.__dict__["database_cluster_type"] = database_cluster_type
        __props__.__dict__["database_instance_id"] = database_instance_id
        __props__.__dict__["database_name"] = database_name
        __props__.__dict__["database_nodes"] = database_nodes
        __props__.__dict__["databasetype"] = databasetype
        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["date_modified"] = date_modified
        __props__.__dict__["dbparameterprofileid"] = dbparameterprofileid
        __props__.__dict__["dbserver_logical_cluster"] = dbserver_logical_cluster
        __props__.__dict__["dbserver_logical_cluster_id"] = dbserver_logical_cluster_id
        __props__.__dict__["dbserverid"] = dbserverid
        __props__.__dict__["delete"] = delete
        __props__.__dict__["delete_logical_cluster"] = delete_logical_cluster
        __props__.__dict__["delete_time_machine"] = delete_time_machine
        __props__.__dict__["description"] = description
        __props__.__dict__["forced"] = forced
        __props__.__dict__["infos"] = infos
        __props__.__dict__["lcm_configs"] = lcm_configs
        __props__.__dict__["linked_databases"] = linked_databases
        __props__.__dict__["maintenance_tasks"] = maintenance_tasks
        __props__.__dict__["metric"] = metric
        __props__.__dict__["name"] = name
        __props__.__dict__["networkprofileid"] = networkprofileid
        __props__.__dict__["newdbservertimezone"] = newdbservertimezone
        __props__.__dict__["nodecount"] = nodecount
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["nxclusterid"] = nxclusterid
        __props__.__dict__["parent_database_id"] = parent_database_id
        __props__.__dict__["postgresql_info"] = postgresql_info
        __props__.__dict__["properties"] = properties
        __props__.__dict__["remove"] = remove
        __props__.__dict__["soft_remove"] = soft_remove
        __props__.__dict__["softwareprofileid"] = softwareprofileid
        __props__.__dict__["softwareprofileversionid"] = softwareprofileversionid
        __props__.__dict__["sshpublickey"] = sshpublickey
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["time_machine_id"] = time_machine_id
        __props__.__dict__["time_machines"] = time_machines
        __props__.__dict__["time_zone"] = time_zone
        __props__.__dict__["timemachineinfo"] = timemachineinfo
        __props__.__dict__["type"] = type
        __props__.__dict__["vm_password"] = vm_password
        return NdbDatabase(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def actionarguments(self) -> pulumi.Output[Optional[Sequence['outputs.NdbDatabaseActionargument']]]:
        """
        - (Optional) action arguments for database. For postgress, you can use postgresql_info
        """
        return pulumi.get(self, "actionarguments")

    @_builtins.property
    @pulumi.getter
    def autotunestagingdrive(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) Enable auto tuning of staging drive. Default: true
        """
        return pulumi.get(self, "autotunestagingdrive")

    @_builtins.property
    @pulumi.getter
    def clone(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "clone")

    @_builtins.property
    @pulumi.getter(name="clusterInfos")
    def cluster_infos(self) -> pulumi.Output[Optional[Sequence['outputs.NdbDatabaseClusterInfo']]]:
        return pulumi.get(self, "cluster_infos")

    @_builtins.property
    @pulumi.getter
    def clustered(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) If clustered database. Default: false
        """
        return pulumi.get(self, "clustered")

    @_builtins.property
    @pulumi.getter
    def computeprofileid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) ID of compute profile
        """
        return pulumi.get(self, "computeprofileid")

    @_builtins.property
    @pulumi.getter
    def createdbserver(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) Set this to create new DB server VM. Default: true
        """
        return pulumi.get(self, "createdbserver")

    @_builtins.property
    @pulumi.getter(name="databaseClusterType")
    def database_cluster_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "database_cluster_type")

    @_builtins.property
    @pulumi.getter(name="databaseInstanceId")
    def database_instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "database_instance_id")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="databaseNodes")
    def database_nodes(self) -> pulumi.Output[Sequence['outputs.NdbDatabaseDatabaseNode']]:
        return pulumi.get(self, "database_nodes")

    @_builtins.property
    @pulumi.getter
    def databasetype(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Required) Type of database. Valid values: postgres_database
        """
        return pulumi.get(self, "databasetype")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "date_modified")

    @_builtins.property
    @pulumi.getter
    def dbparameterprofileid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) DB parameters profile ID
        """
        return pulumi.get(self, "dbparameterprofileid")

    @_builtins.property
    @pulumi.getter(name="dbserverLogicalCluster")
    def dbserver_logical_cluster(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "dbserver_logical_cluster")

    @_builtins.property
    @pulumi.getter(name="dbserverLogicalClusterId")
    def dbserver_logical_cluster_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dbserver_logical_cluster_id")

    @_builtins.property
    @pulumi.getter
    def dbserverid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) DB server VM ID for creating instance on registered DB server VM
        """
        return pulumi.get(self, "dbserverid")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) Delete the database from the VM. Default value is true
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter(name="deleteLogicalCluster")
    def delete_logical_cluster(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) Delete the logical cluster. Default is true
        """
        return pulumi.get(self, "delete_logical_cluster")

    @_builtins.property
    @pulumi.getter(name="deleteTimeMachine")
    def delete_time_machine(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) Delete the database's Time Machine (snapshots/logs) from the NDB. Default value is true
        """
        return pulumi.get(self, "delete_time_machine")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) The description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def forced(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) Force delete of instance. Default is false
        """
        return pulumi.get(self, "forced")

    @_builtins.property
    @pulumi.getter
    def infos(self) -> pulumi.Output[Sequence['outputs.NdbDatabaseInfo']]:
        return pulumi.get(self, "infos")

    @_builtins.property
    @pulumi.getter(name="lcmConfigs")
    def lcm_configs(self) -> pulumi.Output[Sequence['outputs.NdbDatabaseLcmConfig']]:
        return pulumi.get(self, "lcm_configs")

    @_builtins.property
    @pulumi.getter(name="linkedDatabases")
    def linked_databases(self) -> pulumi.Output[Sequence['outputs.NdbDatabaseLinkedDatabase']]:
        return pulumi.get(self, "linked_databases")

    @_builtins.property
    @pulumi.getter(name="maintenanceTasks")
    def maintenance_tasks(self) -> pulumi.Output[Optional['outputs.NdbDatabaseMaintenanceTasks']]:
        return pulumi.get(self, "maintenance_tasks")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        - (Required) Name of the instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def networkprofileid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) ID of network profile
        """
        return pulumi.get(self, "networkprofileid")

    @_builtins.property
    @pulumi.getter
    def newdbservertimezone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) Timezone of new DB server VM
        """
        return pulumi.get(self, "newdbservertimezone")

    @_builtins.property
    @pulumi.getter
    def nodecount(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        - (Optional) No. of nodes/db server vms. Default: 1
        """
        return pulumi.get(self, "nodecount")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.NdbDatabaseNode']]:
        """
        - (Optional) nodes info
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def nxclusterid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) Cluster ID for DB server VM
        """
        return pulumi.get(self, "nxclusterid")

    @_builtins.property
    @pulumi.getter(name="parentDatabaseId")
    def parent_database_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "parent_database_id")

    @_builtins.property
    @pulumi.getter(name="postgresqlInfo")
    def postgresql_info(self) -> pulumi.Output[Optional['outputs.NdbDatabasePostgresqlInfo']]:
        """
        - (Optional) action arguments for postgress type database.
        """
        return pulumi.get(self, "postgresql_info")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Sequence['outputs.NdbDatabaseProperty']]:
        """
        List of all the properties
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def remove(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) Unregister the database from NDB. Default value is true
        """
        return pulumi.get(self, "remove")

    @_builtins.property
    @pulumi.getter(name="softRemove")
    def soft_remove(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - (Optional) Soft remove. Default will be false
        """
        return pulumi.get(self, "soft_remove")

    @_builtins.property
    @pulumi.getter
    def softwareprofileid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) ID of software profile
        """
        return pulumi.get(self, "softwareprofileid")

    @_builtins.property
    @pulumi.getter
    def softwareprofileversionid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) ID of version in software profile
        """
        return pulumi.get(self, "softwareprofileversionid")

    @_builtins.property
    @pulumi.getter
    def sshpublickey(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) public key for ssh access to DB server VM
        """
        return pulumi.get(self, "sshpublickey")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.NdbDatabaseTag']]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "time_machine_id")

    @_builtins.property
    @pulumi.getter(name="timeMachines")
    def time_machines(self) -> pulumi.Output[Sequence['outputs.NdbDatabaseTimeMachine']]:
        return pulumi.get(self, "time_machines")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter
    def timemachineinfo(self) -> pulumi.Output[Optional['outputs.NdbDatabaseTimemachineinfo']]:
        """
        - (Optional) time machine config
        """
        return pulumi.get(self, "timemachineinfo")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vmPassword")
    def vm_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - (Optional) password for DB server VM and era drive user
        """
        return pulumi.get(self, "vm_password")

