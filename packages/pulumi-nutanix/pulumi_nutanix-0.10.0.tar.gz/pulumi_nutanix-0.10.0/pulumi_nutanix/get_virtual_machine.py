# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVirtualMachineResult',
    'AwaitableGetVirtualMachineResult',
    'get_virtual_machine',
    'get_virtual_machine_output',
]

@pulumi.output_type
class GetVirtualMachineResult:
    """
    A collection of values returned by getVirtualMachine.
    """
    def __init__(__self__, api_version=None, availability_zone_reference=None, boot_device_disk_address=None, boot_device_mac_address=None, boot_device_order_lists=None, boot_type=None, categories=None, cluster_name=None, cluster_uuid=None, description=None, disk_lists=None, enable_cpu_passthrough=None, enable_script_exec=None, gpu_lists=None, guest_customization_cloud_init_custom_key_values=None, guest_customization_cloud_init_meta_data=None, guest_customization_cloud_init_user_data=None, guest_customization_is_overridable=None, guest_customization_sysprep=None, guest_customization_sysprep_custom_key_values=None, guest_os_id=None, hardware_clock_timezone=None, host_reference=None, hypervisor_type=None, id=None, is_vcpu_hard_pinned=None, machine_type=None, memory_size_mib=None, message_lists=None, metadata=None, name=None, ngt_credentials=None, ngt_enabled_capability_lists=None, nic_lists=None, num_sockets=None, num_vcpus_per_socket=None, num_vnuma_nodes=None, nutanix_guest_tools=None, owner_reference=None, parent_reference=None, power_state=None, power_state_mechanism=None, project_reference=None, serial_port_lists=None, should_fail_on_script_failure=None, state=None, vga_console_enabled=None, vm_id=None):
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if availability_zone_reference and not isinstance(availability_zone_reference, dict):
            raise TypeError("Expected argument 'availability_zone_reference' to be a dict")
        pulumi.set(__self__, "availability_zone_reference", availability_zone_reference)
        if boot_device_disk_address and not isinstance(boot_device_disk_address, dict):
            raise TypeError("Expected argument 'boot_device_disk_address' to be a dict")
        pulumi.set(__self__, "boot_device_disk_address", boot_device_disk_address)
        if boot_device_mac_address and not isinstance(boot_device_mac_address, str):
            raise TypeError("Expected argument 'boot_device_mac_address' to be a str")
        pulumi.set(__self__, "boot_device_mac_address", boot_device_mac_address)
        if boot_device_order_lists and not isinstance(boot_device_order_lists, list):
            raise TypeError("Expected argument 'boot_device_order_lists' to be a list")
        pulumi.set(__self__, "boot_device_order_lists", boot_device_order_lists)
        if boot_type and not isinstance(boot_type, str):
            raise TypeError("Expected argument 'boot_type' to be a str")
        pulumi.set(__self__, "boot_type", boot_type)
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        pulumi.set(__self__, "categories", categories)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_uuid and not isinstance(cluster_uuid, str):
            raise TypeError("Expected argument 'cluster_uuid' to be a str")
        pulumi.set(__self__, "cluster_uuid", cluster_uuid)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disk_lists and not isinstance(disk_lists, list):
            raise TypeError("Expected argument 'disk_lists' to be a list")
        pulumi.set(__self__, "disk_lists", disk_lists)
        if enable_cpu_passthrough and not isinstance(enable_cpu_passthrough, bool):
            raise TypeError("Expected argument 'enable_cpu_passthrough' to be a bool")
        pulumi.set(__self__, "enable_cpu_passthrough", enable_cpu_passthrough)
        if enable_script_exec and not isinstance(enable_script_exec, bool):
            raise TypeError("Expected argument 'enable_script_exec' to be a bool")
        pulumi.set(__self__, "enable_script_exec", enable_script_exec)
        if gpu_lists and not isinstance(gpu_lists, list):
            raise TypeError("Expected argument 'gpu_lists' to be a list")
        pulumi.set(__self__, "gpu_lists", gpu_lists)
        if guest_customization_cloud_init_custom_key_values and not isinstance(guest_customization_cloud_init_custom_key_values, dict):
            raise TypeError("Expected argument 'guest_customization_cloud_init_custom_key_values' to be a dict")
        pulumi.set(__self__, "guest_customization_cloud_init_custom_key_values", guest_customization_cloud_init_custom_key_values)
        if guest_customization_cloud_init_meta_data and not isinstance(guest_customization_cloud_init_meta_data, str):
            raise TypeError("Expected argument 'guest_customization_cloud_init_meta_data' to be a str")
        pulumi.set(__self__, "guest_customization_cloud_init_meta_data", guest_customization_cloud_init_meta_data)
        if guest_customization_cloud_init_user_data and not isinstance(guest_customization_cloud_init_user_data, str):
            raise TypeError("Expected argument 'guest_customization_cloud_init_user_data' to be a str")
        pulumi.set(__self__, "guest_customization_cloud_init_user_data", guest_customization_cloud_init_user_data)
        if guest_customization_is_overridable and not isinstance(guest_customization_is_overridable, bool):
            raise TypeError("Expected argument 'guest_customization_is_overridable' to be a bool")
        pulumi.set(__self__, "guest_customization_is_overridable", guest_customization_is_overridable)
        if guest_customization_sysprep and not isinstance(guest_customization_sysprep, dict):
            raise TypeError("Expected argument 'guest_customization_sysprep' to be a dict")
        pulumi.set(__self__, "guest_customization_sysprep", guest_customization_sysprep)
        if guest_customization_sysprep_custom_key_values and not isinstance(guest_customization_sysprep_custom_key_values, dict):
            raise TypeError("Expected argument 'guest_customization_sysprep_custom_key_values' to be a dict")
        pulumi.set(__self__, "guest_customization_sysprep_custom_key_values", guest_customization_sysprep_custom_key_values)
        if guest_os_id and not isinstance(guest_os_id, str):
            raise TypeError("Expected argument 'guest_os_id' to be a str")
        pulumi.set(__self__, "guest_os_id", guest_os_id)
        if hardware_clock_timezone and not isinstance(hardware_clock_timezone, str):
            raise TypeError("Expected argument 'hardware_clock_timezone' to be a str")
        pulumi.set(__self__, "hardware_clock_timezone", hardware_clock_timezone)
        if host_reference and not isinstance(host_reference, dict):
            raise TypeError("Expected argument 'host_reference' to be a dict")
        pulumi.set(__self__, "host_reference", host_reference)
        if hypervisor_type and not isinstance(hypervisor_type, str):
            raise TypeError("Expected argument 'hypervisor_type' to be a str")
        pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_vcpu_hard_pinned and not isinstance(is_vcpu_hard_pinned, bool):
            raise TypeError("Expected argument 'is_vcpu_hard_pinned' to be a bool")
        pulumi.set(__self__, "is_vcpu_hard_pinned", is_vcpu_hard_pinned)
        if machine_type and not isinstance(machine_type, str):
            raise TypeError("Expected argument 'machine_type' to be a str")
        pulumi.set(__self__, "machine_type", machine_type)
        if memory_size_mib and not isinstance(memory_size_mib, int):
            raise TypeError("Expected argument 'memory_size_mib' to be a int")
        pulumi.set(__self__, "memory_size_mib", memory_size_mib)
        if message_lists and not isinstance(message_lists, list):
            raise TypeError("Expected argument 'message_lists' to be a list")
        pulumi.set(__self__, "message_lists", message_lists)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ngt_credentials and not isinstance(ngt_credentials, dict):
            raise TypeError("Expected argument 'ngt_credentials' to be a dict")
        pulumi.set(__self__, "ngt_credentials", ngt_credentials)
        if ngt_enabled_capability_lists and not isinstance(ngt_enabled_capability_lists, list):
            raise TypeError("Expected argument 'ngt_enabled_capability_lists' to be a list")
        pulumi.set(__self__, "ngt_enabled_capability_lists", ngt_enabled_capability_lists)
        if nic_lists and not isinstance(nic_lists, list):
            raise TypeError("Expected argument 'nic_lists' to be a list")
        pulumi.set(__self__, "nic_lists", nic_lists)
        if num_sockets and not isinstance(num_sockets, int):
            raise TypeError("Expected argument 'num_sockets' to be a int")
        pulumi.set(__self__, "num_sockets", num_sockets)
        if num_vcpus_per_socket and not isinstance(num_vcpus_per_socket, int):
            raise TypeError("Expected argument 'num_vcpus_per_socket' to be a int")
        pulumi.set(__self__, "num_vcpus_per_socket", num_vcpus_per_socket)
        if num_vnuma_nodes and not isinstance(num_vnuma_nodes, int):
            raise TypeError("Expected argument 'num_vnuma_nodes' to be a int")
        pulumi.set(__self__, "num_vnuma_nodes", num_vnuma_nodes)
        if nutanix_guest_tools and not isinstance(nutanix_guest_tools, dict):
            raise TypeError("Expected argument 'nutanix_guest_tools' to be a dict")
        pulumi.set(__self__, "nutanix_guest_tools", nutanix_guest_tools)
        if owner_reference and not isinstance(owner_reference, dict):
            raise TypeError("Expected argument 'owner_reference' to be a dict")
        pulumi.set(__self__, "owner_reference", owner_reference)
        if parent_reference and not isinstance(parent_reference, dict):
            raise TypeError("Expected argument 'parent_reference' to be a dict")
        pulumi.set(__self__, "parent_reference", parent_reference)
        if power_state and not isinstance(power_state, str):
            raise TypeError("Expected argument 'power_state' to be a str")
        pulumi.set(__self__, "power_state", power_state)
        if power_state_mechanism and not isinstance(power_state_mechanism, str):
            raise TypeError("Expected argument 'power_state_mechanism' to be a str")
        pulumi.set(__self__, "power_state_mechanism", power_state_mechanism)
        if project_reference and not isinstance(project_reference, dict):
            raise TypeError("Expected argument 'project_reference' to be a dict")
        pulumi.set(__self__, "project_reference", project_reference)
        if serial_port_lists and not isinstance(serial_port_lists, list):
            raise TypeError("Expected argument 'serial_port_lists' to be a list")
        pulumi.set(__self__, "serial_port_lists", serial_port_lists)
        if should_fail_on_script_failure and not isinstance(should_fail_on_script_failure, bool):
            raise TypeError("Expected argument 'should_fail_on_script_failure' to be a bool")
        pulumi.set(__self__, "should_fail_on_script_failure", should_fail_on_script_failure)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if vga_console_enabled and not isinstance(vga_console_enabled, bool):
            raise TypeError("Expected argument 'vga_console_enabled' to be a bool")
        pulumi.set(__self__, "vga_console_enabled", vga_console_enabled)
        if vm_id and not isinstance(vm_id, str):
            raise TypeError("Expected argument 'vm_id' to be a str")
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="availabilityZoneReference")
    def availability_zone_reference(self) -> Mapping[str, _builtins.str]:
        """
        - The reference to a availability_zone.
        """
        return pulumi.get(self, "availability_zone_reference")

    @_builtins.property
    @pulumi.getter(name="bootDeviceDiskAddress")
    def boot_device_disk_address(self) -> Mapping[str, _builtins.str]:
        """
        - Address of disk to boot from.
        """
        return pulumi.get(self, "boot_device_disk_address")

    @_builtins.property
    @pulumi.getter(name="bootDeviceMacAddress")
    def boot_device_mac_address(self) -> _builtins.str:
        """
        - MAC address of nic to boot from.
        """
        return pulumi.get(self, "boot_device_mac_address")

    @_builtins.property
    @pulumi.getter(name="bootDeviceOrderLists")
    def boot_device_order_lists(self) -> Sequence[_builtins.str]:
        """
        - Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.
        """
        return pulumi.get(self, "boot_device_order_lists")

    @_builtins.property
    @pulumi.getter(name="bootType")
    def boot_type(self) -> _builtins.str:
        """
        - Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or; Secure boot is enabled then other legacy boot options (like boot_device and; boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling; Secure boot means that UEFI boot is also enabled. The possible value are: UEFI", "LEGACY", "SECURE_BOOT".
        """
        return pulumi.get(self, "boot_type")

    @_builtins.property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetVirtualMachineCategoryResult']:
        """
        - Categories for the vm.
        """
        return pulumi.get(self, "categories")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        - The name of the reference to the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> _builtins.str:
        return pulumi.get(self, "cluster_uuid")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        - A description for vm.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="diskLists")
    def disk_lists(self) -> Sequence['outputs.GetVirtualMachineDiskListResult']:
        """
        Disks attached to the VM.
        """
        return pulumi.get(self, "disk_lists")

    @_builtins.property
    @pulumi.getter(name="enableCpuPassthrough")
    def enable_cpu_passthrough(self) -> _builtins.bool:
        return pulumi.get(self, "enable_cpu_passthrough")

    @_builtins.property
    @pulumi.getter(name="enableScriptExec")
    def enable_script_exec(self) -> _builtins.bool:
        """
        - Extra configs related to power state transition. Indicates whether to execute set script before ngt shutdown/reboot.
        """
        return pulumi.get(self, "enable_script_exec")

    @_builtins.property
    @pulumi.getter(name="gpuLists")
    def gpu_lists(self) -> Sequence['outputs.GetVirtualMachineGpuListResult']:
        """
        - GPUs attached to the VM.
        """
        return pulumi.get(self, "gpu_lists")

    @_builtins.property
    @pulumi.getter(name="guestCustomizationCloudInitCustomKeyValues")
    def guest_customization_cloud_init_custom_key_values(self) -> Mapping[str, _builtins.str]:
        """
        - Generic key value pair used for custom attributes in cloud init.
        """
        return pulumi.get(self, "guest_customization_cloud_init_custom_key_values")

    @_builtins.property
    @pulumi.getter(name="guestCustomizationCloudInitMetaData")
    def guest_customization_cloud_init_meta_data(self) -> _builtins.str:
        """
        The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.
        """
        return pulumi.get(self, "guest_customization_cloud_init_meta_data")

    @_builtins.property
    @pulumi.getter(name="guestCustomizationCloudInitUserData")
    def guest_customization_cloud_init_user_data(self) -> _builtins.str:
        """
        - The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.
        """
        return pulumi.get(self, "guest_customization_cloud_init_user_data")

    @_builtins.property
    @pulumi.getter(name="guestCustomizationIsOverridable")
    def guest_customization_is_overridable(self) -> _builtins.bool:
        """
        - Flag to allow override of customization by deployer.
        """
        return pulumi.get(self, "guest_customization_is_overridable")

    @_builtins.property
    @pulumi.getter(name="guestCustomizationSysprep")
    def guest_customization_sysprep(self) -> Mapping[str, _builtins.str]:
        """
        - VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \\"override_script\\" is set to \\"True\\" then the deployer can upload their own custom script.
        """
        return pulumi.get(self, "guest_customization_sysprep")

    @_builtins.property
    @pulumi.getter(name="guestCustomizationSysprepCustomKeyValues")
    def guest_customization_sysprep_custom_key_values(self) -> Mapping[str, _builtins.str]:
        """
        - Generic key value pair used for custom attributes in sysprep.
        """
        return pulumi.get(self, "guest_customization_sysprep_custom_key_values")

    @_builtins.property
    @pulumi.getter(name="guestOsId")
    def guest_os_id(self) -> _builtins.str:
        """
        - Guest OS Identifier. For ESX, refer to VMware documentation [link](https://www.vmware.com/support/developer/converter-sdk/conv43_apireference/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html) for the list of guest OS identifiers.
        """
        return pulumi.get(self, "guest_os_id")

    @_builtins.property
    @pulumi.getter(name="hardwareClockTimezone")
    def hardware_clock_timezone(self) -> _builtins.str:
        """
        - VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).
        """
        return pulumi.get(self, "hardware_clock_timezone")

    @_builtins.property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> Mapping[str, _builtins.str]:
        """
        - Reference to a host.
        """
        return pulumi.get(self, "host_reference")

    @_builtins.property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> _builtins.str:
        """
        - The hypervisor type for the hypervisor the VM is hosted on.
        """
        return pulumi.get(self, "hypervisor_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isVcpuHardPinned")
    def is_vcpu_hard_pinned(self) -> _builtins.bool:
        return pulumi.get(self, "is_vcpu_hard_pinned")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> _builtins.str:
        """
        - Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter(name="memorySizeMib")
    def memory_size_mib(self) -> _builtins.int:
        """
        - Memory size in MiB.
        """
        return pulumi.get(self, "memory_size_mib")

    @_builtins.property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence['outputs.GetVirtualMachineMessageListResult']:
        return pulumi.get(self, "message_lists")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        - The vm kind metadata.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        - the name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ngtCredentials")
    def ngt_credentials(self) -> Mapping[str, _builtins.str]:
        """
        - Credentials to login server.
        """
        return pulumi.get(self, "ngt_credentials")

    @_builtins.property
    @pulumi.getter(name="ngtEnabledCapabilityLists")
    def ngt_enabled_capability_lists(self) -> Sequence[_builtins.str]:
        """
        Application names that are enabled.
        """
        return pulumi.get(self, "ngt_enabled_capability_lists")

    @_builtins.property
    @pulumi.getter(name="nicLists")
    def nic_lists(self) -> Sequence['outputs.GetVirtualMachineNicListResult']:
        """
        - NICs attached to the VM.
        """
        return pulumi.get(self, "nic_lists")

    @_builtins.property
    @pulumi.getter(name="numSockets")
    def num_sockets(self) -> _builtins.int:
        """
        - Number of vCPU sockets.
        """
        return pulumi.get(self, "num_sockets")

    @_builtins.property
    @pulumi.getter(name="numVcpusPerSocket")
    def num_vcpus_per_socket(self) -> _builtins.int:
        """
        - Number of vCPUs per socket.
        """
        return pulumi.get(self, "num_vcpus_per_socket")

    @_builtins.property
    @pulumi.getter(name="numVnumaNodes")
    def num_vnuma_nodes(self) -> _builtins.int:
        """
        - Number of vNUMA nodes. 0 means vNUMA is disabled.
        """
        return pulumi.get(self, "num_vnuma_nodes")

    @_builtins.property
    @pulumi.getter(name="nutanixGuestTools")
    def nutanix_guest_tools(self) -> Mapping[str, _builtins.str]:
        """
        - Information regarding Nutanix Guest Tools.
        """
        return pulumi.get(self, "nutanix_guest_tools")

    @_builtins.property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, _builtins.str]:
        """
        - The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @_builtins.property
    @pulumi.getter(name="parentReference")
    def parent_reference(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "parent_reference")

    @_builtins.property
    @pulumi.getter(name="powerState")
    def power_state(self) -> _builtins.str:
        """
        - The current or desired power state of the VM. (Options : ON , OFF)
        """
        return pulumi.get(self, "power_state")

    @_builtins.property
    @pulumi.getter(name="powerStateMechanism")
    def power_state_mechanism(self) -> _builtins.str:
        """
        - Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \\"OFF\\" state. Power state mechanism (ACPI/GUEST/HARD).
        """
        return pulumi.get(self, "power_state_mechanism")

    @_builtins.property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, _builtins.str]:
        """
        - The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @_builtins.property
    @pulumi.getter(name="serialPortLists")
    def serial_port_lists(self) -> Sequence['outputs.GetVirtualMachineSerialPortListResult']:
        """
        - (Optional) Serial Ports configured on the VM.
        """
        return pulumi.get(self, "serial_port_lists")

    @_builtins.property
    @pulumi.getter(name="shouldFailOnScriptFailure")
    def should_fail_on_script_failure(self) -> _builtins.bool:
        """
        -  Extra configs related to power state transition. Indicates whether to abort ngt shutdown/reboot if script fails.
        """
        return pulumi.get(self, "should_fail_on_script_failure")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        - Nutanix Guest Tools is enabled or not.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vgaConsoleEnabled")
    def vga_console_enabled(self) -> _builtins.bool:
        """
        - Indicates whether VGA console should be enabled or not.
        """
        return pulumi.get(self, "vga_console_enabled")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        return pulumi.get(self, "vm_id")


class AwaitableGetVirtualMachineResult(GetVirtualMachineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualMachineResult(
            api_version=self.api_version,
            availability_zone_reference=self.availability_zone_reference,
            boot_device_disk_address=self.boot_device_disk_address,
            boot_device_mac_address=self.boot_device_mac_address,
            boot_device_order_lists=self.boot_device_order_lists,
            boot_type=self.boot_type,
            categories=self.categories,
            cluster_name=self.cluster_name,
            cluster_uuid=self.cluster_uuid,
            description=self.description,
            disk_lists=self.disk_lists,
            enable_cpu_passthrough=self.enable_cpu_passthrough,
            enable_script_exec=self.enable_script_exec,
            gpu_lists=self.gpu_lists,
            guest_customization_cloud_init_custom_key_values=self.guest_customization_cloud_init_custom_key_values,
            guest_customization_cloud_init_meta_data=self.guest_customization_cloud_init_meta_data,
            guest_customization_cloud_init_user_data=self.guest_customization_cloud_init_user_data,
            guest_customization_is_overridable=self.guest_customization_is_overridable,
            guest_customization_sysprep=self.guest_customization_sysprep,
            guest_customization_sysprep_custom_key_values=self.guest_customization_sysprep_custom_key_values,
            guest_os_id=self.guest_os_id,
            hardware_clock_timezone=self.hardware_clock_timezone,
            host_reference=self.host_reference,
            hypervisor_type=self.hypervisor_type,
            id=self.id,
            is_vcpu_hard_pinned=self.is_vcpu_hard_pinned,
            machine_type=self.machine_type,
            memory_size_mib=self.memory_size_mib,
            message_lists=self.message_lists,
            metadata=self.metadata,
            name=self.name,
            ngt_credentials=self.ngt_credentials,
            ngt_enabled_capability_lists=self.ngt_enabled_capability_lists,
            nic_lists=self.nic_lists,
            num_sockets=self.num_sockets,
            num_vcpus_per_socket=self.num_vcpus_per_socket,
            num_vnuma_nodes=self.num_vnuma_nodes,
            nutanix_guest_tools=self.nutanix_guest_tools,
            owner_reference=self.owner_reference,
            parent_reference=self.parent_reference,
            power_state=self.power_state,
            power_state_mechanism=self.power_state_mechanism,
            project_reference=self.project_reference,
            serial_port_lists=self.serial_port_lists,
            should_fail_on_script_failure=self.should_fail_on_script_failure,
            state=self.state,
            vga_console_enabled=self.vga_console_enabled,
            vm_id=self.vm_id)


def get_virtual_machine(boot_device_disk_address: Optional[Mapping[str, _builtins.str]] = None,
                        boot_device_mac_address: Optional[_builtins.str] = None,
                        categories: Optional[Sequence[Union['GetVirtualMachineCategoryArgs', 'GetVirtualMachineCategoryArgsDict']]] = None,
                        vm_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualMachineResult:
    """
    Describes a Virtual Machine


    :param Mapping[str, _builtins.str] boot_device_disk_address: - Address of disk to boot from.
    :param _builtins.str boot_device_mac_address: - MAC address of nic to boot from.
    :param Sequence[Union['GetVirtualMachineCategoryArgs', 'GetVirtualMachineCategoryArgsDict']] categories: - Categories for the vm.
    :param _builtins.str vm_id: Represents virtual machine UUID
    """
    __args__ = dict()
    __args__['bootDeviceDiskAddress'] = boot_device_disk_address
    __args__['bootDeviceMacAddress'] = boot_device_mac_address
    __args__['categories'] = categories
    __args__['vmId'] = vm_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getVirtualMachine:getVirtualMachine', __args__, opts=opts, typ=GetVirtualMachineResult).value

    return AwaitableGetVirtualMachineResult(
        api_version=pulumi.get(__ret__, 'api_version'),
        availability_zone_reference=pulumi.get(__ret__, 'availability_zone_reference'),
        boot_device_disk_address=pulumi.get(__ret__, 'boot_device_disk_address'),
        boot_device_mac_address=pulumi.get(__ret__, 'boot_device_mac_address'),
        boot_device_order_lists=pulumi.get(__ret__, 'boot_device_order_lists'),
        boot_type=pulumi.get(__ret__, 'boot_type'),
        categories=pulumi.get(__ret__, 'categories'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        cluster_uuid=pulumi.get(__ret__, 'cluster_uuid'),
        description=pulumi.get(__ret__, 'description'),
        disk_lists=pulumi.get(__ret__, 'disk_lists'),
        enable_cpu_passthrough=pulumi.get(__ret__, 'enable_cpu_passthrough'),
        enable_script_exec=pulumi.get(__ret__, 'enable_script_exec'),
        gpu_lists=pulumi.get(__ret__, 'gpu_lists'),
        guest_customization_cloud_init_custom_key_values=pulumi.get(__ret__, 'guest_customization_cloud_init_custom_key_values'),
        guest_customization_cloud_init_meta_data=pulumi.get(__ret__, 'guest_customization_cloud_init_meta_data'),
        guest_customization_cloud_init_user_data=pulumi.get(__ret__, 'guest_customization_cloud_init_user_data'),
        guest_customization_is_overridable=pulumi.get(__ret__, 'guest_customization_is_overridable'),
        guest_customization_sysprep=pulumi.get(__ret__, 'guest_customization_sysprep'),
        guest_customization_sysprep_custom_key_values=pulumi.get(__ret__, 'guest_customization_sysprep_custom_key_values'),
        guest_os_id=pulumi.get(__ret__, 'guest_os_id'),
        hardware_clock_timezone=pulumi.get(__ret__, 'hardware_clock_timezone'),
        host_reference=pulumi.get(__ret__, 'host_reference'),
        hypervisor_type=pulumi.get(__ret__, 'hypervisor_type'),
        id=pulumi.get(__ret__, 'id'),
        is_vcpu_hard_pinned=pulumi.get(__ret__, 'is_vcpu_hard_pinned'),
        machine_type=pulumi.get(__ret__, 'machine_type'),
        memory_size_mib=pulumi.get(__ret__, 'memory_size_mib'),
        message_lists=pulumi.get(__ret__, 'message_lists'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        ngt_credentials=pulumi.get(__ret__, 'ngt_credentials'),
        ngt_enabled_capability_lists=pulumi.get(__ret__, 'ngt_enabled_capability_lists'),
        nic_lists=pulumi.get(__ret__, 'nic_lists'),
        num_sockets=pulumi.get(__ret__, 'num_sockets'),
        num_vcpus_per_socket=pulumi.get(__ret__, 'num_vcpus_per_socket'),
        num_vnuma_nodes=pulumi.get(__ret__, 'num_vnuma_nodes'),
        nutanix_guest_tools=pulumi.get(__ret__, 'nutanix_guest_tools'),
        owner_reference=pulumi.get(__ret__, 'owner_reference'),
        parent_reference=pulumi.get(__ret__, 'parent_reference'),
        power_state=pulumi.get(__ret__, 'power_state'),
        power_state_mechanism=pulumi.get(__ret__, 'power_state_mechanism'),
        project_reference=pulumi.get(__ret__, 'project_reference'),
        serial_port_lists=pulumi.get(__ret__, 'serial_port_lists'),
        should_fail_on_script_failure=pulumi.get(__ret__, 'should_fail_on_script_failure'),
        state=pulumi.get(__ret__, 'state'),
        vga_console_enabled=pulumi.get(__ret__, 'vga_console_enabled'),
        vm_id=pulumi.get(__ret__, 'vm_id'))
def get_virtual_machine_output(boot_device_disk_address: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                               boot_device_mac_address: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               categories: Optional[pulumi.Input[Optional[Sequence[Union['GetVirtualMachineCategoryArgs', 'GetVirtualMachineCategoryArgsDict']]]]] = None,
                               vm_id: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVirtualMachineResult]:
    """
    Describes a Virtual Machine


    :param Mapping[str, _builtins.str] boot_device_disk_address: - Address of disk to boot from.
    :param _builtins.str boot_device_mac_address: - MAC address of nic to boot from.
    :param Sequence[Union['GetVirtualMachineCategoryArgs', 'GetVirtualMachineCategoryArgsDict']] categories: - Categories for the vm.
    :param _builtins.str vm_id: Represents virtual machine UUID
    """
    __args__ = dict()
    __args__['bootDeviceDiskAddress'] = boot_device_disk_address
    __args__['bootDeviceMacAddress'] = boot_device_mac_address
    __args__['categories'] = categories
    __args__['vmId'] = vm_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getVirtualMachine:getVirtualMachine', __args__, opts=opts, typ=GetVirtualMachineResult)
    return __ret__.apply(lambda __response__: GetVirtualMachineResult(
        api_version=pulumi.get(__response__, 'api_version'),
        availability_zone_reference=pulumi.get(__response__, 'availability_zone_reference'),
        boot_device_disk_address=pulumi.get(__response__, 'boot_device_disk_address'),
        boot_device_mac_address=pulumi.get(__response__, 'boot_device_mac_address'),
        boot_device_order_lists=pulumi.get(__response__, 'boot_device_order_lists'),
        boot_type=pulumi.get(__response__, 'boot_type'),
        categories=pulumi.get(__response__, 'categories'),
        cluster_name=pulumi.get(__response__, 'cluster_name'),
        cluster_uuid=pulumi.get(__response__, 'cluster_uuid'),
        description=pulumi.get(__response__, 'description'),
        disk_lists=pulumi.get(__response__, 'disk_lists'),
        enable_cpu_passthrough=pulumi.get(__response__, 'enable_cpu_passthrough'),
        enable_script_exec=pulumi.get(__response__, 'enable_script_exec'),
        gpu_lists=pulumi.get(__response__, 'gpu_lists'),
        guest_customization_cloud_init_custom_key_values=pulumi.get(__response__, 'guest_customization_cloud_init_custom_key_values'),
        guest_customization_cloud_init_meta_data=pulumi.get(__response__, 'guest_customization_cloud_init_meta_data'),
        guest_customization_cloud_init_user_data=pulumi.get(__response__, 'guest_customization_cloud_init_user_data'),
        guest_customization_is_overridable=pulumi.get(__response__, 'guest_customization_is_overridable'),
        guest_customization_sysprep=pulumi.get(__response__, 'guest_customization_sysprep'),
        guest_customization_sysprep_custom_key_values=pulumi.get(__response__, 'guest_customization_sysprep_custom_key_values'),
        guest_os_id=pulumi.get(__response__, 'guest_os_id'),
        hardware_clock_timezone=pulumi.get(__response__, 'hardware_clock_timezone'),
        host_reference=pulumi.get(__response__, 'host_reference'),
        hypervisor_type=pulumi.get(__response__, 'hypervisor_type'),
        id=pulumi.get(__response__, 'id'),
        is_vcpu_hard_pinned=pulumi.get(__response__, 'is_vcpu_hard_pinned'),
        machine_type=pulumi.get(__response__, 'machine_type'),
        memory_size_mib=pulumi.get(__response__, 'memory_size_mib'),
        message_lists=pulumi.get(__response__, 'message_lists'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        ngt_credentials=pulumi.get(__response__, 'ngt_credentials'),
        ngt_enabled_capability_lists=pulumi.get(__response__, 'ngt_enabled_capability_lists'),
        nic_lists=pulumi.get(__response__, 'nic_lists'),
        num_sockets=pulumi.get(__response__, 'num_sockets'),
        num_vcpus_per_socket=pulumi.get(__response__, 'num_vcpus_per_socket'),
        num_vnuma_nodes=pulumi.get(__response__, 'num_vnuma_nodes'),
        nutanix_guest_tools=pulumi.get(__response__, 'nutanix_guest_tools'),
        owner_reference=pulumi.get(__response__, 'owner_reference'),
        parent_reference=pulumi.get(__response__, 'parent_reference'),
        power_state=pulumi.get(__response__, 'power_state'),
        power_state_mechanism=pulumi.get(__response__, 'power_state_mechanism'),
        project_reference=pulumi.get(__response__, 'project_reference'),
        serial_port_lists=pulumi.get(__response__, 'serial_port_lists'),
        should_fail_on_script_failure=pulumi.get(__response__, 'should_fail_on_script_failure'),
        state=pulumi.get(__response__, 'state'),
        vga_console_enabled=pulumi.get(__response__, 'vga_console_enabled'),
        vm_id=pulumi.get(__response__, 'vm_id')))
