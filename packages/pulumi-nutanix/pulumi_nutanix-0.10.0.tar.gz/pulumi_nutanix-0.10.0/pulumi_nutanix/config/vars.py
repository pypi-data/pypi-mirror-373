# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

import types

__config__ = pulumi.Config('nutanix')


class _ExportableConfig(types.ModuleType):
    @_builtins.property
    def endpoint(self) -> Optional[str]:
        """
        URL for Nutanix Prism (e.g IP or FQDN for cluster VIP
        note, this is never the data services VIP, and should not be an
        individual CVM address, as this would cause calls to fail during
        cluster lifecycle management operations, such as AOS upgrades.
        """
        return __config__.get('endpoint')

    @_builtins.property
    def foundation_endpoint(self) -> Optional[str]:
        """
        endpoint for foundation VM (eg. Foundation VM IP)
        """
        return __config__.get('foundationEndpoint')

    @_builtins.property
    def foundation_port(self) -> Optional[str]:
        """
        Port for foundation VM
        """
        return __config__.get('foundationPort')

    @_builtins.property
    def insecure(self) -> Optional[bool]:
        """
        Explicitly allow the provider to perform "insecure" SSL requests. If omitted,default value is `false`
        """
        return __config__.get_bool('insecure')

    @_builtins.property
    def ndb_endpoint(self) -> Optional[str]:
        """
        endpoint for Era VM (era ip)
        """
        return __config__.get('ndbEndpoint')

    @_builtins.property
    def ndb_password(self) -> Optional[str]:
        return __config__.get('ndbPassword')

    @_builtins.property
    def ndb_username(self) -> Optional[str]:
        return __config__.get('ndbUsername')

    @_builtins.property
    def password(self) -> Optional[str]:
        """
        Password for provided user name.
        """
        return __config__.get('password')

    @_builtins.property
    def port(self) -> Optional[str]:
        """
        Port for Nutanix Prism.
        """
        return __config__.get('port')

    @_builtins.property
    def proxy_url(self) -> Optional[str]:
        return __config__.get('proxyUrl')

    @_builtins.property
    def session_auth(self) -> Optional[bool]:
        """
        Use session authentification instead of basic auth for each request
        """
        return __config__.get_bool('sessionAuth')

    @_builtins.property
    def username(self) -> Optional[str]:
        """
        User name for Nutanix Prism. Could be
        local cluster auth (e.g. 'admin') or directory auth.
        """
        return __config__.get('username')

    @_builtins.property
    def wait_timeout(self) -> Optional[int]:
        """
        Set if you know that the creation o update of a resource may take long time (minutes)
        """
        return __config__.get_int('waitTimeout')

