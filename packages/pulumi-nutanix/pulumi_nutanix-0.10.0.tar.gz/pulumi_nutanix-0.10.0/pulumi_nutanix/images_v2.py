# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImagesV2Args', 'ImagesV2']

@pulumi.input_type
class ImagesV2Args:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 category_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 checksums: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2ChecksumArgs']]]] = None,
                 cluster_location_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2SourceArgs']]]] = None):
        """
        The set of arguments for constructing a ImagesV2 resource.
        """
        pulumi.set(__self__, "type", type)
        if category_ext_ids is not None:
            pulumi.set(__self__, "category_ext_ids", category_ext_ids)
        if checksums is not None:
            pulumi.set(__self__, "checksums", checksums)
        if cluster_location_ext_ids is not None:
            pulumi.set(__self__, "cluster_location_ext_ids", cluster_location_ext_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="categoryExtIds")
    def category_ext_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "category_ext_ids")

    @category_ext_ids.setter
    def category_ext_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "category_ext_ids", value)

    @_builtins.property
    @pulumi.getter
    def checksums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2ChecksumArgs']]]]:
        return pulumi.get(self, "checksums")

    @checksums.setter
    def checksums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2ChecksumArgs']]]]):
        pulumi.set(self, "checksums", value)

    @_builtins.property
    @pulumi.getter(name="clusterLocationExtIds")
    def cluster_location_ext_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "cluster_location_ext_ids")

    @cluster_location_ext_ids.setter
    def cluster_location_ext_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cluster_location_ext_ids", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2SourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2SourceArgs']]]]):
        pulumi.set(self, "sources", value)


@pulumi.input_type
class _ImagesV2State:
    def __init__(__self__, *,
                 category_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 checksums: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2ChecksumArgs']]]] = None,
                 cluster_location_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_policy_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2PlacementPolicyStatusArgs']]]] = None,
                 size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2SourceArgs']]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ImagesV2 resources.
        """
        if category_ext_ids is not None:
            pulumi.set(__self__, "category_ext_ids", category_ext_ids)
        if checksums is not None:
            pulumi.set(__self__, "checksums", checksums)
        if cluster_location_ext_ids is not None:
            pulumi.set(__self__, "cluster_location_ext_ids", cluster_location_ext_ids)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_ext_id is not None:
            pulumi.set(__self__, "owner_ext_id", owner_ext_id)
        if placement_policy_statuses is not None:
            pulumi.set(__self__, "placement_policy_statuses", placement_policy_statuses)
        if size_bytes is not None:
            pulumi.set(__self__, "size_bytes", size_bytes)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="categoryExtIds")
    def category_ext_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "category_ext_ids")

    @category_ext_ids.setter
    def category_ext_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "category_ext_ids", value)

    @_builtins.property
    @pulumi.getter
    def checksums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2ChecksumArgs']]]]:
        return pulumi.get(self, "checksums")

    @checksums.setter
    def checksums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2ChecksumArgs']]]]):
        pulumi.set(self, "checksums", value)

    @_builtins.property
    @pulumi.getter(name="clusterLocationExtIds")
    def cluster_location_ext_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "cluster_location_ext_ids")

    @cluster_location_ext_ids.setter
    def cluster_location_ext_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cluster_location_ext_ids", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_update_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ownerExtId")
    def owner_ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "owner_ext_id")

    @owner_ext_id.setter
    def owner_ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner_ext_id", value)

    @_builtins.property
    @pulumi.getter(name="placementPolicyStatuses")
    def placement_policy_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2PlacementPolicyStatusArgs']]]]:
        return pulumi.get(self, "placement_policy_statuses")

    @placement_policy_statuses.setter
    def placement_policy_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2PlacementPolicyStatusArgs']]]]):
        pulumi.set(self, "placement_policy_statuses", value)

    @_builtins.property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "size_bytes")

    @size_bytes.setter
    def size_bytes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size_bytes", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2SourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImagesV2SourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("nutanix:index/imagesV2:ImagesV2")
class ImagesV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 checksums: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagesV2ChecksumArgs', 'ImagesV2ChecksumArgsDict']]]]] = None,
                 cluster_location_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagesV2SourceArgs', 'ImagesV2SourceArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ImagesV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImagesV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ImagesV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ImagesV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImagesV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 checksums: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagesV2ChecksumArgs', 'ImagesV2ChecksumArgsDict']]]]] = None,
                 cluster_location_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagesV2SourceArgs', 'ImagesV2SourceArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImagesV2Args.__new__(ImagesV2Args)

            __props__.__dict__["category_ext_ids"] = category_ext_ids
            __props__.__dict__["checksums"] = checksums
            __props__.__dict__["cluster_location_ext_ids"] = cluster_location_ext_ids
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["sources"] = sources
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["create_time"] = None
            __props__.__dict__["last_update_time"] = None
            __props__.__dict__["owner_ext_id"] = None
            __props__.__dict__["placement_policy_statuses"] = None
            __props__.__dict__["size_bytes"] = None
        super(ImagesV2, __self__).__init__(
            'nutanix:index/imagesV2:ImagesV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            category_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            checksums: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagesV2ChecksumArgs', 'ImagesV2ChecksumArgsDict']]]]] = None,
            cluster_location_ext_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            last_update_time: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
            placement_policy_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagesV2PlacementPolicyStatusArgs', 'ImagesV2PlacementPolicyStatusArgsDict']]]]] = None,
            size_bytes: Optional[pulumi.Input[_builtins.int]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagesV2SourceArgs', 'ImagesV2SourceArgsDict']]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'ImagesV2':
        """
        Get an existing ImagesV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImagesV2State.__new__(_ImagesV2State)

        __props__.__dict__["category_ext_ids"] = category_ext_ids
        __props__.__dict__["checksums"] = checksums
        __props__.__dict__["cluster_location_ext_ids"] = cluster_location_ext_ids
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["last_update_time"] = last_update_time
        __props__.__dict__["name"] = name
        __props__.__dict__["owner_ext_id"] = owner_ext_id
        __props__.__dict__["placement_policy_statuses"] = placement_policy_statuses
        __props__.__dict__["size_bytes"] = size_bytes
        __props__.__dict__["sources"] = sources
        __props__.__dict__["type"] = type
        return ImagesV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="categoryExtIds")
    def category_ext_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "category_ext_ids")

    @_builtins.property
    @pulumi.getter
    def checksums(self) -> pulumi.Output[Optional[Sequence['outputs.ImagesV2Checksum']]]:
        return pulumi.get(self, "checksums")

    @_builtins.property
    @pulumi.getter(name="clusterLocationExtIds")
    def cluster_location_ext_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "cluster_location_ext_ids")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ownerExtId")
    def owner_ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "owner_ext_id")

    @_builtins.property
    @pulumi.getter(name="placementPolicyStatuses")
    def placement_policy_statuses(self) -> pulumi.Output[Sequence['outputs.ImagesV2PlacementPolicyStatus']]:
        return pulumi.get(self, "placement_policy_statuses")

    @_builtins.property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "size_bytes")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Optional[Sequence['outputs.ImagesV2Source']]]:
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "type")

