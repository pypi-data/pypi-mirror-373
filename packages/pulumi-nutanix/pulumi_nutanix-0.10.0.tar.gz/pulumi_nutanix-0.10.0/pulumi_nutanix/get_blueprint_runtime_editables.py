# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBlueprintRuntimeEditablesResult',
    'AwaitableGetBlueprintRuntimeEditablesResult',
    'get_blueprint_runtime_editables',
    'get_blueprint_runtime_editables_output',
]

@pulumi.output_type
class GetBlueprintRuntimeEditablesResult:
    """
    A collection of values returned by getBlueprintRuntimeEditables.
    """
    def __init__(__self__, bp_name=None, bp_uuid=None, id=None, runtime_editables=None):
        if bp_name and not isinstance(bp_name, str):
            raise TypeError("Expected argument 'bp_name' to be a str")
        pulumi.set(__self__, "bp_name", bp_name)
        if bp_uuid and not isinstance(bp_uuid, str):
            raise TypeError("Expected argument 'bp_uuid' to be a str")
        pulumi.set(__self__, "bp_uuid", bp_uuid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if runtime_editables and not isinstance(runtime_editables, list):
            raise TypeError("Expected argument 'runtime_editables' to be a list")
        pulumi.set(__self__, "runtime_editables", runtime_editables)

    @_builtins.property
    @pulumi.getter(name="bpName")
    def bp_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bp_name")

    @_builtins.property
    @pulumi.getter(name="bpUuid")
    def bp_uuid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bp_uuid")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="runtimeEditables")
    def runtime_editables(self) -> Sequence['outputs.GetBlueprintRuntimeEditablesRuntimeEditableResult']:
        return pulumi.get(self, "runtime_editables")


class AwaitableGetBlueprintRuntimeEditablesResult(GetBlueprintRuntimeEditablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBlueprintRuntimeEditablesResult(
            bp_name=self.bp_name,
            bp_uuid=self.bp_uuid,
            id=self.id,
            runtime_editables=self.runtime_editables)


def get_blueprint_runtime_editables(bp_name: Optional[_builtins.str] = None,
                                    bp_uuid: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBlueprintRuntimeEditablesResult:
    """
    Describes runtime editables that are present in a blueprint.

    ## Example Usage

    ```python
    import pulumi
    import json
    import pulumi_local as local
    import pulumi_nutanix as nutanix

    example = nutanix.get_blueprint_runtime_editables(bp_name="NAME OF BLUEPRINT")
    # dumps read value into a readable json file
    dump_runtime_value = local.File("dumpRuntimeValue",
        content=json.dumps(example.runtime_editables),
        filename="runtime_value.json")
    ```


    :param _builtins.str bp_name: - (Optional) The name of the blueprint for which runtime editables will be listed. If this is provided, it will return runtime editables for the specified blueprint.
           
           Both (`bp_uuid` and `bp_name`) are optional but atleast one of them to be provided for this data source to work.
    :param _builtins.str bp_uuid: - (Optional) The UUID of the blueprint for which runtime editables will be listed. If this is provided, it will return runtime editables for the specified blueprint.
    """
    __args__ = dict()
    __args__['bpName'] = bp_name
    __args__['bpUuid'] = bp_uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getBlueprintRuntimeEditables:getBlueprintRuntimeEditables', __args__, opts=opts, typ=GetBlueprintRuntimeEditablesResult).value

    return AwaitableGetBlueprintRuntimeEditablesResult(
        bp_name=pulumi.get(__ret__, 'bp_name'),
        bp_uuid=pulumi.get(__ret__, 'bp_uuid'),
        id=pulumi.get(__ret__, 'id'),
        runtime_editables=pulumi.get(__ret__, 'runtime_editables'))
def get_blueprint_runtime_editables_output(bp_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           bp_uuid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBlueprintRuntimeEditablesResult]:
    """
    Describes runtime editables that are present in a blueprint.

    ## Example Usage

    ```python
    import pulumi
    import json
    import pulumi_local as local
    import pulumi_nutanix as nutanix

    example = nutanix.get_blueprint_runtime_editables(bp_name="NAME OF BLUEPRINT")
    # dumps read value into a readable json file
    dump_runtime_value = local.File("dumpRuntimeValue",
        content=json.dumps(example.runtime_editables),
        filename="runtime_value.json")
    ```


    :param _builtins.str bp_name: - (Optional) The name of the blueprint for which runtime editables will be listed. If this is provided, it will return runtime editables for the specified blueprint.
           
           Both (`bp_uuid` and `bp_name`) are optional but atleast one of them to be provided for this data source to work.
    :param _builtins.str bp_uuid: - (Optional) The UUID of the blueprint for which runtime editables will be listed. If this is provided, it will return runtime editables for the specified blueprint.
    """
    __args__ = dict()
    __args__['bpName'] = bp_name
    __args__['bpUuid'] = bp_uuid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getBlueprintRuntimeEditables:getBlueprintRuntimeEditables', __args__, opts=opts, typ=GetBlueprintRuntimeEditablesResult)
    return __ret__.apply(lambda __response__: GetBlueprintRuntimeEditablesResult(
        bp_name=pulumi.get(__response__, 'bp_name'),
        bp_uuid=pulumi.get(__response__, 'bp_uuid'),
        id=pulumi.get(__response__, 'id'),
        runtime_editables=pulumi.get(__response__, 'runtime_editables')))
