# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCertificateV2Result',
    'AwaitableGetCertificateV2Result',
    'get_certificate_v2',
    'get_certificate_v2_output',
]

@pulumi.output_type
class GetCertificateV2Result:
    """
    A collection of values returned by getCertificateV2.
    """
    def __init__(__self__, alternate_fqdns=None, alternate_ips=None, ext_id=None, id=None, links=None, metadatas=None, object_store_ext_id=None, tenant_id=None):
        if alternate_fqdns and not isinstance(alternate_fqdns, list):
            raise TypeError("Expected argument 'alternate_fqdns' to be a list")
        pulumi.set(__self__, "alternate_fqdns", alternate_fqdns)
        if alternate_ips and not isinstance(alternate_ips, list):
            raise TypeError("Expected argument 'alternate_ips' to be a list")
        pulumi.set(__self__, "alternate_ips", alternate_ips)
        if ext_id and not isinstance(ext_id, str):
            raise TypeError("Expected argument 'ext_id' to be a str")
        pulumi.set(__self__, "ext_id", ext_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if object_store_ext_id and not isinstance(object_store_ext_id, str):
            raise TypeError("Expected argument 'object_store_ext_id' to be a str")
        pulumi.set(__self__, "object_store_ext_id", object_store_ext_id)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="alternateFqdns")
    def alternate_fqdns(self) -> Sequence['outputs.GetCertificateV2AlternateFqdnResult']:
        return pulumi.get(self, "alternate_fqdns")

    @_builtins.property
    @pulumi.getter(name="alternateIps")
    def alternate_ips(self) -> Sequence['outputs.GetCertificateV2AlternateIpResult']:
        return pulumi.get(self, "alternate_ips")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> _builtins.str:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetCertificateV2LinkResult']:
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetCertificateV2MetadataResult']:
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter(name="objectStoreExtId")
    def object_store_ext_id(self) -> _builtins.str:
        return pulumi.get(self, "object_store_ext_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetCertificateV2Result(GetCertificateV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificateV2Result(
            alternate_fqdns=self.alternate_fqdns,
            alternate_ips=self.alternate_ips,
            ext_id=self.ext_id,
            id=self.id,
            links=self.links,
            metadatas=self.metadatas,
            object_store_ext_id=self.object_store_ext_id,
            tenant_id=self.tenant_id)


def get_certificate_v2(ext_id: Optional[_builtins.str] = None,
                       object_store_ext_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificateV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    __args__['objectStoreExtId'] = object_store_ext_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getCertificateV2:getCertificateV2', __args__, opts=opts, typ=GetCertificateV2Result).value

    return AwaitableGetCertificateV2Result(
        alternate_fqdns=pulumi.get(__ret__, 'alternate_fqdns'),
        alternate_ips=pulumi.get(__ret__, 'alternate_ips'),
        ext_id=pulumi.get(__ret__, 'ext_id'),
        id=pulumi.get(__ret__, 'id'),
        links=pulumi.get(__ret__, 'links'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        object_store_ext_id=pulumi.get(__ret__, 'object_store_ext_id'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_certificate_v2_output(ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                              object_store_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCertificateV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    __args__['objectStoreExtId'] = object_store_ext_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getCertificateV2:getCertificateV2', __args__, opts=opts, typ=GetCertificateV2Result)
    return __ret__.apply(lambda __response__: GetCertificateV2Result(
        alternate_fqdns=pulumi.get(__response__, 'alternate_fqdns'),
        alternate_ips=pulumi.get(__response__, 'alternate_ips'),
        ext_id=pulumi.get(__response__, 'ext_id'),
        id=pulumi.get(__response__, 'id'),
        links=pulumi.get(__response__, 'links'),
        metadatas=pulumi.get(__response__, 'metadatas'),
        object_store_ext_id=pulumi.get(__response__, 'object_store_ext_id'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
