# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSelfServiceSnapshotPolicyListResult',
    'AwaitableGetSelfServiceSnapshotPolicyListResult',
    'get_self_service_snapshot_policy_list',
    'get_self_service_snapshot_policy_list_output',
]

@pulumi.output_type
class GetSelfServiceSnapshotPolicyListResult:
    """
    A collection of values returned by getSelfServiceSnapshotPolicyList.
    """
    def __init__(__self__, bp_name=None, bp_uuid=None, id=None, length=None, offset=None, policy_lists=None):
        if bp_name and not isinstance(bp_name, str):
            raise TypeError("Expected argument 'bp_name' to be a str")
        pulumi.set(__self__, "bp_name", bp_name)
        if bp_uuid and not isinstance(bp_uuid, str):
            raise TypeError("Expected argument 'bp_uuid' to be a str")
        pulumi.set(__self__, "bp_uuid", bp_uuid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if length and not isinstance(length, int):
            raise TypeError("Expected argument 'length' to be a int")
        pulumi.set(__self__, "length", length)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if policy_lists and not isinstance(policy_lists, list):
            raise TypeError("Expected argument 'policy_lists' to be a list")
        pulumi.set(__self__, "policy_lists", policy_lists)

    @_builtins.property
    @pulumi.getter(name="bpName")
    def bp_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bp_name")

    @_builtins.property
    @pulumi.getter(name="bpUuid")
    def bp_uuid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bp_uuid")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def length(self) -> _builtins.int:
        """
        - (Required) The number of snapshot policy records to return.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> _builtins.int:
        """
        - (Required) The index of the first snapshot policy to return Used for pagination. Default value: 0
        """
        return pulumi.get(self, "offset")

    @_builtins.property
    @pulumi.getter(name="policyLists")
    def policy_lists(self) -> Sequence['outputs.GetSelfServiceSnapshotPolicyListPolicyListResult']:
        return pulumi.get(self, "policy_lists")


class AwaitableGetSelfServiceSnapshotPolicyListResult(GetSelfServiceSnapshotPolicyListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSelfServiceSnapshotPolicyListResult(
            bp_name=self.bp_name,
            bp_uuid=self.bp_uuid,
            id=self.id,
            length=self.length,
            offset=self.offset,
            policy_lists=self.policy_lists)


def get_self_service_snapshot_policy_list(bp_name: Optional[_builtins.str] = None,
                                          bp_uuid: Optional[_builtins.str] = None,
                                          length: Optional[_builtins.int] = None,
                                          offset: Optional[_builtins.int] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSelfServiceSnapshotPolicyListResult:
    """
    Describes snapshot policies present in a blueprint. Environment containing snapshot policy must be added in blueprint for this data source to work.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    test = nutanix.get_self_service_snapshot_policy_list(bp_name="NAME OF BLUEPRINT",
        length=250,
        offset=0)
    ```


    :param _builtins.str bp_name: - (Optional) The UUID of the blueprint for which snapshot policies should be listed.
    :param _builtins.str bp_uuid: - (Optional) The name of the blueprint for which snapshot policies should be listed.
           
           Both (`bp_name` and `bp_uuid`) are optional but atleast one of them to be provided for this data source to work.
    :param _builtins.int length: - (Required) The number of snapshot policy records to return.
    :param _builtins.int offset: - (Required) The index of the first snapshot policy to return Used for pagination. Default value: 0
    """
    __args__ = dict()
    __args__['bpName'] = bp_name
    __args__['bpUuid'] = bp_uuid
    __args__['length'] = length
    __args__['offset'] = offset
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getSelfServiceSnapshotPolicyList:getSelfServiceSnapshotPolicyList', __args__, opts=opts, typ=GetSelfServiceSnapshotPolicyListResult).value

    return AwaitableGetSelfServiceSnapshotPolicyListResult(
        bp_name=pulumi.get(__ret__, 'bp_name'),
        bp_uuid=pulumi.get(__ret__, 'bp_uuid'),
        id=pulumi.get(__ret__, 'id'),
        length=pulumi.get(__ret__, 'length'),
        offset=pulumi.get(__ret__, 'offset'),
        policy_lists=pulumi.get(__ret__, 'policy_lists'))
def get_self_service_snapshot_policy_list_output(bp_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 bp_uuid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 length: Optional[pulumi.Input[_builtins.int]] = None,
                                                 offset: Optional[pulumi.Input[_builtins.int]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSelfServiceSnapshotPolicyListResult]:
    """
    Describes snapshot policies present in a blueprint. Environment containing snapshot policy must be added in blueprint for this data source to work.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    test = nutanix.get_self_service_snapshot_policy_list(bp_name="NAME OF BLUEPRINT",
        length=250,
        offset=0)
    ```


    :param _builtins.str bp_name: - (Optional) The UUID of the blueprint for which snapshot policies should be listed.
    :param _builtins.str bp_uuid: - (Optional) The name of the blueprint for which snapshot policies should be listed.
           
           Both (`bp_name` and `bp_uuid`) are optional but atleast one of them to be provided for this data source to work.
    :param _builtins.int length: - (Required) The number of snapshot policy records to return.
    :param _builtins.int offset: - (Required) The index of the first snapshot policy to return Used for pagination. Default value: 0
    """
    __args__ = dict()
    __args__['bpName'] = bp_name
    __args__['bpUuid'] = bp_uuid
    __args__['length'] = length
    __args__['offset'] = offset
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getSelfServiceSnapshotPolicyList:getSelfServiceSnapshotPolicyList', __args__, opts=opts, typ=GetSelfServiceSnapshotPolicyListResult)
    return __ret__.apply(lambda __response__: GetSelfServiceSnapshotPolicyListResult(
        bp_name=pulumi.get(__response__, 'bp_name'),
        bp_uuid=pulumi.get(__response__, 'bp_uuid'),
        id=pulumi.get(__response__, 'id'),
        length=pulumi.get(__response__, 'length'),
        offset=pulumi.get(__response__, 'offset'),
        policy_lists=pulumi.get(__response__, 'policy_lists')))
