# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetKarbonClustersResult',
    'AwaitableGetKarbonClustersResult',
    'get_karbon_clusters',
    'get_karbon_clusters_output',
]

@pulumi.output_type
class GetKarbonClustersResult:
    """
    A collection of values returned by getKarbonClusters.
    """
    def __init__(__self__, clusters=None, id=None):
        if clusters and not isinstance(clusters, list):
            raise TypeError("Expected argument 'clusters' to be a list")
        pulumi.set(__self__, "clusters", clusters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetKarbonClustersClusterResult']:
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetKarbonClustersResult(GetKarbonClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKarbonClustersResult(
            clusters=self.clusters,
            id=self.id)


def get_karbon_clusters(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKarbonClustersResult:
    """
    Describes Karbon Clusters

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    clusters = nutanix.get_karbon_clusters()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getKarbonClusters:getKarbonClusters', __args__, opts=opts, typ=GetKarbonClustersResult).value

    return AwaitableGetKarbonClustersResult(
        clusters=pulumi.get(__ret__, 'clusters'),
        id=pulumi.get(__ret__, 'id'))
def get_karbon_clusters_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKarbonClustersResult]:
    """
    Describes Karbon Clusters

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    clusters = nutanix.get_karbon_clusters()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getKarbonClusters:getKarbonClusters', __args__, opts=opts, typ=GetKarbonClustersResult)
    return __ret__.apply(lambda __response__: GetKarbonClustersResult(
        clusters=pulumi.get(__response__, 'clusters'),
        id=pulumi.get(__response__, 'id')))
