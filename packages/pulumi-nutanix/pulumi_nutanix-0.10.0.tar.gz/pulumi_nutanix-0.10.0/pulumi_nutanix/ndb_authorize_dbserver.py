# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NdbAuthorizeDbserverArgs', 'NdbAuthorizeDbserver']

@pulumi.input_type
class NdbAuthorizeDbserverArgs:
    def __init__(__self__, *,
                 dbservers_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 time_machine_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NdbAuthorizeDbserver resource.
        :param pulumi.Input[_builtins.str] time_machine_name: * `dbservers_id `: (Required)
        """
        if dbservers_ids is not None:
            pulumi.set(__self__, "dbservers_ids", dbservers_ids)
        if time_machine_id is not None:
            pulumi.set(__self__, "time_machine_id", time_machine_id)
        if time_machine_name is not None:
            pulumi.set(__self__, "time_machine_name", time_machine_name)

    @_builtins.property
    @pulumi.getter(name="dbserversIds")
    def dbservers_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "dbservers_ids")

    @dbservers_ids.setter
    def dbservers_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dbservers_ids", value)

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "time_machine_id")

    @time_machine_id.setter
    def time_machine_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_machine_id", value)

    @_builtins.property
    @pulumi.getter(name="timeMachineName")
    def time_machine_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        * `dbservers_id `: (Required)
        """
        return pulumi.get(self, "time_machine_name")

    @time_machine_name.setter
    def time_machine_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_machine_name", value)


@pulumi.input_type
class _NdbAuthorizeDbserverState:
    def __init__(__self__, *,
                 dbservers_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 time_machine_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering NdbAuthorizeDbserver resources.
        :param pulumi.Input[_builtins.str] time_machine_name: * `dbservers_id `: (Required)
        """
        if dbservers_ids is not None:
            pulumi.set(__self__, "dbservers_ids", dbservers_ids)
        if time_machine_id is not None:
            pulumi.set(__self__, "time_machine_id", time_machine_id)
        if time_machine_name is not None:
            pulumi.set(__self__, "time_machine_name", time_machine_name)

    @_builtins.property
    @pulumi.getter(name="dbserversIds")
    def dbservers_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "dbservers_ids")

    @dbservers_ids.setter
    def dbservers_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dbservers_ids", value)

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "time_machine_id")

    @time_machine_id.setter
    def time_machine_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_machine_id", value)

    @_builtins.property
    @pulumi.getter(name="timeMachineName")
    def time_machine_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        * `dbservers_id `: (Required)
        """
        return pulumi.get(self, "time_machine_name")

    @time_machine_name.setter
    def time_machine_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_machine_name", value)


@pulumi.type_token("nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver")
class NdbAuthorizeDbserver(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dbservers_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 time_machine_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Provides a resource to authorize db server VMs for cloning of database instance based on the input parameters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        name = nutanix.NdbAuthorizeDbserver("name",
            dbservers_ids=["{{ dbServer_IDs}}"],
            time_machine_name="test-pg-inst")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] time_machine_name: * `dbservers_id `: (Required)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NdbAuthorizeDbserverArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to authorize db server VMs for cloning of database instance based on the input parameters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        name = nutanix.NdbAuthorizeDbserver("name",
            dbservers_ids=["{{ dbServer_IDs}}"],
            time_machine_name="test-pg-inst")
        ```

        :param str resource_name: The name of the resource.
        :param NdbAuthorizeDbserverArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NdbAuthorizeDbserverArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dbservers_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 time_machine_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NdbAuthorizeDbserverArgs.__new__(NdbAuthorizeDbserverArgs)

            __props__.__dict__["dbservers_ids"] = dbservers_ids
            __props__.__dict__["time_machine_id"] = time_machine_id
            __props__.__dict__["time_machine_name"] = time_machine_name
        super(NdbAuthorizeDbserver, __self__).__init__(
            'nutanix:index/ndbAuthorizeDbserver:NdbAuthorizeDbserver',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dbservers_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
            time_machine_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'NdbAuthorizeDbserver':
        """
        Get an existing NdbAuthorizeDbserver resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] time_machine_name: * `dbservers_id `: (Required)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NdbAuthorizeDbserverState.__new__(_NdbAuthorizeDbserverState)

        __props__.__dict__["dbservers_ids"] = dbservers_ids
        __props__.__dict__["time_machine_id"] = time_machine_id
        __props__.__dict__["time_machine_name"] = time_machine_name
        return NdbAuthorizeDbserver(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dbserversIds")
    def dbservers_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "dbservers_ids")

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "time_machine_id")

    @_builtins.property
    @pulumi.getter(name="timeMachineName")
    def time_machine_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        * `dbservers_id `: (Required)
        """
        return pulumi.get(self, "time_machine_name")

