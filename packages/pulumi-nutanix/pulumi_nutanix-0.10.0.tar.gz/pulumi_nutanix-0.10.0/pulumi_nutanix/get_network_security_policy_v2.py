# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNetworkSecurityPolicyV2Result',
    'AwaitableGetNetworkSecurityPolicyV2Result',
    'get_network_security_policy_v2',
    'get_network_security_policy_v2_output',
]

@pulumi.output_type
class GetNetworkSecurityPolicyV2Result:
    """
    A collection of values returned by getNetworkSecurityPolicyV2.
    """
    def __init__(__self__, created_by=None, creation_time=None, description=None, ext_id=None, id=None, is_hitlog_enabled=None, is_ipv6_traffic_allowed=None, is_system_defined=None, last_update_time=None, links=None, name=None, rules=None, scope=None, secured_groups=None, state=None, tenant_id=None, type=None, vpc_references=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if ext_id and not isinstance(ext_id, str):
            raise TypeError("Expected argument 'ext_id' to be a str")
        pulumi.set(__self__, "ext_id", ext_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_hitlog_enabled and not isinstance(is_hitlog_enabled, bool):
            raise TypeError("Expected argument 'is_hitlog_enabled' to be a bool")
        pulumi.set(__self__, "is_hitlog_enabled", is_hitlog_enabled)
        if is_ipv6_traffic_allowed and not isinstance(is_ipv6_traffic_allowed, bool):
            raise TypeError("Expected argument 'is_ipv6_traffic_allowed' to be a bool")
        pulumi.set(__self__, "is_ipv6_traffic_allowed", is_ipv6_traffic_allowed)
        if is_system_defined and not isinstance(is_system_defined, bool):
            raise TypeError("Expected argument 'is_system_defined' to be a bool")
        pulumi.set(__self__, "is_system_defined", is_system_defined)
        if last_update_time and not isinstance(last_update_time, str):
            raise TypeError("Expected argument 'last_update_time' to be a str")
        pulumi.set(__self__, "last_update_time", last_update_time)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if secured_groups and not isinstance(secured_groups, list):
            raise TypeError("Expected argument 'secured_groups' to be a list")
        pulumi.set(__self__, "secured_groups", secured_groups)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vpc_references and not isinstance(vpc_references, list):
            raise TypeError("Expected argument 'vpc_references' to be a list")
        pulumi.set(__self__, "vpc_references", vpc_references)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        created by.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> _builtins.str:
        """
        creation time of NSP
        """
        return pulumi.get(self, "creation_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A user defined annotation for a rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> _builtins.str:
        """
        A globally unique identifier of an instance that is suitable for external consumption.
        """
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isHitlogEnabled")
    def is_hitlog_enabled(self) -> _builtins.bool:
        """
        If Hitlog is enabled.
        """
        return pulumi.get(self, "is_hitlog_enabled")

    @_builtins.property
    @pulumi.getter(name="isIpv6TrafficAllowed")
    def is_ipv6_traffic_allowed(self) -> _builtins.bool:
        """
        If Ipv6 Traffic is allowed.
        """
        return pulumi.get(self, "is_ipv6_traffic_allowed")

    @_builtins.property
    @pulumi.getter(name="isSystemDefined")
    def is_system_defined(self) -> _builtins.bool:
        """
        Is system defined NSP
        """
        return pulumi.get(self, "is_system_defined")

    @_builtins.property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> _builtins.str:
        """
        last updated time
        """
        return pulumi.get(self, "last_update_time")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetNetworkSecurityPolicyV2LinkResult']:
        """
        A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the Flow Network Security Policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetNetworkSecurityPolicyV2RuleResult']:
        """
        A list of rules that form a policy. For isolation policies, use isolation rules; for application or quarantine policies, use application rules.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        Defines the scope of the policy. Currently, only ALL_VLAN and VPC_LIST are supported. If scope is not provided, the default is set based on whether vpcReferences field is provided or not.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="securedGroups")
    def secured_groups(self) -> Sequence[_builtins.str]:
        """
        Uuids of the secured groups in the NSP.
        """
        return pulumi.get(self, "secured_groups")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Whether the policy is applied or monitored; can be omitted or set null to save the policy without applying or monitoring it.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        A globally unique identifier that represents the tenant that owns this entity
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Icmp service Type. Ignore this field if Type has to be ANY.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcReferences")
    def vpc_references(self) -> Sequence[_builtins.str]:
        """
        A list of external ids for VPCs, used only when the scope of policy is a list of VPCs.
        """
        return pulumi.get(self, "vpc_references")


class AwaitableGetNetworkSecurityPolicyV2Result(GetNetworkSecurityPolicyV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkSecurityPolicyV2Result(
            created_by=self.created_by,
            creation_time=self.creation_time,
            description=self.description,
            ext_id=self.ext_id,
            id=self.id,
            is_hitlog_enabled=self.is_hitlog_enabled,
            is_ipv6_traffic_allowed=self.is_ipv6_traffic_allowed,
            is_system_defined=self.is_system_defined,
            last_update_time=self.last_update_time,
            links=self.links,
            name=self.name,
            rules=self.rules,
            scope=self.scope,
            secured_groups=self.secured_groups,
            state=self.state,
            tenant_id=self.tenant_id,
            type=self.type,
            vpc_references=self.vpc_references)


def get_network_security_policy_v2(ext_id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkSecurityPolicyV2Result:
    """
    Get a Network Security Policy by ExtID


    :param _builtins.str ext_id: Network security policy UUID.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getNetworkSecurityPolicyV2:getNetworkSecurityPolicyV2', __args__, opts=opts, typ=GetNetworkSecurityPolicyV2Result).value

    return AwaitableGetNetworkSecurityPolicyV2Result(
        created_by=pulumi.get(__ret__, 'created_by'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        description=pulumi.get(__ret__, 'description'),
        ext_id=pulumi.get(__ret__, 'ext_id'),
        id=pulumi.get(__ret__, 'id'),
        is_hitlog_enabled=pulumi.get(__ret__, 'is_hitlog_enabled'),
        is_ipv6_traffic_allowed=pulumi.get(__ret__, 'is_ipv6_traffic_allowed'),
        is_system_defined=pulumi.get(__ret__, 'is_system_defined'),
        last_update_time=pulumi.get(__ret__, 'last_update_time'),
        links=pulumi.get(__ret__, 'links'),
        name=pulumi.get(__ret__, 'name'),
        rules=pulumi.get(__ret__, 'rules'),
        scope=pulumi.get(__ret__, 'scope'),
        secured_groups=pulumi.get(__ret__, 'secured_groups'),
        state=pulumi.get(__ret__, 'state'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'),
        vpc_references=pulumi.get(__ret__, 'vpc_references'))
def get_network_security_policy_v2_output(ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkSecurityPolicyV2Result]:
    """
    Get a Network Security Policy by ExtID


    :param _builtins.str ext_id: Network security policy UUID.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getNetworkSecurityPolicyV2:getNetworkSecurityPolicyV2', __args__, opts=opts, typ=GetNetworkSecurityPolicyV2Result)
    return __ret__.apply(lambda __response__: GetNetworkSecurityPolicyV2Result(
        created_by=pulumi.get(__response__, 'created_by'),
        creation_time=pulumi.get(__response__, 'creation_time'),
        description=pulumi.get(__response__, 'description'),
        ext_id=pulumi.get(__response__, 'ext_id'),
        id=pulumi.get(__response__, 'id'),
        is_hitlog_enabled=pulumi.get(__response__, 'is_hitlog_enabled'),
        is_ipv6_traffic_allowed=pulumi.get(__response__, 'is_ipv6_traffic_allowed'),
        is_system_defined=pulumi.get(__response__, 'is_system_defined'),
        last_update_time=pulumi.get(__response__, 'last_update_time'),
        links=pulumi.get(__response__, 'links'),
        name=pulumi.get(__response__, 'name'),
        rules=pulumi.get(__response__, 'rules'),
        scope=pulumi.get(__response__, 'scope'),
        secured_groups=pulumi.get(__response__, 'secured_groups'),
        state=pulumi.get(__response__, 'state'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        type=pulumi.get(__response__, 'type'),
        vpc_references=pulumi.get(__response__, 'vpc_references')))
