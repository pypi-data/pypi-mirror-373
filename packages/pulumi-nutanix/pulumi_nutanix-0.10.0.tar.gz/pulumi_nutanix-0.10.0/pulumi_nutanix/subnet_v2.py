# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubnetV2Args', 'SubnetV2']

@pulumi.input_type
class SubnetV2Args:
    def __init__(__self__, *,
                 subnet_type: pulumi.Input[_builtins.str],
                 bridge_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DhcpOptionArgs']]]] = None,
                 dynamic_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DynamicIpAddressArgs']]]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hypervisor_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpConfigArgs']]]] = None,
                 ip_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_usages: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpUsageArgs']]]] = None,
                 is_advanced_networking: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_external: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_nat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.int]] = None,
                 reserved_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2ReservedIpAddressArgs']]]] = None,
                 virtual_switch_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_switches: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VirtualSwitchArgs']]]] = None,
                 vpc_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VpcArgs']]]] = None):
        """
        The set of arguments for constructing a SubnetV2 resource.
        """
        pulumi.set(__self__, "subnet_type", subnet_type)
        if bridge_name is not None:
            pulumi.set(__self__, "bridge_name", bridge_name)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_reference is not None:
            pulumi.set(__self__, "cluster_reference", cluster_reference)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_options is not None:
            pulumi.set(__self__, "dhcp_options", dhcp_options)
        if dynamic_ip_addresses is not None:
            pulumi.set(__self__, "dynamic_ip_addresses", dynamic_ip_addresses)
        if ext_id is not None:
            pulumi.set(__self__, "ext_id", ext_id)
        if hypervisor_type is not None:
            pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if ip_configs is not None:
            pulumi.set(__self__, "ip_configs", ip_configs)
        if ip_prefix is not None:
            pulumi.set(__self__, "ip_prefix", ip_prefix)
        if ip_usages is not None:
            pulumi.set(__self__, "ip_usages", ip_usages)
        if is_advanced_networking is not None:
            pulumi.set(__self__, "is_advanced_networking", is_advanced_networking)
        if is_external is not None:
            pulumi.set(__self__, "is_external", is_external)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if reserved_ip_addresses is not None:
            pulumi.set(__self__, "reserved_ip_addresses", reserved_ip_addresses)
        if virtual_switch_reference is not None:
            pulumi.set(__self__, "virtual_switch_reference", virtual_switch_reference)
        if virtual_switches is not None:
            pulumi.set(__self__, "virtual_switches", virtual_switches)
        if vpc_reference is not None:
            pulumi.set(__self__, "vpc_reference", vpc_reference)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="subnetType")
    def subnet_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "subnet_type")

    @subnet_type.setter
    def subnet_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_type", value)

    @_builtins.property
    @pulumi.getter(name="bridgeName")
    def bridge_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "bridge_name")

    @bridge_name.setter
    def bridge_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bridge_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_reference")

    @cluster_reference.setter
    def cluster_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_reference", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DhcpOptionArgs']]]]:
        return pulumi.get(self, "dhcp_options")

    @dhcp_options.setter
    def dhcp_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DhcpOptionArgs']]]]):
        pulumi.set(self, "dhcp_options", value)

    @_builtins.property
    @pulumi.getter(name="dynamicIpAddresses")
    def dynamic_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DynamicIpAddressArgs']]]]:
        return pulumi.get(self, "dynamic_ip_addresses")

    @dynamic_ip_addresses.setter
    def dynamic_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DynamicIpAddressArgs']]]]):
        pulumi.set(self, "dynamic_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hypervisor_type")

    @hypervisor_type.setter
    def hypervisor_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hypervisor_type", value)

    @_builtins.property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpConfigArgs']]]]:
        return pulumi.get(self, "ip_configs")

    @ip_configs.setter
    def ip_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpConfigArgs']]]]):
        pulumi.set(self, "ip_configs", value)

    @_builtins.property
    @pulumi.getter(name="ipPrefix")
    def ip_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_prefix")

    @ip_prefix.setter
    def ip_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_prefix", value)

    @_builtins.property
    @pulumi.getter(name="ipUsages")
    def ip_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpUsageArgs']]]]:
        return pulumi.get(self, "ip_usages")

    @ip_usages.setter
    def ip_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpUsageArgs']]]]):
        pulumi.set(self, "ip_usages", value)

    @_builtins.property
    @pulumi.getter(name="isAdvancedNetworking")
    def is_advanced_networking(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_advanced_networking")

    @is_advanced_networking.setter
    def is_advanced_networking(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_advanced_networking", value)

    @_builtins.property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_external")

    @is_external.setter
    def is_external(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_external", value)

    @_builtins.property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_nat_enabled")

    @is_nat_enabled.setter
    def is_nat_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_nat_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @network_function_chain_reference.setter
    def network_function_chain_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_function_chain_reference", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="reservedIpAddresses")
    def reserved_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2ReservedIpAddressArgs']]]]:
        return pulumi.get(self, "reserved_ip_addresses")

    @reserved_ip_addresses.setter
    def reserved_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2ReservedIpAddressArgs']]]]):
        pulumi.set(self, "reserved_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="virtualSwitchReference")
    def virtual_switch_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "virtual_switch_reference")

    @virtual_switch_reference.setter
    def virtual_switch_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_switch_reference", value)

    @_builtins.property
    @pulumi.getter(name="virtualSwitches")
    def virtual_switches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VirtualSwitchArgs']]]]:
        return pulumi.get(self, "virtual_switches")

    @virtual_switches.setter
    def virtual_switches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VirtualSwitchArgs']]]]):
        pulumi.set(self, "virtual_switches", value)

    @_builtins.property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpc_reference")

    @vpc_reference.setter
    def vpc_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_reference", value)

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VpcArgs']]]]:
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VpcArgs']]]]):
        pulumi.set(self, "vpcs", value)


@pulumi.input_type
class _SubnetV2State:
    def __init__(__self__, *,
                 bridge_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DhcpOptionArgs']]]] = None,
                 dynamic_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DynamicIpAddressArgs']]]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hypervisor_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpConfigArgs']]]] = None,
                 ip_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_usages: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpUsageArgs']]]] = None,
                 is_advanced_networking: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_external: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_nat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2LinkArgs']]]] = None,
                 migration_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.int]] = None,
                 reserved_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2ReservedIpAddressArgs']]]] = None,
                 subnet_type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_switch_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_switches: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VirtualSwitchArgs']]]] = None,
                 vpc_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VpcArgs']]]] = None):
        """
        Input properties used for looking up and filtering SubnetV2 resources.
        """
        if bridge_name is not None:
            pulumi.set(__self__, "bridge_name", bridge_name)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_reference is not None:
            pulumi.set(__self__, "cluster_reference", cluster_reference)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_options is not None:
            pulumi.set(__self__, "dhcp_options", dhcp_options)
        if dynamic_ip_addresses is not None:
            pulumi.set(__self__, "dynamic_ip_addresses", dynamic_ip_addresses)
        if ext_id is not None:
            pulumi.set(__self__, "ext_id", ext_id)
        if hypervisor_type is not None:
            pulumi.set(__self__, "hypervisor_type", hypervisor_type)
        if ip_configs is not None:
            pulumi.set(__self__, "ip_configs", ip_configs)
        if ip_prefix is not None:
            pulumi.set(__self__, "ip_prefix", ip_prefix)
        if ip_usages is not None:
            pulumi.set(__self__, "ip_usages", ip_usages)
        if is_advanced_networking is not None:
            pulumi.set(__self__, "is_advanced_networking", is_advanced_networking)
        if is_external is not None:
            pulumi.set(__self__, "is_external", is_external)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if migration_state is not None:
            pulumi.set(__self__, "migration_state", migration_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_function_chain_reference is not None:
            pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if reserved_ip_addresses is not None:
            pulumi.set(__self__, "reserved_ip_addresses", reserved_ip_addresses)
        if subnet_type is not None:
            pulumi.set(__self__, "subnet_type", subnet_type)
        if virtual_switch_reference is not None:
            pulumi.set(__self__, "virtual_switch_reference", virtual_switch_reference)
        if virtual_switches is not None:
            pulumi.set(__self__, "virtual_switches", virtual_switches)
        if vpc_reference is not None:
            pulumi.set(__self__, "vpc_reference", vpc_reference)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="bridgeName")
    def bridge_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "bridge_name")

    @bridge_name.setter
    def bridge_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bridge_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_reference")

    @cluster_reference.setter
    def cluster_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_reference", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DhcpOptionArgs']]]]:
        return pulumi.get(self, "dhcp_options")

    @dhcp_options.setter
    def dhcp_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DhcpOptionArgs']]]]):
        pulumi.set(self, "dhcp_options", value)

    @_builtins.property
    @pulumi.getter(name="dynamicIpAddresses")
    def dynamic_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DynamicIpAddressArgs']]]]:
        return pulumi.get(self, "dynamic_ip_addresses")

    @dynamic_ip_addresses.setter
    def dynamic_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2DynamicIpAddressArgs']]]]):
        pulumi.set(self, "dynamic_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hypervisor_type")

    @hypervisor_type.setter
    def hypervisor_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hypervisor_type", value)

    @_builtins.property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpConfigArgs']]]]:
        return pulumi.get(self, "ip_configs")

    @ip_configs.setter
    def ip_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpConfigArgs']]]]):
        pulumi.set(self, "ip_configs", value)

    @_builtins.property
    @pulumi.getter(name="ipPrefix")
    def ip_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_prefix")

    @ip_prefix.setter
    def ip_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_prefix", value)

    @_builtins.property
    @pulumi.getter(name="ipUsages")
    def ip_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpUsageArgs']]]]:
        return pulumi.get(self, "ip_usages")

    @ip_usages.setter
    def ip_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2IpUsageArgs']]]]):
        pulumi.set(self, "ip_usages", value)

    @_builtins.property
    @pulumi.getter(name="isAdvancedNetworking")
    def is_advanced_networking(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_advanced_networking")

    @is_advanced_networking.setter
    def is_advanced_networking(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_advanced_networking", value)

    @_builtins.property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_external")

    @is_external.setter
    def is_external(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_external", value)

    @_builtins.property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_nat_enabled")

    @is_nat_enabled.setter
    def is_nat_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_nat_enabled", value)

    @_builtins.property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2LinkArgs']]]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2LinkArgs']]]]):
        pulumi.set(self, "links", value)

    @_builtins.property
    @pulumi.getter(name="migrationState")
    def migration_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "migration_state")

    @migration_state.setter
    def migration_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migration_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_function_chain_reference")

    @network_function_chain_reference.setter
    def network_function_chain_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_function_chain_reference", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="reservedIpAddresses")
    def reserved_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2ReservedIpAddressArgs']]]]:
        return pulumi.get(self, "reserved_ip_addresses")

    @reserved_ip_addresses.setter
    def reserved_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2ReservedIpAddressArgs']]]]):
        pulumi.set(self, "reserved_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="subnetType")
    def subnet_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "subnet_type")

    @subnet_type.setter
    def subnet_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_type", value)

    @_builtins.property
    @pulumi.getter(name="virtualSwitchReference")
    def virtual_switch_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "virtual_switch_reference")

    @virtual_switch_reference.setter
    def virtual_switch_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_switch_reference", value)

    @_builtins.property
    @pulumi.getter(name="virtualSwitches")
    def virtual_switches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VirtualSwitchArgs']]]]:
        return pulumi.get(self, "virtual_switches")

    @virtual_switches.setter
    def virtual_switches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VirtualSwitchArgs']]]]):
        pulumi.set(self, "virtual_switches", value)

    @_builtins.property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpc_reference")

    @vpc_reference.setter
    def vpc_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_reference", value)

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VpcArgs']]]]:
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubnetV2VpcArgs']]]]):
        pulumi.set(self, "vpcs", value)


@pulumi.type_token("nutanix:index/subnetV2:SubnetV2")
class SubnetV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bridge_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2DhcpOptionArgs', 'SubnetV2DhcpOptionArgsDict']]]]] = None,
                 dynamic_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2DynamicIpAddressArgs', 'SubnetV2DynamicIpAddressArgsDict']]]]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hypervisor_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2IpConfigArgs', 'SubnetV2IpConfigArgsDict']]]]] = None,
                 ip_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_usages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2IpUsageArgs', 'SubnetV2IpUsageArgsDict']]]]] = None,
                 is_advanced_networking: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_external: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_nat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.int]] = None,
                 reserved_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2ReservedIpAddressArgs', 'SubnetV2ReservedIpAddressArgsDict']]]]] = None,
                 subnet_type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_switch_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_switches: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2VirtualSwitchArgs', 'SubnetV2VirtualSwitchArgsDict']]]]] = None,
                 vpc_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2VpcArgs', 'SubnetV2VpcArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a SubnetV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubnetV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SubnetV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SubnetV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubnetV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bridge_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2DhcpOptionArgs', 'SubnetV2DhcpOptionArgsDict']]]]] = None,
                 dynamic_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2DynamicIpAddressArgs', 'SubnetV2DynamicIpAddressArgsDict']]]]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hypervisor_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2IpConfigArgs', 'SubnetV2IpConfigArgsDict']]]]] = None,
                 ip_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_usages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2IpUsageArgs', 'SubnetV2IpUsageArgsDict']]]]] = None,
                 is_advanced_networking: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_external: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_nat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_function_chain_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.int]] = None,
                 reserved_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2ReservedIpAddressArgs', 'SubnetV2ReservedIpAddressArgsDict']]]]] = None,
                 subnet_type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_switch_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_switches: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2VirtualSwitchArgs', 'SubnetV2VirtualSwitchArgsDict']]]]] = None,
                 vpc_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2VpcArgs', 'SubnetV2VpcArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubnetV2Args.__new__(SubnetV2Args)

            __props__.__dict__["bridge_name"] = bridge_name
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["cluster_reference"] = cluster_reference
            __props__.__dict__["description"] = description
            __props__.__dict__["dhcp_options"] = dhcp_options
            __props__.__dict__["dynamic_ip_addresses"] = dynamic_ip_addresses
            __props__.__dict__["ext_id"] = ext_id
            __props__.__dict__["hypervisor_type"] = hypervisor_type
            __props__.__dict__["ip_configs"] = ip_configs
            __props__.__dict__["ip_prefix"] = ip_prefix
            __props__.__dict__["ip_usages"] = ip_usages
            __props__.__dict__["is_advanced_networking"] = is_advanced_networking
            __props__.__dict__["is_external"] = is_external
            __props__.__dict__["is_nat_enabled"] = is_nat_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["network_function_chain_reference"] = network_function_chain_reference
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["reserved_ip_addresses"] = reserved_ip_addresses
            if subnet_type is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_type'")
            __props__.__dict__["subnet_type"] = subnet_type
            __props__.__dict__["virtual_switch_reference"] = virtual_switch_reference
            __props__.__dict__["virtual_switches"] = virtual_switches
            __props__.__dict__["vpc_reference"] = vpc_reference
            __props__.__dict__["vpcs"] = vpcs
            __props__.__dict__["links"] = None
            __props__.__dict__["migration_state"] = None
        super(SubnetV2, __self__).__init__(
            'nutanix:index/subnetV2:SubnetV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bridge_name: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2DhcpOptionArgs', 'SubnetV2DhcpOptionArgsDict']]]]] = None,
            dynamic_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2DynamicIpAddressArgs', 'SubnetV2DynamicIpAddressArgsDict']]]]] = None,
            ext_id: Optional[pulumi.Input[_builtins.str]] = None,
            hypervisor_type: Optional[pulumi.Input[_builtins.str]] = None,
            ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2IpConfigArgs', 'SubnetV2IpConfigArgsDict']]]]] = None,
            ip_prefix: Optional[pulumi.Input[_builtins.str]] = None,
            ip_usages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2IpUsageArgs', 'SubnetV2IpUsageArgsDict']]]]] = None,
            is_advanced_networking: Optional[pulumi.Input[_builtins.bool]] = None,
            is_external: Optional[pulumi.Input[_builtins.bool]] = None,
            is_nat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2LinkArgs', 'SubnetV2LinkArgsDict']]]]] = None,
            migration_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_function_chain_reference: Optional[pulumi.Input[_builtins.str]] = None,
            network_id: Optional[pulumi.Input[_builtins.int]] = None,
            reserved_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2ReservedIpAddressArgs', 'SubnetV2ReservedIpAddressArgsDict']]]]] = None,
            subnet_type: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_switch_reference: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_switches: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2VirtualSwitchArgs', 'SubnetV2VirtualSwitchArgsDict']]]]] = None,
            vpc_reference: Optional[pulumi.Input[_builtins.str]] = None,
            vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SubnetV2VpcArgs', 'SubnetV2VpcArgsDict']]]]] = None) -> 'SubnetV2':
        """
        Get an existing SubnetV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubnetV2State.__new__(_SubnetV2State)

        __props__.__dict__["bridge_name"] = bridge_name
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_reference"] = cluster_reference
        __props__.__dict__["description"] = description
        __props__.__dict__["dhcp_options"] = dhcp_options
        __props__.__dict__["dynamic_ip_addresses"] = dynamic_ip_addresses
        __props__.__dict__["ext_id"] = ext_id
        __props__.__dict__["hypervisor_type"] = hypervisor_type
        __props__.__dict__["ip_configs"] = ip_configs
        __props__.__dict__["ip_prefix"] = ip_prefix
        __props__.__dict__["ip_usages"] = ip_usages
        __props__.__dict__["is_advanced_networking"] = is_advanced_networking
        __props__.__dict__["is_external"] = is_external
        __props__.__dict__["is_nat_enabled"] = is_nat_enabled
        __props__.__dict__["links"] = links
        __props__.__dict__["migration_state"] = migration_state
        __props__.__dict__["name"] = name
        __props__.__dict__["network_function_chain_reference"] = network_function_chain_reference
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["reserved_ip_addresses"] = reserved_ip_addresses
        __props__.__dict__["subnet_type"] = subnet_type
        __props__.__dict__["virtual_switch_reference"] = virtual_switch_reference
        __props__.__dict__["virtual_switches"] = virtual_switches
        __props__.__dict__["vpc_reference"] = vpc_reference
        __props__.__dict__["vpcs"] = vpcs
        return SubnetV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bridgeName")
    def bridge_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "bridge_name")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_reference")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> pulumi.Output[Sequence['outputs.SubnetV2DhcpOption']]:
        return pulumi.get(self, "dhcp_options")

    @_builtins.property
    @pulumi.getter(name="dynamicIpAddresses")
    def dynamic_ip_addresses(self) -> pulumi.Output[Sequence['outputs.SubnetV2DynamicIpAddress']]:
        return pulumi.get(self, "dynamic_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="hypervisorType")
    def hypervisor_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hypervisor_type")

    @_builtins.property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> pulumi.Output[Sequence['outputs.SubnetV2IpConfig']]:
        return pulumi.get(self, "ip_configs")

    @_builtins.property
    @pulumi.getter(name="ipPrefix")
    def ip_prefix(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ip_prefix")

    @_builtins.property
    @pulumi.getter(name="ipUsages")
    def ip_usages(self) -> pulumi.Output[Sequence['outputs.SubnetV2IpUsage']]:
        return pulumi.get(self, "ip_usages")

    @_builtins.property
    @pulumi.getter(name="isAdvancedNetworking")
    def is_advanced_networking(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_advanced_networking")

    @_builtins.property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_external")

    @_builtins.property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_nat_enabled")

    @_builtins.property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.SubnetV2Link']]:
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter(name="migrationState")
    def migration_state(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "migration_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "network_function_chain_reference")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="reservedIpAddresses")
    def reserved_ip_addresses(self) -> pulumi.Output[Sequence['outputs.SubnetV2ReservedIpAddress']]:
        return pulumi.get(self, "reserved_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="subnetType")
    def subnet_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "subnet_type")

    @_builtins.property
    @pulumi.getter(name="virtualSwitchReference")
    def virtual_switch_reference(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "virtual_switch_reference")

    @_builtins.property
    @pulumi.getter(name="virtualSwitches")
    def virtual_switches(self) -> pulumi.Output[Sequence['outputs.SubnetV2VirtualSwitch']]:
        return pulumi.get(self, "virtual_switches")

    @_builtins.property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vpc_reference")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> pulumi.Output[Sequence['outputs.SubnetV2Vpc']]:
        return pulumi.get(self, "vpcs")

