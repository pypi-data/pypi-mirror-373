# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetRestorablePcsV2Result',
    'AwaitableGetRestorablePcsV2Result',
    'get_restorable_pcs_v2',
    'get_restorable_pcs_v2_output',
]

@pulumi.output_type
class GetRestorablePcsV2Result:
    """
    A collection of values returned by getRestorablePcsV2.
    """
    def __init__(__self__, filter=None, id=None, limit=None, page=None, restorable_pcs=None, restore_source_ext_id=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, str):
            raise TypeError("Expected argument 'limit' to be a str")
        pulumi.set(__self__, "limit", limit)
        if page and not isinstance(page, str):
            raise TypeError("Expected argument 'page' to be a str")
        pulumi.set(__self__, "page", page)
        if restorable_pcs and not isinstance(restorable_pcs, list):
            raise TypeError("Expected argument 'restorable_pcs' to be a list")
        pulumi.set(__self__, "restorable_pcs", restorable_pcs)
        if restore_source_ext_id and not isinstance(restore_source_ext_id, str):
            raise TypeError("Expected argument 'restore_source_ext_id' to be a str")
        pulumi.set(__self__, "restore_source_ext_id", restore_source_ext_id)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def page(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "page")

    @_builtins.property
    @pulumi.getter(name="restorablePcs")
    def restorable_pcs(self) -> Sequence['outputs.GetRestorablePcsV2RestorablePcResult']:
        return pulumi.get(self, "restorable_pcs")

    @_builtins.property
    @pulumi.getter(name="restoreSourceExtId")
    def restore_source_ext_id(self) -> _builtins.str:
        return pulumi.get(self, "restore_source_ext_id")


class AwaitableGetRestorablePcsV2Result(GetRestorablePcsV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRestorablePcsV2Result(
            filter=self.filter,
            id=self.id,
            limit=self.limit,
            page=self.page,
            restorable_pcs=self.restorable_pcs,
            restore_source_ext_id=self.restore_source_ext_id)


def get_restorable_pcs_v2(filter: Optional[_builtins.str] = None,
                          limit: Optional[_builtins.str] = None,
                          page: Optional[_builtins.str] = None,
                          restore_source_ext_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRestorablePcsV2Result:
    """
    Lists all the PCs (domain managers) backed up at the object store/cluster.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['page'] = page
    __args__['restoreSourceExtId'] = restore_source_ext_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getRestorablePcsV2:getRestorablePcsV2', __args__, opts=opts, typ=GetRestorablePcsV2Result).value

    return AwaitableGetRestorablePcsV2Result(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        page=pulumi.get(__ret__, 'page'),
        restorable_pcs=pulumi.get(__ret__, 'restorable_pcs'),
        restore_source_ext_id=pulumi.get(__ret__, 'restore_source_ext_id'))
def get_restorable_pcs_v2_output(filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 limit: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 page: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 restore_source_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRestorablePcsV2Result]:
    """
    Lists all the PCs (domain managers) backed up at the object store/cluster.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['page'] = page
    __args__['restoreSourceExtId'] = restore_source_ext_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getRestorablePcsV2:getRestorablePcsV2', __args__, opts=opts, typ=GetRestorablePcsV2Result)
    return __ret__.apply(lambda __response__: GetRestorablePcsV2Result(
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        limit=pulumi.get(__response__, 'limit'),
        page=pulumi.get(__response__, 'page'),
        restorable_pcs=pulumi.get(__response__, 'restorable_pcs'),
        restore_source_ext_id=pulumi.get(__response__, 'restore_source_ext_id')))
