# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SamlIdentityProvidersV2Args', 'SamlIdentityProvidersV2']

@pulumi.input_type
class SamlIdentityProvidersV2Args:
    def __init__(__self__, *,
                 custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 email_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 groups_delim: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadata_url: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadata_xml: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['SamlIdentityProvidersV2IdpMetadataArgs']]]] = None,
                 is_signed_authn_req_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 username_attribute: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SamlIdentityProvidersV2 resource.
        """
        if custom_attributes is not None:
            pulumi.set(__self__, "custom_attributes", custom_attributes)
        if email_attribute is not None:
            pulumi.set(__self__, "email_attribute", email_attribute)
        if entity_issuer is not None:
            pulumi.set(__self__, "entity_issuer", entity_issuer)
        if ext_id is not None:
            pulumi.set(__self__, "ext_id", ext_id)
        if groups_attribute is not None:
            pulumi.set(__self__, "groups_attribute", groups_attribute)
        if groups_delim is not None:
            pulumi.set(__self__, "groups_delim", groups_delim)
        if idp_metadata_url is not None:
            pulumi.set(__self__, "idp_metadata_url", idp_metadata_url)
        if idp_metadata_xml is not None:
            pulumi.set(__self__, "idp_metadata_xml", idp_metadata_xml)
        if idp_metadatas is not None:
            pulumi.set(__self__, "idp_metadatas", idp_metadatas)
        if is_signed_authn_req_enabled is not None:
            pulumi.set(__self__, "is_signed_authn_req_enabled", is_signed_authn_req_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if username_attribute is not None:
            pulumi.set(__self__, "username_attribute", username_attribute)

    @_builtins.property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_attributes")

    @custom_attributes.setter
    def custom_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_attributes", value)

    @_builtins.property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "email_attribute")

    @email_attribute.setter
    def email_attribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email_attribute", value)

    @_builtins.property
    @pulumi.getter(name="entityIssuer")
    def entity_issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "entity_issuer")

    @entity_issuer.setter
    def entity_issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_issuer", value)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "groups_attribute")

    @groups_attribute.setter
    def groups_attribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "groups_attribute", value)

    @_builtins.property
    @pulumi.getter(name="groupsDelim")
    def groups_delim(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "groups_delim")

    @groups_delim.setter
    def groups_delim(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "groups_delim", value)

    @_builtins.property
    @pulumi.getter(name="idpMetadataUrl")
    def idp_metadata_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "idp_metadata_url")

    @idp_metadata_url.setter
    def idp_metadata_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "idp_metadata_url", value)

    @_builtins.property
    @pulumi.getter(name="idpMetadataXml")
    def idp_metadata_xml(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "idp_metadata_xml")

    @idp_metadata_xml.setter
    def idp_metadata_xml(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "idp_metadata_xml", value)

    @_builtins.property
    @pulumi.getter(name="idpMetadatas")
    def idp_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SamlIdentityProvidersV2IdpMetadataArgs']]]]:
        return pulumi.get(self, "idp_metadatas")

    @idp_metadatas.setter
    def idp_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SamlIdentityProvidersV2IdpMetadataArgs']]]]):
        pulumi.set(self, "idp_metadatas", value)

    @_builtins.property
    @pulumi.getter(name="isSignedAuthnReqEnabled")
    def is_signed_authn_req_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_signed_authn_req_enabled")

    @is_signed_authn_req_enabled.setter
    def is_signed_authn_req_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_signed_authn_req_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="usernameAttribute")
    def username_attribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "username_attribute")

    @username_attribute.setter
    def username_attribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username_attribute", value)


@pulumi.input_type
class _SamlIdentityProvidersV2State:
    def __init__(__self__, *,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 email_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 groups_delim: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadata_url: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadata_xml: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['SamlIdentityProvidersV2IdpMetadataArgs']]]] = None,
                 is_signed_authn_req_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_updated_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 username_attribute: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SamlIdentityProvidersV2 resources.
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if custom_attributes is not None:
            pulumi.set(__self__, "custom_attributes", custom_attributes)
        if email_attribute is not None:
            pulumi.set(__self__, "email_attribute", email_attribute)
        if entity_issuer is not None:
            pulumi.set(__self__, "entity_issuer", entity_issuer)
        if ext_id is not None:
            pulumi.set(__self__, "ext_id", ext_id)
        if groups_attribute is not None:
            pulumi.set(__self__, "groups_attribute", groups_attribute)
        if groups_delim is not None:
            pulumi.set(__self__, "groups_delim", groups_delim)
        if idp_metadata_url is not None:
            pulumi.set(__self__, "idp_metadata_url", idp_metadata_url)
        if idp_metadata_xml is not None:
            pulumi.set(__self__, "idp_metadata_xml", idp_metadata_xml)
        if idp_metadatas is not None:
            pulumi.set(__self__, "idp_metadatas", idp_metadatas)
        if is_signed_authn_req_enabled is not None:
            pulumi.set(__self__, "is_signed_authn_req_enabled", is_signed_authn_req_enabled)
        if last_updated_time is not None:
            pulumi.set(__self__, "last_updated_time", last_updated_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if username_attribute is not None:
            pulumi.set(__self__, "username_attribute", username_attribute)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_attributes")

    @custom_attributes.setter
    def custom_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_attributes", value)

    @_builtins.property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "email_attribute")

    @email_attribute.setter
    def email_attribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email_attribute", value)

    @_builtins.property
    @pulumi.getter(name="entityIssuer")
    def entity_issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "entity_issuer")

    @entity_issuer.setter
    def entity_issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_issuer", value)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "groups_attribute")

    @groups_attribute.setter
    def groups_attribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "groups_attribute", value)

    @_builtins.property
    @pulumi.getter(name="groupsDelim")
    def groups_delim(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "groups_delim")

    @groups_delim.setter
    def groups_delim(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "groups_delim", value)

    @_builtins.property
    @pulumi.getter(name="idpMetadataUrl")
    def idp_metadata_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "idp_metadata_url")

    @idp_metadata_url.setter
    def idp_metadata_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "idp_metadata_url", value)

    @_builtins.property
    @pulumi.getter(name="idpMetadataXml")
    def idp_metadata_xml(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "idp_metadata_xml")

    @idp_metadata_xml.setter
    def idp_metadata_xml(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "idp_metadata_xml", value)

    @_builtins.property
    @pulumi.getter(name="idpMetadatas")
    def idp_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SamlIdentityProvidersV2IdpMetadataArgs']]]]:
        return pulumi.get(self, "idp_metadatas")

    @idp_metadatas.setter
    def idp_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SamlIdentityProvidersV2IdpMetadataArgs']]]]):
        pulumi.set(self, "idp_metadatas", value)

    @_builtins.property
    @pulumi.getter(name="isSignedAuthnReqEnabled")
    def is_signed_authn_req_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_signed_authn_req_enabled")

    @is_signed_authn_req_enabled.setter
    def is_signed_authn_req_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_signed_authn_req_enabled", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "last_updated_time")

    @last_updated_time.setter
    def last_updated_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="usernameAttribute")
    def username_attribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "username_attribute")

    @username_attribute.setter
    def username_attribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username_attribute", value)


@pulumi.type_token("nutanix:index/samlIdentityProvidersV2:SamlIdentityProvidersV2")
class SamlIdentityProvidersV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 email_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 groups_delim: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadata_url: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadata_xml: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SamlIdentityProvidersV2IdpMetadataArgs', 'SamlIdentityProvidersV2IdpMetadataArgsDict']]]]] = None,
                 is_signed_authn_req_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 username_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SamlIdentityProvidersV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SamlIdentityProvidersV2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SamlIdentityProvidersV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SamlIdentityProvidersV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SamlIdentityProvidersV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 email_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 groups_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 groups_delim: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadata_url: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadata_xml: Optional[pulumi.Input[_builtins.str]] = None,
                 idp_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SamlIdentityProvidersV2IdpMetadataArgs', 'SamlIdentityProvidersV2IdpMetadataArgsDict']]]]] = None,
                 is_signed_authn_req_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 username_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SamlIdentityProvidersV2Args.__new__(SamlIdentityProvidersV2Args)

            __props__.__dict__["custom_attributes"] = custom_attributes
            __props__.__dict__["email_attribute"] = email_attribute
            __props__.__dict__["entity_issuer"] = entity_issuer
            __props__.__dict__["ext_id"] = ext_id
            __props__.__dict__["groups_attribute"] = groups_attribute
            __props__.__dict__["groups_delim"] = groups_delim
            __props__.__dict__["idp_metadata_url"] = idp_metadata_url
            __props__.__dict__["idp_metadata_xml"] = idp_metadata_xml
            __props__.__dict__["idp_metadatas"] = idp_metadatas
            __props__.__dict__["is_signed_authn_req_enabled"] = is_signed_authn_req_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["username_attribute"] = username_attribute
            __props__.__dict__["created_by"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["last_updated_time"] = None
        super(SamlIdentityProvidersV2, __self__).__init__(
            'nutanix:index/samlIdentityProvidersV2:SamlIdentityProvidersV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            email_attribute: Optional[pulumi.Input[_builtins.str]] = None,
            entity_issuer: Optional[pulumi.Input[_builtins.str]] = None,
            ext_id: Optional[pulumi.Input[_builtins.str]] = None,
            groups_attribute: Optional[pulumi.Input[_builtins.str]] = None,
            groups_delim: Optional[pulumi.Input[_builtins.str]] = None,
            idp_metadata_url: Optional[pulumi.Input[_builtins.str]] = None,
            idp_metadata_xml: Optional[pulumi.Input[_builtins.str]] = None,
            idp_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SamlIdentityProvidersV2IdpMetadataArgs', 'SamlIdentityProvidersV2IdpMetadataArgsDict']]]]] = None,
            is_signed_authn_req_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            last_updated_time: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            username_attribute: Optional[pulumi.Input[_builtins.str]] = None) -> 'SamlIdentityProvidersV2':
        """
        Get an existing SamlIdentityProvidersV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SamlIdentityProvidersV2State.__new__(_SamlIdentityProvidersV2State)

        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["custom_attributes"] = custom_attributes
        __props__.__dict__["email_attribute"] = email_attribute
        __props__.__dict__["entity_issuer"] = entity_issuer
        __props__.__dict__["ext_id"] = ext_id
        __props__.__dict__["groups_attribute"] = groups_attribute
        __props__.__dict__["groups_delim"] = groups_delim
        __props__.__dict__["idp_metadata_url"] = idp_metadata_url
        __props__.__dict__["idp_metadata_xml"] = idp_metadata_xml
        __props__.__dict__["idp_metadatas"] = idp_metadatas
        __props__.__dict__["is_signed_authn_req_enabled"] = is_signed_authn_req_enabled
        __props__.__dict__["last_updated_time"] = last_updated_time
        __props__.__dict__["name"] = name
        __props__.__dict__["username_attribute"] = username_attribute
        return SamlIdentityProvidersV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "custom_attributes")

    @_builtins.property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "email_attribute")

    @_builtins.property
    @pulumi.getter(name="entityIssuer")
    def entity_issuer(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "entity_issuer")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "groups_attribute")

    @_builtins.property
    @pulumi.getter(name="groupsDelim")
    def groups_delim(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "groups_delim")

    @_builtins.property
    @pulumi.getter(name="idpMetadataUrl")
    def idp_metadata_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "idp_metadata_url")

    @_builtins.property
    @pulumi.getter(name="idpMetadataXml")
    def idp_metadata_xml(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "idp_metadata_xml")

    @_builtins.property
    @pulumi.getter(name="idpMetadatas")
    def idp_metadatas(self) -> pulumi.Output[Sequence['outputs.SamlIdentityProvidersV2IdpMetadata']]:
        return pulumi.get(self, "idp_metadatas")

    @_builtins.property
    @pulumi.getter(name="isSignedAuthnReqEnabled")
    def is_signed_authn_req_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "is_signed_authn_req_enabled")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "last_updated_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="usernameAttribute")
    def username_attribute(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "username_attribute")

