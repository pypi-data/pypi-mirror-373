# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCertificatesV2Result',
    'AwaitableGetCertificatesV2Result',
    'get_certificates_v2',
    'get_certificates_v2_output',
]

@pulumi.output_type
class GetCertificatesV2Result:
    """
    A collection of values returned by getCertificatesV2.
    """
    def __init__(__self__, certificates=None, filter=None, id=None, limit=None, object_store_ext_id=None, page=None, select=None):
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if object_store_ext_id and not isinstance(object_store_ext_id, str):
            raise TypeError("Expected argument 'object_store_ext_id' to be a str")
        pulumi.set(__self__, "object_store_ext_id", object_store_ext_id)
        if page and not isinstance(page, int):
            raise TypeError("Expected argument 'page' to be a int")
        pulumi.set(__self__, "page", page)
        if select and not isinstance(select, str):
            raise TypeError("Expected argument 'select' to be a str")
        pulumi.set(__self__, "select", select)

    @_builtins.property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetCertificatesV2CertificateResult']:
        return pulumi.get(self, "certificates")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter(name="objectStoreExtId")
    def object_store_ext_id(self) -> _builtins.str:
        return pulumi.get(self, "object_store_ext_id")

    @_builtins.property
    @pulumi.getter
    def page(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "page")

    @_builtins.property
    @pulumi.getter
    def select(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "select")


class AwaitableGetCertificatesV2Result(GetCertificatesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificatesV2Result(
            certificates=self.certificates,
            filter=self.filter,
            id=self.id,
            limit=self.limit,
            object_store_ext_id=self.object_store_ext_id,
            page=self.page,
            select=self.select)


def get_certificates_v2(filter: Optional[_builtins.str] = None,
                        limit: Optional[_builtins.int] = None,
                        object_store_ext_id: Optional[_builtins.str] = None,
                        page: Optional[_builtins.int] = None,
                        select: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificatesV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['objectStoreExtId'] = object_store_ext_id
    __args__['page'] = page
    __args__['select'] = select
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getCertificatesV2:getCertificatesV2', __args__, opts=opts, typ=GetCertificatesV2Result).value

    return AwaitableGetCertificatesV2Result(
        certificates=pulumi.get(__ret__, 'certificates'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        object_store_ext_id=pulumi.get(__ret__, 'object_store_ext_id'),
        page=pulumi.get(__ret__, 'page'),
        select=pulumi.get(__ret__, 'select'))
def get_certificates_v2_output(filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               limit: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                               object_store_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                               page: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                               select: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCertificatesV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['objectStoreExtId'] = object_store_ext_id
    __args__['page'] = page
    __args__['select'] = select
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getCertificatesV2:getCertificatesV2', __args__, opts=opts, typ=GetCertificatesV2Result)
    return __ret__.apply(lambda __response__: GetCertificatesV2Result(
        certificates=pulumi.get(__response__, 'certificates'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        limit=pulumi.get(__response__, 'limit'),
        object_store_ext_id=pulumi.get(__response__, 'object_store_ext_id'),
        page=pulumi.get(__response__, 'page'),
        select=pulumi.get(__response__, 'select')))
