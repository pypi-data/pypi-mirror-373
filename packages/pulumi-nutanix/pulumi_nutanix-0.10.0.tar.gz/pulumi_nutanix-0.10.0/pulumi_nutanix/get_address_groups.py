# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAddressGroupsResult',
    'AwaitableGetAddressGroupsResult',
    'get_address_groups',
    'get_address_groups_output',
]

@pulumi.output_type
class GetAddressGroupsResult:
    """
    A collection of values returned by getAddressGroups.
    """
    def __init__(__self__, entities=None, id=None, metadatas=None):
        if entities and not isinstance(entities, list):
            raise TypeError("Expected argument 'entities' to be a list")
        pulumi.set(__self__, "entities", entities)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)

    @_builtins.property
    @pulumi.getter
    def entities(self) -> Sequence['outputs.GetAddressGroupsEntityResult']:
        """
        - (ReadOnly) List of address groups
        """
        return pulumi.get(self, "entities")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetAddressGroupsMetadataResult']:
        """
        - (Optional) Use metadata to specify filters
        """
        return pulumi.get(self, "metadatas")


class AwaitableGetAddressGroupsResult(GetAddressGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAddressGroupsResult(
            entities=self.entities,
            id=self.id,
            metadatas=self.metadatas)


def get_address_groups(metadatas: Optional[Sequence[Union['GetAddressGroupsMetadataArgs', 'GetAddressGroupsMetadataArgsDict']]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAddressGroupsResult:
    """
    Provides a datasource to retrieve list of address groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    addr_groups = nutanix.get_address_groups()
    ```


    :param Sequence[Union['GetAddressGroupsMetadataArgs', 'GetAddressGroupsMetadataArgsDict']] metadatas: - (Optional) Use metadata to specify filters
    """
    __args__ = dict()
    __args__['metadatas'] = metadatas
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getAddressGroups:getAddressGroups', __args__, opts=opts, typ=GetAddressGroupsResult).value

    return AwaitableGetAddressGroupsResult(
        entities=pulumi.get(__ret__, 'entities'),
        id=pulumi.get(__ret__, 'id'),
        metadatas=pulumi.get(__ret__, 'metadatas'))
def get_address_groups_output(metadatas: Optional[pulumi.Input[Optional[Sequence[Union['GetAddressGroupsMetadataArgs', 'GetAddressGroupsMetadataArgsDict']]]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAddressGroupsResult]:
    """
    Provides a datasource to retrieve list of address groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    addr_groups = nutanix.get_address_groups()
    ```


    :param Sequence[Union['GetAddressGroupsMetadataArgs', 'GetAddressGroupsMetadataArgsDict']] metadatas: - (Optional) Use metadata to specify filters
    """
    __args__ = dict()
    __args__['metadatas'] = metadatas
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getAddressGroups:getAddressGroups', __args__, opts=opts, typ=GetAddressGroupsResult)
    return __ret__.apply(lambda __response__: GetAddressGroupsResult(
        entities=pulumi.get(__response__, 'entities'),
        id=pulumi.get(__response__, 'id'),
        metadatas=pulumi.get(__response__, 'metadatas')))
