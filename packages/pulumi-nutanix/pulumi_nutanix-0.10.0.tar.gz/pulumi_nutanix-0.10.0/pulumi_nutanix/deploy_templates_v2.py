# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeployTemplatesV2Args', 'DeployTemplatesV2']

@pulumi.input_type
class DeployTemplatesV2Args:
    def __init__(__self__, *,
                 cluster_reference: pulumi.Input[_builtins.str],
                 ext_id: pulumi.Input[_builtins.str],
                 number_of_vms: pulumi.Input[_builtins.int],
                 override_vm_config_maps: Optional[pulumi.Input[Sequence[pulumi.Input['DeployTemplatesV2OverrideVmConfigMapArgs']]]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DeployTemplatesV2 resource.
        """
        pulumi.set(__self__, "cluster_reference", cluster_reference)
        pulumi.set(__self__, "ext_id", ext_id)
        pulumi.set(__self__, "number_of_vms", number_of_vms)
        if override_vm_config_maps is not None:
            pulumi.set(__self__, "override_vm_config_maps", override_vm_config_maps)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @_builtins.property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "cluster_reference")

    @cluster_reference.setter
    def cluster_reference(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_reference", value)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="numberOfVms")
    def number_of_vms(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "number_of_vms")

    @number_of_vms.setter
    def number_of_vms(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "number_of_vms", value)

    @_builtins.property
    @pulumi.getter(name="overrideVmConfigMaps")
    def override_vm_config_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployTemplatesV2OverrideVmConfigMapArgs']]]]:
        return pulumi.get(self, "override_vm_config_maps")

    @override_vm_config_maps.setter
    def override_vm_config_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployTemplatesV2OverrideVmConfigMapArgs']]]]):
        pulumi.set(self, "override_vm_config_maps", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)


@pulumi.input_type
class _DeployTemplatesV2State:
    def __init__(__self__, *,
                 cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 number_of_vms: Optional[pulumi.Input[_builtins.int]] = None,
                 override_vm_config_maps: Optional[pulumi.Input[Sequence[pulumi.Input['DeployTemplatesV2OverrideVmConfigMapArgs']]]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeployTemplatesV2 resources.
        """
        if cluster_reference is not None:
            pulumi.set(__self__, "cluster_reference", cluster_reference)
        if ext_id is not None:
            pulumi.set(__self__, "ext_id", ext_id)
        if number_of_vms is not None:
            pulumi.set(__self__, "number_of_vms", number_of_vms)
        if override_vm_config_maps is not None:
            pulumi.set(__self__, "override_vm_config_maps", override_vm_config_maps)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @_builtins.property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_reference")

    @cluster_reference.setter
    def cluster_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_reference", value)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="numberOfVms")
    def number_of_vms(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "number_of_vms")

    @number_of_vms.setter
    def number_of_vms(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "number_of_vms", value)

    @_builtins.property
    @pulumi.getter(name="overrideVmConfigMaps")
    def override_vm_config_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployTemplatesV2OverrideVmConfigMapArgs']]]]:
        return pulumi.get(self, "override_vm_config_maps")

    @override_vm_config_maps.setter
    def override_vm_config_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployTemplatesV2OverrideVmConfigMapArgs']]]]):
        pulumi.set(self, "override_vm_config_maps", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)


@pulumi.type_token("nutanix:index/deployTemplatesV2:DeployTemplatesV2")
class DeployTemplatesV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 number_of_vms: Optional[pulumi.Input[_builtins.int]] = None,
                 override_vm_config_maps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployTemplatesV2OverrideVmConfigMapArgs', 'DeployTemplatesV2OverrideVmConfigMapArgsDict']]]]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DeployTemplatesV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployTemplatesV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DeployTemplatesV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DeployTemplatesV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployTemplatesV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 number_of_vms: Optional[pulumi.Input[_builtins.int]] = None,
                 override_vm_config_maps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployTemplatesV2OverrideVmConfigMapArgs', 'DeployTemplatesV2OverrideVmConfigMapArgsDict']]]]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployTemplatesV2Args.__new__(DeployTemplatesV2Args)

            if cluster_reference is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_reference'")
            __props__.__dict__["cluster_reference"] = cluster_reference
            if ext_id is None and not opts.urn:
                raise TypeError("Missing required property 'ext_id'")
            __props__.__dict__["ext_id"] = ext_id
            if number_of_vms is None and not opts.urn:
                raise TypeError("Missing required property 'number_of_vms'")
            __props__.__dict__["number_of_vms"] = number_of_vms
            __props__.__dict__["override_vm_config_maps"] = override_vm_config_maps
            __props__.__dict__["version_id"] = version_id
        super(DeployTemplatesV2, __self__).__init__(
            'nutanix:index/deployTemplatesV2:DeployTemplatesV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_reference: Optional[pulumi.Input[_builtins.str]] = None,
            ext_id: Optional[pulumi.Input[_builtins.str]] = None,
            number_of_vms: Optional[pulumi.Input[_builtins.int]] = None,
            override_vm_config_maps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployTemplatesV2OverrideVmConfigMapArgs', 'DeployTemplatesV2OverrideVmConfigMapArgsDict']]]]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeployTemplatesV2':
        """
        Get an existing DeployTemplatesV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployTemplatesV2State.__new__(_DeployTemplatesV2State)

        __props__.__dict__["cluster_reference"] = cluster_reference
        __props__.__dict__["ext_id"] = ext_id
        __props__.__dict__["number_of_vms"] = number_of_vms
        __props__.__dict__["override_vm_config_maps"] = override_vm_config_maps
        __props__.__dict__["version_id"] = version_id
        return DeployTemplatesV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_reference")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="numberOfVms")
    def number_of_vms(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "number_of_vms")

    @_builtins.property
    @pulumi.getter(name="overrideVmConfigMaps")
    def override_vm_config_maps(self) -> pulumi.Output[Optional[Sequence['outputs.DeployTemplatesV2OverrideVmConfigMap']]]:
        return pulumi.get(self, "override_vm_config_maps")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "version_id")

