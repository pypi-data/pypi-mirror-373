# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmNetworkDeviceMigrateV2Args', 'VmNetworkDeviceMigrateV2']

@pulumi.input_type
class VmNetworkDeviceMigrateV2Args:
    def __init__(__self__, *,
                 ext_id: pulumi.Input[_builtins.str],
                 migrate_type: pulumi.Input[_builtins.str],
                 subnets: pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2SubnetArgs']]],
                 vm_ext_id: pulumi.Input[_builtins.str],
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2IpAddressArgs']]]] = None):
        """
        The set of arguments for constructing a VmNetworkDeviceMigrateV2 resource.
        """
        pulumi.set(__self__, "ext_id", ext_id)
        pulumi.set(__self__, "migrate_type", migrate_type)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "vm_ext_id", vm_ext_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "migrate_type")

    @migrate_type.setter
    def migrate_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "migrate_type", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2SubnetArgs']]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2SubnetArgs']]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "vm_ext_id")

    @vm_ext_id.setter
    def vm_ext_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vm_ext_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2IpAddressArgs']]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2IpAddressArgs']]]]):
        pulumi.set(self, "ip_addresses", value)


@pulumi.input_type
class _VmNetworkDeviceMigrateV2State:
    def __init__(__self__, *,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2IpAddressArgs']]]] = None,
                 migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2SubnetArgs']]]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VmNetworkDeviceMigrateV2 resources.
        """
        if ext_id is not None:
            pulumi.set(__self__, "ext_id", ext_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if migrate_type is not None:
            pulumi.set(__self__, "migrate_type", migrate_type)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if vm_ext_id is not None:
            pulumi.set(__self__, "vm_ext_id", vm_ext_id)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ext_id")

    @ext_id.setter
    def ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ext_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2IpAddressArgs']]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2IpAddressArgs']]]]):
        pulumi.set(self, "ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "migrate_type")

    @migrate_type.setter
    def migrate_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "migrate_type", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2SubnetArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNetworkDeviceMigrateV2SubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vm_ext_id")

    @vm_ext_id.setter
    def vm_ext_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_ext_id", value)


@pulumi.type_token("nutanix:index/vmNetworkDeviceMigrateV2:VmNetworkDeviceMigrateV2")
class VmNetworkDeviceMigrateV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkDeviceMigrateV2IpAddressArgs', 'VmNetworkDeviceMigrateV2IpAddressArgsDict']]]]] = None,
                 migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkDeviceMigrateV2SubnetArgs', 'VmNetworkDeviceMigrateV2SubnetArgsDict']]]]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a VmNetworkDeviceMigrateV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmNetworkDeviceMigrateV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VmNetworkDeviceMigrateV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmNetworkDeviceMigrateV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmNetworkDeviceMigrateV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkDeviceMigrateV2IpAddressArgs', 'VmNetworkDeviceMigrateV2IpAddressArgsDict']]]]] = None,
                 migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkDeviceMigrateV2SubnetArgs', 'VmNetworkDeviceMigrateV2SubnetArgsDict']]]]] = None,
                 vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmNetworkDeviceMigrateV2Args.__new__(VmNetworkDeviceMigrateV2Args)

            if ext_id is None and not opts.urn:
                raise TypeError("Missing required property 'ext_id'")
            __props__.__dict__["ext_id"] = ext_id
            __props__.__dict__["ip_addresses"] = ip_addresses
            if migrate_type is None and not opts.urn:
                raise TypeError("Missing required property 'migrate_type'")
            __props__.__dict__["migrate_type"] = migrate_type
            if subnets is None and not opts.urn:
                raise TypeError("Missing required property 'subnets'")
            __props__.__dict__["subnets"] = subnets
            if vm_ext_id is None and not opts.urn:
                raise TypeError("Missing required property 'vm_ext_id'")
            __props__.__dict__["vm_ext_id"] = vm_ext_id
        super(VmNetworkDeviceMigrateV2, __self__).__init__(
            'nutanix:index/vmNetworkDeviceMigrateV2:VmNetworkDeviceMigrateV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ext_id: Optional[pulumi.Input[_builtins.str]] = None,
            ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkDeviceMigrateV2IpAddressArgs', 'VmNetworkDeviceMigrateV2IpAddressArgsDict']]]]] = None,
            migrate_type: Optional[pulumi.Input[_builtins.str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VmNetworkDeviceMigrateV2SubnetArgs', 'VmNetworkDeviceMigrateV2SubnetArgsDict']]]]] = None,
            vm_ext_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VmNetworkDeviceMigrateV2':
        """
        Get an existing VmNetworkDeviceMigrateV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmNetworkDeviceMigrateV2State.__new__(_VmNetworkDeviceMigrateV2State)

        __props__.__dict__["ext_id"] = ext_id
        __props__.__dict__["ip_addresses"] = ip_addresses
        __props__.__dict__["migrate_type"] = migrate_type
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["vm_ext_id"] = vm_ext_id
        return VmNetworkDeviceMigrateV2(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> pulumi.Output[Sequence['outputs.VmNetworkDeviceMigrateV2IpAddress']]:
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "migrate_type")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence['outputs.VmNetworkDeviceMigrateV2Subnet']]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter(name="vmExtId")
    def vm_ext_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vm_ext_id")

