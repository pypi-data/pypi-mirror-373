# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NdbLogCatchupsArgs', 'NdbLogCatchups']

@pulumi.input_type
class NdbLogCatchupsArgs:
    def __init__(__self__, *,
                 database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 for_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_catchup_version: Optional[pulumi.Input[_builtins.int]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NdbLogCatchups resource.
        :param pulumi.Input[_builtins.bool] for_restore: Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        :param pulumi.Input[_builtins.int] log_catchup_version: it helps to perform same operation with same config.
               
               
               See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        :param pulumi.Input[_builtins.str] time_machine_id: Time machine id of
        """
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if for_restore is not None:
            pulumi.set(__self__, "for_restore", for_restore)
        if log_catchup_version is not None:
            pulumi.set(__self__, "log_catchup_version", log_catchup_version)
        if time_machine_id is not None:
            pulumi.set(__self__, "time_machine_id", time_machine_id)

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_id", value)

    @_builtins.property
    @pulumi.getter(name="forRestore")
    def for_restore(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        """
        return pulumi.get(self, "for_restore")

    @for_restore.setter
    def for_restore(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "for_restore", value)

    @_builtins.property
    @pulumi.getter(name="logCatchupVersion")
    def log_catchup_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        it helps to perform same operation with same config.


        See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        """
        return pulumi.get(self, "log_catchup_version")

    @log_catchup_version.setter
    def log_catchup_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "log_catchup_version", value)

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time machine id of
        """
        return pulumi.get(self, "time_machine_id")

    @time_machine_id.setter
    def time_machine_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_machine_id", value)


@pulumi.input_type
class _NdbLogCatchupsState:
    def __init__(__self__, *,
                 database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 for_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_catchup_version: Optional[pulumi.Input[_builtins.int]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering NdbLogCatchups resources.
        :param pulumi.Input[_builtins.bool] for_restore: Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        :param pulumi.Input[_builtins.int] log_catchup_version: it helps to perform same operation with same config.
               
               
               See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        :param pulumi.Input[_builtins.str] time_machine_id: Time machine id of
        """
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if for_restore is not None:
            pulumi.set(__self__, "for_restore", for_restore)
        if log_catchup_version is not None:
            pulumi.set(__self__, "log_catchup_version", log_catchup_version)
        if time_machine_id is not None:
            pulumi.set(__self__, "time_machine_id", time_machine_id)

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_id", value)

    @_builtins.property
    @pulumi.getter(name="forRestore")
    def for_restore(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        """
        return pulumi.get(self, "for_restore")

    @for_restore.setter
    def for_restore(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "for_restore", value)

    @_builtins.property
    @pulumi.getter(name="logCatchupVersion")
    def log_catchup_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        it helps to perform same operation with same config.


        See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        """
        return pulumi.get(self, "log_catchup_version")

    @log_catchup_version.setter
    def log_catchup_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "log_catchup_version", value)

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time machine id of
        """
        return pulumi.get(self, "time_machine_id")

    @time_machine_id.setter
    def time_machine_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_machine_id", value)


@pulumi.type_token("nutanix:index/ndbLogCatchups:NdbLogCatchups")
class NdbLogCatchups(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 for_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_catchup_version: Optional[pulumi.Input[_builtins.int]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Provides a resource to perform the log cactup for database instance based on the input parameters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        name = nutanix.NdbLogCatchups("name", database_id="{{ DatabaseID }}")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] for_restore: Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        :param pulumi.Input[_builtins.int] log_catchup_version: it helps to perform same operation with same config.
               
               
               See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        :param pulumi.Input[_builtins.str] time_machine_id: Time machine id of
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NdbLogCatchupsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to perform the log cactup for database instance based on the input parameters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        name = nutanix.NdbLogCatchups("name", database_id="{{ DatabaseID }}")
        ```

        :param str resource_name: The name of the resource.
        :param NdbLogCatchupsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NdbLogCatchupsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 for_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 log_catchup_version: Optional[pulumi.Input[_builtins.int]] = None,
                 time_machine_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NdbLogCatchupsArgs.__new__(NdbLogCatchupsArgs)

            __props__.__dict__["database_id"] = database_id
            __props__.__dict__["for_restore"] = for_restore
            __props__.__dict__["log_catchup_version"] = log_catchup_version
            __props__.__dict__["time_machine_id"] = time_machine_id
        super(NdbLogCatchups, __self__).__init__(
            'nutanix:index/ndbLogCatchups:NdbLogCatchups',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            database_id: Optional[pulumi.Input[_builtins.str]] = None,
            for_restore: Optional[pulumi.Input[_builtins.bool]] = None,
            log_catchup_version: Optional[pulumi.Input[_builtins.int]] = None,
            time_machine_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'NdbLogCatchups':
        """
        Get an existing NdbLogCatchups resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] for_restore: Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        :param pulumi.Input[_builtins.int] log_catchup_version: it helps to perform same operation with same config.
               
               
               See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        :param pulumi.Input[_builtins.str] time_machine_id: Time machine id of
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NdbLogCatchupsState.__new__(_NdbLogCatchupsState)

        __props__.__dict__["database_id"] = database_id
        __props__.__dict__["for_restore"] = for_restore
        __props__.__dict__["log_catchup_version"] = log_catchup_version
        __props__.__dict__["time_machine_id"] = time_machine_id
        return NdbLogCatchups(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "database_id")

    @_builtins.property
    @pulumi.getter(name="forRestore")
    def for_restore(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Logs to Backup. The database may contain additional logs. Backup any remaining logs before restore or they will be lost.
        """
        return pulumi.get(self, "for_restore")

    @_builtins.property
    @pulumi.getter(name="logCatchupVersion")
    def log_catchup_version(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        it helps to perform same operation with same config.


        See detailed information in [NDB Log Catchups](https://www.nutanix.dev/api_references/ndb/#/6100cd9959e52-start-log-catchup-for-given-time-machine) .
        """
        return pulumi.get(self, "log_catchup_version")

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Time machine id of
        """
        return pulumi.get(self, "time_machine_id")

