# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNdbTimeMachineResult',
    'AwaitableGetNdbTimeMachineResult',
    'get_ndb_time_machine',
    'get_ndb_time_machine_output',
]

@pulumi.output_type
class GetNdbTimeMachineResult:
    """
    A collection of values returned by getNdbTimeMachine.
    """
    def __init__(__self__, access_level=None, category=None, clone=None, clones=None, clustered=None, database=None, database_id=None, date_created=None, date_modified=None, description=None, ea_status=None, id=None, internal=None, metric=None, name=None, owner_id=None, properties=None, schedule_id=None, schedules=None, scope=None, sla_id=None, sla_update_in_progress=None, sla_update_metadata=None, slas=None, source_nx_clusters=None, status=None, tags=None, time_machine_id=None, time_machine_name=None, type=None):
        if access_level and not isinstance(access_level, str):
            raise TypeError("Expected argument 'access_level' to be a str")
        pulumi.set(__self__, "access_level", access_level)
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if clone and not isinstance(clone, bool):
            raise TypeError("Expected argument 'clone' to be a bool")
        pulumi.set(__self__, "clone", clone)
        if clones and not isinstance(clones, str):
            raise TypeError("Expected argument 'clones' to be a str")
        pulumi.set(__self__, "clones", clones)
        if clustered and not isinstance(clustered, bool):
            raise TypeError("Expected argument 'clustered' to be a bool")
        pulumi.set(__self__, "clustered", clustered)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if database_id and not isinstance(database_id, str):
            raise TypeError("Expected argument 'database_id' to be a str")
        pulumi.set(__self__, "database_id", database_id)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if date_modified and not isinstance(date_modified, str):
            raise TypeError("Expected argument 'date_modified' to be a str")
        pulumi.set(__self__, "date_modified", date_modified)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if ea_status and not isinstance(ea_status, str):
            raise TypeError("Expected argument 'ea_status' to be a str")
        pulumi.set(__self__, "ea_status", ea_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal and not isinstance(internal, bool):
            raise TypeError("Expected argument 'internal' to be a bool")
        pulumi.set(__self__, "internal", internal)
        if metric and not isinstance(metric, str):
            raise TypeError("Expected argument 'metric' to be a str")
        pulumi.set(__self__, "metric", metric)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if properties and not isinstance(properties, list):
            raise TypeError("Expected argument 'properties' to be a list")
        pulumi.set(__self__, "properties", properties)
        if schedule_id and not isinstance(schedule_id, str):
            raise TypeError("Expected argument 'schedule_id' to be a str")
        pulumi.set(__self__, "schedule_id", schedule_id)
        if schedules and not isinstance(schedules, list):
            raise TypeError("Expected argument 'schedules' to be a list")
        pulumi.set(__self__, "schedules", schedules)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if sla_id and not isinstance(sla_id, str):
            raise TypeError("Expected argument 'sla_id' to be a str")
        pulumi.set(__self__, "sla_id", sla_id)
        if sla_update_in_progress and not isinstance(sla_update_in_progress, bool):
            raise TypeError("Expected argument 'sla_update_in_progress' to be a bool")
        pulumi.set(__self__, "sla_update_in_progress", sla_update_in_progress)
        if sla_update_metadata and not isinstance(sla_update_metadata, str):
            raise TypeError("Expected argument 'sla_update_metadata' to be a str")
        pulumi.set(__self__, "sla_update_metadata", sla_update_metadata)
        if slas and not isinstance(slas, list):
            raise TypeError("Expected argument 'slas' to be a list")
        pulumi.set(__self__, "slas", slas)
        if source_nx_clusters and not isinstance(source_nx_clusters, list):
            raise TypeError("Expected argument 'source_nx_clusters' to be a list")
        pulumi.set(__self__, "source_nx_clusters", source_nx_clusters)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if time_machine_id and not isinstance(time_machine_id, str):
            raise TypeError("Expected argument 'time_machine_id' to be a str")
        pulumi.set(__self__, "time_machine_id", time_machine_id)
        if time_machine_name and not isinstance(time_machine_name, str):
            raise TypeError("Expected argument 'time_machine_name' to be a str")
        pulumi.set(__self__, "time_machine_name", time_machine_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> _builtins.str:
        """
        access level to time machines
        """
        return pulumi.get(self, "access_level")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        category of time machine
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def clone(self) -> _builtins.bool:
        """
        clone time machine or not
        """
        return pulumi.get(self, "clone")

    @_builtins.property
    @pulumi.getter
    def clones(self) -> _builtins.str:
        """
        clone info
        """
        return pulumi.get(self, "clones")

    @_builtins.property
    @pulumi.getter
    def clustered(self) -> _builtins.bool:
        """
        clustered or not
        """
        return pulumi.get(self, "clustered")

    @_builtins.property
    @pulumi.getter
    def database(self) -> _builtins.str:
        """
        database info
        """
        return pulumi.get(self, "database")

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> _builtins.str:
        """
        database id
        """
        return pulumi.get(self, "database_id")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> _builtins.str:
        """
        date created
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="dateModified")
    def date_modified(self) -> _builtins.str:
        """
        date modified
        """
        return pulumi.get(self, "date_modified")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        time machine description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eaStatus")
    def ea_status(self) -> _builtins.str:
        """
        ea status of time machine
        """
        return pulumi.get(self, "ea_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        time machine id
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def internal(self) -> _builtins.bool:
        return pulumi.get(self, "internal")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.str:
        """
        Metric info
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        time machine name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> _builtins.str:
        return pulumi.get(self, "owner_id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetNdbTimeMachinePropertyResult']:
        """
        properties of time machines
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> _builtins.str:
        """
        schedule id
        """
        return pulumi.get(self, "schedule_id")

    @_builtins.property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetNdbTimeMachineScheduleResult']:
        """
        schedule info
        """
        return pulumi.get(self, "schedules")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        scope
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> _builtins.str:
        """
        sla id
        """
        return pulumi.get(self, "sla_id")

    @_builtins.property
    @pulumi.getter(name="slaUpdateInProgress")
    def sla_update_in_progress(self) -> _builtins.bool:
        """
        sla update in progress
        """
        return pulumi.get(self, "sla_update_in_progress")

    @_builtins.property
    @pulumi.getter(name="slaUpdateMetadata")
    def sla_update_metadata(self) -> _builtins.str:
        """
        sla update metadata
        """
        return pulumi.get(self, "sla_update_metadata")

    @_builtins.property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetNdbTimeMachineSlaResult']:
        """
        sla info
        """
        return pulumi.get(self, "slas")

    @_builtins.property
    @pulumi.getter(name="sourceNxClusters")
    def source_nx_clusters(self) -> Sequence[_builtins.str]:
        """
        source clusters
        """
        return pulumi.get(self, "source_nx_clusters")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        status of time machine
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNdbTimeMachineTagResult']:
        """
        tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="timeMachineId")
    def time_machine_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "time_machine_id")

    @_builtins.property
    @pulumi.getter(name="timeMachineName")
    def time_machine_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "time_machine_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        type of time machine
        """
        return pulumi.get(self, "type")


class AwaitableGetNdbTimeMachineResult(GetNdbTimeMachineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNdbTimeMachineResult(
            access_level=self.access_level,
            category=self.category,
            clone=self.clone,
            clones=self.clones,
            clustered=self.clustered,
            database=self.database,
            database_id=self.database_id,
            date_created=self.date_created,
            date_modified=self.date_modified,
            description=self.description,
            ea_status=self.ea_status,
            id=self.id,
            internal=self.internal,
            metric=self.metric,
            name=self.name,
            owner_id=self.owner_id,
            properties=self.properties,
            schedule_id=self.schedule_id,
            schedules=self.schedules,
            scope=self.scope,
            sla_id=self.sla_id,
            sla_update_in_progress=self.sla_update_in_progress,
            sla_update_metadata=self.sla_update_metadata,
            slas=self.slas,
            source_nx_clusters=self.source_nx_clusters,
            status=self.status,
            tags=self.tags,
            time_machine_id=self.time_machine_id,
            time_machine_name=self.time_machine_name,
            type=self.type)


def get_ndb_time_machine(tags: Optional[Sequence[Union['GetNdbTimeMachineTagArgs', 'GetNdbTimeMachineTagArgsDict']]] = None,
                         time_machine_id: Optional[_builtins.str] = None,
                         time_machine_name: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNdbTimeMachineResult:
    """
    Describes a time machine present in Nutanix Database Service


    :param Sequence[Union['GetNdbTimeMachineTagArgs', 'GetNdbTimeMachineTagArgsDict']] tags: tags
    :param _builtins.str time_machine_id: time machine id
    :param _builtins.str time_machine_name: time machine name
    """
    __args__ = dict()
    __args__['tags'] = tags
    __args__['timeMachineId'] = time_machine_id
    __args__['timeMachineName'] = time_machine_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getNdbTimeMachine:getNdbTimeMachine', __args__, opts=opts, typ=GetNdbTimeMachineResult).value

    return AwaitableGetNdbTimeMachineResult(
        access_level=pulumi.get(__ret__, 'access_level'),
        category=pulumi.get(__ret__, 'category'),
        clone=pulumi.get(__ret__, 'clone'),
        clones=pulumi.get(__ret__, 'clones'),
        clustered=pulumi.get(__ret__, 'clustered'),
        database=pulumi.get(__ret__, 'database'),
        database_id=pulumi.get(__ret__, 'database_id'),
        date_created=pulumi.get(__ret__, 'date_created'),
        date_modified=pulumi.get(__ret__, 'date_modified'),
        description=pulumi.get(__ret__, 'description'),
        ea_status=pulumi.get(__ret__, 'ea_status'),
        id=pulumi.get(__ret__, 'id'),
        internal=pulumi.get(__ret__, 'internal'),
        metric=pulumi.get(__ret__, 'metric'),
        name=pulumi.get(__ret__, 'name'),
        owner_id=pulumi.get(__ret__, 'owner_id'),
        properties=pulumi.get(__ret__, 'properties'),
        schedule_id=pulumi.get(__ret__, 'schedule_id'),
        schedules=pulumi.get(__ret__, 'schedules'),
        scope=pulumi.get(__ret__, 'scope'),
        sla_id=pulumi.get(__ret__, 'sla_id'),
        sla_update_in_progress=pulumi.get(__ret__, 'sla_update_in_progress'),
        sla_update_metadata=pulumi.get(__ret__, 'sla_update_metadata'),
        slas=pulumi.get(__ret__, 'slas'),
        source_nx_clusters=pulumi.get(__ret__, 'source_nx_clusters'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        time_machine_id=pulumi.get(__ret__, 'time_machine_id'),
        time_machine_name=pulumi.get(__ret__, 'time_machine_name'),
        type=pulumi.get(__ret__, 'type'))
def get_ndb_time_machine_output(tags: Optional[pulumi.Input[Optional[Sequence[Union['GetNdbTimeMachineTagArgs', 'GetNdbTimeMachineTagArgsDict']]]]] = None,
                                time_machine_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                time_machine_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNdbTimeMachineResult]:
    """
    Describes a time machine present in Nutanix Database Service


    :param Sequence[Union['GetNdbTimeMachineTagArgs', 'GetNdbTimeMachineTagArgsDict']] tags: tags
    :param _builtins.str time_machine_id: time machine id
    :param _builtins.str time_machine_name: time machine name
    """
    __args__ = dict()
    __args__['tags'] = tags
    __args__['timeMachineId'] = time_machine_id
    __args__['timeMachineName'] = time_machine_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getNdbTimeMachine:getNdbTimeMachine', __args__, opts=opts, typ=GetNdbTimeMachineResult)
    return __ret__.apply(lambda __response__: GetNdbTimeMachineResult(
        access_level=pulumi.get(__response__, 'access_level'),
        category=pulumi.get(__response__, 'category'),
        clone=pulumi.get(__response__, 'clone'),
        clones=pulumi.get(__response__, 'clones'),
        clustered=pulumi.get(__response__, 'clustered'),
        database=pulumi.get(__response__, 'database'),
        database_id=pulumi.get(__response__, 'database_id'),
        date_created=pulumi.get(__response__, 'date_created'),
        date_modified=pulumi.get(__response__, 'date_modified'),
        description=pulumi.get(__response__, 'description'),
        ea_status=pulumi.get(__response__, 'ea_status'),
        id=pulumi.get(__response__, 'id'),
        internal=pulumi.get(__response__, 'internal'),
        metric=pulumi.get(__response__, 'metric'),
        name=pulumi.get(__response__, 'name'),
        owner_id=pulumi.get(__response__, 'owner_id'),
        properties=pulumi.get(__response__, 'properties'),
        schedule_id=pulumi.get(__response__, 'schedule_id'),
        schedules=pulumi.get(__response__, 'schedules'),
        scope=pulumi.get(__response__, 'scope'),
        sla_id=pulumi.get(__response__, 'sla_id'),
        sla_update_in_progress=pulumi.get(__response__, 'sla_update_in_progress'),
        sla_update_metadata=pulumi.get(__response__, 'sla_update_metadata'),
        slas=pulumi.get(__response__, 'slas'),
        source_nx_clusters=pulumi.get(__response__, 'source_nx_clusters'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        time_machine_id=pulumi.get(__response__, 'time_machine_id'),
        time_machine_name=pulumi.get(__response__, 'time_machine_name'),
        type=pulumi.get(__response__, 'type')))
