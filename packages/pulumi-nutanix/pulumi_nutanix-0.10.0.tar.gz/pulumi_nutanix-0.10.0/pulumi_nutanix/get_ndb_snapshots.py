# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNdbSnapshotsResult',
    'AwaitableGetNdbSnapshotsResult',
    'get_ndb_snapshots',
    'get_ndb_snapshots_output',
]

@pulumi.output_type
class GetNdbSnapshotsResult:
    """
    A collection of values returned by getNdbSnapshots.
    """
    def __init__(__self__, filters=None, id=None, snapshots=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetNdbSnapshotsFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetNdbSnapshotsSnapshotResult']:
        return pulumi.get(self, "snapshots")


class AwaitableGetNdbSnapshotsResult(GetNdbSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNdbSnapshotsResult(
            filters=self.filters,
            id=self.id,
            snapshots=self.snapshots)


def get_ndb_snapshots(filters: Optional[Sequence[Union['GetNdbSnapshotsFilterArgs', 'GetNdbSnapshotsFilterArgsDict']]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNdbSnapshotsResult:
    """
    List all snapshots present in Nutanix Database Service

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    snaps = nutanix.get_ndb_snapshots(filters=[{
        "time_machine_id": "{{ time_machine_id }}",
    }])
    ```

    ## Attribute Reference

    * `snapshots`: List of snapshots

    ### snapshots

    * `id`: name of snapshot
    * `description`: description of snapshot
    * `properties`: properties
    * `owner_id`: owner id
    * `date_created`: created date
    * `date_modified`: modified date
    * `properties`: properties
    * `tags`: tags
    * `snapshot_uuid`: snapshot uuid
    * `nx_cluster_id`: nx cluster id
    * `protection_domain_id`: protection domain
    * `parent_snapshot_id`: parent snapshot id
    * `database_node_id`: database node id
    * `app_info_version`: App info version
    * `status`: status
    * `type`: type
    * `applicable_types`: Applicable types
    * `snapshot_timestamp`: snapshot timeStamp
    * `metadata`: metadata of snapshot
    * `software_snapshot_id`: software snapshot id
    * `software_database_snapshot`: software database snapshot
    * `dbserver_storage_metadata_version`: dbserver storage metadata version
    * `santised_from_snapshot_id`: sanitized  snapshot id
    * `timezone`: timezone
    * `processed`: processed
    * `database_snapshot`: database snapshot
    * `from_timestamp`: from timestamp
    * `to_timestamp`: to timestamp
    * `dbserver_id`: dbserver id
    * `dbserver_name`: dbserver name
    * `dbserver_ip`:dbserver ip
    * `replicated_snapshots`: replicated snapshots
    * `software_snapshot`: software snapshot
    * `santised_snapshots`:santised snapshots
    * `snapshot_family`: snapshot family
    * `snapshot_timestamp_date`: snapshot timestamp date
    * `lcm_config`: LCM config
    * `parent_snapshot`: parent snapshot
    * `snapshot_size`: snapshot size

    See detailed information in [NDB Snapshots](https://www.nutanix.dev/api_references/ndb/#/d0b89ff892448-get-list-of-all-snapshots).


    :param Sequence[Union['GetNdbSnapshotsFilterArgs', 'GetNdbSnapshotsFilterArgsDict']] filters: filters help to fetch the snapshots based on input
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getNdbSnapshots:getNdbSnapshots', __args__, opts=opts, typ=GetNdbSnapshotsResult).value

    return AwaitableGetNdbSnapshotsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        snapshots=pulumi.get(__ret__, 'snapshots'))
def get_ndb_snapshots_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetNdbSnapshotsFilterArgs', 'GetNdbSnapshotsFilterArgsDict']]]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNdbSnapshotsResult]:
    """
    List all snapshots present in Nutanix Database Service

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    snaps = nutanix.get_ndb_snapshots(filters=[{
        "time_machine_id": "{{ time_machine_id }}",
    }])
    ```

    ## Attribute Reference

    * `snapshots`: List of snapshots

    ### snapshots

    * `id`: name of snapshot
    * `description`: description of snapshot
    * `properties`: properties
    * `owner_id`: owner id
    * `date_created`: created date
    * `date_modified`: modified date
    * `properties`: properties
    * `tags`: tags
    * `snapshot_uuid`: snapshot uuid
    * `nx_cluster_id`: nx cluster id
    * `protection_domain_id`: protection domain
    * `parent_snapshot_id`: parent snapshot id
    * `database_node_id`: database node id
    * `app_info_version`: App info version
    * `status`: status
    * `type`: type
    * `applicable_types`: Applicable types
    * `snapshot_timestamp`: snapshot timeStamp
    * `metadata`: metadata of snapshot
    * `software_snapshot_id`: software snapshot id
    * `software_database_snapshot`: software database snapshot
    * `dbserver_storage_metadata_version`: dbserver storage metadata version
    * `santised_from_snapshot_id`: sanitized  snapshot id
    * `timezone`: timezone
    * `processed`: processed
    * `database_snapshot`: database snapshot
    * `from_timestamp`: from timestamp
    * `to_timestamp`: to timestamp
    * `dbserver_id`: dbserver id
    * `dbserver_name`: dbserver name
    * `dbserver_ip`:dbserver ip
    * `replicated_snapshots`: replicated snapshots
    * `software_snapshot`: software snapshot
    * `santised_snapshots`:santised snapshots
    * `snapshot_family`: snapshot family
    * `snapshot_timestamp_date`: snapshot timestamp date
    * `lcm_config`: LCM config
    * `parent_snapshot`: parent snapshot
    * `snapshot_size`: snapshot size

    See detailed information in [NDB Snapshots](https://www.nutanix.dev/api_references/ndb/#/d0b89ff892448-get-list-of-all-snapshots).


    :param Sequence[Union['GetNdbSnapshotsFilterArgs', 'GetNdbSnapshotsFilterArgsDict']] filters: filters help to fetch the snapshots based on input
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getNdbSnapshots:getNdbSnapshots', __args__, opts=opts, typ=GetNdbSnapshotsResult)
    return __ret__.apply(lambda __response__: GetNdbSnapshotsResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        snapshots=pulumi.get(__response__, 'snapshots')))
