# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSubnetResult',
    'AwaitableGetSubnetResult',
    'get_subnet',
    'get_subnet_output',
]

@pulumi.output_type
class GetSubnetResult:
    """
    A collection of values returned by getSubnet.
    """
    def __init__(__self__, additional_filters=None, api_version=None, availability_zone_reference=None, categories=None, cluster_name=None, cluster_uuid=None, default_gateway_ip=None, description=None, dhcp_domain_name_server_lists=None, dhcp_domain_search_lists=None, dhcp_options=None, dhcp_server_address=None, dhcp_server_address_port=None, enable_nat=None, id=None, ip_config_pool_list_ranges=None, is_external=None, message_lists=None, metadata=None, name=None, network_function_chain_reference=None, owner_reference=None, prefix_length=None, project_reference=None, state=None, subnet_id=None, subnet_ip=None, subnet_name=None, subnet_type=None, vlan_id=None, vpc_reference=None, vswitch_name=None):
        if additional_filters and not isinstance(additional_filters, list):
            raise TypeError("Expected argument 'additional_filters' to be a list")
        pulumi.set(__self__, "additional_filters", additional_filters)
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if availability_zone_reference and not isinstance(availability_zone_reference, dict):
            raise TypeError("Expected argument 'availability_zone_reference' to be a dict")
        pulumi.set(__self__, "availability_zone_reference", availability_zone_reference)
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        pulumi.set(__self__, "categories", categories)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_uuid and not isinstance(cluster_uuid, str):
            raise TypeError("Expected argument 'cluster_uuid' to be a str")
        pulumi.set(__self__, "cluster_uuid", cluster_uuid)
        if default_gateway_ip and not isinstance(default_gateway_ip, str):
            raise TypeError("Expected argument 'default_gateway_ip' to be a str")
        pulumi.set(__self__, "default_gateway_ip", default_gateway_ip)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dhcp_domain_name_server_lists and not isinstance(dhcp_domain_name_server_lists, list):
            raise TypeError("Expected argument 'dhcp_domain_name_server_lists' to be a list")
        pulumi.set(__self__, "dhcp_domain_name_server_lists", dhcp_domain_name_server_lists)
        if dhcp_domain_search_lists and not isinstance(dhcp_domain_search_lists, list):
            raise TypeError("Expected argument 'dhcp_domain_search_lists' to be a list")
        pulumi.set(__self__, "dhcp_domain_search_lists", dhcp_domain_search_lists)
        if dhcp_options and not isinstance(dhcp_options, dict):
            raise TypeError("Expected argument 'dhcp_options' to be a dict")
        pulumi.set(__self__, "dhcp_options", dhcp_options)
        if dhcp_server_address and not isinstance(dhcp_server_address, dict):
            raise TypeError("Expected argument 'dhcp_server_address' to be a dict")
        pulumi.set(__self__, "dhcp_server_address", dhcp_server_address)
        if dhcp_server_address_port and not isinstance(dhcp_server_address_port, int):
            raise TypeError("Expected argument 'dhcp_server_address_port' to be a int")
        pulumi.set(__self__, "dhcp_server_address_port", dhcp_server_address_port)
        if enable_nat and not isinstance(enable_nat, bool):
            raise TypeError("Expected argument 'enable_nat' to be a bool")
        pulumi.set(__self__, "enable_nat", enable_nat)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_config_pool_list_ranges and not isinstance(ip_config_pool_list_ranges, list):
            raise TypeError("Expected argument 'ip_config_pool_list_ranges' to be a list")
        pulumi.set(__self__, "ip_config_pool_list_ranges", ip_config_pool_list_ranges)
        if is_external and not isinstance(is_external, bool):
            raise TypeError("Expected argument 'is_external' to be a bool")
        pulumi.set(__self__, "is_external", is_external)
        if message_lists and not isinstance(message_lists, list):
            raise TypeError("Expected argument 'message_lists' to be a list")
        pulumi.set(__self__, "message_lists", message_lists)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_function_chain_reference and not isinstance(network_function_chain_reference, dict):
            raise TypeError("Expected argument 'network_function_chain_reference' to be a dict")
        pulumi.set(__self__, "network_function_chain_reference", network_function_chain_reference)
        if owner_reference and not isinstance(owner_reference, dict):
            raise TypeError("Expected argument 'owner_reference' to be a dict")
        pulumi.set(__self__, "owner_reference", owner_reference)
        if prefix_length and not isinstance(prefix_length, int):
            raise TypeError("Expected argument 'prefix_length' to be a int")
        pulumi.set(__self__, "prefix_length", prefix_length)
        if project_reference and not isinstance(project_reference, dict):
            raise TypeError("Expected argument 'project_reference' to be a dict")
        pulumi.set(__self__, "project_reference", project_reference)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if subnet_ip and not isinstance(subnet_ip, str):
            raise TypeError("Expected argument 'subnet_ip' to be a str")
        pulumi.set(__self__, "subnet_ip", subnet_ip)
        if subnet_name and not isinstance(subnet_name, str):
            raise TypeError("Expected argument 'subnet_name' to be a str")
        pulumi.set(__self__, "subnet_name", subnet_name)
        if subnet_type and not isinstance(subnet_type, str):
            raise TypeError("Expected argument 'subnet_type' to be a str")
        pulumi.set(__self__, "subnet_type", subnet_type)
        if vlan_id and not isinstance(vlan_id, int):
            raise TypeError("Expected argument 'vlan_id' to be a int")
        pulumi.set(__self__, "vlan_id", vlan_id)
        if vpc_reference and not isinstance(vpc_reference, dict):
            raise TypeError("Expected argument 'vpc_reference' to be a dict")
        pulumi.set(__self__, "vpc_reference", vpc_reference)
        if vswitch_name and not isinstance(vswitch_name, str):
            raise TypeError("Expected argument 'vswitch_name' to be a str")
        pulumi.set(__self__, "vswitch_name", vswitch_name)

    @_builtins.property
    @pulumi.getter(name="additionalFilters")
    def additional_filters(self) -> Optional[Sequence['outputs.GetSubnetAdditionalFilterResult']]:
        """
        - Additional filters to narrow down list of subnets.
        """
        return pulumi.get(self, "additional_filters")

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> _builtins.str:
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="availabilityZoneReference")
    def availability_zone_reference(self) -> Mapping[str, _builtins.str]:
        """
        The reference to a availability_zone.
        """
        return pulumi.get(self, "availability_zone_reference")

    @_builtins.property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetSubnetCategoryResult']:
        """
        The API Version.
        """
        return pulumi.get(self, "categories")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        The name of a cluster.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> _builtins.str:
        return pulumi.get(self, "cluster_uuid")

    @_builtins.property
    @pulumi.getter(name="defaultGatewayIp")
    def default_gateway_ip(self) -> _builtins.str:
        """
        Default gateway IP address.
        """
        return pulumi.get(self, "default_gateway_ip")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A description for subnet.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dhcpDomainNameServerLists")
    def dhcp_domain_name_server_lists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "dhcp_domain_name_server_lists")

    @_builtins.property
    @pulumi.getter(name="dhcpDomainSearchLists")
    def dhcp_domain_search_lists(self) -> Sequence[_builtins.str]:
        """
        DHCP domain search list for a subnet.
        """
        return pulumi.get(self, "dhcp_domain_search_lists")

    @_builtins.property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> Mapping[str, _builtins.str]:
        """
        Spec for defining DHCP options.
        """
        return pulumi.get(self, "dhcp_options")

    @_builtins.property
    @pulumi.getter(name="dhcpServerAddress")
    def dhcp_server_address(self) -> Mapping[str, _builtins.str]:
        """
        Host address.
        """
        return pulumi.get(self, "dhcp_server_address")

    @_builtins.property
    @pulumi.getter(name="dhcpServerAddressPort")
    def dhcp_server_address_port(self) -> _builtins.int:
        """
        Port Number.
        """
        return pulumi.get(self, "dhcp_server_address_port")

    @_builtins.property
    @pulumi.getter(name="enableNat")
    def enable_nat(self) -> _builtins.bool:
        return pulumi.get(self, "enable_nat")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipConfigPoolListRanges")
    def ip_config_pool_list_ranges(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ip_config_pool_list_ranges")

    @_builtins.property
    @pulumi.getter(name="isExternal")
    def is_external(self) -> _builtins.bool:
        return pulumi.get(self, "is_external")

    @_builtins.property
    @pulumi.getter(name="messageLists")
    def message_lists(self) -> Sequence['outputs.GetSubnetMessageListResult']:
        return pulumi.get(self, "message_lists")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        The subnet kind metadata.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        - the name(Optional).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkFunctionChainReference")
    def network_function_chain_reference(self) -> Mapping[str, _builtins.str]:
        """
        The reference to a network_function_chain.
        """
        return pulumi.get(self, "network_function_chain_reference")

    @_builtins.property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, _builtins.str]:
        """
        The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> _builtins.int:
        """
        - (Optional). IP prefix length of the Subnet.
        """
        return pulumi.get(self, "prefix_length")

    @_builtins.property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, _builtins.str]:
        """
        The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        - The state of the subnet.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="subnetIp")
    def subnet_ip(self) -> _builtins.str:
        """
        Subnet IP address.
        """
        return pulumi.get(self, "subnet_ip")

    @_builtins.property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "subnet_name")

    @_builtins.property
    @pulumi.getter(name="subnetType")
    def subnet_type(self) -> _builtins.str:
        """
        The type of the subnet.
        """
        return pulumi.get(self, "subnet_type")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> _builtins.int:
        """
        VLAN assigned to the subnet.
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter(name="vpcReference")
    def vpc_reference(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "vpc_reference")

    @_builtins.property
    @pulumi.getter(name="vswitchName")
    def vswitch_name(self) -> _builtins.str:
        """
        The name of the vswitch.
        """
        return pulumi.get(self, "vswitch_name")


class AwaitableGetSubnetResult(GetSubnetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubnetResult(
            additional_filters=self.additional_filters,
            api_version=self.api_version,
            availability_zone_reference=self.availability_zone_reference,
            categories=self.categories,
            cluster_name=self.cluster_name,
            cluster_uuid=self.cluster_uuid,
            default_gateway_ip=self.default_gateway_ip,
            description=self.description,
            dhcp_domain_name_server_lists=self.dhcp_domain_name_server_lists,
            dhcp_domain_search_lists=self.dhcp_domain_search_lists,
            dhcp_options=self.dhcp_options,
            dhcp_server_address=self.dhcp_server_address,
            dhcp_server_address_port=self.dhcp_server_address_port,
            enable_nat=self.enable_nat,
            id=self.id,
            ip_config_pool_list_ranges=self.ip_config_pool_list_ranges,
            is_external=self.is_external,
            message_lists=self.message_lists,
            metadata=self.metadata,
            name=self.name,
            network_function_chain_reference=self.network_function_chain_reference,
            owner_reference=self.owner_reference,
            prefix_length=self.prefix_length,
            project_reference=self.project_reference,
            state=self.state,
            subnet_id=self.subnet_id,
            subnet_ip=self.subnet_ip,
            subnet_name=self.subnet_name,
            subnet_type=self.subnet_type,
            vlan_id=self.vlan_id,
            vpc_reference=self.vpc_reference,
            vswitch_name=self.vswitch_name)


def get_subnet(additional_filters: Optional[Sequence[Union['GetSubnetAdditionalFilterArgs', 'GetSubnetAdditionalFilterArgsDict']]] = None,
               categories: Optional[Sequence[Union['GetSubnetCategoryArgs', 'GetSubnetCategoryArgsDict']]] = None,
               subnet_id: Optional[_builtins.str] = None,
               subnet_name: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubnetResult:
    """
    Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.


    :param Sequence[Union['GetSubnetAdditionalFilterArgs', 'GetSubnetAdditionalFilterArgsDict']] additional_filters: - Additional filters to narrow down list of subnets.
    :param Sequence[Union['GetSubnetCategoryArgs', 'GetSubnetCategoryArgsDict']] categories: The API Version.
    :param _builtins.str subnet_id: - (Optional) The ID for the subnet.
    :param _builtins.str subnet_name: - (Optional) The name for the subnet
    """
    __args__ = dict()
    __args__['additionalFilters'] = additional_filters
    __args__['categories'] = categories
    __args__['subnetId'] = subnet_id
    __args__['subnetName'] = subnet_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getSubnet:getSubnet', __args__, opts=opts, typ=GetSubnetResult).value

    return AwaitableGetSubnetResult(
        additional_filters=pulumi.get(__ret__, 'additional_filters'),
        api_version=pulumi.get(__ret__, 'api_version'),
        availability_zone_reference=pulumi.get(__ret__, 'availability_zone_reference'),
        categories=pulumi.get(__ret__, 'categories'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        cluster_uuid=pulumi.get(__ret__, 'cluster_uuid'),
        default_gateway_ip=pulumi.get(__ret__, 'default_gateway_ip'),
        description=pulumi.get(__ret__, 'description'),
        dhcp_domain_name_server_lists=pulumi.get(__ret__, 'dhcp_domain_name_server_lists'),
        dhcp_domain_search_lists=pulumi.get(__ret__, 'dhcp_domain_search_lists'),
        dhcp_options=pulumi.get(__ret__, 'dhcp_options'),
        dhcp_server_address=pulumi.get(__ret__, 'dhcp_server_address'),
        dhcp_server_address_port=pulumi.get(__ret__, 'dhcp_server_address_port'),
        enable_nat=pulumi.get(__ret__, 'enable_nat'),
        id=pulumi.get(__ret__, 'id'),
        ip_config_pool_list_ranges=pulumi.get(__ret__, 'ip_config_pool_list_ranges'),
        is_external=pulumi.get(__ret__, 'is_external'),
        message_lists=pulumi.get(__ret__, 'message_lists'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        network_function_chain_reference=pulumi.get(__ret__, 'network_function_chain_reference'),
        owner_reference=pulumi.get(__ret__, 'owner_reference'),
        prefix_length=pulumi.get(__ret__, 'prefix_length'),
        project_reference=pulumi.get(__ret__, 'project_reference'),
        state=pulumi.get(__ret__, 'state'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        subnet_ip=pulumi.get(__ret__, 'subnet_ip'),
        subnet_name=pulumi.get(__ret__, 'subnet_name'),
        subnet_type=pulumi.get(__ret__, 'subnet_type'),
        vlan_id=pulumi.get(__ret__, 'vlan_id'),
        vpc_reference=pulumi.get(__ret__, 'vpc_reference'),
        vswitch_name=pulumi.get(__ret__, 'vswitch_name'))
def get_subnet_output(additional_filters: Optional[pulumi.Input[Optional[Sequence[Union['GetSubnetAdditionalFilterArgs', 'GetSubnetAdditionalFilterArgsDict']]]]] = None,
                      categories: Optional[pulumi.Input[Optional[Sequence[Union['GetSubnetCategoryArgs', 'GetSubnetCategoryArgsDict']]]]] = None,
                      subnet_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      subnet_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSubnetResult]:
    """
    Provides a resource to create a subnet based on the input parameters. A subnet is a block of IP addresses.


    :param Sequence[Union['GetSubnetAdditionalFilterArgs', 'GetSubnetAdditionalFilterArgsDict']] additional_filters: - Additional filters to narrow down list of subnets.
    :param Sequence[Union['GetSubnetCategoryArgs', 'GetSubnetCategoryArgsDict']] categories: The API Version.
    :param _builtins.str subnet_id: - (Optional) The ID for the subnet.
    :param _builtins.str subnet_name: - (Optional) The name for the subnet
    """
    __args__ = dict()
    __args__['additionalFilters'] = additional_filters
    __args__['categories'] = categories
    __args__['subnetId'] = subnet_id
    __args__['subnetName'] = subnet_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getSubnet:getSubnet', __args__, opts=opts, typ=GetSubnetResult)
    return __ret__.apply(lambda __response__: GetSubnetResult(
        additional_filters=pulumi.get(__response__, 'additional_filters'),
        api_version=pulumi.get(__response__, 'api_version'),
        availability_zone_reference=pulumi.get(__response__, 'availability_zone_reference'),
        categories=pulumi.get(__response__, 'categories'),
        cluster_name=pulumi.get(__response__, 'cluster_name'),
        cluster_uuid=pulumi.get(__response__, 'cluster_uuid'),
        default_gateway_ip=pulumi.get(__response__, 'default_gateway_ip'),
        description=pulumi.get(__response__, 'description'),
        dhcp_domain_name_server_lists=pulumi.get(__response__, 'dhcp_domain_name_server_lists'),
        dhcp_domain_search_lists=pulumi.get(__response__, 'dhcp_domain_search_lists'),
        dhcp_options=pulumi.get(__response__, 'dhcp_options'),
        dhcp_server_address=pulumi.get(__response__, 'dhcp_server_address'),
        dhcp_server_address_port=pulumi.get(__response__, 'dhcp_server_address_port'),
        enable_nat=pulumi.get(__response__, 'enable_nat'),
        id=pulumi.get(__response__, 'id'),
        ip_config_pool_list_ranges=pulumi.get(__response__, 'ip_config_pool_list_ranges'),
        is_external=pulumi.get(__response__, 'is_external'),
        message_lists=pulumi.get(__response__, 'message_lists'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        network_function_chain_reference=pulumi.get(__response__, 'network_function_chain_reference'),
        owner_reference=pulumi.get(__response__, 'owner_reference'),
        prefix_length=pulumi.get(__response__, 'prefix_length'),
        project_reference=pulumi.get(__response__, 'project_reference'),
        state=pulumi.get(__response__, 'state'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        subnet_ip=pulumi.get(__response__, 'subnet_ip'),
        subnet_name=pulumi.get(__response__, 'subnet_name'),
        subnet_type=pulumi.get(__response__, 'subnet_type'),
        vlan_id=pulumi.get(__response__, 'vlan_id'),
        vpc_reference=pulumi.get(__response__, 'vpc_reference'),
        vswitch_name=pulumi.get(__response__, 'vswitch_name')))
