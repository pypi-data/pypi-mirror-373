# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAuthorizationPolicyV2Result',
    'AwaitableGetAuthorizationPolicyV2Result',
    'get_authorization_policy_v2',
    'get_authorization_policy_v2_output',
]

@pulumi.output_type
class GetAuthorizationPolicyV2Result:
    """
    A collection of values returned by getAuthorizationPolicyV2.
    """
    def __init__(__self__, authorization_policy_type=None, client_name=None, created_by=None, created_time=None, description=None, display_name=None, entities=None, ext_id=None, id=None, identities=None, is_system_defined=None, last_updated_time=None, role=None):
        if authorization_policy_type and not isinstance(authorization_policy_type, str):
            raise TypeError("Expected argument 'authorization_policy_type' to be a str")
        pulumi.set(__self__, "authorization_policy_type", authorization_policy_type)
        if client_name and not isinstance(client_name, str):
            raise TypeError("Expected argument 'client_name' to be a str")
        pulumi.set(__self__, "client_name", client_name)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if entities and not isinstance(entities, list):
            raise TypeError("Expected argument 'entities' to be a list")
        pulumi.set(__self__, "entities", entities)
        if ext_id and not isinstance(ext_id, str):
            raise TypeError("Expected argument 'ext_id' to be a str")
        pulumi.set(__self__, "ext_id", ext_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identities and not isinstance(identities, list):
            raise TypeError("Expected argument 'identities' to be a list")
        pulumi.set(__self__, "identities", identities)
        if is_system_defined and not isinstance(is_system_defined, bool):
            raise TypeError("Expected argument 'is_system_defined' to be a bool")
        pulumi.set(__self__, "is_system_defined", is_system_defined)
        if last_updated_time and not isinstance(last_updated_time, str):
            raise TypeError("Expected argument 'last_updated_time' to be a str")
        pulumi.set(__self__, "last_updated_time", last_updated_time)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)

    @_builtins.property
    @pulumi.getter(name="authorizationPolicyType")
    def authorization_policy_type(self) -> _builtins.str:
        return pulumi.get(self, "authorization_policy_type")

    @_builtins.property
    @pulumi.getter(name="clientName")
    def client_name(self) -> _builtins.str:
        return pulumi.get(self, "client_name")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def entities(self) -> Sequence['outputs.GetAuthorizationPolicyV2EntityResult']:
        return pulumi.get(self, "entities")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> _builtins.str:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetAuthorizationPolicyV2IdentityResult']:
        return pulumi.get(self, "identities")

    @_builtins.property
    @pulumi.getter(name="isSystemDefined")
    def is_system_defined(self) -> _builtins.bool:
        return pulumi.get(self, "is_system_defined")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> _builtins.str:
        return pulumi.get(self, "last_updated_time")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        return pulumi.get(self, "role")


class AwaitableGetAuthorizationPolicyV2Result(GetAuthorizationPolicyV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationPolicyV2Result(
            authorization_policy_type=self.authorization_policy_type,
            client_name=self.client_name,
            created_by=self.created_by,
            created_time=self.created_time,
            description=self.description,
            display_name=self.display_name,
            entities=self.entities,
            ext_id=self.ext_id,
            id=self.id,
            identities=self.identities,
            is_system_defined=self.is_system_defined,
            last_updated_time=self.last_updated_time,
            role=self.role)


def get_authorization_policy_v2(ext_id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizationPolicyV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getAuthorizationPolicyV2:getAuthorizationPolicyV2', __args__, opts=opts, typ=GetAuthorizationPolicyV2Result).value

    return AwaitableGetAuthorizationPolicyV2Result(
        authorization_policy_type=pulumi.get(__ret__, 'authorization_policy_type'),
        client_name=pulumi.get(__ret__, 'client_name'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_time=pulumi.get(__ret__, 'created_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        entities=pulumi.get(__ret__, 'entities'),
        ext_id=pulumi.get(__ret__, 'ext_id'),
        id=pulumi.get(__ret__, 'id'),
        identities=pulumi.get(__ret__, 'identities'),
        is_system_defined=pulumi.get(__ret__, 'is_system_defined'),
        last_updated_time=pulumi.get(__ret__, 'last_updated_time'),
        role=pulumi.get(__ret__, 'role'))
def get_authorization_policy_v2_output(ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAuthorizationPolicyV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getAuthorizationPolicyV2:getAuthorizationPolicyV2', __args__, opts=opts, typ=GetAuthorizationPolicyV2Result)
    return __ret__.apply(lambda __response__: GetAuthorizationPolicyV2Result(
        authorization_policy_type=pulumi.get(__response__, 'authorization_policy_type'),
        client_name=pulumi.get(__response__, 'client_name'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_time=pulumi.get(__response__, 'created_time'),
        description=pulumi.get(__response__, 'description'),
        display_name=pulumi.get(__response__, 'display_name'),
        entities=pulumi.get(__response__, 'entities'),
        ext_id=pulumi.get(__response__, 'ext_id'),
        id=pulumi.get(__response__, 'id'),
        identities=pulumi.get(__response__, 'identities'),
        is_system_defined=pulumi.get(__response__, 'is_system_defined'),
        last_updated_time=pulumi.get(__response__, 'last_updated_time'),
        role=pulumi.get(__response__, 'role')))
