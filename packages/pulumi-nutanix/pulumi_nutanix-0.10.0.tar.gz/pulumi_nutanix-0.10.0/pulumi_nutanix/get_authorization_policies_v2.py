# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAuthorizationPoliciesV2Result',
    'AwaitableGetAuthorizationPoliciesV2Result',
    'get_authorization_policies_v2',
    'get_authorization_policies_v2_output',
]

@pulumi.output_type
class GetAuthorizationPoliciesV2Result:
    """
    A collection of values returned by getAuthorizationPoliciesV2.
    """
    def __init__(__self__, auth_policies=None, expand=None, filter=None, id=None, limit=None, order_by=None, page=None, select=None):
        if auth_policies and not isinstance(auth_policies, list):
            raise TypeError("Expected argument 'auth_policies' to be a list")
        pulumi.set(__self__, "auth_policies", auth_policies)
        if expand and not isinstance(expand, str):
            raise TypeError("Expected argument 'expand' to be a str")
        pulumi.set(__self__, "expand", expand)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if page and not isinstance(page, int):
            raise TypeError("Expected argument 'page' to be a int")
        pulumi.set(__self__, "page", page)
        if select and not isinstance(select, str):
            raise TypeError("Expected argument 'select' to be a str")
        pulumi.set(__self__, "select", select)

    @_builtins.property
    @pulumi.getter(name="authPolicies")
    def auth_policies(self) -> Sequence['outputs.GetAuthorizationPoliciesV2AuthPolicyResult']:
        return pulumi.get(self, "auth_policies")

    @_builtins.property
    @pulumi.getter
    def expand(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "expand")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "order_by")

    @_builtins.property
    @pulumi.getter
    def page(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "page")

    @_builtins.property
    @pulumi.getter
    def select(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "select")


class AwaitableGetAuthorizationPoliciesV2Result(GetAuthorizationPoliciesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationPoliciesV2Result(
            auth_policies=self.auth_policies,
            expand=self.expand,
            filter=self.filter,
            id=self.id,
            limit=self.limit,
            order_by=self.order_by,
            page=self.page,
            select=self.select)


def get_authorization_policies_v2(expand: Optional[_builtins.str] = None,
                                  filter: Optional[_builtins.str] = None,
                                  limit: Optional[_builtins.int] = None,
                                  order_by: Optional[_builtins.str] = None,
                                  page: Optional[_builtins.int] = None,
                                  select: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizationPoliciesV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['expand'] = expand
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['orderBy'] = order_by
    __args__['page'] = page
    __args__['select'] = select
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getAuthorizationPoliciesV2:getAuthorizationPoliciesV2', __args__, opts=opts, typ=GetAuthorizationPoliciesV2Result).value

    return AwaitableGetAuthorizationPoliciesV2Result(
        auth_policies=pulumi.get(__ret__, 'auth_policies'),
        expand=pulumi.get(__ret__, 'expand'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        order_by=pulumi.get(__ret__, 'order_by'),
        page=pulumi.get(__ret__, 'page'),
        select=pulumi.get(__ret__, 'select'))
def get_authorization_policies_v2_output(expand: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         limit: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                         order_by: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         page: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                         select: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAuthorizationPoliciesV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['expand'] = expand
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['orderBy'] = order_by
    __args__['page'] = page
    __args__['select'] = select
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getAuthorizationPoliciesV2:getAuthorizationPoliciesV2', __args__, opts=opts, typ=GetAuthorizationPoliciesV2Result)
    return __ret__.apply(lambda __response__: GetAuthorizationPoliciesV2Result(
        auth_policies=pulumi.get(__response__, 'auth_policies'),
        expand=pulumi.get(__response__, 'expand'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        limit=pulumi.get(__response__, 'limit'),
        order_by=pulumi.get(__response__, 'order_by'),
        page=pulumi.get(__response__, 'page'),
        select=pulumi.get(__response__, 'select')))
