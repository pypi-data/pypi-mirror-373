# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetServiceGroupResult',
    'AwaitableGetServiceGroupResult',
    'get_service_group',
    'get_service_group_output',
]

@pulumi.output_type
class GetServiceGroupResult:
    """
    A collection of values returned by getServiceGroup.
    """
    def __init__(__self__, description=None, id=None, is_system_defined=None, name=None, service_lists=None, uuid=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_system_defined and not isinstance(is_system_defined, bool):
            raise TypeError("Expected argument 'is_system_defined' to be a bool")
        pulumi.set(__self__, "is_system_defined", is_system_defined)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_lists and not isinstance(service_lists, list):
            raise TypeError("Expected argument 'service_lists' to be a list")
        pulumi.set(__self__, "service_lists", service_lists)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isSystemDefined")
    def is_system_defined(self) -> _builtins.bool:
        return pulumi.get(self, "is_system_defined")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceLists")
    def service_lists(self) -> Sequence['outputs.GetServiceGroupServiceListResult']:
        return pulumi.get(self, "service_lists")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        return pulumi.get(self, "uuid")


class AwaitableGetServiceGroupResult(GetServiceGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceGroupResult(
            description=self.description,
            id=self.id,
            is_system_defined=self.is_system_defined,
            name=self.name,
            service_lists=self.service_lists,
            uuid=self.uuid)


def get_service_group(uuid: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getServiceGroup:getServiceGroup', __args__, opts=opts, typ=GetServiceGroupResult).value

    return AwaitableGetServiceGroupResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_system_defined=pulumi.get(__ret__, 'is_system_defined'),
        name=pulumi.get(__ret__, 'name'),
        service_lists=pulumi.get(__ret__, 'service_lists'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_service_group_output(uuid: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getServiceGroup:getServiceGroup', __args__, opts=opts, typ=GetServiceGroupResult)
    return __ret__.apply(lambda __response__: GetServiceGroupResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        is_system_defined=pulumi.get(__response__, 'is_system_defined'),
        name=pulumi.get(__response__, 'name'),
        service_lists=pulumi.get(__response__, 'service_lists'),
        uuid=pulumi.get(__response__, 'uuid')))
