# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetServiceGroupV2Result',
    'AwaitableGetServiceGroupV2Result',
    'get_service_group_v2',
    'get_service_group_v2_output',
]

@pulumi.output_type
class GetServiceGroupV2Result:
    """
    A collection of values returned by getServiceGroupV2.
    """
    def __init__(__self__, created_by=None, description=None, ext_id=None, icmp_services=None, id=None, is_system_defined=None, links=None, name=None, policy_references=None, tcp_services=None, tenant_id=None, udp_services=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if ext_id and not isinstance(ext_id, str):
            raise TypeError("Expected argument 'ext_id' to be a str")
        pulumi.set(__self__, "ext_id", ext_id)
        if icmp_services and not isinstance(icmp_services, list):
            raise TypeError("Expected argument 'icmp_services' to be a list")
        pulumi.set(__self__, "icmp_services", icmp_services)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_system_defined and not isinstance(is_system_defined, bool):
            raise TypeError("Expected argument 'is_system_defined' to be a bool")
        pulumi.set(__self__, "is_system_defined", is_system_defined)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_references and not isinstance(policy_references, list):
            raise TypeError("Expected argument 'policy_references' to be a list")
        pulumi.set(__self__, "policy_references", policy_references)
        if tcp_services and not isinstance(tcp_services, list):
            raise TypeError("Expected argument 'tcp_services' to be a list")
        pulumi.set(__self__, "tcp_services", tcp_services)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if udp_services and not isinstance(udp_services, list):
            raise TypeError("Expected argument 'udp_services' to be a list")
        pulumi.set(__self__, "udp_services", udp_services)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        created by.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A user defined annotation for a Service Group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="extId")
    def ext_id(self) -> _builtins.str:
        return pulumi.get(self, "ext_id")

    @_builtins.property
    @pulumi.getter(name="icmpServices")
    def icmp_services(self) -> Sequence['outputs.GetServiceGroupV2IcmpServiceResult']:
        """
        Icmp Type Code List.
        """
        return pulumi.get(self, "icmp_services")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isSystemDefined")
    def is_system_defined(self) -> _builtins.bool:
        """
        Service Group is system defined or not.
        """
        return pulumi.get(self, "is_system_defined")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetServiceGroupV2LinkResult']:
        """
        A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
        """
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A short identifier for a Service Group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyReferences")
    def policy_references(self) -> Sequence[_builtins.str]:
        """
        Reference to policy associated with Service Group.
        """
        return pulumi.get(self, "policy_references")

    @_builtins.property
    @pulumi.getter(name="tcpServices")
    def tcp_services(self) -> Sequence['outputs.GetServiceGroupV2TcpServiceResult']:
        """
        List of TCP ports in the service.
        """
        return pulumi.get(self, "tcp_services")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        """
        A globally unique identifier that represents the tenant that owns this entity.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="udpServices")
    def udp_services(self) -> Sequence['outputs.GetServiceGroupV2UdpServiceResult']:
        """
        List of UDP ports in the service.
        """
        return pulumi.get(self, "udp_services")


class AwaitableGetServiceGroupV2Result(GetServiceGroupV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceGroupV2Result(
            created_by=self.created_by,
            description=self.description,
            ext_id=self.ext_id,
            icmp_services=self.icmp_services,
            id=self.id,
            is_system_defined=self.is_system_defined,
            links=self.links,
            name=self.name,
            policy_references=self.policy_references,
            tcp_services=self.tcp_services,
            tenant_id=self.tenant_id,
            udp_services=self.udp_services)


def get_service_group_v2(ext_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceGroupV2Result:
    """
    Get an service Group by ExtID

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    service_group = nutanix.get_service_group_v2(ext_id="07167778-266d-4052-9992-f30cbfd52e83")
    ```


    :param _builtins.str ext_id: service group UUID.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getServiceGroupV2:getServiceGroupV2', __args__, opts=opts, typ=GetServiceGroupV2Result).value

    return AwaitableGetServiceGroupV2Result(
        created_by=pulumi.get(__ret__, 'created_by'),
        description=pulumi.get(__ret__, 'description'),
        ext_id=pulumi.get(__ret__, 'ext_id'),
        icmp_services=pulumi.get(__ret__, 'icmp_services'),
        id=pulumi.get(__ret__, 'id'),
        is_system_defined=pulumi.get(__ret__, 'is_system_defined'),
        links=pulumi.get(__ret__, 'links'),
        name=pulumi.get(__ret__, 'name'),
        policy_references=pulumi.get(__ret__, 'policy_references'),
        tcp_services=pulumi.get(__ret__, 'tcp_services'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        udp_services=pulumi.get(__ret__, 'udp_services'))
def get_service_group_v2_output(ext_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceGroupV2Result]:
    """
    Get an service Group by ExtID

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    service_group = nutanix.get_service_group_v2(ext_id="07167778-266d-4052-9992-f30cbfd52e83")
    ```


    :param _builtins.str ext_id: service group UUID.
    """
    __args__ = dict()
    __args__['extId'] = ext_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getServiceGroupV2:getServiceGroupV2', __args__, opts=opts, typ=GetServiceGroupV2Result)
    return __ret__.apply(lambda __response__: GetServiceGroupV2Result(
        created_by=pulumi.get(__response__, 'created_by'),
        description=pulumi.get(__response__, 'description'),
        ext_id=pulumi.get(__response__, 'ext_id'),
        icmp_services=pulumi.get(__response__, 'icmp_services'),
        id=pulumi.get(__response__, 'id'),
        is_system_defined=pulumi.get(__response__, 'is_system_defined'),
        links=pulumi.get(__response__, 'links'),
        name=pulumi.get(__response__, 'name'),
        policy_references=pulumi.get(__response__, 'policy_references'),
        tcp_services=pulumi.get(__response__, 'tcp_services'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        udp_services=pulumi.get(__response__, 'udp_services')))
