# autogenerated module
from typing import List, Optional, TYPE_CHECKING

from ._schema import dataclass, field, DictMixin

if TYPE_CHECKING:   # Fix for pycharm autocompletion https://youtrack.jetbrains.com/issue/PY-54560
    from dataclasses import dataclass, field

from . import meta_v1


@dataclass
class AggregationRule(DictMixin):
    r"""AggregationRule describes how to locate ClusterRoles to aggregate into the
      ClusterRole

      **parameters**

      * **clusterRoleSelectors** ``Optional[List[meta_v1.LabelSelector]]`` - ClusterRoleSelectors holds a list of selectors which will be used to find
        ClusterRoles and create the rules. If any of the selectors match, then the
        ClusterRole's permissions will be added
    """
    clusterRoleSelectors: 'Optional[List[meta_v1.LabelSelector]]' = None


@dataclass
class ClusterRole(DictMixin):
    r"""ClusterRole is a cluster level, logical grouping of PolicyRules that can be
      referenced as a unit by a RoleBinding or ClusterRoleBinding.

      **parameters**

      * **aggregationRule** ``Optional[AggregationRule]`` - AggregationRule is an optional field that describes how to build the Rules for
        this ClusterRole. If AggregationRule is set, then the Rules are controller
        managed and direct changes to Rules will be stomped by the controller.
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ObjectMeta]`` - Standard object's metadata.
      * **rules** ``Optional[List[PolicyRule]]`` - Rules holds all the PolicyRules for this ClusterRole
    """
    aggregationRule: 'Optional[AggregationRule]' = None
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ObjectMeta]' = None
    rules: 'Optional[List[PolicyRule]]' = None

    def __post_init__(self):
        self.apiVersion = 'rbac.authorization.k8s.io/v1'
        self.kind = 'ClusterRole'


@dataclass
class ClusterRoleBinding(DictMixin):
    r"""ClusterRoleBinding references a ClusterRole, but not contain it.  It can
      reference a ClusterRole in the global namespace, and adds who information via
      Subject.

      **parameters**

      * **roleRef** ``RoleRef`` - RoleRef can only reference a ClusterRole in the global namespace. If the
        RoleRef cannot be resolved, the Authorizer must return an error. This field is
        immutable.
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ObjectMeta]`` - Standard object's metadata.
      * **subjects** ``Optional[List[Subject]]`` - Subjects holds references to the objects the role applies to.
    """
    roleRef: 'RoleRef'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ObjectMeta]' = None
    subjects: 'Optional[List[Subject]]' = None

    def __post_init__(self):
        self.apiVersion = 'rbac.authorization.k8s.io/v1'
        self.kind = 'ClusterRoleBinding'


@dataclass
class ClusterRoleBindingList(DictMixin):
    r"""ClusterRoleBindingList is a collection of ClusterRoleBindings

      **parameters**

      * **items** ``List[ClusterRoleBinding]`` - Items is a list of ClusterRoleBindings
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ListMeta]`` - Standard object's metadata.
    """
    items: 'List[ClusterRoleBinding]'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ListMeta]' = None

    def __post_init__(self):
        self.apiVersion = 'rbac.authorization.k8s.io/v1'
        self.kind = 'ClusterRoleBindingList'


@dataclass
class ClusterRoleList(DictMixin):
    r"""ClusterRoleList is a collection of ClusterRoles

      **parameters**

      * **items** ``List[ClusterRole]`` - Items is a list of ClusterRoles
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ListMeta]`` - Standard object's metadata.
    """
    items: 'List[ClusterRole]'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ListMeta]' = None

    def __post_init__(self):
        self.apiVersion = 'rbac.authorization.k8s.io/v1'
        self.kind = 'ClusterRoleList'


@dataclass
class PolicyRule(DictMixin):
    r"""PolicyRule holds information that describes a policy rule, but does not
      contain information about who the rule applies to or which namespace the rule
      applies to.

      **parameters**

      * **verbs** ``List[str]`` - Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this
        rule. '*' represents all verbs.
      * **apiGroups** ``Optional[List[str]]`` - APIGroups is the name of the APIGroup that contains the resources.  If
        multiple API groups are specified, any action requested against one of the
        enumerated resources in any API group will be allowed. "" represents the core
        API group and "*" represents all API groups.
      * **nonResourceURLs** ``Optional[List[str]]`` - NonResourceURLs is a set of partial urls that a user should have access to.
        *s are allowed, but only as the full, final step in the path Since
        non-resource URLs are not namespaced, this field is only applicable for
        ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to
        API resources (such as "pods" or "secrets") or non-resource URL paths (such as
        "/api"),  but not both.
      * **resourceNames** ``Optional[List[str]]`` - ResourceNames is an optional white list of names that the rule applies to.  An
        empty set means that everything is allowed.
      * **resources** ``Optional[List[str]]`` - Resources is a list of resources this rule applies to. '*' represents all
        resources.
    """
    verbs: 'List[str]'
    apiGroups: 'Optional[List[str]]' = None
    nonResourceURLs: 'Optional[List[str]]' = None
    resourceNames: 'Optional[List[str]]' = None
    resources: 'Optional[List[str]]' = None


@dataclass
class Role(DictMixin):
    r"""Role is a namespaced, logical grouping of PolicyRules that can be referenced
      as a unit by a RoleBinding.

      **parameters**

      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ObjectMeta]`` - Standard object's metadata.
      * **rules** ``Optional[List[PolicyRule]]`` - Rules holds all the PolicyRules for this Role
    """
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ObjectMeta]' = None
    rules: 'Optional[List[PolicyRule]]' = None

    def __post_init__(self):
        self.apiVersion = 'rbac.authorization.k8s.io/v1'
        self.kind = 'Role'


@dataclass
class RoleBinding(DictMixin):
    r"""RoleBinding references a role, but does not contain it.  It can reference a
      Role in the same namespace or a ClusterRole in the global namespace. It adds
      who information via Subjects and namespace information by which namespace it
      exists in.  RoleBindings in a given namespace only have effect in that
      namespace.

      **parameters**

      * **roleRef** ``RoleRef`` - RoleRef can reference a Role in the current namespace or a ClusterRole in the
        global namespace. If the RoleRef cannot be resolved, the Authorizer must
        return an error. This field is immutable.
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ObjectMeta]`` - Standard object's metadata.
      * **subjects** ``Optional[List[Subject]]`` - Subjects holds references to the objects the role applies to.
    """
    roleRef: 'RoleRef'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ObjectMeta]' = None
    subjects: 'Optional[List[Subject]]' = None

    def __post_init__(self):
        self.apiVersion = 'rbac.authorization.k8s.io/v1'
        self.kind = 'RoleBinding'


@dataclass
class RoleBindingList(DictMixin):
    r"""RoleBindingList is a collection of RoleBindings

      **parameters**

      * **items** ``List[RoleBinding]`` - Items is a list of RoleBindings
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ListMeta]`` - Standard object's metadata.
    """
    items: 'List[RoleBinding]'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ListMeta]' = None

    def __post_init__(self):
        self.apiVersion = 'rbac.authorization.k8s.io/v1'
        self.kind = 'RoleBindingList'


@dataclass
class RoleList(DictMixin):
    r"""RoleList is a collection of Roles

      **parameters**

      * **items** ``List[Role]`` - Items is a list of Roles
      * **apiVersion** ``Optional[str]`` - APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
      * **kind** ``Optional[str]`` - Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
      * **metadata** ``Optional[meta_v1.ListMeta]`` - Standard object's metadata.
    """
    items: 'List[Role]'
    apiVersion: 'Optional[str]' = None
    kind: 'Optional[str]' = None
    metadata: 'Optional[meta_v1.ListMeta]' = None

    def __post_init__(self):
        self.apiVersion = 'rbac.authorization.k8s.io/v1'
        self.kind = 'RoleList'


@dataclass
class RoleRef(DictMixin):
    r"""RoleRef contains information that points to the role being used

      **parameters**

      * **apiGroup** ``str`` - APIGroup is the group for the resource being referenced
      * **kind** ``str`` - Kind is the type of resource being referenced
      * **name** ``str`` - Name is the name of resource being referenced
    """
    apiGroup: 'str'
    kind: 'str'
    name: 'str'


@dataclass
class Subject(DictMixin):
    r"""Subject contains a reference to the object or user identities a role binding
      applies to.  This can either hold a direct API object reference, or a value
      for non-objects such as user and group names.

      **parameters**

      * **kind** ``str`` - Kind of object being referenced. Values defined by this API group are "User",
        "Group", and "ServiceAccount". If the Authorizer does not recognized the kind
        value, the Authorizer should report an error.
      * **name** ``str`` - Name of the object being referenced.
      * **apiGroup** ``Optional[str]`` - APIGroup holds the API group of the referenced subject. Defaults to "" for
        ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and
        Group subjects.
      * **namespace** ``Optional[str]`` - Namespace of the referenced object.  If the object kind is non-namespace, such
        as "User" or "Group", and this value is not empty the Authorizer should report
        an error.
    """
    kind: 'str'
    name: 'str'
    apiGroup: 'Optional[str]' = None
    namespace: 'Optional[str]' = None


