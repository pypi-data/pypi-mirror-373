[project]
name = "symbolic-compartmental-model"
description = "Analyzing protein-complex dynamics using metabolic age quantified by stable-isotope labeling"
readme = { file = "README.md", content-type = "text/markdown" }
license = "MIT"
authors = [
    { name = "Elad Noor", email = "elad.noor@weizmann.ac.il" },
    { name = "Evgeny Onishchenko", email = "evgeny.onishchenko@uib.no" }
]
keywords = [
    "protein complex",
    "macromolecules",
    "assembly",
    "kinetic analysis"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = ["version"]
requires-python = ">=3.9"
dependencies = [
    "numpy>=2.0.2",
    "scipy>=1.13.1",
    "pandas>=2.2.3",
    "seaborn>=0.13.2",
    "sympy>=1.13.3",
    "cvxpy>=1.6",
    "matplotlib>=3.9.4",
    "more_itertools>=10",
    "networkx>=3.2.1",
    "pynverse"
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-raises",
    "pytest-mock",
    "pytest-allclose"
]
development = [
    "ruff",
    "safety",
    "tox",
    "twine"
]
deployment = [
    "click",
    "click-log",
    "python-dateutil",
    "requests",
]
docs = [
    "sphinxcontrib-bibtex>=2.6",
    "sphinx-autoapi>=3.6",
    "sphinx-rtd-theme>=3.0",
    "nbsphinx>=0.9",
]

[project.urls]
repository = "https://gitlab.com/elad.noor/symbolic-compartmental-model/"
documentation = "https://gitlab.com/elad.noor/symbolic-compartmental-model/"

[build-system]
requires = [ "setuptools>=41", "wheel", "setuptools-git-versioning>=2.0,<3", ]
build-backend = "setuptools.build_meta"

[tool.setuptools]
zip-safe = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools-git-versioning]
enabled = true

[tool.ruff]
include = ["pyproject.toml", "src/**/*.py", "script/*.ipynb", "tests/**/*.py"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
