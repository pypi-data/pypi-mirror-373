import json
from pathlib import Path
from typing import Dict, List

from foldeverything.data.data import (
    PDB,
    ChainInfo,
    InterfaceInfo,
    Record,
    Target,
)
from foldeverything.data.filter.static.filter import StaticFilter
from foldeverything.data.parse.mmcif import parse_mmcif
from foldeverything.task.process.process import Resource
from foldeverything.task.process.targets.target import TargetsSource

PDB_IDS = {
    "7fct",
    "7qa1",
    "7qnl",
    "7qpk",
    "7qpl",
    "7qqd",
    "7qrr",
    "7qsj",
    "7r1n",
    "7r5i",
    "7s2j",
    "7sc4",
    "7sfy",
    "7spq",
    "7t4w",
    "7tl6",
    "7tpu",
    "7tzl",
    "7u08",
    "7u71",
    "7uba",
    "7udl",
    "7ug2",
    "7ui4",
    "7ui8",
    "7uk8",
    "7unh",
    "7uoi",
    "7uqu",
    "7ur2",
    "7urp",
    "7uwv",
    "7uxa",
    "7uyx",
    "7v34",
    "7vs6",
    "7vxt",
    "7w91",
    "7wju",
    "7wkp",
    "7wmy",
    "7wnh",
    "7woi",
    "7wrn",
    "7wuy",
    "7wwc",
    "7x2x",
    "7x6g",
    "7xbj",
    "7xbr",
    "7xca",
    "7xcc",
    "7xf1",
    "7xf2",
    "7xfs",
    "7xfu",
    "7xfz",
    "7xgs",
    "7xgt",
    "7xgv",
    "7xh4",
    "7xhp",
    "7xhz",
    "7xl7",
    "7xmj",
    "7xmw",
    "7xnj",
    "7xp0",
    "7xpc",
    "7xrx",
    "7xs3",
    "7xsg",
    "7xvi",
    "7xwy",
    "7xyo",
    "7xz3",
    "7y01",
    "7y16",
    "7y1s",
    "7y3z",
    "7y43",
    "7y4h",
    "7y7o",
    "7y8h",
    "7y8s",
    "7y95",
    "7y9a",
    "7y9g",
    "7ydq",
    "7ydw",
    "7yfx",
    "7yh1",
    "7yh2",
    "7yh4",
    "7yh5",
    "7yia",
    "7yk3",
    "7ykg",
    "7ykm",
    "7yl4",
    "7ylq",
    "7ylz",
    "7yn2",
    "7ynx",
    "7yoj",
    "7ypd",
    "7ypo",
    "7ypq",
    "7ypr",
    "7yr9",
    "7ysi",
    "7ytu",
    "7yuj",
    "7yuk",
    "7yun",
    "7yyg",
    "7z3i",
    "7z64",
    "7z6e",
    "7z8e",
    "7zao",
    "7zca",
    "7zcb",
    "7zds",
    "7zfr",
    "7zie",
    "7zlq",
    "7zpf",
    "7zpn",
    "7zrz",
    "8a0a",
    "8a16",
    "8a39",
    "8a50",
    "8a82",
    "8a90",
    "8a9n",
    "8aa9",
    "8aas",
    "8abv",
    "8aca",
    "8acc",
    "8acr",
    "8adc",
    "8add",
    "8aep",
    "8af9",
    "8agg",
    "8agr",
    "8ahd",
    "8ahz",
    "8amu",
    "8an0",
    "8ant",
    "8anu",
    "8ard",
    "8are",
    "8au6",
    "8aw0",
    "8axf",
    "8axj",
    "8axt",
    "8ay2",
    "8ayr",
    "8ayv",
    "8b2e",
    "8b2h",
    "8b2s",
    "8b3e",
    "8b3w",
    "8b3z",
    "8b45",
    "8b4c",
    "8b4d",
    "8b4e",
    "8b4h",
    "8b5w",
    "8b6a",
    "8b6p",
    "8b6q",
    "8b6u",
    "8bat",
    "8bbr",
    "8bbz",
    "8bck",
    "8bdq",
    "8bf8",
    "8bfy",
    "8bh8",
    "8bh9",
    "8bid",
    "8bj3",
    "8bl6",
    "8bnb",
    "8brd",
    "8brp",
    "8bry",
    "8bux",
    "8bve",
    "8bvi",
    "8bvk",
    "8bw6",
    "8by5",
    "8byw",
    "8bz2",
    "8bz4",
    "8c26",
    "8c27",
    "8c4d",
    "8c7g",
    "8c9v",
    "8cb2",
    "8cbv",
    "8ceg",
    "8cgl",
    "8ch4",
    "8chw",
    "8chx",
    "8cid",
    "8cih",
    "8cil",
    "8cjg",
    "8ck0",
    "8clu",
    "8clz",
    "8cmq",
    "8cpk",
    "8cpn",
    "8cpq",
    "8cqm",
    "8cqo",
    "8cr7",
    "8d0p",
    "8d40",
    "8d49",
    "8d4a",
    "8d4b",
    "8daj",
    "8deo",
    "8dge",
    "8dhj",
    "8dhl",
    "8dq6",
    "8dsp",
    "8dtq",
    "8dvq",
    "8dwj",
    "8dx0",
    "8dzj",
    "8e2b",
    "8e55",
    "8e5d",
    "8e5e",
    "8e7f",
    "8eb5",
    "8ebb",
    "8ec3",
    "8eel",
    "8efz",
    "8ehn",
    "8eht",
    "8eil",
    "8ein",
    "8eiz",
    "8enr",
    "8eov",
    "8er5",
    "8erc",
    "8erm",
    "8esl",
    "8ewg",
    "8ex9",
    "8exa",
    "8ezw",
    "8f5d",
    "8f5g",
    "8f70",
    "8f72",
    "8f7n",
    "8f9y",
    "8fbj",
    "8fbn",
    "8fit",
    "8fjd",
    "8fje",
    "8fkl",
    "8fnr",
    "8ftv",
    "8fuq",
    "8fw7",
    "8fx9",
    "8fxf",
    "8g0n",
    "8g2v",
    "8g32",
    "8g49",
    "8g53",
    "8g5s",
    "8g8e",
    "8ga6",
    "8gaq",
    "8gdw",
    "8gh8",
    "8ghz",
    "8gi1",
    "8gkh",
    "8gkv",
    "8gld",
    "8gmx",
    "8gmz",
    "8gn6",
    "8goy",
    "8gpp",
    "8gps",
    "8gsr",
    "8gsx",
    "8gsy",
    "8gty",
    "8gxr",
    "8gy0",
    "8gy4",
    "8gyg",
    "8gyr",
    "8h0l",
    "8h18",
    "8h1j",
    "8h2n",
    "8h3z",
    "8h55",
    "8h5s",
    "8h7a",
    "8h8p",
    "8haw",
    "8hbb",
    "8hbr",
    "8hdu",
    "8hdv",
    "8he2",
    "8hf2",
    "8hfc",
    "8hfp",
    "8hgu",
    "8hhl",
    "8hhm",
    "8hhv",
    "8hi8",
    "8hig",
    "8hio",
    "8hiu",
    "8hke",
    "8hl8",
    "8hlg",
    "8hm4",
    "8hml",
    "8hn0",
    "8hno",
    "8hp8",
    "8hr5",
    "8htx",
    "8huz",
    "8hvc",
    "8i3f",
    "8i3j",
    "8i3x",
    "8ia3",
    "8ibw",
    "8ibx",
    "8iby",
    "8ibz",
    "8ic6",
    "8ie4",
    "8if8",
    "8ifk",
    "8iha",
    "8iib",
    "8ijt",
    "8iks",
    "8il8",
    "8ila",
    "8ill",
    "8im8",
    "8imd",
    "8ims",
    "8in6",
    "8in8",
    "8ioi",
    "8iom",
    "8ioo",
    "8ip1",
    "8ipq",
    "8iq8",
    "8iq9",
    "8iqc",
    "8ir2",
    "8irq",
    "8iss",
    "8isz",
    "8itn",
    "8ito",
    "8iub",
    "8ivi",
    "8ivz",
    "8iw5",
    "8iwp",
    "8j0q",
    "8j12",
    "8j1j",
    "8j3r",
    "8j48",
    "8j69",
    "8j8h",
    "8j9g",
    "8jah",
    "8jdg",
    "8je0",
    "8jfr",
    "8jfu",
    "8jhr",
    "8jhu",
    "8ji2",
    "8jmi",
    "8jmr",
    "8jnm",
    "8jnx",
    "8jp0",
    "8jqe",
    "8ju7",
    "8jw3",
    "8jws",
    "8jzx",
    "8k1f",
    "8k1i",
    "8k1r",
    "8k34",
    "8k3d",
    "8k3f",
    "8k4l",
    "8k5k",
    "8k5u",
    "8k76",
    "8k7x",
    "8k7y",
    "8k86",
    "8k8a",
    "8kgz",
    "8oei",
    "8ohi",
    "8oic",
    "8ojn",
    "8ok3",
    "8ok7",
    "8okh",
    "8olj",
    "8oml",
    "8oq0",
    "8oqj",
    "8ou1",
    "8ow8",
    "8owf",
    "8owi",
    "8oxu",
    "8oyy",
    "8ozd",
    "8oze",
    "8p0c",
    "8p26",
    "8p5q",
    "8p6j",
    "8p6m",
    "8pag",
    "8paq",
    "8pe3",
    "8phb",
    "8pm4",
    "8pmu",
    "8pof",
    "8pog",
    "8pr6",
    "8psn",
    "8pso",
    "8psq",
    "8pss",
    "8psu",
    "8pt2",
    "8pt6",
    "8pt7",
    "8pth",
    "8ptj",
    "8px4",
    "8pxc",
    "8pxv",
    "8pzh",
    "8q0p",
    "8q1k",
    "8q2a",
    "8q3z",
    "8q40",
    "8q41",
    "8q42",
    "8q43",
    "8q44",
    "8q66",
    "8q70",
    "8qb3",
    "8qcw",
    "8qd3",
    "8qdo",
    "8qfl",
    "8qk8",
    "8qld",
    "8r79",
    "8r7d",
    "8r8a",
    "8rb4",
    "8rh3",
    "8rxo",
    "8s0u",
    "8s9w",
    "8sap",
    "8sdz",
    "8siu",
    "8sm6",
    "8sm9",
    "8sme",
    "8smq",
    "8sot",
    "8sp2",
    "8squ",
    "8srm",
    "8sro",
    "8ssc",
    "8ssd",
    "8ssu",
    "8sut",
    "8sva",
    "8svd",
    "8sw0",
    "8sx1",
    "8sxs",
    "8sxu",
    "8sy3",
    "8t0p",
    "8t1m",
    "8t3j",
    "8t4c",
    "8t4r",
    "8t65",
    "8t66",
    "8t8l",
    "8t9w",
    "8ta2",
    "8tfs",
    "8tgh",
    "8tjg",
    "8tka",
    "8tn8",
    "8tnm",
    "8tp8",
    "8tpk",
    "8tto",
    "8tvl",
    "8u0m",
    "8u1k",
    "8ua2",
    "8ua5",
    "8uk7",
    "8upi",
    "8uq9",
    "8urn",
    "8uvt",
    "8uz8",
    "8v14",
    "8v1k",
    "8vr5",
    "8vrm",
    "8vxa",
    "8vxc",
    "8w7p",
    "8w8s",
    "8w9o",
    "8wbr",
    "8wct",
    "8wil",
    "8wo7",
    "8wu2",
    "8x51",
    "8x6v",
    "8x7x",
    "8xat",
    "8xbi",
    "8xx9",
    "8y4u",
    "8ya7",
}


class TestTargets(TargetsSource):
    """The RCSB target data source."""

    def __init__(
        self,
        data_dir: str,
        components: str,
        clusters: str,
        chain_map: str,
        filters: List[StaticFilter],
    ) -> None:
        """Initialize the data source.

        Parameters
        ----------
        data_dir : str
            Path to the directory containing the PDB archive.
        components : str
            Path to the processed CCD components dictionary.
        clusters: str
            Path to the cluster map.
        chain_map: str
            Path to the chain mapping file.
        filters : List[StaticFilter]
            The filters to apply.

        """
        super().__init__(data_dir, components, filters)

        with Path(clusters).open("r") as f:
            _clusters: Dict[str, str] = json.load(f)
            self._clusters = {k.lower(): v.lower() for k, v in _clusters.items()}

        with Path(chain_map).open("r") as f:
            _chain_map: Dict[str, str] = json.load(f)
            self._chain_map = {k.lower(): v.lower() for k, v in _chain_map.items()}

    def fetch(self) -> List[PDB]:
        """Get a list of raw data points.

        Returns
        -------
        List[Raw]
            A list of raw data points

        """
        data: List[PDB] = []

        for pdb_id in PDB_IDS:
            # Get path
            file = Path(self._data_dir) / pdb_id[1:3] / f"{pdb_id}.cif.gz"

            # Create the target
            target = PDB(id=pdb_id, path=str(file))
            data.append(target)

        return data

    def parse(self, data: PDB, resource: Resource) -> Target:
        """Process a structure.

        Parameters
        ----------
        data : PDB
            The raw input data.
        resource: Resource
            The shared resource.

        Returns
        -------
        Target
            The processed data.

        """
        # Get the PDB id
        pdb_id = data.id.lower()

        # Parse structure
        parsed = parse_mmcif(data.path, resource, use_assembly=False)
        structure = parsed.data
        structure_info = parsed.info

        # Create chain metadata
        chain_info = []
        for chain in structure.chains:
            key = f"{pdb_id}_{chain['entity_id']}"
            chain_info.append(
                ChainInfo(
                    chain_id=int(chain["asym_id"]),
                    chain_name=chain["name"],
                    msa_id=self._chain_map.get(key, -1),
                    template_id=self._chain_map.get(key, -1),
                    mol_type=int(chain["mol_type"]),
                    cluster_id=self._clusters.get(key, -1),
                    num_residues=int(chain["res_num"]),
                )
            )

        # Get interface metadata
        interface_info = []
        for interface in structure.interfaces:
            chain_1 = int(interface["chain_1"])
            chain_2 = int(interface["chain_2"])
            interface_info.append(
                InterfaceInfo(
                    chain_1=chain_1,
                    chain_2=chain_2,
                )
            )

        # Create record
        record = Record(
            id=data.id,
            structure=structure_info,
            chains=chain_info,
            interfaces=interface_info,
        )

        return Target(structure=structure, record=record)
