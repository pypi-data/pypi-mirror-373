# automatically generated by the FlatBuffers compiler, do not modify

# namespace: PixelAir

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StringParameter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StringParameter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStringParameter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StringParameterBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # StringParameter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StringParameter
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StringParameter
    def Route(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StringParameter
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StringParameter
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def StringParameterStart(builder):
    builder.StartObject(4)

def StringParameterAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def StringParameterAddRoute(builder, route):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(route), 0)

def StringParameterAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def StringParameterAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def StringParameterEnd(builder):
    return builder.EndObject()



class FloatParameter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FloatParameter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFloatParameter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FloatParameterBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # FloatParameter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FloatParameter
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FloatParameter
    def Route(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FloatParameter
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FloatParameter
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FloatParameterStart(builder):
    builder.StartObject(4)

def FloatParameterAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def FloatParameterAddRoute(builder, route):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(route), 0)

def FloatParameterAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def FloatParameterAddValue(builder, value):
    builder.PrependFloat32Slot(3, value, 0.0)

def FloatParameterEnd(builder):
    return builder.EndObject()



class BooleanParameter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BooleanParameter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBooleanParameter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BooleanParameterBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # BooleanParameter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BooleanParameter
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BooleanParameter
    def Route(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BooleanParameter
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BooleanParameter
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def BooleanParameterStart(builder):
    builder.StartObject(4)

def BooleanParameterAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def BooleanParameterAddRoute(builder, route):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(route), 0)

def BooleanParameterAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def BooleanParameterAddValue(builder, value):
    builder.PrependBoolSlot(3, value, 0)

def BooleanParameterEnd(builder):
    return builder.EndObject()



class IntParameter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IntParameter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIntParameter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IntParameterBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # IntParameter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IntParameter
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IntParameter
    def Route(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IntParameter
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IntParameter
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def IntParameterStart(builder):
    builder.StartObject(4)

def IntParameterAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def IntParameterAddRoute(builder, route):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(route), 0)

def IntParameterAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def IntParameterAddValue(builder, value):
    builder.PrependInt32Slot(3, value, 0)

def IntParameterEnd(builder):
    return builder.EndObject()



class Trigger(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Trigger()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrigger(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TriggerBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Trigger
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Trigger
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Trigger
    def Route(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Trigger
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TriggerStart(builder):
    builder.StartObject(3)

def TriggerAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def TriggerAddRoute(builder, route):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(route), 0)

def TriggerAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def TriggerEnd(builder):
    return builder.EndObject()



class Network(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Network()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNetwork(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def NetworkBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Network
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Network
    def MacAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Network
    def IpAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Network
    def Subnet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def NetworkStart(builder):
    builder.StartObject(3)

def NetworkAddMacAddress(builder, macAddress):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(macAddress), 0)

def NetworkAddIpAddress(builder, ipAddress):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ipAddress), 0)

def NetworkAddSubnet(builder, subnet):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(subnet), 0)

def NetworkEnd(builder):
    return builder.EndObject()



class OTA(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OTA()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOTA(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OTABufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # OTA
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OTA
    def UpdateAvailable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # OTA
    def IsExecutingOta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # OTA
    def ExecuteUpdate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Trigger()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OTA
    def CheckForUpdate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Trigger()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def OTAStart(builder):
    builder.StartObject(4)

def OTAAddUpdateAvailable(builder, updateAvailable):
    builder.PrependBoolSlot(0, updateAvailable, 0)

def OTAAddIsExecutingOta(builder, isExecutingOta):
    builder.PrependBoolSlot(1, isExecutingOta, 0)

def OTAAddExecuteUpdate(builder, executeUpdate):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(executeUpdate), 0)

def OTAAddCheckForUpdate(builder, checkForUpdate):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(checkForUpdate), 0)

def OTAEnd(builder):
    return builder.EndObject()



class Audio(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Audio()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAudio(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AudioBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Audio
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Audio
    def Filter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Audio
    def Release(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Audio
    def Gain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Audio
    def Attack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AudioStart(builder):
    builder.StartObject(4)

def AudioAddFilter(builder, filter):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(filter), 0)

def AudioAddRelease(builder, release):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(release), 0)

def AudioAddGain(builder, gain):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gain), 0)

def AudioAddAttack(builder, attack):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attack), 0)

def AudioEnd(builder):
    return builder.EndObject()



class Notification(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Notification()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNotification(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def NotificationBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Notification
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Notification
    def Notify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Trigger()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def NotificationStart(builder):
    builder.StartObject(1)

def NotificationAddNotify(builder, notify):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notify), 0)

def NotificationEnd(builder):
    return builder.EndObject()



class Notifications(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Notifications()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNotifications(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def NotificationsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Notifications
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Notifications
    def Highlight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = BooleanParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Notifications
    def Failure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Notification()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Notifications
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Notification()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Notifications
    def Success(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Notification()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def NotificationsStart(builder):
    builder.StartObject(4)

def NotificationsAddHighlight(builder, highlight):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(highlight), 0)

def NotificationsAddFailure(builder, failure):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(failure), 0)

def NotificationsAddInfo(builder, info):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)

def NotificationsAddSuccess(builder, success):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(success), 0)

def NotificationsEnd(builder):
    return builder.EndObject()



class LightSensorSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LightSensorSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLightSensorSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LightSensorSettingsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # LightSensorSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LightSensorSettings
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = BooleanParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def LightSensorSettingsStart(builder):
    builder.StartObject(1)

def LightSensorSettingsAddEnabled(builder, enabled):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enabled), 0)

def LightSensorSettingsEnd(builder):
    return builder.EndObject()



class Clock(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Clock()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsClock(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ClockBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Clock
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Clock
    def UsesDaylightSavings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = BooleanParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Clock
    def UtcOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = IntParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ClockStart(builder):
    builder.StartObject(2)

def ClockAddUsesDaylightSavings(builder, usesDaylightSavings):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(usesDaylightSavings), 0)

def ClockAddUtcOffset(builder, utcOffset):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(utcOffset), 0)

def ClockEnd(builder):
    return builder.EndObject()



class Engine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Engine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEngine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EngineBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Engine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Engine
    def Brightness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def IsDisplaying(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = BooleanParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def Reboot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Trigger()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = IntParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def ResetWiFi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Trigger()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def OffEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Schedule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def OnEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Schedule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def AutoMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = AutoMode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def SceneMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = SceneMode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Engine
    def ManualMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ManualMode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def EngineStart(builder):
    builder.StartObject(10)

def EngineAddBrightness(builder, brightness):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(brightness), 0)

def EngineAddIsDisplaying(builder, isDisplaying):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(isDisplaying), 0)

def EngineAddReboot(builder, reboot):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(reboot), 0)

def EngineAddMode(builder, mode):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mode), 0)

def EngineAddResetWiFi(builder, resetWiFi):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(resetWiFi), 0)

def EngineAddOffEvent(builder, offEvent):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(offEvent), 0)

def EngineAddOnEvent(builder, onEvent):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(onEvent), 0)

def EngineAddAutoMode(builder, autoMode):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(autoMode), 0)

def EngineAddSceneMode(builder, sceneMode):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(sceneMode), 0)

def EngineAddManualMode(builder, manualMode):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(manualMode), 0)

def EngineEnd(builder):
    return builder.EndObject()



class Dashboard(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Dashboard()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDashboard(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DashboardBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Dashboard
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Dashboard
    def Parameters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Dashboard
    def ParametersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Dashboard
    def ParametersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DashboardStart(builder):
    builder.StartObject(1)

def DashboardAddParameters(builder, parameters):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)

def DashboardStartParametersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def DashboardEnd(builder):
    return builder.EndObject()



class Palette(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Palette()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPalette(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PaletteBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Palette
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Palette
    def Saturation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Palette
    def Hue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FloatParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PaletteStart(builder):
    builder.StartObject(2)

def PaletteAddSaturation(builder, saturation):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(saturation), 0)

def PaletteAddHue(builder, hue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hue), 0)

def PaletteEnd(builder):
    return builder.EndObject()



class AutoMode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AutoMode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAutoMode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AutoModeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # AutoMode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AutoMode
    def Palette(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Palette()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AutoModeStart(builder):
    builder.StartObject(1)

def AutoModeAddPalette(builder, palette):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(palette), 0)

def AutoModeEnd(builder):
    return builder.EndObject()



class Scene(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Scene()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScene(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SceneBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Scene
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Scene
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Scene
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Scene
    def LoadedAnimationIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Scene
    def Animations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scene
    def AnimationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scene
    def AnimationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Scene
    def Dashboard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Dashboard()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def ActiveAnimationIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = IntParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def Palette(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Palette()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scene
    def Schedule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Schedule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SceneStart(builder):
    builder.StartObject(8)

def SceneAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def SceneAddIndex(builder, index):
    builder.PrependInt32Slot(1, index, 0)

def SceneAddLoadedAnimationIndex(builder, loadedAnimationIndex):
    builder.PrependInt32Slot(2, loadedAnimationIndex, 0)

def SceneAddAnimations(builder, animations):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(animations), 0)

def SceneStartAnimationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def SceneAddDashboard(builder, dashboard):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dashboard), 0)

def SceneAddActiveAnimationIndex(builder, activeAnimationIndex):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(activeAnimationIndex), 0)

def SceneAddPalette(builder, palette):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(palette), 0)

def SceneAddSchedule(builder, schedule):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(schedule), 0)

def SceneEnd(builder):
    return builder.EndObject()



class SceneMode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SceneMode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSceneMode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SceneModeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # SceneMode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SceneMode
    def ActiveSceneIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = IntParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SceneMode
    def Scenes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Scene()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SceneMode
    def ScenesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SceneMode
    def ScenesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SceneMode
    def Palette(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Palette()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SceneModeStart(builder):
    builder.StartObject(3)

def SceneModeAddActiveSceneIndex(builder, activeSceneIndex):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(activeSceneIndex), 0)

def SceneModeAddScenes(builder, scenes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(scenes), 0)

def SceneModeStartScenesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def SceneModeAddPalette(builder, palette):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(palette), 0)

def SceneModeEnd(builder):
    return builder.EndObject()



class ManualMode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ManualMode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsManualMode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ManualModeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # ManualMode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ManualMode
    def LoadedAnimationIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ManualMode
    def Animations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ManualMode
    def AnimationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ManualMode
    def AnimationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ManualMode
    def Dashboard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Dashboard()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ManualMode
    def ActiveAnimationIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = IntParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ManualMode
    def Palette(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Palette()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ManualModeStart(builder):
    builder.StartObject(5)

def ManualModeAddLoadedAnimationIndex(builder, loadedAnimationIndex):
    builder.PrependInt32Slot(0, loadedAnimationIndex, 0)

def ManualModeAddAnimations(builder, animations):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(animations), 0)

def ManualModeStartAnimationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def ManualModeAddDashboard(builder, dashboard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dashboard), 0)

def ManualModeAddActiveAnimationIndex(builder, activeAnimationIndex):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(activeAnimationIndex), 0)

def ManualModeAddPalette(builder, palette):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(palette), 0)

def ManualModeEnd(builder):
    return builder.EndObject()



class Schedule(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Schedule()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSchedule(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ScheduleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # Schedule
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Schedule
    def TimeOfDayInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = IntParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Schedule
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = BooleanParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ScheduleStart(builder):
    builder.StartObject(2)

def ScheduleAddTimeOfDayInSeconds(builder, timeOfDayInSeconds):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(timeOfDayInSeconds), 0)

def ScheduleAddEnabled(builder, enabled):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enabled), 0)

def ScheduleEnd(builder):
    return builder.EndObject()



class PixelAirDevice(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PixelAirDevice()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPixelAirDevice(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PixelAirDeviceBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x30\x31", size_prefixed=size_prefixed)

    # PixelAirDevice
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PixelAirDevice
    def Protocol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PixelAirDevice
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PixelAirDevice
    def Model(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PixelAirDevice
    def MinMobileAppVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PixelAirDevice
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PixelAirDevice
    def Rssi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PixelAirDevice
    def Nickname(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = StringParameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PixelAirDevice
    def Network(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Network()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PixelAirDevice
    def Ota(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = OTA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PixelAirDevice
    def Audio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Audio()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PixelAirDevice
    def Notifications(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Notifications()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PixelAirDevice
    def LightSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = LightSensorSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PixelAirDevice
    def Clock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Clock()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PixelAirDevice
    def Engine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Engine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PixelAirDeviceStart(builder):
    builder.StartObject(14)

def PixelAirDeviceAddProtocol(builder, protocol):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(protocol), 0)

def PixelAirDeviceAddVersion(builder, version):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def PixelAirDeviceAddModel(builder, model):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(model), 0)

def PixelAirDeviceAddMinMobileAppVersion(builder, minMobileAppVersion):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(minMobileAppVersion), 0)

def PixelAirDeviceAddSerialNumber(builder, serialNumber):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(serialNumber), 0)

def PixelAirDeviceAddRssi(builder, rssi):
    builder.PrependInt32Slot(5, rssi, 0)

def PixelAirDeviceAddNickname(builder, nickname):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(nickname), 0)

def PixelAirDeviceAddNetwork(builder, network):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(network), 0)

def PixelAirDeviceAddOta(builder, ota):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ota), 0)

def PixelAirDeviceAddAudio(builder, audio):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(audio), 0)

def PixelAirDeviceAddNotifications(builder, notifications):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(notifications), 0)

def PixelAirDeviceAddLightSensor(builder, lightSensor):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(lightSensor), 0)

def PixelAirDeviceAddClock(builder, clock):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(clock), 0)

def PixelAirDeviceAddEngine(builder, engine):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(engine), 0)

def PixelAirDeviceEnd(builder):
    return builder.EndObject()



