
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.stats.broadcast_revenue_transactions import TypeStatsBroadcastRevenueTransactions


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class GetBroadcastRevenueTransactions(TLRequest[TypeStatsBroadcastRevenueTransactions]):
    """
    Fetch [channel ad revenue transaction history](https://core.telegram.org/api/revenue).

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`PeerIdInvalidError: The provided peer id is invalid.

    """

    _id = 0X70990B6D
    _result_id = 0XA94AC30A

    def __init__(
        self,
        peer: 'TypeInputPeer',
        offset: int,
        limit: int
    ):

        """
        Fetch [channel ad revenue transaction history](https://core.telegram.org/api/revenue).

        Args:
            peer ('TypeInputPeer'): Get ad revenue transactions for the specified channel or bot
            offset (int): [Offset for pagination](https://core.telegram.org/api/offsets)
            limit (int): Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
        """

        self.peer = peer
        self.offset = offset
        self.limit = limit

    def to_bytes(self, boxed: bool=True):
        with Writer(b'm\x0b\x99p' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.int(self.offset)
            writer.int(self.limit)

            return writer.getvalue()