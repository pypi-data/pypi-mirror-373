
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..stats_graph import TypeStatsGraph
    from ....gadgets.byteutils import Reader
    from ..broadcast_revenue_balances import TypeBroadcastRevenueBalances


class BroadcastRevenueStats(TLObject, family='TypeStatsBroadcastRevenueStats'):
    """
    [Channel revenue ad statistics, see here](https://core.telegram.org/api/revenue) for more info.
    """

    _id = 0X5407E297
    _group_id = 0XC77BF809

    def __init__(
        self,
        top_hours_graph: 'TypeStatsGraph',
        revenue_graph: 'TypeStatsGraph',
        balances: 'TypeBroadcastRevenueBalances',
        usd_rate: float
    ):

        """
        [Channel revenue ad statistics, see here](https://core.telegram.org/api/revenue) for more info.

        Args:
            top_hours_graph ('TypeStatsGraph'): Ad impressions graph
            revenue_graph ('TypeStatsGraph'): Ad revenue graph (in the smallest unit of the cryptocurrency in which revenue is calculated)
            balances ('TypeBroadcastRevenueBalances'): Current balance, current withdrawable balance and overall revenue
            usd_rate (float): Current conversion rate of the cryptocurrency ( not in the smallest unit) in which revenue is calculated to USD
        """

        self.top_hours_graph = top_hours_graph
        self.revenue_graph = revenue_graph
        self.balances = balances
        self.usd_rate = usd_rate

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x97\xe2\x07T' if boxed else b'') as writer:
            writer.object(
                self.top_hours_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.revenue_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.balances,
                group_id=0X1EDC48C4
            )
            writer.double(self.usd_rate)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        top_hours_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        revenue_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        balances_ = reader.object(
            group_id=0X1EDC48C4
        )

        usd_rate_ = reader.double()

        return cls(
            top_hours_graph=top_hours_graph_,
            revenue_graph=revenue_graph_,
            balances=balances_,
            usd_rate=usd_rate_
        )

TypeStatsBroadcastRevenueStats = BroadcastRevenueStats