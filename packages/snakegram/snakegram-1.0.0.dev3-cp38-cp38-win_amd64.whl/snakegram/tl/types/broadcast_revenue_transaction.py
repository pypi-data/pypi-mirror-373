
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional, TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class BroadcastRevenueTransactionProceeds(TLObject, family='TypeBroadcastRevenueTransaction'):
    """
    Describes earnings from sponsored messages in a channel in some time frame, see [here](https://core.telegram.org/api/revenue) for more info.
    """

    _id = 0X557E2CC4
    _group_id = 0X2AA8277E

    def __init__(
        self,
        amount: int,
        from_date: int,
        to_date: int
    ):

        """
        Describes earnings from sponsored messages in a channel in some time frame, see [here](https://core.telegram.org/api/revenue) for more info.

        Args:
            amount (int): Amount in the smallest unit of the cryptocurrency.
            from_date (int): Start unixtime for the timeframe.
            to_date (int): End unixtime for the timeframe.
        """

        self.amount = amount
        self.from_date = from_date
        self.to_date = to_date

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xc4,~U' if boxed else b'') as writer:
            writer.long(self.amount)
            writer.int(self.from_date)
            writer.int(self.to_date)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        amount_ = reader.long()
        from_date_ = reader.int()
        to_date_ = reader.int()

        return cls(
            amount=amount_,
            from_date=from_date_,
            to_date=to_date_
        )

class BroadcastRevenueTransactionWithdrawal(TLObject, family='TypeBroadcastRevenueTransaction'):
    """
    Describes a [withdrawal of ad earnings](https://core.telegram.org/api/revenue#withdrawing-revenue)
    """

    _id = 0X5A590978
    _group_id = 0X2AA8277E

    def __init__(
        self,
        amount: int,
        date: int,
        provider: str,
        pending: bool = False,
        failed: bool = False,
        transaction_date: Optional[int] = None,
        transaction_url: Optional[str] = None
    ):

        """
        Describes a [withdrawal of ad earnings](https://core.telegram.org/api/revenue#withdrawing-revenue)

        Args:
            amount (int): Amount withdrawn
            date (int): Withdrawal date
            provider (str): Payment provider name
            pending (bool, optional): Whether the withdrawal is currently pending
            failed (bool, optional): Whether the withdrawal has failed
            transaction_date (Optional[int], optional): If neither pending nor failed are set, the transaction was completed successfully, and this field will contain the point in time (Unix timestamp) when the withdrawal was completed successfully.
            transaction_url (Optional[str], optional): If neither pending nor failed are set, the transaction was completed successfully, and this field will contain a URL where the withdrawal transaction can be viewed.
        """

        self.amount = amount
        self.date = date
        self.provider = provider
        self.pending = pending
        self.failed = failed
        self.transaction_date = transaction_date
        self.transaction_url = transaction_url

    def to_bytes(self, boxed: bool=True):
        with Writer(b'x\tYZ' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.pending, 0)
                flags(self.failed, 2)
                writer.long(self.amount)
                writer.int(self.date)
                writer.string(self.provider)

                if flags(self.transaction_date, 1):
                    writer.int(self.transaction_date)

                if flags(self.transaction_url, 1):
                    writer.string(self.transaction_url)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        amount_ = reader.long()
        date_ = reader.int()
        provider_ = reader.string()
        transaction_date_ = (
            reader.int()
            if flags(1) else None
        )

        transaction_url_ = (
            reader.string()
            if flags(1) else None
        )

        return cls(
            amount=amount_,
            date=date_,
            provider=provider_,
            pending=flags(0),
            failed=flags(2),
            transaction_date=transaction_date_,
            transaction_url=transaction_url_
        )

class BroadcastRevenueTransactionRefund(TLObject, family='TypeBroadcastRevenueTransaction'):
    """
    Describes a [refund for failed withdrawal of ad earnings](https://core.telegram.org/api/revenue#withdrawing-revenue)
    """

    _id = 0X42D30D2E
    _group_id = 0X2AA8277E

    def __init__(
        self,
        amount: int,
        date: int,
        provider: str
    ):

        """
        Describes a [refund for failed withdrawal of ad earnings](https://core.telegram.org/api/revenue#withdrawing-revenue)

        Args:
            amount (int): Amount refunded.
            date (int): Date of refund.
            provider (str): Payment provider name.
        """

        self.amount = amount
        self.date = date
        self.provider = provider

    def to_bytes(self, boxed: bool=True):
        with Writer(b'.\r\xd3B' if boxed else b'') as writer:
            writer.long(self.amount)
            writer.int(self.date)
            writer.string(self.provider)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        amount_ = reader.long()
        date_ = reader.int()
        provider_ = reader.string()

        return cls(
            amount=amount_,
            date=date_,
            provider=provider_
        )

TypeBroadcastRevenueTransaction = Union[
    BroadcastRevenueTransactionProceeds,
    BroadcastRevenueTransactionWithdrawal,
    BroadcastRevenueTransactionRefund
]