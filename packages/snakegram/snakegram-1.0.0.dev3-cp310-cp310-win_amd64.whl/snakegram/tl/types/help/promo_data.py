
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING, Union, Optional
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..peer import TypePeer
    from ..chat import TypeChat
    from ..user import TypeUser
    from ....gadgets.byteutils import Reader


class PromoDataEmpty(TLObject, family='TypeHelpPromoData'):
    """
    No PSA/MTProxy info is available
    """

    _id = 0X98F6AC75
    _group_id = 0X6563E0A3

    def __init__(
        self,
        expires: int
    ):

        """
        No PSA/MTProxy info is available

        Args:
            expires (int): Re-fetch PSA/MTProxy info after the specified number of seconds
        """

        self.expires = expires

    def to_bytes(self, boxed: bool=True):
        with Writer(b'u\xac\xf6\x98' if boxed else b'') as writer:
            writer.int(self.expires)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        expires_ = reader.int()

        return cls(
            expires=expires_
        )

class PromoData(TLObject, family='TypeHelpPromoData'):
    """
    MTProxy/Public Service Announcement information
    """

    _id = 0X8C39793F
    _group_id = 0X6563E0A3

    def __init__(
        self,
        expires: int,
        peer: 'TypePeer',
        chats: List['TypeChat'],
        users: List['TypeUser'],
        proxy: bool = False,
        psa_type: Optional[str] = None,
        psa_message: Optional[str] = None
    ):

        """
        MTProxy/Public Service Announcement information

        Args:
            expires (int): Expiry of PSA/MTProxy info
            peer ('TypePeer'): MTProxy/PSA peer
            chats (List['TypeChat']): Chat info
            users (List['TypeUser']): User info
            proxy (bool, optional): MTProxy-related channel
            psa_type (Optional[str], optional): PSA type
            psa_message (Optional[str], optional): PSA message
        """

        self.expires = expires
        self.peer = peer
        self.chats = chats
        self.users = users
        self.proxy = proxy
        self.psa_type = psa_type
        self.psa_message = psa_message

    def to_bytes(self, boxed: bool=True):
        with Writer(b'?y9\x8c' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.proxy, 0)
                writer.int(self.expires)
                writer.object(
                    self.peer,
                    group_id=0XB4DECBCA
                )
                writer.vector(
                    self.chats,
                    lambda value: writer.object(
                        value,
                        group_id=0X73A5C0D9
                    )
                )
                writer.vector(
                    self.users,
                    lambda value: writer.object(
                        value,
                        group_id=0X9BABE43A
                    )
                )

                if flags(self.psa_type, 1):
                    writer.string(self.psa_type)

                if flags(self.psa_message, 2):
                    writer.string(self.psa_message)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        expires_ = reader.int()
        peer_ = reader.object(
            group_id=0XB4DECBCA
        )

        chats_ = reader.vector(
            lambda: reader.object(
                group_id=0X73A5C0D9
            )
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        psa_type_ = (
            reader.string()
            if flags(1) else None
        )

        psa_message_ = (
            reader.string()
            if flags(2) else None
        )

        return cls(
            expires=expires_,
            peer=peer_,
            chats=chats_,
            users=users_,
            proxy=flags(0),
            psa_type=psa_type_,
            psa_message=psa_message_
        )

TypeHelpPromoData = Union[
    PromoDataEmpty,
    PromoData
]