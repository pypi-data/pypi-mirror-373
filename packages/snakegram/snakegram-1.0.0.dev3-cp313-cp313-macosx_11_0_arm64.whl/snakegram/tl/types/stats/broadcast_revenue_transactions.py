
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader
    from ..broadcast_revenue_transaction import TypeBroadcastRevenueTransaction


class BroadcastRevenueTransactions(TLObject, family='TypeStatsBroadcastRevenueTransactions'):
    """
    [Channel ad revenue transactions](https://core.telegram.org/api/revenue).
    """

    _id = 0X87158466
    _group_id = 0XA94AC30A

    def __init__(
        self,
        count: int,
        transactions: List['TypeBroadcastRevenueTransaction']
    ):

        """
        [Channel ad revenue transactions](https://core.telegram.org/api/revenue).

        Args:
            count (int): Total number of transactions.
            transactions (List['TypeBroadcastRevenueTransaction']): Transactions
        """

        self.count = count
        self.transactions = transactions

    def to_bytes(self, boxed: bool=True):
        with Writer(b'f\x84\x15\x87' if boxed else b'') as writer:
            writer.int(self.count)
            writer.vector(
                self.transactions,
                lambda value: writer.object(
                    value,
                    group_id=0X2AA8277E
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        count_ = reader.int()
        transactions_ = reader.vector(
            lambda: reader.object(
                group_id=0X2AA8277E
            )
        )

        return cls(
            count=count_,
            transactions=transactions_
        )

TypeStatsBroadcastRevenueTransactions = BroadcastRevenueTransactions