
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class BroadcastRevenueBalances(TLObject, family='TypeBroadcastRevenueBalances'):
    """
    Describes [channel ad revenue balances](https://core.telegram.org/api/revenue).
    """

    _id = 0XC3FF71E7
    _group_id = 0X1EDC48C4

    def __init__(
        self,
        current_balance: int,
        available_balance: int,
        overall_revenue: int,
        withdrawal_enabled: bool = False
    ):

        """
        Describes [channel ad revenue balances](https://core.telegram.org/api/revenue).

        Args:
            current_balance (int): Amount of not-yet-withdrawn cryptocurrency.
            available_balance (int): Amount of withdrawable cryptocurrency, out of the currently available balance ( available_balance <= current_balance).
            overall_revenue (int): Total amount of earned cryptocurrency.
            withdrawal_enabled (bool, optional): If set, the available balance can be [withdrawn](https://core.telegram.org/api/revenue#withdrawing-revenue).
        """

        self.current_balance = current_balance
        self.available_balance = available_balance
        self.overall_revenue = overall_revenue
        self.withdrawal_enabled = withdrawal_enabled

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xe7q\xff\xc3' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.withdrawal_enabled, 0)
                writer.long(self.current_balance)
                writer.long(self.available_balance)
                writer.long(self.overall_revenue)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        current_balance_ = reader.long()
        available_balance_ = reader.long()
        overall_revenue_ = reader.long()

        return cls(
            current_balance=current_balance_,
            available_balance=available_balance_,
            overall_revenue=overall_revenue_,
            withdrawal_enabled=flags(0)
        )

TypeBroadcastRevenueBalances = BroadcastRevenueBalances