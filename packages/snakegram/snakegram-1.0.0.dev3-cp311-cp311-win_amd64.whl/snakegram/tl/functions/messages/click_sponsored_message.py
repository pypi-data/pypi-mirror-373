
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Long, Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class ClickSponsoredMessage(TLRequest[bool]):
    """
    Informs the server that the user has interacted with a sponsored message in [one of the ways listed here](https://core.telegram.org/api/sponsored-messages#clicking-on-sponsored-messages).
    """

    _id = 0XF093465
    _result_id = 0X43B904E1

    def __init__(
        self,
        peer: 'TypeInputPeer',
        media: bool = False,
        fullscreen: bool = False,
        random_id: bytes = None
    ):

        """
        Informs the server that the user has interacted with a sponsored message in [one of the ways listed here](https://core.telegram.org/api/sponsored-messages#clicking-on-sponsored-messages).

        Args:
            peer ('TypeInputPeer'): The channel/bot where the ad is located
            media (bool, optional): The user clicked on the media
            fullscreen (bool, optional): The user expanded the video to full screen, and then clicked on it.
            random_id (bytes, optional): The ad's unique ID.
        """

        self.peer = peer
        self.media = media
        self.fullscreen = fullscreen
        self.random_id = Long.to_bytes(Long()) if random_id is None else random_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'e4\t\x0f' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.media, 0)
                flags(self.fullscreen, 1)
                writer.object(
                    self.peer,
                    group_id=0X995DB9DF
                )
                writer.bytes(self.random_id)

            return writer.getvalue()