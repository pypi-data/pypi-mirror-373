
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.messages.messages import TypeMessagesMessages


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class SearchPosts(TLRequest[TypeMessagesMessages]):
    """
    Globally search for posts from public [channels](https://core.telegram.org/api/channel) ( including those we aren't a member of) containing a specific hashtag.
    """

    _id = 0XD19F987B
    _result_id = 0XC8BB9188

    def __init__(
        self,
        hashtag: str,
        offset_rate: int,
        offset_peer: 'TypeInputPeer',
        offset_id: int,
        limit: int
    ):

        """
        Globally search for posts from public [channels](https://core.telegram.org/api/channel) ( including those we aren't a member of) containing a specific hashtag.

        Args:
            hashtag (str): The hashtag to search, without the # character.
            offset_rate (int): Initially 0, then set to the [next_rate parameter of messages.messagesSlice](https://core.telegram.org/constructor/messages.messagesSlice)
            offset_peer ('TypeInputPeer'): [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
            offset_id (int): [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
            limit (int): Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
        """

        self.hashtag = hashtag
        self.offset_rate = offset_rate
        self.offset_peer = offset_peer
        self.offset_id = offset_id
        self.limit = limit

    def to_bytes(self, boxed: bool=True):
        with Writer(b'{\x98\x9f\xd1' if boxed else b'') as writer:
            writer.string(self.hashtag)
            writer.int(self.offset_rate)
            writer.object(
                self.offset_peer,
                group_id=0X995DB9DF
            )
            writer.int(self.offset_id)
            writer.int(self.limit)

            return writer.getvalue()