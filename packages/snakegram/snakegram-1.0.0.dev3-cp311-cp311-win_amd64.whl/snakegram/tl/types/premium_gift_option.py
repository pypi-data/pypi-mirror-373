
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class PremiumGiftOption(TLObject, family='TypePremiumGiftOption'):
    """
    Telegram Premium gift option
    """

    _id = 0X74C34319
    _group_id = 0X381461E3

    def __init__(
        self,
        months: int,
        currency: str,
        amount: int,
        bot_url: str,
        store_product: Optional[str] = None
    ):

        """
        Telegram Premium gift option

        Args:
            months (int): Duration of gifted Telegram Premium subscription
            currency (str): Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code
            amount (int): Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$1.45 pass amount = 145. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
            bot_url (str): An [invoice deep link](https://core.telegram.org/api/links#invoice-links) to an invoice for in-app payment, using the official Premium bot; may be empty if direct payment isn't available.
            store_product (Optional[str], optional): An identifier for the App Store/Play Store product associated with the Premium gift.
        """

        self.months = months
        self.currency = currency
        self.amount = amount
        self.bot_url = bot_url
        self.store_product = store_product

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x19C\xc3t' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.int(self.months)
                writer.string(self.currency)
                writer.long(self.amount)
                writer.string(self.bot_url)

                if flags(self.store_product, 0):
                    writer.string(self.store_product)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        months_ = reader.int()
        currency_ = reader.string()
        amount_ = reader.long()
        bot_url_ = reader.string()
        store_product_ = (
            reader.string()
            if flags(0) else None
        )

        return cls(
            months=months_,
            currency=currency_,
            amount=amount_,
            bot_url=bot_url_,
            store_product=store_product_
        )

TypePremiumGiftOption = PremiumGiftOption