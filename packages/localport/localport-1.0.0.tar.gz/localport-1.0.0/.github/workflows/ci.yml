name: CI

on:
  push:
    branches: [ main, qa, dev, feature/* ]
  pull_request:
    branches: [ main, qa ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run linting
      run: |
        uv run ruff check .
        uv run black --check .
        uv run mypy src/
    
    - name: Run tests
      run: uv run pytest tests/ -v --cov=src/localport --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Build package
      run: uv build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      run: uv publish
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run security checks
      run: |
        # Check for known security vulnerabilities
        uv run pip-audit --desc --format=json --output=security-report.json || true
        
        # Run bandit for security issues in code
        uv run bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          security-report.json
          bandit-report.json

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Set up test environment
      run: |
        # Install kubectl for integration tests
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install kind for local Kubernetes testing
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
    
    - name: Run integration tests
      run: |
        # Run integration tests that require external tools
        uv run pytest tests/integration/ -v -m "not slow" --tb=short
    
    - name: Test installation methods
      run: |
        # Test UV installation
        uv tool install .
        localport --help
        uv tool uninstall localport
        
        # Test pipx installation (if available)
        if command -v pipx &> /dev/null; then
          pipx install .
          localport --help
          pipx uninstall localport
        fi

  docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    # Set permissions for GitHub Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write
    
    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Generate documentation
      run: |
        # Generate API documentation
        mkdir -p docs/api
        uv run python -c "
        import pkgutil
        import localport
        
        # Generate module documentation
        for importer, modname, ispkg in pkgutil.walk_packages(localport.__path__, localport.__name__ + '.'):
            print(f'Found module: {modname}')
        "
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
