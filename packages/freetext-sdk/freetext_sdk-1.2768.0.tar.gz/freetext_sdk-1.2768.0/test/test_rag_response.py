# coding: utf-8

"""
    QAnswer 2.0

    QAnswer 2.0 API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from freetext-sdk.models.rag_response import RAGResponse

class TestRAGResponse(unittest.TestCase):
    """RAGResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RAGResponse:
        """Test RAGResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RAGResponse`
        """
        model = RAGResponse()
        if include_optional:
            return RAGResponse(
                conversation_id = '',
                message_id = '',
                ai_response = '',
                sources = [
                    freetext-sdk.models.source.Source(
                        title = '', 
                        document = '', 
                        document_with_highlights = '', 
                        from_page = 56, 
                        to_page = 56, 
                        source_url = '', 
                        source_type = '', 
                        file_type = '', 
                        file_id = '', 
                        display_name = '', 
                        file_name = '', 
                        original_file_name = '', 
                        connector_type = '', 
                        connector_id = 56, 
                        additional_fields = freetext-sdk.models.additional_fields.Additional Fields(), 
                        ref_id = '', 
                        favicon = '', 
                        username = '', 
                        dataset = '', 
                        last_updated_at = '', )
                    ],
                all_sources = [
                    freetext-sdk.models.source.Source(
                        title = '', 
                        document = '', 
                        document_with_highlights = '', 
                        from_page = 56, 
                        to_page = 56, 
                        source_url = '', 
                        source_type = '', 
                        file_type = '', 
                        file_id = '', 
                        display_name = '', 
                        file_name = '', 
                        original_file_name = '', 
                        connector_type = '', 
                        connector_id = 56, 
                        additional_fields = freetext-sdk.models.additional_fields.Additional Fields(), 
                        ref_id = '', 
                        favicon = '', 
                        username = '', 
                        dataset = '', 
                        last_updated_at = '', )
                    ],
                finish_reason = '',
                is_regenerate = True,
                aggs = [
                    freetext-sdk.models.aggregations_group.AggregationsGroup(
                        group_name = '', 
                        aggregations = {
                            'key' : freetext-sdk.models.aggregation.Aggregation(
                                display_name = '', 
                                type = 'keyword', 
                                applied_filters = freetext-sdk.models.applied_metadata_filter.AppliedMetadataFilter(
                                    key = '', 
                                    value = null, 
                                    type = 'auto_filter', ), 
                                buckets = [
                                    freetext-sdk.models.terms_bucket.TermsBucket(
                                        doc_count = 56, 
                                        key = null, )
                                    ], )
                            }, )
                    ],
                filters = [
                    freetext-sdk.models.search_metadata_filter.SearchMetadataFilter(
                        key = '', 
                        value = null, )
                    ],
                is_input_data_cropped = True,
                mode = 'rag',
                prompt_used = ''
            )
        else:
            return RAGResponse(
                conversation_id = '',
                message_id = '',
                ai_response = '',
        )
        """

    def testRAGResponse(self):
        """Test RAGResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
