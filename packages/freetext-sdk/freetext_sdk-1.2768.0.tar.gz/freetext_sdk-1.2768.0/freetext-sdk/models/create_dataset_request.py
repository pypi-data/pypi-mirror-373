# coding: utf-8

"""
    QAnswer 2.0

    QAnswer 2.0 API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from freetext-sdk.models.dataset_type import DatasetType
from typing import Optional, Set
from typing_extensions import Self

class CreateDatasetRequest(BaseModel):
    """
    CreateDatasetRequest
    """ # noqa: E501
    dataset: Optional[StrictStr] = Field(default='open', description="Dataset Name")
    username: Optional[StrictStr] = Field(default='admin', description="Username associated with the dataset")
    language: Optional[StrictStr] = 'multi'
    split_by: Optional[StrictStr] = 'word'
    split_len: Optional[StrictInt] = 512
    split_overlap: Optional[StrictInt] = 32
    embedding_model: Optional[StrictStr] = 'qanswer-text-embedding'
    bot_knowledge: Optional[StrictStr] = 'sources_only'
    bot_name: Optional[StrictStr] = 'QAnswer Assistant'
    llm_choice: Optional[StrictStr] = 'faitmaison'
    dataset_type: Optional[DatasetType] = None
    bot_description: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["dataset", "username", "language", "split_by", "split_len", "split_overlap", "embedding_model", "bot_knowledge", "bot_name", "llm_choice", "dataset_type", "bot_description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDatasetRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDatasetRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataset": obj.get("dataset") if obj.get("dataset") is not None else 'open',
            "username": obj.get("username") if obj.get("username") is not None else 'admin',
            "language": obj.get("language") if obj.get("language") is not None else 'multi',
            "split_by": obj.get("split_by") if obj.get("split_by") is not None else 'word',
            "split_len": obj.get("split_len") if obj.get("split_len") is not None else 512,
            "split_overlap": obj.get("split_overlap") if obj.get("split_overlap") is not None else 32,
            "embedding_model": obj.get("embedding_model") if obj.get("embedding_model") is not None else 'qanswer-text-embedding',
            "bot_knowledge": obj.get("bot_knowledge") if obj.get("bot_knowledge") is not None else 'sources_only',
            "bot_name": obj.get("bot_name") if obj.get("bot_name") is not None else 'QAnswer Assistant',
            "llm_choice": obj.get("llm_choice") if obj.get("llm_choice") is not None else 'faitmaison',
            "dataset_type": obj.get("dataset_type"),
            "bot_description": obj.get("bot_description")
        })
        return _obj


