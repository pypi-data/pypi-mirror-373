# coding: utf-8

"""
    QAnswer 2.0

    QAnswer 2.0 API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from freetext-sdk.models.interface_origin import InterfaceOrigin
from typing import Optional, Set
from typing_extensions import Self

class ExportConversationsRequest(BaseModel):
    """
    ExportConversationsRequest
    """ # noqa: E501
    is_chatbot: StrictBool
    username: StrictStr
    request_username: Optional[StrictStr] = None
    dataset: Optional[StrictStr] = None
    origin: Optional[StrictStr] = None
    interface_origin: Optional[InterfaceOrigin] = None
    date_from: Optional[StrictStr] = None
    date_to: Optional[StrictStr] = None
    limit: Optional[StrictInt] = 1000
    offset: Optional[StrictInt] = 0
    shared_conversations: Optional[List[Dict[str, Any]]] = None
    __properties: ClassVar[List[str]] = ["is_chatbot", "username", "request_username", "dataset", "origin", "interface_origin", "date_from", "date_to", "limit", "offset", "shared_conversations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportConversationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportConversationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is_chatbot": obj.get("is_chatbot"),
            "username": obj.get("username"),
            "request_username": obj.get("request_username"),
            "dataset": obj.get("dataset"),
            "origin": obj.get("origin"),
            "interface_origin": obj.get("interface_origin"),
            "date_from": obj.get("date_from"),
            "date_to": obj.get("date_to"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 1000,
            "offset": obj.get("offset") if obj.get("offset") is not None else 0,
            "shared_conversations": obj.get("shared_conversations")
        })
        return _obj


