# coding: utf-8

"""
    QAnswer 2.0

    QAnswer 2.0 API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from freetext-sdk.models.aggregations_group import AggregationsGroup
from freetext-sdk.models.content_item import ContentItem
from freetext-sdk.models.data_filling_mode import DataFillingMode
from freetext-sdk.models.question_completion import QuestionCompletion
from freetext-sdk.models.source import Source
from freetext-sdk.models.task_category import TaskCategory
from typing import Optional, Set
from typing_extensions import Self

class ConversationMessage(BaseModel):
    """
    ConversationMessage
    """ # noqa: E501
    role: StrictStr
    contents: List[ContentItem]
    message_id: StrictStr
    parent_message_id: Optional[StrictStr] = None
    timestamp: Optional[StrictStr] = '2025-09-02T11:05:21Z'
    feedback: Optional[StrictInt] = -1
    origin: Optional[StrictStr] = None
    sources: Optional[List[Source]] = Field(default=None, description="All sources referenced in the response")
    all_sources: Optional[List[Source]] = Field(default=None, description="All retrieved sources passed to the llm")
    task_category: Optional[TaskCategory]
    interface_origin: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    llm_choice: Optional[StrictStr] = None
    training_examples: Optional[List[QuestionCompletion]] = None
    prompt_used: Optional[StrictStr] = None
    mode: Optional[DataFillingMode] = None
    is_input_data_cropped: Optional[StrictBool] = None
    aggs: Optional[List[AggregationsGroup]] = None
    expanded_question: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["role", "contents", "message_id", "parent_message_id", "timestamp", "feedback", "origin", "sources", "all_sources", "task_category", "interface_origin", "comment", "llm_choice", "training_examples", "prompt_used", "mode", "is_input_data_cropped", "aggs", "expanded_question"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['assistant', 'user']):
            raise ValueError("must be one of enum values ('assistant', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item_contents in self.contents:
                if _item_contents:
                    _items.append(_item_contents.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in all_sources (list)
        _items = []
        if self.all_sources:
            for _item_all_sources in self.all_sources:
                if _item_all_sources:
                    _items.append(_item_all_sources.to_dict())
            _dict['all_sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in training_examples (list)
        _items = []
        if self.training_examples:
            for _item_training_examples in self.training_examples:
                if _item_training_examples:
                    _items.append(_item_training_examples.to_dict())
            _dict['training_examples'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in aggs (list)
        _items = []
        if self.aggs:
            for _item_aggs in self.aggs:
                if _item_aggs:
                    _items.append(_item_aggs.to_dict())
            _dict['aggs'] = _items
        # set to None if task_category (nullable) is None
        # and model_fields_set contains the field
        if self.task_category is None and "task_category" in self.model_fields_set:
            _dict['task_category'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "contents": [ContentItem.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None,
            "message_id": obj.get("message_id"),
            "parent_message_id": obj.get("parent_message_id"),
            "timestamp": obj.get("timestamp") if obj.get("timestamp") is not None else '2025-09-02T11:05:21Z',
            "feedback": obj.get("feedback") if obj.get("feedback") is not None else -1,
            "origin": obj.get("origin"),
            "sources": [Source.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None,
            "all_sources": [Source.from_dict(_item) for _item in obj["all_sources"]] if obj.get("all_sources") is not None else None,
            "task_category": obj.get("task_category"),
            "interface_origin": obj.get("interface_origin"),
            "comment": obj.get("comment"),
            "llm_choice": obj.get("llm_choice"),
            "training_examples": [QuestionCompletion.from_dict(_item) for _item in obj["training_examples"]] if obj.get("training_examples") is not None else None,
            "prompt_used": obj.get("prompt_used"),
            "mode": obj.get("mode"),
            "is_input_data_cropped": obj.get("is_input_data_cropped"),
            "aggs": [AggregationsGroup.from_dict(_item) for _item in obj["aggs"]] if obj.get("aggs") is not None else None,
            "expanded_question": obj.get("expanded_question")
        })
        return _obj


