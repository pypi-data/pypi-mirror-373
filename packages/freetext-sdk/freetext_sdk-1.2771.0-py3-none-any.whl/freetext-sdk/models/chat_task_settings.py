# coding: utf-8

"""
    QAnswer 2.0

    QAnswer 2.0 API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from freetext-sdk.models.bot_answer_length import BotAnswerLength
from freetext-sdk.models.llm_details import LLMDetails
from typing import Optional, Set
from typing_extensions import Self

class ChatTaskSettings(BaseModel):
    """
    ChatTaskSettings
    """ # noqa: E501
    prompt: Optional[StrictStr] = None
    llm_choice: Optional[StrictStr] = None
    bot_seed: Optional[StrictInt] = None
    bot_temperature: Optional[Union[StrictFloat, StrictInt]] = None
    bot_answer_length: Optional[BotAnswerLength] = None
    number_of_references: Optional[StrictInt] = None
    stream_speed: Optional[Union[StrictFloat, StrictInt]] = None
    context_window: Optional[StrictInt] = None
    max_tokens: Optional[StrictInt] = None
    bot_name: Optional[StrictStr] = None
    bot_description: Optional[StrictStr] = None
    llm_details: LLMDetails
    query_expansion_prompt: Optional[StrictStr] = None
    show_date_in_sources: Optional[StrictBool] = False
    slots_values: Optional[Dict[str, StrictStr]] = None
    selected_aggregations: Optional[List[StrictStr]] = None
    chat_initial_message: Optional[StrictStr] = None
    human_takeover: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["prompt", "llm_choice", "bot_seed", "bot_temperature", "bot_answer_length", "number_of_references", "stream_speed", "context_window", "max_tokens", "bot_name", "bot_description", "llm_details", "query_expansion_prompt", "show_date_in_sources", "slots_values", "selected_aggregations", "chat_initial_message", "human_takeover"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatTaskSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of llm_details
        if self.llm_details:
            _dict['llm_details'] = self.llm_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatTaskSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prompt": obj.get("prompt"),
            "llm_choice": obj.get("llm_choice"),
            "bot_seed": obj.get("bot_seed"),
            "bot_temperature": obj.get("bot_temperature"),
            "bot_answer_length": obj.get("bot_answer_length"),
            "number_of_references": obj.get("number_of_references"),
            "stream_speed": obj.get("stream_speed"),
            "context_window": obj.get("context_window"),
            "max_tokens": obj.get("max_tokens"),
            "bot_name": obj.get("bot_name"),
            "bot_description": obj.get("bot_description"),
            "llm_details": LLMDetails.from_dict(obj["llm_details"]) if obj.get("llm_details") is not None else None,
            "query_expansion_prompt": obj.get("query_expansion_prompt"),
            "show_date_in_sources": obj.get("show_date_in_sources") if obj.get("show_date_in_sources") is not None else False,
            "slots_values": obj.get("slots_values"),
            "selected_aggregations": obj.get("selected_aggregations"),
            "chat_initial_message": obj.get("chat_initial_message"),
            "human_takeover": obj.get("human_takeover") if obj.get("human_takeover") is not None else False
        })
        return _obj


