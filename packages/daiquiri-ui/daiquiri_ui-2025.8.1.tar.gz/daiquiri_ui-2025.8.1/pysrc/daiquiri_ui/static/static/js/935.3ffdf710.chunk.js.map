{"version":3,"file":"static/js/935.3ffdf710.chunk.js","mappings":"yNAUA,MAsCA,GAAeA,EAAAA,EAAAA,IAAc,CAAEC,SAAQ,IAAEC,IAAI,KAA7C,EACEC,EAAAA,EAAAA,KAvCsBC,CAACC,EAAYC,KACnC,MAAM,WAAEC,EAAU,QAAEC,GAAYF,EAAIG,UAAUR,UACxC,OAAES,GAAWJ,EAAIG,UAAUP,IACjC,MAAO,CACLS,QAASJ,EAAWK,SAAS,UAAWP,GACxCQ,gBAAiBN,EAAWK,SAAS,WAAYP,GACjDS,eAAgBP,EAAWK,SAAS,UAAWP,GAC/CU,gBAAiBd,EAAAA,EAAAA,SAAkB,qBAAsBI,GACzDW,eAAgBf,EAAAA,EAAAA,SAAkB,mBAAoBI,GACtDY,cAAehB,EAAAA,EAAAA,SAAkB,gBAAiBI,GAClDG,QAASA,EAAQI,SAAS,UAAWP,GACrCa,gBAAiBR,EAAOE,SAAS,UAAWP,GAAOc,gBACnDC,wBAAyBC,EAAAA,EAAAA,SAAc,0BAA2BhB,GAClEiB,OAAQpB,EAAAA,EAAAA,SAAa,SAAUG,EAAO,eACvC,IAGwBkB,CAACC,EAAelB,KACzC,MAAM,WAAEC,GAAeD,EAAIG,UAAUR,SACrC,MAAO,CACLwB,QAAS,CACPC,aAAcA,IAAMnB,EAAWoB,QAC/BC,aAAeC,GAAiBtB,EAAWuB,OAAOD,GAClDE,aAAeF,GAAiBtB,EAAWyB,OAAOH,GAClDI,aAAeJ,GACb5B,EAAAA,EAAAA,SAAkB,oBAAqB4B,GACzCK,gBAAkBL,GAChB5B,EAAAA,EAAAA,SAAkB,sBAAuB4B,GAC3CM,eAAgBA,IAAMlC,EAAAA,EAAAA,SAAkB,8BACxCmC,gBAAkBP,GAChBR,EAAAA,EAAAA,SAAc,oBAAqBQ,GACrCQ,iBAAmBR,GACjBR,EAAAA,EAAAA,SAAc,oBAAqBQ,GACrCS,SAAWT,GAAiB3B,EAAAA,EAAAA,SAAa,YAAa2B,IAEzD,GAID1B,CAA6CoC,EAAAA,I,eC7ChC,SAASC,EAAKC,GAC3B,MAAM,UAAEhC,EAAS,SAAEiC,KAAaC,GAAmBF,EAEnD,OADAG,EAAAA,GAAgCF,EAAUC,IACnCE,EAAAA,EAAAA,KAACN,EAAU,CAAC9B,UAAWA,GAChC,C","sources":["connect/2dview/ObjectList.ts","components/yaml-layout/components/2dview/TwoDObjectList.tsx"],"sourcesContent":["import { connect } from 'react-redux';\n\nimport { withNamespace } from 'providers/namespace';\n\nimport twod from 'providers/2dview';\nimport metadata from 'providers/metadata';\nimport app from 'providers/app';\n\nimport ObjectList from 'components/2dview/ObjectList';\n\nconst mapStateToProps = (state: any, own: any) => {\n  const { subsamples, samples } = own.providers.metadata;\n  const { schema } = own.providers.app;\n  return {\n    objects: subsamples.selector('results', state),\n    fetchingObjects: subsamples.selector('fetching', state),\n    fetchedObjects: subsamples.selector('fetched', state),\n    selectedObjects: metadata.selector('selectedSubSamples', state),\n    selectedObject: metadata.selector('currentSubSample', state),\n    currentSample: metadata.selector('currentSample', state),\n    samples: samples.selector('results', state),\n    subSampleSchema: schema.selector('results', state).SubSampleSchema,\n    pendingExportSubsamples: twod.selector('pendingExportSubsamples', state),\n    config: app.selector('config', state, 'imageviewer'),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any, own: any) => {\n  const { subsamples } = own.providers.metadata;\n  return {\n    actions: {\n      fetchObjects: () => subsamples.fetch(),\n      removeObject: (payload: any) => subsamples.delete(payload),\n      updateObject: (payload: any) => subsamples.update(payload),\n      addSelection: (payload: any) =>\n        metadata.dispatch('SELECT_SUB_SAMPLE', payload),\n      removeSelection: (payload: any) =>\n        metadata.dispatch('UNSELECT_SUB_SAMPLE', payload),\n      resetSelection: () => metadata.dispatch('RESET_SUB_SAMPLE_SELECTION'),\n      moveToSubSample: (payload: any) =>\n        twod.dispatch('MOVE_TO_SUBSAMPLE', payload),\n      exportSubSamples: (payload: any) =>\n        twod.dispatch('EXPORT_SUBSAMPLES', payload),\n      addToast: (payload: any) => app.dispatch('ADD_TOAST', payload),\n    },\n  };\n};\n\nexport default withNamespace({ metadata, app })(\n  connect(mapStateToProps, mapDispatchToProps)(ObjectList)\n);\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport ObjectList from 'connect/2dview/ObjectList';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, ...unknownOptions } = props;\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <ObjectList providers={providers} />;\n}\n"],"names":["withNamespace","metadata","app","connect","mapStateToProps","state","own","subsamples","samples","providers","schema","objects","selector","fetchingObjects","fetchedObjects","selectedObjects","selectedObject","currentSample","subSampleSchema","SubSampleSchema","pendingExportSubsamples","twod","config","mapDispatchToProps","dispatch","actions","fetchObjects","fetch","removeObject","payload","delete","updateObject","update","addSelection","removeSelection","resetSelection","moveToSubSample","exportSubSamples","addToast","ObjectList","Yaml","props","yamlNode","unknownOptions","YamlAsserts","_jsx"],"sourceRoot":""}