{"version":3,"file":"static/js/702.e3b9e2d9.chunk.js","mappings":"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","sources":["components/h5web/NdFloat16Array.ts","components/utils/hooks.ts","components/hdf5/models.ts","components/hdf5/Hdf5Plot.tsx","connect/hdf5/Hdf5Plot.ts","components/yaml-layout/components/hdf5/Hdf5Plot.tsx","connect/ConnectUtils.ts","helpers/ndarray.ts"],"sourcesContent":["/**\n * Decode a binary uint16 as is it is a float16.\n *\n * https://stackoverflow.com/a/8796597\n */\nexport function decodeFloat16(value: number): number {\n  const exponent = (value & 0x7c_00) >> 10; // eslint-disable-line no-bitwise\n  const fraction = value & 0x03_ff; // eslint-disable-line no-bitwise\n  return (\n    (value >> 15 ? -1 : 1) * // eslint-disable-line no-bitwise\n    (exponent\n      ? exponent === 0x1f\n        ? fraction\n          ? Number.NaN\n          : Infinity\n        : 2 ** (exponent - 15) * (1 + fraction / 0x4_00)\n      : 6.103_515_625e-5 * (fraction / 0x4_00))\n  );\n}\n\n/**\n * NdArray stored as a Float16Array.\n *\n * `Float16Array` is not supported in Javascript.\n * That's why the data is stored as an opaque `Uint16Array`.\n * This kind of data still can be displayed in WebGL, that's why it is stayed as it is.\n *\n * The method `get` is anyway supported, with a custom binary transformation.\n */\nexport class NdFloat16Array {\n  public readonly shape: number[];\n\n  public readonly dimension: number;\n\n  public readonly data: Uint16Array;\n\n  public readonly dtype: string;\n\n  public constructor(data: Uint16Array, shape: number[]) {\n    if (shape.length !== 2) {\n      throw new Error(\n        `Unsupported dimension ${shape.length} with NdFloat16Array`\n      );\n    }\n    this.data = data;\n    this.shape = shape;\n    this.dimension = shape.length;\n    this.dtype = 'float16';\n  }\n\n  public index(...args: number[]): number {\n    if (args.length !== this.dimension) {\n      throw new Error(`Expected ${this.dimension} for indexing`);\n    }\n    return args[1] + args[0] * this.shape[1];\n  }\n\n  public getRaw(...args: number[]): number {\n    const index = this.index(...args);\n    return this.data[index];\n  }\n\n  public get(...args: number[]): number {\n    const v = this.getRaw(...args);\n    return decodeFloat16(v);\n  }\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport type { BeamlineNotification } from '../../types/Events';\nimport messageHandler from 'messagehandler';\nimport type CeleryMessageHandler from '../../messagehandler/CeleryMessageHandler';\n\n/** Expose the last notification which match the event type filter */\nexport function useLastNotification(\n  events?: string[]\n): BeamlineNotification | null {\n  const [lastEvent, setLastEvent] = useState<BeamlineNotification | null>(null);\n\n  const celery = useMemo(() => {\n    return messageHandler.getHandler('Celery') as CeleryMessageHandler;\n  }, []);\n\n  useEffect(() => {\n    function onMessage(data: any) {\n      if (events?.includes(data.type)) {\n        setLastEvent(data);\n      }\n    }\n    celery.addListener(onMessage);\n    return () => {\n      celery.removeListener(onMessage);\n    };\n  }, [events]);\n\n  return lastEvent;\n}\n","import type { NdArray, TypedArray } from 'ndarray';\nimport { toNdArray } from '../../helpers/ndarray';\n\n/**\n * HDF5 dataset as exposed by the HDF5 Redux provider\n */\nexport interface H5Dataset {\n  name: string;\n  attrs: {\n    [name: string]: any;\n  };\n  ndim: number;\n  shape: number[];\n  data: any;\n  dtype: string;\n}\n\n/**\n * HDF5 group as exposed by the HDF5 Redux provider\n */\nexport interface H5Group {\n  name: string;\n  attrs: {\n    [name: string]: any;\n  };\n  children: {\n    [name: string]: H5Dataset | H5Group;\n  };\n}\n\n/**\n * Read a dataset as a typed array.\n */\nexport function datasetToNdarray(dataset: H5Dataset): NdArray<TypedArray> {\n  const { data, shape, dtype } = dataset;\n\n  const normalizedDtypes: Record<string, string> = {\n    float16: '<f2',\n    float32: '<f4',\n    float64: '<f8',\n    uint8: 'u1',\n    uint16: '<u2',\n    uint32: '<u4',\n    uint64: '<u8',\n    int8: 'i1',\n    int16: '<i2',\n    int32: '<i4',\n    int64: '<i8',\n  };\n  const normalizedDtype = normalizedDtypes[dtype];\n  if (normalizedDtype === undefined) {\n    throw new Error(`Unsupported dtype: ${dtype}`);\n  }\n  // Flatten source array\n  const flatData = data.flat(Infinity);\n  return toNdArray(flatData, shape, normalizedDtypes[dtype]);\n}\n\nexport function isH5Dataset(entity: unknown): entity is H5Dataset {\n  return entity instanceof Object && 'data' in entity;\n}\n\nexport function assertH5Dataset(\n  entity: H5Dataset | H5Group,\n  message = 'Expected H5Dataset'\n): asserts entity is H5Dataset {\n  if (!isH5Dataset(entity)) {\n    throw new Error(message);\n  }\n}\n\nexport function isH5Group(entity: unknown): entity is H5Group {\n  return entity instanceof Object && 'children' in entity;\n}\n\nexport function assertH5Group(\n  entity: H5Dataset | H5Group,\n  message = 'Expected H5Group'\n): asserts entity is H5Group {\n  if (!isH5Group(entity)) {\n    throw new Error(message);\n  }\n}\n","import { useEffect, useState, useRef, useCallback } from 'react';\nimport { map, each, values } from 'lodash';\nimport { Form, Alert } from 'react-bootstrap';\nimport PlotEnhancer from 'components/PlotEnhancer';\nimport RemountOnResize from 'components/utils/RemountOnResize';\nimport type { H5Group } from './models';\nimport { assertH5Group, H5Dataset } from './models';\nimport { assertH5Dataset } from './models';\nimport type { BeamlineNotification } from '../../types/Events';\nimport { useLastNotification } from '../utils/hooks';\n\nfunction PlotSelect(props: {\n  group: H5Group | null;\n  onChange: (value: string) => void;\n}) {\n  if (!props.group) return null;\n  if (values(props.group.children).length === 1) return null;\n\n  return (\n    <Form.Control\n      as=\"select\"\n      size=\"sm\"\n      onChange={(e) => props.onChange(e.target.value)}\n    >\n      {map(props.group.children, (group) => (\n        <option key={group.name} value={group.name}>\n          {group.name}\n        </option>\n      ))}\n    </Form.Control>\n  );\n}\n\n/** Normalize NXdata axes and signal reading */\nfunction readCharAsList(attr: any): string[] | null {\n  if (attr === undefined) {\n    return null;\n  }\n  if (typeof attr === 'string') {\n    return [attr];\n  }\n  return attr;\n}\n\n/**\n * Exception returned whenever the parsing of the data do not result on any plot\n */\nclass NoPlotCanBeParsed extends Error {\n  public constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, NoPlotCanBeParsed.prototype);\n  }\n}\n\nfunction createCurvePlotFromNxDataGroup(\n  group: H5Group\n): [Plotly.Data[], Partial<Plotly.Layout>] {\n  const layout = {\n    xaxis: {\n      title: { text: '' },\n    },\n    yaxis: {\n      title: { text: '' },\n      type: 'linear' as Plotly.AxisType,\n      showexponent: 'all' as const,\n      exponentformat: 'e' as const,\n    },\n  };\n\n  const axes = readCharAsList(group.attrs.axes);\n  if (!axes) {\n    throw new NoPlotCanBeParsed('No axes found in NXdata');\n  }\n  const data: Plotly.Data[] = [];\n  if (axes.length !== 1) {\n    throw new NoPlotCanBeParsed(\n      `Expect 1 and only 1 axis, found ${axes.length}`\n    );\n  }\n  const xdataset = group.children[group.attrs.axes[0]];\n  assertH5Dataset(xdataset);\n  const x = xdataset.data;\n  layout.xaxis.title.text = group.children[group.attrs.axes[0]].attrs.units;\n\n  const ydataset = group.children[group.attrs.signal];\n  assertH5Dataset(ydataset);\n  const y = ydataset.data;\n  layout.yaxis.title.text = group.children[group.attrs.signal].attrs.units;\n\n  if (group.attrs.SILX_style) {\n    const style = JSON.parse(group.attrs.SILX_style);\n    if (style.signal_scale_type === 'log') {\n      layout.yaxis.type = 'log' as Plotly.AxisType;\n    }\n  }\n\n  const sc: Plotly.Data = {\n    x,\n    y,\n    type: 'scattergl',\n    name: group.attrs.signal,\n  };\n\n  data.push(sc);\n\n  const auxs = readCharAsList(group.attrs.auxiliary_signals);\n  if (auxs) {\n    each(auxs, (aux) => {\n      const auxDataset = group.children[aux];\n      assertH5Dataset(auxDataset);\n      const y = auxDataset.data;\n      const asc: Plotly.Data = {\n        x,\n        y,\n        yaxis: 'y2',\n        type: 'scattergl',\n        name: aux,\n      };\n\n      data.push(asc);\n    });\n  }\n\n  if (data.length === 0) {\n    throw new NoPlotCanBeParsed('No data was found');\n  }\n\n  return [data, layout];\n}\n\nfunction createImagePlotFromNxDataGroup(\n  group: H5Group\n): [Plotly.Data[], Partial<Plotly.Layout>] {\n  const signal = readCharAsList(group.attrs.signal);\n  if (!signal) {\n    throw new NoPlotCanBeParsed('No signal found in NXdata');\n  }\n  if (signal.length !== 1) {\n    throw new NoPlotCanBeParsed(\n      `Expect one and only one signal, found ${signal.length}`\n    );\n  }\n\n  const image = group.children[signal[0]];\n  assertH5Dataset(image);\n  if (!image) {\n    throw new NoPlotCanBeParsed(\n      `Dataset from signal ${signal[0]} does not exists`\n    );\n  }\n\n  if (image.ndim !== 2) {\n    throw new NoPlotCanBeParsed(\n      `Dataset from signal ${signal[0]} must be 2 ndim (found ${image.ndim})`\n    );\n  }\n\n  const data: Plotly.Data[] = [\n    {\n      z: image.data,\n      type: 'heatmapgl',\n    },\n  ];\n\n  return [data, {}];\n}\n\nfunction createPlotFromNxDataGroup(\n  group: H5Group\n): [Plotly.Data[], Partial<Plotly.Layout>] {\n  let errors = '';\n  try {\n    return createImagePlotFromNxDataGroup(group);\n  } catch (error) {\n    if (error instanceof NoPlotCanBeParsed) {\n      errors += `Image plot: ${error.message}`;\n    } else {\n      throw error;\n    }\n  }\n  try {\n    return createCurvePlotFromNxDataGroup(group);\n  } catch (error) {\n    if (error instanceof NoPlotCanBeParsed) {\n      errors += `Curve plot: ${error.message}`;\n    } else {\n      throw error;\n    }\n  }\n  throw new NoPlotCanBeParsed(errors);\n}\n\nfunction createPlotFromGroup(\n  group: H5Group\n): [Plotly.Data[], Partial<Plotly.Layout>] {\n  if (group?.attrs.NX_class === 'NXdata') {\n    return createPlotFromNxDataGroup(group);\n  }\n  throw new NoPlotCanBeParsed('Only NXdata group is supported');\n}\n\ninterface Props {\n  error?: string;\n  group?: H5Group;\n  params?: {\n    autoprocprogramid?: number;\n    datacollectionid?: number;\n  };\n  autoprocprogramid?: number;\n  datacollectionid?: number;\n  options: {\n    /** Hdf5 uri to the group of interest */\n    uri: string;\n    events?: string[];\n  };\n  /** Whether to poll the group data, poll time in seconds */\n  poll?: number;\n  actions?: {\n    setParams?: (\n      params: {\n        type?: string;\n        uri?: string;\n        datacollectionid?: number | null;\n        autoprocprogramid?: number;\n      },\n      flush?: boolean\n    ) => Promise<void>;\n  };\n}\n\nexport default function Hdf5Plot(props: Props) {\n  const refreshThread = useRef<NodeJS.Timeout>();\n  const [selectedPlot, setSelectedPlot] = useState<string | undefined>(\n    props.group?.attrs?.default as string | undefined\n  );\n  const {\n    autoprocprogramid = null,\n    datacollectionid = null,\n    params = {},\n    poll = 0,\n    options,\n  } = props;\n\n  const event = useLastNotification(props.options.events);\n\n  const refresh = useCallback(\n    (newpoll?: number) => {\n      console.log('refresh');\n      props.actions\n        ?.setParams?.(\n          {\n            type: 'processing',\n            uri: options.uri,\n          },\n          true\n        )\n        .then(() => {\n          if (newpoll) {\n            refreshThread.current = setTimeout(\n              () => refresh(newpoll),\n              newpoll * 1000\n            );\n          }\n        })\n        .catch((error) => {\n          console.log('Could not fetch group data');\n        });\n    },\n    [options.uri, props.actions]\n  );\n\n  useEffect(() => {\n    if (event !== null) {\n      // If in follow mode (=== null) auto load\n      if (datacollectionid === null) {\n        if (props.actions?.setParams) {\n          props.actions.setParams({\n            datacollectionid: event?.datacollectionid,\n          });\n          refresh();\n        }\n      }\n    }\n  }, [\n    autoprocprogramid,\n    datacollectionid,\n    event,\n    props.actions,\n    options.uri,\n    refresh,\n  ]);\n\n  useEffect(() => {\n    const newparams: {\n      datacollectionid?: number;\n      autoprocprogramid?: number;\n    } = {};\n    if (datacollectionid) {\n      newparams.datacollectionid = datacollectionid;\n    }\n    if (autoprocprogramid) {\n      newparams.autoprocprogramid = autoprocprogramid;\n    }\n\n    if (\n      params.datacollectionid !== newparams.datacollectionid ||\n      params.autoprocprogramid !== newparams.autoprocprogramid\n    ) {\n      if (props.actions?.setParams) {\n        props.actions.setParams(newparams);\n        refresh(poll);\n      }\n    }\n  }, [\n    autoprocprogramid,\n    datacollectionid,\n    poll,\n    props.actions,\n    params,\n    refresh,\n  ]);\n\n  useEffect(() => {\n    return () => {\n      if (refreshThread.current) clearTimeout(refreshThread.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!selectedPlot && props.group) {\n      if (props.group.attrs.default) {\n        setSelectedPlot(props.group.attrs.default as string);\n      }\n    }\n  }, [props.group, selectedPlot]);\n\n  if (autoprocprogramid === null && datacollectionid === null) {\n    return <p>Select a processing program output</p>;\n  }\n\n  if (props.error) {\n    const id = datacollectionid || autoprocprogramid;\n    return (\n      <Alert variant=\"warning\">\n        Could not load data for processing program id &quot;\n        {id}&quot; with uri &quot;{options.uri}&quot;\n      </Alert>\n    );\n  }\n\n  if (!props.group) {\n    return (\n      <Alert variant=\"info\">\n        <p>Waiting for data</p>\n      </Alert>\n    );\n  }\n\n  const group = selectedPlot\n    ? props.group?.children[selectedPlot]\n    : props.group?.children[props.group?.attrs.default as string] ||\n      props.group ||\n      null;\n\n  if (!group) {\n    // FIXME it would be better to display something\n    return (\n      <Alert variant=\"info\">\n        <p>No data to display</p>\n      </Alert>\n    );\n  }\n\n  assertH5Group(group);\n  try {\n    const [data, layout] = createPlotFromGroup(group);\n    return (\n      <div className=\"plot1d-container\">\n        {selectedPlot && (\n          <PlotSelect group={props.group} onChange={setSelectedPlot} />\n        )}\n        <RemountOnResize>\n          <PlotEnhancer data={data} layout={layout} />\n        </RemountOnResize>\n      </div>\n    );\n  } catch (error) {\n    if (error instanceof NoPlotCanBeParsed) {\n      return (\n        <Alert variant=\"error\">\n          <p>Data format unsupported:</p>\n          <p>{error.message}</p>\n        </Alert>\n      );\n    }\n    throw error;\n  }\n}\n","import { connect } from 'react-redux';\n\nimport Hdf5Plot from 'components/hdf5/Hdf5Plot';\nimport { withNamespace } from 'providers/namespace';\nimport hdf5 from 'providers/hdf5';\nimport metadata from 'providers/metadata';\nimport type { Cache } from '../ConnectUtils';\nimport mapStateToPropsWithCache from '../ConnectUtils';\n\nconst mapStateToPropsSimple = (state: any, own: any, cache: Cache) => {\n  const { providers, options } = own;\n  const { groups } = providers.hdf5;\n  return {\n    group: groups.selector('results', state)[options.uri],\n    error: groups.selector('error', state),\n    params: providers.hdf5.groups.selector('params', state),\n    datacollectionid: metadata.selector('selectedDataCollection', state),\n  };\n};\n\nfunction mapDispatchToProps(dispatch: any, own: any) {\n  return {\n    actions: {\n      setParams: (\n        params: {\n          type?: string;\n          uri?: string;\n          datacollectionid?: number | null;\n          autoprocprogramid?: number;\n        },\n        fetch?: boolean\n      ) => own.providers.hdf5.groups.setParams(params, fetch),\n    },\n  };\n}\n\nexport default withNamespace({ hdf5 })(\n  connect(\n    mapStateToPropsWithCache(mapStateToPropsSimple),\n    mapDispatchToProps\n  )(Hdf5Plot)\n);\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport Hdf5Plot from 'connect/hdf5/Hdf5Plot';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, events, url, ...unknownOptions } = props;\n  YamlAsserts.assertOptionalStringList(yamlNode, 'events', events);\n  YamlAsserts.assertString(yamlNode, 'url', url);\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <Hdf5Plot providers={providers} options={{ url, events }} />;\n}\n","import lodash from 'lodash';\n\nexport class Cache {\n  private cache: Record<string, any>;\n\n  public constructor() {\n    this.cache = {};\n  }\n\n  /**\n   * Returns and store value if the previous stored value deep differ.\n   *\n   * Else returns the previous stored value\n   */\n  public debounce<T>(name: string, value: T): T {\n    const previous = this.cache[name];\n    if (lodash.isEqual(previous, value)) {\n      return previous;\n    }\n    this.cache[name] = value;\n    return value;\n  }\n\n  /**\n   * Compute and returns and cache a value if the previous stored value deep differ.\n   *\n   * Else returns the previous computed result.\n   */\n  public memo<T>(name: string, callable: () => T, deps: unknown[]): T {\n    const defaultResult = [undefined, undefined];\n    const [previousResult, previousDeps] = this.cache[name] || defaultResult;\n    if (lodash.isEqual(previousDeps, deps)) {\n      return previousResult;\n    }\n    const result = callable();\n    this.cache[name] = [result, deps];\n    return result;\n  }\n}\n\nexport default function mapStateToPropsWithCache<S, O, R>(\n  mapStateToProps: (state: S, own: O, cache: Cache) => R\n): (state: S, own: O) => R {\n  const cache = new Cache();\n  return (state, own) => mapStateToProps(state, own, cache);\n}\n","import ndarray from 'ndarray';\nimport type { NdArray } from 'ndarray';\nimport type { TypedArray } from 'ndarray';\nimport { useMemo } from 'react';\nimport { NdFloat16Array } from '../components/h5web/NdFloat16Array';\n\n/**\n * Function to mimick the server side behaviour of 'safe' type\n */\nexport function toSafeDtype(dtype: string) {\n  const dtype2 = `<${dtype.slice(1)}`;\n  const mapping: Record<string, string> = {\n    '<f1': '<f4',\n    '<f2': '<f4',\n    '<i8': '<i4',\n    '<u8': '<u4',\n  };\n  return mapping[dtype2] ?? dtype2;\n}\n\n/**\n * Create a typed array from an ArrayBuffer or an Uint8Array.\n *\n * It returns a view on the underlaying buffer, without memory copy.\n *\n * FIXME: little and big endian are not supported\n */\nexport function toTypedArray(buffer: ArrayBuffer | Uint8Array, dtype: string) {\n  const mapping: Record<string, unknown> = {\n    '<f4': Float32Array,\n    '<f8': Float64Array,\n    '<i1': Int8Array,\n    '|i1': Int8Array,\n    i1: Int8Array, // FIXME: should be removed\n    '<i2': Int16Array,\n    '<i4': Int32Array,\n    '<u1': Uint8Array,\n    '|u1': Uint8Array,\n    u1: Uint8Array, // FIXME: should be removed\n    '<u2': Uint16Array,\n    '<u4': Uint32Array,\n  };\n  const arrayClass = mapping[dtype];\n  if (!arrayClass) {\n    throw new Error(`Unsupported dtype: ${dtype}`);\n  }\n  if (buffer instanceof Uint8Array) {\n    // Here we reuse the parent buffer and offset/length to avoid memory-copy\n    // @ts-expect-error\n    const bytes_per_element = arrayClass.BYTES_PER_ELEMENT;\n    try {\n      // @ts-expect-error\n      return new arrayClass(\n        buffer.buffer,\n        buffer.byteOffset,\n        buffer.byteLength / bytes_per_element\n      );\n    } catch {\n      console.warn(\n        `toTypedArray is using a memory copy for a '${arrayClass}'. Probably because the buffer is not properly aligned.`\n      );\n      // @ts-expect-error\n      return new arrayClass(buffer);\n    }\n  }\n  // @ts-expect-error\n  return new arrayClass(buffer);\n}\n\n/**\n * Convert an ArrayBuffer to a NdArray<TypedArray>\n *\n * NOTE: This is a very specific function, it would be better to remove it\n */\nexport function toNdArray(\n  buffer: ArrayBuffer,\n  shape: number[],\n  dtype: string\n): NdArray<TypedArray> {\n  const nElements = shape.reduce((previous, current) => previous * current);\n  let ArrayType;\n  switch (dtype) {\n    case '<f2': // TODO either float16 or float32 depending on h5grove\n      ArrayType =\n        nElements * 2 === buffer.byteLength ? Uint16Array : Float32Array;\n      break;\n    case '<f4':\n      ArrayType = Float32Array;\n      break;\n    case '<f8':\n      ArrayType = Float64Array;\n      break;\n    case '<i1':\n    case '|i1':\n    case 'i1':\n      ArrayType = Int8Array;\n      break;\n    case '<i2':\n      ArrayType = Int16Array;\n      break;\n    case '<i4':\n    case '<i8': // TODO converted server side\n      ArrayType = Int32Array;\n      break;\n    case '<u1':\n    case '|u1':\n    case 'u1':\n      ArrayType = Uint8Array;\n      break;\n    case '<u2':\n      ArrayType = Uint16Array;\n      break;\n    case '<u4':\n    case '<u8': // TODO converted server side\n      ArrayType = Uint32Array;\n      break;\n    default:\n      throw new Error(`Unsupported dtype: ${dtype}`);\n  }\n  return ndarray(new ArrayType(buffer), shape);\n}\n\n/**\n * Convert a typed array to a float32 if needed. Else return the array without copy.\n */\nexport function asFloat32Array(\n  array: ndarray.NdArray<ndarray.TypedArray>\n): ndarray.NdArray<Float32Array> {\n  if (array.dtype === 'float32') {\n    return array as ndarray.NdArray<Float32Array>;\n  }\n  return ndarray(Float32Array.from(array.data), array.shape);\n}\n\nexport function isNdArrayTypedArray(\n  entity: unknown\n): entity is NdArray<TypedArray> {\n  return (\n    entity instanceof Object &&\n    'data' in entity &&\n    'stride' in entity &&\n    'shape' in entity\n  );\n}\n\nexport function assertNdArrayTypedArray(\n  entity: unknown,\n  message = 'Expected NdArray<TypedArray>'\n): asserts entity is NdArray<TypedArray> {\n  if (!isNdArrayTypedArray(entity)) {\n    throw new Error(message);\n  }\n}\n\nexport function assertDisplayableNdArray(\n  entity: unknown,\n  message = 'Expected NdArray<TypedArray> or NdFloat16Array'\n): asserts entity is NdArray<TypedArray> {\n  if (!isNdArrayTypedArray(entity) && !(entity instanceof NdFloat16Array)) {\n    throw new Error(message);\n  }\n}\n\n/**\n * Slice an NdArray.\n *\n * It only support 1d arrays.\n */\nexport function ndslice(\n  array: NdArray<TypedArray>,\n  start: number,\n  stop: number\n): NdArray<TypedArray> {\n  if (array.dimension !== 1) {\n    throw new Error('Slicing only supported for 1dim array');\n  }\n  const array2 = array.data.subarray(start, stop);\n  return ndarray(array2, [stop - start]);\n}\n\nexport interface Dtype {\n  byteorder: '<' | '>';\n  type: 'f' | 'i' | 'u';\n  itemsize: number;\n  numpy: string;\n}\n\nexport function parseDtype(format: string): Dtype {\n  if (format.length !== 3) {\n    throw new Error(`Unsupported dtype format ${format}`);\n  }\n  return {\n    // @ts-expect-error\n    byteorder: format[0],\n    // @ts-expect-error\n    type: format[1],\n    itemsize: Number.parseInt(format[2]),\n    numpy: format,\n  };\n}\n\nexport function useSlicedArray(\n  array: NdArray<TypedArray>,\n  start: number,\n  stop: number\n): NdArray<TypedArray> {\n  return useMemo(() => {\n    return ndslice(array, start, stop);\n  }, [array, start, stop]);\n}\n\nexport function isShape(entity: unknown): boolean {\n  if (!Array.isArray(entity)) {\n    return false;\n  }\n  for (const value of entity) {\n    if (typeof value !== 'number') {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function assertShape(\n  entity: unknown,\n  message = 'Expected number[]'\n): asserts entity is number[] {\n  if (!isShape(entity)) {\n    throw new Error(message);\n  }\n}\n"],"names":["decodeFloat16","value","exponent","fraction","Number","NaN","Infinity","NdFloat16Array","constructor","data","shape","dimension","dtype","length","Error","this","index","arguments","undefined","getRaw","get","useLastNotification","events","lastEvent","setLastEvent","useState","celery","useMemo","messageHandler","useEffect","onMessage","includes","type","addListener","removeListener","assertH5Dataset","entity","message","Object","isH5Dataset","assertH5Group","isH5Group","PlotSelect","props","group","values","children","_jsx","Form","as","size","onChange","e","target","map","name","readCharAsList","attr","NoPlotCanBeParsed","super","setPrototypeOf","prototype","createPlotFromNxDataGroup","errors","signal","attrs","image","ndim","z","createImagePlotFromNxDataGroup","error","layout","xaxis","title","text","yaxis","showexponent","exponentformat","axes","xdataset","x","units","ydataset","y","SILX_style","JSON","parse","signal_scale_type","sc","push","auxs","auxiliary_signals","each","aux","auxDataset","asc","createCurvePlotFromNxDataGroup","withNamespace","hdf5","connect","mapStateToPropsWithCache","mapStateToPropsSimple","state","own","cache","providers","options","groups","selector","uri","params","datacollectionid","metadata","dispatch","actions","setParams","fetch","_props$group","_props$group$attrs","_props$group2","_props$group3","_props$group4","refreshThread","useRef","selectedPlot","setSelectedPlot","default","autoprocprogramid","poll","event","refresh","useCallback","newpoll","_props$actions","_props$actions$setPar","console","log","call","then","current","setTimeout","catch","_props$actions2","newparams","_props$actions3","clearTimeout","id","_jsxs","Alert","variant","NX_class","createPlotFromGroup","className","RemountOnResize","PlotEnhancer","Yaml","yamlNode","url","unknownOptions","YamlAsserts","Hdf5Plot","Cache","debounce","previous","lodash","memo","callable","deps","defaultResult","previousResult","previousDeps","result","mapStateToProps","toSafeDtype","_mapping$dtype","dtype2","slice","toTypedArray","buffer","arrayClass","Float32Array","Float64Array","Int8Array","i1","Int16Array","Int32Array","Uint8Array","u1","Uint16Array","Uint32Array","bytes_per_element","BYTES_PER_ELEMENT","byteOffset","byteLength","warn","toNdArray","nElements","reduce","ArrayType","ndarray","asFloat32Array","array","from","isNdArrayTypedArray","assertNdArrayTypedArray","assertDisplayableNdArray","parseDtype","format","byteorder","itemsize","parseInt","numpy","useSlicedArray","start","stop","array2","subarray","ndslice","assertShape","Array","isArray","isShape"],"sourceRoot":""}