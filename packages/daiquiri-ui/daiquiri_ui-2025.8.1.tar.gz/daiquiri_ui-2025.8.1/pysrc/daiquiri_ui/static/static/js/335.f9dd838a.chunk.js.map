{"version":3,"file":"static/js/335.f9dd838a.chunk.js","mappings":"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","sources":["connect/scans/ScanValue.js","components/scans/ScanValue.tsx","components/yaml-layout/components/scans/ScanValue.tsx","connect/ConnectUtils.ts"],"sourcesContent":["import ScanValue from 'components/scans/ScanValue';\nimport { withNamespace } from 'providers/namespace';\nimport scans from 'providers/scans';\nimport { connect } from 'react-redux';\n\nimport mapStateToPropsWithCache from '../ConnectUtils';\n\nconst mapStateAndCacheToProps = (state, own, cache) => {\n  const { list } = own.providers.scans;\n  return {\n    scans: list.selector('results', state),\n    selectedScan: scans.selector('selectedScan', state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch, own) => ({\n  actions: {\n    setFollow: () => {\n      if (own.selectedScan === undefined) {\n        scans.dispatch('RESET_SCAN_SELECTION');\n      }\n    }\n  }\n});\n\nexport default withNamespace({ scans })(\n  connect(\n    mapStateToPropsWithCache(mapStateAndCacheToProps),\n    mapDispatchToProps\n  )(ScanValue)\n);\n","import { useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport type { Scan } from './models';\nimport { findLastScanId } from './utils';\n\nexport interface ScanValueOptions {\n  /** Selected scan key to display */\n  scanKey: string;\n  /** Name for the value (overrides `scanKey` as name) */\n  name?: string;\n}\n\ninterface Props {\n  scans: Record<string, Scan>;\n  actions: {\n    setFollow: () => void;\n  };\n  selectedScan: number;\n  options: ScanValueOptions;\n}\n\nexport default function ScanValue(props: Props) {\n  const { options, selectedScan, scans, actions } = props;\n  const { scanKey, name } = options;\n\n  const lastScanId = findLastScanId(scans);\n\n  useEffect(() => {\n    actions.setFollow();\n  }, []);\n\n  const fieldName = name ?? scanKey;\n  if (lastScanId === null) {\n    return (\n      <div className=\"scan-value\">\n        <Row>\n          <Col>{fieldName}:</Col>\n          <Col>No scan loaded</Col>\n        </Row>\n      </div>\n    );\n  }\n\n  const scanid = selectedScan || lastScanId;\n  const scanObj = scans[scanid] || {};\n  const value: any = scanObj[scanKey as keyof typeof scanObj];\n  if (!value) {\n    return (\n      <div className=\"scan-value\">\n        <Row>\n          <Col>{fieldName}:</Col>\n          <Col>\n            <i className=\"fa fa-warning me-1\" />\n            No data for this scan\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"scan-value\">\n      <Row>\n        <Col>{fieldName}:</Col>\n        <Col>{value}</Col>\n      </Row>\n    </div>\n  );\n}\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport ScanValue from 'connect/scans/ScanValue';\n\nexport default function Yaml(props: YamlComponent) {\n  const { yamlNode, providers, scanKey, name, ...unknownOptions } = props;\n  YamlAsserts.assertString(yamlNode, 'scanKey', scanKey);\n  YamlAsserts.assertOptionalString(yamlNode, 'name', name);\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <ScanValue providers={providers} options={{ scanKey, name }} />;\n}\n","import lodash from 'lodash';\n\nexport class Cache {\n  private cache: Record<string, any>;\n\n  public constructor() {\n    this.cache = {};\n  }\n\n  /**\n   * Returns and store value if the previous stored value deep differ.\n   *\n   * Else returns the previous stored value\n   */\n  public debounce<T>(name: string, value: T): T {\n    const previous = this.cache[name];\n    if (lodash.isEqual(previous, value)) {\n      return previous;\n    }\n    this.cache[name] = value;\n    return value;\n  }\n\n  /**\n   * Compute and returns and cache a value if the previous stored value deep differ.\n   *\n   * Else returns the previous computed result.\n   */\n  public memo<T>(name: string, callable: () => T, deps: unknown[]): T {\n    const defaultResult = [undefined, undefined];\n    const [previousResult, previousDeps] = this.cache[name] || defaultResult;\n    if (lodash.isEqual(previousDeps, deps)) {\n      return previousResult;\n    }\n    const result = callable();\n    this.cache[name] = [result, deps];\n    return result;\n  }\n}\n\nexport default function mapStateToPropsWithCache<S, O, R>(\n  mapStateToProps: (state: S, own: O, cache: Cache) => R\n): (state: S, own: O) => R {\n  const cache = new Cache();\n  return (state, own) => mapStateToProps(state, own, cache);\n}\n"],"names":["withNamespace","scans","connect","mapStateToPropsWithCache","mapStateAndCacheToProps","state","own","cache","list","providers","selector","selectedScan","mapDispatchToProps","dispatch","actions","setFollow","undefined","props","options","scanKey","name","lastScanId","findLastScanId","useEffect","fieldName","_jsx","className","children","_jsxs","Row","Col","value","Yaml","yamlNode","unknownOptions","YamlAsserts","ScanValue","Cache","constructor","this","debounce","previous","lodash","memo","callable","deps","defaultResult","previousResult","previousDeps","result","mapStateToProps"],"sourceRoot":""}