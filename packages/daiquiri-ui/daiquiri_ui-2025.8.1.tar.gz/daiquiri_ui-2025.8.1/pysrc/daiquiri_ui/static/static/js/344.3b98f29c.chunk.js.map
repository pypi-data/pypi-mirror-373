{"version":3,"file":"static/js/344.3b98f29c.chunk.js","mappings":"qQAUA,MAAMA,EAAOA,CAACC,EAAmBC,EAAiBC,KAChDC,EAAAA,EAAAA,KAAqBH,EAAWC,EAASC,EAAQ,EAOnD,SAASE,EAAQC,GACf,MAAMC,EAAW,IAAIC,EAAAA,SACfC,EAAO,IAAIC,EAAAA,SAAS,CACxBC,aAAa,EACbC,iBAAiB,EACjBC,WAAY,EACZC,MAAO,CACLC,WAAY,aAGhBN,EAAKO,UAAUT,GAEf,MAAMU,GAAQC,EAAAA,EAAAA,QAAuB,OAErCC,EAAAA,EAAAA,YAAU,KAMJF,EAAMG,UACRX,EAAKY,KAAKJ,EAAMG,SAChBX,EAAKO,UAAU,IAAIM,EAAAA,YACnBb,EAAKc,QAAU,CACbC,SAAU,GACVC,WAAY,iBAEdhB,EAAKiB,MAAM,qCAGXtB,EAAAA,EAAAA,aAA6B,OAC7BA,EAAAA,EAAAA,YACE,MACA,UACCuB,IACClB,EAAKiB,MAAMC,EAAKC,OAAO,IAG3BnB,EAAKoB,OAAOC,IACV9B,EAAK,MAAO,QAAS,CAAE+B,MAAOD,EAAIA,KAAM,IAvB1CvB,EAASyB,MACThC,EAAK,MAAO,SAAU,CAAEiC,KAAMxB,EAAKwB,KAAMC,KAAMzB,EAAKyB,OA0BpDlC,EAAK,MAAO,QAAS,CAAE+B,MAAO,OAChC,GACC,CAACtB,EAAMF,EAAUU,EAAMG,UAE1B,MAAM,SAAEe,GAAa7B,EAQrB,OAPAa,EAAAA,EAAAA,YAAU,KACRV,EAAKc,QAAU,CACba,cAAeD,EACfxB,YAAawB,EACd,GACA,CAAC1B,EAAM0B,KAEHE,EAAAA,EAAAA,KAAA,OAAKC,IAAKrB,EAAOsB,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAC1D,CAYA,QAVA,SAAqBnC,GACnB,OACE+B,EAAAA,EAAAA,KAACK,EAAAA,EAAe,CAAAC,UACdN,EAAAA,EAAAA,KAACO,EAAAA,EAAS,CAAAD,UACRN,EAAAA,EAAAA,KAAChC,EAAO,IAAKC,OAIrB,E,eCrEA,SAAeuC,EAAAA,EAAAA,KAXf,SAAyBC,EAAYC,GACnC,MAAM,UAAEC,GAAcD,EACtB,MAAO,CACLZ,SAAUc,EAAAA,EAAAA,SAAiB,WAAYH,GAE3C,IAEA,WACE,MAAO,CAAC,CACV,GAEA,CAA4DzC,GCX7C,SAAS6C,EAAK5C,GAC3B,MAAM,UAAE0C,EAAS,SAAEG,KAAaC,GAAmB9C,EAEnD,OADA+C,EAAAA,GAAgCF,EAAUC,IACnCf,EAAAA,EAAAA,KAAChC,EAAO,CAAC2C,UAAWA,GAC7B,C","sources":["components/Console.tsx","connect/Console.ts","components/yaml-layout/components/Console.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { WebglAddon } from 'xterm-addon-webgl';\nimport 'xterm/css/xterm.css';\nimport { FullSizer } from '@esrf/daiquiri-lib';\n\nimport SocketIOService from 'services/SocketIOService';\nimport RemountOnResize from 'components/utils/RemountOnResize';\n\nconst emit = (namespace: string, message: string, payload: unknown) => {\n  SocketIOService.emit(namespace, message, payload);\n};\n\ninterface Props {\n  operator?: boolean;\n}\n\nfunction Console(props: Props) {\n  const fitAddon = new FitAddon();\n  const term = new Terminal({\n    cursorBlink: true,\n    macOptionIsMeta: true,\n    scrollback: 3,\n    theme: {\n      background: '#272822',\n    },\n  });\n  term.loadAddon(fitAddon);\n\n  const xterm = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const resize = () => {\n      fitAddon.fit();\n      emit('pty', 'resize', { cols: term.cols, rows: term.rows });\n    };\n\n    if (xterm.current) {\n      term.open(xterm.current);\n      term.loadAddon(new WebglAddon());\n      term.options = {\n        fontSize: 12,\n        fontFamily: 'Monaco, Menlo',\n      };\n      term.write('Starting connection to console...');\n\n      // term.writeUtf8(new Uint8Array(data.output))\n      SocketIOService.addNamespace('pty');\n      SocketIOService.addCallback(\n        'pty',\n        'output',\n        (data: { output: string }) => {\n          term.write(data.output);\n        }\n      );\n      term.onKey((key) => {\n        emit('pty', 'input', { input: key.key });\n      });\n\n      resize();\n      emit('pty', 'input', { input: '\\n' });\n    }\n  }, [term, fitAddon, xterm.current]);\n\n  const { operator } = props;\n  useEffect(() => {\n    term.options = {\n      disableStdin: !operator,\n      cursorBlink: operator,\n    };\n  }, [term, operator]);\n\n  return <div ref={xterm} style={{ width: '100%', height: '100%' }} />;\n}\n\nfunction ConsoleWrap(props: Props) {\n  return (\n    <RemountOnResize>\n      <FullSizer>\n        <Console {...props} />\n      </FullSizer>\n    </RemountOnResize>\n  );\n}\n\nexport default ConsoleWrap;\n","import { connect } from 'react-redux';\nimport Console from 'components/Console';\nimport session from 'providers/session';\n\nfunction mapStateToProps(state: any, own: any) {\n  const { providers } = own;\n  return {\n    operator: session.selector('operator', state),\n  };\n}\n\nfunction mapDispatchToProps() {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Console);\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport Console from 'connect/Console';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, ...unknownOptions } = props;\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <Console providers={providers} />;\n}\n"],"names":["emit","namespace","message","payload","SocketIOService","Console","props","fitAddon","FitAddon","term","Terminal","cursorBlink","macOptionIsMeta","scrollback","theme","background","loadAddon","xterm","useRef","useEffect","current","open","WebglAddon","options","fontSize","fontFamily","write","data","output","onKey","key","input","fit","cols","rows","operator","disableStdin","_jsx","ref","style","width","height","RemountOnResize","children","FullSizer","connect","state","own","providers","session","Yaml","yamlNode","unknownOptions","YamlAsserts"],"sourceRoot":""}