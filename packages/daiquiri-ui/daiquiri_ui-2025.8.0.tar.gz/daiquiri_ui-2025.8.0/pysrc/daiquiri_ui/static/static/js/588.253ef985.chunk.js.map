{"version":3,"file":"static/js/588.253ef985.chunk.js","mappings":"0GAAO,SAASA,EAAsBC,GACpC,OAAKA,GAAmB,SAAVA,EAIA,SAAVA,EACK,CAAC,OAAQ,aAEJ,cAAVA,GAGU,aAAVA,EAFK,CAAC,UAAW,WAKP,aAAVA,GAGU,SAAVA,EAFK,CAAC,WAAY,WAKR,iBAAVA,EACK,CAAC,UAAW,aAEP,WAAVA,EACK,CAAC,QAAS,UAGL,SAAVA,EACK,CAAC,OAAQ,aAEJ,YAAVA,EACK,CAAC,UAAW,WAEP,aAAVA,EACK,CAAC,WAAY,WAER,YAAVA,EACK,CAAC,UAAW,aAEP,UAAVA,EACK,CAAC,QAAS,UAEZ,CAACA,EAAO,UAxCN,CAAC,OAAQ,YAyCpB,C,+NC7BA,MAAMC,EAASC,IAAM,yCAErB,SAASC,EAAoBC,GAC3B,MAAa,cAATA,EACK,CAAC,OAAQ,2BAEL,cAATA,EACK,CAAC,OAAQ,2BAEL,oBAATA,EACK,CACL,SACA,8DAGS,cAATA,EACK,CAAC,YAAa,0CAEV,oBAATA,EACK,CAAC,kBAAmB,gDAEtB,CAACA,EAAM,iBAChB,CAEA,SAASC,IACP,MAAMC,GAAYC,EAAAA,EAAAA,KAClB,IAAKD,EAEH,OADAL,EAAO,gCACAO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAET,MAAM,SAAEC,GAAaJ,EACrB,IAAKI,EAEH,OADAT,EAAO,+BACAO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAET,MAAM,cAAEE,GAAkBL,EAmB1B,MAAMM,EAAgBF,EAASG,QAAO,CAACC,EAAOC,KAC5C,MAAOC,GAAQb,EAAoBY,GACnC,OAAOD,EAAQE,EAAKC,MAAM,GACzB,GA2BH,OACET,EAAAA,EAAAA,KAACU,EAAAA,EAAW,CAAAC,UACTC,EAAAA,EAAAA,KAAIV,GAAU,CAACK,EAASM,KACvB,MAAMrB,EAlDZ,SAA0BqB,GACxB,OAAKf,EAIDe,EAAQV,EACH,OAGLU,IAAUV,EAGLL,EAAUN,MAEZ,OAZE,EAaX,CAmCoBsB,CAAiBD,GAC/B,OA7BN,SACEA,EACArB,EACAI,GAKA,MAAOmB,EAAiBC,IAAWzB,EAAAA,EAAAA,GAAsBC,IAClDgB,EAAMS,GAAetB,EAAoBC,GAC1CsB,EAA+B,YAApBH,EAEjB,OACEf,EAAAA,EAAAA,KAACU,EAAAA,EAAW,CACVQ,SAAUA,EACVF,QAASA,EACTG,MAAO,GAXUC,EAWKZ,EAVjBY,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GAAGC,gBAWhDC,MAAOR,EACPS,IAAKlB,EAAKC,OACVkB,IAAKvB,GACAS,GAfT,IAAqBO,CAkBvB,CAMaQ,CAAyBf,EAAOrB,EAAOe,EAAQ,KAI9D,CAEA,SAASsB,EAAaC,GACpB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,ICnGtC,SAA2BC,EAAUC,GACxC,MAAMC,GAAQC,EAAAA,EAAAA,GAAaH,IAC3BI,EAAAA,EAAAA,YAAU,KACN,IAAKH,GAAa,IAAPA,EACP,OAEJ,MAAMI,EAAKC,aAAY,IAAMJ,EAAMK,WAAWN,GAC9C,MAAO,IAAMO,cAAcH,EAAG,GAE/B,CAACJ,GACR,CD0FEQ,EAAkB,KAChBX,EAAaY,KAAKlB,MAAM,GACvB,KACH,MAAMmB,GAAWC,EAAAA,EAAAA,UAAQ,KACvB,GAAIf,GAAa,EACf,OAAO,EAET,MAAMgB,GAAQC,EAAAA,EAAAA,IAAclB,EAAMmB,WAC5BJ,GAAYd,EAAYgB,EAAMG,WAAa,IACjD,OAAIL,EAAW,EACN,EAEFA,CAAQ,GACd,CAACf,EAAMmB,UAAWlB,IACrB,OACEoB,EAAAA,EAAAA,MAAAlD,EAAAA,SAAA,CAAAU,SAAA,EACGyC,EAAAA,EAAAA,IAAsBP,GAAW,KAClC7C,EAAAA,EAAAA,KAAA,KAAGqD,UAAU,wCAGnB,CAEe,SAASC,EAAaxB,GACnC,MAAMhC,GAAYC,EAAAA,EAAAA,KAEZwD,GAAiBC,EAAAA,EAAAA,KACpBhE,IACC,GAAKM,EAGL,OAAON,EAAMiE,SAASC,mBAAmBC,QAAQC,QAC/C9D,EAAU+D,iBACX,IAIL,IAAK/D,EACH,OACEE,EAAAA,EAAAA,KAAC8D,EAAAA,EAAK,CAAAnD,UACJX,EAAAA,EAAAA,KAAC8D,EAAAA,EAAAA,SAAc,CAAAnD,SAAC,cAKtB,MAAOnB,EAAOwB,IAAWzB,EAAAA,EAAAA,GAAsBO,EAAUN,OAyBzD,MAAM,UAAEyD,EAAS,QAAEc,EAAO,SAAElB,GAA2B,OAAdU,QAAc,IAAdA,EAAAA,EAAkB,CAAC,EACtDtC,EAxBN,SAAwB+C,GACtB,MAAM,SAAE9D,GAAa8D,EACrB,IAAK9D,EACH,MAAO,GAET,MAAM,cAAEC,GAAkB6D,EAE1B,GAAI7D,EAAgB,EAClB,MAAO,kBAGT,GACEA,EAAgB,IAAMD,EAASO,QACX,aAApBuD,EAAUxE,MAEV,MAAO,OAGT,MAAMyE,EAAa/D,EAASC,IACrB,CAAEc,GAAetB,EAAoBsE,GAC5C,MAAO,GAAG9D,EAAgB,KAAKD,EAASO,WAAWQ,GACrD,CAGoBiD,CAAepE,GAEnC,OACEE,EAAAA,EAAAA,KAAC8D,EAAAA,EAAK,CAAAnD,UACJX,EAAAA,EAAAA,KAAC8D,EAAAA,EAAAA,SAAc,CAAAnD,UACbwC,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,CACGb,EAAU+D,mBACTV,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,EACEX,EAAAA,EAAAA,KAAA,KAAAW,SAAG,oBAAmB,KAAGb,EAAU+D,qBAGvCV,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,EACEX,EAAAA,EAAAA,KAAA,KAAAW,SAAG,SAAQ,KAAGb,EAAUqE,WAE1BhB,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,EACEX,EAAAA,EAAAA,KAAA,KAAAW,SAAG,UAAS,IAAE,IACbsC,GAAYD,EAAAA,EAAAA,IAAcC,GAAWmB,qBAAuB,OAE/DjB,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,EACEX,EAAAA,EAAAA,KAAA,KAAAW,SAAG,WAAU,IAAE,KACfX,EAAAA,EAAAA,KAACqE,EAAAA,EAAK,CAACC,GAAItD,EAASS,MAAO,gBAAgB3B,EAAUN,QAAQmB,SAC1DnB,QAGL2D,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,EACEX,EAAAA,EAAAA,KAAA,KAAAW,SAAG,aAAY,MAAEX,EAAAA,EAAAA,KAACH,EAAoB,QAExCsD,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,EACEX,EAAAA,EAAAA,KAAA,KAAAW,SAAG,gBAAe,KAAGM,KAEtB8C,IACCZ,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,EACEX,EAAAA,EAAAA,KAAA,KAAAW,SAAG,QAAO,MAAGqC,EAAAA,EAAAA,IAAce,GAASK,wBAGvCnB,IACCE,EAAAA,EAAAA,MAAA,MAAAxC,SAAA,EACEX,EAAAA,EAAAA,KAAA,KAAAW,SAAG,aAAY,IAAE,IAChBkC,GACCO,EAAAA,EAAAA,IAAsBP,IAEtB7C,EAAAA,EAAAA,KAAC6B,EAAY,CAACoB,UAAWA,aAQzC,CEjOe,SAASsB,EAAKzC,GAC3B,MAAM,UAAE0C,EAAS,SAAEC,KAAaC,GAAmB5C,EAEnD,OADA6C,EAAAA,GAAgCF,EAAUC,IACnC1E,EAAAA,EAAAA,KAACsD,EAAY,GACtB,C","sources":["components/tomo/utils/TomoScans.ts","components/tomo/scaninfo/Default.tsx","../node_modules/.pnpm/@react-hookz+web@22.0.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-hookz/web/esm/useIntervalEffect/index.js","components/yaml-layout/components/tomo/TomoScanInfo.tsx"],"sourcesContent":["export function getLabelFromScanState(state: string | null): [string, string] {\n  if (!state || state === 'NONE') {\n    return ['NONE', 'secondary'];\n  }\n  // BLISS\n  if (state === 'IDLE') {\n    return ['IDLE', 'secondary'];\n  }\n  if (state === 'PREPARING') {\n    return ['RUNNING', 'warning'];\n  }\n  if (state === 'STARTING') {\n    return ['RUNNING', 'warning'];\n  }\n  if (state === 'STOPPING') {\n    return ['FINISHED', 'success'];\n  }\n  if (state === 'DONE') {\n    return ['FINISHED', 'success'];\n  }\n  if (state === 'USER_ABORTED') {\n    return ['ABORTED', 'secondary'];\n  }\n  if (state === 'KILLED') {\n    return ['ERROR', 'danger'];\n  }\n  // Daiquiri\n  if (state === 'IDLE') {\n    return ['IDLE', 'secondary'];\n  }\n  if (state === 'RUNNING') {\n    return ['RUNNING', 'warning'];\n  }\n  if (state === 'FINISHED') {\n    return ['FINISHED', 'success'];\n  }\n  if (state === 'ABORTED') {\n    return ['ABORTED', 'secondary'];\n  }\n  if (state === 'ERROR') {\n    return ['ERROR', 'danger'];\n  }\n  return [state, 'danger'];\n}\n","import { useMemo, useState } from 'react';\nimport { Badge, ProgressBar } from 'react-bootstrap';\nimport { map } from 'lodash';\nimport { Panel } from '@esrf/daiquiri-lib';\nimport debug from 'debug';\nimport { useSelector } from 'react-redux';\nimport type { ReduxState } from '../../../types/ReduxStore';\nimport type { DataCollection } from '../../../types/DataCollection';\nimport { humanReadableDuration, parseDDMMYYYY } from '../../scans/utils';\nimport { useIntervalEffect } from '@react-hookz/web';\nimport { useLastScanGroup } from '../utils/hooks';\nimport { getLabelFromScanState } from '../utils/TomoScans';\nimport type { TomoScanInfo as TomoScanInfoDesc } from 'store/TomoStore';\n\nconst logger = debug('daiquiri.components.tomo.TomoScanInfo');\n\nfunction getLabelDescription(type: string): [string, string] {\n  if (type === 'tomo:dark') {\n    return ['Dark', 'Acquire dark projection'];\n  }\n  if (type === 'tomo:flat') {\n    return ['Flat', 'Acquire flat projection'];\n  }\n  if (type === 'tomo:return_ref') {\n    return [\n      'Return',\n      'Return to origin and acquiring few projection as reference',\n    ];\n  }\n  if (type === 'tomo:step') {\n    return ['Step scan', 'Tomo scan using rotation as step motor'];\n  }\n  if (type === 'tomo:continuous') {\n    return ['Continuous scan', 'Tomo scan using rotation as continuous motor'];\n  }\n  return [type, 'No description'];\n}\n\nfunction TomoProgressSequence() {\n  const lastgroup = useLastScanGroup();\n  if (!lastgroup) {\n    logger('Skipped: lastgroup missing.');\n    return <></>;\n  }\n  const { subscans } = lastgroup;\n  if (!subscans) {\n    logger('Skipped: subscans missing.');\n    return <></>;\n  }\n  const { activesubscan } = lastgroup;\n\n  function indexToScanState(index: number) {\n    if (!lastgroup) {\n      return '';\n    }\n\n    if (index < activesubscan) {\n      return 'DONE';\n    }\n\n    if (index === activesubscan) {\n      // Returns the actual state of the scan group\n      // If the group fail, probably this subscan have failed\n      return lastgroup.state;\n    }\n    return 'IDLE';\n  }\n\n  const sumCharacters = subscans.reduce((total, subscan) => {\n    const [name] = getLabelDescription(subscan);\n    return total + name.length;\n  }, 0);\n\n  function createSubscanProgressBar(\n    index: number,\n    state: string,\n    type: string\n  ) {\n    function capitalized(str: string) {\n      return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n    }\n    const [normalizedState, variant] = getLabelFromScanState(state);\n    const [name, description] = getLabelDescription(type);\n    const animated = normalizedState === 'RUNNING';\n\n    return (\n      <ProgressBar\n        animated={animated}\n        variant={variant}\n        label={`${capitalized(name)}`}\n        title={description}\n        now={name.length}\n        max={sumCharacters}\n        key={index}\n      />\n    );\n  }\n\n  return (\n    <ProgressBar>\n      {map(subscans, (subscan, index) => {\n        const state = indexToScanState(index);\n        return createSubscanProgressBar(index, state, subscan);\n      })}\n    </ProgressBar>\n  );\n}\n\nfunction LiveDuration(props: { starttime: string }) {\n  const [timestamp, setTimestamp] = useState(0);\n  useIntervalEffect(() => {\n    setTimestamp(Date.now());\n  }, 5000);\n  const duration = useMemo(() => {\n    if (timestamp <= 0) {\n      return 0;\n    }\n    const start = parseDDMMYYYY(props.starttime);\n    const duration = (timestamp - start.getTime()) / 1000;\n    if (duration < 0) {\n      return 0;\n    }\n    return duration;\n  }, [props.starttime, timestamp]);\n  return (\n    <>\n      {humanReadableDuration(duration)}{' '}\n      <i className=\"fa-solid fa-spinner fa-spin-pulse\" />\n    </>\n  );\n}\n\nexport default function TomoScanInfo(props: Record<string, never>) {\n  const lastgroup = useLastScanGroup();\n\n  const dataCollection = useSelector<ReduxState, DataCollection | undefined>(\n    (state) => {\n      if (!lastgroup) {\n        return undefined;\n      }\n      return state.metadata.ns_datacollections.default.results[\n        lastgroup.datacollectionid\n      ];\n    }\n  );\n\n  if (!lastgroup) {\n    return (\n      <Panel>\n        <Panel.Contents>No scan</Panel.Contents>\n      </Panel>\n    );\n  }\n\n  const [state, variant] = getLabelFromScanState(lastgroup.state);\n\n  function getDescription(scanGroup: TomoScanInfoDesc) {\n    const { subscans } = scanGroup;\n    if (!subscans) {\n      return '';\n    }\n    const { activesubscan } = scanGroup;\n\n    if (activesubscan < 0) {\n      return 'Not yet started';\n    }\n\n    if (\n      activesubscan + 1 === subscans.length &&\n      scanGroup.state !== 'STARTING'\n    ) {\n      return 'Done';\n    }\n\n    const activetype = subscans[activesubscan];\n    const [, description] = getLabelDescription(activetype);\n    return `${activesubscan + 1}/${subscans.length}: ${description}`;\n  }\n\n  const { starttime, endtime, duration } = dataCollection ?? {};\n  const description = getDescription(lastgroup);\n\n  return (\n    <Panel>\n      <Panel.Contents>\n        <ul>\n          {lastgroup.datacollectionid && (\n            <li>\n              <b>Data collection</b>: {lastgroup.datacollectionid}\n            </li>\n          )}\n          <li>\n            <b>Scan</b>: {lastgroup.scanid}\n          </li>\n          <li>\n            <b>Start</b>:{' '}\n            {starttime ? parseDDMMYYYY(starttime).toLocaleTimeString() : ''}\n          </li>\n          <li>\n            <b>Status</b>:{' '}\n            <Badge bg={variant} title={`BLISS state: ${lastgroup.state}`}>\n              {state}\n            </Badge>\n          </li>\n          <li>\n            <b>Progress</b>: <TomoProgressSequence />\n          </li>\n          <li>\n            <b>Description</b>: {description}\n          </li>\n          {endtime && (\n            <li>\n              <b>End</b>: {parseDDMMYYYY(endtime).toLocaleTimeString()}\n            </li>\n          )}\n          {starttime && (\n            <li>\n              <b>Duration</b>:{' '}\n              {duration ? (\n                humanReadableDuration(duration)\n              ) : (\n                <LiveDuration starttime={starttime} />\n              )}\n            </li>\n          )}\n        </ul>\n      </Panel.Contents>\n    </Panel>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSyncedRef } from '../useSyncedRef';\n/**\n * Like `setInterval` but in form of react hook.\n *\n * @param callback Callback to be called within interval.\n * @param ms Interval delay in milliseconds, `undefined` disables the interval.\n * Keep in mind, that changing this parameter will re-set interval, meaning\n * that it will be set as new after the change.\n */\nexport function useIntervalEffect(callback, ms) {\n    const cbRef = useSyncedRef(callback);\n    useEffect(() => {\n        if (!ms && ms !== 0) {\n            return;\n        }\n        const id = setInterval(() => cbRef.current(), ms);\n        return () => clearInterval(id);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ms]);\n}\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport TomoScanInfo from 'components/tomo/scaninfo/Default';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, ...unknownOptions } = props;\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <TomoScanInfo />;\n}\n"],"names":["getLabelFromScanState","state","logger","debug","getLabelDescription","type","TomoProgressSequence","lastgroup","useLastScanGroup","_jsx","_Fragment","subscans","activesubscan","sumCharacters","reduce","total","subscan","name","length","ProgressBar","children","map","index","indexToScanState","normalizedState","variant","description","animated","label","str","charAt","toUpperCase","slice","toLowerCase","title","now","max","createSubscanProgressBar","LiveDuration","props","timestamp","setTimestamp","useState","callback","ms","cbRef","useSyncedRef","useEffect","id","setInterval","current","clearInterval","useIntervalEffect","Date","duration","useMemo","start","parseDDMMYYYY","starttime","getTime","_jsxs","humanReadableDuration","className","TomoScanInfo","dataCollection","useSelector","metadata","ns_datacollections","default","results","datacollectionid","Panel","endtime","scanGroup","activetype","getDescription","scanid","toLocaleTimeString","Badge","bg","Yaml","providers","yamlNode","unknownOptions","YamlAsserts"],"sourceRoot":""}