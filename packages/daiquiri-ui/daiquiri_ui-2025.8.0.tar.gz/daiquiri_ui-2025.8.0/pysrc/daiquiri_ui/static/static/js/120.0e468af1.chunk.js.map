{"version":3,"file":"static/js/120.0e468af1.chunk.js","mappings":"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","sources":["components/tomo/scanlist/Default.tsx","connect/tomo/TomoScanList.tsx","components/yaml-layout/components/tomo/TomoScanList.tsx"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport {\n  Table,\n  Button,\n  Container,\n  OverlayTrigger,\n  Tooltip,\n} from 'react-bootstrap';\nimport type { TomoScanTask } from 'types/Tomo';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport type { TomoScanTaskActions } from 'store/TomoStore';\n\ninterface Props {\n  tasks: TomoScanTask[];\n  actions: TomoScanTaskActions;\n}\n\nfunction ScanInfoTooltipContent({ task }: { task: TomoScanTask }) {\n  const roi = task.roi;\n  const acq = task.acquisition;\n  return (\n    <div>\n      <h5>Acquisition</h5>\n      {acq && <div>{acq.detector}</div>}\n      {acq && <div>×{acq.magnification}</div>}\n      {acq && <div>Fov: {acq.fov[0]} mm</div>}\n      {acq && <div>Px: {acq.pixelSize[0]} µm</div>}\n      <h5>ROI</h5>\n      {task.roi && <div>X: {roi.center.x} mm</div>}\n      {task.roi && <div>Y: {roi.center.y} mm</div>}\n      {task.roi && <div>Z: {roi.centerZ} mm</div>}\n      {task.roi && roi.width && <div>Width: {roi.width} mm</div>}\n      {task.roi && roi.height && <div>Height: {roi.height} mm</div>}\n    </div>\n  );\n}\n\nfunction ScanInfo({\n  task,\n  actions,\n}: {\n  task: TomoScanTask;\n  actions: TomoScanTaskActions;\n}) {\n  return (\n    <>\n      <td>{task.id}</td>\n      <td>{task.kind}</td>\n      <td>{task.estimationTime}</td>\n      <td>\n        <div className=\"d-flex\">\n          <OverlayTrigger\n            placement=\"left\"\n            overlay={\n              <Tooltip id=\"button-tooltip\">\n                <ScanInfoTooltipContent task={task} />\n              </Tooltip>\n            }\n          >\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                console.warn('not yet implemented');\n              }}\n            >\n              <i className=\"fa fa-fw fa-info\" />\n            </Button>\n          </OverlayTrigger>\n          <Button\n            size=\"sm\"\n            variant=\"danger\"\n            onClick={(event: MouseEvent) => {\n              event.preventDefault();\n              event.stopPropagation();\n              actions.removeScanTask(task.id);\n            }}\n          >\n            <i className=\"fa fa-fw fa-trash\" />\n          </Button>\n        </div>\n      </td>\n    </>\n  );\n}\n\nexport default function TomoScanList(props: Props) {\n  const { tasks, actions } = props;\n  function handleDrop(droppedItem: any) {\n    if (!droppedItem.destination) {\n      return;\n    }\n    actions.reorderScanTask(\n      droppedItem.source.index,\n      droppedItem.destination.index\n    );\n  }\n\n  function getTaskClass(task: TomoScanTask) {\n    if (task.active) {\n      return 'table-info';\n    }\n    return 'bg-light';\n  }\n\n  return (\n    <Container>\n      <div>\n        <h4>Scan planning</h4>\n      </div>\n      <Table responsive>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Kind</th>\n            <th>Estimation</th>\n            <th>&nbsp;</th>\n          </tr>\n        </thead>\n        <DragDropContext onDragEnd={handleDrop}>\n          <Droppable droppableId=\"table\">\n            {(provided) => (\n              <tbody {...provided.droppableProps} ref={provided.innerRef}>\n                {tasks.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided) => (\n                      <tr\n                        className={getTaskClass(item)}\n                        ref={provided.innerRef}\n                        {...provided.dragHandleProps}\n                        {...provided.draggableProps}\n                        onClick={(event: MouseEvent) => {\n                          event.preventDefault();\n                          event.stopPropagation();\n                          actions.activateScanTask(item.id);\n                        }}\n                      >\n                        <ScanInfo task={item} actions={actions} />\n                      </tr>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </tbody>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </Table>\n    </Container>\n  );\n}\n","import TomoScanList from 'components/tomo/scanlist/Default';\nimport { useTomoScanTaskActions, useTomoStore } from '../../store/TomoStore';\n\nfunction useScanTasks() {\n  return useTomoStore((state) => {\n    return state.scanTasks;\n  });\n}\n\nexport default function Default(props: Record<string, never>) {\n  const actions = useTomoScanTaskActions();\n  const tasks = useScanTasks();\n  return <TomoScanList actions={actions} tasks={tasks} />;\n}\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport TomoScanList from 'connect/tomo/TomoScanList';\n\nexport default function Yaml(props: YamlComponent) {\n  const { yamlNode, ...unknownOptions } = props;\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <TomoScanList />;\n}\n"],"names":["ScanInfoTooltipContent","_ref","task","roi","acq","acquisition","_jsxs","children","_jsx","detector","magnification","fov","pixelSize","center","x","y","centerZ","width","height","ScanInfo","_ref2","actions","_Fragment","id","kind","estimationTime","className","OverlayTrigger","placement","overlay","Tooltip","Button","size","onClick","console","warn","variant","event","preventDefault","stopPropagation","removeScanTask","TomoScanList","props","tasks","Container","Table","responsive","DragDropContext","onDragEnd","droppedItem","destination","reorderScanTask","source","index","Droppable","droppableId","provided","droppableProps","ref","innerRef","map","item","Draggable","draggableId","active","dragHandleProps","draggableProps","activateScanTask","placeholder","Default","useTomoScanTaskActions","useTomoStore","state","scanTasks","Yaml","yamlNode","unknownOptions","YamlAsserts"],"sourceRoot":""}