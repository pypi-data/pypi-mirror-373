{"version":3,"file":"static/js/184.cfb55d77.chunk.js","mappings":"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","sources":["components/parameteriser/NewParameters.tsx","connect/parameteriser/NewParameters.js","components/parameteriser/NewParametersButton.tsx","components/parameteriser/ParametersList.tsx","connect/parameteriser/ParametersList.ts","components/yaml-layout/components/ParametersList.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { map } from 'lodash';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport { Formatting } from '@esrf/daiquiri-lib';\nimport SchemaForm from 'connect/SchemaForm';\n\ninterface Props {\n  config?: {\n    parametertypes: Record<string, { actor: string }[]>;\n  };\n  onSubmit?: () => void;\n  actions: {\n    setSchema: (schema: string) => void;\n    setSchemaType: (type: string | undefined) => void;\n  };\n  schema?: string;\n  initialSchema?: string;\n  formData?: Record<string, any>;\n  ptype?: string;\n  button?: (isDisabled: boolean, doOnSubmit: () => void) => void;\n  overwrite?: boolean;\n}\n\ninterface State {\n  asyncAdditional: Record<string, any>;\n  type: string | undefined;\n}\n\nexport default class NewParameters extends Component<Props, State> {\n  private readonly selectRef: React.RefObject<HTMLSelectElement>;\n  private readonly scans: any[];\n\n  public constructor(props: Props) {\n    super(props);\n\n    console.log('parameteriser', this.props);\n    const ptype = this.props.ptype ?? '';\n    this.scans =\n      this.props.config && ptype in this.props.config.parametertypes\n        ? this.props.config.parametertypes[ptype]\n        : [];\n\n    this.state = {\n      asyncAdditional: {},\n      type: this.props.ptype,\n    };\n\n    this.selectRef = React.createRef();\n  }\n\n  public componentDidMount() {\n    if (this.props.ptype !== this.state.type) {\n      this.props.actions.setSchemaType(this.state.type);\n      this.changeSchema();\n    }\n\n    if (this.props.initialSchema) {\n      if (this.selectRef.current) {\n        this.selectRef.current.value = this.props.initialSchema;\n      }\n      this.changeSchema();\n    }\n  }\n\n  protected changeSchema = () => {\n    // rjsf seems to do some internal caching of the definitions\n    // part of the schema, passing a changed schema does not clear this\n    // cached value, need to force a component remount on changing\n    // schemas\n    const newValue = this.selectRef?.current?.value;\n    this.props.actions.setSchema('');\n    if (newValue) {\n      setTimeout(() => this.props.actions.setSchema(newValue), 50);\n    }\n  };\n\n  protected onSubmit = (\n    formData: Record<string, any>,\n    e: any,\n    doSubmit: (formData: Record<string, any>) => Promise<void>\n  ) => {\n    return doSubmit({ ...formData, overwrite: this.props.overwrite }).then(\n      () => {\n        if (this.props.onSubmit) this.props.onSubmit();\n      }\n    );\n  };\n\n  protected onAsyncValidate = (data: { additionalAsync: any }) => {\n    this.setState({ asyncAdditional: data.additionalAsync });\n  };\n\n  public render() {\n    const opts = map(this.scans, (s) => (\n      <option key={s.actor} value={s.actor}>\n        {s.actor}\n      </option>\n    ));\n\n    const { schema = '' } = this.props;\n\n    return (\n      <>\n        <Form>\n          <Form.Group as={Row}>\n            <Form.Label column sm={3}>\n              Type\n            </Form.Label>\n            <Col>\n              <Form.Control\n                ref={this.selectRef}\n                as=\"select\"\n                value={this.props.schema}\n                onChange={this.changeSchema}\n                disabled={this.props.overwrite}\n              >\n                {opts}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n\n        <hr />\n\n        {this.props.schema === '' ? null : (\n          <>\n            <SchemaForm\n              schema={`${Formatting.ucfirst(schema)}Schema`}\n              formData={{ ...this.props.formData }}\n              onSubmit={this.onSubmit}\n              onAsyncValidate={this.onAsyncValidate}\n              submitText=\"Save\"\n              button={this.props.button}\n            />\n          </>\n        )}\n      </>\n    );\n  }\n}\n","import { connect } from 'react-redux';\n\nimport NewParameters from 'components/parameteriser/NewParameters';\nimport app from 'providers/app';\n\nconst mapStateToProps = state => ({\n  config: app.selector('config', state, 'parameteriser'),\n  schema: app.selector('form', state).newParametersSchema || '',\n  type: app.selector('form', state).newParametersSchemaType || ''\n});\n\nconst mapDispatchToProps = () => ({\n  actions: {\n    setSchema: payload =>\n      app.dispatch('SET_FORM', { key: 'newParametersSchema', value: payload }),\n    setSchemaType: payload =>\n      app.dispatch('SET_FORM', {\n        key: 'newParametersSchemaType',\n        value: payload\n      })\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewParameters);\n","import React, { useRef, useCallback } from 'react';\n\nimport { Button } from 'react-bootstrap';\nimport NewParameters from 'connect/parameteriser/NewParameters';\nimport ButtonTriggerModalStore from 'connect/layout/ButtonTriggerModalStore';\nimport type { ButtonTriggerModalStoreRef } from '../layout/models';\n\ninterface Props {\n  config?: {\n    parametertypes: Record<string, { actor: string }[]>;\n  };\n  ptype: string;\n  button?: JSX.Element;\n  buttonProps?: Record<string, any>;\n  formData?: Record<string, any>;\n  disabled?: boolean;\n  inset?: boolean;\n  prefix?: string;\n  onSubmit?: () => void;\n  schema?: string;\n  overwrite?: boolean;\n  title?: string;\n}\n\nfunction NewParametersButton(props: Props) {\n  const onSubmit = useRef(() => {});\n  const disabledRef = useRef(false);\n  const modalRef = useRef<ButtonTriggerModalStoreRef>();\n\n  const doOnSubmit = useCallback(() => {\n    modalRef.current?.close();\n    if (props.onSubmit) props.onSubmit();\n  }, [modalRef, props.onSubmit]);\n\n  return (\n    <ButtonTriggerModalStore\n      ref={modalRef}\n      id={`newParameters${props.ptype}${props.prefix ?? ''}`}\n      button={\n        props.button || (\n          <>\n            <i className=\"fa fa-plus me-1\" />\n            New\n          </>\n        )\n      }\n      buttonProps={{\n        disabled: props.disabled,\n        className: props.inset ? '' : 'float-end mb-1',\n        ...props.buttonProps,\n      }}\n      buttons={\n        <>\n          <Button\n            onClick={() => onSubmit.current()}\n            disabled={disabledRef.current}\n          >\n            Save\n          </Button>\n        </>\n      }\n      title={`${props.title || 'New'} ${props.ptype}`}\n    >\n      <NewParameters\n        onSubmit={doOnSubmit}\n        // @ts-expect-error  This is feed by the connect, so there is probably the problem here\n        config={props.config}\n        formData={{ ...props.formData }}\n        ptype={props.ptype}\n        initialSchema={props.schema}\n        overwrite={props.overwrite}\n        button={(d, os) => {\n          disabledRef.current = d;\n          onSubmit.current = os;\n        }}\n      />\n    </ButtonTriggerModalStore>\n  );\n}\n\nexport default NewParametersButton;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { FullSizer } from '@esrf/daiquiri-lib';\n\nimport Table from 'components/table';\nimport RemountOnResize from 'components/utils/RemountOnResize';\n\nimport NewParametersButton from 'components/parameteriser/NewParametersButton';\n\nfunction ActionCell(\n  cell: Record<string, any>,\n  row: Record<string, any>,\n  rowIndex: number,\n  formatExtraData: Record<string, any>\n) {\n  return (\n    <NewParametersButton\n      ptype={formatExtraData.ptype}\n      onSubmit={formatExtraData.onSubmit}\n      formData={{\n        ...row.parameters,\n      }}\n      overwrite\n      schema={row.instance_type}\n      button={<i className=\"fa fa-search\" />}\n      buttonProps={{ size: 'sm', variant: 'info' }}\n      inset\n      title=\"Edit\"\n      prefix={row.name}\n    />\n  );\n}\n\ninterface Props {\n  parameters: Record<string, any>[];\n  pnamespace?: string;\n  actions: {\n    setParams: (params: Record<string, any>, fetch?: boolean) => Promise<void>;\n    fetch: () => Promise<void>;\n    setPageSize: (pageSize: number) => Promise<void>;\n    setPage: (pageId: number) => Promise<void>;\n  };\n  type: string;\n  total: number;\n  per_page: number;\n  page: number;\n  fetching?: boolean;\n}\n\nfunction ParametersList(props: Props) {\n  useEffect(() => {\n    props.actions.setParams({ type: props.type }, true);\n  }, []);\n\n  const onSubmit = () => {\n    props.actions.fetch();\n  };\n\n  const columns = [\n    { dataField: 'name', text: 'Name' },\n    { dataField: 'instance_type', text: 'Instance' },\n    { dataField: 'file_name', text: 'File' },\n    {\n      dataField: 'action',\n      text: '',\n      formatter: ActionCell,\n      formatExtraData: {\n        onSubmit,\n        ptype: props.type,\n      },\n      classes: 'text-end text-nowrap',\n    },\n  ];\n\n  return (\n    <RemountOnResize>\n      <FullSizer>\n        <div className=\"object\">\n          <h5>\n            {props.type}\n            <NewParametersButton ptype={props.type} onSubmit={onSubmit} />\n          </h5>\n\n          <Table\n            keyField=\"name\"\n            data={props.parameters}\n            columns={columns}\n            noDataIndication=\"No parameters defined\"\n            pages={{\n              page: props.page,\n              per_page: props.per_page,\n              total: props.total,\n              setPage: props.actions.setPage,\n              setPageSize: props.actions.setPageSize,\n              setParams: props.actions.setParams,\n              fetch: props.actions.fetch,\n            }}\n            loading={props.fetching}\n            overlay\n          />\n        </div>\n      </FullSizer>\n    </RemountOnResize>\n  );\n}\n\nParametersList.defaultProps = {\n  pnamespace: '',\n};\n\nParametersList.propTypes = {\n  parameters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  pnamespace: PropTypes.string,\n  actions: PropTypes.shape({\n    setParams: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default ParametersList;\n","import { connect } from 'react-redux';\nimport { withNamespace } from 'providers/namespace';\nimport parameteriser from 'providers/parameteriser';\nimport ParametersList from 'components/parameteriser/ParametersList';\n\nfunction mapStateToProps(state: any, own: any) {\n  const { providers } = own;\n  const { parameters } = providers.parameteriser;\n  return {\n    parameters: parameters.selector('ordered', state),\n    namespace: parameters.getNamespace(),\n    per_page: parameters.selector('per_page', state),\n    page: parameters.selector('page', state),\n    total: parameters.selector('total', state),\n    fetching: parameters.selector('fetching', state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch: any, own: any) {\n  const { providers } = own;\n  const { parameters } = providers.parameteriser;\n  return {\n    actions: {\n      fetch: () => parameters.fetch(),\n      setParams: (payload: any) => parameters.setParams(payload, true),\n      setPage: (payload: any) => parameters.setPage(payload),\n      setPageSize: (payload: any) => parameters.setPageSize(payload),\n    },\n  };\n}\n\nexport default withNamespace({ parameteriser })(\n  // @ts-expect-error\n  connect(mapStateToProps, mapDispatchToProps)(ParametersList)\n);\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport ParametersList from 'connect/parameteriser/ParametersList';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, paramtype, ...unknownOptions } = props;\n  YamlAsserts.assertOptionalString(yamlNode, 'paramtype', paramtype);\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <ParametersList providers={providers} type={paramtype} />;\n}\n"],"names":["NewParameters","Component","constructor","props","_this$props$ptype","super","selectRef","scans","changeSchema","_this$selectRef","_this$selectRef$curre","newValue","this","current","value","actions","setSchema","setTimeout","onSubmit","formData","e","doSubmit","overwrite","then","onAsyncValidate","data","setState","asyncAdditional","additionalAsync","console","log","ptype","config","parametertypes","state","type","React","componentDidMount","setSchemaType","initialSchema","render","opts","map","s","_jsx","actor","children","schema","_jsxs","_Fragment","Form","as","Row","column","sm","Col","ref","onChange","disabled","SchemaForm","Formatting","submitText","button","connect","app","newParametersSchema","newParametersSchemaType","mapDispatchToProps","payload","key","_props$prefix","useRef","disabledRef","modalRef","doOnSubmit","useCallback","_modalRef$current","close","ButtonTriggerModalStore","id","prefix","className","buttonProps","inset","buttons","Button","onClick","title","d","os","ActionCell","cell","row","rowIndex","formatExtraData","NewParametersButton","parameters","instance_type","size","variant","name","ParametersList","useEffect","setParams","fetch","columns","dataField","text","formatter","classes","RemountOnResize","FullSizer","Table","keyField","noDataIndication","pages","page","per_page","total","setPage","setPageSize","loading","fetching","overlay","defaultProps","pnamespace","withNamespace","parameteriser","own","providers","selector","namespace","getNamespace","dispatch","Yaml","yamlNode","paramtype","unknownOptions","YamlAsserts"],"sourceRoot":""}