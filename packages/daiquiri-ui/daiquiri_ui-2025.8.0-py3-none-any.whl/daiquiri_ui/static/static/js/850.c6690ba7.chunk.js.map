{"version":3,"file":"static/js/850.c6690ba7.chunk.js","mappings":"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","sources":["components/scans/ScanTable.tsx","connect/scans/ScanTable.ts","components/yaml-layout/components/scans/ScanTable.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { FullSizer } from '@esrf/daiquiri-lib';\n\nimport momentCell from 'components/table/cells/momentCell';\nimport RemountOnResize from 'components/utils/RemountOnResize';\n\nimport { Button, Badge, OverlayTrigger, Popover } from 'react-bootstrap';\nimport SelectableTable from 'components/table/Selectable';\nimport type { Scan } from './models';\nimport type {\n  PagedActions,\n  PagedType,\n  SelectableActions,\n} from '../table/models';\n\nconst statusMap = {\n  CREATED: 'light',\n  PREPARING: 'info',\n  RUNNING: 'info',\n  FINISHED: 'success',\n  ABORTED: 'warning',\n  FAILED: 'danger',\n};\n\nfunction StatusCell(cell: keyof typeof statusMap) {\n  return <Badge bg={statusMap[cell]}>{cell}</Badge>;\n}\n\nfunction FileNameCell(cell: string) {\n  const popover = (\n    <Popover id=\"popover-filename\">\n      <Popover.Header as=\"h3\">File Name</Popover.Header>\n      <Popover.Body>{cell}</Popover.Body>\n    </Popover>\n  );\n  return cell ? (\n    <OverlayTrigger\n      trigger=\"click\"\n      placement=\"left\"\n      overlay={popover}\n      rootClose\n    >\n      <Button size=\"sm\">\n        <i className=\"fa fa-file\" />\n      </Button>\n    </OverlayTrigger>\n  ) : null;\n}\n\ninterface Actions extends PagedActions, SelectableActions {\n  fetchData: (payload: unknown) => Promise<void>;\n}\n\ninterface Props extends PagedType {\n  actions: Actions;\n  scans: Record<string, Scan>;\n  selected?: number;\n  selectedItems: number[];\n}\n\nfunction ScanTable(props: Props) {\n  const { scans, actions, selected } = props;\n  const tableData = Object.values(scans);\n\n  useEffect(() => {\n    actions.setPageSize(10);\n    actions.fetch();\n  }, [actions]);\n\n  useEffect(() => {\n    if (selected) actions.fetchData(selected);\n  }, [selected]);\n\n  const columns = [\n    {\n      dataField: 'scan_number',\n      text: '#',\n    },\n    { dataField: 'title', text: 'Title', classes: 'text-break' },\n    {\n      dataField: 'start_timestamp',\n      text: 'Start',\n      formatter: momentCell,\n      formatExtraData: { format: 'DD-MM-YYYY HH:mm:ss' },\n      classes: 'text-nowrap',\n    },\n    {\n      dataField: 'end_timestamp',\n      text: 'End',\n      formatter: momentCell,\n      formatExtraData: { format: 'DD-MM-YYYY HH:mm:ss' },\n      classes: 'text-nowrap',\n    },\n    { dataField: 'npoints', text: 'Points' },\n    { dataField: 'count_time', text: 'Count Time' },\n    { dataField: 'status', text: 'Status', formatter: StatusCell },\n    { dataField: 'filename', text: 'File', formatter: FileNameCell },\n  ];\n\n  const pages = {\n    page: props.page,\n    per_page: props.per_page,\n    total: props.total,\n    setPage: props.actions.setPage,\n    setPageSize: props.actions.setPageSize,\n    fetch: props.actions.fetch,\n  };\n\n  return (\n    <RemountOnResize>\n      <FullSizer>\n        <Button\n          size=\"sm\"\n          onClick={() => actions.resetSelection?.()}\n          disabled={props.selected === null}\n          className=\"mb-1\"\n        >\n          Follow\n        </Button>\n        <SelectableTable\n          keyField=\"scanid\"\n          data={tableData}\n          pages={pages}\n          columns={columns}\n          bordered={false}\n          classes=\"table-sm scan-table\"\n          noDataIndication=\"No scans available\"\n          loading={props.fetching}\n          overlay\n          multiple\n          selectedItems={props.selectedItems}\n          page={props.page}\n          actions={{\n            addSelection: props.actions.addSelection,\n            removeSelection: props.actions.removeSelection,\n            resetSelection: props.actions.resetSelection,\n          }}\n        />\n      </FullSizer>\n    </RemountOnResize>\n  );\n}\n\nexport default ScanTable;\n","import { connect } from 'react-redux';\nimport { withNamespace } from 'providers/namespace';\nimport scans from 'providers/scans';\n\nimport ScanTable from 'components/scans/ScanTable';\n\nconst mapStateToProps = (state: any, own: any) => {\n  const { list } = own.providers.scans;\n  return {\n    selected: scans.selector('selectedScan', state),\n    selectedItems: scans.selector('selectedScans', state),\n    scans: list.selector('ordered', state),\n    params: list.selector('params', state),\n    per_page: list.selector('per_page', state),\n    page: list.selector('page', state),\n    total: list.selector('total', state),\n    fetching: list.selector('fetching', state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any, own: any) => {\n  const { list } = own.providers.scans;\n  return {\n    actions: {\n      fetchData: (payload: any) => {\n        own.providers.scans.data.setPage(1);\n        return own.providers.scans.data.setParams({ scanid: payload }, true);\n      },\n      fetch: () => list.fetch(),\n      setParams: (payload: any) => list.setParams(payload, true),\n      setPage: (payload: any) => list.setPage(payload),\n      setPageSize: (payload: any) => list.setPageSize(payload),\n      addSelection: (payload: any) => scans.dispatch('SELECT_SCAN', payload),\n      removeSelection: (payload: any) =>\n        scans.dispatch('UNSELECT_SCAN', payload),\n      resetSelection: () => scans.dispatch('RESET_SCAN_SELECTION'),\n    },\n  };\n};\n\nexport default withNamespace({ scans })(\n  connect(mapStateToProps, mapDispatchToProps)(ScanTable)\n);\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport ScanTable from 'connect/scans/ScanTable';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, events, ...unknownOptions } = props;\n  YamlAsserts.assertOptionalStringList(yamlNode, 'events', events);\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <ScanTable providers={providers} />;\n}\n"],"names":["statusMap","CREATED","PREPARING","RUNNING","FINISHED","ABORTED","FAILED","StatusCell","cell","_jsx","Badge","bg","children","FileNameCell","popover","_jsxs","Popover","id","as","OverlayTrigger","trigger","placement","overlay","rootClose","Button","size","className","props","scans","actions","selected","tableData","Object","values","useEffect","setPageSize","fetch","fetchData","columns","dataField","text","classes","formatter","momentCell","formatExtraData","format","pages","page","per_page","total","setPage","RemountOnResize","FullSizer","onClick","_actions$resetSelecti","resetSelection","call","disabled","SelectableTable","keyField","data","bordered","noDataIndication","loading","fetching","multiple","selectedItems","addSelection","removeSelection","withNamespace","connect","mapStateToProps","state","own","list","providers","selector","params","mapDispatchToProps","dispatch","payload","setParams","scanid","ScanTable","Yaml","yamlNode","events","unknownOptions","YamlAsserts"],"sourceRoot":""}