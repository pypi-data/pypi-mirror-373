{"version":3,"file":"static/js/370.28dd9727.chunk.js","mappings":"mUASe,SAASA,EAAeC,GACrC,SAASC,IAAW,IAADC,EACA,QAAjBA,EAAIF,EAAMG,eAAO,IAAAD,GAAbA,EAAeD,SACjBD,EAAMG,QAAQF,SAElB,CAEA,OACEG,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,KAAMN,EAAMM,KAAMC,OAAQP,EAAMO,OAAOC,SAC5CC,IACA,MAAM,MAAEC,EAAK,KAAEJ,KAASK,GAASF,EAG3BG,EACJF,EAAMG,WACN,gCAAgCC,KAAKJ,EAAMG,WACvCE,EAAQH,EACV,CAAEI,EAAGC,OAAOC,SAASN,EAAI,IAAKO,EAAGF,OAAOC,SAASN,EAAI,KACrD,CAAC,EAIL,OACER,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAACgB,IAAS,CAACC,OAAO,kBAAiBb,UACjCc,EAAAA,EAAAA,MAACC,EAAAA,EAAO,CACNC,GAAI,WAAWxB,EAAMyB,YACrBC,UAAU,qBACNf,EACJD,MAAO,CACLiB,IAAKZ,EAAMI,EACXS,KAAMb,EAAMC,GACZR,SAAA,EAEFc,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,OAAc,CAACM,GAAG,KAAIrB,SAAA,CACpBR,EAAM8B,OACPR,EAAAA,EAAAA,MAACS,EAAAA,EAAM,CAACC,QAAS/B,EAASyB,UAAU,QAAOlB,SAAA,EACzCJ,EAAAA,EAAAA,KAAA,QAAM,cAAY,OAAMI,SAAC,UACzBJ,EAAAA,EAAAA,KAAA,QAAMsB,UAAU,UAASlB,SAAC,iBAG9BJ,EAAAA,EAAAA,KAACmB,EAAAA,EAAAA,KAAY,CAAAf,SAAER,EAAMQ,iBAGrB,GAKhB,C,0BCjCA,SAAeyB,EAAAA,EAAAA,IAAc,CAAEC,SAAS,KAAxC,EACEC,EAAAA,EAAAA,KAnBF,SAAyBC,EAAYC,GACnC,MAAM,UAAEC,GAAcD,EACtB,MAAO,CACLE,SAAUC,EAAAA,EAAAA,SAAa,SAAUJ,EAAO,YACxCK,eAAgBH,EAAUJ,SAASQ,OAAOC,SAAS,UAAWP,GAElE,IAEA,SAA4BQ,EAAeP,GACzC,MAAO,CACLlC,QAAS,CACP0C,oBAAqBA,IACnBR,EAAIC,UAAUJ,SAASQ,OAAOI,MAAM,CAAEC,OAAO,IAC/CC,SAAWC,GAAiBC,EAAAA,EAAAA,IAAgB,aAAaD,MAG/D,GAGEd,ECYa,SAAkBnC,GAC/B,MAAMmD,GAAaC,EAAAA,EAAAA,QAEjB,CAAC,GACGC,GAAWD,EAAAA,EAAAA,QAAmD,CAAC,IAC9DE,EAAKC,IAAUC,EAAAA,EAAAA,eAA6BC,IAE7C,IAAEC,EAAM,EAAC,SAAEnB,EAAQ,eAAEE,GAAmBzC,EAGxC2D,GAAkBC,EAAAA,EAAAA,IAAkBxB,GACjCA,EAAMF,WAGf,SAAS2B,IACP,OAAOH,EAAMnB,EAASuB,UAAUC,QAAUL,GAAO,CACnD,CAqBA,IAnBAM,EAAAA,EAAAA,YAAU,KACc,IAADC,EAAjBJ,KACF7D,EAAMG,QAAQ6C,SAAkB,QAAViB,EAACjE,EAAM0D,WAAG,IAAAO,EAAAA,EAAI,GAAGC,MAAMC,IAC3CZ,EAAOY,EAAKC,KAAK,GAErB,GACC,CAAC7B,EAASuB,UAAW9D,EAAM0D,OAE9BM,EAAAA,EAAAA,YAAU,KACRhE,EAAMG,QAAQ0C,qBAAqB,GAClC,KASEgB,IACH,OACEvC,EAAAA,EAAAA,MAAC+C,EAAAA,EAAK,CAACC,QAAQ,UAAS9D,SAAA,CAAC,4BAA+BkD,EAAI,OAIhE,MAAMa,EAAmBhC,EAASuB,UAAUJ,GAEtChB,GAAS8B,EAAAA,EAAAA,KAAID,EAAiBE,UAAWC,IAAQ,IAADC,EACpD,MAAMC,EAAQF,EAAGE,MAAQnC,EAAeiC,EAAGE,OAAS,KAEpD,IAAIC,EAAQ,KACZ,GAAIH,EAAGG,MAAO,CACZ,MAAMC,EAAOJ,EAAGG,MAAME,MAAM,KACtBC,EAAMrB,EAAgBmB,EAAK,IAC7BE,IACFH,EAAQ,GAAGG,EAAIC,WAAWH,EAAK,OAAOE,EAAIC,WAAWC,MAAQ,KAEjE,CAEA,MAAMC,EAAMT,EAAGU,KAAKC,cACdC,GAAsCC,EAAAA,EAAAA,aAG5C,OAFAlC,EAASmC,QAAgB,QAATb,EAACD,EAAGE,aAAK,IAAAD,EAAAA,EAAI,aAAeW,EAErC,EACLlF,EAAAA,EAAAA,KAACqF,EAAAA,SAAQ,CAEP9C,SAAU,IAAIwC,YACdO,MAAO,aAAad,IAAUA,EAAMxC,MAAQ,KAAO,YAF9C,GAAGsC,EAAGE,eAIbxE,EAAAA,EAAAA,KAACqF,EAAAA,SAAQ,CAA0B9C,SAAU,IAAIwC,WAAa3E,SAC3DqE,GADY,GAAGH,EAAGE,eAGrBxE,EAAAA,EAAAA,KAACqF,EAAAA,SAAQ,CAEP9C,SAAU,IAAIwC,WACdnD,QAASA,KAAA,IAAA2D,EAAA,OA3Cf,SAAiBP,EAAcR,GACH,IAADgB,EAArBhB,KAASzB,IAEc,QAAzByC,EAAAzC,EAAWyB,GAAOY,eAAO,IAAAI,GAAzBA,EAA2BC,YAE/B,CAsCqB7D,CAAQmD,EAAa,QAAVQ,EAAEjB,EAAGE,aAAK,IAAAe,EAAAA,EAAI,YAAY,EAEpDG,IAAKR,GAJA,GAAGZ,EAAGE,iBAMbxE,EAAAA,EAAAA,KAACqF,EAAAA,SAAQ,CAEPC,MAAO,cAAad,EAAQ,SAAW,IACvCjC,SAAU,IAAIwC,KAFT,GAAGT,EAAGE,aAId,IAGGmB,GAAWC,EAAAA,EAAAA,QACfzB,EAAiBE,UAChBwB,QAAkBxC,IAAZwC,EAAErB,QAELsB,GAAS1B,EAAAA,EAAAA,KAAIuB,GAAWI,IAAO,IAADC,EAAAC,EAClC,IAAKF,EAAEvB,MACL,OAAOxE,EAAAA,EAAAA,KAAAkG,EAAAA,SAAA,IAET,MAAMC,GAAYhB,EAAAA,EAAAA,aAWlB,OAVApC,EAAWqC,QAAQW,EAAEvB,OAAS2B,GAW5BnG,EAAAA,EAAAA,KAACoG,EAAAA,EAAuB,CACtBhF,GAAI,GAAG2E,EAAEvB,WAETkB,IAAKS,EACLhG,OAbJ,WAA4B,IAADkG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACzB,GAA6C,QAAzCL,EAACpD,EAASmC,QAAe,QAARkB,EAACP,EAAEvB,aAAK,IAAA8B,EAAAA,EAAI,oBAAY,IAAAD,GAAxCA,EAA0CjB,QAI/C,OAA8C,QAA9CmB,EAAOtD,EAAS0D,OAAc,QAARD,EAACX,EAAEvB,aAAK,IAAAkC,EAAAA,EAAI,oBAAY,IAAAH,GAAS,QAATC,EAAvCD,EAAyCnB,eAAO,IAAAoB,GAAU,QAAVC,EAAhDD,EAAkDI,gBAAQ,IAAAH,OAAnB,EAAvCA,EAA6D,EACtE,EAQII,YAAY,EACZC,WAAYnH,EACZ0B,UAAW0E,EAAEvB,MACb9C,MAAoC,QAA/BsE,EAAyB,QAAzBC,EAAE5D,EAAe0D,EAAEvB,cAAM,IAAAyB,OAAA,EAAvBA,EAAyBjB,YAAI,IAAAgB,EAAAA,EAAI,GACxCe,QACE7F,EAAAA,EAAAA,MAAAgF,EAAAA,SAAA,CAAA9F,SAAA,EACEJ,EAAAA,EAAAA,KAAA,KAAGsB,UAAU,eAAe,UAG/BlB,UAEDJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAa,CACZC,MAAI,EACJC,QACE7E,EAAe0D,EAAEvB,SACjBJ,EAAAA,EAAAA,KAAI/B,EAAe0D,EAAEvB,OAAO0C,SAAU9F,IAAE,CAAQA,YAlB/C,GAAG2E,EAAEvB,WAqBc,IAI9B,OACEtD,EAAAA,EAAAA,MAAA,OAAAd,SAAA,EACEJ,EAAAA,EAAAA,KAACmH,EAAAA,UAAS,CAACC,MAAM,OAAOC,OAAQnE,EAAK5B,UAAU,WAAUlB,SACtDkC,IAEFwD,IAGP,KC9Ke,SAASwB,EAAK1H,GAC3B,MAAM,UAAEsC,EAAS,SAAEqF,KAAaC,GAAmB5H,EAEnD,OADA6H,EAAAA,GAAgCF,EAAUC,IACnCxH,EAAAA,EAAAA,KAAC0H,EAAQ,CAACxF,UAAWA,GAC9B,C","sources":["components/layout/DraggablePopup.tsx","connect/Synoptic.ts","components/Synoptic.tsx","components/yaml-layout/components/Synoptic.tsx"],"sourcesContent":["import Draggable from 'react-draggable';\nimport { Popover, Overlay, Button } from 'react-bootstrap';\nimport type { ModalClassProps } from './models';\nimport type { PropsWithChildren } from 'react';\n\ninterface Props extends ModalClassProps {\n  popoverid?: string;\n}\n\nexport default function DraggablePopup(props: PropsWithChildren<Props>) {\n  function onClose() {\n    if (props.actions?.onClose) {\n      props.actions.onClose();\n    }\n  }\n\n  return (\n    <Overlay show={props.show} target={props.target}>\n      {(injectedProps) => {\n        const { style, show, ...rest } = injectedProps;\n\n        // ridiculous\n        const reg =\n          style.transform &&\n          /translate3d\\((\\d+)px, (\\d+)px/.exec(style.transform);\n        const start = reg\n          ? { x: Number.parseInt(reg[1]), y: Number.parseInt(reg[2]) }\n          : {};\n\n        // Overlay injects className into its child, have to wrap in another div to\n        // stop this throwin an error in Draggable\n        return (\n          <div>\n            <Draggable handle=\".popover-header\">\n              <Popover\n                id={`popover-${props.popoverid}`}\n                className=\"draggable-popup\"\n                {...rest}\n                style={{\n                  top: start.y,\n                  left: start.x,\n                }}\n              >\n                <Popover.Header as=\"h3\">\n                  {props.title}\n                  <Button onClick={onClose} className=\"close\">\n                    <span aria-hidden=\"true\">Ã—</span>\n                    <span className=\"sr-only\">Close</span>\n                  </Button>\n                </Popover.Header>\n                <Popover.Body>{props.children}</Popover.Body>\n              </Popover>\n            </Draggable>\n          </div>\n        );\n      }}\n    </Overlay>\n  );\n}\n","import { connect } from 'react-redux';\nimport RestService from 'services/RestService';\nimport { withNamespace } from 'providers/namespace';\nimport app from 'providers/app';\nimport hardware from 'providers/hardware';\nimport Synoptic from 'components/Synoptic';\n\nfunction mapStateToProps(state: any, own: any) {\n  const { providers } = own;\n  return {\n    synoptic: app.selector('config', state, 'synoptic'),\n    hardwareGroups: providers.hardware.groups.selector('results', state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch: any, own: any) {\n  return {\n    actions: {\n      fetchHardwareGroups: () =>\n        own.providers.hardware.groups.fetch({ first: true }),\n      fetchSVG: (payload: any) => RestService.get(`/synoptic/${payload}`),\n    },\n  };\n}\n\nexport default withNamespace({ hardware })(\n  connect(mapStateToProps, mapDispatchToProps)(Synoptic)\n);\n","import type { RefObject } from 'react';\nimport { createRef, useRef, useEffect, useState } from 'react';\nimport { SvgLoader, SvgProxy } from 'react-svgmt';\n\nimport { map, filter } from 'lodash';\n\nimport { Alert } from 'react-bootstrap';\n\nimport HardwareGroup from 'components/hardware/HardwareGroup';\nimport DraggablePopup from 'components/layout/DraggablePopup';\nimport ButtonTriggerModalStore from 'connect/layout/ButtonTriggerModalStore';\nimport { useHardwareStore } from '../store/HardwareStore';\n\ninterface Props {\n  actions: {\n    fetchHardwareGroups: () => void;\n    fetchSVG: (sid: number) => Promise<{ data: any }>;\n  };\n  synoptic: {\n    synoptics: {\n      elements: {\n        name: string;\n        value: string;\n        group?: string;\n      }[];\n      synoptic?: string;\n    }[];\n  };\n  hardwareGroups: Record<string, any>;\n\n  /** The synoptic id to show */\n  sid?: number;\n}\n\ninterface State {\n  svg: any;\n}\n\nexport default function Synoptic(props: Props) {\n  const buttonRefs = useRef<\n    Record<string, RefObject<typeof ButtonTriggerModalStore>>\n  >({});\n  const rectRefs = useRef<Record<string, RefObject<typeof SvgProxy>>>({});\n  const [svg, setSvg] = useState<string | undefined>(undefined);\n\n  const { sid = 0, synoptic, hardwareGroups } = props;\n\n  // FIXME: This is wake up far too much\n  const hardwareObjects = useHardwareStore((state) => {\n    return state.hardware;\n  });\n\n  function validSynoptic() {\n    return sid < synoptic.synoptics.length && sid > -1;\n  }\n\n  useEffect(() => {\n    if (validSynoptic()) {\n      props.actions.fetchSVG(props.sid ?? 0).then((resp) => {\n        setSvg(resp.data);\n      });\n    }\n  }, [synoptic.synoptics, props.sid]);\n\n  useEffect(() => {\n    props.actions.fetchHardwareGroups();\n  }, []);\n\n  function onClick(name: string, group: string) {\n    if (group in buttonRefs) {\n      // @ts-expect-error\n      buttonRefs[group].current?.showModal();\n    }\n  }\n\n  if (!validSynoptic()) {\n    return (\n      <Alert variant=\"warning\">Could not find synoptic &quot;{sid}&quot;</Alert>\n    );\n  }\n\n  const selectedSynoptic = synoptic.synoptics[sid];\n\n  const groups = map(selectedSynoptic.elements, (el) => {\n    const group = el.group ? hardwareGroups[el.group] : null;\n\n    let value = null;\n    if (el.value) {\n      const path = el.value.split('.');\n      const obj = hardwareObjects[path[0]];\n      if (obj) {\n        value = `${obj.properties[path[1]]} ${obj.properties.unit || ''}`;\n      }\n    }\n\n    const cls = el.name.toLowerCase();\n    const rectRef: RefObject<typeof SvgProxy> = createRef<typeof SvgProxy>();\n    rectRefs.current[el.group ?? 'undefined'] = rectRef;\n\n    return [\n      <SvgProxy\n        key={`${el.group}state`}\n        selector={`.${cls} .status`}\n        class={`$ORIGINAL ${group && (group.state ? 'ok' : 'error')}`}\n      />,\n      <SvgProxy key={`${el.group}value`} selector={`.${cls} .value`}>\n        {value}\n      </SvgProxy>,\n      <SvgProxy\n        key={`${el.group}handler`}\n        selector={`.${cls} > rect`}\n        onClick={() => onClick(cls, el.group ?? 'undefined')}\n        /* @ts-expect-error */\n        ref={rectRef}\n      />,\n      <SvgProxy\n        key={`${el.group}comp`}\n        class={`$ORIGINAL ${group ? 'active' : ''}`}\n        selector={`.${cls}`}\n      />,\n    ];\n  });\n\n  const hwgroups = filter(\n    selectedSynoptic.elements,\n    (e) => e.group !== undefined\n  );\n  const popups = map(hwgroups, (g) => {\n    if (!g.group) {\n      return <></>;\n    }\n    const buttonRef = createRef<typeof ButtonTriggerModalStore>();\n    buttonRefs.current[g.group] = buttonRef;\n\n    function popperInterface() {\n      if (!rectRefs.current[g.group ?? 'undefined']?.current) {\n        return undefined;\n      }\n      /* @ts-expect-error */\n      return rectRefs.curren[g.group ?? 'undefined']?.current?.elemRefs?.[0];\n    }\n\n    return (\n      <ButtonTriggerModalStore\n        id={`${g.group}pop`}\n        key={`${g.group}pop`}\n        ref={buttonRef}\n        target={popperInterface}\n        showButton={false}\n        modalClass={DraggablePopup}\n        popoverid={g.group}\n        title={hardwareGroups[g.group]?.name ?? ''}\n        button={\n          <>\n            <i className=\"fa fa-plus\" />\n            show\n          </>\n        }\n      >\n        <HardwareGroup\n          even\n          objects={\n            hardwareGroups[g.group] &&\n            map(hardwareGroups[g.group].objects, (id) => ({ id }))\n          }\n        />\n      </ButtonTriggerModalStore>\n    );\n  });\n\n  return (\n    <div>\n      <SvgLoader width=\"100%\" svgXML={svg} className=\"synoptic\">\n        {groups}\n      </SvgLoader>\n      {popups}\n    </div>\n  );\n}\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport Synoptic from 'connect/Synoptic';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, ...unknownOptions } = props;\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <Synoptic providers={providers} />;\n}\n"],"names":["DraggablePopup","props","onClose","_props$actions","actions","_jsx","Overlay","show","target","children","injectedProps","style","rest","reg","transform","exec","start","x","Number","parseInt","y","Draggable","handle","_jsxs","Popover","id","popoverid","className","top","left","as","title","Button","onClick","withNamespace","hardware","connect","state","own","providers","synoptic","app","hardwareGroups","groups","selector","dispatch","fetchHardwareGroups","fetch","first","fetchSVG","payload","RestService","buttonRefs","useRef","rectRefs","svg","setSvg","useState","undefined","sid","hardwareObjects","useHardwareStore","validSynoptic","synoptics","length","useEffect","_props$sid","then","resp","data","Alert","variant","selectedSynoptic","map","elements","el","_el$group","group","value","path","split","obj","properties","unit","cls","name","toLowerCase","rectRef","createRef","current","SvgProxy","class","_el$group2","_buttonRefs$group$cur","showModal","ref","hwgroups","filter","e","popups","g","_hardwareGroups$g$gro","_hardwareGroups$g$gro2","_Fragment","buttonRef","ButtonTriggerModalStore","_rectRefs$current","_g$group","_rectRefs$curren","_rectRefs$curren$curr","_rectRefs$curren$curr2","_g$group2","curren","elemRefs","showButton","modalClass","button","HardwareGroup","even","objects","SvgLoader","width","svgXML","Yaml","yamlNode","unknownOptions","YamlAsserts","Synoptic"],"sourceRoot":""}