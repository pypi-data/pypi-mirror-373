{"version":3,"file":"static/js/601.ca4286ec.chunk.js","mappings":"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","sources":["components/plotting/LegendEntry.tsx","components/plotting/CurveLegend.tsx","components/plotting/MultiCurveTooltipMesh.tsx","components/plotting/InteractiveCurve.tsx","components/plotting/PlotOverlay.tsx","components/plotting/hooks.ts","components/plotting/RoiSelectionTool.tsx","components/plotting/H5WebCurvePlot.tsx","components/plotting/guards.ts","components/scans/ScanPlot1d.tsx","connect/scans/ScanPlot1d.ts","components/yaml-layout/components/scans/ScanPlot1d.tsx","connect/ConnectUtils.ts"],"sourcesContent":["import type { CurveData } from './models';\n\ninterface Props {\n  curve: CurveData;\n  onClick: () => void;\n  onDoubleClick: () => void;\n}\n\nfunction LegendEntry(props: Props) {\n  const { curve, onClick, onDoubleClick } = props;\n\n  return (\n    <button\n      className=\"btn-clean entry\"\n      key={curve.name}\n      type=\"button\"\n      data-not-visible={curve.visible ? undefined : ''}\n      onClick={() => onClick()}\n      onDoubleClick={() => onDoubleClick()}\n    >\n      <div\n        className=\"handle\"\n        style={{\n          backgroundColor: curve.color,\n        }}\n      />\n      {curve.name}\n    </button>\n  );\n}\n\nexport default LegendEntry;\n","import React from 'react';\nimport LegendEntry from './LegendEntry';\nimport type { CurveData } from './models';\n\ninterface Props {\n  curves: CurveData[];\n  onEntryClick: (i: number) => void;\n  onEntryDoubleClick: (i: number) => void;\n}\n\nfunction CurveLegend(props: Props) {\n  const { curves, onEntryClick, onEntryDoubleClick } = props;\n  return (\n    <div>\n      {curves.map((c, i) => (\n        <LegendEntry\n          key={c.name}\n          curve={c}\n          onClick={() => onEntryClick(i)}\n          onDoubleClick={() => onEntryDoubleClick(i)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default CurveLegend;\n","import {\n  TooltipMesh,\n  useValueToIndexScale,\n  useVisCanvasContext,\n} from '@h5web/lib';\nimport type { CurveData } from './models';\n\ninterface Props {\n  curves: CurveData[];\n}\n\nfunction MultiCurveTooltipMesh(props: Props) {\n  const { curves } = props;\n\n  // Consider that all curve abscissas are the same\n  const abscissas = curves[0].x;\n  const xToIndexScale = useValueToIndexScale(abscissas, true);\n\n  const { abscissaConfig } = useVisCanvasContext();\n\n  return (\n    <TooltipMesh\n      guides=\"both\"\n      renderTooltip={(x) => {\n        const xi = xToIndexScale(x);\n\n        return (\n          <div className=\"h5web-tooltip\">\n            {abscissaConfig.label || 'x'}={abscissas[xi]}\n            {curves\n              .filter((c) => c.visible)\n              .map((c) => (\n                <div key={c.name}>\n                  <strong>{c.name}:</strong> {c.y[xi]}\n                </div>\n              ))}\n          </div>\n        );\n      }}\n    />\n  );\n}\n\nexport default MultiCurveTooltipMesh;\n","import type { DataCurveProps } from '@h5web/lib';\nimport { Annotation } from '@h5web/lib';\nimport {\n  DataCurve,\n  useValueToIndexScale,\n  useVisCanvasContext,\n} from '@h5web/lib';\nimport type { ThreeEvent } from '@react-three/fiber';\nimport { useState } from 'react';\n\nfunction InteractiveCurve(props: DataCurveProps) {\n  const { onDataPointClick, ...curveProps } = props;\n  const { abscissas, ordinates, color } = curveProps;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number>();\n\n  const abscissaToIndex = useValueToIndexScale(abscissas, true);\n  const { worldToData } = useVisCanvasContext();\n\n  const handleClick = onDataPointClick\n    ? (index: number, evt: ThreeEvent<MouseEvent>) => {\n        const { unprojectedPoint } = evt;\n        const dataPt = worldToData(unprojectedPoint);\n\n        const newIndex = abscissaToIndex(dataPt.x);\n\n        onDataPointClick(newIndex, evt);\n      }\n    : undefined;\n\n  const handlePointerEnter = onDataPointClick\n    ? (index: number, evt: ThreeEvent<MouseEvent>) => {\n        const { unprojectedPoint } = evt;\n        const dataPt = worldToData(unprojectedPoint);\n\n        setHoveredIndex(abscissaToIndex(dataPt.x));\n      }\n    : undefined;\n\n  const handlePointerLeave = onDataPointClick\n    ? () => setHoveredIndex(undefined)\n    : undefined;\n\n  return (\n    <>\n      <DataCurve\n        onDataPointClick={handleClick}\n        onDataPointEnter={handlePointerEnter}\n        onDataPointLeave={handlePointerLeave}\n        {...curveProps}\n      />\n      {hoveredIndex && (\n        <Annotation\n          x={abscissas[hoveredIndex]}\n          y={ordinates[hoveredIndex]}\n          center\n        >\n          <svg\n            className=\"line-hover-svg\"\n            style={{\n              fill: color,\n            }}\n          >\n            <circle r={4} />\n          </svg>\n        </Annotation>\n      )}\n    </>\n  );\n}\n\nexport default InteractiveCurve;\n","import { Overlay, useCameraState, useVisCanvasContext } from '@h5web/lib';\nimport { useThree } from '@react-three/fiber';\nimport type { Shape, Annotation as AnnotationType } from '../scans/models';\nimport { useScaleCoord } from './hooks';\n\ninterface Props {\n  shapes?: Shape[];\n  annotations?: AnnotationType[];\n}\n\nfunction PlotOverlay(props: Props) {\n  const { shapes: rawShapes = [], annotations: rawAnnotations = [] } = props;\n\n  const { width, height } = useThree((state) => state.size);\n  const { dataToHtml } = useVisCanvasContext();\n\n  const scaleCoord = useScaleCoord();\n\n  const shapes = useCameraState(\n    (camera) => {\n      return rawShapes.map((shape) => {\n        const v0 = dataToHtml(\n          camera,\n          scaleCoord(shape.x0, shape.y0, shape.xref, shape.yref)\n        );\n        const v1 = dataToHtml(\n          camera,\n          scaleCoord(shape.x1, shape.y1, shape.xref, shape.yref)\n        );\n        return { v0, v1, ...shape };\n      });\n    },\n    [rawShapes]\n  );\n  const annotations = useCameraState(\n    (camera) => {\n      return rawAnnotations.map((annotation, i) => {\n        const v = dataToHtml(\n          camera,\n          scaleCoord(\n            annotation.x,\n            annotation.y,\n            annotation.xref,\n            annotation.yref\n          )\n        );\n        return { v, ...annotation };\n      });\n    },\n    [rawAnnotations]\n  );\n\n  return (\n    <Overlay>\n      <svg width={width} height={height}>\n        {shapes.map((shape, i) => {\n          const { v0, v1, fillcolor, line, opacity } = shape;\n          return (\n            <rect\n              key={i}\n              x={Math.min(v0.x, v1.x)}\n              y={Math.min(v0.y, v1.y)}\n              width={Math.abs(v1.x - v0.x)}\n              height={Math.abs(v1.y - v0.y)}\n              fill={fillcolor}\n              strokeWidth={line?.width}\n              fillOpacity={opacity}\n            />\n          );\n        })}\n        {annotations.map((annotation, i) => {\n          const { text, v } = annotation;\n          return (\n            <text key={i} x={v.x} y={v.y} textAnchor=\"middle\">\n              {text}\n            </text>\n          );\n        })}\n      </svg>\n    </Overlay>\n  );\n}\n\nexport default PlotOverlay;\n","import { useVisCanvasContext } from '@h5web/lib';\nimport { Vector3 } from 'three';\n\nexport function useScaleCoord() {\n  const { abscissaScale, ordinateScale } = useVisCanvasContext();\n  const [xMin, xMax] = abscissaScale.domain();\n  const [yMin, yMax] = ordinateScale.domain();\n\n  // https://plotly.com/javascript/reference/#layout-shapes-items-shape-xref\n  return (x: number, y: number, xref: string, yref: string) => {\n    const newX = xref === 'paper' ? xMin + x * (xMax - xMin) : x;\n    const newY = yref === 'paper' ? yMin + y * (yMax - yMin) : y;\n\n    return new Vector3(newX, newY);\n  };\n}\n","import {\n  AxialSelectionTool,\n  SvgElement,\n  SvgRect,\n  useVisCanvasContext,\n} from '@h5web/lib';\nimport type { Selection } from '@h5web/lib';\nimport { useThree } from '@react-three/fiber';\nimport { Vector3 } from 'three';\n\ninterface Props {\n  onValidSelection: (selection: Selection) => void;\n}\n\nfunction RoiSelectionTool(props: Props) {\n  const { onValidSelection } = props;\n  const camera = useThree((state) => state.camera);\n  const { ordinateConfig, dataToHtml, dataToWorld } = useVisCanvasContext();\n  const [yMin, yMax] = ordinateConfig.visDomain;\n\n  return (\n    <AxialSelectionTool\n      axis=\"x\"\n      onValidSelection={(selection: Selection) => {\n        const { data } = selection;\n\n        const startPoint = new Vector3(data[0].x, yMin);\n        const endPoint = new Vector3(data[1].x, yMax);\n        onValidSelection({\n          data: [startPoint, endPoint],\n          html: [dataToHtml(camera, startPoint), dataToHtml(camera, endPoint)],\n          world: [dataToWorld(startPoint), dataToWorld(endPoint)],\n        });\n      }}\n    >\n      {({ html }) => {\n        return (\n          <SvgElement>\n            <SvgRect coords={html} fill=\"gray\" fillOpacity={0.25} />\n          </SvgElement>\n        );\n      }}\n    </AxialSelectionTool>\n  );\n}\n\nexport default RoiSelectionTool;\n","import type { Domain, CurveType, Selection } from '@h5web/lib';\nimport { SelectToZoom } from '@h5web/lib';\nimport { GlyphType } from '@h5web/lib';\nimport {\n  getAxisValues,\n  Html,\n  Pan,\n  ResetZoomButton,\n  useCombinedDomain,\n  useDomains,\n  VisCanvas,\n  Zoom,\n} from '@h5web/lib';\nimport { useState } from 'react';\n\nimport type { Layout } from '../scans/models';\nimport CurveLegend from './CurveLegend';\nimport MultiCurveTooltipMesh from './MultiCurveTooltipMesh';\nimport type { CurveData, PlotData } from './models';\nimport InteractiveCurve from './InteractiveCurve';\nimport { hasValues, isDefined } from './guards';\nimport PlotOverlay from './PlotOverlay';\nimport RoiSelectionTool from './RoiSelectionTool';\n\nconst COLORS = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'];\n\nconst DEFAULT_DOMAIN: Domain = [0.1, 1];\n\nconst POINT_SIZE = 6;\n\ninterface Props {\n  data: (PlotData | undefined)[];\n  insetLegend?: boolean;\n  onClick?: (index: number) => void;\n  curveType?: CurveType;\n  layout?: Layout;\n  onRoiSelection?: (points: Selection) => void;\n}\n\nfunction H5WebCurvePlot(props: Props) {\n  const { data, insetLegend, onClick, curveType, layout, onRoiSelection } =\n    props;\n\n  const [visibilities, setVisibilities] = useState(data.map(() => true));\n  const curves: CurveData[] = data.filter(isDefined).flatMap((d, i) => {\n    const { x, y, name } = d;\n    if (!hasValues(y)) {\n      return [];\n    }\n    const axisValues = getAxisValues(x, y.length);\n    return [\n      {\n        color: COLORS[i % COLORS.length],\n        visible: visibilities[i],\n        name,\n        x: Array.isArray(axisValues) ? axisValues : [...axisValues],\n        y,\n      },\n    ];\n  });\n\n  const xDomain =\n    useCombinedDomain(useDomains(curves.map((c) => c.x))) || DEFAULT_DOMAIN;\n  const yDomain =\n    useCombinedDomain(useDomains(curves.map((c) => c.y))) || DEFAULT_DOMAIN;\n\n  if (curves.length === 0) {\n    return <div>No curve data. Please select a series.</div>;\n  }\n\n  const toggleCurve = (curveIndex: number) => {\n    setVisibilities(\n      visibilities.map((val, index) => (index === curveIndex ? !val : val))\n    );\n  };\n\n  const showOnlyThisCurve = (curveIndex: number) => {\n    setVisibilities(visibilities.map((_, index) => index === curveIndex));\n  };\n\n  return (\n    <div className=\"h5web-plot\">\n      <VisCanvas\n        abscissaConfig={{\n          visDomain: xDomain,\n          showGrid: true,\n          label: layout?.xaxis?.title,\n        }}\n        ordinateConfig={{\n          visDomain: yDomain,\n          showGrid: true,\n          label: layout?.yaxis?.title,\n        }}\n        raycasterThreshold={POINT_SIZE}\n      >\n        {curves.map((c) => (\n          <InteractiveCurve\n            key={c.name}\n            abscissas={c.x}\n            ordinates={c.y}\n            color={c.color}\n            visible={c.visible}\n            onDataPointClick={onClick}\n            glyphSize={POINT_SIZE}\n            glyphType={GlyphType.Circle}\n            curveType={curveType}\n          />\n        ))}\n        <Pan />\n        <Zoom />\n        <SelectToZoom modifierKey=\"Control\" />\n        <MultiCurveTooltipMesh curves={curves} />\n        <ResetZoomButton />\n        {insetLegend && (\n          <Html>\n            {curves.length > 1 && (\n              <div className=\"h5web-legend\" data-inset=\"\">\n                <CurveLegend\n                  curves={curves}\n                  onEntryClick={toggleCurve}\n                  onEntryDoubleClick={showOnlyThisCurve}\n                />\n              </div>\n            )}\n          </Html>\n        )}\n        {layout && (\n          <PlotOverlay\n            shapes={layout.shapes}\n            annotations={layout.annotations}\n          />\n        )}\n        {onRoiSelection && (\n          <RoiSelectionTool onValidSelection={onRoiSelection} />\n        )}\n      </VisCanvas>\n      {!insetLegend && curves.length > 1 && (\n        <div className=\"h5web-legend\">\n          <CurveLegend\n            curves={curves}\n            onEntryClick={toggleCurve}\n            onEntryDoubleClick={showOnlyThisCurve}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default H5WebCurvePlot;\n","import type { PlotData, MeshData } from './models';\n\nexport function isMeshData(data: PlotData[] | MeshData[]): data is MeshData[] {\n  const [oneDataItem] = data;\n\n  return (\n    !!oneDataItem && Object.getOwnPropertyNames(oneDataItem).includes('marker')\n  );\n}\n\nexport function isDefined<T>(value: T): value is NonNullable<T> {\n  return value !== undefined && value !== null;\n}\n\nexport function hasValues(arr: number[] | undefined): arr is number[] {\n  return isDefined(arr) && arr.length > 0;\n}\n","import PlotEnhancer from 'components/PlotEnhancer';\nimport H5WebCurvePlot from 'components/plotting/H5WebCurvePlot';\nimport RemountOnResize from 'components/utils/RemountOnResize';\nimport { each, range } from 'lodash';\nimport type { ChangeEvent, RefObject } from 'react';\nimport { createRef, Component } from 'react';\nimport { Form, Row, Col, Button, Container } from 'react-bootstrap';\nimport type { PlotData } from '../plotting/models';\n\nimport { findLastScanId } from './utils';\nimport type {\n  Layout,\n  Options,\n  Scan,\n  ScanData,\n  SpectraData,\n  SpectraContainer,\n  PlotSeries,\n} from './models';\n\nexport interface Options1d extends Options {\n  /** Enforce a backend */\n  backend?: 'plotly' | 'h5web';\n  /** Pre-select an x axis */\n  preSelectedXAxis?: string;\n  /** Pre-select a data series */\n  preSelectedSeries?: string | string[];\n  /** Title for this plot */\n  plotTitle?: string;\n  /** Inset the legend for h5web plot */\n  insetLegend?: boolean;\n}\n\ninterface Props {\n  actions: {\n    selectPoint: (v: string | number) => void;\n    clearPoint: () => void;\n    fetchScanSpectra: (p: { scanid: number; point: number }) => Promise<void>;\n    setPage: (pageNumber: number) => void;\n  };\n  scans: Scan[];\n  data: Record<number, ScanData>;\n  spectra: SpectraContainer;\n  currentPoint?: number;\n  selectable?: boolean;\n  fetching: boolean;\n  layout?: Layout;\n  selectedScan?: number;\n  options: Options1d;\n}\n\nexport default class ScanPlot1d extends Component<Props> {\n  private readonly point: RefObject<HTMLInputElement>;\n  private max: number;\n  private lastScanId?: number;\n\n  public constructor(props: Props) {\n    super(props);\n    this.point = createRef<HTMLInputElement>();\n    this.max = 0;\n  }\n\n  public componentDidUpdate(prevProps: Props) {\n    const { currentPoint } = this.props;\n\n    const { scanid, npoints_avail } = this.data();\n    if (!scanid) {\n      return;\n    }\n\n    const fetchNewScan = this.lastScanId !== scanid;\n    this.lastScanId = scanid;\n\n    const fetch = this.max !== npoints_avail;\n    this.max = npoints_avail;\n\n    const point = currentPoint ?? this.max - 1;\n    if (this.point.current) {\n      this.point.current.value = `${point}`;\n    }\n\n    if (point === -1) return;\n\n    if (\n      prevProps.currentPoint !== currentPoint &&\n      currentPoint !== null &&\n      currentPoint !== undefined\n    ) {\n      this.fetchScanSpectra(currentPoint);\n    }\n\n    if (\n      currentPoint === null &&\n      (fetchNewScan || fetch || prevProps.currentPoint !== null)\n    ) {\n      this.fetchScanSpectra(point);\n    }\n  }\n\n  public onChangePoint = (e: ChangeEvent<{ value: string }>) => {\n    const value = Number(e.target.value);\n    if (value < this.max) {\n      this.props.actions.selectPoint(value);\n    }\n  };\n\n  public clearSelection = () => {\n    this.props.actions.clearPoint();\n  };\n\n  public data() {\n    return this.props.data[this.selectedScan()] || {};\n  }\n\n  public selectedScan(): number {\n    if (this.props.selectedScan) {\n      return this.props.selectedScan;\n    }\n\n    return findLastScanId(this.props.scans) || 0;\n  }\n\n  public async fetchScanSpectra(point: number) {\n    if (!this.data().scanid) {\n      return;\n    }\n    if (point < 0 && this.props.currentPoint && this.props.currentPoint < 0) {\n      return;\n    }\n    if (this.props.fetching) {\n      return;\n    }\n\n    try {\n      await this.props.actions.fetchScanSpectra({\n        scanid: this.selectedScan(),\n        point,\n      });\n    } catch (error) {\n      console.log(\"Couldn't load scan spectra\", error);\n    }\n  }\n\n  private generateXData(yData: number[], obj: SpectraContainer): number[] {\n    const { conversion } = obj;\n    return conversion\n      ? range(yData.length).map((v) => v * conversion.scale + conversion.zero)\n      : range(yData.length);\n  }\n\n  private generateSeries(\n    series: SpectraData,\n    obj: SpectraContainer,\n    preSelectedXAxis: string | undefined = undefined\n  ): PlotSeries | undefined {\n    if (!series) return undefined;\n    const [yd] = series.data;\n    if (!yd) return undefined;\n\n    const x = preSelectedXAxis\n      ? obj.data[preSelectedXAxis].data[0]\n      : this.generateXData(yd, obj);\n\n    return {\n      x: [...x],\n      y: [...yd],\n      type: 'scattergl',\n      name: series.name,\n    };\n  }\n\n  public render() {\n    if (Object.keys(this.props.spectra).length === 0) {\n      return <span>Waiting for scan spectra</span>;\n    }\n\n    const { selectable = true, options = {}, spectra: obj } = this.props;\n    const {\n      backend = 'h5web',\n      preSelectedXAxis,\n      preSelectedSeries,\n      plotTitle,\n      insetLegend,\n    } = options;\n\n    const data: PlotData[] = [];\n\n    if (preSelectedSeries) {\n      const selectedSeries = Array.isArray(preSelectedSeries)\n        ? preSelectedSeries\n        : [preSelectedSeries];\n      selectedSeries.forEach((series) => {\n        const s = obj.data[series];\n        const plotSeries = this.generateSeries(s, obj, preSelectedXAxis);\n        if (plotSeries) data.push(plotSeries);\n      });\n    } else {\n      each(obj.data, (s) => {\n        const plotSeries = this.generateSeries(s, obj);\n        if (plotSeries) data.push(plotSeries);\n      });\n    }\n\n    return (\n      <div className=\"plot1d-container\">\n        {selectable && (\n          <Container>\n            <Form.Group as={Row}>\n              <Form.Label column sm={3}>\n                Point\n              </Form.Label>\n              <Col>\n                <Form.Control\n                  type=\"number\"\n                  ref={this.point}\n                  onChange={this.onChangePoint}\n                  min=\"0\"\n                  max={this.max}\n                />\n              </Col>\n              {this.props.currentPoint !== null && (\n                <Col xs={2}>\n                  <Button onClick={this.clearSelection}>Follow</Button>\n                </Col>\n              )}\n              {this.props.fetching && (\n                <Col xs={1}>\n                  <div className=\"my-auto ms-2\">\n                    <i className=\"fa fa-spin fa-spinner\" />\n                  </div>\n                </Col>\n              )}\n            </Form.Group>\n          </Container>\n        )}\n        <RemountOnResize>\n          {backend === 'h5web' ? (\n            <H5WebCurvePlot\n              insetLegend={insetLegend}\n              data={data}\n              layout={this.props.layout}\n            />\n          ) : (\n            <PlotEnhancer\n              className=\"plot\"\n              data={data}\n              layout={(this.props.layout ?? {}) as Partial<Plotly.Layout>}\n            />\n          )}\n        </RemountOnResize>\n        {(preSelectedXAxis || preSelectedSeries || plotTitle) && (\n          <span>\n            {plotTitle || `${preSelectedSeries} vs. ${preSelectedXAxis}`}\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\n\nimport ScanPlot1d from 'components/scans/ScanPlot1d';\nimport { withNamespace } from 'providers/namespace';\nimport scans from 'providers/scans';\nimport type { Cache } from '../ConnectUtils';\nimport mapStateToPropsWithCache from '../ConnectUtils';\n\nfunction mapStateAndCacheToProps(state: any, own: any, cache: Cache) {\n  return {\n    data: own.providers.scans.data.selector('results', state),\n    scans: own.providers.scans.list.selector('results', state),\n    spectra: own.providers.scans.spectra.selector('results', state),\n    fetching: own.providers.scans.spectra.selector('fetching', state),\n    currentPoint: scans.selector('currentPoint', state),\n    currentImageNode: scans.selector('currentImageNode', state),\n    selectedScan: scans.selector('selectedScan', state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch: any, own: any) {\n  return {\n    actions: {\n      selectPoint: (payload: any) =>\n        scans.dispatch('SCAN_CURRENT_POINT', Number.parseInt(payload, 10)),\n      clearPoint: () => scans.dispatch('SCAN_CURRENT_POINT', null),\n      fetchScanSpectra: (payload: any) =>\n        own.providers.scans.spectra.fetch(payload),\n      setPage: (payload: any) => own.providers.scans.spectra.setPage(payload),\n    },\n  };\n}\n\nexport default withNamespace({ scans })(\n  connect(\n    mapStateToPropsWithCache(mapStateAndCacheToProps),\n    mapDispatchToProps\n  )(ScanPlot1d)\n);\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport ScanPlot1d from 'connect/scans/ScanPlot1d';\n\nexport default function Yaml(props: YamlComponent) {\n  const {\n    providers,\n    yamlNode,\n    backend,\n    preSelectedXAxis,\n    preSelectedSeries,\n    plotTitle,\n    insetLegend,\n    ...unknownOptions\n  } = props;\n  YamlAsserts.assertOptionalBackend(yamlNode, 'backend', backend);\n  YamlAsserts.assertOptionalString(\n    yamlNode,\n    'preSelectedXAxis',\n    preSelectedXAxis\n  );\n  YamlAsserts.assertOptionalStringOrStringList(\n    yamlNode,\n    'preSelectedSeries',\n    preSelectedSeries\n  );\n  YamlAsserts.assertOptionalString(yamlNode, 'title', plotTitle);\n  YamlAsserts.assertOptionalBoolean(yamlNode, 'insetLegend', insetLegend);\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return (\n    <ScanPlot1d\n      providers={providers}\n      options={{\n        backend,\n        preSelectedXAxis,\n        preSelectedSeries,\n        plotTitle,\n        insetLegend,\n      }}\n    />\n  );\n}\n","import lodash from 'lodash';\n\nexport class Cache {\n  private cache: Record<string, any>;\n\n  public constructor() {\n    this.cache = {};\n  }\n\n  /**\n   * Returns and store value if the previous stored value deep differ.\n   *\n   * Else returns the previous stored value\n   */\n  public debounce<T>(name: string, value: T): T {\n    const previous = this.cache[name];\n    if (lodash.isEqual(previous, value)) {\n      return previous;\n    }\n    this.cache[name] = value;\n    return value;\n  }\n\n  /**\n   * Compute and returns and cache a value if the previous stored value deep differ.\n   *\n   * Else returns the previous computed result.\n   */\n  public memo<T>(name: string, callable: () => T, deps: unknown[]): T {\n    const defaultResult = [undefined, undefined];\n    const [previousResult, previousDeps] = this.cache[name] || defaultResult;\n    if (lodash.isEqual(previousDeps, deps)) {\n      return previousResult;\n    }\n    const result = callable();\n    this.cache[name] = [result, deps];\n    return result;\n  }\n}\n\nexport default function mapStateToPropsWithCache<S, O, R>(\n  mapStateToProps: (state: S, own: O, cache: Cache) => R\n): (state: S, own: O) => R {\n  const cache = new Cache();\n  return (state, own) => mapStateToProps(state, own, cache);\n}\n"],"names":["props","curve","onClick","onDoubleClick","_jsxs","className","type","visible","undefined","children","_jsx","style","backgroundColor","color","name","curves","onEntryClick","onEntryDoubleClick","map","c","i","LegendEntry","abscissas","x","xToIndexScale","useValueToIndexScale","abscissaConfig","useVisCanvasContext","TooltipMesh","guides","renderTooltip","xi","label","filter","y","onDataPointClick","curveProps","ordinates","hoveredIndex","setHoveredIndex","useState","abscissaToIndex","worldToData","handleClick","index","evt","unprojectedPoint","dataPt","newIndex","handlePointerEnter","handlePointerLeave","_Fragment","DataCurve","onDataPointEnter","onDataPointLeave","Annotation","center","fill","r","shapes","rawShapes","annotations","rawAnnotations","width","height","useThree","state","size","dataToHtml","scaleCoord","abscissaScale","ordinateScale","xMin","xMax","domain","yMin","yMax","xref","yref","newX","newY","Vector3","useScaleCoord","useCameraState","camera","shape","v0","x0","y0","v1","x1","y1","annotation","v","Overlay","fillcolor","line","opacity","Math","min","abs","strokeWidth","fillOpacity","text","textAnchor","onValidSelection","ordinateConfig","dataToWorld","visDomain","AxialSelectionTool","axis","selection","data","startPoint","endPoint","html","world","_ref","SvgElement","SvgRect","coords","COLORS","DEFAULT_DOMAIN","_layout$xaxis","_layout$yaxis","insetLegend","curveType","layout","onRoiSelection","visibilities","setVisibilities","isDefined","flatMap","d","hasValues","axisValues","getAxisValues","length","Array","isArray","xDomain","useCombinedDomain","useDomains","yDomain","toggleCurve","curveIndex","val","showOnlyThisCurve","_","VisCanvas","showGrid","xaxis","title","yaxis","raycasterThreshold","InteractiveCurve","glyphSize","glyphType","GlyphType","Pan","Zoom","SelectToZoom","modifierKey","MultiCurveTooltipMesh","ResetZoomButton","Html","CurveLegend","PlotOverlay","RoiSelectionTool","isMeshData","oneDataItem","Object","getOwnPropertyNames","includes","value","arr","ScanPlot1d","Component","constructor","super","point","max","lastScanId","onChangePoint","e","Number","target","this","actions","selectPoint","clearSelection","clearPoint","createRef","componentDidUpdate","prevProps","currentPoint","scanid","npoints_avail","fetchNewScan","fetch","current","fetchScanSpectra","selectedScan","findLastScanId","scans","fetching","error","console","log","generateXData","yData","obj","conversion","range","scale","zero","generateSeries","series","preSelectedXAxis","arguments","yd","render","_this$props$layout","keys","spectra","selectable","options","backend","preSelectedSeries","plotTitle","forEach","s","plotSeries","push","each","Container","Form","as","Row","column","sm","Col","ref","onChange","xs","Button","RemountOnResize","H5WebCurvePlot","PlotEnhancer","withNamespace","connect","mapStateToPropsWithCache","own","cache","providers","selector","list","currentImageNode","dispatch","payload","parseInt","setPage","Yaml","yamlNode","unknownOptions","YamlAsserts","Cache","debounce","previous","lodash","memo","callable","deps","defaultResult","previousResult","previousDeps","result","mapStateToProps"],"sourceRoot":""}