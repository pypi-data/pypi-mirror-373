{"version":3,"file":"static/js/866.fd5277f0.chunk.js","mappings":"6KAIe,SAASA,EAAKC,GAC3B,MAAM,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,KAASC,GAAmBJ,EACzDK,EAAAA,GAAqCH,EAAU,OAAQC,GACvDE,EAAAA,GAAgCH,EAAUE,GAC1C,MAAME,EAAU,CACdH,QAEF,OAAOI,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CAACP,UAAWA,EAAWK,QAASA,GACvD,C,2DCVO,MAAMG,EAGJC,WAAAA,GAAe,KAFdC,WAAK,EAGXC,KAAKD,MAAQ,CAAC,CAChB,CAOOE,QAAAA,CAAYC,EAAcC,GAC/B,MAAMC,EAAWJ,KAAKD,MAAMG,GAC5B,OAAIG,IAAAA,QAAeD,EAAUD,GACpBC,GAETJ,KAAKD,MAAMG,GAAQC,EACZA,EACT,CAOOG,IAAAA,CAAQJ,EAAcK,EAAmBC,GAC9C,MAAMC,EAAgB,MAACC,OAAWA,IAC3BC,EAAgBC,GAAgBZ,KAAKD,MAAMG,IAASO,EAC3D,GAAIJ,IAAAA,QAAeO,EAAcJ,GAC/B,OAAOG,EAET,MAAME,EAASN,IAEf,OADAP,KAAKD,MAAMG,GAAQ,CAACW,EAAQL,GACrBK,CACT,EAGa,SAASC,EACtBC,GAEA,MAAMhB,EAAQ,IAAIF,EAClB,MAAO,CAACmB,EAAOC,IAAQF,EAAgBC,EAAOC,EAAKlB,EACrD,C,8ICWA,SAAemB,EAAAA,EAAAA,IAAc,CAAEC,SAAS,KAAxC,EACEC,EAAAA,EAAAA,KACEN,EAAAA,EAAAA,IA9CJ,SAAyBE,EAAYC,EAAUlB,GAC7C,MAAM,UAAEV,EAAS,OAAEgC,EAAM,SAAEC,EAAQ,mBAAEC,EAAkB,QAAE7B,GAAYuB,GAE/D,gBAAEO,EAAe,QAAEC,GAAYpC,EAAU8B,SAC/C,MAAO,CACLO,SAAUC,EAAAA,EAAAA,SAAiB,WAAYX,GACvCY,cAAeT,EAAAA,EAAAA,SAAkB,gBAAiBH,GAClDa,OAAQJ,EAAQK,SAAS,UAAWd,GAClCG,EAAAA,EAAAA,SAAkB,gBAAiBH,IAErCK,SACAC,WACAC,qBACA7B,UACA8B,gBAAiBA,EAAgBM,SAAS,UAAWd,GACrDe,YAAa1C,EAAU8B,SAASK,gBAAgBQ,eAChDC,UAAWT,EAAgBQ,eAC3BE,OAAQV,EAAgBM,SAAS,SAAUd,GAC3CmB,SAAUX,EAAgBM,SAAS,WAAYd,GAC/CoB,KAAMZ,EAAgBM,SAAS,OAAQd,GACvCqB,MAAOb,EAAgBM,SAAS,QAASd,GACzCsB,SAAUd,EAAgBM,SAAS,WAAYd,GAC/CuB,SAAUpB,EAAAA,EAAAA,SAAkB,yBAA0BH,GACtDwB,aAAcC,EAAAA,EAAAA,SAAgB,UAAWzB,GACzC0B,WAAYD,EAAAA,EAAAA,SAAgB,QAASzB,GAEzC,KAEA,SAA4B2B,EAAe1B,GACzC,MAAM,gBAAEO,GAAoBP,EAAI5B,UAAU8B,SAC1C,MAAO,CACLyB,QAAS,CACPC,MAAOA,IAAMrB,EAAgBqB,QAC7BC,UAAYC,GAAiBvB,EAAgBsB,UAAUC,GAAS,GAChEC,QAAUD,GAAiBvB,EAAgBwB,QAAQD,GACnDE,YAAcF,GAAiBvB,EAAgByB,YAAYF,GAC3DG,OAASH,GACP5B,EAAAA,EAAAA,SAAkB,yBAA0B4B,GAC9CI,UAAYJ,GACV5B,EAAAA,EAAAA,SAAkB,yBAA0B,OAGpD,GAGEC,ECrCa,SAA8BhC,IAC3CgE,EAAAA,EAAAA,YAAU,KAAO,IAADC,EACD,QAAbA,EAAAjE,EAAMwD,eAAO,IAAAS,GAAbA,EAAeP,UAAU,CAAEQ,SAAUlE,EAAMwC,eAAgB,GAC1D,CAACxC,EAAMwC,cAAexC,EAAMwD,UAC/B,MAAM,SACJlB,GAAW,EAAK,cAChBE,EAAgB,KAAI,SACpB2B,EAAQ,QACR7D,EAAO,OACP2B,EAAkB,mBAClBE,EAAkB,SAClBD,GAAW,GACTlC,GACE,KAAEG,GAAqBG,EAE7B,OACEC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAmB,CAClBF,SAAU1B,EACVN,SAAUA,IAAaI,EACvB6B,SAAU,IAAKA,GACfhC,mBAAoBA,EACpBhC,KAAMA,EACN8B,OAAQA,EACRoC,OAAK,EACLC,YAAa,CAAEC,MAAO,CAAEC,QAAS,QAASC,MAAO,SACjDrB,aAAcpD,EAAMoD,aACpBE,WAAYtD,EAAMsD,YAGxB,I","sources":["components/yaml-layout/components/NewScanButton.tsx","connect/ConnectUtils.ts","connect/samples/NewScanButton.ts","components/samples/NewScanButtonSample2.tsx"],"sourcesContent":["import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport NewScanButton from 'connect/samples/NewScanButton';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, tags, ...unknownOptions } = props;\n  YamlAsserts.assertOptionalStringList(yamlNode, 'tags', tags);\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  const options = {\n    tags,\n  };\n  return <NewScanButton providers={providers} options={options} />;\n}\n","import lodash from 'lodash';\n\nexport class Cache {\n  private cache: Record<string, any>;\n\n  public constructor() {\n    this.cache = {};\n  }\n\n  /**\n   * Returns and store value if the previous stored value deep differ.\n   *\n   * Else returns the previous stored value\n   */\n  public debounce<T>(name: string, value: T): T {\n    const previous = this.cache[name];\n    if (lodash.isEqual(previous, value)) {\n      return previous;\n    }\n    this.cache[name] = value;\n    return value;\n  }\n\n  /**\n   * Compute and returns and cache a value if the previous stored value deep differ.\n   *\n   * Else returns the previous computed result.\n   */\n  public memo<T>(name: string, callable: () => T, deps: unknown[]): T {\n    const defaultResult = [undefined, undefined];\n    const [previousResult, previousDeps] = this.cache[name] || defaultResult;\n    if (lodash.isEqual(previousDeps, deps)) {\n      return previousResult;\n    }\n    const result = callable();\n    this.cache[name] = [result, deps];\n    return result;\n  }\n}\n\nexport default function mapStateToPropsWithCache<S, O, R>(\n  mapStateToProps: (state: S, own: O, cache: Cache) => R\n): (state: S, own: O) => R {\n  const cache = new Cache();\n  return (state, own) => mapStateToProps(state, own, cache);\n}\n","import { connect } from 'react-redux';\n\nimport { withNamespace } from 'providers/namespace';\n\nimport metadata from 'providers/metadata';\nimport session from 'providers/session';\nimport queuep from 'providers/queue';\n\nimport NewScanButtonSample2 from 'components/samples/NewScanButtonSample2';\nimport type { Cache } from '../ConnectUtils';\nimport mapStateToPropsWithCache from '../ConnectUtils';\n\nfunction mapStateToProps(state: any, own: any, cache: Cache) {\n  const { providers, button, disabled, additionalFormData, options } = own;\n\n  const { datacollections, samples } = providers.metadata;\n  return {\n    operator: session.selector('operator', state),\n    currentSample: metadata.selector('currentSample', state),\n    sample: samples.selector('results', state)[\n      metadata.selector('currentSample', state)\n    ],\n    button,\n    disabled,\n    additionalFormData,\n    options,\n    datacollections: datacollections.selector('ordered', state),\n    dcnamespace: providers.metadata.datacollections.getNamespace(),\n    namespace: datacollections.getNamespace(),\n    params: datacollections.selector('params', state),\n    per_page: datacollections.selector('per_page', state),\n    page: datacollections.selector('page', state),\n    total: datacollections.selector('total', state),\n    fetching: datacollections.selector('fetching', state),\n    selected: metadata.selector('selectedDataCollection', state),\n    queueRunning: queuep.selector('running', state),\n    queueReady: queuep.selector('ready', state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch: any, own: any) {\n  const { datacollections } = own.providers.metadata;\n  return {\n    actions: {\n      fetch: () => datacollections.fetch(),\n      setParams: (payload: any) => datacollections.setParams(payload, true),\n      setPage: (payload: any) => datacollections.setPage(payload),\n      setPageSize: (payload: any) => datacollections.setPageSize(payload),\n      select: (payload: any) =>\n        metadata.dispatch('SELECT_DATA_COLLECTION', payload),\n      setFollow: (payload: any) =>\n        metadata.dispatch('SELECT_DATA_COLLECTION', null),\n    },\n  };\n}\n\nexport default withNamespace({ metadata })(\n  connect(\n    mapStateToPropsWithCache(mapStateToProps),\n    mapDispatchToProps\n  )(NewScanButtonSample2)\n);\n","import { useEffect } from 'react';\nimport NewScanButtonSample from 'components/samples/NewScanButtonSample';\n\ninterface Props {\n  currentSample?: number;\n  operator?: boolean;\n  actions?: {\n    setParams: (params: { sampleid: number | undefined }) => void;\n  };\n  formData?: Record<string, any>;\n  queueRunning?: boolean;\n  queueReady?: boolean;\n  button?: JSX.Element | Element;\n  additionalFormData?: Record<string, any> | (() => Record<string, any>);\n  options: {\n    tags?: string[];\n  };\n  disabled?: boolean;\n}\n\nexport default function NewScanButtonSample2(props: Props) {\n  useEffect(() => {\n    props.actions?.setParams({ sampleid: props.currentSample });\n  }, [props.currentSample, props.actions]);\n  const {\n    operator = false,\n    currentSample = null,\n    formData,\n    options,\n    button = undefined,\n    additionalFormData,\n    disabled = false,\n  } = props;\n  const { tags = undefined } = options;\n\n  return (\n    <NewScanButtonSample\n      sampleid={currentSample}\n      disabled={disabled || !operator}\n      formData={{ ...formData }}\n      additionalFormData={additionalFormData}\n      tags={tags}\n      button={button}\n      inset\n      buttonProps={{ style: { display: 'block', width: '100%' } }}\n      queueRunning={props.queueRunning}\n      queueReady={props.queueReady}\n    />\n  );\n}\n"],"names":["Yaml","props","providers","yamlNode","tags","unknownOptions","YamlAsserts","options","_jsx","NewScanButton","Cache","constructor","cache","this","debounce","name","value","previous","lodash","memo","callable","deps","defaultResult","undefined","previousResult","previousDeps","result","mapStateToPropsWithCache","mapStateToProps","state","own","withNamespace","metadata","connect","button","disabled","additionalFormData","datacollections","samples","operator","session","currentSample","sample","selector","dcnamespace","getNamespace","namespace","params","per_page","page","total","fetching","selected","queueRunning","queuep","queueReady","dispatch","actions","fetch","setParams","payload","setPage","setPageSize","select","setFollow","useEffect","_props$actions","sampleid","formData","NewScanButtonSample","inset","buttonProps","style","display","width"],"sourceRoot":""}