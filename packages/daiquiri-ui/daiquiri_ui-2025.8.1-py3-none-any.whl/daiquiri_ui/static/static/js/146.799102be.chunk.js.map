{"version":3,"file":"static/js/146.799102be.chunk.js","mappings":"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","sources":["components/hardware/HardwareButton.tsx","connect/hardware/HardwareButton.ts","components/yaml-layout/components/hardware/HardwareButton.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { Button, InputGroup, Form } from 'react-bootstrap';\nimport { useOperator, useScanRunning } from '@esrf/daiquiri-lib';\nimport type { HardwareTypes } from '@esrf/daiquiri-lib';\nimport hardwarep from 'providers/hardware';\nimport { useHardwareStore } from '../../store/HardwareStore';\n\nexport interface HardwareButtonObject {\n  /** The hardware id */\n  id: string;\n  /** The function to execute i.e. `move` */\n  function?: string;\n  /** The property to change, i.e. `speed` */\n  property?: string;\n  /** In absolute mode, the value to move to */\n  value?: string;\n  /** In relative mode, how much it should increment the value by */\n  increment?: string;\n  /** The reference value, i.e. `position` */\n  reference?: string;\n}\n\nexport interface HardwareButtonProps {\n  /** Button title */\n  buttonTitle: string;\n  /** or icon fa-arrow-up fam-... */\n  icon?: string;\n  /** List of objects and values */\n  ids: HardwareButtonObject[];\n  /** Selectable step sizes for relative mode (assumes all objects will get same step change) */\n  steps?: number[];\n}\n\n/**\n * FIXME: It would be better to drop that API, if possible\n */\nfunction useRequestChange() {\n  return useMemo(() => {\n    return (payload: any) => {\n      return hardwarep.dispatch('REQUEST_HARDWARE_CHANGE', payload);\n    };\n  }, []);\n}\n\nfunction HardwareButton(props: HardwareButtonProps) {\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [loading, setLoading] = useState<boolean>(false);\n  const requestChange = useRequestChange();\n\n  const operator = useOperator();\n  const runningScan = useScanRunning();\n\n  function onClick() {\n    const pendingPromises: Promise<any>[] = [];\n    const objects = useHardwareStore.getState().hardware;\n\n    setLoading(true);\n    props.ids.forEach((obj) => {\n      if (obj.reference && (obj.increment || props.steps)) {\n        const object: HardwareTypes.Hardware = objects[obj.id];\n        pendingPromises.push(\n          requestChange({\n            ...obj,\n            value:\n              object.properties[obj.reference] +\n              (props.steps ? currentStep : obj.increment),\n          })\n        );\n      } else if (obj.function || obj.property) {\n        pendingPromises.push(requestChange(obj));\n      }\n    });\n\n    Promise.all(pendingPromises).finally(() => {\n      setLoading(false);\n    });\n  }\n\n  useEffect(() => {\n    if (props.steps) {\n      setCurrentStep(props.steps[0]);\n    }\n  }, [props.steps]);\n\n  const disabled = loading || !operator || runningScan;\n\n  return (\n    <InputGroup>\n      <Button onClick={onClick} disabled={disabled}>\n        {loading ? (\n          <i className=\"fa fa-spinner fa-spin\" />\n        ) : (\n          <>\n            {props.icon ? (\n              <i className={`fa ${props.icon}`} title={props.buttonTitle} />\n            ) : (\n              props.buttonTitle\n            )}\n          </>\n        )}\n      </Button>\n      {props.steps && (\n        <Form.Control\n          as=\"select\"\n          className=\"step-size\"\n          defaultValue={currentStep}\n          onChange={(e) => setCurrentStep(Number.parseFloat(e.target.value))}\n        >\n          {props.steps.map((step) => (\n            <option value={step}>{step}</option>\n          ))}\n        </Form.Control>\n      )}\n    </InputGroup>\n  );\n}\n\nexport default HardwareButton;\n","import { connect } from 'react-redux';\nimport HardwareButton from 'components/hardware/HardwareButton';\n\nfunction mapStateToProps(state: any, own: any) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HardwareButton);\n","import type { YamlComponent, YamlNode } from '@esrf/daiquiri-lib';\nimport { YamlAsserts, KeyError, MissingKeysError } from '@esrf/daiquiri-lib';\nimport HardwareButton from 'connect/hardware/HardwareButton';\nimport type { HardwareButtonObject } from 'components/hardware/HardwareButton';\n\ntype HardwareButtonObjectList = HardwareButtonObject[];\n\nfunction assertHardwareButtonObject(\n  yamlNode: YamlNode,\n  value: any\n): asserts value is HardwareButtonObject {\n  if (value === undefined) {\n    // FIXME: That's not a nice exception in this case, the rendering will be bad\n    throw new MissingKeysError(yamlNode, ['id']);\n  }\n  if (typeof value.id !== 'string') {\n    // FIXME: That's not a nice exception in this case, the rendering will be bad\n    throw new KeyError(yamlNode, 'id', 'A string is expected');\n  }\n}\n\nfunction assertHardwareButtonObjectListDesc(\n  yamlNode: YamlNode,\n  key: string,\n  value: any\n): asserts value is HardwareButtonObjectList | undefined {\n  if (value === undefined) {\n    return;\n  }\n  if (!Array.isArray(value)) {\n    throw new KeyError(yamlNode, 'ids', 'An option list is expected');\n  }\n\n  value.forEach((hardwareDesc, i) => {\n    const {\n      id,\n      function: fn,\n      property,\n      value,\n      increment,\n      reference,\n      ...unknownOptions\n    } = hardwareDesc;\n    YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n\n    try {\n      assertHardwareButtonObject(yamlNode, hardwareDesc);\n    } catch {\n      // FIXME: For now we catch it, but assertHardwareDesc could do a better job\n      throw new KeyError(\n        yamlNode,\n        'ids',\n        `The hardware button object description ${i} is wrong`\n      );\n    }\n  });\n}\n\nexport default function Yaml(props: YamlComponent) {\n  const {\n    providers,\n    yamlNode,\n    ids,\n    steps,\n    buttonTitle,\n    icon,\n    ...unknownOptions\n  } = props;\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  assertHardwareButtonObjectListDesc(yamlNode, 'ids', ids);\n  YamlAsserts.assertOptionalString(yamlNode, 'buttonTitle', buttonTitle);\n  YamlAsserts.assertOptionalString(yamlNode, 'icon', icon);\n  YamlAsserts.assertOptionalNumberList(yamlNode, 'steps', steps);\n  return (\n    <HardwareButton\n      steps={steps}\n      ids={ids}\n      buttonTitle={buttonTitle}\n      icon={icon}\n      providers={providers}\n    />\n  );\n}\n"],"names":["props","currentStep","setCurrentStep","useState","loading","setLoading","requestChange","useMemo","payload","hardwarep","operator","useOperator","runningScan","useScanRunning","useEffect","steps","disabled","_jsxs","InputGroup","children","_jsx","Button","onClick","pendingPromises","objects","useHardwareStore","hardware","ids","forEach","obj","reference","increment","object","id","push","value","properties","function","property","Promise","all","finally","className","_Fragment","icon","title","buttonTitle","Form","as","defaultValue","onChange","e","Number","parseFloat","target","map","step","connect","state","own","dispatch","HardwareButton","assertHardwareButtonObjectListDesc","yamlNode","key","undefined","Array","isArray","KeyError","hardwareDesc","i","fn","unknownOptions","YamlAsserts","MissingKeysError","assertHardwareButtonObject","Yaml","providers"],"sourceRoot":""}