{"version":3,"file":"static/js/526.a53ed732.chunk.js","mappings":"wRAeA,SAASA,EAAeC,GAAe,IAADC,EAAAC,EACpC,MAAM,UAAEC,GAAcH,EAQtB,OACEI,EAAAA,EAAAA,MAAA,MAEEC,UAAWC,IACT,CAAE,YAAaH,EAAUI,UAAWC,KAAyB,SAAnBL,EAAUM,MACpDN,EAAUO,KACVC,SAAA,CAEkB,cAAnBR,EAAUM,OACTG,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAAQ,OAAOC,QAASA,IAAMf,EAAMgB,QAAQC,kBAAkBN,SACnER,EAAUe,OAGK,SAAnBf,EAAUM,OACTG,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAAQ,OAAOC,QAASA,KAAMA,OApB3BI,EAoBmChB,EAAUgB,UAnB5DnB,EAAMoB,UAAUD,GAAME,MAAK,KACzBrB,EAAMsB,WAAWH,EAAK,IAFTA,KAoBmD,EAAAR,SAC3DR,EAAUe,QAGa,QAA3BjB,EAAmB,QAAnBC,EAACC,EAAUQ,gBAAQ,IAAAT,OAAA,EAAlBA,EAAoBqB,cAAM,IAAAtB,EAAAA,EAAI,GAAK,IACnCW,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAACC,GAAItB,EAAUI,UAAUI,UAChCC,EAAAA,EAAAA,KAAA,MAAAD,UAAKe,EAAAA,EAAAA,KAAIvB,EAAUQ,UAAWgB,GAAU3B,EAAM4B,WAAWD,WAlBxDxB,EAAUgB,KAuBrB,CAEApB,EAAe8B,aAAe,CAC5BtB,WAAW,EACXI,SAAU,GACVD,SAAKoB,GAGP,UCxCA,GAAeC,EAAAA,EAAAA,IAAc,CAAEC,OAAO,KAAtC,EACEC,EAAAA,EAAAA,KAXsBC,CAACC,EAAOC,KAAG,CACjC7B,UAAWyB,EAAAA,EAAAA,SAAgB,YAAaG,GAAOC,EAAIjB,UAG1BkB,CAACC,EAAUF,KAAG,CACvCpB,QAAS,CACPC,gBAAiBA,IAAMe,EAAAA,EAAAA,SAAgB,cAAeI,EAAIjB,UAK5Dc,CAA6ClC,ICmC/C,QAlCA,SAAwBC,GACtB,MAAM4B,EAAcW,IAEhB3B,EAAAA,EAAAA,KAACb,EAAc,CAEbI,UAAWoC,EACXX,WAAYA,EACZR,UAAWpB,EAAMgB,QAAQI,UACzBE,WAAYtB,EAAMgB,QAAQM,YAJrBiB,EAAKrB,MAahB,OAJAsB,EAAAA,EAAAA,YAAU,KACRxC,EAAMgB,QAAQyB,kBAAkB,GAC/B,CAACzC,EAAMgB,WAGRZ,EAAAA,EAAAA,MAACsC,EAAAA,EAAS,CAAA/B,SAAA,CACPX,EAAM2C,QACLvC,EAAAA,EAAAA,MAACwC,EAAAA,EAAK,CAAC9B,QAAQ,SAAQH,SAAA,EACrBC,EAAAA,EAAAA,KAAA,KAAGP,UAAU,kBAAkB,sCAC/BO,EAAAA,EAAAA,KAAA,OAAKP,UAAU,cAAaM,SAAEX,EAAM2C,YAGvCjB,EAAAA,EAAAA,KAAI1B,EAAM6C,aAAcC,IACvBlC,EAAAA,EAAAA,KAAA,MAAIP,UAAU,cAAaM,SACxBiB,EAAWkB,IADmBA,EAAI5B,UAM7C,EC3BA,SAAea,EAAAA,EAAAA,IAAc,CAAEC,OAAO,KAAtC,EACEC,EAAAA,EAAAA,KApBF,SAAyBE,EAAYC,GACnC,MAAM,UAAEW,GAAcX,EACtB,MAAO,CACLS,YAAaE,EAAUf,OAAOa,YAAYG,SAAS,UAAWb,GAC9DQ,MAAOI,EAAUf,OAAOa,YAAYG,SAAS,QAASb,GAE1D,IAEA,SAA4BG,EAAeF,GACzC,MAAO,CACLpB,QAAS,CACPyB,iBAAkBA,IAAML,EAAIW,UAAUf,OAAOa,YAAYI,QACzD7B,UAAY8B,GACVd,EAAIW,UAAUf,OAAOmB,MAAMC,YAAYF,GACzC5B,WAAa4B,GAAiBlB,EAAAA,EAAAA,SAAgB,cAAekB,IAGnE,GAGEjB,CAA6CoB,ICrBhC,SAASC,EAAKtD,GAC3B,MAAM,UAAE+C,EAAS,SAAEQ,KAAaC,GAAmBxD,EAEnD,OADAyD,EAAAA,GAAgCF,EAAUC,IACnC5C,EAAAA,EAAAA,KAACyC,EAAc,CAACN,UAAWA,GACpC,C","sources":["components/editor/FileEditorLeaf.tsx","connect/editor/FileEditorLeaf.js","components/editor/FileEditorTree.tsx","connect/FileEditorTree.ts","components/yaml-layout/components/EditorTree.tsx"],"sourcesContent":["import { map } from 'lodash';\nimport { Button, Collapse } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport type { Directory } from './types';\n\ninterface Props {\n  directory: Directory;\n  renderTree: (directory: Directory) => JSX.Element;\n  fetchFile: (filePath: string) => Promise<void>;\n  selectFile: (filePath: string) => void;\n  actions: {\n    toggleLeafState: () => void;\n  };\n}\n\nfunction FileEditorLeaf(props: Props) {\n  const { directory } = props;\n\n  const onClick = (path: string) => {\n    props.fetchFile(path).then(() => {\n      props.selectFile(path);\n    });\n  };\n\n  return (\n    <li\n      key={directory.path}\n      className={classNames(\n        { 'leaf-open': directory.leafState, file: directory.type === 'file' },\n        directory.ext\n      )}\n    >\n      {directory.type === 'directory' && (\n        <Button variant=\"link\" onClick={() => props.actions.toggleLeafState()}>\n          {directory.name}\n        </Button>\n      )}\n      {directory.type === 'file' && (\n        <Button variant=\"link\" onClick={() => onClick(directory.path)}>\n          {directory.name}\n        </Button>\n      )}\n      {(directory.children?.length ?? 0) > 0 && (\n        <Collapse in={directory.leafState}>\n          <ul>{map(directory.children, (child) => props.renderTree(child))}</ul>\n        </Collapse>\n      )}\n    </li>\n  );\n}\n\nFileEditorLeaf.defaultProps = {\n  leafState: false,\n  children: [],\n  ext: undefined,\n};\n\nexport default FileEditorLeaf;\n","import { connect } from 'react-redux';\n\nimport { withNamespace } from 'providers/namespace';\nimport editor from 'providers/editor';\n\nimport FileEditorLeaf from 'components/editor/FileEditorLeaf';\n\nconst mapStateToProps = (state, own) => ({\n  leafState: editor.selector('leafState', state)[own.path]\n});\n\nconst mapDispatchToProps = (dispatch, own) => ({\n  actions: {\n    toggleLeafState: () => editor.dispatch('TOGGLE_LEAF', own.path)\n  }\n});\n\nexport default withNamespace({ editor })(\n  connect(mapStateToProps, mapDispatchToProps)(FileEditorLeaf)\n);\n","import { useEffect } from 'react';\nimport type { Directory } from './types';\n\nimport { map } from 'lodash';\nimport { Alert } from 'react-bootstrap';\nimport { FullSizer } from '@esrf/daiquiri-lib';\n\nimport FileEditorLeaf from 'connect/editor/FileEditorLeaf';\n\ninterface Props {\n  error?: string;\n  directories: Record<string, Directory>;\n  actions: {\n    fetchDirectories: () => void;\n    fetchFile: (filePath: string) => void;\n    selectFile: (filePath: string) => void;\n  };\n}\n\nfunction FileEditorTree(props: Props) {\n  const renderTree = (tree: Directory) => {\n    return (\n      <FileEditorLeaf\n        key={tree.name}\n        directory={tree}\n        renderTree={renderTree}\n        fetchFile={props.actions.fetchFile}\n        selectFile={props.actions.selectFile}\n      />\n    );\n  };\n\n  useEffect(() => {\n    props.actions.fetchDirectories();\n  }, [props.actions]);\n\n  return (\n    <FullSizer>\n      {props.error && (\n        <Alert variant=\"danger\">\n          <i className=\"fa fa-warning\" /> Could not fetch directory listing\n          <div className=\"description\">{props.error}</div>\n        </Alert>\n      )}\n      {map(props.directories, (dir) => (\n        <ul className=\"editor-tree\" key={dir.name}>\n          {renderTree(dir)}\n        </ul>\n      ))}\n    </FullSizer>\n  );\n}\n\nexport default FileEditorTree;\n","import { connect } from 'react-redux';\nimport { withNamespace } from 'providers/namespace';\nimport editor from 'providers/editor';\nimport FileEditorTree from 'components/editor/FileEditorTree';\n\nfunction mapStateToProps(state: any, own: any) {\n  const { providers } = own;\n  return {\n    directories: providers.editor.directories.selector('results', state),\n    error: providers.editor.directories.selector('error', state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch: any, own: any) {\n  return {\n    actions: {\n      fetchDirectories: () => own.providers.editor.directories.fetch(),\n      fetchFile: (payload: any) =>\n        own.providers.editor.files.fetchSingle(payload),\n      selectFile: (payload: any) => editor.dispatch('SELECT_FILE', payload),\n    },\n  };\n}\n\nexport default withNamespace({ editor })(\n  connect(mapStateToProps, mapDispatchToProps)(FileEditorTree)\n);\n","import type { YamlComponent } from '@esrf/daiquiri-lib';\nimport { YamlAsserts } from '@esrf/daiquiri-lib';\nimport FileEditorTree from 'connect/FileEditorTree';\n\nexport default function Yaml(props: YamlComponent) {\n  const { providers, yamlNode, ...unknownOptions } = props;\n  YamlAsserts.assertNoUnknownKeys(yamlNode, unknownOptions);\n  return <FileEditorTree providers={providers} />;\n}\n"],"names":["FileEditorLeaf","props","_directory$children$l","_directory$children","directory","_jsxs","className","classNames","leafState","file","type","ext","children","_jsx","Button","variant","onClick","actions","toggleLeafState","name","path","fetchFile","then","selectFile","length","Collapse","in","map","child","renderTree","defaultProps","undefined","withNamespace","editor","connect","mapStateToProps","state","own","mapDispatchToProps","dispatch","tree","useEffect","fetchDirectories","FullSizer","error","Alert","directories","dir","providers","selector","fetch","payload","files","fetchSingle","FileEditorTree","Yaml","yamlNode","unknownOptions","YamlAsserts"],"sourceRoot":""}