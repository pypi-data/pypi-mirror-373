# output formatters for syscall data

import json
import csv
from typing import Dict, TextIO
from pathlib import Path
from .utils import get_offsets, get_asm_offsets

def to_json(syscalls: Dict[str, int], output_file: TextIO = None) -> str:
    # convert syscalls dictionary to json format with hexadecimal offsets
    offsets = get_offsets(syscalls)
    sorted_offsets = dict(sorted(offsets.items(), key=lambda x: int(x[1], 16)))
    json_data = {
        "syscalls": sorted_offsets,
        "count": len(syscalls),
        "metadata": {
            "format": "json",
            "version": "1.0"
        }
    }
    json_str = json.dumps(json_data, indent=2)
    if output_file:
        output_file.write(json_str)
        output_file.write('\n')
    return json_str

def to_csv(syscalls: Dict[str, int], output_file: TextIO = None) -> str:
    # convert syscalls dictionary to csv format with hexadecimal offsets
    offsets = get_offsets(syscalls)
    sorted_offsets = sorted(offsets.items(), key=lambda x: int(x[1], 16))
    csv_lines = ["Function Name, Syscall ID, Offset (Hex)"]
    for func_name, hex_offset in sorted_offsets:
        decimal_num = int(hex_offset, 16)
        csv_lines.append(f"{func_name}, {decimal_num}, {hex_offset}")
    csv_str = '\n'.join(csv_lines)
    if output_file:
        output_file.write(csv_str)
        output_file.write('\n')
    return csv_str

def to_asm(syscalls: Dict[str, int], output_file: TextIO = None) -> str:
    # convert syscalls dictionary to x64 assembly format with hexadecimal offsets
    offsets = get_asm_offsets(syscalls)
    asm_lines = [
        ".code",
        "",
        "; Generated by ntparse",
        "; Syscall stubs for x64",
        ""
    ]
    sorted_offsets = sorted(offsets.items(), key=lambda x: int(x[1].replace('h', ''), 16))
    for func_name, hex_offset in sorted_offsets:
        asm_lines.extend([
            f"{func_name} PROC",
            f"   mov r10, rcx",
            f"   mov eax, {hex_offset}",
            "   syscall",
            "   ret",
            f"{func_name} ENDP",
            ""
        ])
    asm_lines.append("end")
    asm_str = '\n'.join(asm_lines)
    if output_file:
        output_file.write(asm_str)
        output_file.write('\n')
    return asm_str

def to_python_dict(syscalls: Dict[str, int], output_file: TextIO = None) -> str:
    # convert syscalls dictionary to python dictionary format with hexadecimal offsets
    offsets = get_offsets(syscalls)
    sorted_offsets = sorted(offsets.items(), key=lambda x: int(x[1], 16))
    python_lines = [
        "# Generated by ntparse",
        "# x64 Syscall numbers for ntdll.dll",
        "",
        "SYSCALLS = {"
    ]
    for func_name, hex_offset in sorted_offsets:
        python_lines.append(f"    '{func_name}': {hex_offset},")
    python_lines.append("}")
    python_str = '\n'.join(python_lines)
    if output_file:
        output_file.write(python_str)
        output_file.write('\n')
    return python_str 