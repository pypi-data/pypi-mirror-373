# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import quality_verification_service_pb2 as quality__verification__service__pb2


class QualityVerificationGrpcStub(object):
    """*
    The quality verification service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyQuality = channel.unary_stream(
                '/ProSuite.Microservices.Definitions.QA.QualityVerificationGrpc/VerifyQuality',
                request_serializer=quality__verification__service__pb2.VerificationRequest.SerializeToString,
                response_deserializer=quality__verification__service__pb2.VerificationResponse.FromString,
                )
        self.VerifyDataQuality = channel.stream_stream(
                '/ProSuite.Microservices.Definitions.QA.QualityVerificationGrpc/VerifyDataQuality',
                request_serializer=quality__verification__service__pb2.DataVerificationRequest.SerializeToString,
                response_deserializer=quality__verification__service__pb2.DataVerificationResponse.FromString,
                )
        self.VerifyStandaloneXml = channel.unary_stream(
                '/ProSuite.Microservices.Definitions.QA.QualityVerificationGrpc/VerifyStandaloneXml',
                request_serializer=quality__verification__service__pb2.StandaloneVerificationRequest.SerializeToString,
                response_deserializer=quality__verification__service__pb2.StandaloneVerificationResponse.FromString,
                )


class QualityVerificationGrpcServicer(object):
    """*
    The quality verification service definition.
    """

    def VerifyQuality(self, request, context):
        """*
        Verifies the quality definied in the data dictionary.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyDataQuality(self, request_iterator, context):
        """*
        Experimental - Verifies the data quality definied in the data dictionary. The data is provided by the client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyStandaloneXml(self, request, context):
        """*
        Verifies the quality using an XML definition instead of accessing the data dictionary.
        This is a simplified interface with a basic response and no parallelism. Consider using
        VerifyQuality instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QualityVerificationGrpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyQuality': grpc.unary_stream_rpc_method_handler(
                    servicer.VerifyQuality,
                    request_deserializer=quality__verification__service__pb2.VerificationRequest.FromString,
                    response_serializer=quality__verification__service__pb2.VerificationResponse.SerializeToString,
            ),
            'VerifyDataQuality': grpc.stream_stream_rpc_method_handler(
                    servicer.VerifyDataQuality,
                    request_deserializer=quality__verification__service__pb2.DataVerificationRequest.FromString,
                    response_serializer=quality__verification__service__pb2.DataVerificationResponse.SerializeToString,
            ),
            'VerifyStandaloneXml': grpc.unary_stream_rpc_method_handler(
                    servicer.VerifyStandaloneXml,
                    request_deserializer=quality__verification__service__pb2.StandaloneVerificationRequest.FromString,
                    response_serializer=quality__verification__service__pb2.StandaloneVerificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ProSuite.Microservices.Definitions.QA.QualityVerificationGrpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QualityVerificationGrpc(object):
    """*
    The quality verification service definition.
    """

    @staticmethod
    def VerifyQuality(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ProSuite.Microservices.Definitions.QA.QualityVerificationGrpc/VerifyQuality',
            quality__verification__service__pb2.VerificationRequest.SerializeToString,
            quality__verification__service__pb2.VerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyDataQuality(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ProSuite.Microservices.Definitions.QA.QualityVerificationGrpc/VerifyDataQuality',
            quality__verification__service__pb2.DataVerificationRequest.SerializeToString,
            quality__verification__service__pb2.DataVerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyStandaloneXml(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ProSuite.Microservices.Definitions.QA.QualityVerificationGrpc/VerifyStandaloneXml',
            quality__verification__service__pb2.StandaloneVerificationRequest.SerializeToString,
            quality__verification__service__pb2.StandaloneVerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
