name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce CI time by excluding some combinations
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Verify installation
      run: |
        python -c "import gtimes; print(f'GTimes version: {gtimes.__version__}')"
        python -c "from gtimes.gpstime import gpsFromUTC; print('GPS time functions imported successfully')"
        python -c "from gtimes.timefunc import TimefromYearf; print('Time utility functions imported successfully')"
        timecalc --version

    - name: Run linting
      run: |
        ruff check src/ tests/
        ruff format --check src/ tests/

    - name: Run type checking
      run: |
        mypy src/gtimes/

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=gtimes --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  scientific-validation:
    name: Scientific Accuracy Validation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Run GPS time precision tests
      run: |
        pytest tests/ -m "precision" -v --tb=short

    - name: Run RINEX compatibility tests
      run: |
        pytest tests/ -m "rinex" -v --tb=short

    - name: Run GAMIT integration tests
      run: |
        pytest tests/ -m "gamit" -v --tb=short

    - name: Validate leap second data
      run: |
        python tests/validate_leap_seconds.py

    - name: Run command-line interface tests
      run: |
        pytest tests/test_timecalc_cli.py -v

  documentation:
    name: Documentation Build and Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]

    - name: Build documentation
      run: |
        mkdocs build --strict

    - name: Test documentation links
      run: |
        # Install link checker
        pip install requests beautifulsoup4
        python tests/check_docs_links.py

    - name: Deploy documentation to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        commit_message: 'Deploy documentation: ${{ github.event.head_commit.message }}'

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        pip install asv

    - name: Run performance benchmarks
      run: |
        pytest tests/benchmark/ --benchmark-only --benchmark-json=benchmark.json

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  build:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: [test, scientific-validation, documentation]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build packages
      run: |
        python -m build

    - name: Check distribution
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [test, scientific-validation, documentation, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true

    - name: Test installation from Test PyPI
      run: |
        python -m pip install --upgrade pip
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ gtimes
        python -c "import gtimes; print(f'Installed version: {gtimes.__version__}')"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: GTimes ${{ github.ref }}
        body: |
          ## Changes in this release
          
          See CHANGELOG.md for detailed changes.
          
          ## Installation
          
          ```bash
          pip install gtimes
          ```
          
          ## Documentation
          
          Visit the [documentation site](https://your-username.github.io/gtimes/) for complete usage guide.
        draft: false
        prerelease: false

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, scientific-validation, documentation, build]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.scientific-validation.result == 'success' }}
      run: |
        echo "‚úÖ All CI/CD checks passed successfully!"
        echo "üìä Test results: ${{ needs.test.result }}"
        echo "üî¨ Scientific validation: ${{ needs.scientific-validation.result }}"
        echo "üìö Documentation: ${{ needs.documentation.result }}"
        echo "üì¶ Build: ${{ needs.build.result }}"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.scientific-validation.result == 'failure' }}
      run: |
        echo "‚ùå CI/CD pipeline failed!"
        echo "üìä Test results: ${{ needs.test.result }}"
        echo "üî¨ Scientific validation: ${{ needs.scientific-validation.result }}"
        echo "üìö Documentation: ${{ needs.documentation.result }}"
        echo "üì¶ Build: ${{ needs.build.result }}"
        exit 1