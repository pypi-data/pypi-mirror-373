Metadata-Version: 2.4
Name: failure-invoker-mcp
Version: 1.0.0
Summary: Invoke mock AZ, DB, and MSK Failure. Internally use AWS FIS, AWS SSM.
Author-email: Hyeonggeun Oh <kandy@plaintexting.com>
License: MIT
Project-URL: Homepage, https://github.com/Geun-Oh/failure-invoker-mcp
Project-URL: Repository, https://github.com/Geun-Oh/failure-invoker-mcp
Project-URL: Issues, https://github.com/Geun-Oh/failure-invoker-mcp/issues
Keywords: aws,fis,chaos-engineering,mcp,fault-injection
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Systems Administration
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: boto3>=1.34.0
Requires-Dist: requests>=2.31.0
Requires-Dist: mcp>=1.0.0
Dynamic: license-file

# Failure Invoker MCP Server

Invoke mock AZ, DB, and MSK Failure with AWS FIS, AWS SSM.

## Usage

### *.json file

```json
{
  "mcpServers": {
    "sequential-thinking": {
      "command": "uvx",
      "args": ["failure-invoker-mcp@latest"],
      "env": {
        "AWS_ACCESS_KEY": "",
        "AWS_SECRET_ID": ""
      }
    }
  }
}
```

### Strands Agent SDK

```python
failure_invoker_client = MCPClient(
    lambda: stdio_client(
        StdioServerParameters(
            command="uvx",
            args=["failure-invoker-mcp@latest"],
            env={
              "AWS_ACCESS_KEY": "",
              "AWS_SECRET_ID": "",
            },
        )
    )
)

failure_invoker_client.start()

agent = Agent(
    model,
    system_prompt,
    tools=[failure_invoker_client.list_tools_sync()],
)
```
