class s{constructor(s="module-data-content"){this.container=document.getElementById(s),this.currentData=null,this.currentType=null}display(s,a=null){if(this.container)switch(this.currentData=s,this.currentType=a,a||(a=this.detectType(s)),this.container.innerHTML="",a){case"event":this.displayEvent(s);break;case"agent":this.displayAgent(s);break;case"tool":this.displayTool(s);break;case"todo":this.displayTodo(s);break;case"instruction":this.displayInstruction(s);break;case"session":this.displaySession(s);break;case"file_operation":this.displayFileOperation(s);break;case"hook":this.displayHook(s);break;default:this.displayGeneric(s)}else console.warn("UnifiedDataViewer: Container not found")}detectType(s){return s&&"object"==typeof s?s.hook_event_name||s.event_type||s.type&&s.timestamp?"event":s.agent_name||s.agentName||s.name&&("active"===s.status||"completed"===s.status)?"agent":s.tool_name||"TodoWrite"===s.name||"Read"===s.name||s.tool_parameters||s.params&&s.icon||s.name&&"tool"===s.type?"tool":!s.todos||s.name||s.params?s.content&&s.activeForm&&s.status&&!s.name&&!s.params?"todo":s.text&&s.preview&&"user_instruction"===s.type?"instruction":s.session_id&&(s.startTime||s.lastActivity)?"session":s.file_path&&(s.operations||s.operation)?"file_operation":s.event_type&&(s.hook_name||s.subtype)?"hook":"generic":"todo":"generic"}displayEvent(s){let a=`\n            <div class="unified-viewer-header">\n                <h6>${this.formatEventType(s)}</h6>\n                <span class="unified-viewer-timestamp">${this.formatTimestamp(s.timestamp)}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;if(a+='<div class="primary-data">',a+=this.formatEventDetails(s),s.tool_name||s.data?.tool_name){const n=s.tool_name||s.data.tool_name;a+=`\n                <div class="detail-row highlight">\n                    <span class="detail-label">Tool:</span>\n                    <span class="detail-value">${this.getToolIcon(n)} ${n}</span>\n                </div>\n            `;const t=s.tool_parameters||s.data?.tool_parameters;t&&(t.file_path&&(a+=`\n                        <div class="detail-row">\n                            <span class="detail-label">File:</span>\n                            <span class="detail-value code">${t.file_path}</span>\n                        </div>\n                    `),t.command&&(a+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Command:</span>\n                            <pre class="code-snippet">${this.escapeHtml(t.command)}</pre>\n                        </div>\n                    `))}a+="</div>",a+=this.createCollapsibleJSON(s,"Full Event Data"),a+="</div>",this.container.innerHTML=a}displayAgent(s){const a=this.getAgentIcon(s.name||s.agentName),n=s.name||s.agentName||"Unknown Agent",t=this.formatStatus(s.status);let e=`\n            <div class="unified-viewer-header">\n                <h6>${a} ${n}</h6>\n                <span class="unified-viewer-status">${t}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;if(e+='<div class="primary-data">',e+=`\n            <div class="detail-row highlight">\n                <span class="detail-label">Status:</span>\n                <span class="detail-value ${this.formatStatusClass(t)}">${t}</span>\n            </div>\n        `,s.tools&&s.tools.length>0){const a=s.tools.filter(s=>"in_progress"===s.status),n=s.tools.filter(s=>"completed"===s.status);a.length>0&&(e+='\n                    <div class="active-tools-section">\n                        <span class="section-label">üîÑ Active Tools:</span>\n                        <div class="tools-grid">\n                ',a.forEach(s=>{e+=`\n                        <div class="tool-chip active">\n                            ${this.getToolIcon(s.name)} ${s.name}\n                        </div>\n                    `}),e+="</div></div>"),e+=`\n                <div class="detail-row">\n                    <span class="detail-label">Tools Summary:</span>\n                    <span class="detail-value">\n                        ${a.length} active, ${n.length} completed, ${s.tools.length} total\n                    </span>\n                </div>\n            `}(s.currentTask||s.description)&&(e+=`\n                <div class="detail-row">\n                    <span class="detail-label">Current Task:</span>\n                    <span class="detail-value">${s.currentTask||s.description}</span>\n                </div>\n            `),e+="</div>",e+=this.createCollapsibleJSON(s,"Full Agent Details"),e+="</div>",this.container.innerHTML=e}displayTool(s){const a=s.name||s.tool_name||"Unknown Tool",n=this.getToolIcon(a),t=this.formatStatus(s.status);if("TodoWrite"===a)return void this.displayTodoWriteTool(s);let e=`\n            <div class="unified-viewer-header">\n                <h6>${n} ${a}</h6>\n                <span class="unified-viewer-status">${t}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;const i=s.params||s.tool_parameters||{};"Read"===a||"Edit"===a||"Write"===a?i.file_path&&(e+=`\n                    <div class="primary-data">\n                        <div class="detail-row highlight">\n                            <span class="detail-label">üìÅ File:</span>\n                            <span class="detail-value code">${i.file_path}</span>\n                        </div>\n                `,i.old_string&&(e+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Old Text:</span>\n                            <pre class="code-snippet">${this.escapeHtml(i.old_string.substring(0,200))}${i.old_string.length>200?"...":""}</pre>\n                        </div>\n                    `),i.new_string&&(e+=`\n                        <div class="detail-row">\n                            <span class="detail-label">New Text:</span>\n                            <pre class="code-snippet">${this.escapeHtml(i.new_string.substring(0,200))}${i.new_string.length>200?"...":""}</pre>\n                        </div>\n                    `),e+="</div>"):"Bash"===a?i.command&&(e+=`\n                    <div class="primary-data">\n                        <div class="detail-row highlight">\n                            <span class="detail-label">üíª Command:</span>\n                            <pre class="code-snippet">${this.escapeHtml(i.command)}</pre>\n                        </div>\n                    </div>\n                `):"Grep"===a||"Glob"===a?i.pattern&&(e+=`\n                    <div class="primary-data">\n                        <div class="detail-row highlight">\n                            <span class="detail-label">üîç Pattern:</span>\n                            <span class="detail-value code">${this.escapeHtml(i.pattern)}</span>\n                        </div>\n                `,i.path&&(e+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Path:</span>\n                            <span class="detail-value">${i.path}</span>\n                        </div>\n                    `),e+="</div>"):"Task"===a&&i.subagent_type&&(e+=`\n                    <div class="primary-data">\n                        <div class="detail-row highlight">\n                            <span class="detail-label">ü§ñ Delegating to:</span>\n                            <span class="detail-value">${i.subagent_type} agent</span>\n                        </div>\n                `,i.description&&(e+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Task:</span>\n                            <span class="detail-value">${i.description}</span>\n                        </div>\n                    `),e+="</div>"),e+=`\n            <div class="detail-row">\n                <span class="detail-label">Status:</span>\n                <span class="detail-value">${t}</span>\n            </div>\n        `,s.callCount&&(e+=`\n                <div class="detail-row">\n                    <span class="detail-label">Call Count:</span>\n                    <span class="detail-value">${s.callCount}</span>\n                </div>\n            `),e+=this.createCollapsibleJSON(s,"Full Tool Details"),e+="</div>",this.container.innerHTML=e}displayTodoWriteTool(s){const a=this.formatStatus(s.status),n=(s.params||s.tool_parameters||{}).todos||[];let t=`\n            <div class="unified-viewer-header">\n                <h6>üìù TodoWrite</h6>\n                <span class="unified-viewer-status">${a}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;if(n.length>0){const s=this.getTodoStatusCounts(n);t+=`\n                <div class="todo-status-bar">\n                    <div class="status-item completed">\n                        <span class="status-icon">‚úÖ</span>\n                        <span class="status-count">${s.completed}</span>\n                        <span class="status-label">Done</span>\n                    </div>\n                    <div class="status-item in_progress">\n                        <span class="status-icon">üîÑ</span>\n                        <span class="status-count">${s.in_progress}</span>\n                        <span class="status-label">Active</span>\n                    </div>\n                    <div class="status-item pending">\n                        <span class="status-icon">‚è≥</span>\n                        <span class="status-count">${s.pending}</span>\n                        <span class="status-label">Pending</span>\n                    </div>\n                </div>\n            `,t+='\n                <div class="todo-list-primary">\n            ',n.forEach((s,a)=>{const n=this.getCheckboxIcon(s.status),e="in_progress"===s.status&&s.activeForm||s.content,i=this.formatStatusClass(s.status);t+=`\n                    <div class="todo-item ${s.status}">\n                        <span class="todo-icon ${i}">${n}</span>\n                        <span class="todo-text">${this.escapeHtml(e)}</span>\n                        ${"in_progress"===s.status?'<span class="todo-badge active">ACTIVE</span>':""}\n                    </div>\n                `}),t+="\n                </div>\n            "}else t+='\n                <div class="detail-row">\n                    <span class="detail-value">No todos in list</span>\n                </div>\n            ';s.callCount&&s.callCount>1&&(t+=`\n                <div class="detail-row">\n                    <span class="detail-label">Updates:</span>\n                    <span class="detail-value">${s.callCount}</span>\n                </div>\n            `),t+=this.createCollapsibleJSON(s,"Full Details"),t+="</div>",this.container.innerHTML=t}displayTodo(s){let a;a=s.todos&&Array.isArray(s.todos)?s.todos:Array.isArray(s)?s:s.content&&s.activeForm&&s.status?[s]:[];let n='\n            <div class="unified-viewer-header">\n                <h6>üìã Todo List</h6>\n            </div>\n            <div class="unified-viewer-content">\n        ';a.length>0?(n+='\n                <div class="todo-list-primary">\n            ',a.forEach(s=>{const a=this.getCheckboxIcon(s.status),t="in_progress"===s.status&&s.activeForm||s.content,e=this.formatStatusClass(s.status);n+=`\n                    <div class="todo-item ${s.status}">\n                        <span class="todo-icon ${e}">${a}</span>\n                        <span class="todo-text">${this.escapeHtml(t)}</span>\n                        <span class="todo-status-text ${e}">${s.status.replace("_"," ")}</span>\n                    </div>\n                `}),n+="\n                </div>\n            "):n+='\n                <div class="detail-section">\n                    <div class="no-todos">No todo items found</div>\n                </div>\n            ',n+="</div>",this.container.innerHTML=n}displayInstruction(s){let a=`\n            <div class="unified-viewer-header">\n                <h6>üí¨ User Instruction</h6>\n                <span class="unified-viewer-timestamp">${this.formatTimestamp(s.timestamp)}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;a+=`\n            <div class="primary-data">\n                <div class="instruction-content">\n                    ${this.escapeHtml(s.text)}\n                </div>\n                <div class="instruction-meta">\n                    <span class="meta-item">üìè ${s.text.length} characters</span>\n                    <span class="meta-item">üïê ${this.formatTimestamp(s.timestamp)}</span>\n                </div>\n            </div>\n        `,Object.keys(s).length>3&&(a+=this.createCollapsibleJSON(s,"Full Instruction Data")),a+="</div>",this.container.innerHTML=a}displaySession(s){let a=`\n            <div class="unified-viewer-header">\n                <h6>üéØ Session: ${s.session_id||s.id}</h6>\n                <span class="unified-viewer-status">${this.formatStatus(s.status||"active")}</span>\n            </div>\n            <div class="unified-viewer-content">\n                <div class="detail-row">\n                    <span class="detail-label">Session ID:</span>\n                    <span class="detail-value">${s.session_id||s.id}</span>\n                </div>\n                <div class="detail-row">\n                    <span class="detail-label">Start Time:</span>\n                    <span class="detail-value">${this.formatTimestamp(s.startTime||s.timestamp)}</span>\n                </div>\n        `;s.working_directory&&(a+=`\n                <div class="detail-row">\n                    <span class="detail-label">Working Directory:</span>\n                    <span class="detail-value">${s.working_directory}</span>\n                </div>\n            `),s.git_branch&&(a+=`\n                <div class="detail-row">\n                    <span class="detail-label">Git Branch:</span>\n                    <span class="detail-value">${s.git_branch}</span>\n                </div>\n            `),void 0!==s.eventCount&&(a+=`\n                <div class="detail-row">\n                    <span class="detail-label">Events:</span>\n                    <span class="detail-value">${s.eventCount}</span>\n                </div>\n            `),a+="</div>",this.container.innerHTML=a}displayFileOperation(s){let a=`\n            <div class="unified-viewer-header">\n                <h6>üìÑ File: ${s.file_path}</h6>\n                <span class="unified-viewer-count">${s.operations?s.operations.length:1} operation${s.operations&&1!==s.operations.length?"s":""}</span>\n            </div>\n            <div class="unified-viewer-content">\n                <div class="detail-row">\n                    <span class="detail-label">File Path:</span>\n                    <span class="detail-value">${s.file_path}</span>\n                </div>\n        `;s.operations&&Array.isArray(s.operations)&&(a+=`\n                <div class="detail-section">\n                    <span class="detail-section-title">Operations:</span>\n                    <div class="operations-list">\n                        ${s.operations.map(s=>`\n                            <div class="operation-item">\n                                <span class="operation-type">${s.operation}</span>\n                                <span class="operation-timestamp">${this.formatTimestamp(s.timestamp)}</span>\n                            </div>\n                        `).join("")}\n                    </div>\n                </div>\n            `),a+="</div>",this.container.innerHTML=a}displayHook(s){let a=`\n            <div class="unified-viewer-header">\n                <h6>üîó Hook: ${s.event_type||s.subtype||"unknown"}</h6>\n                <span class="unified-viewer-timestamp">${this.formatTimestamp(s.timestamp)}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;a+=this.formatHookDetails(s),a+="</div>",this.container.innerHTML=a}displayGeneric(s){let a=`\n            <div class="unified-viewer-header">\n                <h6>üìä Data Details</h6>\n                ${s.timestamp?`<span class="unified-viewer-timestamp">${this.formatTimestamp(s.timestamp)}</span>`:""}\n            </div>\n            <div class="unified-viewer-content">\n        `;if("object"==typeof s&&null!==s){const n=["id","name","type","status","timestamp","text","content","message"];for(let t of n)if(void 0!==s[t]){let n=s[t];"string"==typeof n&&n.length>200&&(n=n.substring(0,200)+"..."),a+=`\n                        <div class="detail-row">\n                            <span class="detail-label">${t}:</span>\n                            <span class="detail-value">${this.escapeHtml(String(n))}</span>\n                        </div>\n                    `}}else a+=`<div class="simple-value">${this.escapeHtml(String(s))}</div>`;a+="</div>",this.container.innerHTML=a}formatEventType(s){return s.type&&s.subtype?s.type===s.subtype||"generic"===s.subtype?s.type:`${s.type}.${s.subtype}`:s.type?s.type:s.hook_event_name?s.hook_event_name:"unknown"}formatEventDetails(s){switch(s.data,s.type){case"hook":return this.formatHookDetails(s);case"agent":return this.formatAgentEventDetails(s);case"todo":return this.formatTodoEventDetails(s);case"session":return this.formatSessionEventDetails(s);default:return this.formatGenericEventDetails(s)}}formatHookDetails(s){const a=s.data||{},n=s.subtype||s.event_type||"unknown";let t=`\n            <div class="detail-row">\n                <span class="detail-label">Hook Type:</span>\n                <span class="detail-value">${n}</span>\n            </div>\n        `;switch(n){case"user_prompt":const s=a.prompt_text||a.prompt_preview||"";t+=`\n                    <div class="detail-row">\n                        <span class="detail-label">Prompt:</span>\n                        <div class="detail-value prompt-text">${this.escapeHtml(s)}</div>\n                    </div>\n                `;break;case"pre_tool":case"post_tool":t+=`\n                    <div class="detail-row">\n                        <span class="detail-label">Tool:</span>\n                        <span class="detail-value">${a.tool_name||"Unknown tool"}</span>\n                    </div>\n                `,a.operation_type&&(t+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Operation:</span>\n                            <span class="detail-value">${a.operation_type}</span>\n                        </div>\n                    `),"post_tool"===n&&a.duration_ms&&(t+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Duration:</span>\n                            <span class="detail-value">${a.duration_ms}ms</span>\n                        </div>\n                    `);break;case"subagent_start":case"subagent_stop":t+=`\n                    <div class="detail-row">\n                        <span class="detail-label">Agent:</span>\n                        <span class="detail-value">${a.agent_type||a.agent||"Unknown"}</span>\n                    </div>\n                `,"subagent_start"===n&&a.prompt&&(t+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Task:</span>\n                            <div class="detail-value">${this.escapeHtml(a.prompt)}</div>\n                        </div>\n                    `),"subagent_stop"===n&&a.reason&&(t+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Reason:</span>\n                            <span class="detail-value">${a.reason}</span>\n                        </div>\n                    `)}return t}formatAgentEventDetails(s){const a=s.data||{};let n="";return(a.agent_type||a.name)&&(n+=`\n                <div class="detail-row">\n                    <span class="detail-label">Agent Type:</span>\n                    <span class="detail-value">${a.agent_type||a.name}</span>\n                </div>\n            `),s.subtype&&(n+=`\n                <div class="detail-row">\n                    <span class="detail-label">Action:</span>\n                    <span class="detail-value">${s.subtype}</span>\n                </div>\n            `),n}formatTodoEventDetails(s){const a=s.data||{};let n="";if(a.todos&&Array.isArray(a.todos)){const s=this.getTodoStatusCounts(a.todos);n+=`\n                <div class="detail-row">\n                    <span class="detail-label">Todo Items:</span>\n                    <span class="detail-value">${a.todos.length} total</span>\n                </div>\n                <div class="detail-row">\n                    <span class="detail-label">Status:</span>\n                    <span class="detail-value">${s.completed} completed, ${s.in_progress} in progress</span>\n                </div>\n            `}return n}formatSessionEventDetails(s){const a=s.data||{};let n="";return a.session_id&&(n+=`\n                <div class="detail-row">\n                    <span class="detail-label">Session ID:</span>\n                    <span class="detail-value">${a.session_id}</span>\n                </div>\n            `),s.subtype&&(n+=`\n                <div class="detail-row">\n                    <span class="detail-label">Action:</span>\n                    <span class="detail-value">${s.subtype}</span>\n                </div>\n            `),n}formatGenericEventDetails(s){const a=s.data||{};let n="";const t=["message","description","value","result"];for(let e of t)if(void 0!==a[e]){let s=a[e];"string"==typeof s&&s.length>200&&(s=s.substring(0,200)+"..."),n+=`\n                    <div class="detail-row">\n                        <span class="detail-label">${e}:</span>\n                        <span class="detail-value">${this.escapeHtml(String(s))}</span>\n                    </div>\n                `}return n}formatEventData(s){const a=s.data;return a&&0!==Object.keys(a).length?`\n            <div class="detail-section">\n                <span class="detail-section-title">Event Data:</span>\n                <pre class="event-data-json">${this.escapeHtml(JSON.stringify(a,null,2))}</pre>\n            </div>\n        `:""}formatParameters(s,a="Parameters"){if(!s||0===Object.keys(s).length)return`\n                <div class="detail-section">\n                    <span class="detail-section-title">${a}:</span>\n                    <div class="no-params">No parameters</div>\n                </div>\n            `;const n=Object.keys(s);return`\n            <div class="detail-section">\n                <span class="detail-section-title">${a} (${n.length}):</span>\n                <div class="params-list">\n                    ${n.map(a=>{const n=s[a];return`\n                            <div class="param-item">\n                                <div class="param-key">${a}:</div>\n                                <div class="param-value">${this.formatParameterValue(n)}</div>\n                            </div>\n                        `}).join("")}\n                </div>\n            </div>\n        `}formatParameterValue(s){if("string"==typeof s)return s.length>500?`<pre class="param-text-long">${this.escapeHtml(s.substring(0,500)+"...\n\n[Content truncated - "+s.length+" total characters]")}</pre>`:s.length>100?`<pre class="param-text">${this.escapeHtml(s)}</pre>`:`<span class="param-text-short">${this.escapeHtml(s)}</span>`;if("object"!=typeof s||null===s)return`<span class="param-primitive">${this.escapeHtml(String(s))}</span>`;if(Array.isArray(s)&&s.length>0&&s[0].hasOwnProperty("content")&&s[0].hasOwnProperty("status"))return this.formatTodosAsParameter(s);try{return`<pre class="param-json">${this.escapeHtml(JSON.stringify(s,null,2))}</pre>`}catch(a){return'<span class="param-error">Error displaying object</span>'}}formatTodosAsParameter(s){const a=this.getTodoStatusCounts(s);let n=`\n            <div class="param-todos">\n                <div class="param-todos-header">\n                    Array of todo objects (${s.length} items)\n                </div>\n                <div class="param-todos-summary">\n                    ${a.completed} completed ‚Ä¢ ${a.in_progress} in progress ‚Ä¢ ${a.pending} pending\n                </div>\n                <div class="param-todos-list">\n        `;return s.forEach((s,a)=>{const t=this.getCheckboxIcon(s.status),e="in_progress"===s.status&&s.activeForm||s.content,i=this.formatStatusClass(s.status);n+=`\n                <div class="param-todo-item ${s.status}">\n                    <div class="param-todo-checkbox">\n                        <span class="param-checkbox-icon ${i}">${t}</span>\n                    </div>\n                    <div class="param-todo-text">\n                        <span class="param-todo-content">${this.escapeHtml(e)}</span>\n                        <span class="param-todo-status-badge ${i}">${s.status.replace("_"," ")}</span>\n                    </div>\n                </div>\n            `}),n+="\n                </div>\n            </div>\n        ",n}formatTimestamp(s){if(!s)return"Unknown time";try{const a=new Date(s);return isNaN(a.getTime())?"Invalid date":a.toLocaleString()}catch(a){return"Invalid date"}}formatStatus(s){if(!s)return"unknown";return{active:"üü¢ Active",completed:"‚úÖ Completed",in_progress:"üîÑ In Progress",pending:"‚è≥ Pending",error:"‚ùå Error",failed:"‚ùå Failed"}[s]||s}formatStatusClass(s){return`status-${s}`}getAgentIcon(s){return{PM:"üéØ",Engineer:"üîß","Engineer Agent":"üîß",Research:"üîç","Research Agent":"üîç",QA:"‚úÖ","QA Agent":"‚úÖ",Architect:"üèóÔ∏è","Architect Agent":"üèóÔ∏è",Ops:"‚öôÔ∏è","Ops Agent":"‚öôÔ∏è"}[s]||"ü§ñ"}getToolIcon(s){return{Read:"üëÅÔ∏è",Write:"‚úçÔ∏è",Edit:"‚úèÔ∏è",MultiEdit:"üìù",Bash:"üíª",Grep:"üîç",Glob:"üìÇ",LS:"üìÅ",TodoWrite:"üìù",Task:"üìã",WebFetch:"üåê"}[s]||"üîß"}getCheckboxIcon(s){return{pending:"‚è≥",in_progress:"üîÑ",completed:"‚úÖ"}[s]||"‚ùì"}getTodoStatusCounts(s){const a={completed:0,in_progress:0,pending:0};return s.forEach(s=>{a.hasOwnProperty(s.status)&&a[s.status]++}),a}escapeHtml(s){if("string"!=typeof s)return"";const a=document.createElement("div");return a.textContent=s,a.innerHTML}createCollapsibleJSON(s,a="Full Details"){const n=`json-details-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,t=this.cleanDataForDisplay(s);return`\n            <div class="collapsible-json-section">\n                <button class="collapsible-json-toggle" onclick="\n                    const content = document.getElementById('${n}');\n                    const button = this;\n                    if (content.style.display === 'none' || content.style.display === '') {\n                        content.style.display = 'block';\n                        button.classList.add('expanded');\n                        button.innerHTML = '‚ñº ${a}';\n                    } else {\n                        content.style.display = 'none';\n                        button.classList.remove('expanded');\n                        button.innerHTML = '‚ñ∂ ${a}';\n                    }\n                ">‚ñ∂ ${a}</button>\n                <div id="${n}" class="collapsible-json-content" style="display: none;">\n                    <pre class="json-viewer">${this.escapeHtml(JSON.stringify(t,null,2))}</pre>\n                </div>\n            </div>\n        `}cleanDataForDisplay(s){const a=new WeakSet;return JSON.parse(JSON.stringify(s,(s,n)=>{if("object"==typeof n&&null!==n){if(a.has(n))return"[Circular Reference]";a.add(n)}return"string"==typeof n&&n.length>1e3?n.substring(0,1e3)+"... [truncated]":"function"==typeof n?"[Function]":n}))}clear(){this.container&&(this.container.innerHTML=""),this.currentData=null,this.currentType=null}getCurrentData(){return this.currentData}getCurrentType(){return this.currentType}hasData(){return null!==this.currentData}}window.UnifiedDataViewer=s;export{s as U};
//# sourceMappingURL=unified-data-viewer.CvAmgM3l.js.map
