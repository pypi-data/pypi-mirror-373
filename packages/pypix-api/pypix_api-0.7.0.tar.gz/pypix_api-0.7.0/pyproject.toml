[project]
name = "pypix-api"
version = "0.7.0"
description = "Biblioteca em Python para comunicação com APIs bancárias focada na integração com o PIX"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Fábio Thomaz", email = "fabio@ladder.dev.br" }
]
license = "MIT"
keywords = ["pix", "api", "banco", "pagamento", "brasil"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "requests>=2.25.1",
    "python-dotenv>=0.15.0",
    "requests-pkcs12>=1.25",
    "ruff>=0.12.0",
]

[project.urls]
Homepage = "https://github.com/laddertech/pypix-api"
Repository = "https://github.com/laddertech/pypix-api"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.6.1",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-html>=3.1.0",
    "pytest-benchmark>=4.0.0",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    "pre-commit>=3.7.0",
    "mypy>=1.9.0",
    "bandit[toml]>=1.7.8",
    "types-requests>=2.31.0",
    "tox>=4.0.0",
    "tox-gh-actions>=3.1.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "linkify-it-py>=2.0.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
exclude = ["coverage_html*", "htmlcov*", "tests*", "scripts*", "docs*"]

[tool.ruff]
# Configurações base do Ruff
line-length = 88
exclude = [
    ".venv",
    "build",
    "dist",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # Line too long (handled by formatter)
    "S101", # Use of assert (common in tests)
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
]

# Per-directory ignore patterns
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S105", "S106", "S108", "S311", "ANN002", "ANN003"]
"examples/*" = ["S105", "S106", "S108", "S311", "C901", "ANN002", "ANN003"]
"scripts/*" = ["S105", "S106", "S108", "S311", "S603", "ANN002", "ANN003"]

# Configurações específicas
[tool.ruff.lint.isort]
known-first-party = ["pypix_api"]

[tool.ruff.format]
quote-style = "single"

[tool.mypy]
python_version = "3.10"
# Configuração mais permissiva para início gradual
warn_return_any = false  # Desabilitado temporariamente
warn_unused_configs = false
disallow_untyped_defs = false  # Não exige type hints em todas as funções
disallow_any_unimported = false
no_implicit_optional = false  # Mais permissivo com Optional
check_untyped_defs = false  # Não verifica funções sem tipos
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
follow_imports = "skip"  # Pula imports para acelerar
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = false  # Menos verboso
# Adiciona suporte para namespace packages
namespace_packages = true
explicit_package_bases = true
# Ignora erros de atributos em mixins
disable_error_code = ["attr-defined", "no-any-return", "has-type"]

# Ignora erros em arquivos específicos que são difíceis de tipar
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "scripts.*"
ignore_errors = true

# Bibliotecas externas sem stubs
[[tool.mypy.overrides]]
module = [
    "requests_pkcs12",
    "dotenv",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "scripts", ".venv", "build", "dist"]
severity = "medium"
confidence = "medium"
skips = ["B101"]  # Skip assert_used test

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "-v",
    "--cov=pypix_api",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=44",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "mock: marks tests as mock tests (default for unit tests)",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow running tests",
    "benchmark: marks tests as benchmark performance tests",
]

[tool.coverage.run]
source = ["pypix_api"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/scripts/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
skip_covered = false

[tool.coverage.html]
directory = "coverage_html"
title = "pypix-api Coverage Report"

[dependency-groups]
dev = [
    "doc8>=2.0.0",
]
