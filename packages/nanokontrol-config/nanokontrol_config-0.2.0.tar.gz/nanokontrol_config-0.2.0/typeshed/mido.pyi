#!/usr/bin/env python3
from collections.abc import Sequence
from contextlib import ContextManager

class Message:
    type: str
    data: Sequence[int]
    def __init__(self, msg_type: str, data: Sequence[int]) -> None: ...

class Input(ContextManager):
    def receive(self, block: bool) -> Message: ...

class Output(ContextManager):
    def send(self, Message) -> None: ...

class ports:
    @staticmethod
    def sleep() -> None: ...
    @staticmethod
    def set_sleep_time(seconds: float) -> None: ...

def get_ioport_names() -> Sequence[str]: ...
def get_input_names() -> Sequence[str]: ...
def get_output_names() -> Sequence[str]: ...
def open_input(name: str) -> Input: ...
def open_output(name: str) -> Output: ...
