# {{project_name}}

基于整洁架构的事件驱动微服务

## 🚀 快速开始

### 前置要求
- Go 1.21+
- Docker & Docker Compose
- PostgreSQL
- NATS (消息队列)

### 项目结构
```
{{project_name}}/
├── cmd/
│   └── server/
│       └── main.go          # 应用入口
├── internal/
│   ├── domain/              # 领域层
│   │   ├── aggregate/       # 聚合根
│   │   ├── event/          # 领域事件
│   │   ├── repository/     # 仓储接口
│   │   └── projection/     # 投影接口
│   ├── usecase/            # 用例层
│   │   ├── command/        # 命令用例
│   │   └── query/          # 查询用例
│   ├── adapter/            # 适配器层
│   │   ├── http/          # HTTP处理器
│   │   └── grpc/          # gRPC服务
│   └── infrastructure/     # 基础设施层
│       ├── eventstore/     # 事件存储
│       ├── projection/     # 投影实现
│       └── config/         # 配置管理
├── api/
│   └── proto/              # gRPC proto文件
├── migrations/             # 数据库迁移
├── configs/
│   └── config.yaml         # 配置文件
├── docker-compose.yml      # 基础设施服务
├── Makefile               # 构建脚本
└── README.md              # 项目文档
```

## 📦 安装与运行

### 本地开发
```bash
# 安装依赖
make deps

# 运行应用
make run
```

### Docker部署
```bash
# 构建镜像
make docker-build

# 启动服务
make docker-run
```

## 🔧 开发

### 生成代码
```bash
# 从proto生成代码
make proto

# 数据库迁移
make migrate-up

# 运行测试
make test
```

### 日志查看
```bash
# 查看应用日志
make logs

# 查看错误日志
make logs-error

# 实时日志
make logs-tail
```

## 🌐 API接口

### HTTP RESTful API
- `POST /api/v1/{{name}}` - 创建{{name}}
- `PUT /api/v1/{{name}}` - 更新{{name}}
- `GET /api/v1/{{name}}` - 获取{{name}}
- `GET /api/v1/{{name}}/list` - 列表{{name}}

### gRPC API
- 端口: `50051`
- 查看 `api/proto/{{name}}.proto` 获取详细定义

## ⚙️ 配置

配置文件位于 `configs/config.yaml`:

```yaml
server:
  port: 8080      # HTTP端口
  grpc_port: 50051  # gRPC端口

database:
  host: localhost
  port: 5432
  user: postgres
  password: postgres
  dbname: {{project_name}}

nats:
  url: nats://localhost:4222
  cluster_id: test-cluster
```

## 🧪 测试

```bash
# 运行所有测试
make test

# 代码格式化
make fmt

# 代码检查
make lint
```

## 📊 监控

- 健康检查: `http://localhost:8080/health`
- 指标: `http://localhost:8080/metrics`

## 🚀 技术栈

- **框架**: Gin (HTTP), gRPC-Go (gRPC)
- **数据库**: PostgreSQL + GORM
- **消息队列**: NATS Streaming
- **事件溯源**: 自定义实现
- **配置**: Viper
- **日志**: Zap
- **容器**: Docker & Docker Compose

## 📝 开发

### 添加新聚合
1. 在配置文件中定义聚合结构
2. 运行代码生成器
3. 实现业务逻辑
4. 添加测试

### 事件处理
- 领域事件自动发布到NATS
- 支持事件重放和快照
- 投影自动更新

## 🤝 贡献

1. Fork项目
2. 创建功能分支
3. 提交更改
4. 创建Pull Request

## 📄 许可证

MIT License