package aggregate

import (
    "time"
    "{{project}}/internal/domain/event"
)

// {{Name}} 聚合根
type {{Name}} struct {
    ID        string    `json:"id"`
    {{fields}}
    Version   int       `json:"version"`
    CreatedAt time.Time `json:"created_at"`
    UpdatedAt time.Time `json:"updated_at"`
    DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// New{{Name}} 创建新的{{name}}
func New{{Name}}(id string, {{params}}) *{{Name}} {
    return &{{Name}}{
        ID:        id,
        {{field_assigns}}
        Version:   0,
        CreatedAt: time.Now(),
        UpdatedAt: time.Now(),
    }
}

// ApplyEvent 应用事件
func (a *{{Name}}) ApplyEvent(event interface{}) error {
    switch e := event.(type) {
    case *event.{{Name}}CreatedEvent:
        return a.apply{{Name}}CreatedEvent(e)
    case *event.{{Name}}UpdatedEvent:
        return a.apply{{Name}}UpdatedEvent(e)
    case *event.{{Name}}DeletedEvent:
        return a.apply{{Name}}DeletedEvent(e)
    default:
        return nil
    }
}

// apply{{Name}}CreatedEvent 应用创建事件
func (a *{{Name}}) apply{{Name}}CreatedEvent(e *event.{{Name}}CreatedEvent) error {
    a.ID = e.ID
    {{apply_fields}}
    a.Version = 0
    a.CreatedAt = e.Timestamp
    a.UpdatedAt = e.Timestamp
    return nil
}

// apply{{Name}}UpdatedEvent 应用更新事件
func (a *{{Name}}) apply{{Name}}UpdatedEvent(e *event.{{Name}}UpdatedEvent) error {
    {{update_fields}}
    a.Version++
    a.UpdatedAt = e.Timestamp
    return nil
}

// apply{{Name}}DeletedEvent 应用删除事件
func (a *{{Name}}) apply{{Name}}DeletedEvent(e *event.{{Name}}DeletedEvent) error {
    // 标记为已删除，实际删除由仓储处理
    a.UpdatedAt = e.Timestamp
    return nil
}