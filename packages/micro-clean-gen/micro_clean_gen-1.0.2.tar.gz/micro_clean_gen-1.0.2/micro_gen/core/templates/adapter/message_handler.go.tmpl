package message

import (
	"context"
	"encoding/json"
	"fmt"
	
	"{{project}}/internal/usecase/event"
	"{{project}}/internal/domain/event"
)

// EventHandler 事件消息处理器
type EventHandler struct {
	{{name}}CreatedHandler *event.{{Name}}CreatedHandler
	{{name}}UpdatedHandler *event.{{Name}}UpdatedHandler
	{{name}}DeletedHandler *event.{{Name}}DeletedHandler
}

// NewEventHandler 创建处理器实例
func NewEventHandler(
	created *event.{{Name}}CreatedHandler,
	updated *event.{{Name}}UpdatedHandler,
	deleted *event.{{Name}}DeletedHandler,
) *EventHandler {
	return &EventHandler{
		{{name}}CreatedHandler: created,
		{{name}}UpdatedHandler: updated,
		{{name}}DeletedHandler: deleted,
	}
}

// HandleMessage 处理消息
func (h *EventHandler) HandleMessage(ctx context.Context, topic string, message []byte) error {
	switch topic {
	case "{{name}}.created":
		return h.handle{{Name}}Created(ctx, message)
	case "{{name}}.updated":
		return h.handle{{Name}}Updated(ctx, message)
	case "{{name}}.deleted":
		return h.handle{{Name}}Deleted(ctx, message)
	default:
		return fmt.Errorf("unknown topic: %s", topic)
	}
}

func (h *EventHandler) handle{{Name}}Created(ctx context.Context, message []byte) error {
	var evt event.{{Name}}Created
	if err := json.Unmarshal(message, &evt); err != nil {
		return fmt.Errorf("failed to unmarshal event: %w", err)
	}
	
	return h.{{name}}CreatedHandler.Handle(ctx, &evt)
}

func (h *EventHandler) handle{{Name}}Updated(ctx context.Context, message []byte) error {
	var evt event.{{Name}}Updated
	if err := json.Unmarshal(message, &evt); err != nil {
		return fmt.Errorf("failed to unmarshal event: %w", err)
	}
	
	return h.{{name}}UpdatedHandler.Handle(ctx, &evt)
}

func (h *EventHandler) handle{{Name}}Deleted(ctx context.Context, message []byte) error {
	var evt event.{{Name}}Deleted
	if err := json.Unmarshal(message, &evt); err != nil {
		return fmt.Errorf("failed to unmarshal event: %w", err)
	}
	
	return h.{{name}}DeletedHandler.Handle(ctx, &evt)
}