package query

import (
    "context"
    "fmt"
    
    "{{project}}/internal/domain/projection"
)

// List{{Name}}Query 列表{{name}}查询
type List{{Name}}Query struct {
    Limit  int
    Offset int
}

// List{{Name}}Handler 列表{{name}}处理器
type List{{Name}}Handler struct {
    projection projection.{{Name}}Projection
}

// NewList{{Name}}Handler 创建处理器实例
func NewList{{Name}}Handler(proj projection.{{Name}}Projection) *List{{Name}}Handler {
    return &List{{Name}}Handler{
        projection: proj,
    }
}

// Handle 处理列表{{name}}查询
func (h *List{{Name}}Handler) Handle(ctx context.Context, query List{{Name}}Query) (*List{{Name}}Response, error) {
    // 从投影查询数据
    results, err := h.projection.GetAll(ctx)
    if err != nil {
        return nil, fmt.Errorf("failed to list %s: %w", {{name}}s, err)
    }
    
    // 应用分页
    start := query.Offset
    if start >= len(results) {
        return &List{{Name}}Response{Data: []*{{Name}}ProjectionModel{}}, nil
    }
    
    end := start + query.Limit
    if end > len(results) {
        end = len(results)
    }
    
    return &List{{Name}}Response{
        Data: results[start:end],
    }, nil
}

// List{{Name}}Response 列表查询响应
type List{{Name}}Response struct {
    Data []*{{Name}}ProjectionModel `json:"data"`
}