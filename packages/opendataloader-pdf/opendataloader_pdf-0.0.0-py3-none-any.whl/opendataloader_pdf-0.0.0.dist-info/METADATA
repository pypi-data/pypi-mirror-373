Metadata-Version: 2.4
Name: opendataloader-pdf
Version: 0.0.0
Summary: A Python wrapper for the opendataloader-pdf Java CLI.
Home-page: https://github.com/opendataloader-project/opendataloader-pdf
Author: opendataloader-project
Author-email: open.dataloader@hancom.com
License: MPL-2.0
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: requires-python
Dynamic: summary

# Opendataloader PDF Python Wrapper

This package is a Python wrapper for the `opendataloader-pdf` Java command-line tool.

It allows you to process PDF files and convert them to JSON or Markdown format directly from Python.

## Prerequisites

- Java 11 or higher must be installed and available in your system's PATH.

## Installation

```bash
pip install opendataloader-pdf
```

## Usage

Here is a basic example of how to use the wrapper:

```python
import opendataloader_pdf
import json

try:
    # Process a PDF and get the structured JSON output from stdout
    json_output_str = opendataloader_pdf.run(input_path="path/to/your/document.pdf")

    # The output is a JSON string, so you can parse it
    if json_output_str:
        data = json.loads(json_output_str)
        print(f"Successfully processed {data['file name']}.")

    # Example: Generate Markdown and annotated PDF in a specific folder
    opendataloader_pdf.run(
        input_path="path/to/your/document.pdf",
        output_folder="path/to/output",
        generate_markdown=True,
        generate_pdf=True,
        keep_line_breaks=True
    )
    print("Successfully generated Markdown and annotated PDF.")

except FileNotFoundError:
    print("Error: Input file not found or Java is not installed correctly.")
except Exception as e:
    print(f"An error occurred: {e}")
```

## Function: `run()`

The main function to process PDFs.

### Parameters

- `input_path` (str): Path to the input PDF file or folder. **(Required)**
- `output_folder` (str, optional): Path to the output folder. Defaults to the input folder.
- `password` (str, optional): Password for the PDF file.
- `generate_markdown` (bool, optional): If `True`, generates a Markdown output file. Defaults to `False`.
- `generate_pdf` (bool, optional): If `True`, generates an annotated PDF output file. Defaults to `False`.
- `keep_line_breaks` (bool, optional): If `True`, keeps line breaks in the output. Defaults to `False`.
- `find_hidden_text` (bool, optional): If `True`, finds hidden text in the PDF. Defaults to `False`.
- `html_in_markdown` (bool, optional): If `True`, uses HTML in the Markdown output. Defaults to `False`.
- `add_image_to_markdown` (bool, optional): If `True`, adds images to the Markdown output. Defaults to `False`.
- `debug` (bool, optional): If `True`, prints all messages from the CLI to the console during execution. Defaults to `False`.

### Returns

- `str`: The standard output from the CLI tool. When processing a single file without other output formats specified, this will be the JSON content. When `debug=True`, this will be the combined stdout and stderr from the CLI tool.
