# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from ZTData.generated import datasource_pb2 as datasource__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in datasource_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ZtDataStub(object):
    """数据源统一服务接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTable = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/CreateTable',
                request_serializer=datasource__pb2.CreateTableRequest.SerializeToString,
                response_deserializer=datasource__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.DeleteTable = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/DeleteTable',
                request_serializer=datasource__pb2.DeleteTableRequest.SerializeToString,
                response_deserializer=datasource__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetTableInfo = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/GetTableInfo',
                request_serializer=datasource__pb2.GetTableInfoRequest.SerializeToString,
                response_deserializer=datasource__pb2.TableInfoReply.FromString,
                _registered_method=True)
        self.InsertOne = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/InsertOne',
                request_serializer=datasource__pb2.InfoRequest.SerializeToString,
                response_deserializer=datasource__pb2.InfoResponse.FromString,
                _registered_method=True)
        self.InsertMany = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/InsertMany',
                request_serializer=datasource__pb2.InsertManyRequest.SerializeToString,
                response_deserializer=datasource__pb2.InsertManyResponse.FromString,
                _registered_method=True)
        self.DeleteData = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/DeleteData',
                request_serializer=datasource__pb2.DeleteRequest.SerializeToString,
                response_deserializer=datasource__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.UpdateData = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/UpdateData',
                request_serializer=datasource__pb2.UpdateRequest.SerializeToString,
                response_deserializer=datasource__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.FindOne = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/FindOne',
                request_serializer=datasource__pb2.QueryCondition.SerializeToString,
                response_deserializer=datasource__pb2.ListResponse.FromString,
                _registered_method=True)
        self.FindMany = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/FindMany',
                request_serializer=datasource__pb2.PaginationRequest.SerializeToString,
                response_deserializer=datasource__pb2.PaginationResponse.FromString,
                _registered_method=True)
        self.ExecuteSQL = channel.unary_unary(
                '/api.ztData.service.v1.ZtData/ExecuteSQL',
                request_serializer=datasource__pb2.SQLRequest.SerializeToString,
                response_deserializer=datasource__pb2.SQLResponse.FromString,
                _registered_method=True)


class ZtDataServicer(object):
    """数据源统一服务接口
    """

    def CreateTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTableInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteSQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ZtDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTable': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTable,
                    request_deserializer=datasource__pb2.CreateTableRequest.FromString,
                    response_serializer=datasource__pb2.StatusResponse.SerializeToString,
            ),
            'DeleteTable': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTable,
                    request_deserializer=datasource__pb2.DeleteTableRequest.FromString,
                    response_serializer=datasource__pb2.StatusResponse.SerializeToString,
            ),
            'GetTableInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTableInfo,
                    request_deserializer=datasource__pb2.GetTableInfoRequest.FromString,
                    response_serializer=datasource__pb2.TableInfoReply.SerializeToString,
            ),
            'InsertOne': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertOne,
                    request_deserializer=datasource__pb2.InfoRequest.FromString,
                    response_serializer=datasource__pb2.InfoResponse.SerializeToString,
            ),
            'InsertMany': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertMany,
                    request_deserializer=datasource__pb2.InsertManyRequest.FromString,
                    response_serializer=datasource__pb2.InsertManyResponse.SerializeToString,
            ),
            'DeleteData': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteData,
                    request_deserializer=datasource__pb2.DeleteRequest.FromString,
                    response_serializer=datasource__pb2.StatusResponse.SerializeToString,
            ),
            'UpdateData': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateData,
                    request_deserializer=datasource__pb2.UpdateRequest.FromString,
                    response_serializer=datasource__pb2.StatusResponse.SerializeToString,
            ),
            'FindOne': grpc.unary_unary_rpc_method_handler(
                    servicer.FindOne,
                    request_deserializer=datasource__pb2.QueryCondition.FromString,
                    response_serializer=datasource__pb2.ListResponse.SerializeToString,
            ),
            'FindMany': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMany,
                    request_deserializer=datasource__pb2.PaginationRequest.FromString,
                    response_serializer=datasource__pb2.PaginationResponse.SerializeToString,
            ),
            'ExecuteSQL': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteSQL,
                    request_deserializer=datasource__pb2.SQLRequest.FromString,
                    response_serializer=datasource__pb2.SQLResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.ztData.service.v1.ZtData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('api.ztData.service.v1.ZtData', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ZtData(object):
    """数据源统一服务接口
    """

    @staticmethod
    def CreateTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/CreateTable',
            datasource__pb2.CreateTableRequest.SerializeToString,
            datasource__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/DeleteTable',
            datasource__pb2.DeleteTableRequest.SerializeToString,
            datasource__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTableInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/GetTableInfo',
            datasource__pb2.GetTableInfoRequest.SerializeToString,
            datasource__pb2.TableInfoReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/InsertOne',
            datasource__pb2.InfoRequest.SerializeToString,
            datasource__pb2.InfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/InsertMany',
            datasource__pb2.InsertManyRequest.SerializeToString,
            datasource__pb2.InsertManyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/DeleteData',
            datasource__pb2.DeleteRequest.SerializeToString,
            datasource__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/UpdateData',
            datasource__pb2.UpdateRequest.SerializeToString,
            datasource__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/FindOne',
            datasource__pb2.QueryCondition.SerializeToString,
            datasource__pb2.ListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/FindMany',
            datasource__pb2.PaginationRequest.SerializeToString,
            datasource__pb2.PaginationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteSQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.ztData.service.v1.ZtData/ExecuteSQL',
            datasource__pb2.SQLRequest.SerializeToString,
            datasource__pb2.SQLResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
