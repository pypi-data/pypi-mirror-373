# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from fireblocks.models.swap_provider_protocols_enum import SwapProviderProtocolsEnum
from typing import Optional, Set
from typing_extensions import Self

class QuoteRequest(BaseModel):
    """
    QuoteRequest
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The id of the vault account or account id", alias="accountId")
    input_amount: StrictStr = Field(description="The amount of tokens the swapper will provide, positive number, can be a decimal.", alias="inputAmount")
    input_asset: StrictStr = Field(description="The id of the asset the swapper will provide", alias="inputAsset")
    output_asset: StrictStr = Field(description="The id of the asset the swapper will receive", alias="outputAsset")
    slippage_tolerance: Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(description="The slippage tolerance is a percentage. The slippage tolerance is the maximum amount the price can change between the time the transaction is submitted and the time it is executed", alias="slippageTolerance")
    protocol: SwapProviderProtocolsEnum
    __properties: ClassVar[List[str]] = ["accountId", "inputAmount", "inputAsset", "outputAsset", "slippageTolerance", "protocol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "inputAmount": obj.get("inputAmount"),
            "inputAsset": obj.get("inputAsset"),
            "outputAsset": obj.get("outputAsset"),
            "slippageTolerance": obj.get("slippageTolerance"),
            "protocol": obj.get("protocol")
        })
        return _obj


