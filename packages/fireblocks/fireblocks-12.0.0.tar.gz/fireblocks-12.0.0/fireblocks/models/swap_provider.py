# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.provider_category_enum import ProviderCategoryEnum
from fireblocks.models.swap_provider_protocols_enum import SwapProviderProtocolsEnum
from typing import Optional, Set
from typing_extensions import Self

class SwapProvider(BaseModel):
    """
    SwapProvider
    """ # noqa: E501
    id: StrictStr = Field(description="The uuid that identifies the provider")
    name: StrictStr = Field(description="Name of the provider")
    protocols: List[SwapProviderProtocolsEnum] = Field(description="List of supported protocols. Protocols are specific per provider")
    category: ProviderCategoryEnum
    is_terms_approval_required: StrictBool = Field(description="Indicates whether the terms of service are required for the provider. if `true`, the user must approve the terms of service before using the provider. otherwise, `termsOfServiceUrl` and `isTermsOfServiceApproved` are not shown under the provider data.", alias="isTermsApprovalRequired")
    terms_of_service_url: Optional[StrictStr] = Field(default=None, description="URL to the terms of service", alias="termsOfServiceUrl")
    is_terms_of_service_approved: Optional[StrictBool] = Field(default=None, description="Indicates whether the terms of service are approved by the user", alias="isTermsOfServiceApproved")
    __properties: ClassVar[List[str]] = ["id", "name", "protocols", "category", "isTermsApprovalRequired", "termsOfServiceUrl", "isTermsOfServiceApproved"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SwapProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SwapProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "protocols": obj.get("protocols"),
            "category": obj.get("category"),
            "isTermsApprovalRequired": obj.get("isTermsApprovalRequired"),
            "termsOfServiceUrl": obj.get("termsOfServiceUrl"),
            "isTermsOfServiceApproved": obj.get("isTermsOfServiceApproved")
        })
        return _obj


