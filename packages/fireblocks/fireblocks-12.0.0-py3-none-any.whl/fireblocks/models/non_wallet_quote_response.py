# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from fireblocks.models.non_wallet_quote_fee import NonWalletQuoteFee
from fireblocks.models.provider_additional_data import ProviderAdditionalData
from fireblocks.models.swap_provider_protocols_enum import SwapProviderProtocolsEnum
from typing import Optional, Set
from typing_extensions import Self

class NonWalletQuoteResponse(BaseModel):
    """
    Return a quote that cannot be used for a swap operation.
    """ # noqa: E501
    protocol: SwapProviderProtocolsEnum
    input_amount: StrictStr = Field(description="The amount of tokens the swapper will provide", alias="inputAmount")
    input_asset: StrictStr = Field(description="The id of the asset the swapper will provide", alias="inputAsset")
    slippage_tolerance: Union[StrictFloat, StrictInt] = Field(description="The slippage tolerance is a percentage. The slippage tolerance is the maximum amount the price can change between the time the transaction is submitted and the time it is executed", alias="slippageTolerance")
    output_min_amount: StrictStr = Field(description="The minimum amount of tokens the swapper will receive", alias="outputMinAmount")
    output_max_amount: StrictStr = Field(description="Maximum amount of tokens that the swapper will receive", alias="outputMaxAmount")
    output_asset: StrictStr = Field(description="The id of the asset the swapper will receive", alias="outputAsset")
    additional_data: ProviderAdditionalData = Field(alias="additionalData")
    estimated_fees: NonWalletQuoteFee = Field(alias="estimatedFees")
    __properties: ClassVar[List[str]] = ["protocol", "inputAmount", "inputAsset", "slippageTolerance", "outputMinAmount", "outputMaxAmount", "outputAsset", "additionalData", "estimatedFees"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NonWalletQuoteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_data
        if self.additional_data:
            _dict['additionalData'] = self.additional_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of estimated_fees
        if self.estimated_fees:
            _dict['estimatedFees'] = self.estimated_fees.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NonWalletQuoteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "protocol": obj.get("protocol"),
            "inputAmount": obj.get("inputAmount"),
            "inputAsset": obj.get("inputAsset"),
            "slippageTolerance": obj.get("slippageTolerance"),
            "outputMinAmount": obj.get("outputMinAmount"),
            "outputMaxAmount": obj.get("outputMaxAmount"),
            "outputAsset": obj.get("outputAsset"),
            "additionalData": ProviderAdditionalData.from_dict(obj["additionalData"]) if obj.get("additionalData") is not None else None,
            "estimatedFees": NonWalletQuoteFee.from_dict(obj["estimatedFees"]) if obj.get("estimatedFees") is not None else None
        })
        return _obj


