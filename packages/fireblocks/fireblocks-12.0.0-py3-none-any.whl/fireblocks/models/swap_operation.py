# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from fireblocks.models.provider_category_enum import ProviderCategoryEnum
from fireblocks.models.swap_flow_error import SwapFlowError
from fireblocks.models.swap_provider_protocols_enum import SwapProviderProtocolsEnum
from fireblocks.models.swap_required_action import SwapRequiredAction
from typing import Optional, Set
from typing_extensions import Self

class SwapOperation(BaseModel):
    """
    SwapOperation
    """ # noqa: E501
    id: StrictStr = Field(description="The id of the swap operation")
    account_id: StrictStr = Field(description="The id of the vault account or account id", alias="accountId")
    provider_id: StrictStr = Field(description="The uuid that identifies the provider", alias="providerId")
    category: ProviderCategoryEnum
    protocol: SwapProviderProtocolsEnum
    status: StrictStr = Field(description="**CREATED** – The swap request has been created but not yet started. **PENDING_USER_ACTION** – Awaiting a user action (e.g. signature or approval). **PENDING_PROVIDER_ACTION** – Awaiting the provider to process the request. **PROCESSING** – The swap is actively being executed on‐chain. **COMPLETED** – The swap has finished successfully. **CANCELED** – The swap was cancelled by user or provider before completion. **FAILED** – The swap attempted but encountered an error.")
    input_amount: StrictStr = Field(description="The amount of tokens the swapper will provide", alias="inputAmount")
    input_asset: StrictStr = Field(description="The id of the asset the swapper will provide", alias="inputAsset")
    slippage_tolerance: Union[StrictFloat, StrictInt] = Field(description="The slippage tolerance is a percentage. The slippage tolerance is the maximum amount the price can change between the time the transaction is submitted and the time it is executed", alias="slippageTolerance")
    output_min_amount: StrictStr = Field(description="The minimum amount of tokens the swapper will receive", alias="outputMinAmount")
    output_max_amount: StrictStr = Field(description="Maximum amount of tokens that the swapper will receive", alias="outputMaxAmount")
    output_asset: StrictStr = Field(description="The id of the asset the swapper will receive", alias="outputAsset")
    output_final_amount: Optional[StrictStr] = Field(default=None, description="Final amount of tokens that the swapper will receive", alias="outputFinalAmount")
    required_actions: List[SwapRequiredAction] = Field(description="The required actions for the swap, including the type of action, the status of the action, and the transaction id", alias="requiredActions")
    error: Optional[SwapFlowError] = None
    created_at: datetime = Field(description="The creation time of the swap operation (ISO Date time).", alias="createdAt")
    updated_at: datetime = Field(description="The last update time of the swap operation (ISO Date time).", alias="updatedAt")
    created_by: StrictStr = Field(description="Fireblocks user id that issued the swap", alias="createdBy")
    __properties: ClassVar[List[str]] = ["id", "accountId", "providerId", "category", "protocol", "status", "inputAmount", "inputAsset", "slippageTolerance", "outputMinAmount", "outputMaxAmount", "outputAsset", "outputFinalAmount", "requiredActions", "error", "createdAt", "updatedAt", "createdBy"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CREATED', 'TRANSACTION_IN_PROGRESS', 'PENDING_PROVIDER_ACTION', 'COMPLETED', 'CANCELED', 'FAILED']):
            raise ValueError("must be one of enum values ('CREATED', 'TRANSACTION_IN_PROGRESS', 'PENDING_PROVIDER_ACTION', 'COMPLETED', 'CANCELED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SwapOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in required_actions (list)
        _items = []
        if self.required_actions:
            for _item_required_actions in self.required_actions:
                if _item_required_actions:
                    _items.append(_item_required_actions.to_dict())
            _dict['requiredActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # set to None if output_final_amount (nullable) is None
        # and model_fields_set contains the field
        if self.output_final_amount is None and "output_final_amount" in self.model_fields_set:
            _dict['outputFinalAmount'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SwapOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "accountId": obj.get("accountId"),
            "providerId": obj.get("providerId"),
            "category": obj.get("category"),
            "protocol": obj.get("protocol"),
            "status": obj.get("status"),
            "inputAmount": obj.get("inputAmount"),
            "inputAsset": obj.get("inputAsset"),
            "slippageTolerance": obj.get("slippageTolerance"),
            "outputMinAmount": obj.get("outputMinAmount"),
            "outputMaxAmount": obj.get("outputMaxAmount"),
            "outputAsset": obj.get("outputAsset"),
            "outputFinalAmount": obj.get("outputFinalAmount"),
            "requiredActions": [SwapRequiredAction.from_dict(_item) for _item in obj["requiredActions"]] if obj.get("requiredActions") is not None else None,
            "error": SwapFlowError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "createdBy": obj.get("createdBy")
        })
        return _obj


