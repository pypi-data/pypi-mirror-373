[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pan-omic-consciousness-engine"
version = "1.0.0-alpha"
description = "Pan-Omics Consciousness Engine - A computational framework for modeling consciousness emergence"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Krishna Bajpai", email = "krishna@krishna.me"},
    {name = "Veddanshi Gupta", email = "krishna@krishna.me"}
]
maintainers = [
    {name = "Krishna Bajpai", email = "krishna@krishna.me"},
    {name = "Veddanshi Gupta", email = "krishna@krishna.me"}
]
keywords = ["bioinformatics", "omics", "consciousness", "digital-twin", "quantum", "entropy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "pandas>=2.0.0",
    "networkx>=3.1",
    "torch>=2.0.0",
    "torch-geometric>=2.3.0",
    "pydantic>=2.0.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "scikit-learn>=1.3.0",
    "biopython>=1.81",
    "h5py>=3.9.0",
    "zarr>=2.16.0",
    "tensorboard>=2.13.0",
    "wandb>=0.15.0",
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
]
quantum = [
    "qiskit>=0.44.0",
    "cirq>=1.2.0",
    "pennylane>=0.32.0",
]

[project.urls]
Homepage = "https://github.com/krish567366/pan-omic"
Documentation = "https://krish567366.github.io/pan-omic/"
Repository = "https://github.com/krish567366/pan-omic"
"Bug Tracker" = "https://github.com/krish567366/pan-omic/issues"

[project.scripts]
pan-omic-ce = "pce.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
pce = ["data/*.json", "data/*.csv", "data/*.h5"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "torch_geometric.*",
    "networkx.*",
    "scipy.*",
    "sklearn.*",
    "Bio.*",
    "zarr.*",
    "wandb.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/pce",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=85",
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/pce"]
omit = [
    "tests/*",
    "src/pce/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
