[project.urls]
  documentation = "https://typed-sentinels.blockmage.dev"
  repository    = "https://github.com/blockmage/typed_sentinels"

[project]
  description     = "Statically-typed sentinel objects with singleton qualities."
  name            = "typed-sentinels"
  readme          = "README.md"
  requires-python = ">=3.9"
  version         = "1.1.0"

  authors = [
    { email = "opensource+typed-sentinels@blockmage.dev", name = "Blockmage Developer" },
    { email = "opensource@blockmage.dev", name = "Blockmage Ltd" },
  ]

  maintainers = [
    { email = "opensource+typed-sentinels@blockmage.dev", name = "Blockmage Developer" },
  ]

  dependencies = [  ]

[dependency-groups]
  dev = [
    "commitizen>=4.0.0",
    "docformatter>=1.0.0",
    "pre-commit>=4.0.0",
    "ruff>=0.12.0",
  ]

  docs = [
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-section-index>=0.3.0",
    "mkdocs>=1.0.0",
    "mkdocstrings[python]>=0.30.0",
  ]

  test = [
    "coverage>=7.0.0",
    "pyright>=1.0.0",
    "pytest-cov>=6.0.0",
    "pytest>=8.0.0",
  ]

# -------------------------------- build system --------------------------------
[build-system]
  build-backend = "uv_build"
  requires      = [ "uv_build>=0.8.11,<0.9.0" ]

# ------------------------------- tool: coverage -------------------------------
[tool.coverage.report]
  skip_empty = "true"

  exclude_also = [
    "\\.\\.\\.",
    "\\.append(.*)",
    "cast(.*)",
    "if TYPE_CHECKING",
    "if __name__ == .__main__.:",
    "if errors",
    "if failures",
    "if hasattr(.*)",
    "if missing",
    "if thread.*",
    "msg =.*",
    "raise AssertionError",
  ]

[tool.coverage.html]
  directory = "reports/coverage/html"

[tool.coverage.json]
  output = "reports/coverage/json/coverage.json"

[tool.coverage.xml]
  output = "reports/coverage/xml/coverage.xml"

# ----------------------------- tool: docformatter -----------------------------
[tool.docformatter]
  blank                   = false
  force                   = false
  make-summary-multi-line = false
  pre-summary-newline     = false
  recursive               = true
  style                   = "numpy"
  wrap-descriptions       = 120
  wrap-summaries          = 120

# ------------------------------- tool: pyright --------------------------------
[tool.pyright]
  include = [ ".", "src", "tests" ]

  exclude = [
    ".git/**/*",
    ".venv/**/*",
    "docs/**/*",
    "examples/**/*",
    "images/**/*",
    "reports/**/*",
  ]

  pythonPlatform   = "Linux"
  pythonVersion    = "3.13"
  typeCheckingMode = "strict"
  venv             = ".venv"
  venvPath         = "."

  analyzeUnannotatedFunctions = true
  deprecateTypingAliases      = true
  reportMissingTypeStubs      = true
  strictDictionaryInference   = false
  strictListInference         = true
  strictSetInference          = true
  useLibraryCodeForTypes      = true

  executionEnvironments = [
    { pythonVersion = "3.13", root = "." },
  ]

# -------------------------------- tool: pytest --------------------------------
[tool.pytest.ini_options]
  addopts = [
    "--cov-report=html",
    "--cov-report=json",
    "--cov-report=xml",
    "--cov=typed_sentinels",
    "--import-mode=importlib",
    "-s",
    "-vv",
  ]

  norecursedirs = [ ".venv" ]
  python_files  = [ "test_*.py" ]
  testpaths     = [ "." ]

# --------------------------------- tool: ruff ---------------------------------
[tool.ruff]
  exclude           = [  ]
  force-exclude     = true
  indent-width      = 4
  line-length       = 120
  respect-gitignore = true
  target-version    = "py313"
  unsafe-fixes      = true

  [tool.ruff.format]
    docstring-code-format      = true
    docstring-code-line-length = "dynamic"
    indent-style               = "space"
    line-ending                = "lf"
    quote-style                = "single"
    skip-magic-trailing-comma  = false

  [tool.ruff.lint]
    fixable   = [ "ALL" ]
    select    = [ "ALL" ]
    unfixable = [  ]

    ignore = [
      "ANN401", # any-type
      "COM",    # flake8-commas
      "D1",     # undocumented-{module,class,method,...}
      "INP001", # implicit-namespace-package
      "PYI021", # docstring-in-stub
      "SIM102", # collapsible-if
      "SLF001", # private-member-access
      "T201",   # print
    ]

    [tool.ruff.lint.per-file-ignores]
      "*test*" = [ "ANN", "D", "N", "Q", "S" ]

    [tool.ruff.lint.isort]
      known-first-party = [ "typed_sentinels" ]

    [tool.ruff.lint.flake8-unused-arguments]
      ignore-variadic-names = true

    [tool.ruff.lint.flake8-annotations]
      allow-star-arg-any = true

    [tool.ruff.lint.flake8-quotes]
      inline-quotes = "single"

    [tool.ruff.lint.pydocstyle]
      convention = "numpy"

    [tool.ruff.lint.pylint]
      allow-magic-value-types = [ "float", "int", "str" ]
      max-args                = 20
      max-bool-expr           = 10
      max-branches            = 20
      max-locals              = 15
      max-nested-blocks       = 10
      max-positional-args     = 20
      max-returns             = 10
      max-statements          = 75

    [tool.ruff.lint.flake8-bugbear]
      extend-immutable-calls = [  ]

# ---------------------------------- tool: uv ----------------------------------
[tool.uv]
  compile-bytecode = true
  managed          = true

  [tool.uv.pip]
    compile-bytecode = true
    require-hashes   = true
