from collections.abc import Callable
from threading import Lock
from types import EllipsisType
from typing import Any, ClassVar, Literal, Never, SupportsIndex, TypeGuard, final, overload
from weakref import WeakValueDictionary

@final
class Sentinel[T: Any = Any]:
    __slots__ = ('__weakref__', '_hint')

    _cls_cache: ClassVar[WeakValueDictionary[tuple[str, Any], Sentinel[Any]]] = ...
    _cls_hint: ClassVar[Any] = ...
    _cls_lock: ClassVar[Lock] = ...

    # `hint` -----------------------------------------------------------------------------------------------------------
    _hint: T

    @property
    def hint(self) -> T: ...

    # --- 'getitem' dunder methods -------------------------------------------------------------------------------------
    def __class_getitem__(cls, key: T) -> T: ...
    def __getitem__(self, key: T) -> T: ...

    # --- Calling ------------------------------------------------------------------------------------------------------
    def __call__(self, *args: Any, **kwargs: Any) -> T: ...

    # --- Truthiness ---------------------------------------------------------------------------------------------------
    def __bool__(self) -> Literal[False]: ...

    # --- Comparing ----------------------------------------------------------------------------------------------------
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...

    # --- Copying ------------------------------------------------------------------------------------------------------
    def __copy__(self) -> Sentinel[T]: ...
    def __deepcopy__(self, memo: Any) -> Sentinel[T]: ...

    # --- Pickling -----------------------------------------------------------------------------------------------------
    def __reduce__(self) -> tuple[Callable[..., Sentinel[T]], tuple[T]]: ...
    def __reduce_ex__(self, protocol: SupportsIndex) -> tuple[Callable[..., Sentinel[T]], tuple[T]]: ...

    # --- Mutability ---------------------------------------------------------------------------------------------------
    def __setattr__(self, name: str, value: Any) -> Never: ...
    def __delattr__(self, name: str) -> Never: ...

    # === Overloads for `__new__` ======================================================================================
    @overload
    def __new__(cls, hint: Sentinel) -> Never: ...
    @overload
    def __new__(cls, hint: type[Sentinel]) -> Never: ...
    @overload
    def __new__(cls, hint: Literal[None]) -> Never: ...
    @overload
    def __new__(cls, hint: Literal[True]) -> Never: ...
    @overload
    def __new__(cls, hint: Literal[False]) -> Never: ...
    @overload
    def __new__(cls, hint: EllipsisType) -> Never: ...
    @overload
    def __new__(cls, hint: type[T]) -> T: ...
    @overload
    def __new__(cls, hint: Any) -> Any: ...
    @overload
    def __new__(cls) -> T: ...

@overload
def is_sentinel(obj: Any, /) -> TypeGuard[Sentinel[Any]]: ...
@overload
def is_sentinel[T: Any](obj: Any, typ: T, /) -> TypeGuard[Sentinel[T]]: ...
