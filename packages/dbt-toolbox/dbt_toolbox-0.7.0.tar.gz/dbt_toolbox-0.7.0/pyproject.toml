[project]
name = "dbt-toolbox"
version = "0.7.0"
requires-python = ">=3.10"
dependencies = [
    "jinja2>=3.1.6",
    "loguru>=0.7.3",
    "sqlglot[rs]>=26.25.3",
    "tomli>=2.2.1",
    "typer>=0.16.0",
    "yamlium>=0.1.4",
]
description = "Productivity, warehous cost and QoL improvements for your dbt development"
readme = "README.md"
authors = [{ name = "Erik Munkby", email = "erik.munkby@gmail.com" }]
license = { file = "LICENSE" }

[project.optional-dependencies]
mcp = [
    "fastmcp>=2.11.3",
]

[project.urls]
Homepage = "https://github.com/erikmunkby/dbt-toolbox"
Documentation = "https://github.com/erikmunkby/dbt-toolbox/blob/main/CLI.md"
Repository = "https://github.com/erikmunkby/dbt-toolbox"
Issues = "https://github.com/erikmunkby/dbt-toolbox/issues"

[project.scripts]
dt = "dbt_toolbox.cli.main:main"

[dependency-groups]
dev = [
    "dbt-duckdb>=1.9.3",
    "fastmcp>=2.11.3",
    "ipykernel>=6.29.5",
    "pytest>=8.4.0",
    "pytest-env>=1.1.5",
    "ruff>=0.11.11",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 99

[tool.ruff.lint]
select = [
    "ALL", # include all the rules, including new ones
]
ignore = [
    # Custom
    "RUF012", # Forces using ClassVar when using lists in class variables
    "D203", # Empty line before class docstring
    "PGH003", # Require specific type: ignore
    "S101", # Prevent asserts
    "EM102", # No f-strings in raises
    "TRY003", # Long messages in exception class
    "INP001", # Require __init__.py files
    "PGH004", # Require specific noqas
    "EM101", # No string literals in exceptions
    "D213", # multi-line-summary-second-line
    "FBT002", # Bools in functions
    "TD002", # TODOs
    "TD003", # TODOs
    "FIX002", # TODOs
    "FBT001", # bools in function params
    "C901", # Function too complex
    "COM812",
    "PLR0912" # Too complex code (too many branches)
]

[tool.dbt_toolbox]
debug = false

[tool.ruff.lint.per-file-ignores]
# Ignore the folllowing rules in test fodler
"tests/*" = [
    "D100", # Docstring in public module
    "D401", # Imperiative mood.
    "S101", # Usage of assert
    "SLF",  # Accessing private functions
    "DTZ",  # Timezone
    "PLR",  # Hardcoded values
    "ARG002", # Unused input parameter (fixtures)
    "SIM117", # Nested with statements
    "PLC0415", # Not top level import
    "PTH123", # No with open():
]
