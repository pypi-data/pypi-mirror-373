init_files = {'01_init.bat': 'powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex" && uv init && uv add uurest && ECHO import uurest.init > init.py && uv run init.py\r\npause', '02_jupyter.bat': '@echo off\r\nECHO ##################################################\r\nECHO ####  The very first start may take a minute  ####\r\nECHO ####  To use Jupyter please open web browser  ####\r\nECHO ####          http://localhost:8888/          ####\r\nECHO ##################################################\r\nIF NOT EXIST init.json (\r\n    ECHO {"jupyter": true} > init.json\r\n    ECHO.\r\n    ECHO Jupyter initialization will start in a few seconds\r\n    ECHO.\r\n    timeout 9\r\n)\r\nuv add jupyter\r\nrem uv add jupyter_contrib_nbextensions\r\nrem uv add jupyter-autocomplete\r\nuv run --with jupyter jupyter lab\r\npause', '03_main.bat': '@echo off\r\nuv run main.py\r\npause', '04_shell.bat': '@echo off\r\nECHO ##################################################\r\nECHO ####         Type following commands:         ####\r\nECHO ##################################################\r\nECHO.\r\nECHO from uurest import *\r\nECHO print(fetch_setup())\r\nECHO fetch("http://www.somenonexistingwebpage.net")\r\nECHO response = fetch("https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg")\r\nECHO fetch_setup()["verbose_level"] = 1\r\nECHO response.save_text("./google_logo.svg")\r\nECHO response = fetch(\'https://fakestoreapi.com/products\')\r\nECHO print(response)\r\nECHO response.json["itemList"][0]\r\nECHO.\r\nuv run python', '05_clean.bat': '@echo off\r\nuv cache clean\r\nuv cache prune\r\ndel pyproject.toml\r\ndel readme.md\r\ndel uv.lock\r\ndel .python-version\r\ndel init.json\r\nrmdir .venv /s /q\r\nrmdir .ipynb_checkpoints /s /q\r\npause', 'index.html': '<!--\r\n\r\nCreate a simple web page using HTML language. Page background is white The layou of the web page is following: in the center of the page there are two panels.\r\n\r\nFirst panel:\r\nThe title of the first panel is "Form (urlencoded inputs)". Background of the panel is green. Then there are following inputs: Name (text box), Surname (text box), Continent (dropdown menu with a list of continents), Age (numric input) and submit button.\r\n\r\nSecond panel:\r\nThe title of the second panel is "Upload avatar". Background of the panel is red. There are following inputs on the panel: Avatar Name (text box), Image (file input) and submit button.\r\n\r\nhosting https://www.infinityfree.com/\r\n\r\n-->\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset="UTF-8">\r\n  <title>Two Panels</title>\r\n  <style>\r\n    body {margin: 0; background: #fff; display: flex; justify-content: center;\r\n     align-items: center; height: 100vh; font-family: sans-serif;}\r\n    .container {display: flex; gap: 30px;}\r\n    .panel {width: 300px; padding: 20px; border-radius: 8px; color: #fff;}\r\n    .green {background: green;}\r\n    .red {background: red;}\r\n    form {display: flex; flex-direction: column; gap: 10px;}\r\n    input, select {padding: 6px; border: none; border-radius: 4px;}\r\n    input[type="submit"] {background: #fff; color: #000; font-weight: bold; cursor: pointer;}\r\n  </style>\r\n</head>\r\n<body>\r\n  <div class="container">\r\n    <div class="panel green">\r\n      <h2>Form (urlencoded inputs)</h2>\r\n      <form method="POST" action="processform.php">\r\n        <input type="text" name="name" placeholder="Name" value="John" required>\r\n        <input type="text" name="surname" placeholder="Surname" value="Smith" required>\r\n        <select name="continent" value="Europe" required>\r\n          <option value="">Continent</option><option>Africa</option><option>Asia</option><option>Europe</option>\r\n          <option>North America</option><option>South America</option><option>Australia</option><option>Antarctica</option>\r\n        </select>\r\n        <input type="number" name="age" placeholder="Age" min="0" value="95" required>\r\n        <input type="submit" value="Submit">\r\n      </form>\r\n    </div>\r\n    <div class="panel red">\r\n      <h2>Upload avatar</h2>\r\n      <form method="POST" enctype="multipart/form-data">\r\n        <input type="text" name="avatarName" placeholder="Avatar Name" value="My Super Avatar" required>\r\n        <input type="file" name="avatarFile" required>\r\n        <input type="submit" value="Submit">\r\n      </form>\r\n    </div>\r\n  </div>\r\n</body>\r\n</html>\r\n', 'tutorial_01.ipynb': '{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "aa3f7ce3-88e7-4968-910c-eb36535ebf58",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# first we need to import the library\\n",\n    "import uurest as uf\\n",\n    "# second lets import \\"fetch\\", \\"fetch_setup\\", \\"translate_fetch\\", \\"null\\" and \\"call\\" functions\\n",\n    "from uurest import *"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "b967be5c-4182-42f7-8ab4-44d4c48da338",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# get link to the fetch setup object\\n",\n    "setup = fetch_setup()\\n",\n    "print(setup)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "a5fc0458-f6cb-45af-9a7f-90bbde3a6485",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets modify fetch behavior\\n",\n    "# we will set recommended minimal timeout to 10 seconds which should be enough\\n",\n    "setup[\\"timeout\\"] = 10\\n",\n    "# in case of http errors please do not throw errors and try to handle it\\n",\n    "setup[\\"raise_exception_on_error\\"] = False\\n",\n    "# set verbose_level to max. We want the fetch/call to explain everything what it is doing\\n",\n    "setup[\\"verbose_level\\"] = 3\\n",\n    "# and add a new default http header which will be sent with every request\\n",\n    "setup[\\"http_headers\\"].update({\\"X-My-Custom-Header\\": \\"value\\"})\\n",\n    "# lets check if default fetch setup was modified properly\\n",\n    "print(fetch_setup())"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "8f600b29-89bf-48de-8ebd-da068b003b47",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# Lets try to reach some non existing web page\\n",\n    "# Since verbose level is set to max, we can take a look under the hood\\n",\n    "# to see what the fetch function is doing\\n",\n    "response = fetch(\\"http://www.somenonexistingwebpage.net\\")"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "f7c04031-6012-438c-938c-87de0b369eeb",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# Because setup[\\"raise_exception_on_error\\"] is set to False no error was triggered\\n",\n    "# even if the web page does not exist and there must have been a network error\\n",\n    "# We can inspect the response in a greater detail\\n",\n    "print(f\'response.http_status_code = {response.http_status_code}\')\\n",\n    "print(f\'response.content_type = {response.content_type}\')\\n",\n    "print(f\'response.data_type = {response.data_type}\')\\n",\n    "print(f\'response.json = {response.json}\')"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "ceb47b46-5d46-44b4-87d0-d8e54555390c",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets create a local copy of the setup\\n",\n    "custom_setup = fetch_setup(duplicate=True)\\n",\n    "# this time if there is an http error we want our script to fail \\n",\n    "custom_setup[\\"raise_exception_on_error\\"] = True\\n",\n    "# since we have updated local copy of the setup we have to pass\\n",\n    "# it to the fetch function using \\"setup=\\" parameter\\n",\n    "response = fetch(\\"http://www.somenonexistingwebpage.net\\", setup=custom_setup)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "3b4b3915-1801-418c-9e52-8043e7efe5fb",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets download some svg file from wikipedia\\n",\n    "response = fetch(\\"https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg\\")"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "4cf237dd-8818-4dee-b3f8-c4ddc86e01dd",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we can display a json\\n",\n    "# json object is always set up\\n",\n    "response.json"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "638c7643-c50b-4742-a4ac-11ca6107751a",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we can display a text since response is a valid text\\n",\n    "response.text"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "464b5615-357b-4287-84d2-4b9fb6ff3e3f",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# unfortunately we cannot play with a binary stream, since the returned data are not binary\\n",\n    "response.binary"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "91edf6db-96a4-4a37-a735-9739a468ce32",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we can save response as text\\n",\n    "response.save_text(\\"./google.svg\\")\\n",\n    "# we can save resopnse as json\\n",\n    "response.save_json(\\"./google.svg.json\\")\\n",\n    "# take a look into the folder. You should see them there in a few seconds"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "85827971-559f-4f86-a4ca-3edf91a0635b",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "call(\\"https://fakestoreapi.in/api/products\\", \\"POST\\", {\\n",\n    "    \\"title\\": \\"Apple Vision Pro\\",\\n",\n    "    \\"brand\\": \\"Apple\\",\\n",\n    "    \\"model\\": \\"Apple vision pro First Gen\\",\\n",\n    "    \\"color\\": \\"Black\\",\\n",\n    "    \\"category\\": \\"appliances\\",\\n",\n    "    \\"discount\\": \\"1\\"\\n",\n    "  })"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "5b923798-4a28-498f-8d9f-6a5681c39b61",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "call(\\"https://fakestoreapi.in/api/products/2\\", \\"PUT\\", {\\n",\n    "    \\"model\\": \\"Apple vision pro Second Gen\\",\\n",\n    "    \\"color\\": \\"Blue\\",\\n",\n    "    \\"discount\\": \\"47\\"\\n",\n    "  })"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "6faf6e43-12a1-4076-a2a2-62d3cfb036fc",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "fetch(\\"https://fakestoreapi.in/api/products/2\\", {\\n",\n    "  \\"method\\": \'HEAD\',\\n",\n    "  \\"headers\\": { \'Content-Type\': \'application/json\' },\\n",\n    "  \\"body\\": {\\n",\n    "    \\"model\\": \\"Apple vision pro Second Gen\\",\\n",\n    "    \\"color\\": \\"Blue\\",\\n",\n    "    \\"discount\\": \\"47\\"\\n",\n    "  }\\n",\n    "})"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "2d8ad7f8-6f38-46d2-b933-775466aded72",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# but we cannot save its binary representation since the returned data are not binary\\n",\n    "response.save_binary(\\"./google.svg\\")"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "59a7ec4a-fea6-4cfe-a30d-5981fd0b4ba5",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets download some binary data\\n",\n    "response = fetch(\\"https://upload.wikimedia.org/wikipedia/commons/b/b9/First-google-logo.gif\\")"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "4b62c171-b0c3-40b7-b52f-88a31ecd7c9e",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# now we can play with a binary stram\\n",\n    "response.binary\\n",\n    "# and we can as well save binary data to google.gif\\n",\n    "response.save_binary(\\"./google.gif\\")\\n",\n    "# take a look into the folder. You should see the google.gif there in a few seconds"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "c0ac45ff-5c28-4726-a894-6c6aa1bf9bc8",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Python 3 (ipykernel)",\n   "language": "python",\n   "name": "python3"\n  },\n  "language_info": {\n   "codemirror_mode": {\n    "name": "ipython",\n    "version": 3\n   },\n   "file_extension": ".py",\n   "mimetype": "text/x-python",\n   "name": "python",\n   "nbconvert_exporter": "python",\n   "pygments_lexer": "ipython3",\n   "version": "3.13.7"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}\n', 'tutorial_02.ipynb': '{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": 8,\n   "id": "aa3f7ce3-88e7-4968-910c-eb36535ebf58",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# first we need to import the library\\n",\n    "import uurest as uf\\n",\n    "# second lets import \\"fetch\\", \\"fetch_setup\\", \\"translate_fetch\\", \\"null\\" and \\"call\\" functions\\n",\n    "from uurest import *"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 9,\n   "id": "b967be5c-4182-42f7-8ab4-44d4c48da338",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n      "{\'raise_exception_on_error\': True, \'timeout\': 120, \'verbose_level\': 3, \'http_headers\': {\'accept\': \'*/*;q=0.9\', \'accept-language\': \'*;q=0.9\', \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\', \'cache-control\': \'no-cache\', \'pragma\': \'no-cache\', \'priority\': \'u=1\', \'sec-ch-ua-mobile\': \'?0\'}}\\n"\n     ]\n    }\n   ],\n   "source": [\n    "# get link to the fetch setup object\\n",\n    "setup = fetch_setup()\\n",\n    "print(setup)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 16,\n   "id": "a5fc0458-f6cb-45af-9a7f-90bbde3a6485",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n      "{\'raise_exception_on_error\': False, \'timeout\': 10, \'verbose_level\': 1, \'http_headers\': {\'accept\': \'*/*;q=0.9\', \'accept-language\': \'*;q=0.9\', \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\', \'cache-control\': \'no-cache\', \'pragma\': \'no-cache\', \'priority\': \'u=1\', \'sec-ch-ua-mobile\': \'?0\', \'X-My-Custom-Header\': \'value\'}}\\n"\n     ]\n    }\n   ],\n   "source": [\n    "# lets modify fetch behavior\\n",\n    "# we will set recommended minimal timeout to 10 seconds which should be enough\\n",\n    "setup[\\"timeout\\"] = 10\\n",\n    "# in case of http errors please do not throw errors and try to handle it\\n",\n    "setup[\\"raise_exception_on_error\\"] = False\\n",\n    "# set verbose_level to max. We want the fetch/call to explain everything what it is doing\\n",\n    "setup[\\"verbose_level\\"] = 1\\n",\n    "# lets check if default fetch setup was modified properly\\n",\n    "print(fetch_setup())"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 11,\n   "id": "cdb93a92-f75d-4a94-9695-e18866fb838e",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n      "# ############################# call #############################\\n",\n      "# -------------------- HTTP_RESPONSE_CONTENT ---------------------\\n",\n      "# ------------ [2025-08-29T13:14:15 local, +02H utc] -------------\\n",\n      "{\\n",\n      "    \\"status\\": \\"SUCCESS\\",\\n",\n      "    \\"message\\": \\"Here is the product you sent, which we have just returned \\\\n      you back. We do not save it in our Database\\",\\n",\n      "    \\"product\\": {\\n",\n      "        \\"id\\": 150,\\n",\n      "        \\"title\\": \\"Apple Vision Pro\\",\\n",\n      "        \\"brand\\": \\"Apple\\",\\n",\n      "        \\"model\\": \\"Apple vision pro First Gen\\",\\n",\n      "        \\"color\\": \\"Black\\",\\n",\n      "        \\"category\\": \\"appliances\\",\\n",\n      "        \\"discount\\": \\"1\\"\\n",\n      "    }\\n",\n      "}\\n",\n      "\\n"\n     ]\n    },\n    {\n     "data": {\n      "text/plain": [\n       "<uurest.uuCommand.uuCommand at 0x1a70e31c410>"\n      ]\n     },\n     "execution_count": 11,\n     "metadata": {},\n     "output_type": "execute_result"\n    }\n   ],\n   "source": [\n    "fetch(\\"https://fakestoreapi.in/api/products\\", {\\n",\n    "  \\"method\\": \'POST\',\\n",\n    "  \\"headers\\": { \'Content-Type\': \'application/json\' },\\n",\n    "  \\"body\\":{\\n",\n    "    \\"title\\": \\"Apple Vision Pro\\",\\n",\n    "    \\"brand\\": \\"Apple\\",\\n",\n    "    \\"model\\": \\"Apple vision pro First Gen\\",\\n",\n    "    \\"color\\": \\"Black\\",\\n",\n    "    \\"category\\": \\"appliances\\",\\n",\n    "    \\"discount\\": \\"1\\"\\n",\n    "  }\\n",\n    "})"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 14,\n   "id": "282f8190-6ca8-44e0-ad20-e25b929700bf",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n      "url = \\"https://fakestoreapi.in/api/products\\"\\n",\n      "method = \\"POST\\"\\n",\n      "body = {\\n",\n      "    \\"title\\": \\"Apple Vision Pro\\",\\n",\n      "    \\"brand\\": \\"Apple\\",\\n",\n      "    \\"model\\": \\"Apple vision pro First Gen\\",\\n",\n      "    \\"color\\": \\"Black\\",\\n",\n      "    \\"category\\": \\"appliances\\",\\n",\n      "    \\"discount\\": \\"1\\"\\n",\n      "}\\n",\n      "setup = {\\n",\n      "    \\"raise_exception_on_error\\": false,\\n",\n      "    \\"timeout\\": 10,\\n",\n      "    \\"verbose_level\\": 1,\\n",\n      "    \\"http_headers\\": {\\n",\n      "        \\"Content-Type\\": \\"application/json\\"\\n",\n      "    }\\n",\n      "}\\n",\n      "response = call(url, method, body, setup)\\n",\n      "\\n"\n     ]\n    }\n   ],\n   "source": [\n    "t = translate_fetch(\\"https://fakestoreapi.in/api/products\\", {\\n",\n    "  \\"method\\": \'POST\',\\n",\n    "  \\"headers\\": { \'Content-Type\': \'application/json\' },\\n",\n    "  \\"body\\":{\\n",\n    "    \\"title\\": \\"Apple Vision Pro\\",\\n",\n    "    \\"brand\\": \\"Apple\\",\\n",\n    "    \\"model\\": \\"Apple vision pro First Gen\\",\\n",\n    "    \\"color\\": \\"Black\\",\\n",\n    "    \\"category\\": \\"appliances\\",\\n",\n    "    \\"discount\\": \\"1\\"\\n",\n    "  }\\n",\n    "})\\n",\n    "print(t)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 15,\n   "id": "85827971-559f-4f86-a4ca-3edf91a0635b",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n      "# ############################# call #############################\\n",\n      "# -------------------- HTTP_RESPONSE_CONTENT ---------------------\\n",\n      "# ------------ [2025-08-29T13:20:18 local, +02H utc] -------------\\n",\n      "{\\n",\n      "    \\"status\\": \\"SUCCESS\\",\\n",\n      "    \\"message\\": \\"Here is the product you sent, which we have just returned \\\\n      you back. We do not save it in our Database\\",\\n",\n      "    \\"product\\": {\\n",\n      "        \\"id\\": 150,\\n",\n      "        \\"title\\": \\"Apple Vision Pro\\",\\n",\n      "        \\"brand\\": \\"Apple\\",\\n",\n      "        \\"model\\": \\"Apple vision pro First Gen\\",\\n",\n      "        \\"color\\": \\"Black\\",\\n",\n      "        \\"category\\": \\"appliances\\",\\n",\n      "        \\"discount\\": \\"1\\"\\n",\n      "    }\\n",\n      "}\\n",\n      "\\n"\n     ]\n    }\n   ],\n   "source": [\n    "url = \\"https://fakestoreapi.in/api/products\\"\\n",\n    "method = \\"POST\\"\\n",\n    "body = {\\n",\n    "    \\"title\\": \\"Apple Vision Pro\\",\\n",\n    "    \\"brand\\": \\"Apple\\",\\n",\n    "    \\"model\\": \\"Apple vision pro First Gen\\",\\n",\n    "    \\"color\\": \\"Black\\",\\n",\n    "    \\"category\\": \\"appliances\\",\\n",\n    "    \\"discount\\": \\"1\\"\\n",\n    "}\\n",\n    "response = call(url, method, body)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 26,\n   "id": "1966fd7b-46f7-4e4d-8dff-96286b5276c7",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n      "SUCCESS\\n",\n      "The product with id 2 has been replaced with your provided data\\n",\n      "2\\n"\n     ]\n    },\n    {\n     "ename": "AttributeError",\n     "evalue": "\'uuJsonObject\' object has no attribute \'title\'",\n     "output_type": "error",\n     "traceback": [\n      "\\u001b[31m---------------------------------------------------------------------------\\u001b[39m",\n      "\\u001b[31mAttributeError\\u001b[39m                            Traceback (most recent call last)",\n      "\\u001b[36mCell\\u001b[39m\\u001b[36m \\u001b[39m\\u001b[32mIn[26]\\u001b[39m\\u001b[32m, line 5\\u001b[39m\\n\\u001b[32m      3\\u001b[39m \\u001b[38;5;28mprint\\u001b[39m(j.message)\\n\\u001b[32m      4\\u001b[39m \\u001b[38;5;28mprint\\u001b[39m(j.product.id)\\n\\u001b[32m----> \\u001b[39m\\u001b[32m5\\u001b[39m \\u001b[38;5;28mprint\\u001b[39m(\\u001b[43mj\\u001b[49m\\u001b[43m.\\u001b[49m\\u001b[43mproduct\\u001b[49m\\u001b[43m.\\u001b[49m\\u001b[43mtitle\\u001b[49m)\\n\\u001b[32m      6\\u001b[39m \\u001b[38;5;28mprint\\u001b[39m(j.product.brand)\\n",\n      "\\u001b[31mAttributeError\\u001b[39m: \'uuJsonObject\' object has no attribute \'title\'"\n     ]\n    }\n   ],\n   "source": [\n    "j = response.json.parse()\\n",\n    "print(j.status)\\n",\n    "print(j.message)\\n",\n    "print(j.product.id)\\n",\n    "print(j.product.title)\\n",\n    "print(j.product.brand"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 18,\n   "id": "5b923798-4a28-498f-8d9f-6a5681c39b61",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n      "# ############################# call #############################\\n",\n      "# -------------------- HTTP_RESPONSE_CONTENT ---------------------\\n",\n      "# ------------ [2025-08-29T13:22:30 local, +02H utc] -------------\\n",\n      "{\\n",\n      "    \\"status\\": \\"SUCCESS\\",\\n",\n      "    \\"message\\": \\"The product with id 2 has been replaced with your provided data\\",\\n",\n      "    \\"product\\": {\\n",\n      "        \\"id\\": \\"2\\",\\n",\n      "        \\"model\\": \\"Apple vision pro Second Gen\\",\\n",\n      "        \\"color\\": \\"Blue\\",\\n",\n      "        \\"discount\\": \\"47\\"\\n",\n      "    }\\n",\n      "}\\n",\n      "\\n"\n     ]\n    }\n   ],\n   "source": [\n    "response = call(\\"https://fakestoreapi.in/api/products/2\\", \\"PUT\\", {\\n",\n    "    \\"model\\": \\"Apple vision pro Second Gen\\",\\n",\n    "    \\"color\\": \\"Blue\\",\\n",\n    "    \\"discount\\": \\"47\\"\\n",\n    "  })"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "6faf6e43-12a1-4076-a2a2-62d3cfb036fc",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "fetch(\\"https://fakestoreapi.in/api/products/2\\", {\\n",\n    "  \\"method\\": \'HEAD\',\\n",\n    "  \\"headers\\": { \'Content-Type\': \'application/json\' },\\n",\n    "  \\"body\\": {\\n",\n    "    \\"model\\": \\"Apple vision pro Second Gen\\",\\n",\n    "    \\"color\\": \\"Blue\\",\\n",\n    "    \\"discount\\": \\"47\\"\\n",\n    "  }\\n",\n    "})"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "6ce3985f-d281-4c92-8b2a-a62d30b492d0",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Python 3 (ipykernel)",\n   "language": "python",\n   "name": "python3"\n  },\n  "language_info": {\n   "codemirror_mode": {\n    "name": "ipython",\n    "version": 3\n   },\n   "file_extension": ".py",\n   "mimetype": "text/x-python",\n   "name": "python",\n   "nbconvert_exporter": "python",\n   "pygments_lexer": "ipython3",\n   "version": "3.13.7"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}\n'}
