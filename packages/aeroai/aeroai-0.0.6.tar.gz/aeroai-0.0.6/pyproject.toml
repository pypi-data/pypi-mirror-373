# === Project Metadata ===

# === Build System ===
[build-system]
build-backend = "uv_build"
# === Dependencies ===
dependencies = [
  "attrs>=25.3.0",
  "cattrs>=25.1.1",
  "pendulum>=3.1.0",
  "pydantic>=2.11.7"
]
requires = ["uv_build>=0.8.12,<0.9.0"]

[dependency-groups]
dev = [
  "bandit>=1.8.6",
  "black>=25.1.0",
  "detect-secrets>=1.5.0",
  "docformatter>=1.7.7",
  "isort>=6.0.1",
  "mypy>=1.17.1",
  "pip-audit>=2.9.0",
  "pre-commit>=4.3.0",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.1.0",
  "pytest-cov>=6.2.1",
  "pytest-watch>=4.2.0",
  "python-semantic-release>=10.3.1",
  "ruff>=0.12.11",
  "twine>=6.1.0"
]
docs = [
  "furo>=2025.7.19",
  "myst-parser>=4.0.1",
  "sphinx>=8.2.3"
]

[project]
authors = [
  {name = "Florian Peschke", email = "florian.peschke@hyand.com"}
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Typing :: Typed"
]
description = "Core components for AI projects"
keywords = ["ai", "framework", "llm", "openai", "mistral", "anthropic"]
name = "aeroai"
readme = "README.md"
requires-python = ">=3.13"
version = "0.0.6"

[project.optional-dependencies]
all = ["aeroai-mistral", "aeroai-openai"]
build = ["uv ~= 0.7.12"]
mistral = ["aeroai-mistral"]
openai = ["aeroai-openai"]

[project.urls]
Changelog = "https://github.com/florianpeschke/aeroai/blob/main/CHANGELOG.md"
Documentation = "https://github.com/florianpeschke/aeroai#readme"
Homepage = "https://github.com/florianpeschke/aeroai"
Issues = "https://github.com/florianpeschke/aeroai/issues"
Repository = "https://github.com/florianpeschke/aeroai"

# === Bandit Configuration ===
[tool.bandit]
exclude_dirs = ["tests", "packages/*/tests", "**/tests/**"]
skips = ["B101", "B601"]

# === Black Configuration (Code Formatting) ===
[tool.black]
line-length = 88  # Match ruff line length
target-version = ["py313"]  # Target Python 3.13

[tool.coverage]

[tool.coverage.report]
exclude_lines = [
  # Patterns to exclude from coverage
  "pragma: no cover",  # Explicit coverage exclusion
  "def __repr__",  # String representations
  "raise AssertionError",  # Assertion failures
  "raise NotImplementedError",  # Abstract methods
  "if __name__ == .__main__.:",  # Script entry points
  "if TYPE_CHECKING:"  # Type-only imports
]
show_missing = true  # Show missing line numbers

# === Coverage Configuration (Code Coverage) ===
[tool.coverage.run]
omit = ["*/tests/*"]  # Exclude test files
source = ["src", "packages/*/src"]  # Measure coverage in all workspace sources

# === MyPy Configuration (Type Checking) ===
[tool.mypy]
# Exclude build directories and package tests to avoid conflicts
exclude = [".venv", "build", "dist", "packages/*/tests"]
explicit_package_bases = true  # Use explicit package bases for workspace
pretty = true  # Prettier error formatting
python_version = "3.13"  # Target Python 3.13
show_error_codes = true  # Show error codes for easier debugging
strict = true  # Enable strict type checking
warn_return_any = true  # Warn when returning Any
warn_unused_configs = true  # Warn about unused config

# Relaxed settings for tests
[[tool.mypy.overrides]]
allow_incomplete_defs = true
allow_untyped_calls = true
allow_untyped_defs = true
check_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
module = ["tests.*", "packages.*.tests.*"]
warn_return_any = false

# === Pytest Configuration (Testing) ===
[tool.pytest]

[tool.pytest.ini_options]
addopts = "-ra -q --strict-markers --cov=src --cov=packages --cov-report=term-missing"  # Show all, quiet, strict, with coverage
asyncio_default_fixture_loop_scope = "function"  # Async fixture scope
# Filter common warnings
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning"
]
minversion = "8.0"  # Require modern pytest
pythonpath = ["src", "packages/*/src"]  # Add src and package sources to path
testpaths = ["tests", "packages/*/tests"]  # Test directories including workspace packages

# === Ruff Configuration (Linting & Formatting) ===
[tool.ruff]
exclude = [".venv", "build", "dist"]
line-length = 88  # Standard Python line length
target-version = "py313"  # Target Python 3.13

[tool.ruff.format]
indent-style = "space"  # Use spaces for indentation
line-ending = "auto"  # Auto-detect line endings
quote-style = "double"  # Use double quotes consistently
skip-magic-trailing-comma = false  # Keep trailing commas for better diffs

[tool.ruff.lint]
# Ignore overly restrictive rules for this project
ignore = [
  "E501",  # Line too long (handled by formatter)
  "N999"  # Invalid module name (allow flexible naming)
]
# Select essential rule categories for clean, maintainable code
select = [
  "E",  # pycodestyle errors (syntax & style issues)
  "F",  # pyflakes (undefined names, imports, etc.)
  "W",  # pycodestyle warnings
  "I",  # isort (import sorting)
  "N",  # pep8-naming (naming conventions)
  "UP",  # pyupgrade (modernize Python code to 3.13)
  "B",  # flake8-bugbear (common bugs & anti-patterns)
  "C4",  # flake8-comprehensions (list/dict comprehension issues)
  "PIE",  # flake8-pie (unnecessary code patterns)
  "SIM",  # flake8-simplify (code simplification suggestions)
  "RUF"  # ruff-specific rules
]

[tool.ruff.lint.isort]
combine-as-imports = true  # Combine imports from same module
known-first-party = ["aeroai"]  # Treat 'aeroai' as first-party import
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
# Allow common patterns in specific file types
"__init__.py" = ["F401"]  # Allow unused imports (re-exports)
"tests/**/*.py" = [
  "S101",  # Allow assert statements in tests
  "N806",  # Allow non-lowercase variable names in tests
  "PLR2004",  # Allow magic value comparisons in tests
  "S311",  # Allow standard pseudo-random generators in tests
  "B011",  # Allow assert False in tests
  "F401",  # Allow unused imports in test files
  "F841",  # Allow unused variables in tests
  "ARG001",  # Allow unused function arguments in tests
  "ARG002",  # Allow unused method arguments in tests
  "N802",  # Allow function names that aren't lowercase
  "N803",  # Allow argument names that aren't lowercase
  "C901",  # Allow complex functions in tests
  "PLR0913",  # Allow too many arguments in test functions
  "PLR0915",  # Allow too many statements in test functions
  "SLF001"  # Allow private member access in tests
]

# === Python Semantic Release Configuration ===
[tool.semantic_release]
allow_zero_version = true
# Build configuration for core package only
build_command = """
    uv lock --upgrade-package "aeroai"
    git add uv.lock
    uv build --package aeroai
"""
commit_message = "chore(core): release {version}"
# Commit parsing
commit_parser = "conventional"
# Pre-1.0 behavior (remove after reaching 1.0.0)
major_on_zero = true
# Git settings - core package tags
tag_format = "aeroai-v{version}"
# Core package only
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/aeroai/__init__.py:__version__"]

# === Changelog Configuration ===
[tool.semantic_release.changelog]
# Include core package changes (explicit core scope or general commits)
include_commit_patterns = [
  '''.*\(core\).*''',        # Include (core) scoped commits
  '''^(feat|fix|perf|refactor|docs)(?!\([^)]*\)):.*'''  # Include general commits without specific scope
]
exclude_commit_patterns = [
  '''chore(?:\([^)]*?\))?: (?!release).+''',  # Exclude chores except releases
  '''ci(?:\([^)]*?\))?: .+''',  # Exclude CI changes
  '''style(?:\([^)]*?\))?: .+''',  # Exclude style-only changes
  '''test(?:\([^)]*?\))?: .+''',  # Exclude test-only changes
  '''.*(mistral|openai).*'''  # Exclude package-specific changes
]
mode = "update"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

# === Publishing Configuration ===
[tool.semantic_release.publish]
upload_to_pypi = true
upload_to_vcs_release = true

# === UV Workspace Configuration ===
[tool.uv.sources]
aeroai = {workspace = true}
aeroai-mistral = {workspace = true}
aeroai-openai = {workspace = true}

[tool.uv.workspace]
members = [
  "packages/*"
]
