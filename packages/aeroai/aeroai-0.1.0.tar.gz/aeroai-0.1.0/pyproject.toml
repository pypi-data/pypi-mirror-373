[project]
name = "aeroai"
version = "0.1.0"
description = "Core components for AI projects"
readme = "README.md"
authors = [
    { name = "Florian Peschke", email = "florian.peschke@hyand.com" }
]
requires-python = ">=3.13"
dependencies = [
    "attrs>=25.3.0",
    "cattrs>=25.1.1",
    "pendulum>=3.1.0",
    "pydantic>=2.11.7",
]

[build-system]
requires = ["uv_build>=0.8.12,<0.9.0"]
build-backend = "uv_build"

[tool.uv.sources]
aeroai = { workspace = true }
mistral = { workspace = true }

[tool.uv.workspace]
members = [
    "packages/mistral",
]


[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "black>=25.1.0",
    "detect-secrets>=1.5.0",
    "docformatter>=1.7.7",
    "isort>=6.0.1",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "ruff>=0.12.11",
    "twine>=6.1.0",
]

# === Ruff Configuration (Linting & Formatting) ===
[tool.ruff]
target-version = "py313"  # Target Python 3.13
line-length = 88          # Standard Python line length
exclude = [".venv", "build", "dist"]

[tool.ruff.lint]
# Select essential rule categories for clean, maintainable code
select = [
    "E",    # pycodestyle errors (syntax & style issues)
    "F",    # pyflakes (undefined names, imports, etc.)
    "W",    # pycodestyle warnings
    "I",    # isort (import sorting)
    "N",    # pep8-naming (naming conventions)
    "UP",   # pyupgrade (modernize Python code to 3.13)
    "B",    # flake8-bugbear (common bugs & anti-patterns)
    "C4",   # flake8-comprehensions (list/dict comprehension issues)
    "PIE",  # flake8-pie (unnecessary code patterns)
    "SIM",  # flake8-simplify (code simplification suggestions)
    "RUF",  # ruff-specific rules
]

# Ignore overly restrictive rules for this project
ignore = [
    "E501",   # Line too long (handled by formatter)
    "N999",   # Invalid module name (allow flexible naming)
]

[tool.ruff.format]
quote-style = "double"              # Use double quotes consistently
indent-style = "space"              # Use spaces for indentation
skip-magic-trailing-comma = false   # Keep trailing commas for better diffs
line-ending = "auto"                # Auto-detect line endings

[tool.ruff.lint.per-file-ignores]
# Allow common patterns in specific file types
"__init__.py" = ["F401"]    # Allow unused imports (re-exports)
"tests/**/*.py" = [
    "S101",  # Allow assert statements in tests
    "N806",  # Allow non-lowercase variable names in tests
]

[tool.ruff.lint.isort]
known-first-party = ["aeroai"]  # Treat 'aeroai' as first-party import
combine-as-imports = true     # Combine imports from same module
split-on-trailing-comma = false

# === MyPy Configuration (Type Checking) ===
[tool.mypy]
python_version = "3.13"        # Target Python 3.13
strict = true                   # Enable strict type checking
warn_return_any = true         # Warn when returning Any
warn_unused_configs = true     # Warn about unused config
show_error_codes = true        # Show error codes for easier debugging
pretty = true                  # Prettier error formatting

# Exclude build directories
exclude = [".venv", "build", "dist"]

# === Pytest Configuration (Testing) ===
[tool.pytest.ini_options]
minversion = "8.0"                                    # Require modern pytest
testpaths = ["tests"]                               # Test directory
pythonpath = ["src"]                               # Add src to path
addopts = "-ra -q --strict-markers"                 # Show all, quiet, strict
asyncio_default_fixture_loop_scope = "function"    # Async fixture scope

# Filter common warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# === Coverage Configuration (Code Coverage) ===
[tool.coverage.run]
source = ["src"]              # Measure coverage in source
omit = ["*/tests/*"]         # Exclude test files

[tool.coverage.report]
exclude_lines = [            # Patterns to exclude from coverage
    "pragma: no cover",       # Explicit coverage exclusion
    "def __repr__",           # String representations
    "raise AssertionError",   # Assertion failures
    "raise NotImplementedError", # Abstract methods
    "if __name__ == .__main__.:", # Script entry points
    "if TYPE_CHECKING:",      # Type-only imports
]
show_missing = true          # Show missing line numbers

# === Black Configuration (Code Formatting) ===
[tool.black]
line-length = 88             # Match ruff line length
target-version = ["py313"]   # Target Python 3.13
