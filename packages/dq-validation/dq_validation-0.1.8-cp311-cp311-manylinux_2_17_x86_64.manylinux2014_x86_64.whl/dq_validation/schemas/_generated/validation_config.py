# generated by datamodel-codegen:
#   filename:  validation_config.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence

from pydantic import BaseModel, Field, RootModel, conint


class Version(Enum):
    v0 = 'v0'


class ColumnTuple(BaseModel):
    columns: Sequence[conint(ge=0)]


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class NumRowsValidationRule(BaseModel):
    atLeast: Optional[conint(ge=0)] = None
    atMost: Optional[conint(ge=0)] = None


class NumericRangeRule(BaseModel):
    greaterThan: Optional[float] = None
    greaterThanEquals: Optional[float] = None
    lessThan: Optional[float] = None
    lessThanEquals: Optional[float] = None


class UniquenessValidationRule(BaseModel):
    uniqueKeys: Sequence[ColumnTuple]


class ColumnValidationV0(BaseModel):
    allowNull: bool
    formatType: FormatType
    hashWith: Optional[HashingAlgorithm] = None
    inRange: Optional[NumericRangeRule] = None
    name: Optional[str] = None


class TableValidationV0(BaseModel):
    allowEmpty: Optional[bool] = None
    numRows: Optional[NumRowsValidationRule] = None
    uniqueness: Optional[UniquenessValidationRule] = None


class ValidationConfigV0(BaseModel):
    columns: Sequence[ColumnValidationV0]
    table: Optional[TableValidationV0] = None


class ValidationConfig1(BaseModel):
    config: ValidationConfigV0
    version: Version


class ValidationConfig(RootModel[ValidationConfig1]):
    root: ValidationConfig1 = Field(..., title='ValidationConfig')
