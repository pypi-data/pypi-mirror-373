[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "emergence-agent"
dynamic = ["version"]
description = "Official Python SDK for building and deploying intelligent agents on the Emergence Platform"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Emergence Platform Team", email = "developers@emergence-platform.com"}
]
maintainers = [
    {name = "Emergence Platform Team", email = "developers@emergence-platform.com"}
]
keywords = [
    "emergence", "agent", "ai", "platform", "sdk", "webhook", 
    "automation", "integration", "api", "client", "intelligent-agents"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
]
dependencies = [
    "requests>=2.31.0",
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "PyJWT>=2.8.0",
    "urllib3>=2.0.0",
    "python-dateutil>=2.8.0",
    "python-dotenv>=1.0.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]
examples = [
    "flask>=2.3.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "celery>=5.3.0",
    "redis>=4.6.0",
]
all = [
    "emergence-agent[dev,examples]"
]

[project.urls]
Homepage = "https://emergence-platform.com"
Documentation = "https://docs.emergence-platform.com/agent-sdk"
Repository = "https://github.com/emergence-platform/emergence-agent-sdk"
"Bug Reports" = "https://github.com/emergence-platform/emergence-agent-sdk/issues"
Platform = "https://app.emergence-platform.com"

[project.scripts]
emergence-agent = "emergence_agent.cli:main"
emergence-validate = "emergence_agent.cli:validate_agent"
emergence-deploy = "emergence_agent.cli:deploy_agent"

[tool.setuptools.dynamic]
version = {attr = "emergence_agent.version.__version__"}

[tool.setuptools.packages.find]
exclude = ["tests*"]

[tool.setuptools.package-data]
"emergence_agent" = [
    "templates/*.py",
    "templates/*.json", 
    "schemas/*.json",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["emergence_agent"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow",
]

# Coverage configuration
[tool.coverage.run]
source = ["emergence_agent"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]