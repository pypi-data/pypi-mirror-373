---
id: https://w3id.org/omero-quay/manifest
name: manifest-schema
title: manifset-schema
description: |-
  A linkML schema to describe bioimage file transfer between iRODS and OMERO
version: 0.2
license: GNU GPL v3.0
see_also:
  - https://pypi.org/project/omero-cli-transfer/

prefixes:
  quay: https://w3id.org/omero-quay/manifest
  linkml: https://w3id.org/linkml/
  biolink: https://w3id.org/biolink/
  isa: https://isa-specs.readthedocs.io/en/latest/isamodel.html#
  schema: http://schema.org/
  edam: https://edamontology.org/
  ome: https://www.openmicroscopy.org/Schemas/Documentation/Generated/OME-2016-06/ome.html#
  irods: https://docs.irods.org/latest/system_overview/glossary/#
  ORCID: https://orcid.org/
  wiki: https://en.wikipedia.org/wiki/
  madbot: https://gitlab.com/ifb-elixirfr/madbot/madbot-api/
  django: https://docs.djangoproject.com/en/4.2/ref/contrib/auth/
  ror: https://ror.readme.io/v2/docs/data-structure#
imports:
  - linkml:types

slots:
  id:
    range: string
    identifier: true
    slot_uri: schema:identifier
  ome_id:
    range: integer
    slot_uri: schema:identifier
    mappings:
      - ome:id
  irods_id:
    range: integer
    slot_uri: schema:identifier
    mappings:
      - irods:id
  unix_uid:
    range: integer
    slot_uri: schema:identifier
    description: >-
      user id that can be used in a unix system
  unix_gid:
    range: integer
    slot_uri: schema:identifier
    description: >-
      group id that can be used in a unix system
  schema_version:
    range: string
    ifabsent: string("1.1")
  name:
    range: string
    aliases:
      - ome:name
      - madbot:id
      - irods:name
  description:
    range: string
    aliases:
      - ome:description
  timestamps:
    range: string
    multivalued: true
    inlined_as_list: true
  email:
    range: string
    aliases:
      - ome:email
      - django:email
  first_name:
    range: string
    aliases:
      - django:first_name
      - ome:first_name
  last_name:
    range: string
    aliases:
      - ome:last_name
      - django:last_name
  institutions:
    multivalued: true
    range: string
    inlined_as_list: true
  owner:
    range: User
    inlined: false
  manager:
    range: User
    inlined: false
  members:
    range: User
    multivalued: true
    aliases:
      - ome:experimenter_ref
    inlined_as_list: true
  owners:
    range: User
    multivalued: true
  collaborators:
    range: User
    multivalued: true
  contributors:
    range: User
    multivalued: true
  datalinks:
    range: DataLink
    multivalued: true
    inlined_as_list: true
  importlinks:
    range: DataLink
    multivalued: true
    inlined_as_list: true
  scheme:
    range: Scheme
  status:
    range: Status
  step:
    range: integer
    ifabsent: 0
  timestamp:
    range: string
  host:
    range: string
  post_url:
    description: >-
      if the host has an omero-quay tornado server listening this is the url  to
      post to
    range: string
  states:
    range: State
    multivalued: true
    inlined_as_list: true
  srce_url:
    range: string
    description: >-
      urls are intended to be parsed by python `urllib.parse.urlparse` method,
      and MUST be formatted accordingly, e.g:
        - https://my.file.server/path/to/file
        - ssh://user@my.file.server:path/to/file
        - irods:///irodsZone/home/group/path/to/file
        - file:///SHARE/data/group/path/to/file
      File and irods paths MUST be absolute

  trgt_url:
    range: string
    description: >-
      urls are intended to be parsed by python `urllib.parse.urlparse` method,
      and MUST be formatted accordingly, e.g:
        - https://my.file.server/path/to/file
        - ssh://user@my.file.server:path/to/file
        - irods:///irodsZone/home/group/path/to/file
        - file:///SHARE/data/group/path/to/file
      File and irods paths MUST be absolute

  investigations:
    range: Investigation
    multivalued: true
    mappings:
      - ome:experimenter_group_ref
  studies:
    range: Study
    multivalued: true
    inlined_as_list: false
    mappings:
      - ome:project_ref
  assays:
    range: Assay
    multivalued: true
    inlined_as_list: false
    mappings:
      - ome:dataset_ref
  ror_ids:
    slot_uri: ror:id
    multivalued: True
    inlined_as_list: false
  provenance:
    range: Provenance
    inlined_as_list: True
  destination:
    range: Provenance
    inlined_as_list: True
  images:
    range: Image
    multivalued: true
    mappings:
      - ome:image_ref
  role:
    range: Role
  mode:
    range: Mode
  urls:
    range: string
    multivalued: true
    inlined_as_list: true
    description: >-
      urls are intended to be parsed by python `urllib.parse.urlparse` method,
      and MUST be formatted accordingly, e.g:
        - https://my.file.server/path/to/file
        - ssh://user@my.file.server:path/to/file
        - irods:///irodsZone/home/group/path/to/file
        - file:///SHARE/data/group/path/to/file
      File and irods paths MUST be absolute
  resc:
    range: string
    slot_uri: irods:Resource
    description: >-
      iRODS resource where the investigations should be stored
  data_roots:
    range: string
    multivalued: true
    inlined_as_list: true
    description: >-
      Each data root is constructed as a url and MUST point to a directory or
      collection common to all datasets. We can use jinja templates to indicate
      variables
        - file:///mnt/SHARE
        - irods:///devZone/home/{{ user }}
        - nfs_mount:///mnt/buffers/
  is_isa:
    range: boolean
  route:
    range: Store
    multivalued: true
  store:
    range: Store
  stores:
    range: Store
    multivalued: true
    inlined_as_list: true
  unix_root:
    range: string
    description: >-
      iRODS resource path on the store disk
  smb_root:
    range: string
    description: >-
      SAMBA root path on the store disk

  quay_annotations:
    multivalued: true
    range: QuayAnnotation
    any_of:
      - range: TagAnnotation
      - range: MapAnnotation
      - range: FileAnnotation
      - range: CommentAnnotation
    mappings:
      - ome:annotation_ref
  ann_type:
    range: string
  parents:
    multivalued: true
    range: Collection
  children:
    multivalued: true
    range: Collection
  file:
    range: File
  kv_pairs:
    multivalued: true
    range: KVPair
    inlined_as_list: true
  MIMEType:
    range: string
  key:
    slot_uri: ome:Map_Map_M_K
    key: true
    range: string
  value:
    range: string
  namespace:
    range: uri
  has_children:
    slot_uri: madbot:has_children
    range: boolean
  content_type:
    range: string
  comment:
    range: string
  error:
    range: Error
  delete:
    range: boolean
    ifabsent: false
  password:
    range: string
  message:
    range: string
  details:
    range: string

enums:
  Mode:
    description: >-
      access permission from an access control list see:
      https://docs.irods.org/4.3.0/icommands/user/#ichmod and
      https://omero.readthedocs.io/en/stable/sysadmins/\
      server-permissions.html#administrator we use the OMERO default behavior of
      setting the permissions at the group / investigation level.

      Below are the atomic permissions in iRODS and OMERO

        - own -> implicit in OMERO delete_object -> Delete write,
        - modify_object -> Edit, Move between groups, Mix data, Change
        - ownership create_object -> Edit delete_metadata -> Remove
        - annotations modify_metadata -> Annotate create_metadata ->
        - Annotate read, read_object -> View read_metadata -> View
        - null

      From this (non-bijective) mapping, we reproduce the sets in OMERO, as
      described here https://omero.readthedocs.io/en/stable/sysadmins/\
      server-permissions.html#administrator

    narrow_mappings:
      - wiki:File-system_permissions
    permissible_values:
      private:
      read_only:
      read_annotate:
      read_write:

  Role:
    description: >-
      User role for a collection (actually managed at the Investigation level)
      In madbot there are 4 roles, used here, but in Omero there are effectively
      only 2 (group owner and group member)

      For now we map `owner` and `manager` to  group owner in omero, and
      `contributor` and `collaborator` to group members

      [TO BE DEBATED]: if a group has only collaborators, we set the group to
      read_only if it has contibutors, we set it to read_annotate?

    permissible_values:
      owner:
        description: >-
          A collection owner has read_write privileges on the collection Will
          have `own` ACLs in iRODS omero: group owner
      manager:
        description: >-
          A collection manager has read_write privileges on the collection Will
          have 'delete_object' ACls in iRODS omero : group owner
      contributor:
        description: >-
          A collection contributor has read_write privileges on the collection
          Can't delete data in madbot Will have 'write' ACLs in iRODS omero :
          group member
      collaborator:
        description: >-
          A collection contributor has read_write privileges on the collection
          Can't delete data in madbot Will have 'read' ACLs in iRODS omero :
          group member

  AnnType:
    permissible_values:
      map_annotation:
      tag_annotation:
      file_annotation:
      comment_annotation:

  Scheme:
    description: >-
      A scheme refers to a data server type (iRODS, omero, a filesystem or an S3
      server)

    permissible_values:
      irods:
      omero:
      file:
      smb:
      xlsx:
      atk:

  Status:
    description: >-
      Used to indicate up-to-dateness of a service with respect to a manifest.

      started: The manifest is new

      checked: The manifest is conform here and in the other services

      changed: The manifest is conform here and must be pushed to peers

      expired: The manifest needs to be processed here

      errored: Well ...

    permissible_values:
      started:
      checked:
      changed:
      expired:
      errored:

classes:
  Thing:
    description: >-
      A generic grouping for any identifiable entity
    slots:
      - id
      # - timestamps
    class_uri: schema:Thing

  NamedThing:
    description: >-
      A generic grouping for an entity with foreign identities and a description
      not for thin objects as states
    abstract: true
    is_a: Thing
    slots:
      - name
      - description
      - quay_annotations
      - ome_id
      - irods_id
      - delete

  User:
    is_a: NamedThing
    class_uri: schema:Person

    description: >-
      Represents a user in the system - this user can log into iRODS and omero
      and samnba
    slots:
      - email
      - first_name
      - last_name
      - role
      - institutions
      - password
      - unix_uid
      - unix_gid
    slot_usage:
      name:
        required: true
      email:
        pattern: "^\\S+@[\\S+\\.]+\\S+"
        required: true
      first_name:
        required: true
      last_name:
        required: true

    narrow_mappings:
      - ome:Experimenter
      - schema:Person
      - irods:user-name

  Provenance:
    is_a: Thing
    slots:
      - ror_ids
      - host
      - urls
      - stores
      - route

  Store:
    is_a: Thing
    slots:
      - scheme
      - host
      - resc
      - data_roots
      - is_isa
      - post_url

  DataLink:
    is_a: Thing
    slots:
      - owner
      - srce_url
      - trgt_url

  State:
    is_a: Thing
    slots:
      - store
      - status
      - timestamps
      - scheme
      - host

  Error:
    description: >-
      If the state is errored, provides context of the error In python, message
      corresponds to exc_value, and details to the traceback
    slots:
      - message
      - details

  Collection:
    is_a: NamedThing
    class_uri: irods:Collection
    description: >-
      A collection is equivalent to a directory in a unix file system. It can
      have sub-collections
    slots:
      - owner
      - urls
      - parents
      - datalinks
      - importlinks
      - delete
      - children

  Manifest:
    is_a: NamedThing
    tree_root: true
    description: >-
      The root data entity
    slots:
      - provenance
      - destination
      - route
      - manager
      - members
      - investigations
      - studies
      - assays
      - images
      - quay_annotations
      - error
      - step
      - states
      - schema_version
      - timestamps
    slot_usage:
      investigations:
        inlined_as_list: true
      studies:
        inlined_as_list: true
      assays:
        inlined_as_list: true
      images:
        inlined_as_list: true
      quay_annotations:
        inlined_as_list: true
      route:
        inlined_as_list: true

  Investigation:
    is_a: Collection
    class_uri: isa:Investigation
    description: >-
      The top level collection in the hierarchy, equivalent to a Group in iRODS
      and OMERO
    narrow_mappings:
      - ome:ExperimenterGroup
      - isa:Investigation
      - madbot:Investigation
      - irods:Collection
    slots:
      - owners
      - contributors
      - collaborators
      - mode
    slot_usage:
      children:
        range: Study

  Study:
    is_a: Collection
    class_uri: biolink:Study
    narrow_mappings:
      - ome:Project
      - isa:Study
      - madbot:Study
      - irods:Collection
    description: >-
      A Study is a (potentially growing) collection of assays
    slot_usage:
      children:
        range: Assay
      parents:
        range: Investigation

  Assay:
    is_a: Collection
    class_uri: ome:Dataset
    narrow_mappings:
      - ome:Dataset
      - biolink:Assay
      - isa:Assay
      - irods:Collection
    description: >-
      An assay is a collection of images and is the lower organisation level.
      Companion files will be added as file annotation in omero
    slots:
      - images
    slot_usage:
      children:
        range: File
      parents:
        range: Study

  Image:
    is_a: File
    class_uri: ome:Image
    narrow_mappings:
      - ome:Image
      - irods:data_object
    slots:
      - quay_annotations
    slot_usage:
      parents:
        range: Assay

  QuayAnnotation:
    is_a: Thing
    class_uri: ome:Annotation
    abstract: true
    slots:
      - ann_type
      - namespace
      - urls
      - kv_pairs
      - value

  FileAnnotation:
    is_a: QuayAnnotation
    class_uri: ome:FileAnnotation
    narrow_mappings:
      - ome:FileAnnotation
      - irods:data_object
    slots:
      - urls
      - ann_type
    slot_usage:
      ann_type:
        ifabsent: string(file_annotation)

  MapAnnotation:
    is_a: QuayAnnotation
    class_uri: ome:MapAnnotation
    narrow_mappings:
      - ome:MapAnnotation
      - irods:Metadata
    slots:
      - kv_pairs
    description: >-
      In iRODS, there is an optional Unit, so key value pairs are really
      triples. For now this is not supported
    slot_usage:
      ann_type:
        ifabsent: string(map_annotation)

  TagAnnotation:
    is_a: QuayAnnotation
    class_uri: ome:TagAnnotation
    narrow_mappings:
      - ome:TagAnnotation
      - irods:Metadata
    slots:
      - value
    slot_usage:
      ann_type:
        ifabsent: string(tag_annotation)
  CommentAnnotation:
    is_a: QuayAnnotation
    class_uri: ome:CommentAnnotation
    narrow_mappings:
      - ome:CommentAnnotation
      - irods:Metadata
    slots:
      - value
    slot_usage:
      ann_type:
        ifabsent: string(comment_annotation)
  File:
    is_a: NamedThing
    class_uri: schema:File
    narrow_mappings:
      - ome:BinaryFile
      - irods:data-object
    slots:
      - owner
      - MIMEType
      - urls
      - parents

    slot_usage:
      name:
        description: >-
          The name here should be relative to the parent collection
      parents:
        range: Assay

  KVPair:
    class_uri: ome:Map_M
    slots:
      - key
      - value
    narrow_mappings:
      - schema:PropertyValue
      - irods:AVU
  # Todo: ROIs
