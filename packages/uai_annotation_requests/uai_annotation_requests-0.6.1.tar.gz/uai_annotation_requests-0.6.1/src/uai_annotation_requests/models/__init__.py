"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .uaiannotationrequestserror import UaiAnnotationRequestsError
from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .annotationrequestcondenseddto import (
        AnnotationRequestCondensedDTO,
        AnnotationRequestCondensedDTOTypedDict,
    )
    from .annotationrequestdto import (
        AnnotationRequestDTO,
        AnnotationRequestDTOTypedDict,
    )
    from .annotationrequestexportnotreadydto import (
        AnnotationRequestExportNotReadyDTO,
        AnnotationRequestExportNotReadyDTOData,
    )
    from .annotationrequestexportreferencedto import (
        AnnotationRequestExportReferenceDTO,
        AnnotationRequestExportReferenceDTOTypedDict,
    )
    from .annotationrequestnotfounddto import (
        AnnotationRequestNotFoundDTO,
        AnnotationRequestNotFoundDTOData,
    )
    from .annotationrequestphase import AnnotationRequestPhase
    from .apierror import APIError
    from .clipbusinessstate import ClipBusinessState
    from .clipdto import ClipDTO, ClipDTOTypedDict
    from .clipexporturl import ClipExportURL, ClipExportURLTypedDict
    from .clipreferenceidselection import (
        ClipReferenceIDSelection,
        ClipReferenceIDSelectionTypedDict,
    )
    from .clipslist import ClipsList, ClipsListTypedDict
    from .createannotationrequestdto import (
        CreateAnnotationRequestDTO,
        CreateAnnotationRequestDTOTypedDict,
    )
    from .createclipdto import CreateClipDTO, CreateClipDTOTypedDict
    from .createop import (
        CreateRequest,
        CreateRequestTypedDict,
        CreateUpdatedRequestBody,
        CreateUpdatedRequestBodyTypedDict,
    )
    from .errordetails import ErrorDetails, ErrorDetailsTypedDict
    from .filterfield import FilterField
    from .getannotationsop import GetAnnotationsRequest, GetAnnotationsRequestTypedDict
    from .getbyannotationrequestidop import (
        GetByAnnotationRequestIDRequest,
        GetByAnnotationRequestIDRequestTypedDict,
    )
    from .getclipsop import GetClipsRequest, GetClipsRequestTypedDict, SortBy, SortOrder
    from .getexportedannotationsop import (
        GetExportedAnnotationsRequest,
        GetExportedAnnotationsRequestTypedDict,
    )
    from .getfilteredop import GetFilteredRequest, GetFilteredRequestTypedDict
    from .getop import GetRequest, GetRequestTypedDict
    from .no_response_error import NoResponseError
    from .publicapidataintakestrategy import PublicAPIDataIntakeStrategy
    from .publicapiexportstrategy import PublicAPIExportStrategy
    from .responsevalidationerror import ResponseValidationError
    from .restartannotationrequestop import (
        RestartAnnotationRequestRequest,
        RestartAnnotationRequestRequestTypedDict,
    )
    from .restartresult import RestartResult, RestartResultTypedDict
    from .reviewdetails import ReviewDetails, ReviewDetailsTypedDict
    from .security import Security, SecurityTypedDict
    from .standaloneclip import StandaloneClip, StandaloneClipTypedDict
    from .transferjobdetails import (
        Status,
        TransferJobDetails,
        TransferJobDetailsTypedDict,
    )

__all__ = [
    "APIError",
    "AnnotationRequestCondensedDTO",
    "AnnotationRequestCondensedDTOTypedDict",
    "AnnotationRequestDTO",
    "AnnotationRequestDTOTypedDict",
    "AnnotationRequestExportNotReadyDTO",
    "AnnotationRequestExportNotReadyDTOData",
    "AnnotationRequestExportReferenceDTO",
    "AnnotationRequestExportReferenceDTOTypedDict",
    "AnnotationRequestNotFoundDTO",
    "AnnotationRequestNotFoundDTOData",
    "AnnotationRequestPhase",
    "ClipBusinessState",
    "ClipDTO",
    "ClipDTOTypedDict",
    "ClipExportURL",
    "ClipExportURLTypedDict",
    "ClipReferenceIDSelection",
    "ClipReferenceIDSelectionTypedDict",
    "ClipsList",
    "ClipsListTypedDict",
    "CreateAnnotationRequestDTO",
    "CreateAnnotationRequestDTOTypedDict",
    "CreateClipDTO",
    "CreateClipDTOTypedDict",
    "CreateRequest",
    "CreateRequestTypedDict",
    "CreateUpdatedRequestBody",
    "CreateUpdatedRequestBodyTypedDict",
    "ErrorDetails",
    "ErrorDetailsTypedDict",
    "FilterField",
    "GetAnnotationsRequest",
    "GetAnnotationsRequestTypedDict",
    "GetByAnnotationRequestIDRequest",
    "GetByAnnotationRequestIDRequestTypedDict",
    "GetClipsRequest",
    "GetClipsRequestTypedDict",
    "GetExportedAnnotationsRequest",
    "GetExportedAnnotationsRequestTypedDict",
    "GetFilteredRequest",
    "GetFilteredRequestTypedDict",
    "GetRequest",
    "GetRequestTypedDict",
    "NoResponseError",
    "PublicAPIDataIntakeStrategy",
    "PublicAPIExportStrategy",
    "ResponseValidationError",
    "RestartAnnotationRequestRequest",
    "RestartAnnotationRequestRequestTypedDict",
    "RestartResult",
    "RestartResultTypedDict",
    "ReviewDetails",
    "ReviewDetailsTypedDict",
    "Security",
    "SecurityTypedDict",
    "SortBy",
    "SortOrder",
    "StandaloneClip",
    "StandaloneClipTypedDict",
    "Status",
    "TransferJobDetails",
    "TransferJobDetailsTypedDict",
    "UaiAnnotationRequestsError",
]

_dynamic_imports: dict[str, str] = {
    "AnnotationRequestCondensedDTO": ".annotationrequestcondenseddto",
    "AnnotationRequestCondensedDTOTypedDict": ".annotationrequestcondenseddto",
    "AnnotationRequestDTO": ".annotationrequestdto",
    "AnnotationRequestDTOTypedDict": ".annotationrequestdto",
    "AnnotationRequestExportNotReadyDTO": ".annotationrequestexportnotreadydto",
    "AnnotationRequestExportNotReadyDTOData": ".annotationrequestexportnotreadydto",
    "AnnotationRequestExportReferenceDTO": ".annotationrequestexportreferencedto",
    "AnnotationRequestExportReferenceDTOTypedDict": ".annotationrequestexportreferencedto",
    "AnnotationRequestNotFoundDTO": ".annotationrequestnotfounddto",
    "AnnotationRequestNotFoundDTOData": ".annotationrequestnotfounddto",
    "AnnotationRequestPhase": ".annotationrequestphase",
    "APIError": ".apierror",
    "ClipBusinessState": ".clipbusinessstate",
    "ClipDTO": ".clipdto",
    "ClipDTOTypedDict": ".clipdto",
    "ClipExportURL": ".clipexporturl",
    "ClipExportURLTypedDict": ".clipexporturl",
    "ClipReferenceIDSelection": ".clipreferenceidselection",
    "ClipReferenceIDSelectionTypedDict": ".clipreferenceidselection",
    "ClipsList": ".clipslist",
    "ClipsListTypedDict": ".clipslist",
    "CreateAnnotationRequestDTO": ".createannotationrequestdto",
    "CreateAnnotationRequestDTOTypedDict": ".createannotationrequestdto",
    "CreateClipDTO": ".createclipdto",
    "CreateClipDTOTypedDict": ".createclipdto",
    "CreateRequest": ".createop",
    "CreateRequestTypedDict": ".createop",
    "CreateUpdatedRequestBody": ".createop",
    "CreateUpdatedRequestBodyTypedDict": ".createop",
    "ErrorDetails": ".errordetails",
    "ErrorDetailsTypedDict": ".errordetails",
    "FilterField": ".filterfield",
    "GetAnnotationsRequest": ".getannotationsop",
    "GetAnnotationsRequestTypedDict": ".getannotationsop",
    "GetByAnnotationRequestIDRequest": ".getbyannotationrequestidop",
    "GetByAnnotationRequestIDRequestTypedDict": ".getbyannotationrequestidop",
    "GetClipsRequest": ".getclipsop",
    "GetClipsRequestTypedDict": ".getclipsop",
    "SortBy": ".getclipsop",
    "SortOrder": ".getclipsop",
    "GetExportedAnnotationsRequest": ".getexportedannotationsop",
    "GetExportedAnnotationsRequestTypedDict": ".getexportedannotationsop",
    "GetFilteredRequest": ".getfilteredop",
    "GetFilteredRequestTypedDict": ".getfilteredop",
    "GetRequest": ".getop",
    "GetRequestTypedDict": ".getop",
    "NoResponseError": ".no_response_error",
    "PublicAPIDataIntakeStrategy": ".publicapidataintakestrategy",
    "PublicAPIExportStrategy": ".publicapiexportstrategy",
    "ResponseValidationError": ".responsevalidationerror",
    "RestartAnnotationRequestRequest": ".restartannotationrequestop",
    "RestartAnnotationRequestRequestTypedDict": ".restartannotationrequestop",
    "RestartResult": ".restartresult",
    "RestartResultTypedDict": ".restartresult",
    "ReviewDetails": ".reviewdetails",
    "ReviewDetailsTypedDict": ".reviewdetails",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "StandaloneClip": ".standaloneclip",
    "StandaloneClipTypedDict": ".standaloneclip",
    "Status": ".transferjobdetails",
    "TransferJobDetails": ".transferjobdetails",
    "TransferJobDetailsTypedDict": ".transferjobdetails",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
