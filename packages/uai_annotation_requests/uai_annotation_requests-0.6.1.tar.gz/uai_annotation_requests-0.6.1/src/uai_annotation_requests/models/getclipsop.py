"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .clipbusinessstate import ClipBusinessState
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from uai_annotation_requests.types import BaseModel
from uai_annotation_requests.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
)


class SortBy(str, Enum):
    r"""sort the clips"""

    CREATED_AT = "createdAt"
    UPDATED_AT = "updatedAt"
    STATE = "state"


class SortOrder(str, Enum):
    r"""ascending or descending sort order"""

    ASC = "asc"
    DESC = "desc"


class GetClipsRequestTypedDict(TypedDict):
    project_id: str
    r"""the project id to get clips for"""
    annotation_request_id: NotRequired[List[str]]
    r"""filter clips by annotation request ids"""
    state: NotRequired[List[ClipBusinessState]]
    r"""filter clips by clip states"""
    clip_reference_id: NotRequired[List[str]]
    r"""filter by clip reference ids"""
    is_export_downloaded: NotRequired[bool]
    r"""filter clips by if the exported annotations are previously downloaded or not"""
    sort_by: NotRequired[SortBy]
    r"""sort the clips"""
    sort_order: NotRequired[SortOrder]
    r"""ascending or descending sort order"""
    skip: NotRequired[int]
    r"""skip the N first clips, can be used in combination with limit to implement pagination"""
    limit: NotRequired[int]
    r"""limits the output to N number of clips"""


class GetClipsRequest(BaseModel):
    project_id: Annotated[
        str,
        pydantic.Field(alias="projectId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""the project id to get clips for"""

    annotation_request_id: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="annotationRequestId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""filter clips by annotation request ids"""

    state: Annotated[
        Optional[List[ClipBusinessState]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""filter clips by clip states"""

    clip_reference_id: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="clipReferenceId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""filter by clip reference ids"""

    is_export_downloaded: Annotated[
        Optional[bool],
        pydantic.Field(alias="isExportDownloaded"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""filter clips by if the exported annotations are previously downloaded or not"""

    sort_by: Annotated[
        Optional[SortBy],
        pydantic.Field(alias="sortBy"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""sort the clips"""

    sort_order: Annotated[
        Optional[SortOrder],
        pydantic.Field(alias="sortOrder"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""ascending or descending sort order"""

    skip: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""skip the N first clips, can be used in combination with limit to implement pagination"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""limits the output to N number of clips"""
