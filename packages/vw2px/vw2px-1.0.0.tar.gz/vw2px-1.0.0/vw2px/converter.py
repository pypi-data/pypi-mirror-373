#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VW2PX - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ VW –≤ PX
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ VW –≤ PX –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ Vue, React, Next.js –∏ –¥—Ä—É–≥–∏—Ö
"""

__version__ = "1.0.0"

import os
import re
import click
from pathlib import Path
from colorama import init, Fore, Style
from typing import List, Tuple, Dict

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

class VWToPXConverter:
    def __init__(self, viewport_width: int):
        self.viewport_width = viewport_width
        self.vw_pattern = re.compile(r'(\d+(?:\.\d+)?)vw', re.IGNORECASE)
        self.px_pattern = re.compile(r'(\d+(?:\.\d+)?)px', re.IGNORECASE)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.supported_extensions = {
            '.js', '.jsx', '.ts', '.tsx', '.vue', '.html', '.css', '.scss', 
            '.sass', '.less', '.styl', '.json', '.md', '.txt'
        }
        
        # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.exclude_dirs = {
            'node_modules', '.git', '.next', 'dist', 'build', 
            '.nuxt', '.cache', 'coverage', '.vscode', '.idea'
        }
    
    def find_vw_values(self, project_path: str) -> List[Tuple[str, str, int, str]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ VW –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
        
        Returns:
            List[Tuple[file_path, line_content, line_number, vw_value]]
        """
        results = []
        project_path = Path(project_path)
        
        if not project_path.exists():
            click.echo(f"{Fore.RED}–û—à–∏–±–∫–∞: –ü—É—Ç—å {project_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return results
        
        click.echo(f"{Fore.CYAN}üîç –ü–æ–∏—Å–∫ VW –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ: {project_path}")
        
        for file_path in project_path.rglob('*'):
            if file_path.is_file():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if any(exclude_dir in file_path.parts for exclude_dir in self.exclude_dirs):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                if file_path.suffix.lower() not in self.supported_extensions:
                    continue
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        for line_num, line in enumerate(f, 1):
                            matches = self.vw_pattern.findall(line)
                            for match in matches:
                                results.append((
                                    str(file_path),
                                    line.strip(),
                                    line_num,
                                    match
                                ))
                except Exception as e:
                    click.echo(f"{Fore.YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
        
        return results
    
    def convert_vw_to_px(self, vw_value: str) -> float:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç VW –∑–Ω–∞—á–µ–Ω–∏–µ –≤ PX
        
        Args:
            vw_value: VW –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10.5")
            
        Returns:
            float: PX –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        try:
            vw_float = float(vw_value)
            px_value = (vw_float * self.viewport_width) / 100
            return round(px_value, 2)
        except ValueError:
            return 0.0
    
    def replace_vw_in_file(self, file_path: str, replacements: List[Tuple[str, str, int]]) -> bool:
        """
        –ó–∞–º–µ–Ω—è–µ—Ç VW –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ PX –≤ —Ñ–∞–π–ª–µ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            replacements: –°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω [(—Å—Ç–∞—Ä–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏)]
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            line_replacements = {}
            for old_value, new_value, line_num in replacements:
                if line_num not in line_replacements:
                    line_replacements[line_num] = []
                line_replacements[line_num].append((old_value, new_value))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            for line_num, line_reps in line_replacements.items():
                if 0 < line_num <= len(lines):
                    line = lines[line_num - 1]
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
                    line_reps.sort(key=lambda x: len(x[0]), reverse=True)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ
                    for old_value, new_value in line_reps:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
                        pattern = re.compile(rf'\b{re.escape(old_value)}vw\b', re.IGNORECASE)
                        line = pattern.sub(f'{new_value}px', line)
                    
                    lines[line_num - 1] = line
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            
            return True
            
        except Exception as e:
            click.echo(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
            return False
    
    def process_project(self, project_path: str, dry_run: bool = False) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ
            
        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        stats = {
            'files_processed': 0,
            'replacements_made': 0,
            'errors': 0
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ VW –∑–Ω–∞—á–µ–Ω–∏—è
        vw_values = self.find_vw_values(project_path)
        
        if not vw_values:
            click.echo(f"{Fore.YELLOW}üì≠ VW –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ!")
            return stats
        
        click.echo(f"{Fore.GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(vw_values)} VW –∑–Ω–∞—á–µ–Ω–∏–π")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ —Ñ–∞–π–ª–∞–º
        file_replacements = {}
        for file_path, line_content, line_num, vw_value in vw_values:
            if file_path not in file_replacements:
                file_replacements[file_path] = []
            
            px_value = self.convert_vw_to_px(vw_value)
            file_replacements[file_path].append((vw_value, px_value, line_num))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ–Ω–µ
            status = f"{Fore.YELLOW}[–ü–†–ï–î–ü–†–û–°–ú–û–¢–†]" if dry_run else f"{Fore.GREEN}[–ó–ê–ú–ï–ù–ê]"
            click.echo(f"{status} {file_path}:{line_num} | {vw_value}vw ‚Üí {px_value}px")
        
        if dry_run:
            click.echo(f"\n{Fore.CYAN}üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(vw_values)} –∑–∞–º–µ–Ω –≤ {len(file_replacements)} —Ñ–∞–π–ª–∞—Ö.")
            return stats
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        click.echo(f"\n{Fore.CYAN}üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—ã...")
        
        for file_path, replacements in file_replacements.items():
            if self.replace_vw_in_file(file_path, replacements):
                stats['files_processed'] += 1
                stats['replacements_made'] += len(replacements)
                click.echo(f"{Fore.GREEN}‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {file_path}")
            else:
                stats['errors'] += 1
        
        return stats

@click.command()
@click.option('--path', '-p', required=True, help='–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É')
@click.option('--viewport', '-v', default=1920, type=int, 
              help='–®–∏—Ä–∏–Ω–∞ viewport –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1920)')
@click.option('--dry-run', '-d', is_flag=True, 
              help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')
@click.option('--type', '-t', default='vw-to-px', 
              type=click.Choice(['vw-to-px', 'px-to-vw']), 
              help='–¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ vw-to-px)')
def main(path: str, viewport: int, dry_run: bool, type: str):
    """
    vw2px Converter - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –≤–µ–±-–ø—Ä–æ–µ–∫—Ç–æ–≤
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:
    - vw-to-px: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ VW –≤ PX
    - px-to-vw: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ PX –≤ VW (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
    """
    click.echo(f"{Fore.CYAN}üöÄ VW2PX - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä VW –≤ PX")
    click.echo(f"{Fore.CYAN}=" * 50)
    click.echo(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {path}")
    click.echo(f"üñ•Ô∏è  Viewport: {viewport}px")
    click.echo(f"üîÑ –¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {type}")
    click.echo(f"üîç –†–µ–∂–∏–º: {'–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä' if dry_run else '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–º–µ–Ω'}")
    click.echo(f"{Fore.CYAN}=" * 50)
    
    if type == 'px-to-vw':
        click.echo(f"{Fore.YELLOW}‚ö†Ô∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PX –≤ VW –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    converter = VWToPXConverter(viewport)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    stats = converter.process_project(path, dry_run)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    click.echo(f"\n{Fore.CYAN}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    click.echo(f"   üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['files_processed']}")
    click.echo(f"   üîÑ –ó–∞–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['replacements_made']}")
    if stats['errors'] > 0:
        click.echo(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
    
    if not dry_run and stats['replacements_made'] > 0:
        click.echo(f"\n{Fore.GREEN}üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    elif dry_run:
        click.echo(f"\n{Fore.YELLOW}üí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–º–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run")

if __name__ == '__main__':
    main()
