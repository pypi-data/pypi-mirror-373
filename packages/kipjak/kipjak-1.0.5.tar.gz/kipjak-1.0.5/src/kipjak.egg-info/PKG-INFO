Metadata-Version: 2.4
Name: kipjak
Version: 1.0.5
Summary: Concurrency via multithreading, multiprocessing and multihosting
Author-email: "S. Woods" <scott.suzuki@gmail.com>
License-Expression: MIT
Project-URL: Discussion, https://www.reddit.com/r/kipjak/
Project-URL: Documentation, https://kipjak-manual.s3.ap-southeast-2.amazonaws.com/1.0.0/index.html
Keywords: concurrency,multithreading,multiprocessing,asynchronous,networking
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Utilities
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: cffi
Requires-Dist: PyNaCl
Requires-Dist: ply
Dynamic: license-file

# Kipjak

s•**kipja**•c•**k**

A small, pelagic fish from the tuna species. Found in large schools in the
tropical and sub-tropical oceans of the world.

![PyPI - Python Version](https://img.shields.io/pypi/pyversions/kipjak)
![PyPI - Version](https://img.shields.io/pypi/v/kipjak)
![PyPI - Coverage](https://img.shields.io/badge/coverage-75%25-brightgreen)
![PyPI - Integration](https://img.shields.io/badge/integration-passing-cyan)

---

Concurrency via multithreading, multiprocessing and multihosting.

---

* Concurrency with clarity
* Cookbook of multithreading, multiprocessing and multihosting solutions
* Load distribution across threads, processes and hosts
* Self-regulating services that push back under heavy load
* Child processes as private, loadable libraries
* Definition and execution of process groups
* Foreground or background execution
* Networking without network addresses
* RPC or RESTful APIs
