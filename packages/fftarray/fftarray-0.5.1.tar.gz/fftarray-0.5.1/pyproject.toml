[project]
name = "fftarray"

# You can get the current version via 'pixi run -e dev hatch version'
# It does not get updated automatically in editable installs.
# A workaround can be found under https://github.com/maresb/hatch-vcs-footgun-example
# But currently we do not have a usage where this was important.
dynamic = [
    "version"
]
authors = [
    { name="Stefan Seckmeyer" },
    { name="Christian Struckmann" },
    { name="Gabriel Müller" },
    { name="Jan-Niclas Kirsten-Siemß" },
]
description = "A library to manage and effiently implement all complexities around the complex Fast Fourier Transform."
readme = "README.rst"
requires-python = ">=3.11"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    'Typing :: Typed',
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "numpy>=2.0",
    "array-api-compat>=1.11.0",
    "typing-extensions>=4.1",
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[project.urls]
Homepage = "https://github.com/QSTheory/fftarray"
Documentation = "https://qstheory.github.io/fftarray/main"
Repository = "https://github.com/QSTheory/fftarray"
Issues = "https://github.com/QSTheory/fftarray/issues"
Changelog = "https://qstheory.github.io/fftarray/main/changelog.html"

[project.optional-dependencies]
"jax" = [
    "jax>=0.4.33"
]

# Required for the constraint solver for dim parameters.
# Since z3-solver is a native package this is an optional
# dependency in order to keep FFTArray portable.
"dimsolver" = [
    "z3-solver",
]

# Dependencies which are only needed for the dashboard examples.
"dashboards" = [
    "fftarray[dimsolver]",
    "ipython",
    "bokeh",
    "scipy",
    "ipykernel",
    "matplotlib",
]

# Dependencies necessary for development of FFTArray
"dev" = [
    "fftarray[jax, torch, dimsolver, dashboards, check, doc, deploy]",
]

"deploy" = [
    "hatch",
    "twine",
]

"torch" = [
    "torch",
]

# Dependencies necessary for CI suite checks and tests.
"check" = [
    "fftarray[jax, torch, dimsolver, dashboards]",
    "mypy>=0.910",
    "pytest",
    "pytest-markdown-docs",
    "hypothesis",
    "ipython",
    "nbformat",
    "nbqa",
    "bokeh",
    "scipy",
    "pytest-cov",
    "pytest-xdist[psutil]",
    "pytest-split",
    "array-api-strict>=2.3.0",
    "ruff",
    "xarray",
]

# Dependencies necessary to build the docs.
"doc" = [
    "fftarray[jax, dimsolver]",
    "sphinx>=6.1",
    "sphinx-book-theme>=1.0.1",
    "sphinx-design",
    "sphinx-copybutton",
    "lxml_html_clean",
    "nbsphinx",
    "nbconvert>=7.16.5",
    "nbsphinx-link",
    "myst-nb",
    "m2r2",
    "matplotlib",
    "ipython",
    "bokeh",
    "scipy",
]

"build_pip_deps" = [
    "pip"
]

[tool.pixi.feature.doc.dependencies]
# Pandoc is not on pypi, therefore add it as a conda-forge depdency.
pandoc = ">=3.5,<4"

[tool.pixi.feature.check.dependencies]
# Pandoc is not on pypi, therefore add it as a conda-forge depdency.
pandoc = ">=3.5,<4"


[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
select = [
    "B",
    "E4",
    "E7",
    "E9",
    "F",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.pixi.tasks]
# Test the snippets in the markdown files in the docs folder.
test_doc_md = { cmd = ["python", "-m", "pytest", "docs/source/*", "--markdown-docs"]}
# Test snippets in documentation doc-strings.
test_src_docstrings = { cmd = ["python", "-m", "pytest", "src/*", "--doctest-modules"]}
# Run the general tests which are quick enough.
test = { cmd = ["python", "-m", "pytest"], depends-on = ["test_doc_md", "test_src_docstrings"]}
# Run all tests which including the ones with a bit longer runtimes (on the order of minutes)
test_all = { cmd = ["python", "-m", "pytest", "--include-slow"], depends-on = ["test_doc_md", "test_src_docstrings"]}

# Test command which allows to split Github CI runs into parallel runners.
test_all_group = { cmd = ["python", "-m", "pytest", "--include-slow", "--splitting-algorithm", "least_duration", "--splits", "$N_GROUPS", "--group", "$GROUP_ID"]}
# These durations are used to estimate the best split of tests when parallelizing.
# This only needs to be run when tests changed significantly.
# If the timings are out of date it just makes the split a bit less optimal.
store_test_durations = { cmd = ["python", "-m", "pytest", "--include-slow", "--store-durations"]}

# Build the release artifacts for FFTArray.
clean_dist_dir = { cmd = ["rm", "-rf", "dist/"] }
build_wheel = { cmd = ["hatch", "build"], depends-on = ["clean_dist_dir"] }
# Run ruff and mypy on all relevant files
ruff_all = { cmd = ["ruff", "check", "examples", "tests", "src/fftarray"]}
mypy_fftarray = { cmd = ["mypy", "src/fftarray"]}
mypy_examples_py = { cmd = ["mypy", "examples"]}
mypy_examples_nb = { cmd = ["nbqa", "mypy", "examples"]}
mypy_tests = { cmd = ["mypy", "tests"] }
mypy_all = { depends-on = ["mypy_fftarray", "mypy_examples_py", "mypy_examples_nb", "mypy_tests"]}

# Convert the README.md into restructured text because only that renders the equations well on PyPi.
update_readme_rst = { cmd = ['pandoc', '-f', 'markdown+lists_without_preceding_blankline', '-t', 'rst', "README.md", "-o", "README.rst"] }

# Run all tests and linters
check = { depends-on = ["mypy_all", "ruff_all", "test"]}
check_all = { depends-on = ["mypy_all", "ruff_all", "test_all"]}

# Run test suite and generate a code-coverage report.
cov_html = { cmd = ["python", "-m", "pytest", "--cov=./src", "--cov=./examples", "--cov-report=html"]}
cov_xml = { cmd = ["python", "-m", "pytest", "--cov=./src", "--cov=./examples", "--cov-report=xml"]}

# The following command builds the docs of all released versions
# and the tips of the branches defined in docs/helpers/generate_versions.py
# and combines them into a single doc with a version switcher.
doc_all_versions = { cmd = ["make", "all_versions"], "cwd" = "docs" }

# Only build the documentation in the current working tree.
doc_local = { cmd = ["make", "local"], "cwd" = "docs" }

# Build the documentation in the local working tree and open it in a browser.
# TODO: Currently only tested on macOS. Would be nice to make it an --open option like in cargo.
doc_open = { cmd = ["open", "docs/build/html/local/index.html"], depends-on = ["doc_local"] }


# Commands to recreate the requirements.txt file from the current state of pypi

clean_build_pip_deps = { cmd = ["pixi", "clean", "-e", "build-pip-deps"] }
install_pip_check_deps = { cmd = ["python", "-m", "pip", "install", "-e", ".[check]"] }
create_requirements_txt = { cmd = ["python", "-m", "pip", "freeze", "--exclude", "fftarray", ">", "requirements.txt"] }

[tool.pixi.tasks.update_requirements_txt]
depends-on = [
    { task = "clean_build_pip_deps" },
    { task = "install_pip_check_deps", environment = "build-pip-deps" },
    { task = "create_requirements_txt", environment = "build-pip-deps" },
]

[tool.pixi.project]
channels = ["conda-forge"]
# "osx-64" is incompatible with PyTorch on Python 3.13.
# "linux-aarch64" is incompatible with the Selenium driver.
# Without listing these platforms here, FFTArray can still be installed (for x86-64 macOS without PyTorch),
# but doing development does not work on these systems unfortunately.
platforms = ["linux-64", "osx-arm64", "win-64"]

[tool.pixi.pypi-dependencies]
fftarray = { path = ".", editable = true }

[tool.pixi.feature.jaxcuda]
# Needs to be disabled as workaround Part 1 for https://github.com/prefix-dev/pixi/issues/1051
# platforms = ["linux-64"]
system-requirements = {cuda = "12"}

# List jax cuda depdency here as linux-64 specific as workaround Part 2 for https://github.com/prefix-dev/pixi/issues/1051
[tool.pixi.feature.jaxcuda.target.linux-64.pypi-dependencies]
"fftarray" = {version="*", extras=["jax"]}
"jax" = {version=">=0.4.33", extras=["cuda12"]}


[tool.pixi.feature.cupycuda]
# Needs to be disabled as workaround Part 1 for https://github.com/prefix-dev/pixi/issues/1051
# platforms = ["linux-64"]
system-requirements = {cuda = "12"}

# Install cupy from conda-forge because that takes care of setting up CUDA correctly.
[tool.pixi.feature.cupycuda.target.linux-64.dependencies]
"cupy" = "*"

# Specific feature to allow testing under python 3.11
[tool.pixi.feature.py311.dependencies]
python = "3.11.*"
# array-api-strict 2.4.0 does not support NumPy interoperability with Python 3.11.
# Therefore we need to stay on 2.3.1 for Python 3.11.
array-api-strict = "==2.3.1"

# Specific feature to allow testing under python 3.12
[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

# Specific feature to allow testing under python 3.13
[tool.pixi.feature.py313.dependencies]
python = "3.13.*"

[tool.pixi.environments]
# Recursive optional dependencies are currently ignored by pixi environments: https://github.com/prefix-dev/pixi/issues/2024
# All dev dependencies including jaxcuda. Therefore this only works in linux at the moment.
devcuda = ["dev", "check", "doc", "jaxcuda", "torch", "cupycuda", "dimsolver", "dashboards", "deploy"]
# All dev dependencies with jax CPU
dev = ["dev", "check", "doc", "jax", "torch", "dimsolver", "dashboards", "deploy"]
# Environment to build the docs.
doc = ["doc", "jax", "dimsolver"]
# Environment to run the tests.
check = ["check", "jax", "torch", "dimsolver", "dashboards"]
# Environment to run the tests under CPython 3.11
check311 = ["py311", "check", "jax", "torch", "dimsolver", "dashboards"]
# Environment to run the tests under CPython 3.12
check312 = ["py312", "check", "jax", "torch", "dimsolver", "dashboards"]
# Environment to run the tests under CPython 3.13
check313 = ["py313", "check", "jax", "torch", "dimsolver", "dashboards"]

# Environment to create the requirements.txt used in the pip CI test
build-pip-deps = ["build_pip_deps"]

# Environments to run the examples with and without JAX CUDA
examplescuda = ["dashboards", "jaxcuda", "dimsolver"]
examples = ["dashboards", "jax", "dimsolver"]

[tool.pixi.feature.dashboards.dependencies]
selenium = "*"
firefox = "*"
geckodriver = "*"
