Metadata-Version: 2.4
Name: jupyterlab-cell-lock
Version: 0.1.1
Summary: JupyterLab extension for easily locking cells, making them read-only and undeletable.
Project-URL: Homepage, https://github.com/jrdnbradford/jupyterlab-cell-lock
Project-URL: Bug Tracker, https://github.com/jrdnbradford/jupyterlab-cell-lock/issues
Project-URL: Repository, https://github.com/jrdnbradford/jupyterlab-cell-lock.git
Author: Jordan Bradford
License: BSD 3-Clause License
        
        Copyright (c) 2025, Jordan Bradford
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived from
           this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
License-File: LICENSE
Keywords: jupyter,jupyterlab,jupyterlab-extension
Classifier: Framework :: Jupyter
Classifier: Framework :: Jupyter :: JupyterLab
Classifier: Framework :: Jupyter :: JupyterLab :: 4
Classifier: Framework :: Jupyter :: JupyterLab :: Extensions
Classifier: Framework :: Jupyter :: JupyterLab :: Extensions :: Prebuilt
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.9
Description-Content-Type: text/markdown

[![build](https://github.com/jrdnbradford/jupyterlab-cell-lock/actions/workflows/build.yaml/badge.svg)](https://github.com/jrdnbradford/jupyterlab-cell-lock/actions/workflows/build.yaml)
[![PyPI version](https://img.shields.io/pypi/v/jupyterlab-cell-lock.svg)](https://pypi.org/project/jupyterlab-cell-lock/)

# 🔒 jupyterlab-cell-lock

![JupyterLab UI showing "Lock all cells" and "Unlock all cells" buttons in the toolbar with lock and edit icons, respectively](https://raw.githubusercontent.com/jrdnbradford/jupyterlab-cell-lock/main/docs/img/ui.png)

A JupyterLab extension for easily locking cells, making them read-only and undeletable.

## ⚠️ Limitations

This extension modifies the cell metadata (`editable` and `deletable` fields) in the notebook file. This is _not_ a security feature. Any user with knowledge of JupyterLab or the notebook file format can manually edit or remove this metadata to bypass the lock. It is primarily for preventing accidental modifications, not intentional ones. You should always use source control for your code.

## 📝 Requirements

- JupyterLab >= 4.0, < 5

## 📦 Installation

```sh
pip install jupyterlab-cell-lock
```

# 💡 Use Cases

## Educators and Instructors

- **Distributing Assignments**: You can provide a template notebook with introductory text, problem descriptions, or starter code in read-only cells. This prevents students from accidentally deleting or changing the core parts of the assignment, while still allowing them to add their answers in new or designated cells.

- **Interactive Lecture Notes**: Share lecture notebooks with pre-populated, locked cells containing explanations and examples. Students can run the code, add their own notes, or experiment without altering your content.

## Students and Learners

- **Protecting Content**: When working with course material, tutorials, and assignments you can lock your notebook to ensure you don't accidentally delete or modify your work while experimenting with new cells.

## Researchers and Teams

- **Sharing Analyses and Code**: When sharing a notebook, you can lock the cells containing the final results, plots, and key methodology. This helps others on your team run the notebook and see the output without risk of accidentally changing the notebook.

- **Creating Templates**: Lock down template notebooks used for standard data analysis workflows. This ensures everyone on the team uses the same core steps while allowing them to add their own custom analyses.
