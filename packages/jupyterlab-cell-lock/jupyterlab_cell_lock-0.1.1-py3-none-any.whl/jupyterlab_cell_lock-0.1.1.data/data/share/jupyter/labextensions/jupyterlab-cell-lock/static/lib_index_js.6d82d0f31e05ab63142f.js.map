{"version":3,"file":"lib_index_js.6d82d0f31e05ab63142f.js","mappings":"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","sources":["webpack://jupyterlab-cell-lock/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { lockIcon, editIcon } from '@jupyterlab/ui-components';\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'metadata-editor:plugin',\n  autoStart: true,\n  requires: [INotebookTracker],\n  activate: (app: JupyterFrontEnd, tracker: INotebookTracker) => {\n    console.log('jupyterlab_cell_lock extension activated!');\n\n    const toggleCellMetadata = (\n      editable: boolean,\n      deletable: boolean,\n      tracker: INotebookTracker\n    ) => {\n      const current = tracker.currentWidget;\n      if (!current) {\n        console.warn('No active notebook.');\n        return;\n      }\n\n      const cells = current.content.model?.cells;\n      if (!cells) {\n        return;\n      }\n\n      // JupyterLab may omit \"editable\"/\"deletable\" when they are true,\n      // as this is the default. To handle this correctly, the extension treats\n      // missing values as true so the comparison logic works as expected.\n      const asBool = (v: unknown) => (typeof v === 'boolean' ? v : true);\n\n      let count = 0;\n      for (let i = 0; i < cells.length; i++) {\n        const cell = cells.get(i);\n\n        const curEditable = asBool(cell.getMetadata('editable'));\n        const curDeletable = asBool(cell.getMetadata('deletable'));\n\n        if (curEditable !== editable || curDeletable !== deletable) {\n          cell.setMetadata('editable', editable);\n          cell.setMetadata('deletable', deletable);\n          count++;\n        }\n      }\n\n      const action = editable ? 'unlocked' : 'locked';\n      const message = editable\n        ? 'editable and deletable.'\n        : 'read-only and undeletable.';\n\n      const dialogBody =\n        count === 0\n          ? `All cells were already ${action}.`\n          : `${count} cell${count > 1 ? 's' : ''} ${\n              count > 1 ? 'were' : 'was'\n            } successfully ${action}. All cells are now ${message}`;\n\n      showDialog({\n        title: `Cells ${action}`,\n        body: dialogBody,\n        buttons: [Dialog.okButton()]\n      });\n    };\n\n    // Define the lock command\n    const lockCommand = 'metadata-editor:lock-cells';\n    app.commands.addCommand(lockCommand, {\n      label: 'Make All Cells Read-Only & Undeletable',\n      execute: () => {\n        toggleCellMetadata(false, false, tracker);\n      }\n    });\n\n    // Define the unlock command\n    const unlockCommand = 'metadata-editor:unlock-cells';\n    app.commands.addCommand(unlockCommand, {\n      label: 'Make All Cells Editable & Deletable',\n      execute: () => {\n        toggleCellMetadata(true, true, tracker);\n      }\n    });\n\n    // Add toolbar buttons\n    tracker.widgetAdded.connect((_, notebookPanel) => {\n      const lockButton = new ToolbarButton({\n        label: 'Lock all cells',\n        icon: lockIcon,\n        onClick: () => {\n          app.commands.execute(lockCommand);\n        },\n        tooltip: 'Lock all cells (read-only & undeletable)'\n      });\n\n      const unlockButton = new ToolbarButton({\n        label: 'Unlock all cells',\n        icon: editIcon,\n        onClick: () => {\n          app.commands.execute(unlockCommand);\n        },\n        tooltip: 'Unlock all cells (editable & deletable)'\n      });\n\n      notebookPanel.toolbar.insertItem(10, 'lockCells', lockButton);\n      notebookPanel.toolbar.insertItem(11, 'unlockCells', unlockButton);\n    });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}