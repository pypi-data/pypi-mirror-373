[build-system]
requires = ["setuptools>=62.6", "wheel", "setuptools-git-versioning>=2.0,<3"]
build-backend = "setuptools.build_meta"

[project]
name = "BudapestMetroDisplay"
dynamic = ["version", "dependencies"]
requires-python = ">=3.11"
authors = [
    { name = "denes44" },
]
maintainers = [
    { name = "denes44" }
]
description = "Background service for a BudapestMetroDisplay hardware LED display"
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Environment :: No Input/Output (Daemon)",
    "Intended Audience :: End Users/Desktop",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Artistic Software",
    "Topic :: Multimedia"
]

[project.urls]
Documentation = "https://github.com/denes44/BudapestMetroDisplay/blob/main/software/README.md"
Repository = "https://github.com/denes44/BudapestMetroDisplay.git"
"Bug Tracker" = "https://github.com/denes44/BudapestMetroDisplay/issues"
Changelog = "https://github.com/denes44/BudapestMetroDisplay/blob/main/software/CHANGELOG.md"

[project.scripts]
BudapestMetroDisplay = "BudapestMetroDisplay.main:main"

[tool.setuptools.package-data]
# include VERSION file to a package
BudapestMetroDisplay = ["VERSION"]

[tool.setuptools]
# this package will read some included files in runtime, avoid installing it as .zip
zip-safe = false

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.setuptools-git-versioning]
enabled = true
version_file = "src/BudapestMetroDisplay/VERSION"
count_commits_from_version_file = true
dev_template = "{tag}.dev{ccount}"
dirty_template = "{tag}.dev{ccount}"

[tool.pytest.ini_options]
pythonpath = [
  ".", "src",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = ["N999","ANN401","PLR2004","G004","DTZ001","DTZ002","DTZ006",
"DTZ005","C901","PLR0912","PLR0915","S608","S311","PLW0603","TRY003",
"D203","D213","D100","DOC201","PLR1702","DOC501","RUF029","PLC0415","TD","FIX"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
