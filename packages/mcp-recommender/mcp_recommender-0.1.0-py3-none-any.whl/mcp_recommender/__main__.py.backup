#!/usr/bin/env python3
"""
MCP推荐器模块入口点
支持 python -m mcp_recommender 运行方式
"""

import sys
import argparse
import asyncio
import os
from .server import recommender

# 设置控制台编码为UTF-8，避免Windows下的GBK编码问题
if sys.platform.startswith('win'):
    try:
        # 设置环境变量
        os.environ['PYTHONIOENCODING'] = 'utf-8'
        # 只在有buffer属性时才重新包装
        if hasattr(sys.stdout, 'buffer'):
            import codecs
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
        if hasattr(sys.stderr, 'buffer'):
            import codecs
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
    except Exception:
        pass  # 如果设置失败，继续执行

def safe_print(text):
    """安全打印函数，过滤可能导致编码问题的字符"""
    try:
        print(text)
    except UnicodeEncodeError:
        # 移除emoji和特殊Unicode字符
        safe_text = ''.join(c for c in text if ord(c) < 65536 and (c.isprintable() or c in '\n\t '))
        try:
            print(safe_text)
        except:
            # 最后的备选方案：只保留ASCII字符
            ascii_text = ''.join(c for c in text if ord(c) < 128)
            print(ascii_text)

def clean_text(text):
    """清理文本中的emoji字符"""
    if not text:
        return text
    # 移除常见的emoji字符
    cleaned = text.replace('️', '').replace('🏠', '').replace('🚀', '').replace('📊', '').replace('🔍', '')
    return cleaned.strip()

def test_mode():
    """测试模式 - 显示基本信息和示例查询"""
    safe_print("MCP推荐器测试模式")
    safe_print(f"已加载 {len(recommender.mcps)} 个MCP服务器")
    safe_print("支持的功能:")
    safe_print("  - recommend: 根据关键词推荐MCP服务器")
    safe_print("  - list_categories: 列出所有分类")
    safe_print("  - get_functional_keywords: 获取功能关键词")
    
    # 显示分类统计
    categories = {}
    for mcp in recommender.mcps:
        cat = mcp.get('category', 'Unknown')
        # 清理分类名称中的emoji字符
        cat = clean_text(cat)
        categories[cat] = categories.get(cat, 0) + 1
    
    safe_print(f"\n分类统计 (共{len(categories)}个分类):")
    for cat, count in sorted(categories.items(), key=lambda x: x[1], reverse=True)[:10]:
        safe_print(f"  {cat}: {count}个")
    
    # 示例推荐
    safe_print("\n示例推荐 (关键词: 'database'):")
    scored_results = recommender.search_mcps("database", limit=3)
    for i, (mcp, score) in enumerate(scored_results, 1):
        name = clean_text(mcp['name'])
        desc = clean_text(mcp['short_description'][:60])
        safe_print(f"  {i}. {name} - {desc}...")
    
    safe_print("\n测试完成！")

def server_mode():
    """服务器模式 - 启动MCP服务器"""
    # MCP服务器模式不能输出任何非JSON内容到stdout
    # 所有调试信息都输出到stderr
    try:
        from .server import create_server
        # 将调试信息输出到stderr而不是stdout
        print("启动MCP推荐器服务器...", file=sys.stderr)
        print(f"已加载 {len(recommender.mcps)} 个MCP服务器", file=sys.stderr)
        print("启动MCP服务器...", file=sys.stderr)
        
        server = create_server()
        asyncio.run(server.run())
    except KeyboardInterrupt:
        print("\n服务器已停止", file=sys.stderr)
    except Exception as e:
        print(f"\n启动失败: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    """主函数"""
    parser = argparse.ArgumentParser(description="MCP推荐器")
    parser.add_argument("--test", action="store_true", help="运行测试模式")
    parser.add_argument("--server", action="store_true", help="启动服务器模式")
    
    args = parser.parse_args()
    
    if args.test:
        test_mode()
    elif args.server:
        server_mode()
    else:
        # 默认运行服务器模式而不是测试模式
        server_mode()

if __name__ == "__main__":
    main()