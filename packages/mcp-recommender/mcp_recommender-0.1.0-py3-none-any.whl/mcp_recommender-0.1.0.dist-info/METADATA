Metadata-Version: 2.4
Name: mcp-recommender
Version: 0.1.0
Summary: A smart MCP server to recommend other MCPs based on your needs.
Project-URL: Homepage, https://github.com/your-username/mcp-recommender
Author-email: CodeBuddy <codebuddy@tencent.com>
License: MIT
License-File: LICENSE
Keywords: ai,mcp,model-context-protocol,recommendations,server
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: build>=1.3.0
Requires-Dist: fastmcp>=0.4.0
Requires-Dist: requests>=2.31.0
Requires-Dist: twine>=6.1.0
Provides-Extra: dev
Requires-Dist: build>=1.3.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: twine>=6.1.0; extra == 'dev'
Description-Content-Type: text/markdown

# MCP Recommender

A smart MCP (Model Context Protocol) server that provides intelligent recommendations for other MCP servers based on your development needs.

## Features

- 🔍 **Smart Search**: Find MCP servers using natural language queries
- 📊 **Rich Database**: Access to 874+ curated MCP servers across 36+ categories
- 🎯 **Intelligent Matching**: Advanced scoring algorithm for relevant recommendations
- 🏷️ **Category Filtering**: Filter by specific categories and programming languages
- 🚀 **Easy Integration**: Simple setup with uv package manager
- 🔧 **Multiple Interfaces**: Support for both CLI and MCP client integration

## Installation

### Using uv (Recommended)

```bash
# Clone the repository
git clone https://github.com/mcp-team/mcp-recommender.git
cd mcp-recommender

# Install with uv
uv sync

# Test the installation
uv run -m mcp_recommender --test
```

### Using pip

```bash
pip install mcp-recommender
```

## Usage

### Command Line Interface

```bash
# Test mode - verify installation and see sample recommendations
uv run -m mcp_recommender --test

# Server mode - start the MCP server
uv run -m mcp_recommender --server

# Debug mode - detailed diagnostic information
uv run -m mcp_recommender --debug
```

### MCP Client Integration

Add to your MCP client configuration:

```json
{
  "mcpServers": {
    "mcp-recommender": {
      "isActive": true,
      "name": "mcp-recommender",
      "type": "stdio",
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/mcp-recommender",
        "run",
        "-m",
        "mcp_recommender"
      ]
    }
  }
}
```

### Available Tools

Once integrated, you can use these tools in your MCP client:

#### `recommend_mcp`
Get intelligent MCP server recommendations based on your needs.

**Parameters:**
- `query` (string): Description of functionality you need
- `limit` (integer, optional): Maximum number of recommendations (default: 5)
- `category` (string, optional): Filter by specific category
- `language` (string, optional): Filter by programming language

**Example:**
```
recommend_mcp("database operations with SQLite", limit=3)
```

#### `list_categories`
List all available MCP categories with counts.

#### `get_functional_keywords`
Show functional keyword mappings for better search results.

## Categories

The recommender covers 36+ categories including:

- **Developer Tools** (120+ servers)
- **Databases** (79+ servers)
- **Search & Data Extraction** (69+ servers)
- **Cloud Platforms** (39+ servers)
- **Security** (39+ servers)
- **Communication** (36+ servers)
- **Browser Automation** (23+ servers)
- **Knowledge & Memory** (22+ servers)
- And many more...

## Development

### Setup Development Environment

```bash
# Clone and setup
git clone https://github.com/mcp-team/mcp-recommender.git
cd mcp-recommender

# Install development dependencies
uv sync --dev

# Run tests
uv run pytest

# Build package
uv build
```

### Project Structure

```
mcp-recommender/
├── mcp_recommender/           # Main package
│   ├── __init__.py
│   ├── __main__.py           # CLI entry point
│   ├── server.py             # MCP server implementation
│   └── data/                 # MCP database and keywords
│       ├── mcp_database.json
│       └── functional_keywords.json
├── tests/                    # Test suite
├── LICENSE                   # MIT License
├── README.md                 # This file
└── pyproject.toml           # Package configuration
```

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Built with [FastMCP](https://github.com/jlowin/fastmcp) framework
- MCP database curated from the awesome MCP community
- Powered by the [Model Context Protocol](https://modelcontextprotocol.io/)

## Support

- 📖 [Documentation](https://github.com/mcp-team/mcp-recommender#readme)
- 🐛 [Issue Tracker](https://github.com/mcp-team/mcp-recommender/issues)
- 💬 [Discussions](https://github.com/mcp-team/mcp-recommender/discussions)

---

Made with ❤️ by the MCP community