from collections.abc import Callable, Sequence
from typing import Annotated, overload

from numpy.typing import ArrayLike


class CUDABuffer:
    @property
    def __cuda_array_interface__(self) -> None: ...

    @property
    def device_index(self) -> None: ...

class CUDAConfig:
    pass

class NvDecDecoder:
    def reset(self) -> None: ...

    def init(self, device_config: CUDAConfig, codec: "spdl::core::Codec<(spdl::core::MediaType)1>", *, crop_left: int = 0, crop_top: int = 0, crop_right: int = 0, crop_bottom: int = 0, scale_width: int = -1, scale_height: int = -1) -> None: ...

    def decode(self, packets: "spdl::core::Packets<(spdl::core::MediaType)1>") -> list[CUDABuffer]: ...

    def flush(self) -> list[CUDABuffer]: ...

def built_with_cuda() -> bool: ...

def built_with_nvcodec() -> bool: ...

def built_with_nvjpeg() -> bool: ...

def cpu_storage(size: int) -> "spdl::core::CPUStorage": ...

def cuda_config(device_index: int, stream: int = 0, allocator: tuple[Callable[[int, int, int], int], Callable[[int], None]] | None = None) -> CUDAConfig: ...

@overload
def decode_image_nvjpeg(data: bytes, *, device_config: CUDAConfig, scale_width: int = -1, scale_height: int = -1, pix_fmt: str = 'rgb', _zero_clear: bool = False) -> None: ...

@overload
def decode_image_nvjpeg(data: Sequence[bytes], *, device_config: CUDAConfig, scale_width: int, scale_height: int, pix_fmt: str = 'rgb', _zero_clear: bool = False) -> None: ...

def init() -> None: ...

def nv12_to_planar_bgr(buffers: object, *, device_config: CUDAConfig, matrix_coeff: int = 1) -> CUDABuffer: ...

def nv12_to_planar_rgb(buffers: object, *, device_config: CUDAConfig, matrix_coeff: int = 1) -> CUDABuffer: ...

def synchronize_stream(arg: object, /) -> None: ...

@overload
def transfer_buffer(buffer: "spdl::core::CPUBuffer", *, device_config: CUDAConfig) -> None: ...

@overload
def transfer_buffer(buffer: Annotated[ArrayLike, dict(order='C', device='cpu')], *, device_config: CUDAConfig) -> None: ...

def transfer_buffer_cpu(buffer: Annotated[ArrayLike, dict(order='C', device='cuda')]) -> None: ...
