[tool.poetry]
name = "manabi"
version = "2.0.0"
description = "Provide WebDAV access for documents."
homepage = "https://github.com/projectcaluma/manabi"
repository = "https://github.com/projectcaluma/manabi"
authors = ["Adfinis AG"]
license = "AGPL-3.0-or-later"
readme = "README.md"
classifiers = [
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
include = ["CHANGELOG.md"]
exclude = [
    "manabi/__main__.py",
    "manabi/conftest.py",
    "manabi/mock.py",
    "manabi/*_test.py",
    "manabi/data",
]
packages = [
    { include = "manabi" },
    { include = "manabi_migrations", from = "manabi_django" },
]

[tool.poetry.dependencies]
python = ">=3.12,<4"
WsgiDAV = "^4.3.0"
pybranca = "^0.5.0"
pybase62 = "^1.0.0"
attrs = ">=23.1,<26.0"
django = ">=4.2,<5.3"
psycopg2-binary = "^2.9.3"
u-msgpack-python = "^2.8.0"
boto3 = "^1.34.21"
smart-open = {extras = ["s3"], version = ">=6.4,<8.0"}

[tool.poetry.group.dev.dependencies]
cheroot = "10.0.1"
hypothesis = "6.138.13"
moto = {extras = ["s3"], version = "5.1.11"}
mypy = "1.17.1"
pdbpp = "0.11.7"
pytest = "8.4.1"
pytest-env = "1.1.5"
python-semantic-release = "7.34.6"
requests = "2.32.5"
requests-mock = "1.12.1"
ruff = "0.12.11"
syrupy = "4.9.1"
types-psycopg2 = "2.9.21.20250809"
types-requests = "2.32.4.20250809"

[tool.pytest.ini_options]
env = [
    "MOTO_S3_CUSTOM_ENDPOINTS=http://127.0.0.1:9000",
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
combine_as_imports = true
line_length = 88

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
branch = "main"
major_on_zero = false
upload_to_repository = true
upload_to_release = true
build_command = "poetry build"
commit_subject = "chore(release): v{version}"
commit_author = "github-actions <github-actions@github.com>"

[tool.mypy]
check_untyped_defs = true

[tool.ruff]
line-length = 88
exclude = ["migrations"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 88

[tool.ruff.lint]
select = [
    "F",       # pyflakes
    "E",       # pycodestyle errors
    "I",       # isort
    "C90",     # mccabe
    "D",       # pydocstyle
    "ASYNC",   # flake8-async
    "B",       # flake8-bugbear
    "COM",     # flake8-commas
    "T10",     # flake8-debugger
    "EXE",     # flake8-executable
    "ISC",     # flake8-implicit-str-concat
    "ICN",     # flake8-import-conventions
    "INP",     # flake8-no-pep420
    "PIE",     # flake8-pie
    "PYI",     # flake8-pyi
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "SLOT",    # flake8-slots
    "TID",     # flake8-tidy-imports
    "TCH",     # flake8-type-checking
    "INT",     # flake8-gettext
    "PT",      # flake8-pytest-style
    "ERA",     # eradicate
    "W605",    # invalid escape sequence
]
ignore = [
    "D203",    # we prefer blank-line-before-class (D211) for black compat
    "D213",    # we prefer multi-line-summary-first-line (D212)
    "COM812",  # ignore due to conflict with formatter
    "ISC001",  # ignore due to conflict with formatter
    "E501",    # managed by formatter
    "TD002",   # don't require author of TODO
    "TD003",   # don't require link to TODO
    "D100",    # don't enforce existance of docstrings
    "D101",    # don't enforce existance of docstrings
    "D102",    # don't enforce existance of docstrings
    "D103",    # don't enforce existance of docstrings
    "D104",    # don't enforce existance of docstrings
    "D105",    # don't enforce existance of docstrings
    "D106",    # don't enforce existance of docstrings
    "D107",    # don't enforce existance of docstrings
]

[tool.ruff.lint.per-file-ignores]
"**/{mock.py,conftest.py,*test*.py}" = [
    "D",       # pydocstyle is optional for tests
    "ANN",     # flake8-annotations are optional for tests
    "S101",    # assert is allow in tests
    "S105",    # tests may have hardcoded secrets
    "S106",    # tests may have hardcoded passwords
    "S311",    # tests may use pseudo-random generators
    "S108",    # /tmp is allowed in tests since it's expected to be mocked
    "DTZ00",   # tests often run in UTC
    "INP001",  # tests do not need a dunder init
    "PLR0913", # tests can have a lot of arguments (fixtures)
    "PLR2004", # tests can use magic values
]
"**/*/factories.py" = [
    "S311",    # factories may use pseudo-random generators
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["manabi"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
