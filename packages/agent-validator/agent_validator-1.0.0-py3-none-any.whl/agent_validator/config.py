"""Configuration management for agent_validator."""

import os
from pathlib import Path

try:
    import tomllib
except ImportError:
    import tomli as tomllib

from .typing_ import Config


def get_config() -> Config:
    """
    Get configuration with precedence: function args > env vars > config file.

    Returns:
        Config object with current settings
    """
    # Start with defaults
    config = Config()

    # Load from config file
    config_file = Path.home() / ".agent_validator" / "config.toml"
    if config_file.exists():
        try:
            with open(config_file, "rb") as f:
                file_config = tomllib.load(f)

            # Update config with file values
            if "max_output_bytes" in file_config:
                config.max_output_bytes = file_config["max_output_bytes"]
            if "max_str_len" in file_config:
                config.max_str_len = file_config["max_str_len"]
            if "max_list_len" in file_config:
                config.max_list_len = file_config["max_list_len"]
            if "max_dict_keys" in file_config:
                config.max_dict_keys = file_config["max_dict_keys"]
            if "log_to_cloud" in file_config:
                config.log_to_cloud = file_config["log_to_cloud"]
            if "cloud_endpoint" in file_config:
                config.cloud_endpoint = file_config["cloud_endpoint"]
            if "license_key" in file_config:
                config.license_key = file_config["license_key"]
            if "webhook_secret" in file_config:
                config.webhook_secret = file_config["webhook_secret"]
            if "timeout_s" in file_config:
                config.timeout_s = file_config["timeout_s"]
            if "retries" in file_config:
                config.retries = file_config["retries"]
        except Exception:
            # Ignore config file errors
            pass

    # Override with environment variables
    if "AGENT_VALIDATOR_MAX_OUTPUT_BYTES" in os.environ:
        try:
            config.max_output_bytes = int(
                os.environ["AGENT_VALIDATOR_MAX_OUTPUT_BYTES"]
            )
        except ValueError:
            pass

    if "AGENT_VALIDATOR_MAX_STR_LEN" in os.environ:
        try:
            config.max_str_len = int(os.environ["AGENT_VALIDATOR_MAX_STR_LEN"])
        except ValueError:
            pass

    if "AGENT_VALIDATOR_MAX_LIST_LEN" in os.environ:
        try:
            config.max_list_len = int(os.environ["AGENT_VALIDATOR_MAX_LIST_LEN"])
        except ValueError:
            pass

    if "AGENT_VALIDATOR_MAX_DICT_KEYS" in os.environ:
        try:
            config.max_dict_keys = int(os.environ["AGENT_VALIDATOR_MAX_DICT_KEYS"])
        except ValueError:
            pass

    if "AGENT_VALIDATOR_LOG_TO_CLOUD" in os.environ:
        config.log_to_cloud = os.environ["AGENT_VALIDATOR_LOG_TO_CLOUD"].lower() in (
            "1",
            "true",
            "yes",
        )

    if "AGENT_VALIDATOR_ENDPOINT" in os.environ:
        config.cloud_endpoint = os.environ["AGENT_VALIDATOR_ENDPOINT"]

    if "AGENT_VALIDATOR_LICENSE_KEY" in os.environ:
        config.license_key = os.environ["AGENT_VALIDATOR_LICENSE_KEY"]

    if "AGENT_VALIDATOR_WEBHOOK_SECRET" in os.environ:
        config.webhook_secret = os.environ["AGENT_VALIDATOR_WEBHOOK_SECRET"]

    if "AGENT_VALIDATOR_TIMEOUT_S" in os.environ:
        try:
            config.timeout_s = int(os.environ["AGENT_VALIDATOR_TIMEOUT_S"])
        except ValueError:
            pass

    if "AGENT_VALIDATOR_RETRIES" in os.environ:
        try:
            config.retries = int(os.environ["AGENT_VALIDATOR_RETRIES"])
        except ValueError:
            pass

    return config


def save_config(config: Config) -> None:
    """
    Save configuration to file.

    Args:
        config: Configuration to save
    """
    config_dir = Path.home() / ".agent_validator"
    config_dir.mkdir(parents=True, exist_ok=True)

    config_file = config_dir / "config.toml"

    config_dict = {
        "max_output_bytes": config.max_output_bytes,
        "max_str_len": config.max_str_len,
        "max_list_len": config.max_list_len,
        "max_dict_keys": config.max_dict_keys,
        "log_to_cloud": config.log_to_cloud,
        "cloud_endpoint": config.cloud_endpoint,
        "timeout_s": config.timeout_s,
        "retries": config.retries,
    }

    # Only include sensitive fields if they're set
    if config.license_key:
        config_dict["license_key"] = config.license_key
    if config.webhook_secret:
        config_dict["webhook_secret"] = config.webhook_secret

    # Write TOML file
    with open(config_file, "w") as f:
        f.write("# Agent Validator Configuration\n")
        f.write("# This file is automatically generated\n\n")

        for key, value in config_dict.items():
            if isinstance(value, str):
                f.write(f'{key} = "{value}"\n')
            elif isinstance(value, bool):
                f.write(f"{key} = {str(value).lower()}\n")
            else:
                f.write(f"{key} = {value}\n")


def create_default_config() -> None:
    """Create default configuration file if it doesn't exist."""
    config_file = Path.home() / ".agent_validator" / "config.toml"
    if not config_file.exists():
        default_config = Config()
        save_config(default_config)
