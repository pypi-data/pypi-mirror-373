Metadata-Version: 2.1
Name: BrainX
Version: 2025.8.31
Summary: Ecosystem for Brain Modeling.
Home-page: https://github.com/chaobrain/brain-modeling-ecosystem
Author: Brain Modeling Ecosystem Developers
Author-email: Brain Modeling Ecosystem Developers <chao.brain@qq.com>
License: Apache-2.0 license
Project-URL: homepage, http://github.com/chaobrain/brain-modeling-ecosystem
Project-URL: repository, http://github.com/chaobrain/brain-modeling-ecosystem
Keywords: computational neuroscience,brain-inspired computation,brain dynamics programming
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.15
Requires-Dist: jax<0.8.0,>=0.4.35
Requires-Dist: brainunit==0.0.17
Requires-Dist: brainstate==0.1.7
Requires-Dist: brainevent==0.0.4
Requires-Dist: braincell==0.0.4
Requires-Dist: braintools==0.0.9
Requires-Dist: brainscale==0.0.9
Requires-Dist: msgpack>=1.1.0
Requires-Dist: matplotlib
Provides-Extra: cpu
Requires-Dist: numpy>=1.15; extra == "cpu"
Requires-Dist: jax[cpu]<0.8.0,>=0.4.35; extra == "cpu"
Requires-Dist: brainunit[cpu]==0.0.17; extra == "cpu"
Requires-Dist: brainstate[cpu]==0.1.7; extra == "cpu"
Requires-Dist: brainevent[cpu]==0.0.4; extra == "cpu"
Requires-Dist: braincell[cpu]==0.0.4; extra == "cpu"
Requires-Dist: braintools[cpu]==0.0.9; extra == "cpu"
Requires-Dist: brainscale[cpu]==0.0.9; extra == "cpu"
Requires-Dist: msgpack>=1.1.0; extra == "cpu"
Requires-Dist: matplotlib; extra == "cpu"
Provides-Extra: cuda12
Requires-Dist: numpy>=1.15; extra == "cuda12"
Requires-Dist: jax[cuda12]<0.8.0,>=0.4.35; extra == "cuda12"
Requires-Dist: brainunit[cuda12]==0.0.17; extra == "cuda12"
Requires-Dist: brainstate[cuda12]==0.1.7; extra == "cuda12"
Requires-Dist: brainevent[cuda12]==0.0.4; extra == "cuda12"
Requires-Dist: braincell[cuda12]==0.0.4; extra == "cuda12"
Requires-Dist: braintools[cuda12]==0.0.9; extra == "cuda12"
Requires-Dist: brainscale[cuda12]==0.0.9; extra == "cuda12"
Requires-Dist: msgpack>=1.1.0; extra == "cuda12"
Requires-Dist: matplotlib; extra == "cuda12"
Provides-Extra: gpu
Requires-Dist: numpy>=1.15; extra == "gpu"
Requires-Dist: jax[cuda12]<0.8.0,>=0.4.35; extra == "gpu"
Requires-Dist: brainunit[cuda12]==0.0.17; extra == "gpu"
Requires-Dist: brainstate[cuda12]==0.1.7; extra == "gpu"
Requires-Dist: brainevent[cuda12]==0.0.4; extra == "gpu"
Requires-Dist: braincell[cuda12]==0.0.4; extra == "gpu"
Requires-Dist: braintools[cuda12]==0.0.9; extra == "gpu"
Requires-Dist: brainscale[cuda12]==0.0.9; extra == "gpu"
Requires-Dist: msgpack>=1.1.0; extra == "gpu"
Requires-Dist: matplotlib; extra == "gpu"
Provides-Extra: testing
Requires-Dist: pytest; extra == "testing"
Provides-Extra: tpu
Requires-Dist: numpy>=1.15; extra == "tpu"
Requires-Dist: jax[tpu]<0.8.0,>=0.4.35; extra == "tpu"
Requires-Dist: brainunit[tpu]==0.0.17; extra == "tpu"
Requires-Dist: brainstate[tpu]==0.1.7; extra == "tpu"
Requires-Dist: brainevent[tpu]==0.0.4; extra == "tpu"
Requires-Dist: braincell[tpu]==0.0.4; extra == "tpu"
Requires-Dist: braintools[tpu]==0.0.9; extra == "tpu"
Requires-Dist: brainscale[tpu]==0.0.9; extra == "tpu"
Requires-Dist: msgpack>=1.1.0; extra == "tpu"
Requires-Dist: matplotlib; extra == "tpu"

# Ecosystem for Brain Modeling 

[![PyPI version](https://img.shields.io/pypi/v/brainx)](https://pypi.org/project/brainx/)
![Read the Docs](https://img.shields.io/readthedocs/brainmodeling)
[![Continuous Integration](https://github.com/chaobrain/brain-modeling-ecosystem/actions/workflows/CI.yml/badge.svg)](https://github.com/chaobrain/brain-modeling-ecosystem/actions/workflows/CI.yml)


<p align="center">
  	<img alt="Header image of Brain Modeling Ecosystem." src="https://raw.githubusercontent.com/chaobrain/brain-modeling-ecosystem/main/docs/_static/bdp-ecosystem.png" width=50%>
</p> 


## Overview

Ecosystem for Brain Modeling provides comprehensive framework for computational neuroscience and brain simulation. 
It provides tools and libraries for researchers to model, simulate, train, and analyze neural systems at different scales.

**Core components** in this ecosystem includes:

- [BrainUnit](https://github.com/chaobrain/brainunit): Comprehensive physical units and unit-aware mathematical system for brain dynamics.

- [BrainCell](https://github.com/chaobrain/braincell): Intuitive, parallel, and efficient simulation for biologically detailed brain cell modeling. 

- [BrainState](https://github.com/chaobrain/brainstate): State-based IR compilation for efficient simulation of brain models on CPUs, GPUs, and TPUs.

- [BrainTaichi](https://github.com/chaobrain/braintaichi): The first-generation framework for customizing event-driven operators based on Taichi Lang syntax.

- [BrainEvent](https://github.com/chaobrain/brainevent): Enabling event-driven computations in brain dynamics. 

- [BrainScale](https://github.com/chaobrain/brainscale): Enabling scalable online learning for brain dynamics: $O(N)$ complexity for SNNs, and $O(N^2)$ for RNN computations.

- [BrainTools](https://github.com/chaobrain/braintools): Commonly used tools for brain dynamics programming, for example checkpointing. 


## Installation

The ecosystem can be installed with the following command:

```bash
pip install BrainX -U
```

This command installs the core package and pins specific versions of the component projects known to work together, ensuring compatibility based on integration tests.


On CPU platforms, the following command can be used to install the ecosystem with all components:

```bash
pip install BrainX[cpu] -U
```


On GPU platforms, the following command can be used to install the ecosystem with all components:

```bash
pip install BrainX[cuda12] -U
```



On TPU platforms, the following command can be used to install the ecosystem with all components:

```bash
pip install BrainX[tpu] -U
```



For development, you might want to clone the repository and install it in editable mode:
```bash
git clone https://github.com/chaobrain/brain-modeling-ecosystem.git
cd brain-modeling-ecosystem
pip install -e .
```


## Documentation

For detailed documentation, tutorials, and examples, visit our [Documentation Portal](https://brainmodeling.readthedocs.io).


## Contributing

We welcome contributions from the community! Please see our [Contributing Guidelines](CONTRIBUTING.md) for more information on how to get involved.


## License

This project is licensed under the Apache License, Version 2.0. See the [LICENSE](LICENSE) file for details.


## Citation

If you use the Brain Modeling Ecosystem in your research, please cite it appropriately. Refer to the [citation guide](https://brainmodeling.readthedocs.io/citation.html) on our documentation portal.


## Support

If you have questions, encounter issues, or need support, please:
*   Check the [documentation](https://brainmodeling.readthedocs.io).
*   Search the [existing issues](https://github.com/chaobrain/brain-modeling-ecosystem/issues).
*   [Open a new issue](https://github.com/chaobrain/brain-modeling-ecosystem/issues/new/choose) if your problem is not addressed.
*   Contact us via email: `chao.brain@qq.com`.



