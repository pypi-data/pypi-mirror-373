# Default values for continuous-image-gen CSO module
# This is a YAML-formatted file following CloudStack Orchestrator patterns

## Global CSO Configuration
global:
  cso:
    enabled: true
    namespace: continuous-image-gen
    environment: development
    domain: example.com
  
  # Image pull secrets for private registries
  imagePullSecrets:
    - name: ghcr-secret

## Backend Service Configuration
backend:
  enabled: true
  
  image:
    repository: ghcr.io/killerapp/continuous-image-gen-backend
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}
  
  resources:
    requests:
      cpu: 1000m
      memory: 4Gi
    limits:
      cpu: 2000m
      memory: 8Gi
  
  # Environment variables
  env:
    USE_MOCK_GENERATOR: "true"
    MOCK_MODE: "true"
    LOG_LEVEL: "INFO"
    OLLAMA_HOST: "http://ollama.default.svc.cluster.local:11434"
    HF_HOME: "/app/models"
    TRANSFORMERS_CACHE: "/app/models"
    OUTPUT_DIR: "/app/output"
  
  # Secrets (managed by External Secrets Operator)
  secrets:
    huggingfaceToken:
      enabled: false
      secretName: huggingface-token
      key: token
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /api/health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /api/status
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 5
  
  # Auto-scaling
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

## Frontend Service Configuration
frontend:
  enabled: true
  
  image:
    repository: ghcr.io/killerapp/continuous-image-gen-frontend
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 7860
    targetPort: 7860
    annotations: {}
  
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  
  env:
    NODE_ENV: "production"
    NEXT_PUBLIC_API_URL: "http://continuous-image-gen-backend:8000"
  
  livenessProbe:
    httpGet:
      path: /
      port: 7860
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /
      port: 7860
    initialDelaySeconds: 10
    periodSeconds: 5

## Ingress Configuration (Istio-based)
ingress:
  enabled: true
  className: istio
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  hosts:
    - host: image-gen.example.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
  tls:
    - secretName: image-gen-tls
      hosts:
        - image-gen.example.com

## Storage Configuration
storage:
  models:
    enabled: true
    storageClass: fast-ssd
    accessMode: ReadWriteMany
    size: 100Gi
    existingClaim: ""
    mountPath: /app/models
  
  output:
    enabled: true
    storageClass: standard
    accessMode: ReadWriteMany
    size: 50Gi
    existingClaim: ""
    mountPath: /app/output

## Database Configuration
database:
  enabled: true
  type: postgresql
  
  # External database (if not using embedded)
  external:
    enabled: false
    host: ""
    port: 5432
    database: imagegen
    username: imagegen
    existingSecret: ""
    secretKey: password

## PostgreSQL sub-chart configuration
postgresql:
  enabled: true
  auth:
    database: imagegen
    username: imagegen
    existingSecret: ""
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: fast-ssd
  metrics:
    enabled: true

## Authentication (OAuth2 Proxy + Keycloak)
auth:
  enabled: true
  provider: keycloak
  
  oauth2Proxy:
    enabled: true
    image:
      repository: quay.io/oauth2-proxy/oauth2-proxy
      tag: "v7.5.0"
    
    clientId: continuous-image-gen
    existingSecret: oauth2-proxy-secret
    
    # Keycloak configuration
    providerUrl: https://keycloak.example.com/realms/cso
    redirectUrl: https://image-gen.example.com/oauth2/callback
    
    # Cookie settings
    cookieSecret: ""  # Generated if empty
    cookieDomain: .example.com
    cookieSecure: true
    
    # Allowed email domains
    emailDomains:
      - "*"
    
    # Skip auth for these paths
    skipAuthRegex:
      - ^/api/health
      - ^/metrics

## Service Mesh (Istio)
serviceMesh:
  enabled: true
  
  virtualService:
    enabled: true
    gateways:
      - istio-system/main-gateway
    
    # Traffic management
    timeout: 300s
    retries:
      attempts: 3
      perTryTimeout: 30s
      retryOn: gateway-error,connect-failure,refused-stream
  
  # mTLS configuration
  peerAuthentication:
    enabled: true
    mode: STRICT
  
  # Authorization policies
  authorizationPolicy:
    enabled: true
    rules:
      - from:
          - source:
              principals: ["cluster.local/ns/continuous-image-gen/sa/continuous-image-gen"]
      - to:
          - operation:
              paths: ["/api/health", "/metrics"]

## Monitoring & Observability
monitoring:
  enabled: true
  
  # Prometheus metrics
  metrics:
    enabled: true
    port: 9090
    path: /metrics
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
  
  # Grafana dashboards
  dashboard:
    enabled: true
    configMapName: image-gen-dashboard
  
  # Alerts
  alerts:
    enabled: true
    rules:
      - name: ImageGenerationFailureRate
        expr: rate(image_generation_failures_total[5m]) > 0.1
        severity: warning
      - name: HighMemoryUsage
        expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9
        severity: critical
  
  # OpenTelemetry tracing
  tracing:
    enabled: true
    endpoint: http://opentelemetry-collector.observability:4317
    samplingRate: 0.1

## Security Configuration
security:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
  
  networkPolicy:
    enabled: true
    policyTypes:
      - Ingress
      - Egress
    
    # Ingress rules
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                name: istio-system
          - podSelector:
              matchLabels:
                app: istio-ingressgateway
    
    # Egress rules
    egress:
      # DNS
      - to:
          - namespaceSelector: {}
            podSelector:
              matchLabels:
                k8s-app: kube-dns
        ports:
          - protocol: UDP
            port: 53
      # Ollama
      - to:
          - namespaceSelector:
              matchLabels:
                name: default
        ports:
          - protocol: TCP
            port: 11434
      # External APIs (Hugging Face)
      - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
                - 169.254.169.254/32  # Block metadata service
        ports:
          - protocol: TCP
            port: 443

## Service Account
serviceAccount:
  create: true
  name: continuous-image-gen
  annotations: {}
  automountServiceAccountToken: false

## Node Selection
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - continuous-image-gen
          topologyKey: kubernetes.io/hostname

## CSO Module Metadata
csoModule:
  tier: custom
  category: ai-ml
  compliance:
    - internal
  tags:
    - ai
    - image-generation
    - flux
    - creative