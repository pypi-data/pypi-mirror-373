{{- if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "continuous-image-gen.fullname" . }}-backend
  labels:
    {{- include "continuous-image-gen.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  {{- if not .Values.backend.autoscaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "continuous-image-gen.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "{{ .Values.serviceMesh.enabled }}"
      labels:
        {{- include "continuous-image-gen.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
        version: {{ .Values.backend.image.tag | quote }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "continuous-image-gen.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.security.podSecurityContext | nindent 8 }}
      containers:
        - name: backend
          securityContext:
            {{- toYaml .Values.security.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            {{- range $key, $value := .Values.backend.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- if .Values.backend.secrets.huggingfaceToken.enabled }}
            - name: HF_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.secrets.huggingfaceToken.secretName }}
                  key: {{ .Values.backend.secrets.huggingfaceToken.key }}
            {{- end }}
            {{- if .Values.database.external.enabled }}
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.database.external.username }}@{{ .Values.database.external.host }}:{{ .Values.database.external.port }}/{{ .Values.database.external.database }}"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.existingSecret }}
                  key: {{ .Values.database.external.secretKey | default "password" }}
            {{- else if .Values.postgresql.enabled }}
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.postgresql.auth.username }}@{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: postgres-password
            {{- end }}
          livenessProbe:
            {{- toYaml .Values.backend.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.backend.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            {{- if .Values.storage.models.enabled }}
            - name: models
              mountPath: {{ .Values.storage.models.mountPath }}
            {{- end }}
            {{- if .Values.storage.output.enabled }}
            - name: output
              mountPath: {{ .Values.storage.output.mountPath }}
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "continuous-image-gen.fullname" . }}-config
        {{- if .Values.storage.models.enabled }}
        - name: models
          persistentVolumeClaim:
            claimName: {{ .Values.storage.models.existingClaim | default (printf "%s-models" (include "continuous-image-gen.fullname" .)) }}
        {{- end }}
        {{- if .Values.storage.output.enabled }}
        - name: output
          persistentVolumeClaim:
            claimName: {{ .Values.storage.output.existingClaim | default (printf "%s-output" (include "continuous-image-gen.fullname" .)) }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}