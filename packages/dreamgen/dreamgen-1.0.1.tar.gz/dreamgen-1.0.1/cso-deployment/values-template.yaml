# CloudStack Orchestrator Module Configuration Template
# Module: continuous-image-gen
# 
# INSTRUCTIONS:
# 1. Copy this file to values.local.yaml
# 2. Fill in all required values marked with <REQUIRED>
# 3. Deploy using: cso module deploy continuous-image-gen --values values.local.yaml

# Global CSO Configuration
global:
  # GCP Project Configuration
  gcp:
    projectId: "<REQUIRED: your-gcp-project-id>"
    region: "us-central1"
    zone: "us-central1-a"
    
  # Domain configuration (inherits from CSO platform)
  domain: "platform.your-domain.com"
  
  # Image registry (using GCP Artifact Registry)
  imageRegistry: "gcr.io/<REQUIRED: your-gcp-project-id>"

# Module-specific configuration
continuousImageGen:
  # Basic settings
  enabled: true
  namespace: "continuous-image-gen"
  
  # Image configuration
  image:
    repository: "gcr.io/<REQUIRED: your-gcp-project-id>/continuous-image-gen"
    tag: "latest"
    pullPolicy: "IfNotPresent"
  
  # Service configuration
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
    
  # Ingress configuration (managed by Istio)
  ingress:
    enabled: true
    hostname: "imagegen.platform.your-domain.com"
    tls:
      enabled: true
      secretName: "platform-tls"  # Managed by cert-manager
  
  # GCS (Google Cloud Storage) Configuration
  storage:
    type: "gcs"  # Google Cloud Storage
    gcs:
      bucketName: "<REQUIRED: your-image-bucket-name>"
      projectId: "<REQUIRED: your-gcp-project-id>"
      location: "us-central1"
      storageClass: "STANDARD"  # Options: STANDARD, NEARLINE, COLDLINE, ARCHIVE
      publicAccess: false
      lifecycle:
        # Auto-archive old images
        daysToNearline: 30
        daysToColdline: 90
        daysToDelete: 365
      # Service account for GCS access
      serviceAccount:
        create: true
        name: "continuous-image-gen-gcs"
        keySecretName: "gcs-service-account-key"
    
    # Local cache configuration
    cache:
      enabled: true
      size: "50Gi"
      storageClass: "standard"  # GKE storage class
      mountPath: "/data/cache"
  
  # Model storage configuration
  models:
    # Where to store/cache AI models
    storage:
      type: "pvc"  # Persistent Volume Claim
      size: "100Gi"
      storageClass: "standard"
      mountPath: "/data/models"
    
    # Hugging Face configuration
    huggingface:
      # Token stored in GCP Secret Manager
      tokenSecret:
        name: "huggingface-token"
        key: "token"
        # Instructions: Create secret in GCP Secret Manager:
        # gcloud secrets create huggingface-token --data-file=-
        # Then grant access to the service account
    
    # Model configurations
    flux:
      model: "black-forest-labs/FLUX.1-schnell"  # or FLUX.1-dev
      enableCuda: false  # GKE typically uses CPU or TPU
      enableTPU: true    # Enable TPU support if available
      precision: "fp16"
  
  # Ollama integration (for prompt generation)
  ollama:
    enabled: true
    endpoint: "http://ollama.ollama-system.svc.cluster.local:11434"
    model: "llama2"
    # If Ollama is not deployed, set to false and use this external endpoint:
    # externalEndpoint: "https://ollama-api.your-domain.com"
  
  # Plugin configuration
  plugins:
    timeContext:
      enabled: true
    holidayContext:
      enabled: true
    artStyle:
      enabled: true
      dataFile: "/app/data/art_styles.json"
    loraModels:
      enabled: false  # Requires specific model setup
      modelsPath: "/data/models/lora"
  
  # Application configuration
  config:
    # Generation settings
    generation:
      defaultBatchSize: 5
      defaultInterval: 300  # seconds
      maxBatchSize: 20
      maxConcurrent: 3
      
    # Image settings
    image:
      width: 1024
      height: 1024
      guidanceScale: 7.5
      numInferenceSteps: 50
      
    # Web UI settings
    webUI:
      enabled: true
      port: 7860
      maxHistoryItems: 100
      enablePublicGallery: false
      authentication:
        enabled: true
        provider: "keycloak"  # Inherits from CSO platform
  
  # Resource limits
  resources:
    requests:
      cpu: "2"
      memory: "8Gi"
    limits:
      cpu: "4"
      memory: "16Gi"
    
  # GPU/TPU resources (for GKE with accelerators)
  accelerators:
    # For GPU nodes
    gpu:
      enabled: false
      type: "nvidia-tesla-t4"
      count: 1
    # For TPU nodes (recommended for GCP)
    tpu:
      enabled: false
      type: "v3-8"
      topology: "2x2"
  
  # Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilization: 70
    targetMemoryUtilization: 80
  
  # Monitoring and observability
  monitoring:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 30s
    tracing:
      enabled: true
      samplingRate: 0.1
    logging:
      level: "INFO"
      format: "json"
  
  # Database (for storing generation history and metadata)
  database:
    type: "cloudsql"  # Google Cloud SQL
    cloudsql:
      instanceConnectionName: "<REQUIRED: project:region:instance>"
      database: "imagegen"
      user: "imagegen"
      passwordSecret:
        name: "cloudsql-password"
        key: "password"
      # Cloud SQL Proxy sidecar
      proxy:
        enabled: true
        image: "gcr.io/cloudsql-docker/gce-proxy:latest"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
  
  # Backup configuration
  backup:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM
    destination: "gs://<REQUIRED: your-backup-bucket>/continuous-image-gen"
    retention: 30  # days
  
  # Security settings
  security:
    podSecurityPolicy:
      enabled: true
    networkPolicy:
      enabled: true
      allowedNamespaces:
        - "istio-system"
        - "ollama-system"
        - "monitoring"
    secrets:
      provider: "google-secret-manager"
      projectId: "<REQUIRED: your-gcp-project-id>"

# Dependencies configuration
dependencies:
  # These should be deployed as part of CSO platform
  keycloak:
    enabled: true
    realm: "platform"
    clientId: "continuous-image-gen"
    
  istio:
    enabled: true
    virtualService:
      enabled: true
      gateway: "platform-gateway"
      
  certManager:
    enabled: true
    issuer: "letsencrypt-prod"

# Testing configuration
testing:
  e2e:
    enabled: false
    image: "gcr.io/<REQUIRED: your-gcp-project-id>/continuous-image-gen-tests"
    
# Rollout strategy
rolloutStrategy:
  type: "RollingUpdate"
  maxSurge: 1
  maxUnavailable: 0