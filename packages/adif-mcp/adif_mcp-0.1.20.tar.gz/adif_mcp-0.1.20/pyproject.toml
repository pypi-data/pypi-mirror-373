[project]
name = "adif-mcp"
version = "0.1.20"
description = "ADIF MCP core engine with plugin support (LoTW, eQSL)"
authors = [{ name = "KI7MT" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.11"

dependencies = [
    "click",
    "keyring>=25.6.0",
    "requests>=2.32.5",
    "typing-extensions>=4.15.0",
]

[project.urls]
"ADIF Spec" = "https://adif.org.uk/315/ADIF_315.htm"
"Compatibility" = "https://adif-mcp.com/changelog/#adif-compatibility"

[tool.adif]
spec_version = "3.1.5"
features = ["core QSO model", "band/mode/QSL_RCVD enums"]
manifest = "mcp/manifest.json"
schemas = { manifest = "mcp/schemas/manifest.v1.json" }
spec = { adif_catalog = "mcp/spec/adif_catalog.json" }
providers_dir = "mcp/providers"
meta_output = "src/adif_mcp/adif_meta.json"

[project.scripts]
adif-mcp = "adif_mcp.cli:cli"

[tool.ruff]
line-length = 88
target-version = "py311"
extend-exclude = [
    ".venv",
    ".smoke-venv",
    "dist",
    "build",
    ".eggs",
    ".pytest_cache",
    "site",
    "docs/_site",
]

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = []
fixable = ["I"]

[tool.ruff.lint.per-file-ignores]
"scripts/*.py" = ["T201", "E402"]
"samples/*.py" = ["E402"]

[tool.mypy]
python_version = "3.11"
plugins = ["pydantic.mypy"]
strict = true
disable_error_code = ["annotation-unchecked", "call-arg"] # keep yours
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
no_implicit_optional = true
ignore_missing_imports = true

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "pep621"
tag_format = "v$version"
update_changelog_on_bump = true

[[tool.mypy.overrides]]
module = "adif_mcp.cli"
disable_error_code = ["misc"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "test.*"
disable_error_code = ["annotation-unchecked"]

[[tool.mypy.overrides]]
module = "test.*"
disable_error_code = ["annotation-unchecked"]

[[tool.mypy.overrides]]
module = "test.*"
disable_error_code = ["annotation-unchecked"]

[[tool.mypy.overrides]]
module = "test.*"
disable_error_code = ["annotation-unchecked"]

[tool.interrogate]
fail-under = 80
verbose = 1
quiet = false
color = true
# Count only public API; skip dunders/private
ignore-init-method = true
ignore-magic = true
ignore-module = false
ignore-private = true
ignore-nested-functions = true
# Optional: donâ€™t require docstrings for properties
ignore-properties = true
# Only measure our packages
paths = ["src", "scripts", "test"]
exclude = [".venv", ".smoke-venv", "dist", "build", "site", "docs/_site"]

[dependency-groups]
dev = [
    "pytest",
    "mypy",
    "ruff",
    "commitizen",
    "pydantic<2",
    "jsonschema>=4.25.1",
    "interrogate>=1.7.0",
    "types-click>=7.1.8",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.18",
    "mkdocstrings[python]>=0.30.0",
    "pymdown-extensions>=10.10",
    "pymdown-extensions[extra]>=10.10",
    "mkdocs-redirects>=1.2.2",
    "mkdocs-mermaid2-plugin>=1.2.2",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
]

[build-system]
requires = ["hatchling>=1.21"]
build-backend = "hatchling.build"

# If we get tired of type erroes in test/* uncomment the block
[[tool.mypy.overrides]]
module = "test.*"
disable_error_code = ["annotation-unchecked"]

[tool.hatch.build.hooks.custom]
path = "scripts/build_hooks.py"

[tool.hatch.build.targets.wheel]
packages = ["src/adif_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "src/**",
    "pyproject.toml",
    "README.md",
    "LICENSE*",
    "mcp/**",
    "scripts/**",
]
exclude = [
    ".venv/**",
    ".smoke-venv/**",
    "dist/**",
    "build/**",
    ".git/**",
    ".github/**",
    "docs/**",
    "site/**",
    ".ruff_cache/**",
    ".mypy_cache/**",
    ".pytest_cache/**",
    "tests/**",
    "test/**",
]
