"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _AliasTargetType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _AliasTargetTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AliasTargetType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ALIAS_TARGET_TYPE_UNSPECIFIED: _AliasTargetType.ValueType  # 0
    ALIAS_TARGET_TYPE_DUT: _AliasTargetType.ValueType  # 1
    ALIAS_TARGET_TYPE_PRODUCT: _AliasTargetType.ValueType  # 2
    ALIAS_TARGET_TYPE_HARDWARE: _AliasTargetType.ValueType  # 3
    ALIAS_TARGET_TYPE_SOFTWARE: _AliasTargetType.ValueType  # 4
    ALIAS_TARGET_TYPE_OPERATOR: _AliasTargetType.ValueType  # 5
    ALIAS_TARGET_TYPE_TEST_PLAN: _AliasTargetType.ValueType  # 6
    ALIAS_TARGET_TYPE_TEST: _AliasTargetType.ValueType  # 7
    ALIAS_TARGET_TYPE_TEST_STATION: _AliasTargetType.ValueType  # 8

class AliasTargetType(_AliasTargetType, metaclass=_AliasTargetTypeEnumTypeWrapper):
    """The type of the aliased metadata instance."""

ALIAS_TARGET_TYPE_UNSPECIFIED: AliasTargetType.ValueType  # 0
ALIAS_TARGET_TYPE_DUT: AliasTargetType.ValueType  # 1
ALIAS_TARGET_TYPE_PRODUCT: AliasTargetType.ValueType  # 2
ALIAS_TARGET_TYPE_HARDWARE: AliasTargetType.ValueType  # 3
ALIAS_TARGET_TYPE_SOFTWARE: AliasTargetType.ValueType  # 4
ALIAS_TARGET_TYPE_OPERATOR: AliasTargetType.ValueType  # 5
ALIAS_TARGET_TYPE_TEST_PLAN: AliasTargetType.ValueType  # 6
ALIAS_TARGET_TYPE_TEST: AliasTargetType.ValueType  # 7
ALIAS_TARGET_TYPE_TEST_STATION: AliasTargetType.ValueType  # 8
global___AliasTargetType = AliasTargetType

@typing.final
class DUTMetadata(google.protobuf.message.Message):
    """Represents the metadata of a device under test"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___CustomMetadataValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___CustomMetadataValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    PRODUCT_METADATA_FIELD_NUMBER: builtins.int
    PRODUCT_ID_FIELD_NUMBER: builtins.int
    SERIAL_NUMBER_FIELD_NUMBER: builtins.int
    MANUFACTURE_DATE_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    product_id: builtins.str
    """The id of the product associated with this device under test.
    This value is expected to be a parsable GUID or an alias. It will always
    be returned from the service as a GUID.
    See ni.measurements.metadata.MetadataStoreService for more information.
    """
    serial_number: builtins.str
    """The serial number of the device under test"""
    manufacture_date: builtins.str
    """The date the device under test was manufactured"""
    link: builtins.str
    """A link to a resource that describes the device under test.
    This value is expected to be a valid URI.
    """
    custom_metadata_schema_id: builtins.str
    """The unique identifier of the custom metadata schema that applies to
    this instance's custom metadata.  If any custom_metadata is associated
    with this instance, a custom_metadata_schema_id must be provided, unless
    the dut is created within the context of a session, in which case
    the session must have a custom_metadata_schema_id.
    """
    @property
    def product_metadata(self) -> global___ProductMetadata:
        """The product associated with this device under test."""

    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___CustomMetadataValue]:
        """Any custom metadata to be associated with the device under test"""

    def __init__(
        self,
        *,
        product_metadata: global___ProductMetadata | None = ...,
        product_id: builtins.str = ...,
        serial_number: builtins.str = ...,
        manufacture_date: builtins.str = ...,
        link: builtins.str = ...,
        custom_metadata: collections.abc.Mapping[builtins.str, global___CustomMetadataValue] | None = ...,
        custom_metadata_schema_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["product", b"product", "product_id", b"product_id", "product_metadata", b"product_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["custom_metadata", b"custom_metadata", "custom_metadata_schema_id", b"custom_metadata_schema_id", "link", b"link", "manufacture_date", b"manufacture_date", "product", b"product", "product_id", b"product_id", "product_metadata", b"product_metadata", "serial_number", b"serial_number"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["product", b"product"]) -> typing.Literal["product_metadata", "product_id"] | None: ...

global___DUTMetadata = DUTMetadata

@typing.final
class ProductMetadata(google.protobuf.message.Message):
    """Represents the metadata of a product"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___CustomMetadataValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___CustomMetadataValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    PART_NUMBER_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the product"""
    part_number: builtins.str
    """The part number of the product"""
    link: builtins.str
    """A link to a resource that describes the product.
    This value is expected to be a valid URI.
    """
    custom_metadata_schema_id: builtins.str
    """The unique identifier of the custom metadata schema that applies to
    this instance's custom metadata.  If any custom_metadata is associated
    with this instance, a custom_metadata_schema_id must be provided, unless
    the product is created within the context of a session, in which case
    the session must have a custom_metadata_schema_id.
    """
    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___CustomMetadataValue]:
        """Any custom metadata to be associated with the product"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        part_number: builtins.str = ...,
        link: builtins.str = ...,
        custom_metadata: collections.abc.Mapping[builtins.str, global___CustomMetadataValue] | None = ...,
        custom_metadata_schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["custom_metadata", b"custom_metadata", "custom_metadata_schema_id", b"custom_metadata_schema_id", "link", b"link", "name", b"name", "part_number", b"part_number"]) -> None: ...

global___ProductMetadata = ProductMetadata

@typing.final
class HardwareMetadata(google.protobuf.message.Message):
    """Represents the metadata of hardware used to take a given measurement."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___CustomMetadataValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___CustomMetadataValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    VENDOR_FIELD_NUMBER: builtins.int
    MODEL_FIELD_NUMBER: builtins.int
    PART_NUMBER_FIELD_NUMBER: builtins.int
    SERIAL_NUMBER_FIELD_NUMBER: builtins.int
    CALIBRATION_DATE_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    vendor: builtins.str
    """The vendor of the hardware"""
    model: builtins.str
    """The name of the hardware"""
    part_number: builtins.str
    """The part number of the hardware"""
    serial_number: builtins.str
    """The serial number of the hardware"""
    calibration_date: builtins.str
    """The date the calibration was performed on the hardware"""
    link: builtins.str
    """A link to a resource that describes the hardware.
    This value is expected to be a valid URI.
    """
    custom_metadata_schema_id: builtins.str
    """The unique identifier of the custom metadata schema that applies to
    this instance's custom metadata.  If any custom_metadata is associated
    with this instance, a custom_metadata_schema_id must be provided, unless
    the hardware is created within the context of a session, in which case
    the session must have a custom_metadata_schema_id.
    """
    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___CustomMetadataValue]:
        """Any custom metadata to be associated with the hardware"""

    def __init__(
        self,
        *,
        vendor: builtins.str = ...,
        model: builtins.str = ...,
        part_number: builtins.str = ...,
        serial_number: builtins.str = ...,
        calibration_date: builtins.str = ...,
        link: builtins.str = ...,
        custom_metadata: collections.abc.Mapping[builtins.str, global___CustomMetadataValue] | None = ...,
        custom_metadata_schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["calibration_date", b"calibration_date", "custom_metadata", b"custom_metadata", "custom_metadata_schema_id", b"custom_metadata_schema_id", "link", b"link", "model", b"model", "part_number", b"part_number", "serial_number", b"serial_number", "vendor", b"vendor"]) -> None: ...

global___HardwareMetadata = HardwareMetadata

@typing.final
class SoftwareMetadata(google.protobuf.message.Message):
    """Represents the metadata of the software that was used to take a measurement."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___CustomMetadataValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___CustomMetadataValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    PRODUCT_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    product: builtins.str
    """This value should only contain letters, numbers, spaces, hyphens,
    underscores, parentheses, periods and spaces. It must begin and
    end with a letter or number.
    Expected format: ^[\\w\\(\\)-]([\\w.\\(\\) -]*[\\w\\(\\)-])?$
    An empty value is also permitted.
    """
    version: builtins.str
    """The version of the software"""
    link: builtins.str
    """A link to a resource that describes the software.
    This value is expected to be a valid URI.
    """
    custom_metadata_schema_id: builtins.str
    """The unique identifier of the custom metadata schema that applies to
    this instance's custom metadata.  If any custom_metadata is associated
    with this instance, a custom_metadata_schema_id must be provided, unless
    the software is created within the context of a session, in which case
    the session must have a custom_metadata_schema_id.
    """
    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___CustomMetadataValue]:
        """Any custom metadata to be associated with the software"""

    def __init__(
        self,
        *,
        product: builtins.str = ...,
        version: builtins.str = ...,
        link: builtins.str = ...,
        custom_metadata: collections.abc.Mapping[builtins.str, global___CustomMetadataValue] | None = ...,
        custom_metadata_schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["custom_metadata", b"custom_metadata", "custom_metadata_schema_id", b"custom_metadata_schema_id", "link", b"link", "product", b"product", "version", b"version"]) -> None: ...

global___SoftwareMetadata = SoftwareMetadata

@typing.final
class OperatorMetadata(google.protobuf.message.Message):
    """Represents the metadata of the operator that took the measurement."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___CustomMetadataValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___CustomMetadataValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    ROLE_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the operator"""
    role: builtins.str
    """The role of the operator"""
    link: builtins.str
    """A link to a resource that describes the operator.
    This value is expected to be a valid URI.
    """
    custom_metadata_schema_id: builtins.str
    """The unique identifier of the custom metadata schema that applies to 
    this instance's custom metadata.  If any custom_metadata is associated
    with this instance, a custom_metadata_schema_id must be provided, unless
    the operator is created within the context of a session, in which case
    the session must have a custom_metadata_schema_id.
    """
    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___CustomMetadataValue]:
        """Any custom metadata to be associated with the operator"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        role: builtins.str = ...,
        link: builtins.str = ...,
        custom_metadata: collections.abc.Mapping[builtins.str, global___CustomMetadataValue] | None = ...,
        custom_metadata_schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["custom_metadata", b"custom_metadata", "custom_metadata_schema_id", b"custom_metadata_schema_id", "link", b"link", "name", b"name", "role", b"role"]) -> None: ...

global___OperatorMetadata = OperatorMetadata

@typing.final
class TestPlanMetadata(google.protobuf.message.Message):
    """Represents the metadata of a test plan"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___CustomMetadataValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___CustomMetadataValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the test plan"""
    link: builtins.str
    """A link to a resource that describes the test plan.
    This value is expected to be a valid URI.
    """
    custom_metadata_schema_id: builtins.str
    """The unique identifier of the custom metadata schema that applies to 
    this instance's custom metadata.  If any custom_metadata is associated
    with this instance, a custom_metadata_schema_id must be provided, unless
    the test plan is created within the context of a session, in which case
    the session must have a custom_metadata_schema_id.
    """
    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___CustomMetadataValue]:
        """Any custom metadata to be associated with the test plan"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        link: builtins.str = ...,
        custom_metadata: collections.abc.Mapping[builtins.str, global___CustomMetadataValue] | None = ...,
        custom_metadata_schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["custom_metadata", b"custom_metadata", "custom_metadata_schema_id", b"custom_metadata_schema_id", "link", b"link", "name", b"name"]) -> None: ...

global___TestPlanMetadata = TestPlanMetadata

@typing.final
class TestMetadata(google.protobuf.message.Message):
    """Represents the metadata of a test"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___CustomMetadataValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___CustomMetadataValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the test"""
    link: builtins.str
    """A link to a resource that describes the test.
    This value is expected to be a valid URI.
    """
    custom_metadata_schema_id: builtins.str
    """The unique identifier of the custom metadata schema that applies to 
    this instance's custom metadata.  If any custom_metadata is associated
    with this instance, a custom_metadata_schema_id must be provided, unless
    the test is created within the context of a session, in which case
    the session must have a custom_metadata_schema_id.
    """
    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___CustomMetadataValue]:
        """Any custom metadata to be associated with the test"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        link: builtins.str = ...,
        custom_metadata: collections.abc.Mapping[builtins.str, global___CustomMetadataValue] | None = ...,
        custom_metadata_schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["custom_metadata", b"custom_metadata", "custom_metadata_schema_id", b"custom_metadata_schema_id", "link", b"link", "name", b"name"]) -> None: ...

global___TestMetadata = TestMetadata

@typing.final
class TestStationMetadata(google.protobuf.message.Message):
    """Represents the metadata of a test station"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CustomMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___CustomMetadataValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___CustomMetadataValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_FIELD_NUMBER: builtins.int
    CUSTOM_METADATA_SCHEMA_ID_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the test station"""
    link: builtins.str
    """A link to a resource that describes the test station.
    This value is expected to be a valid URI.
    """
    custom_metadata_schema_id: builtins.str
    """The unique identifier of the custom metadata schema that applies to 
    this instance's custom metadata.  If any custom_metadata is associated
    with this instance, a custom_metadata_schema_id must be provided, unless
    the test station is created within the context of a session, in which case
    the session must have a custom_metadata_schema_id.
    """
    @property
    def custom_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___CustomMetadataValue]:
        """Any custom metadata to be associated with the test station"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        link: builtins.str = ...,
        custom_metadata: collections.abc.Mapping[builtins.str, global___CustomMetadataValue] | None = ...,
        custom_metadata_schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["custom_metadata", b"custom_metadata", "custom_metadata_schema_id", b"custom_metadata_schema_id", "link", b"link", "name", b"name"]) -> None: ...

global___TestStationMetadata = TestStationMetadata

@typing.final
class CustomMetadataValue(google.protobuf.message.Message):
    """Represents the value of a custom metadata field.
    Currently, only string values are supported.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRING_VALUE_FIELD_NUMBER: builtins.int
    string_value: builtins.str
    """The string value of the metadata field."""
    def __init__(
        self,
        *,
        string_value: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata", "string_value", b"string_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metadata", b"metadata", "string_value", b"string_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["metadata", b"metadata"]) -> typing.Literal["string_value"] | None: ...

global___CustomMetadataValue = CustomMetadataValue

@typing.final
class MetadataSchema(google.protobuf.message.Message):
    """A message that represents a metadata schema stored on this system."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEMA_ID_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    schema_id: builtins.str
    """The id of the schema."""
    schema: builtins.str
    """The schema itself."""
    def __init__(
        self,
        *,
        schema_id: builtins.str = ...,
        schema: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["schema", b"schema", "schema_id", b"schema_id"]) -> None: ...

global___MetadataSchema = MetadataSchema

@typing.final
class Alias(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    TARGET_TYPE_FIELD_NUMBER: builtins.int
    TARGET_ID_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The registered alias name for the aliased metadata instance."""
    target_type: global___AliasTargetType.ValueType
    """The type of the aliased metadata instance."""
    target_id: builtins.str
    """The unique identifier for the aliased metadata instance."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        target_type: global___AliasTargetType.ValueType = ...,
        target_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "target_id", b"target_id", "target_type", b"target_type"]) -> None: ...

global___Alias = Alias
