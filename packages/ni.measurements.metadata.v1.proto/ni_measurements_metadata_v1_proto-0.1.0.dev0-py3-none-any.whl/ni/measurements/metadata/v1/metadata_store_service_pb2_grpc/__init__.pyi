"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import ni.measurements.metadata.v1.metadata_store_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MetadataStoreServiceStub:
    """This service is responsible for storing and retrieving metadata associated with measurement data."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetDut: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetDutRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetDutResponse,
    ]
    """Gets the device under test associated with the identifier given in the request."""

    QueryDuts: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryDutsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryDutsResponse,
    ]
    """Perform an OData query"""

    CreateDut: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateDutRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateDutResponse,
    ]
    """Creates a new device under test in the metadata store."""

    GetProduct: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetProductRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetProductResponse,
    ]
    """Gets the product associated with the identifier given in the request."""

    QueryProducts: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryProductsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryProductsResponse,
    ]
    """Perform an OData query"""

    CreateProduct: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateProductRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateProductResponse,
    ]
    """Creates a new product in the metadata store."""

    GetOperator: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorResponse,
    ]
    """Gets the operator associated with the identifier given in the request."""

    QueryOperators: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsResponse,
    ]
    """Perform an OData query"""

    CreateOperator: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorResponse,
    ]
    """Creates a new operator in the metadata store."""

    GetTestPlan: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestPlanRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestPlanResponse,
    ]
    """Gets the test plan associated with the identifier given in the request."""

    QueryTestPlans: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestPlansRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestPlansResponse,
    ]
    """Perform an OData query"""

    CreateTestPlan: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestPlanRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestPlanResponse,
    ]
    """Creates a new test plan in the metadata store."""

    GetTest: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestResponse,
    ]
    """Gets the test associated with the identifier given in the request."""

    QueryTests: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsResponse,
    ]
    """Perform an OData query"""

    CreateTest: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestResponse,
    ]
    """Creates a new test in the metadata store."""

    GetTestStation: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationResponse,
    ]
    """Gets the test station associated with the identifier given in the request."""

    QueryTestStations: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsResponse,
    ]
    """Perform an OData query"""

    CreateTestStation: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationResponse,
    ]
    """Creates a new test station in the metadata store."""

    GetHardware: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareResponse,
    ]
    """Gets the hardware associated with the identifier given in the request."""

    QueryHardware: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareResponse,
    ]
    """Perform an OData query"""

    CreateHardware: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareResponse,
    ]
    """Creates a new hardware in the metadata store."""

    GetSoftware: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareResponse,
    ]
    """Gets the software associated with the identifier given in the request."""

    QuerySoftware: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareResponse,
    ]
    """Perform an OData query"""

    CreateSoftware: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareResponse,
    ]
    """Creates a new software in the metadata store."""

    RegisterMetadataSchema: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterMetadataSchemaRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterMetadataSchemaResponse,
    ]
    """Registers a schema. Once a schema has been published, it cannot be modified or removed."""

    EnumerateMetadataSchemas: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.EnumerateMetadataSchemasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.EnumerateMetadataSchemasResponse,
    ]
    """Enumerate the metadata schemas that have been previously registered"""

    ResolveAlias: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.ResolveAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.ResolveAliasResponse,
    ]
    """Resolves a given alias to its target (i.e., the underlying metadata that it represents)"""

    QueryAliases: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesResponse,
    ]
    """Perform an OData query on the registered aliases"""

    RegisterAlias: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterAliasResponse,
    ]
    """Registers an alias of the specified metadata for use/reference when creating other metadata or publishing.
    Notes:

    - The specified metadata must have already been created prior to the alias registration.
    - This method may be called with an already registered alias name in order to update the target mapped for that existing alias.
    """

    UnregisterAlias: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.UnregisterAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.UnregisterAliasResponse,
    ]
    """Removes a registered alias"""

class MetadataStoreServiceAsyncStub:
    """This service is responsible for storing and retrieving metadata associated with measurement data."""

    GetDut: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetDutRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetDutResponse,
    ]
    """Gets the device under test associated with the identifier given in the request."""

    QueryDuts: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryDutsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryDutsResponse,
    ]
    """Perform an OData query"""

    CreateDut: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateDutRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateDutResponse,
    ]
    """Creates a new device under test in the metadata store."""

    GetProduct: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetProductRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetProductResponse,
    ]
    """Gets the product associated with the identifier given in the request."""

    QueryProducts: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryProductsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryProductsResponse,
    ]
    """Perform an OData query"""

    CreateProduct: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateProductRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateProductResponse,
    ]
    """Creates a new product in the metadata store."""

    GetOperator: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorResponse,
    ]
    """Gets the operator associated with the identifier given in the request."""

    QueryOperators: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsResponse,
    ]
    """Perform an OData query"""

    CreateOperator: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorResponse,
    ]
    """Creates a new operator in the metadata store."""

    GetTestPlan: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestPlanRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestPlanResponse,
    ]
    """Gets the test plan associated with the identifier given in the request."""

    QueryTestPlans: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestPlansRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestPlansResponse,
    ]
    """Perform an OData query"""

    CreateTestPlan: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestPlanRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestPlanResponse,
    ]
    """Creates a new test plan in the metadata store."""

    GetTest: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestResponse,
    ]
    """Gets the test associated with the identifier given in the request."""

    QueryTests: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsResponse,
    ]
    """Perform an OData query"""

    CreateTest: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestResponse,
    ]
    """Creates a new test in the metadata store."""

    GetTestStation: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationResponse,
    ]
    """Gets the test station associated with the identifier given in the request."""

    QueryTestStations: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsResponse,
    ]
    """Perform an OData query"""

    CreateTestStation: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationResponse,
    ]
    """Creates a new test station in the metadata store."""

    GetHardware: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareResponse,
    ]
    """Gets the hardware associated with the identifier given in the request."""

    QueryHardware: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareResponse,
    ]
    """Perform an OData query"""

    CreateHardware: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareResponse,
    ]
    """Creates a new hardware in the metadata store."""

    GetSoftware: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareResponse,
    ]
    """Gets the software associated with the identifier given in the request."""

    QuerySoftware: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareResponse,
    ]
    """Perform an OData query"""

    CreateSoftware: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareResponse,
    ]
    """Creates a new software in the metadata store."""

    RegisterMetadataSchema: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterMetadataSchemaRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterMetadataSchemaResponse,
    ]
    """Registers a schema. Once a schema has been published, it cannot be modified or removed."""

    EnumerateMetadataSchemas: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.EnumerateMetadataSchemasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.EnumerateMetadataSchemasResponse,
    ]
    """Enumerate the metadata schemas that have been previously registered"""

    ResolveAlias: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.ResolveAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.ResolveAliasResponse,
    ]
    """Resolves a given alias to its target (i.e., the underlying metadata that it represents)"""

    QueryAliases: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesResponse,
    ]
    """Perform an OData query on the registered aliases"""

    RegisterAlias: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterAliasResponse,
    ]
    """Registers an alias of the specified metadata for use/reference when creating other metadata or publishing.
    Notes:

    - The specified metadata must have already been created prior to the alias registration.
    - This method may be called with an already registered alias name in order to update the target mapped for that existing alias.
    """

    UnregisterAlias: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.UnregisterAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.UnregisterAliasResponse,
    ]
    """Removes a registered alias"""

class MetadataStoreServiceServicer(metaclass=abc.ABCMeta):
    """This service is responsible for storing and retrieving metadata associated with measurement data."""

    @abc.abstractmethod
    def GetDut(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetDutRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetDutResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetDutResponse]]:
        """Gets the device under test associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryDuts(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryDutsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryDutsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryDutsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateDut(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateDutRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateDutResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateDutResponse]]:
        """Creates a new device under test in the metadata store."""

    @abc.abstractmethod
    def GetProduct(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetProductRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetProductResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetProductResponse]]:
        """Gets the product associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryProducts(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryProductsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryProductsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryProductsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateProduct(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateProductRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateProductResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateProductResponse]]:
        """Creates a new product in the metadata store."""

    @abc.abstractmethod
    def GetOperator(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorResponse]]:
        """Gets the operator associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryOperators(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateOperator(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorResponse]]:
        """Creates a new operator in the metadata store."""

    @abc.abstractmethod
    def GetTestPlan(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestPlanRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestPlanResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestPlanResponse]]:
        """Gets the test plan associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryTestPlans(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestPlansRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestPlansResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestPlansResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateTestPlan(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestPlanRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestPlanResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestPlanResponse]]:
        """Creates a new test plan in the metadata store."""

    @abc.abstractmethod
    def GetTest(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestResponse]]:
        """Gets the test associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryTests(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateTest(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestResponse]]:
        """Creates a new test in the metadata store."""

    @abc.abstractmethod
    def GetTestStation(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationResponse]]:
        """Gets the test station associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryTestStations(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateTestStation(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationResponse]]:
        """Creates a new test station in the metadata store."""

    @abc.abstractmethod
    def GetHardware(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareResponse]]:
        """Gets the hardware associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryHardware(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateHardware(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareResponse]]:
        """Creates a new hardware in the metadata store."""

    @abc.abstractmethod
    def GetSoftware(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareResponse]]:
        """Gets the software associated with the identifier given in the request."""

    @abc.abstractmethod
    def QuerySoftware(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateSoftware(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareResponse]]:
        """Creates a new software in the metadata store."""

    @abc.abstractmethod
    def RegisterMetadataSchema(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterMetadataSchemaRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterMetadataSchemaResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterMetadataSchemaResponse]]:
        """Registers a schema. Once a schema has been published, it cannot be modified or removed."""

    @abc.abstractmethod
    def EnumerateMetadataSchemas(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.EnumerateMetadataSchemasRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.EnumerateMetadataSchemasResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.EnumerateMetadataSchemasResponse]]:
        """Enumerate the metadata schemas that have been previously registered"""

    @abc.abstractmethod
    def ResolveAlias(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.ResolveAliasRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.ResolveAliasResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.ResolveAliasResponse]]:
        """Resolves a given alias to its target (i.e., the underlying metadata that it represents)"""

    @abc.abstractmethod
    def QueryAliases(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesResponse]]:
        """Perform an OData query on the registered aliases"""

    @abc.abstractmethod
    def RegisterAlias(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterAliasRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterAliasResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterAliasResponse]]:
        """Registers an alias of the specified metadata for use/reference when creating other metadata or publishing.
        Notes:

        - The specified metadata must have already been created prior to the alias registration.
        - This method may be called with an already registered alias name in order to update the target mapped for that existing alias.
        """

    @abc.abstractmethod
    def UnregisterAlias(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.UnregisterAliasRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.UnregisterAliasResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.UnregisterAliasResponse]]:
        """Removes a registered alias"""

def add_MetadataStoreServiceServicer_to_server(servicer: MetadataStoreServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
