# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    tags:
      - 'v*'  # Execute if version is tagged
    branches:
      - main  # Or if it is push to main
  pull_request:  # Or if it is any pull_request
    secrets:
      codecov_token:
        required: true
  workflow_call: # Or if the call comes from another workflow (reusability)
    secrets:
      codecov_token:
        required: true
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup OpenGL
      run: |
          sudo apt-get install libosmesa6 libglu1-mesa

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        PY_VERSION_NODOT=$(echo "${{ matrix.python-version }}" | tr -d '.')
        WHEEL_URL="https://github.com/cmlibs/swigzinc/releases/download/osmesa/cmlibs_zinc-4.2.1-cp${PY_VERSION_NODOT}-cp${PY_VERSION_NODOT}-linux_x86_64.whl"
        echo "INFO: Installing CMLibs Zinc wheel from ${WHEEL_URL}"
        pip install "${WHEEL_URL}"
        pip install -e '.[test]'
        pip install PyOpenGL PyOpenGL_accelerate

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Generate coverage report
      env:
        PYOPENGL_PLATFORM: osmesa
        LIBGL_ALWAYS_SOFTWARE: 1
      run: |
        PYTHONPATH=src
        pytest --cov=./src tests/ --cov-report term --cov-report=xml:coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.5.0
      with:
        verbose: true
        directory: ./coverage/reports/
        fail_ci_if_error: false
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.codecov_token }}

    - name: Check if the package builds
      run: |
        python -m pip install -U pip build
        python -m build
