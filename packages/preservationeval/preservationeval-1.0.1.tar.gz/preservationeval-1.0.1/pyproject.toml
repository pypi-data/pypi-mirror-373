[project]
name = "preservationeval"
dynamic = ["version"]
authors = [{ name = "Petter Blomberg", email = "petter.blomberg@gmail.com" }]
maintainers = [
    { name = "Petter Blomberg", email = "petter.blomberg@gmail.com" },
]
description = "A Python implementation of the calculations and evaluations done by the Dew Point Calculator found at https://www.dpcalc.org/."
requires-python = ">=3.11"
keywords = ["preservation", "climate", "numpy"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]
license = "MIT"
license-files = ["LICENCE"]
dependencies = ["numpy>=2.3.2,<2.4.0", "requests>=2.31.0,<3.0.0"]
readme = "README.md"

[project.urls]
Homepage = "https://github.com/petter-b/preservationeval"
Documentation = "https://github.com/petter-b/preservationeval#readme"
Repository = "https://github.com/petter-b/preservationeval.git"
Issues = "https://github.com/petter-b/preservationeval/issues"

[project.optional-dependencies]
# Testing tools
test = [
    "pytest>=7.4.0",
    "pytest-mypy>=0.10.3",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "requests-mock>=1.11.0",   # For mocking HTTP requests in tests
]
# Code quality tools
lint = [
    "mypy>=1.16.1",             # Match your pre-commit hook version
    "ruff>=0.12.2",             # Match your pre-commit hook version
    "pre-commit>=3.6.0",        # Current version
    "types-setuptools>=69.0.0", # Needed for mypy
]
# Performance tools
profile = ["memory_profiler>=0.61.0"]
# Full development environment (includes all above)
dev = ["preservationeval[test,lint,profile]"]

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=45",
    "wheel",
    "numpy>=1.26.0",            # Needed during build
    "requests>=2.31.0",         # Needed for downloading
    "types-setuptools>=69.0.0",
]

[tool.setuptools.dynamic]
version = { attr = "preservationeval.__version__" }

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["wip", "wip/*", "*/wip", "*/wip/*", "*tables.py", "*test*"]

[tool.preservationeval]
package_dir = "src/preservationeval"
tables_module = "tables"
tables_url = "http://www.dpcalc.org/dp.js"
emc_decimals = 1

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
norecursedirs = ["__pycache__", "tests/wip"]
addopts = "--mypy  --strict-markers --cov=preservationeval --cov-report=xml --cov-report=html"
pythonpath = [".", "tests"]
markers = [
    "unit: marks unit tests that test individual components in isolation",
    "integration: marks integration tests that test component interactions",
    "validation: marks tests that validate against JavaScript reference implementation",
    "slow: marks tests that take longer to execute",
]

[tool.mypy]
python_version = "3.13"
namespace_packages = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
files = ["src/**/*.py", "tests/**/*.py"]
exclude = [
    "tables\\.py",
    "version\\.py",
    "generated/.*",
    "src/wip",
    "tests/wip",
    "build/.*",
    "dist/.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["numpy.*", "requests.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["misc"]

[tool.pyright]
include = ["src"]
exclude = [
    "tables\\.py",
    "version\\.py",
    "generated/.*",
    "tests/wip/.*",
    "src/wip/.*",
    "build/.*",
    "dist/.*",
]
typeCheckingMode = "basic"
reportMissingTypeStubs = false
pythonVersion = "3.13"
pythonPlatform = "All"
strictListInference = true
strictDictionaryInference = true
strictParameterNoneValue = true
strictSetInference = true
venvPath = "."
venv = ".venv"
useLibraryCodeForTypes = true


[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
]

[tool.ruff]
line-length = 88
target-version = "py313"
extend-exclude = [
    "tables.py",
    "version.py",
    "generated/**",
    "tests/wip/**",
    "build/**",
    "dist/**",
]

[tool.ruff.lint]
select = [
    "D",   # pydocstyle
    "E",   # pycodestyle
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # flake8-bandit
    "C4",  # flake8-comprehensions
    "PL",  # Pylint
    "RUF", # Ruff-specific
    "PTH", # Path handling
    "ERA", # Error handling
]
ignore = ["D203", "D213"]
explicit-preview-rules = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
# This section configures the integrated isort tool within Ruff.
# It ensures import sorting is consistent.
known-first-party = ["preservationeval"] # Tell isort your own package name

# Optional: Add these sections if you need them
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D103", # Missing docstring in public function
    "S101", # Use of assert detected
]
