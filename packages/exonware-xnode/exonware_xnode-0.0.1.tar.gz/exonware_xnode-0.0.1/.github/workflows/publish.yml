name: Publish to PyPI (Multiple Packages)

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v0.0.2, v1.0.0, etc.
  workflow_dispatch:  # Allows manual trigger

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    # Build and publish exonware-xnode (main package)
    - name: Build exonware-xnode package
      run: python -m build
    
    - name: Publish exonware-xnode to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    # Create and publish exonware.xnode (dot notation)
    - name: Create exonware.xnode package config
      run: |
        # Create temporary pyproject.toml for dot notation package
        cp pyproject.toml pyproject.toml.backup
        sed 's/name = "exonware-xnode"/name = "exonware.xnode"/' pyproject.toml > pyproject_dot.toml
        cp pyproject_dot.toml pyproject.toml
        rm -rf dist/  # Clean previous build
    
    - name: Build exonware.xnode package
      run: python -m build
    
    - name: Publish exonware.xnode to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    # Create and publish xnode (simple name)
    - name: Create xnode package config
      run: |
        # Create temporary pyproject.toml for simple name
        sed 's/name = "exonware.xnode"/name = "xnode"/' pyproject.toml > pyproject_simple.toml
        cp pyproject_simple.toml pyproject.toml
        rm -rf dist/  # Clean previous build
    
    - name: Build xnode package
      run: python -m build
    
    - name: Publish xnode to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    # Restore original pyproject.toml
    - name: Restore original config
      run: cp pyproject.toml.backup pyproject.toml
    
    # Summary
    - name: Publication Summary
      run: |
        echo "ðŸŽ‰ Successfully published to PyPI:"
        echo "âœ… exonware-xnode"
        echo "âœ… exonware.xnode" 
        echo "âœ… xnode"
        echo ""
        echo "Users can now install with any of:"
        echo "pip install exonware-xnode"
        echo "pip install exonware.xnode"
        echo "pip install xnode"