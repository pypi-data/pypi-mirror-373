{"name":"general_hallucination_check","jsonschema":{"title":"general_hallucination_check","description":"GROUNDING REQUIREMENT: You must assess ONLY whether each parameter value in the function call is DIRECTLY supported by the provided conversation history or the API specification. Base your judgment EXCLUSIVELY on the materials provided - do not assume, infer, or hallucinate any information not explicitly present in these sources.\n\nEVALUATE EACH PARAMETER VALUE FOR:\n1. DIRECT GROUNDING: Each value must originate from one of these sources only:\n   - Explicit user statements in conversation history\n   - Assistant confirmations that user acknowledged\n   - Previous tool call outputs\n   - Documented defaults in the provided API specification\n\n2. PARAMETER VALUE CORRECTNESS TYPES:\n   - CORRECT: Value is explicitly mentioned or directly implied in conversation OR is a documented default\n   - NEEDS MORE INFORMATION: Value cannot be determined from available context (e.g., user provided day but parameter requires full date)\n   - HALLUCINATED: Value appears invented with no grounding in conversation or spec\n   - FORMAT ERROR: Value represents correct information but uses wrong format/units compared to specification\n   - CONTRADICTORY: Value conflicts with constraints or relationships with other parameters as defined in tool inventory\n\n3. DEFAULT VALUE HANDLING:\n   - Optional parameters may use defaults ONLY when explicitly defined in the specification\n   - Implicit/assumed defaults without specification documentation are considered hallucinations\n   - When specification is silent on defaults, optional parameters should be omitted rather than invented\n\n4. ACCEPTABLE TRANSFORMATIONS:\n   - Direct synonyms (e.g., \"NYC\" -> \"New York\") are acceptable ONLY if normalized in prior conversation\n   - Unit conversions are acceptable ONLY if explicitly performed in conversation\n   - Format changes require explicit indication in conversation or specification\n\n5. MULTI-CALL CONTEXT:\n   - In chained sequences, parameter values may be grounded in outputs of previous tool calls\n   - Consider the sequence order for parameter value dependencies\n   - Tool call ordering may provide context for parameter values\n\nYOUR ASSESSMENT MUST BE CONSERVATIVE: When in doubt about grounding, flag the parameter value as incorrect. Base your judgment ONLY on explicit evidence in the provided conversation history and tool specifications.","type":"object","properties":{"explanation":{"type":"string","description":"For EACH parameter value, explain its grounding status by citing specific evidence from the conversation history or tool specification. Address whether the value is correctly grounded, hallucinated, needs more information, has format errors, or contradicts other parameters. Include direct quotes from the materials that either support or contradict each parameter value."},"evidence":{"type":"string","description":"Provide EXACT quotes from user messages, assistant responses, prior tool outputs, or API specifications that demonstrate whether each parameter value is grounded. Do not paraphrase or interpret - use only direct evidence."},"output":{"type":"integer","minimum":1,"maximum":5,"threshold_low":4,"threshold_high":5,"description":"5 if ALL parameter values are correctly grounded and formatted; 4 if some values may need more information but are not hallucinated; 3 if some values are hallucinated or have format errors; 2 if multiple values are incorrect or contradictory; 1 if all values are incorrect or missing."},"confidence":{"type":"number","minimum":0,"maximum":1,"threshold_low":0.7,"threshold_high":1,"description":"Your confidence in this assessment (0.0-1.0). Lower confidence if evidence is ambiguous or incomplete."},"correction":{"type":"object","properties":{"parameter_issues":{"type":"array","description":"List of parameters with issues and their details. Leave empty if no issues detected.","items":{"type":"object","properties":{"parameter_name":{"type":"string","description":"Name of the parameter with an issue"},"reason_types":{"type":"array","description":"Categories of issues with this parameter value","items":{"type":"string","enum":["HALLUCINATION","MISSING_INFORMATION","FORMAT_ERROR","CONTRADICTORY_VALUES","DEFAULT_ISSUE","OTHER"]}},"reasons":{"type":"string","description":"Brief explanation of the specific issues with this parameter"},"corrected_value":{"description":"Corrected value for this parameter. Use need_more_information if user input is required, or null if value cannot be determined."}},"required":["parameter_name","reason_types","reasons","corrected_value"]}},"tool_call":{"type":"object","description":"Complete corrected tool call with all fixed parameters. Only include if corrections are possible.","properties":{"name":{"type":"string","description":"Name of the function to call"},"parameters":{"type":"object","description":"Complete set of corrected parameters for the function call","additionalProperties":true}},"required":[]}},"description":"For correctly grounded tool calls (output ≥ 4): Provide an empty object {}. For tool calls with parameter issues (output ≤ 3): Provide an object with parameter_issues array and optionally a corrected tool_call if corrections can be made.","required":[]},"actionable_recommendation":{"type":"string","description":"Provide specific, actionable recommendations for the agent developer to prevent parameter value hallucination or invention. Only provide recommendations when problems are detected (output ≤ 3). Include multiple detailed suggestions where appropriate, such as:\n\n1. PARAMETER GROUNDING STRATEGIES: Suggest specific techniques for improving parameter value extraction from conversations, like 'Implement explicit parameter confirmation steps before making tool calls with user-supplied values, e.g., \"I'll search for flights from [extracted_departure] to [extracted_destination]\"'.\n\n2. DEFAULT VALUE HANDLING: Recommend clear approaches for handling missing values, such as 'Add explicit documentation for which parameters can use defaults and which require user input. For user_id, specify in the parameter description: \"Must be explicitly provided by user or from authentication context; no default permitted\"'.\n\n3. VALUE NORMALIZATION: Suggest specific normalization rules for handling variations in user input, like 'Create a standardized location mapper for the location parameter that converts common abbreviations (\"NYC\" -> \"New York City\") and include these mappings in the parameter documentation'.\n\n4. PARAMETER EXTRACTION PATTERNS: Propose pattern-matching improvements for extracting specific parameter types, such as 'For date parameters, use regex patterns that identify both absolute dates (\"October 15th\") and relative dates (\"next Tuesday\"). Implement confirmation for ambiguous extractions'.\n\n5. CONVERSATION MANAGEMENT: Recommend dialog flow changes to ensure parameter grounding, like 'When a required parameter is missing or ambiguous, implement a specific clarification prompt template: \"To [perform action], I need to know [parameter]. Could you please provide this information?\"'.\n\n6. SYSTEM PROMPT ADDITIONS: Suggest specific instructions in the system prompt to prevent value invention, such as 'Add to system prompt: \"Never invent parameter values. If a required value is missing, always ask the user. For optional parameters, only use defaults explicitly defined in the tool specification\"'.\n\n7. PARAMETER VALIDATION: Recommend validation logic for extracted values, like 'Implement pre-call validation for the account_id parameter that checks if the value appears in conversation history or authentication context before proceeding'.\n\n8. TOOL SPECIFICATION IMPROVEMENTS: Suggest clarifications to parameter descriptions, like 'Enhance the description for temperature_unit parameter to state: \"Must be exactly one of: \\'celsius\\', \\'fahrenheit\\', \\'kelvin\\'. No abbreviations or alternatives accepted\"'.\n\n9. INTERMEDIATE CONFIRMATION: Propose adding intermediate steps for parameters with high-risk implications, like 'For financial transactions, implement a mandatory confirmation step that explicitly states the extracted amount and asks for user confirmation before proceeding'.\n\n10. VALUE SOURCING ANNOTATION: Suggest tracking the source of each parameter value, like 'Add source annotations to extracted values (user_provided, default_applied, inferred_from_context) and require explicit user confirmation for any inferred values'.\n\nEnsure recommendations are thorough, specific, and directly address the root cause of the parameter grounding issue."}},"required":["explanation","evidence","output","confidence","correction","actionable_recommendation"]},"examples":[{"user_kwargs":{"conversation_context":[{"role":"assistant","content":"Logged in as user 55; auth token acquired."},{"role":"assistant","content":"Ready to fetch your profile."}],"tools_inventory":[{"name":"get_user_profile","description":"Retrieves a user's profile details","parameters":{"user_id":"integer"}}],"tool_call":{"name":"get_user_profile","parameters":{"user_id":55}}},"output":{"explanation":"The parameter value user_id=55 is directly grounded in the conversation history. The assistant's message explicitly states \"Logged in as user 55\", providing the exact user_id that is used in the tool call. This is a clear example of proper grounding from conversation context.","evidence":"Assistant message: \"Logged in as user 55; auth token acquired.\"","output":5,"confidence":0.95,"correction":{},"actionable_recommendation":""}},{"user_kwargs":{"conversation_context":[{"role":"assistant","content":"Ready to fetch your profile."}],"tools_inventory":[{"name":"get_user_profile","description":"Retrieves a user's profile details","parameters":{"user_id":"integer"}}],"tool_call":{"name":"get_user_profile","parameters":{"user_id":42}}},"output":{"explanation":"The parameter value user_id=42 has no grounding in the conversation history or tool specification. There is no mention of any user ID in the conversation, and the tool specification doesn't provide a default value. This is a hallucinated value with no basis in the provided materials.","evidence":"Complete conversation history contains no mention of user ID 42. Tool specification for get_user_profile does not specify any default value for the user_id parameter.","output":1,"confidence":0.89,"correction":{"parameter_issues":[{"parameter_name":"user_id","reason_types":["HALLUCINATION","MISSING_INFORMATION"],"reasons":"Value 42 is invented without any basis in conversation or specification","corrected_value":"need_more_information"}],"tool_call":{}},"actionable_recommendation":"1. PARAMETER DOCUMENTATION: Update the description for user_id parameter to state: \"Required integer representing the unique identifier for the user whose profile is being retrieved. Must be extracted from authenticated session context or explicitly provided by the user. No default value is permitted.\"\n\n2. SYSTEM PROMPT ADDITIONS: Add to system prompt: \"For the get_user_profile function, always extract the user_id from authentication context messages like 'Logged in as user X'. Never invent or assume user_id values. If no user_id is available in context, ask the user which profile they want to retrieve.\"\n\n3. PARAMETER VALIDATION: Implement pre-call validation that verifies user_id appears explicitly in conversation history or authentication context messages before making the call.\n\n4. CONVERSATION MANAGEMENT: Add an authentication check step before profile retrieval that explicitly confirms the user's identity, such as: \"I see you're trying to access a user profile. To confirm, are you looking for user profile information for your account or a different user?\""}}]}
{"name":"agentic_constraints_satisfaction","jsonschema":{"title":"agentic_constraints_satisfaction","description":"GROUNDING REQUIREMENT: Evaluate ONLY whether this specific tool call satisfies all prerequisite constraints and relationships defined in the provided conversation history and tool inventory. Base your judgment EXCLUSIVELY on explicit evidence - DO NOT hallucinate constraints or requirements that aren't clearly documented.\n\nEVALUATE THE FOLLOWING ASPECTS:\n\n1. EXPLICIT PREREQUISITES: \n   - Verify completion of any explicitly required steps (e.g., authentication, data loading) mentioned in conversation or tool descriptions\n   - Look for confirmation messages like \"Auth token acquired,\" \"User info loaded,\" or \"File uploaded successfully\"\n   - Consider prerequisites satisfied ONLY when clear evidence exists of their successful completion\n\n2. TOOL SEQUENCING REQUIREMENTS:\n   - Assess whether semantic ordering requirements (defined in tool descriptions) are satisfied\n   - Examples: language detection must precede translation, file upload must precede processing\n   - Flag issues ONLY when tool descriptions EXPLICITLY state such dependencies\n\n3. TOOL CALL CLASSIFICATIONS:\n   - INDEPENDENT CALLS: Tool calls that can execute simultaneously without order significance\n   - CHAINED CALLS: Sequential tool calls where each depends on previous calls' execution\n   - BASE ASSESSMENT ON TOOL DESCRIPTIONS, not assumptions about typical workflows\n\n4. REDUNDANCY ASSESSMENT:\n   - Determine if this call duplicates the functionality and outcome of a previous tool call\n   - Flag redundancy ONLY when the exact same operation with equivalent parameters was performed\n   - Consider context changes that might justify repeating seemingly identical calls\n\n5. PARAMETER SET COMPLETENESS:\n   - Check that all parameters implied by user requests are included (e.g., \"only flagged\" -> filter parameter)\n   - Verify ONLY parameters clearly implied in the conversation, not those you think might be useful\n\n6. PARAMETER VALUE RELATIONSHIPS:\n   - Ensure relationships between parameters are logically consistent (e.g., startDate ≤ endDate)\n   - Check unit consistency across related parameters (e.g., same temperature units throughout)\n   - Flag contradictions ONLY when they violate logical constraints or explicit rules in tool description\n\nYOUR ASSESSMENT MUST BE CONSERVATIVE: Only flag issues when there is clear, explicit evidence of constraint violations. Do not invent workflows or dependencies not stated in the provided materials.","type":"object","properties":{"explanation":{"type":"string","description":"Provide a detailed explanation of whether all prerequisite constraints are satisfied for this tool call. Address explicit dependencies, required sequence, parameter relationships, and potential redundancy. Base your explanation SOLELY on evidence from the provided conversation and tool specifications."},"evidence":{"type":"string","description":"Quote SPECIFIC lines from the conversation history or tool specifications that demonstrate whether prerequisites are satisfied or violated. Include exact text showing completions or absences of required steps."},"output":{"type":"integer","minimum":1,"maximum":5,"threshold_low":4,"threshold_high":5,"description":"5 if ALL agentic constraints are satisfied; 4 if there are some minor insignificant issues that do not block the call, or require additional information or tools in the tools inventory; 3 if there are significant issues that block the call but can be resolved with additional information or tools; 2 if there are major issues that prevent the call from being made, but could be resolved with significant changes to the conversation or tools; 1 if the call is completely inappropriate given the conversation context and tool specifications."},"confidence":{"type":"number","minimum":0,"maximum":1,"threshold_low":0.7,"threshold_high":1,"description":"Your confidence in this assessment (0.0-1.0). Lower confidence if evidence is ambiguous or incomplete."},"correction":{"type":"object","properties":{"reason_types":{"type":"array","description":"Types of constraint violations identified","items":{"type":"string","enum":["MISSING_PREREQUISITE","WRONG_SEQUENCE","REDUNDANT_CALL","PARAMETER_RELATIONSHIP","PARAMETER_INCOMPLETENESS","OTHER"]}},"reasons":{"type":"string","description":"Brief explanation of the specific constraint violations"},"prerequisite_tool_calls":{"type":"array","description":"List of prerequisite tool calls that must be executed before this one","items":{"type":"object","properties":{"name":{"type":"string","description":"Name of the prerequisite function"},"parameters":{"type":"object","description":"Parameters for the prerequisite function call","additionalProperties":true}},"required":["name","parameters"]}},"corrected_tool_call":{"type":"object","description":"Corrected version of the current tool call if parameter relationships need fixing","properties":{"name":{"type":"string","description":"Name of the function (same as original if only parameters need correction)"},"parameters":{"type":"object","description":"Corrected parameters for the function call","additionalProperties":true}},"required":[]}},"description":"For satisfied constraints (output ≥ 4): Provide an empty object {}. For constraint violations (output ≤ 3): Provide an object with reason_types, reasons, and either prerequisite_tool_calls (for missing prerequisites) or corrected_tool_call (for parameter issues).","required":[]},"actionable_recommendation":{"type":"string","description":"Provide specific, actionable recommendations for the agent developer to address identified prerequisite or constraint satisfaction issues. Only provide recommendations when problems are detected (output ≤ 3). Include multiple detailed suggestions where appropriate, such as:\n\n1. PREREQUISITE TRACKING: Suggest specific mechanisms for tracking and verifying completion of prerequisite steps, such as 'Implement a prerequisite tracking system that maintains a state object {\"authentication\": true, \"language_detected\": false, etc.} and checks this before making dependent calls'.\n\n2. TOOL DEPENDENCY DOCUMENTATION: Recommend explicit documentation of tool dependencies in function descriptions, like 'Update the translate_text function description to state: \"REQUIRES: Prior successful call to detect_language for the same text input. Example workflow: 1) detect_language -> 2) translate_text\"'.\n\n3. PARAMETER INTERDEPENDENCY VALIDATION: Suggest validation logic for related parameters, such as 'Implement pre-call validation for date ranges that verifies startDate ≤ endDate, with a specific error message: \"Start date must be before or equal to end date\"'.\n\n4. TOOL CALL SEQUENCING: Propose flowchart or decision tree implementations for proper tool sequencing, like 'Create a predefined workflow for file operations that enforces the sequence: 1) check_permissions -> 2) upload_file -> 3) process_file'.\n\n5. SYSTEM PROMPT ADDITIONS: Suggest specific instructions in the system prompt to enforce dependencies, such as 'Add to system prompt: \"Always perform language detection before translation. Never skip prerequisite steps, even when the source language seems obvious\"'.\n\n6. TOOL SPECIFICATION IMPROVEMENTS: Recommend enhancements to tool descriptions that highlight dependencies, like 'Add a \"Prerequisites\" section to each tool\\'s description that lists required prior successful calls and their parameters'.\n\n7. ERROR HANDLING IMPROVEMENTS: Suggest specific error recovery procedures, such as 'If authentication fails, implement an automatic retry with explicit user notification: \"I\\'m having trouble authenticating. Let me try again with [authentication method]\"'.\n\n8. REDUNDANCY DETECTION: Recommend logic for preventing redundant calls, like 'Implement a result caching mechanism that stores outputs from previous calls and checks if an identical call has already been made in the current session'.\n\n9. CONTEXTUAL AWARENESS: Suggest improvements for maintaining awareness of conversation state, such as 'Create a context tracker that monitors which entities (files, queries, data objects) have been successfully processed and are available for subsequent operations'.\n\n10. PARAMETER COMPLETION CHECKS: Propose validation mechanisms for ensuring all implied parameters are included, like 'For search functions, implement a check that verifies whether filters mentioned in user requests (e.g., \"only unread messages\") are properly translated into corresponding filter parameters'.\n\n11. MULTI-STEP OPERATION DOCUMENTATION: Recommend clearer documentation for operations requiring multiple steps, like 'Create a developer guide section on \"Chained Operations\" that details common sequences of tool calls with sample code and conversation examples'.\n\n12. AGENT ARCHITECTURE IMPROVEMENTS: Suggest architectural changes to better support dependencies, such as 'Implement a prerequisite validation middleware layer that intercepts all tool calls and verifies that required prior calls exist in the conversation history before proceeding'.\n\nEnsure recommendations are thorough, specific, and directly address the root cause of the constraint satisfaction issue."}},"required":["explanation","evidence","output","confidence","correction","actionable_recommendation"]},"examples":[{"user_kwargs":{"conversation_context":[{"role":"assistant","content":"Auth token acquired for user 42."}],"tools_inventory":[{"name":"get_order_history","description":"Retrieve past orders","parameters":{"user_id":"integer"}}],"tool_call":{"name":"get_order_history","parameters":{"user_id":42}}},"output":{"explanation":"This tool call satisfies all agentic constraints. The prerequisite of authentication is explicitly confirmed in the conversation history with \"Auth token acquired for user 42.\" The user_id parameter value matches the authenticated user, and there are no other prerequisites mentioned in the tool specification. No redundancy or parameter relationship issues exist.","evidence":"Assistant message explicitly states: \"Auth token acquired for user 42.\" The tool specification for get_order_history does not mention any additional prerequisites beyond authentication.","output":5,"confidence":0.95,"correction":{},"actionable_recommendation":""}},{"user_kwargs":{"conversation_context":[{"role":"user","content":"Translate 'Hola' to English."}],"tools_inventory":[{"name":"translate_text","description":"Translate text to target language. REQUIRES: Prior successful call to detect_language for the input text.","parameters":{"text":"string","target":"string"}},{"name":"detect_language","description":"Detect the language of the input text","parameters":{"text":"string"}}],"tool_call":{"name":"translate_text","parameters":{"text":"Hola","target":"en"}}},"output":{"explanation":"This tool call violates an agentic constraint clearly stated in the tool description. The translate_text function explicitly requires a prior successful call to detect_language for the input text, as stated in its description. The conversation history shows no evidence of any detect_language call being made before this translate_text call.","evidence":"Tool description explicitly states: \"translate_text: Translate text to target language. REQUIRES: Prior successful call to detect_language for the input text.\" The conversation history contains no detect_language call or language detection result.","output":2,"confidence":0.95,"correction":{"reason_types":["MISSING_PREREQUISITE","WRONG_SEQUENCE"],"reasons":"Missing required prerequisite detect_language call as explicitly stated in translate_text description","prerequisite_tool_calls":[{"name":"detect_language","parameters":{"text":"Hola"}}]},"actionable_recommendation":"1. TOOL DEPENDENCY DOCUMENTATION: Ensure the dependency between detect_language and translate_text is prominently displayed in the tool description. Consider adding a visual indicator or formatting to make prerequisites stand out more clearly: \"translate_text - [PREREQUISITE: detect_language] Translate text to target language\".\n\n2. SYSTEM PROMPT ADDITIONS: Add to system prompt: \"For translation tasks, always perform language detection first using detect_language before calling translate_text, even if the source language seems obvious from context. Follow the required sequence of operations as specified in tool descriptions.\"\n\n3. PREREQUISITE TRACKING: Implement a dependency graph for tool calls that automatically checks if required prerequisite calls (like detect_language before translate_text) have been successfully completed before allowing dependent calls.\n\n4. TOOL SPECIFICATION IMPROVEMENTS: Add a source_language parameter to the translate_text function that requires the detected language code from a prior detect_language call, making the dependency explicit in the API design and creating a clearer data flow between the two functions.\n\n5. AGENT ARCHITECTURE IMPROVEMENTS: Implement a workflow system for common multi-step operations like translation that automatically sequences the required steps (detection -> translation) without requiring agent-level reasoning about prerequisites."}}]}