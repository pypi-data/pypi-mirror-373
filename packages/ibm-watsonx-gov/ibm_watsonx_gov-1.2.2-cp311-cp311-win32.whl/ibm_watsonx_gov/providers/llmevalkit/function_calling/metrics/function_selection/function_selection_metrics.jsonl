{"name":"function_selection_appropriateness","jsonschema":{"title":"function_selection_appropriateness","description":"GROUNDING REQUIREMENT: You must evaluate whether this function call correctly implements the user's immediate request as the appropriate next step in the conversation. Base your assessment EXCLUSIVELY on the provided conversation history and available tool specifications. DO NOT hallucinate capabilities, tools, or context information that isn't explicitly present in these materials.\n\nCONTEXT UNDERSTANDING:\n- Use ONLY the provided conversation history (system prompt instructions, user requests, assistant messages, prior tool calls and their outputs) for context.\n- A conversation consists of alternating user and assistant turns. Each assistant turn may include multiple tool calls.\n- Tool calls may be independent (occurring simultaneously) OR chained (where each depends on previous calls).\n- For chained tool calls, consider the sequence. For independent calls, their order is not significant.\n\nEVALUATION CRITERIA:\n- Compare this function against ALL functions in the provided tool inventory - do not reference or assume any tools not explicitly listed.\n- Judge only this specific tool call, not the entire solution to the user's overall intent.\n- Evaluate whether skipping this call would block meaningful progress toward the user's goal.\n- Check if the function's purpose directly addresses the user's explicit or implicit request.\n- A function call is redundant if: 1) it duplicates previous calls, 2) provides no new information, or 3) doesn't advance the user's goal.\n- Consider implicit requirements from earlier dialogue (e.g., \"only unread emails\" implies a filter flag).\n- This call can validly run alongside other tool calls without reducing its correctness.\n\nALTERNATIVE ASSESSMENT:\n- If this function is inappropriate, determine if another function from the inventory would better serve the user's request.\n- If no suitable function exists in the inventory, indicate this explicitly.\n- Multiple functions may be valid matches - if this function addresses the relevant part of the user request, it is an appropriate selection.\n\nGROUNDING GUIDELINES:\n- Base your assessment ENTIRELY on the provided tool specifications and conversation history.\n- DO NOT assume capabilities or limitations beyond what's explicitly documented.\n- DO NOT reference functions, parameters, or features not listed in the tool inventory.\n- DO NOT speculate about underlying implementations or capabilities not mentioned in the specifications.\n- DO NOT hallucinate user intent that isn't supported by the conversation history.\n- Your evaluation MUST be factually grounded - flag a function as inappropriate ONLY when there is clear evidence it doesn't match the user's request.\n- Cite specific evidence from the provided materials in your assessment.","type":"object","properties":{"explanation":{"type":"string","description":"Explain why this call does or does not align with the user's request as the correct next step in the conversation. Reference specific user text, tool descriptions, and API spec excerpts. If this call is inappropriate, identify whether: 1) another existing function would be more suitable, 2) no appropriate function exists in the inventory, or 3) the call is redundant and unnecessary."},"evidence":{"type":"string","description":"Provide a short sentence or two with exact quotes from the conversation history and API specification that support your alignment rating. Include only factual evidence directly from the provided materials."},"output":{"type":"integer","minimum":1,"maximum":5,"threshold_low":3,"threshold_high":5,"description":"Appropriateness and alignment rating with the user intent (1=completely irrelevant, 2=poor match, 3=adequate match, 4=good match, 5=perfect match)."},"confidence":{"type":"number","minimum":0,"maximum":1,"threshold_low":0.7,"threshold_high":1,"description":"Confidence in this function selection appropriateness assessment (0.0-1.0). A higher score indicates greater certainty in your evaluation based on the available evidence."},"correction":{"type":"object","properties":{"reason_types":{"type":"array","description":"A short sentence or two containing types of issues with the function selection, if any. Use one or more of these values: IRRELEVANT_FUNCTION (function doesn't match user request), BETTER_FUNCTION_EXISTS (another function would be more appropriate), NO_FUNCTION_NEEDED (no function in inventory can fulfill request), REDUNDANT_CALL (duplicates functionality or doesn't add value), WRONG_SEQUENCE (function is called in incorrect order), OTHER (explain in reasons).","items":{"type":"string","enum":["IRRELEVANT_FUNCTION","BETTER_FUNCTION_EXISTS","NO_FUNCTION_NEEDED","REDUNDANT_CALL","WRONG_SEQUENCE","OTHER"]}},"reasons":{"type":"string","description":"Concise explanation of the specific issues with the function selection."},"tool_call":{"type":"object","description":"For correct function selections (output ≥ 3): Empty object {}. For incorrect selections (output < 3), provide either: 1) For better function: Object with name and parameters of the correct function; 2) For no suitable function: {\"name\": \"no_function\", \"parameters\": {}}; 3) For redundant calls: {\"name\": \"no_function_redundant\", \"parameters\": {}}.","properties":{"name":{"type":"string","description":"Name of the correct function to call, or \"no_function\" if no appropriate function exists, or \"no_function_redundant\" if call is unnecessary."},"parameters":{"type":"object","description":"Parameters for the corrected function call with appropriate values, or empty object if no function is needed.","additionalProperties":true}},"required":["name","parameters"]}},"description":"Structured assessment of function selection correctness. For appropriate functions (output ≥ 3): Provide an empty object {}. For inappropriate functions (output < 3): Provide object with reason_types, reasons, and tool_call correction.","required":[]},"actionable_recommendation":{"type":"string","description":"Provide specific, concrete recommendations for the agent developer to address any identified function selection issues. Only provide recommendations when problems are detected (output < 3). Include multiple detailed suggestions where appropriate, such as:\n\n1. TOOL DESCRIPTIONS: Propose specific improvements to function descriptions that would clarify their purpose and usage context. Include exact wording changes, like 'Change description of get_weather from \"Get weather data\" to \"Get current weather conditions and forecast for a specified location\"'.\n\n2. PARAMETER DOCUMENTATION: Suggest clearer parameter descriptions, examples, or constraints to guide proper usage. For example, 'Add example to location parameter: \"e.g., 'New York, NY', 'London, UK', or 'Tokyo, Japan'\"'.\n\n3. FUNCTION NAMING: Recommend renaming functions to better reflect their purpose if the current name is misleading. For instance, 'Rename search_all to search_messages to clarify it only searches email messages'.\n\n4. TOOL ORGANIZATION: Suggest splitting functions that are too broad or combining ones that are too narrow. Example: 'Split send_message into send_email and send_chat to prevent confusion'.\n\n5. SYSTEM PROMPT ADDITIONS: Propose specific additions to the system prompt that would help the agent select the right function. Include exact text to add, such as 'Add to system prompt: \"When retrieving time information, always use the get_time function with the appropriate timezone parameter\"'.\n\n6. NEW TOOLS: Recommend creating new functions if user requests consistently fall outside available tools. Provide a detailed function signature including name, description, parameters with types and descriptions.\n\n7. TOOL SELECTION LOGIC: Suggest modifications to the agent's tool selection logic, such as 'Implement a pre-selection check that compares the user's request keywords against each function's description'.\n\n8. TOOL CONSOLIDATION: Identify similar tools that cause confusion and suggest consolidation strategies, like 'Merge weather_current and weather_forecast into a single get_weather function with an include_forecast parameter'.\n\n9. HANDLING EDGE CASES: Provide guidance on edge cases where no suitable function exists, such as 'Add instructions for the agent to respond with \"I don't have a function to perform that task\" when no appropriate function is available'.\n\nEnsure recommendations are thorough, practical, and directly address the root cause of the function selection error. Avoid vague suggestions like 'improve function selection' without specific actionable steps. The goal is to provide clear, implementable guidance that will help the agent developer enhance its function selection capabilities and reduce future errors. You can also provide other recommendations that are not listed here, as long as they are actionable to the agent developer."}},"required":["explanation","evidence","output","confidence","correction","actionable_recommendation"]},"examples":[{"user_kwargs":{"conversation_context":[{"role":"user","content":"What time is it in Tokyo?"}],"tools_inventory":[{"name":"translate_text","description":"Translate text to a target language","parameters":{"text":"string","target_language":"string"}},{"name":"get_time","description":"Retrieve current local time","parameters":{"timezone":"string"}}],"tool_call":{"name":"translate_text","parameters":{"text":"Hello","target_language":"en"}},"function_name":"translate_text"},"output":{"explanation":"The translate_text function is completely inappropriate for the user's request. The user explicitly asked \"What time is it in Tokyo?\", which is clearly a request for current time information in a specific timezone. The translate_text function is designed to translate text between languages, not to retrieve time information. There is another function in the tool inventory, get_time, that directly addresses the user's need to know the current time in Tokyo.","evidence":"User request: \"What time is it in Tokyo?\"\nFunction called: translate_text with description: \"Translate text to a target language\"\nMore appropriate function available: get_time with description: \"Retrieve current local time\"","output":1,"confidence":0.95,"correction":{"reason_types":["IRRELEVANT_FUNCTION","BETTER_FUNCTION_EXISTS"],"reasons":"translate_text performs text translation, not time retrieval; get_time function directly addresses user's request for current time in Tokyo","tool_call":{"name":"get_time","parameters":{"timezone":"Tokyo"}}},"actionable_recommendation":"1. TOOL DESCRIPTIONS: Update the get_time function description to be more specific: \"Retrieve current local time for a given timezone or location. Use this for any time-related queries in different cities or regions.\"\n\n2. PARAMETER DOCUMENTATION: Add examples to the timezone parameter: \"Examples: 'Tokyo', 'New York', 'London', 'UTC', 'EST'. Can accept city names or standard timezone identifiers.\"\n\n3. SYSTEM PROMPT ADDITIONS: Add to the system prompt: \"For any queries about current time, time differences, or local times in specific locations, always use the get_time function with the appropriate timezone parameter. Never use translation functions for time queries.\"\n\n4. TOOL SELECTION LOGIC: Implement keyword recognition for time-related queries. Words like 'time', 'clock', 'hour', along with location names should trigger consideration of the get_time function rather than translation functions.\n\n5. FUNCTION NAMING: Consider renaming get_time to get_local_time to make its purpose even clearer and distinguish it from other potential time-related functions."}}]}