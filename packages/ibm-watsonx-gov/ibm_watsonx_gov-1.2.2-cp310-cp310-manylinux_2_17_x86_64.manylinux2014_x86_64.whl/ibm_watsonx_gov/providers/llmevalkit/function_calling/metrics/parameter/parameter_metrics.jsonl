{"name":"parameter_hallucination_check","jsonschema":{"title":"parameter_hallucination_check","description":"GROUNDING REQUIREMENT: You must evaluate whether the SPECIFIC parameter value named in \"parameter_name\" is grounded in evidence or hallucinated. Base your assessment EXCLUSIVELY on the provided conversation history and tool specifications. DO NOT introduce assumptions or knowledge not explicitly present in these sources.\n\nYou are evaluating ONE SPECIFIC PARAMETER VALUE, not the entire tool call or other parameters.\n\nPARAMETER VALUE ASSESSMENT CRITERIA:\n1. GROUNDED VALUES (Output=4-5) must originate from one of these sources ONLY:\n   - Explicitly mentioned by the user in conversation\n   - Implicitly but clearly indicated by user (requires minimal inference)\n   - Documented default value in tool specification\n   - Output from previous tool calls in the conversation\n   - Assistant statements that user has confirmed\n\n2. UNGROUNDED VALUES (Output=1-3) include any of the following:\n   - Values invented without evidence in conversation or tool specification\n   - Values that require information not available in the conversation (e.g., user mentioned day but parameter requires full date)\n   - Values with incorrect format or units compared to what's specified or implied\n   - Values that contradict constraints or relationships with other parameters\n   - Values that transform user input incorrectly (e.g., wrong translation of a location)\n\n3. FORMAT AND TYPE COMPLIANCE:\n   - Check if the value conforms to required data types (string, integer, boolean, etc.)\n   - Verify format requirements (ISO dates, timestamps, currency notations, etc.)\n   - Confirm presence/absence of unit suffixes as required by specification\n   - Ensure consistent formats and units across related parameters\n   - Validate that the value meets any enumeration constraints or pattern requirements\n\n4. PARAMETER VALUE RELATIONSHIPS:\n   - Check if this parameter value contradicts any constraints with other parameter values\n   - Example: if add_day=false but day=\"Sunday\" is provided, and specification indicates add_day must be true to use day value\n\n5. DEFAULT AND OPTIONAL PARAMETERS:\n   - For optional parameters using default values, verify the default is explicitly documented\n   - Judge default values against conversation context - a default might be inappropriate for the specific request\n   - If a default value contradicts user intent, flag it as ungrounded\n\nRATE PARAMETER VALUES ON THIS SCALE:\n5 - PERFECTLY GROUNDED: Value is explicitly mentioned or precisely implied in conversation, or is a documented default that fits the context perfectly\n4 - MOSTLY GROUNDED: Value requires minimal inference but reasonably follows from conversation or is a documented default with minor contextual mismatch\n3 - AMBIGUOUSLY GROUNDED: Value is related to conversation but requires substantial inference or transformation\n2 - MOSTLY UNGROUNDED: Value has tenuous connection to conversation or significantly deviates from required format/type\n1 - COMPLETELY UNGROUNDED: Value is entirely hallucinated with no basis in conversation or specifications\n\nBe conservative in your assessment: if there is clear evidence of hallucination or contradiction, give a lower score (1-3). However, do not invent problems - if the value reasonably follows from conversation and specifications, give a higher score (4-5).\n\nYOUR EVALUATION IS CRITICALLY IMPORTANT: LLMs often hallucinate parameter values, creating false information or using inappropriate defaults. Your careful assessment helps prevent these errors.","type":"object","properties":{"explanation":{"type":"string","description":"Explain in detail why the specific parameter value is grounded or ungrounded. Reference exact sources from the conversation or tool specification that either support or contradict the parameter value. Address: 1) Where the value originated from, 2) Whether this source is sufficient for grounding, 3) Any format or type compliance issues, 4) Any contradictions with other parameters or specifications, and 5) For default values, whether they're documented and appropriate for this context."},"evidence":{"type":"string","description":"Provide EXACT quotes from the conversation history (user messages, assistant responses, previous tool outputs) or tool specification that directly support your assessment. For grounded values, cite the specific text where this value originates. For ungrounded values, demonstrate the absence of supporting evidence or cite contradictory information."},"output":{"type":"integer","minimum":1,"maximum":5,"threshold_low":4,"threshold_high":5,"description":"Parameter grounding score: 5=perfectly grounded, 4=mostly grounded, 3=ambiguously grounded, 2=mostly ungrounded, 1=completely ungrounded."},"confidence":{"type":"number","minimum":0,"maximum":1,"threshold_low":0.7,"threshold_high":1,"description":"Your confidence in this assessment (0.0-1.0). Use lower confidence when evidence is ambiguous or requires significant inference. Use high confidence when evidence is clear and direct."},"correction":{"type":"object","properties":{"reason_types":{"type":"array","description":"Types of issues with the parameter value, if any. Use one or more of these values: HALLUCINATION (invented value), FORMAT_ERROR (wrong format or type), MISSING_INFORMATION (needs more data), PARAMETER_CONTRADICTION (conflicts with other parameters), DEFAULT_ISSUE (inappropriate default), OTHER (explain in reasons).","items":{"type":"string","enum":["HALLUCINATION","FORMAT_ERROR","MISSING_INFORMATION","PARAMETER_CONTRADICTION","DEFAULT_ISSUE","OTHER"]}},"reasons":{"type":"string","description":"Concise explanation of the specific issues with the parameter value."},"parameter":{"type":"object","description":"Object containing parameter name as key and corrected value as value. Use null if unknown or need_more_information if user input is required.","additionalProperties":true}},"description":"For well-grounded values (output ≥ 4): Provide an empty object {}. For ungrounded values (output ≤ 3): Provide an object with reason_types, reasons, and parameter correction.","required":[]},"actionable_recommendation":{"type":"string","description":"Provide specific, actionable recommendations for the agent developer to prevent parameter value hallucination. Only provide recommendations when problems are detected (output ≤ 3). Include multiple detailed suggestions where appropriate, such as:\n\n1. PARAMETER DOCUMENTATION IMPROVEMENTS: Suggest specific clarifications to parameter descriptions that would help prevent hallucination, e.g., 'Update the \"username\" parameter description to: \"Must be explicitly provided by the user in conversation. No default value is permitted. Do not infer or guess usernames.\"'\n\n2. EXPLICIT VALUE EXTRACTION TECHNIQUES: Recommend concrete techniques for extracting parameter values reliably from user input, like 'Implement a structured extraction pattern for the \"count\" parameter that requires an explicit number from the user before proceeding, such as \"How many tweets would you like to see? (default is 10)\"'\n\n3. DEFAULT VALUE HANDLING: Propose specific parameter documentation improvements for default values, e.g., 'Add to the \"count\" parameter description: \"Default: 10 if not specified by user. Never invent a count value; use default or ask user.\"'\n\n4. FORMAT SPECIFICATION IMPROVEMENTS: Suggest clearer format requirements in parameter documentation, like 'For the \"date\" parameter, specify: \"Must be in ISO format YYYY-MM-DD. Example: 2024-06-22. Do not use other date formats.\"'\n\n5. TYPE VALIDATION RULES: Propose validation logic for parameter types, such as 'Implement pre-call validation that ensures integer parameters like \"count\" are provided as numbers without quotes or text.'\n\nEnsure recommendations are thorough, specific, and directly address the root cause of the parameter hallucination issue. Focus on concrete changes to system prompts, tool descriptions, parameter documentation, or agent logic that would prevent similar issues in the future."}},"required":["explanation","evidence","output","confidence","correction","actionable_recommendation"]},"examples":[{"user_kwargs":{"conversation_context":[{"role":"user","content":"Translate 'hello' to Spanish."}],"tools_inventory":[{"name":"translate_text","description":"Translate given text","parameters":{"text":"string","target_lang":"string"}}],"tool_call":{"name":"translate_text","parameters":{"text":"hello","target_lang":"es"}},"parameter_name":"target_lang","parameter_value":"es"},"output":{"explanation":"The parameter value target_lang='es' is properly grounded in the conversation. The user explicitly requested translation \"to Spanish\" and the agent correctly converted this to the ISO language code 'es' for Spanish. This conversion from the common language name to its standard code is a reasonable and expected transformation that requires minimal inference. The tool specification indicates target_lang should be a string, and 'es' is the appropriate ISO code for Spanish.","evidence":"User request: \"Translate 'hello' to Spanish.\" Tool specification for translate_text includes parameter target_lang of type string.","output":5,"confidence":0.96,"correction":{},"actionable_recommendation":""}},{"user_kwargs":{"conversation_context":[{"role":"user","content":"Fetch my latest tweets."}],"tools_inventory":[{"name":"get_tweets","description":"Retrieve recent tweets","parameters":{"username":"string","count":"integer"}}],"tool_call":{"name":"get_tweets","parameters":{"username":"elonmusk","count":20}},"parameter_name":"count","parameter_value":20},"output":{"explanation":"The parameter value count=20 is ungrounded and appears to be hallucinated. The user requested \"latest tweets\" but did not specify any count or quantity. The tool specification defines count as an integer parameter but does not document a default value. The agent appears to have arbitrarily chosen the value 20 without any basis in the conversation or tool specification. Without user specification or a documented default, the agent should either ask the user how many tweets they want to see or use a reasonable, documented default value if one exists.","evidence":"User request: \"Fetch my latest tweets.\" - contains no mention of any specific count or number of tweets. Tool specification does not document a default value for the count parameter.","output":1,"confidence":0.95,"correction":{"reason_types":["HALLUCINATION","MISSING_INFORMATION"],"reasons":"Count value 20 is invented without user specification or documented default","parameter":{"count":"need_more_information"}},"actionable_recommendation":"1. PARAMETER DOCUMENTATION IMPROVEMENTS: Update the \"count\" parameter description to: \"Number of tweets to retrieve. Default: 10 if not specified. Do not invent count values; use the default if not explicitly provided by the user.\"\n\n2. DEFAULT VALUE HANDLING: Add explicit default value documentation to the function specification: \"count: integer, default=10. Represents the number of tweets to retrieve.\"\n\n3. SYSTEM PROMPT ADDITIONS: Add to the system prompt: \"For the get_tweets function, only use explicitly provided count values from the user. When count is not specified, always use the default value of 10. Never invent arbitrary count values.\"\n\n4. CONFIRMATION STRATEGIES: When using default values, implement a confirmation step in the agent's response: \"I'll fetch your 10 most recent tweets (using the default count).\"\n\n5. VALUE SOURCE TRACKING: Implement a parameter source tracking mechanism that flags any parameter values not explicitly mentioned by the user or defined as defaults, requiring verification before use."}}]}
{"name":"value_format_alignment","jsonschema":{"title":"value_format_alignment","description":"GROUNDING REQUIREMENT: You must evaluate whether the SPECIFIC parameter value named in \"parameter_name\" exactly conforms to the required type, format, and unit conventions specified in the API documentation. Base your assessment EXCLUSIVELY on the provided API specification and the actual parameter value. DO NOT introduce assumptions about acceptable formats that aren't explicitly documented.\n\nYou are evaluating ONE SPECIFIC PARAMETER VALUE, not the entire tool call or other parameters.\n\nFORMAT ALIGNMENT ASSESSMENT CRITERIA:\n1. DATA TYPE COMPLIANCE (Output=4-5):\n   - Check if the value matches the required data type (string, integer, boolean, object, array, etc.)\n   - Verify that numeric values are provided as numbers (not strings) when the type is integer/number\n   - Confirm strings are properly formatted as strings when the type requires it\n   - Validate boolean values are true/false (not \"true\"/\"false\" strings) when boolean type is required\n\n2. FORMAT SPECIFICATION COMPLIANCE:\n   - Assess alignment with specific format requirements:\n     - Date formats (ISO 8601, YYYY-MM-DD, etc.)\n     - Time formats (24-hour, 12-hour with AM/PM, timezone inclusion)\n     - Currency formats (symbol position, decimal separator, etc.)\n     - Special patterns (phone numbers, postal codes, etc.)\n   - Verify compliance with any regex or pattern requirements in the spec\n\n3. UNIT COMPLIANCE:\n   - Check for required unit suffixes or prefixes (e.g., \"seconds\", \"$\", \"kg\")\n   - Verify absence of units when the spec requires raw values\n   - Confirm correct unit type is used when multiple are possible\n\n4. CONSISTENCY REQUIREMENTS:\n   - Ensure consistent formats across related parameters (e.g., same timezone in start/end times)\n   - Validate that the value works correctly with other parameter values\n\nRATE FORMAT ALIGNMENT ON THIS SCALE:\n5 - PERFECT ALIGNMENT: Value exactly matches the required type, format, and units as specified\n4 - MINOR DEVIATION: Value has the correct fundamental type but minor formatting issues that likely won't affect function\n3 - MODERATE DEVIATION: Value has either incorrect type or significant format issues that might affect function\n2 - MAJOR DEVIATION: Value has both type and format issues that will likely cause function failure\n1 - COMPLETE MISMATCH: Value bears no resemblance to the required format and will certainly cause function failure\n\nBe conservative in your assessment: if the specification is ambiguous but the value seems reasonable, give a higher score (4-5). If the specification is clear and the value clearly deviates, give a lower score (1-3).\n\nYOUR EVALUATION IS CRITICALLY IMPORTANT: Incorrect parameter formats often cause tool call failures, leading to poor user experiences. Your careful assessment helps prevent these errors.","type":"object","properties":{"explanation":{"type":"string","description":"Explain precisely why the parameter value does or does not match the specification's type, format, and unit requirements. Reference specific details from the parameter specification including data type, format requirements, unit conventions, and any pattern constraints. For non-conforming values, explain exactly what is incorrect and how it deviates from requirements."},"evidence":{"type":"string","description":"Quote the spec's type/format definition and the actual provided value that supports your judgment. Include EXACT text from the tool specification regarding this parameter's requirements."},"output":{"type":"integer","minimum":1,"maximum":5,"threshold_low":4,"threshold_high":5,"description":"Format alignment score: 5=perfect alignment, 4=minor deviation, 3=moderate deviation, 2=major deviation, 1=complete mismatch."},"confidence":{"type":"number","minimum":0,"maximum":1,"threshold_low":0.7,"threshold_high":1,"description":"Your confidence in this format assessment (0.0-1.0). Use lower confidence when specification is ambiguous. Use high confidence when requirements are clearly defined."},"correction":{"type":"object","properties":{"reason_types":{"type":"array","description":"Types of format issues with the parameter value, if any. Use one or more of these values: TYPE_ERROR (wrong data type), FORMAT_ERROR (incorrect format), UNIT_ERROR (wrong/missing units), PATTERN_ERROR (doesn't match required pattern), CONSISTENCY_ERROR (inconsistent with related parameters), OTHER (explain in reasons).","items":{"type":"string","enum":["TYPE_ERROR","FORMAT_ERROR","UNIT_ERROR","PATTERN_ERROR","CONSISTENCY_ERROR","OTHER"]}},"reasons":{"type":"string","description":"Concise explanation of the specific format issues with the parameter value."},"parameter":{"type":"object","description":"Object containing parameter name as key and correctly formatted value as value.","additionalProperties":true}},"description":"For correctly formatted values (output ≥ 4): Provide an empty object {}. For format issues (output ≤ 3): Provide an object with reason_types, reasons, and parameter correction.","required":[]},"actionable_recommendation":{"type":"string","description":"Provide specific, actionable recommendations for the agent developer to prevent format alignment issues with parameter values. Only provide recommendations when problems are detected (output ≤ 3). Include multiple detailed suggestions where appropriate, such as:\n\n1. FORMAT DOCUMENTATION ENHANCEMENT: Suggest specific improvements to parameter format documentation, e.g., 'Update the \"duration\" parameter description to: \"String in format: number followed by unit. Valid units: seconds, minutes, hours. Examples: \"5 minutes\", \"2 hours\", \"30 seconds\".\"'\n\n2. EXPLICIT FORMAT EXAMPLES: Recommend adding clear examples that demonstrate the expected format, like 'Add the following examples to the \"date\" parameter description: \"Format: YYYY-MM-DD. Examples: \"2023-12-31\", \"2024-01-15\". Do not use other date formats.\"'\n\n3. FORMAT VALIDATION RULES: Propose specific validation logic for checking formats before making tool calls, such as 'Implement a regex validation for the \"duration\" parameter that ensures it matches pattern \"^\\d+\\s+(seconds|minutes|hours)$\" before proceeding.'\n\n4. FORMAT CONVERSION UTILITIES: Suggest format conversion mechanisms, like 'Implement a date format converter that automatically transforms common user date formats (\"Dec 31\", \"tomorrow\") into the required ISO format (YYYY-MM-DD) with user confirmation.'\n\n5. UNIT STANDARDIZATION: Recommend clarifications for unit handling, e.g., 'Update the \"temperature\" parameter description to explicitly state: \"Must include unit (celsius, fahrenheit). Example: \"23 celsius\" or \"75 fahrenheit\". Do not omit units.\"'\n\nEnsure recommendations are thorough, specific, and directly address the root cause of the format alignment issue."}},"required":["explanation","evidence","output","confidence","correction","actionable_recommendation"]},"examples":[{"user_kwargs":{"conversation_context":[{"role":"user","content":"Start a countdown for 5 minutes."}],"tools_inventory":[{"name":"set_timer","description":"Set a countdown timer","parameters":{"duration":"string"}}],"tool_call":{"name":"set_timer","parameters":{"duration":"5 minutes"}},"parameter_name":"duration","parameter_value":"5 minutes"},"output":{"explanation":"The parameter value \"5 minutes\" perfectly conforms to the specification. The spec indicates that the duration parameter should be a string, and the example provided in the spec is \"5 minutes\". The parameter value matches this exactly, using a string that contains a number followed by the unit of time (minutes). The format is clear, appropriate, and exactly matches the expected pattern.","evidence":"Specification for set_timer.duration: \"string\". Example format in spec: \"5 minutes\". Provided value: \"5 minutes\".","output":5,"confidence":0.98,"correction":{},"actionable_recommendation":""}},{"user_kwargs":{"conversation_context":[{"role":"user","content":"Start a countdown for 5 minutes."}],"tools_inventory":[{"name":"set_timer","description":"Set a countdown timer","parameters":{"duration":"string"}}],"tool_call":{"name":"set_timer","parameters":{"duration":"300000"}},"parameter_name":"duration","parameter_value":"300000"},"output":{"explanation":"The parameter value \"300000\" significantly deviates from the expected format. While it is provided as a string which matches the required data type, it appears to represent milliseconds rather than using the expected format of a number followed by a time unit. The specification example shows \"5 minutes\" as the expected format, indicating that time units should be explicitly included. The value \"300000\" lacks any unit specification and uses a different representation of time (milliseconds instead of minutes with a unit), which could lead to confusion or incorrect interpretation by the API.","evidence":"Specification for set_timer.duration: \"string\". Example format in spec: \"5 minutes\". Provided value: \"300000\".","output":2,"confidence":0.93,"correction":{"reason_types":["FORMAT_ERROR","UNIT_ERROR"],"reasons":"Missing time unit and using milliseconds instead of specified format with explicit units","parameter":{"duration":"5 minutes"}},"actionable_recommendation":"1. FORMAT DOCUMENTATION ENHANCEMENT: Update the \"duration\" parameter description to: \"String that must include both a number and a time unit. Valid units: seconds, minutes, hours. Format: [number] [unit]. Examples: \"5 minutes\", \"30 seconds\", \"2 hours\".\"\n\n2. SYSTEM PROMPT ADDITIONS: Add to the system prompt: \"For time duration parameters, always use the format [number] [unit] (e.g., '5 minutes', '30 seconds'). Never provide milliseconds or numeric-only values without units.\"\n\n3. FORMAT VALIDATION RULES: Implement a regex validation for the duration parameter that ensures it matches the pattern \"^\\d+\\s+(seconds|minutes|hours)$\" before making the tool call.\n\n4. FORMAT CONVERSION UTILITIES: Create a duration format converter that automatically transforms numeric values into proper time unit strings with user confirmation (e.g., detects when the agent tries to use \"300000\" and converts to \"5 minutes\" with confirmation).\n\n5. PARAMETER PREPROCESSING: Add a preprocessing step that detects when a duration is expressed as a raw number and automatically appends the appropriate unit based on context or asks for clarification."}}]}