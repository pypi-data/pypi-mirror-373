[project]
name = "nous-llm"
version = "0.2.0"
description = "Intelligent No Frills LLM Router - A unified interface for multiple LLM providers"
readme = "README.md"
license = {text = "MPL-2.0"}
authors = [
    {name = "Amod ML", email = "amodsahabandu@icloud.com"},
]
keywords = ["llm", "openai", "anthropic", "gemini", "xai", "openrouter", "ai", "ml"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"

# Core dependencies (minimal for base functionality) - Updated August 2025
dependencies = [
    "httpx>=0.28.0,<1.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "anyio>=4.10.0,<5.0.0", 
    "tenacity>=9.0.0,<11.0.0",
]

# Optional dependencies for specific providers - Updated August 2025
[project.optional-dependencies]
openai = ["openai>=1.101.0,<2.0.0"]
anthropic = ["anthropic>=0.64.0,<1.0.0"]
gemini = ["google-genai>=0.8.0,<2.0.0"]
xai = ["xai-sdk>=1.1.0,<3.0.0"]
openrouter = ["openai>=1.101.0,<2.0.0"]  # Uses OpenAI SDK with custom base URL

# Install all providers
all = [
    "openai>=1.101.0,<2.0.0",
    "anthropic>=0.64.0,<1.0.0", 
    "google-genai>=0.8.0,<2.0.0",
    "xai-sdk>=1.1.0,<3.0.0",
]

# Development dependencies - Updated August 2025
dev = [
    "mypy>=1.17.0,<2.0.0",
    "ruff>=0.12.0,<1.0.0",
    "pytest>=8.4.0,<9.0.0",
    "pytest-asyncio>=0.24.0,<1.0.0",
    "pytest-httpx>=0.32.0,<1.0.0",
    "pytest-cov>=4.0.0,<6.0.0",
    "respx>=0.21.0,<1.0.0",
    "python-dotenv>=1.1.0,<2.0.0",
    "faker>=20.0.0,<30.0.0",  # For generating test data
]

[project.urls]
Homepage = "https://github.com/amod-ml/nous-llm"
Repository = "https://github.com/amod-ml/nous-llm"
Documentation = "https://github.com/amod-ml/nous-llm#readme"
"Bug Reports" = "https://github.com/amod-ml/nous-llm/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/nous_llm"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "T20", # flake8-print
    "N",   # pep8-naming
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "T20", "PLR2004"]
"__init__.py" = ["F401"]
"src/nous_llm/adapters/*" = ["PLC0415"]  # Allow dynamic imports for optional dependencies

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "google.genai.*", 
    "xai_sdk.*",
    "respx.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests (use '-m integration' to run)",
    "real_api: marks tests that make real API calls (expensive)",
]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "ruff>=0.12.10",
    "pytest>=8.4.1",
    "pytest-asyncio>=0.24.0",
    "pytest-httpx>=0.32.0",
    "respx>=0.21.0",
    "python-dotenv>=1.1.1",
    "faker>=29.0.0",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_pattern = [
    "src/nous_llm/__init__.py:__version__ = \"{version}\"",
]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "python -m build"
dist_path = "dist/"
upload_to_pypi = false  # We handle this in GitHub Actions
upload_to_release = true
commit_subject = "chore(release): {version}"
commit_message = "Automatically generated by python-semantic-release"
tag_format = "v{version}"
hvcs = "github"
major_on_zero = false
allow_zero_version = true

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^chore.*",
    "^ci.*",
    "^Merge.*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true
trim_blocks = true
lstrip_blocks = true
