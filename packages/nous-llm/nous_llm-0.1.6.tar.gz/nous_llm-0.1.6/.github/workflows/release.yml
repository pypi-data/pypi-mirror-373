name: Release & Publish (Trusted Publisher)

on:
  # Tag pushes publish to real PyPI (e.g., v0.1.0)
  push:
    tags:
      - "v*"
  # Manual runs publish to TestPyPI
  workflow_dispatch:

# Only what's needed globally. OIDC is set per publish job.
permissions:
  contents: write   # needed for creating GitHub releases on tag
  actions: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build distributions (sdist + wheel)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build
        run: python -m build

      - name: Validate artifacts (twine check)
        run: python -m twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          if-no-files-found: error
          retention-days: 5

  test-install:
    name: Smoke test import on 2 OS Ã— 2 Python
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Install built wheel/sdist
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Prefer wheel if present; fall back to sdist
          WHEEL=$(ls dist/*.whl 2>/dev/null || true)
          if [ -n "$WHEEL" ]; then
            python -m pip install "$WHEEL"
          else
            python -m pip install dist/*.tar.gz
          fi

      - name: Import test
        run: |
          python - << 'PY'
          from nous_llm import NousLLM, __version__
          print("Import OK, version:", __version__)
          PY

  github-release:
    # Only create a GitHub release when a tag triggered the workflow
    if: startsWith(github.ref, 'refs/tags/')
    name: Create GitHub Release (on tag)
    needs: [build, test-install]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Extract version from tag
        id: v
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Compose basic release notes
        run: |
          cat > release_notes.md <<EOF
          ## Release v${{ steps.v.outputs.version }}
          Built from tag \`v${{ steps.v.outputs.version }}\`.

          - Distributions: sdist + wheel
          - Python: 3.12+
          EOF

      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create "v${{ steps.v.outputs.version }}" \
            --title "v${{ steps.v.outputs.version }}" \
            --notes-file release_notes.md \
            dist/*

  publish-testpypi:
    # Manual runs publish to TestPyPI (no tag required)
    if: github.event_name == 'workflow_dispatch'
    name: Publish to TestPyPI
    needs: [build, test-install]
    runs-on: ubuntu-latest
    environment: testpypi   # MUST MATCH the environment configured on TestPyPI
    permissions:
      id-token: write       # OIDC for Trusted Publishing
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish (TestPyPI)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          skip-existing: true
          verbose: true

  publish-pypi:
    # Tag pushes publish to real PyPI
    if: startsWith(github.ref, 'refs/tags/')
    name: Publish to PyPI
    needs: [build, test-install, github-release]
    runs-on: ubuntu-latest
    environment: pypi       # MUST MATCH the environment configured on PyPI
    permissions:
      id-token: write       # OIDC for Trusted Publishing
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish (PyPI)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true   # helpful while iterating; remove when strict
          verbose: true
          print-hash: true
