name: Semantic Release

on:
  push:
    branches:
      - main

# Default permissions for security
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-semantic-release-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    
    # Required permissions for semantic release
    permissions:
      contents: write  # Create GitHub releases and push version commits
      id-token: write  # OIDC for Trusted Publishing to PyPI
    
    environment: pypi  # Must match the environment configured on PyPI for Trusted Publishing
    
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Setup | Checkout Repository 
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for semantic-release
          
      - name: Setup | Python & Dependencies
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Setup | Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
          
      - name: Release | Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          build: false  # We'll build separately to ensure dependencies are available
          git_committer_name: "github-actions[bot]"
          git_committer_email: "github-actions[bot]@users.noreply.github.com"
          
      - name: Build | Build distribution artifacts
        if: steps.release.outputs.released == 'true'
        run: python -m build
        
      - name: Validate | Check distribution artifacts
        if: steps.release.outputs.released == 'true'
        run: python -m twine check dist/*
        
      - name: Upload | Upload to GitHub Release Assets
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}
          
      - name: Publish | Upload to PyPI (Trusted Publisher)
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
          verbose: true
          print-hash: true

  smoke-test:
    needs: semantic-release
    if: needs.semantic-release.outputs.released == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12", "3.13"]
    
    steps:
      - name: Setup | Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Test | Install from PyPI and test import
        run: |
          # Wait a bit for PyPI to propagate the new version
          sleep 30
          python -m pip install --upgrade pip
          python -m pip install nous-llm==${{ needs.semantic-release.outputs.version }}
          python -c "from nous_llm import __version__, NousLLM; print('Import successful, version:', __version__)"
