{
  "query_lineage": [
    {
      "description": "To answer software-factory related questions such as: What repos (or code repositories) are related/part of a product? or What are all the software-factory related components of a product (in this case query for asset_type and asset_name for the logical_app and logical_app_version)?"
    },
    {
      "args": {
        "columns": [],
        "filters": [],
        "metrics": [],
        "groupby": [],
        "orderby": [],
        "row_limit": 20
      },
      "instructions": "Output ONLY the JSON object with no extra text, keep Querys as simple as possible while still including all relvant info. If the query mentions querying a specific table\u2014like the vulnerabilities table\u2014or requests something like the lineage graph, the function called should correspond to that specific query."
    },
    {
      "columns": {
        "description": "list of columns to select. Use only these valid columns. Don't use extra columns, only the ones you need. If using metrics, all columns must appear in groupby.",
        "Valid Columns": [
          [
            "platform_type",
            "The type of platform to which the asset belongs (e.g SCM)"
          ],
          [
            "properties",
            "A raw json of the asset record from the attestation"
          ],
          [
            "version_id",
            "Table ID of the version"
          ],
          [
            "product_id",
            "Table ID of the product"
          ],
          [
            "parent_name",
            "The asset name of the parent asset"
          ],
          [
            "parent_type",
            "The asset type of the parent asset"
          ],
          [
            "asset_name",
            "The name of the asset"
          ],
          [
            "path",
            "A url/location of where to find the asset"
          ],
          [
            "parent_id",
            "The table id of the parent asset"
          ],
          [
            "child_id",
            "The table id of the child asset"
          ],
          [
            "teamId",
            "Scribe teamID (required for RLS)"
          ],
          [
            "owner",
            "Not Applicable"
          ],
          [
            "platform_name",
            "Name of the platform to which an asset belongs (e.g Github)"
          ],
          [
            "asset_type",
            "The type of asset (e.g image)"
          ],
          [
            "external_id",
            "Asset identifier as extracted from the relevant api or calculated"
          ],
          [
            "timestamp",
            "Timestamp of when the asset was inserted into the table"
          ],
          [
            "uri",
            "URL of the asset"
          ],
          [
            "prent_bloack",
            ""
          ],
          [
            "more",
            ""
          ],
          [
            "tooltip",
            "Pop up showing field showing asset name when hovering"
          ],
          [
            "parent_external_id",
            "Asset identifier as extracted from the relevant api or calculated for the parent of the asset"
          ],
          [
            "logical_app",
            "Product name"
          ],
          [
            "logical_app_version",
            "Version of the product"
          ],
          [
            "asset_block",
            ""
          ],
          [
            "g-source",
            "The source of the asset ( the assets parents external id combined with the parent assets type)"
          ],
          [
            "g-target",
            "The target asset ( the assets external id combined with the assets type)"
          ]
        ]
      }
    },
    {
      "filters": {
        "description": "List of filter objects with keys. When making multiple similar queries, e.g., for each ..., use the 'in' operator to group them and provide 'val' as a list.",
        "use": {
          "col": "column name (must be valid)",
          "op": "operator: ==, !=, >, <, >=, <=, in, not in, is null, is not null",
          "val": "filter value"
        }
      }
    },
    {
      "metrics": {
        "description": "Use this when the question asks for how many or to find the value of something, otherwise it should be []",
        "use": {
          "label": "output column name",
          "expressionType": "SQL",
          "sqlExpression": "e.g. \"COUNT(*)\""
        }
      }
    },
    {
      "groupby": {
        "description": "List of columns to group the query by. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "orderby": {
        "description": "List of [column_name or metric_label, is_ascending_boolean]. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "row_limit": {
        "description": "integer, 0 < int <= 30"
      }
    }
  ],
  "query_policy_results": [
    {
      "description": "To answer questions about policy evaluations like: What are the policy rules used? or Which of my products has SSDF policy violations? or List policy violations for a product."
    },
    {
      "args": {
        "columns": [],
        "filters": [],
        "metrics": [],
        "groupby": [],
        "orderby": [],
        "row_limit": 20
      },
      "instructions": "Output ONLY the JSON object with no extra text, keep Querys as simple as possible while still including all relvant info. If the query mentions querying a specific table\u2014like the vulnerabilities table\u2014or requests something like the lineage graph, the function called should correspond to that specific query."
    },
    {
      "columns": {
        "description": "list of columns to select. Use only these valid columns. Don't use extra columns, only the ones you need. If using metrics, all columns must appear in groupby.",
        "Valid Columns": [
          [
            "control_name",
            "Policy control name"
          ],
          [
            "rule_name",
            "The policy rule"
          ],
          [
            "logical_app_version",
            "Version of the product"
          ],
          [
            "formatted_msg",
            "Rule result message formatted to not break json object"
          ],
          [
            "more_json",
            "Rule result details as a json object"
          ],
          [
            "details",
            "Rule results details as xmlelement for display in UI"
          ],
          [
            "initiative_name",
            "Name of the policy initiative"
          ],
          [
            "is_latest_logical_version",
            "True if this version is the latest"
          ],
          [
            "asset",
            "Asset the rule run on and its type in parentheses"
          ],
          [
            "gate",
            "Location where the policy evalution took place and its type in parentheses"
          ],
          [
            "initiative_hash",
            "Hash of the whole initiaitive (for version differentiation)"
          ],
          [
            "count",
            "Numer of occurences of the rule evaluation on the asset with the same rule result (for vulnerabilities each vulnerability found counts as one occurrance)"
          ],
          [
            "message",
            "Rule result message"
          ],
          [
            "logical_app",
            "Product name"
          ],
          [
            "evaluations",
            "Raw SARIF of the rule result as a json object"
          ],
          [
            "date",
            "Date of last policy evaluation"
          ],
          [
            "time_evaluated",
            "Rule evaluation timestamp"
          ],
          [
            "asset_id",
            "Asset identifier as extracted from the relevant API or calculated (not necessarily unique)"
          ],
          [
            "teamId",
            "Scribe teamID (required for RLS)"
          ],
          [
            "version_id",
            "Product version id"
          ],
          [
            "gate_name",
            "Location where the policy evalution took place"
          ],
          [
            "asset_name",
            "Asset the rule run on"
          ],
          [
            "gate_type",
            "Location type where the policy evalution took place"
          ],
          [
            "status",
            "Rule result status"
          ],
          [
            "asset_type",
            "Type of the asset the rule run on"
          ],
          [
            "rule_id",
            "Policy rule ID in the format of \"rule-id:<initiative-id>/<control-id>/<rule-id>"
          ],
          [
            "status_icon",
            "Display icon for the rule result status"
          ],
          [
            "product_id",
            "Rule ID of the product"
          ]
        ]
      }
    },
    {
      "filters": {
        "description": "List of filter objects with keys. When making multiple similar queries, e.g., for each ..., use the 'in' operator to group them and provide 'val' as a list.",
        "use": {
          "col": "column name (must be valid)",
          "op": "operator: ==, !=, >, <, >=, <=, in, not in, is null, is not null",
          "val": "filter value"
        }
      }
    },
    {
      "metrics": {
        "description": "Use this when the question asks for how many or to find the value of something, otherwise it should be []",
        "use": {
          "label": "output column name",
          "expressionType": "SQL",
          "sqlExpression": "e.g. \"COUNT(*)\""
        }
      }
    },
    {
      "groupby": {
        "description": "List of columns to group the query by. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "orderby": {
        "description": "List of [column_name or metric_label, is_ascending_boolean]. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "row_limit": {
        "description": "integer, 0 < int <= 30"
      }
    }
  ],
  "query_products": [
    {
      "description": "To answer questions about products like: what are the/my products? What are the components of my product (the this case use the targetName column!)? What are the depdencieis of my product (search the component_name column)? Note that repositories and namespaces are part of the lineage table."
    },
    {
      "args": {
        "columns": [],
        "filters": [],
        "metrics": [],
        "groupby": [],
        "orderby": [],
        "row_limit": 20
      },
      "instructions": "Output ONLY the JSON object with no extra text, keep Querys as simple as possible while still including all relvant info. If the query mentions querying a specific table\u2014like the vulnerabilities table\u2014or requests something like the lineage graph, the function called should correspond to that specific query."
    },
    {
      "columns": {
        "description": "list of columns to select. Use only these valid columns. Don't use extra columns, only the ones you need. If using metrics, all columns must appear in groupby.",
        "Valid Columns": [
          [
            "more",
            "UI expandable element containing detailed component information"
          ],
          [
            "license_is_permissive_na",
            "Permissive license flag with false default for unknown licenses"
          ],
          [
            "teamId",
            "Scribe teamID (required for RLS)"
          ],
          [
            "component_version",
            "Exact version of the component currently in use"
          ],
          [
            "license_expression",
            "Complex license expression for dual or conditional licensing"
          ],
          [
            "pkg",
            "Package manager (duplicate of component_group for compatibility)"
          ],
          [
            "rstatus",
            "Version publication status (Latest, Published, or Draft)"
          ],
          [
            "component_purl",
            "Package URL - universal component identifier across ecosystems"
          ],
          [
            "dependency_parents",
            "Array of components that depend on this component"
          ],
          [
            "dependency_children",
            "Array of components that this component depends on"
          ],
          [
            "component_dependency_type",
            "Array of dependency types (runtime, compile, test, optional, development)"
          ],
          [
            "logical_app",
            "Product name"
          ],
          [
            "logical_app_version",
            "Version of the product"
          ],
          [
            "scorecard_id",
            "Reference to detailed OpenSSF Scorecard analysis record"
          ],
          [
            "version_is_up_to_date",
            "Boolean indicating if the component is using the latest available version"
          ],
          [
            "product_id",
            "Unique identifier of the product/application containing this component"
          ],
          [
            "attestation_name",
            "Name of the attestation that discovered this component"
          ],
          [
            "high_severity_cves",
            "Count of critical and high severity vulnerabilities"
          ],
          [
            "maintenance_score",
            "Text representation of component maintenance health assessment"
          ],
          [
            "component_name",
            "Full name of the component including namespace if applicable"
          ],
          [
            "labels",
            "Custom tags for categorization and filtering (tier, environment, etc.)"
          ],
          [
            "licenses",
            "SPDX license identifiers for the component"
          ],
          [
            "attestation_ids",
            "Array of attestation record IDs linked to this component"
          ],
          [
            "component_external_ref",
            "URL to component repository, documentation, or homepage"
          ],
          [
            "license_expression_na",
            "License expression with N/A displayed for missing license data"
          ],
          [
            "component_publisher",
            "Organization or individual who published the component to the package registry"
          ],
          [
            "component_description",
            "Brief description of the component's functionality and purpose"
          ],
          [
            "targets_translated",
            "User-friendly SBOM type (container\u2192image, git\u2192source)"
          ],
          [
            "component_author",
            "Original creator or maintainer of the component"
          ],
          [
            "relation",
            "Human-readable summary of dependency relationships"
          ],
          [
            "main_tool",
            "Primary scanner tool that generated this SBOM entry"
          ],
          [
            "maintenance_score_int",
            "The dependency's OpenSSF maintenance score (as an integer) [Check]"
          ],
          [
            "block",
            ""
          ],
          [
            "tools",
            "Comma-separated list of scanners that detected this component"
          ],
          [
            "license_is_permissive",
            "Boolean indicating if the license allows free use (true for MIT/Apache, false for GPL)"
          ],
          [
            "scorecard_score",
            "OpenSSF security score (0.0-10.0) measuring security practices"
          ],
          [
            "targets",
            "SBOM type indicating source (container, git, package, file, etc.)"
          ],
          [
            "component_type",
            "Component classification (library, framework, application, etc.)"
          ],
          [
            "source_layer",
            "Container layer or source location where component was introduced"
          ],
          [
            "component_locations",
            "JSON array of file paths and locations where component is used"
          ],
          [
            "component_id",
            "Id of the component foud in the attestation"
          ],
          [
            "id",
            "Unique record identifier for this SBOM entry"
          ],
          [
            "base_layer",
            "is dependency coming from a an image layer that is a known base layer"
          ],
          [
            "latest_version",
            "Most recent version available in the package registry"
          ],
          [
            "tag",
            "Version tag or release identifier for the component"
          ],
          [
            "targetName",
            "Primary name of the component as it appears in the package manager"
          ],
          [
            "component_group",
            "Package manager or ecosystem (npm, maven, pypi, docker, gem, go, etc.)"
          ],
          [
            "version_timestamp",
            "Earliest upload timestamp of an attestation in the currently in the product version"
          ],
          [
            "attestation_ids_cnt",
            "Count of security attestations that have verified this component"
          ],
          [
            "pipeline_run_id",
            "Identifier of the ETL pipeline execution that created/updated this record"
          ]
        ]
      }
    },
    {
      "filters": {
        "description": "List of filter objects with keys. When making multiple similar queries, e.g., for each ..., use the 'in' operator to group them and provide 'val' as a list.",
        "use": {
          "col": "column name (must be valid)",
          "op": "operator: ==, !=, >, <, >=, <=, in, not in, is null, is not null",
          "val": "filter value"
        }
      }
    },
    {
      "metrics": {
        "description": "Use this when the question asks for how many or to find the value of something, otherwise it should be []",
        "use": {
          "label": "output column name",
          "expressionType": "SQL",
          "sqlExpression": "e.g. \"COUNT(*)\""
        }
      }
    },
    {
      "groupby": {
        "description": "List of columns to group the query by. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "orderby": {
        "description": "List of [column_name or metric_label, is_ascending_boolean]. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "row_limit": {
        "description": "integer, 0 < int <= 30"
      }
    }
  ],
  "query_risk": [
    {
      "description": "To answer questions about products like: what are the/my products? What are the components of my product (the this case use the targetName column!)? What are the depdencieis of my product (search the component_name column)? Note that repositories and namespaces are part of the lineage table."
    },
    {
      "args": {
        "columns": [],
        "filters": [],
        "metrics": [],
        "groupby": [],
        "orderby": [],
        "row_limit": 20
      },
      "instructions": "Output ONLY the JSON object with no extra text, keep Querys as simple as possible while still including all relvant info. If the query mentions querying a specific table\u2014like the vulnerabilities table\u2014or requests something like the lineage graph, the function called should correspond to that specific query."
    },
    {
      "columns": {
        "description": "list of columns to select. Use only these valid columns. Don't use extra columns, only the ones you need. If using metrics, all columns must appear in groupby.",
        "Valid Columns": [
          [
            "target_cves_in_base_image",
            "Number of CVEs in Component Base Image"
          ],
          [
            "total_completion",
            ""
          ],
          [
            "target_fixables",
            "Number of fixable risky CVEs of the component"
          ],
          [
            "weighted_cve_risk",
            "Risk imposed by the CVE, taking into account weights (business criticality, public facing, publicly available)"
          ],
          [
            "target_risk",
            "Total risk for this component of the product"
          ],
          [
            "has_fix",
            "True if there is a fix for this vulnerability (usually an udate for the vulnerable dependency)"
          ],
          [
            "in_base_image",
            "True if the vulnerability is in the base layer of a Docker image"
          ],
          [
            "target",
            "The component (usually a Docker image name:tag)"
          ],
          [
            "vulnerability_id",
            "CVE ID for this line"
          ],
          [
            "target_badges",
            ""
          ],
          [
            "logical_app_version_cves_in_base_image",
            "Total CVEs in base image for this product version"
          ],
          [
            "logical_app_version",
            "Version of Product in ScribeHub"
          ],
          [
            "logical_app",
            "Name of Product in ScribeHub. A product is made of components (e.g. a few docker images)"
          ],
          [
            "logical_app_version_exploitables",
            "Number of exploitable CVEs in the Product-Version"
          ],
          [
            "logical_app_version_fixables",
            "Number of Fixable CVEs in the product-version"
          ],
          [
            "weight",
            "the is the accumulated weight for this Componen (Target)"
          ],
          [
            "logical_app_version_risk",
            "Total risk for this Product Version"
          ],
          [
            "has_kev",
            "True if this CVE is a Known Exploitable Vulnerability"
          ],
          [
            "target_exploitables",
            "Number of Exploitable CVEs in the component"
          ],
          [
            "num_targets",
            "Number of Components in the Product"
          ],
          [
            "logical_app_badges",
            ""
          ],
          [
            "teamId",
            "ID of the team within Scribe"
          ],
          [
            "total_risk",
            "Total risk for this team (across all product-versions)"
          ],
          [
            "total_exploitables",
            "Total number of exploitable CVEs in the team"
          ],
          [
            "total_fixables",
            "Total number of CVEs with a fix in the team"
          ],
          [
            "total_cves_in_base_image",
            "Total number of CVEs that are in a base image, across the team"
          ],
          [
            "totals_badge",
            ""
          ],
          [
            "cve_badges",
            ""
          ]
        ]
      }
    },
    {
      "filters": {
        "description": "List of filter objects with keys. When making multiple similar queries, e.g., for each ..., use the 'in' operator to group them and provide 'val' as a list.",
        "use": {
          "col": "column name (must be valid)",
          "op": "operator: ==, !=, >, <, >=, <=, in, not in, is null, is not null",
          "val": "filter value"
        }
      }
    },
    {
      "metrics": {
        "description": "Use this when the question asks for how many or to find the value of something, otherwise it should be []",
        "use": {
          "label": "output column name",
          "expressionType": "SQL",
          "sqlExpression": "e.g. \"COUNT(*)\""
        }
      }
    },
    {
      "groupby": {
        "description": "List of columns to group the query by. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "orderby": {
        "description": "List of [column_name or metric_label, is_ascending_boolean]. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "row_limit": {
        "description": "integer, 0 < int <= 30"
      }
    }
  ],
  "query_vulnerabilities": [
    {
      "description": "To answer questions about vulnerabilities like: What are the vulnerabilities of my product? What are the vulnerabilities of a specific component? What are the vulnerabilities of a specific version of a component? Which products have a specific vulnerability, or a vulnerability with a specificy characteristic (such as has_key)"
    },
    {
      "args": {
        "columns": [],
        "filters": [],
        "metrics": [],
        "groupby": [],
        "orderby": [],
        "row_limit": 20
      },
      "instructions": "Output ONLY the JSON object with no extra text, keep Querys as simple as possible while still including all relvant info. If the query mentions querying a specific table\u2014like the vulnerabilities table\u2014or requests something like the lineage graph, the function called should correspond to that specific query."
    },
    {
      "columns": {
        "description": "list of columns to select. Use only these valid columns. Don't use extra columns, only the ones you need. If using metrics, all columns must appear in groupby.",
        "Valid Columns": [
          [
            "component_id",
            "The id of the component/dependency that the vulnerability affects"
          ],
          [
            "vulnerability_id",
            "the id of the vulnerability"
          ],
          [
            "vector",
            "The cvss vector of the vulnerability"
          ],
          [
            "severity_string",
            "severity string of the vulnerability (e.g Medium)"
          ],
          [
            "base_severity_string",
            "Text representation of the base severity level of the vulnerability"
          ],
          [
            "advisory_status",
            "current status of the advisory related to the vulnerability (e.g. draft, published, approved, rejected)"
          ],
          [
            "final_severity",
            "0 if a user/3rd part advisory that lowers the severity, if not lowered then its the severity of the vulnerability"
          ],
          [
            "tool",
            "The tool that found the vulnerability"
          ],
          [
            "teamId",
            "Scribe teamID (required for RLS)"
          ],
          [
            "pipeline_run_id",
            "Version(pipeline run) id that contains the vulnerability"
          ],
          [
            "pkg",
            "The package manager of the dependency that contains the vulnerability"
          ],
          [
            "latest_package_version",
            "The latest known versison of the dependency"
          ],
          [
            "attestation_ids",
            "The ids of the attestations in which the vulnerability was found"
          ],
          [
            "cvss_score",
            "The cvss score of the vulnerability"
          ],
          [
            "logical_app",
            "Product name"
          ],
          [
            "vul_component_fixed_in_versions",
            "The versions of the component in which the vulnerability as fixed"
          ],
          [
            "will_not_fix",
            "Reported by the source as the vulnerability on this component will not be fixed"
          ],
          [
            "attestation_name",
            "The name of the attestation where the vulnerability was found [CHECK]"
          ],
          [
            "tag",
            "The version of the component to which the vulnerability effects"
          ],
          [
            "targetName",
            "The name of the attestation where the vulnerability was found"
          ],
          [
            "base_score",
            "The severity score of the vulnerability (e.g 4)"
          ],
          [
            "source_layer",
            "container/image layer where vulnerability was introduced"
          ],
          [
            "text",
            "Details about the vulnerability as provided by the advisory"
          ],
          [
            "is_latest_logical_version",
            "True if this version is the latest"
          ],
          [
            "update",
            "[CHECK]"
          ],
          [
            "cwe_array",
            "array of CWE ID's"
          ],
          [
            "has_fix",
            "Resolves to TRUE if vulnerability has a fixed version"
          ],
          [
            "component_purl",
            "The package url of the effected dependency"
          ],
          [
            "component_version",
            "the version of the dependency/component that is vulnerable"
          ],
          [
            "component_locations",
            "The path to where the dependency was imported from into the project"
          ],
          [
            "vul_date_changed",
            "Timestamp of most recent vulnerability change"
          ],
          [
            "vul_component_created",
            "Time when the vulnerability component was inserted into the table"
          ],
          [
            "epssProbability",
            "The epss percentage for the vulnerability"
          ],
          [
            "vendor",
            "The vendor of the application who provided the advisory"
          ],
          [
            "direct_cwes",
            ""
          ],
          [
            "advisory_modified",
            "The timestamp refelecting the time in which the advisory was updated"
          ],
          [
            "hyper_links",
            "Hyper links provided by the advisory"
          ],
          [
            "advisory_text",
            "The description given about the vulnerability from this advisory"
          ],
          [
            "cwes",
            "The CWEs associated with the vulnerability"
          ],
          [
            "advisory_justification",
            "Justification when marking a product version as not affected by a specific vulnerability"
          ],
          [
            "component_dependency_type",
            "The relationship of the component to the overall system"
          ],
          [
            "cpes",
            "cpes of the depencies that are affected by the vulnerability"
          ],
          [
            "has_kev",
            "The vulnerability is a Known Exploitable Vulnerability"
          ],
          [
            "version_timestamp",
            "The timestamp of the version to which the vulnerability belongs"
          ],
          [
            "severity",
            "The severity score of the vulnerability (e,g 8)"
          ],
          [
            "epssPercentile",
            "The percentile rank of the EPSS score, indicating how likely the vulnerability is to be exploited compared to others"
          ],
          [
            "epssScoreDate",
            "The date when the EPSS (Exploit Prediction Scoring System) score was last updated for the vulnerability"
          ],
          [
            "vul_adv_id",
            "Unique identifier for the vulnerability advisory record"
          ],
          [
            "dependency_analysis",
            "Details on how the dependency was introduced: direct or transitive (dependent library of a library), through source (e.g. package.json) or image (e.g. Dockerfile)"
          ],
          [
            "main_tool",
            "Tool that found the vulnerability"
          ],
          [
            "vul_published_on",
            "When the vulnerability was published"
          ],
          [
            "vul_hyperlinks",
            "Hyperlinks provided by the vul advisory to sources of the vulnerability"
          ],
          [
            "component_name",
            "The name of the dependency/component that is vulnerable"
          ],
          [
            "product_id",
            "table id of the product"
          ],
          [
            "labels",
            "Labels set by valint or user whe uploading the attestation"
          ],
          [
            "vul_source",
            "The advisory who reported the vulnerability"
          ],
          [
            "targets",
            "List of components affected by the vulnerability"
          ],
          [
            "logical_app_version",
            "Version of the product"
          ],
          [
            "id",
            "Identfier of the row"
          ]
        ]
      }
    },
    {
      "filters": {
        "description": "List of filter objects with keys. When making multiple similar queries, e.g., for each ..., use the 'in' operator to group them and provide 'val' as a list.",
        "use": {
          "col": "column name (must be valid)",
          "op": "operator: ==, !=, >, <, >=, <=, in, not in, is null, is not null",
          "val": "filter value"
        }
      }
    },
    {
      "metrics": {
        "description": "Use this when the question asks for how many or to find the value of something, otherwise it should be []",
        "use": {
          "label": "output column name",
          "expressionType": "SQL",
          "sqlExpression": "e.g. \"COUNT(*)\""
        }
      }
    },
    {
      "groupby": {
        "description": "List of columns to group the query by. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "orderby": {
        "description": "List of [column_name or metric_label, is_ascending_boolean]. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "row_limit": {
        "description": "integer, 0 < int <= 30"
      }
    }
  ],
  "query_findings": [
    {
      "description": "Use this function to answer questions about security findings from tools, such as severities, CWE types, affected components, or file locations. Use it when asking about issues found in scans, their severity, tool origin, or impacted products."
    },
    {
      "args": {
        "columns": [],
        "filters": [],
        "metrics": [],
        "groupby": [],
        "orderby": [],
        "row_limit": 20
      },
      "instructions": "Output ONLY the JSON object with no extra text, keep Querys as simple as possible while still including all relvant info. If the query mentions querying a specific table\u2014like the vulnerabilities table\u2014or requests something like the lineage graph, the function called should correspond to that specific query."
    },
    {
      "columns": {
        "description": "list of columns to select. Use only these valid columns. Don't use extra columns, only the ones you need. If using metrics, all columns must appear in groupby.",
        "Valid Columns": [
          [
            "line",
            "line number in the source file or codebase where the vulnerability or issue was found"
          ],
          [
            "file_path",
            "The source code file/ configuration file/ component name or artifact/ path in a container or image in which the issue exists"
          ],
          [
            "description",
            "A description of the finding"
          ],
          [
            "title",
            "The title of the finding"
          ],
          [
            "parser",
            "The tool used to generate the attestation"
          ],
          [
            "targetName",
            "The name of the attestation uploaded"
          ],
          [
            "logical_app_version",
            "Version of the product"
          ],
          [
            "context",
            "The context of the attestation"
          ],
          [
            "original_attestation_id",
            "The id of the attestation which is uploaded to be converted"
          ],
          [
            "severity_string",
            "severity of the cve as a single word"
          ],
          [
            "finding",
            "A raw json record of the finding"
          ],
          [
            "severity",
            "The severity of the finding which corresponds to the severity string (e.g 4)"
          ],
          [
            "more",
            "A column showing more details about the finding"
          ],
          [
            "cvssv3",
            "The cvss vector for the finding"
          ],
          [
            "created",
            "Timestamp of when the record was inserted into the databse"
          ],
          [
            "cwe_id",
            "The CWE ID for associated with the finding"
          ],
          [
            "id",
            "the table id of the finding"
          ],
          [
            "main_tool",
            "The tool used to create the attestation"
          ],
          [
            "severity_order",
            "Assigns a ranking to the severity. e,g (0-Critical, 1-High)"
          ],
          [
            "product_id",
            "Unique identifier for the product associated with the finding"
          ],
          [
            "pipeline_id",
            "Identifier for the pipeline in which the finding was detected"
          ],
          [
            "attestation_id",
            "The source attestation for this data. This ID can be used to retrieve the attestation or its metadata"
          ],
          [
            "component_name",
            "The name of the component to which the finding belongs"
          ],
          [
            "logical_app",
            "Product name"
          ],
          [
            "teamId",
            "Scribe teamID (required for RLS)"
          ],
          [
            "attack_vector",
            "A column calculated by looking at the attack vector component of the cvss vector and assigns a rating. (e.g /AV:N is assigned Network for the attack vector being the network)"
          ],
          [
            "Severity",
            "A caluclated column that creates a div containing an image depicting the severity of the finding"
          ],
          [
            "availability_impact",
            "A column calculated by looking at the availability impact component of the cvss vector and assigns a rating. (e.g '/A:L' is assigned Low for a Low availability impact)"
          ],
          [
            "confidentiality_impact",
            "A column calculated by looking at the confidentiality impact component of the cvss vector and assigns a rating. (e.g '/C:L' is assigned Low for a Low confidentiality impact)"
          ],
          [
            "integrity_impact",
            "A column calculated by looking at the intergity component of the cvss vector and assigns an impact rating. E.g ( /I:H is assingned High for a high intergity impact)"
          ],
          [
            "attack_complexity",
            "A column calculated by looking at the attack complexity component of the cvss vector and assigns a rating. (e.g /AC:L is assigned High for a High attack complexity)"
          ]
        ]
      }
    },
    {
      "filters": {
        "description": "List of filter objects with keys. When making multiple similar queries, e.g., for each ..., use the 'in' operator to group them and provide 'val' as a list.",
        "use": {
          "col": "column name (must be valid)",
          "op": "operator: ==, !=, >, <, >=, <=, in, not in, is null, is not null",
          "val": "filter value"
        }
      }
    },
    {
      "metrics": {
        "description": "Use this when the question asks for how many or to find the value of something, otherwise it should be []",
        "use": {
          "label": "output column name",
          "expressionType": "SQL",
          "sqlExpression": "e.g. \"COUNT(*)\""
        }
      }
    },
    {
      "groupby": {
        "description": "List of columns to group the query by. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "orderby": {
        "description": "List of [column_name or metric_label, is_ascending_boolean]. Should be either valid column or metrics label, otherwise []"
      }
    },
    {
      "row_limit": {
        "description": "integer, 0 < int <= 30"
      }
    }
  ]
}