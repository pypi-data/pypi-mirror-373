Assertion_id,Assertion,Assertion_type
0,"nbtest.assert_shape(df, (299, 13))",DATASET__read_csv
1,"nbtest.assert_column_names(df, ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'])",DATASET__read_csv
2,"nbtest.assert_column_types(df, ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'])",DATASET__read_csv
3,"nbtest.assert_df_mean(df, 20331.504464625676, atol=0.0)",DATASET__read_csv
4,"nbtest.assert_df_var(df, 5655280085.135918, atol=0.0)",DATASET__read_csv
5,"nbtest.assert_shape(nbtest_tmpvar_0, (10, 13))",DATASET__head
6,"nbtest.assert_column_names(nbtest_tmpvar_0, ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'])",DATASET__head
7,"nbtest.assert_column_types(nbtest_tmpvar_0, ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'])",DATASET__head
8,"nbtest.assert_df_mean(nbtest_tmpvar_0, 20584.102, atol=0.0)",DATASET__head
9,"nbtest.assert_df_var(nbtest_tmpvar_0, 5735375787.815456, atol=0.0)",DATASET__head
10,"nbtest.assert_allclose(nbtest_tmpvar_2.sum(), 0.0, atol=0.0)",DATASET__any
11,"nbtest.assert_shape(df, (299, 13))",DATASET__ATTRIBUTE_ACCESS
12,"nbtest.assert_shape(nbtest_tmpvar_3, (8, 13))",DATASET__describe
13,"nbtest.assert_column_names(nbtest_tmpvar_3, ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'])",DATASET__describe
14,"nbtest.assert_column_types(nbtest_tmpvar_3, ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'])",DATASET__describe
15,"nbtest.assert_df_mean(nbtest_tmpvar_3, 19528.024571370242, atol=0.0)",DATASET__describe
16,"nbtest.assert_df_var(nbtest_tmpvar_3, 9311258132.272377, atol=0.0)",DATASET__describe
17,"nbtest.assert_plot_equal(nbtest_tmpvar_4, op/reference_plot_nbtest_tmpvar_4.png, tol=0.0)",PLOT__show
18,"nbtest.assert_plot_equal(nbtest_tmpvar_6, op/reference_plot_nbtest_tmpvar_6.png, tol=0.0)",PLOT__show
19,"nbtest.assert_plot_equal(nbtest_tmpvar_7, op/reference_plot_nbtest_tmpvar_7.png, tol=17.873398016821184)",PLOT__show
20,"nbtest.assert_allclose(accuracy_score(y_test, y_pred), 0.86, atol=0.13824294235551798)",MODEL_PERF__accuracy_score
21,"nbtest.assert_allclose(roc_auc, 0.9011975576722046, atol=0.3108183263938182)",MODEL_PERF__auc
22,"nbtest.assert_plot_equal(nbtest_tmpvar_8, op/reference_plot_nbtest_tmpvar_8.png, tol=11.544812280903304)",PLOT__show
23,"nbtest.assert_allclose(sklearn.metrics.roc_auc_score(y_test, y_pred), 0.8117294344508721, atol=0.25288984323232894)",MODEL_PERF__roc_auc_score
24,"nbtest.assert_plot_equal(nbtest_tmpvar_9, op/reference_plot_nbtest_tmpvar_9.png, tol=17.07327335452311)",PLOT__show
25,"nbtest.assert_allclose(accuracy_score(y_test, y_pred), 0.8399999999999999, atol=0.11155467020454334)",MODEL_PERF__accuracy_score
26,"nbtest.assert_allclose(roc_auc, 0.8703553284927643, atol=0.2526541382312891)",MODEL_PERF__auc
27,"nbtest.assert_plot_equal(nbtest_tmpvar_10, op/reference_plot_nbtest_tmpvar_10.png, tol=13.68849511358324)",PLOT__show
28,"nbtest.assert_allclose(sklearn.metrics.roc_auc_score(y_test, y_pred), 0.7828300078540773, atol=0.221447519938719)",MODEL_PERF__roc_auc_score
29,"nbtest.assert_plot_equal(nbtest_tmpvar_11, op/reference_plot_nbtest_tmpvar_11.png, tol=17.92612039413047)",PLOT__show
30,"nbtest.assert_allclose(accuracy_score(y_test, y_pred), 0.8433333333333334, atol=0.17384539747207062)",MODEL_PERF__accuracy_score
31,"nbtest.assert_allclose(roc_auc, 0.892450814381976, atol=0.30124035651860387)",MODEL_PERF__auc
32,"nbtest.assert_plot_equal(nbtest_tmpvar_12, op/reference_plot_nbtest_tmpvar_12.png, tol=12.779822139620151)",PLOT__show
33,"nbtest.assert_allclose(sklearn.metrics.roc_auc_score(y_test, y_pred), 0.795746294783522, atol=0.236021362799409)",MODEL_PERF__roc_auc_score
34,"nbtest.assert_plot_equal(nbtest_tmpvar_13, op/reference_plot_nbtest_tmpvar_13.png, tol=17.94927077365101)",PLOT__show
35,"nbtest.assert_allclose(accuracy_score(y_test, y_pred), 0.8033333333333333, atol=0.15202339001321824)",MODEL_PERF__accuracy_score
36,"nbtest.assert_allclose(roc_auc, 0.8713930328099135, atol=0.39655209707331956)",MODEL_PERF__auc
37,"nbtest.assert_plot_equal(nbtest_tmpvar_14, op/reference_plot_nbtest_tmpvar_14.png, tol=12.47883638070367)",PLOT__show
38,"nbtest.assert_allclose(sklearn.metrics.roc_auc_score(y_test, y_pred), 0.7118261169368358, atol=0.266523372571644)",MODEL_PERF__roc_auc_score
39,"nbtest.assert_plot_equal(nbtest_tmpvar_15, op/reference_plot_nbtest_tmpvar_15.png, tol=22.495355812572082)",PLOT__show
40,"nbtest.assert_allclose(accuracy_score(y_test, y_pred), 0.8133333333333332, atol=0.3379677828169753)",MODEL_PERF__accuracy_score
41,"nbtest.assert_allclose(roc_auc, 0.7751292495836783, atol=0.4653370173308644)",MODEL_PERF__auc
42,"nbtest.assert_plot_equal(nbtest_tmpvar_16, op/reference_plot_nbtest_tmpvar_16.png, tol=14.438387148032621)",PLOT__show
43,"nbtest.assert_allclose(sklearn.metrics.roc_auc_score(y_test, y_pred), 0.7751292495836783, atol=0.4653370173308644)",MODEL_PERF__roc_auc_score
44,"nbtest.assert_plot_equal(nbtest_tmpvar_17, op/reference_plot_nbtest_tmpvar_17.png, tol=18.36240815161208)",PLOT__show
45,"nbtest.assert_allclose(accuracy_score(y_test, y_pred), 0.8366666666666667, atol=0.20763215336529908)",MODEL_PERF__accuracy_score
46,"nbtest.assert_allclose(roc_auc, 0.9170399302178828, atol=0.26668563747498847)",MODEL_PERF__auc
47,"nbtest.assert_plot_equal(nbtest_tmpvar_18, op/reference_plot_nbtest_tmpvar_18.png, tol=10.94739485334311)",PLOT__show
48,"nbtest.assert_allclose(sklearn.metrics.roc_auc_score(y_test, y_pred), 0.7985278699335182, atol=0.30135960809996126)",MODEL_PERF__roc_auc_score
