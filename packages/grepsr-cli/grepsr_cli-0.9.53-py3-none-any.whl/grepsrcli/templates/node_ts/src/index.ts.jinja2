import * as path from 'path'

{% if '@vortex-ts-sdk/http-crawler' in packages_to_install -%}
import {
    isTestEnvironment,
    sleep,
    getPodParams,
    isScalar,
    jsonDecode,
} from '@vortex-ts-sdk/core'
import { VtxLogger } from '@vortex-ts-sdk/vtx-logger'
import { HttpCrawler } from '@vortex-ts-sdk/http-crawler'
import { HttpHandler } from "@vortex-ts-sdk/http-handler";
{%- endif %}
{% if '@vortex-ts-sdk/cache-handler' in packages_to_install -%}
import { CacheHandler } from '@vortex-ts-sdk/cache-handler'
{%- endif %}
{% if '@vortex-ts-registry/p-queue' in packages_to_install -%}
import PQueue from '@vortex-ts-registry/p-queue'
{%- endif %}
{% if '@vortex-ts-sdk/cache-handler' in packages_to_install -%}
const CACHE = new CacheHandler(path.parse(path.dirname(__dirname)).name)
{%- endif %}

{% include './middle_part.js.jinja2' with context %}

const getAbsLink = (relativeURL: string, baseURL: string) => relativeURL && relativeURL.trim() ? new URL(relativeURL, baseURL || DOMAIN_URL).toString() : relativeURL

{% if '@vortex-ts-sdk/http-crawler' in packages_to_install -%}
async function newSession(httpHandler: HttpHandler) {
{%- else -%}
async function newSession(httpHandler: MyHttpHandler) {
{%- endif -%}

    httpHandler.resetRequestConfig()
    httpHandler.setHeaders('Accept-Encoding', 'gzip, deflate');
    httpHandler.setHeaders('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8');
    httpHandler.setHeaders('Accept-Language', 'en-US,en;q=0.5');
    httpHandler.setHeaders('Connection', 'keep-alive');
    httpHandler.setHeaders('Upgrade-Insecure-Requests', '1');
    httpHandler.setHeaders('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36');
    await httpHandler.proxy.enable();
}

{% include './main_fn.js.jinja2' with context %}
