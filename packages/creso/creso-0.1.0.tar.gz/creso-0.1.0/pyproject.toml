[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "creso"
dynamic = ["version"]
description = "Coherent Resonant Spectral Operator (CReSO) - Lightweight spectral neural networks"
readme = "README.md"
license = {text = "Apache-2.0"}
keywords = [
    "machine learning",
    "neural networks", 
    "spectral methods",
    "fourier features",
    "pytorch",
    "time series",
    "graph neural networks"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "numpy>=1.23.0",
    "scikit-learn>=1.1.0",
    "tqdm>=4.64.0",  # Progress bars for training
]

[project.urls]
Homepage = "https://github.com/bay0/creso"
Repository = "https://github.com/bay0/creso"
Documentation = "https://creso-project.github.io/creso"
Issues = "https://github.com/bay0/creso/issues"
Changelog = "https://github.com/bay0/creso/blob/main/CHANGELOG.md"

[project.optional-dependencies]
# Graph processing dependencies
graph = [
    "scipy>=1.9.0",
]

# CLI dependencies  
cli = [
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "tqdm>=4.64.0",  # Progress bars
    # Include export dependencies for full test coverage
    "onnx>=1.12.0",
    "onnxruntime>=1.12.0",
]

# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]

# Visualization dependencies
viz = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]

# Export dependencies
export = [
    "onnx>=1.12.0",
    "onnxruntime>=1.12.0",
]

# All optional dependencies
all = [
    "creso[graph,cli,viz,export]",
]

# Development with all optional dependencies
dev-all = [
    "creso[dev,all]",
]


[project.scripts]
creso = "creso.cli:main"

[tool.setuptools]
packages = ["creso", "creso.adapters"]

[tool.setuptools.dynamic]
version = {attr = "creso.version.__version__"}

[tool.setuptools.package-data]
creso = ["*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=creso",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "hydra.*",
    "omegaconf.*",
    "networkx.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["creso"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]