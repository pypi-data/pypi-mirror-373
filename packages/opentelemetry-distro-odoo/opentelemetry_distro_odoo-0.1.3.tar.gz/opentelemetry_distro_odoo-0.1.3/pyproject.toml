[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "opentelemetry-distro-odoo"
version = "0.1.3"
description = "OpenTelemetry Python SDK"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.8"
authors = [
    { name = "OpenTelemetry Authors", email = "cncf-opentelemetry-contributors@lists.cncf.io" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: OpenTelemetry",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Odoo",
    "Framework :: Odoo :: 12.0",
    "Framework :: Odoo :: 13.0",
    "Framework :: Odoo :: 14.0",
    "Framework :: Odoo :: 15.0",
    "Framework :: Odoo :: 16.0",
    "Framework :: Odoo :: 17.0",
    "Framework :: Odoo :: 18.0",
    "Typing :: Typed",
]


dependencies = [
    "wrapt>=1.14.1",
    "typing-extensions>=4.5.0",
    #    "odoo>=12.0",
    "opentelemetry-api~=1.33.1; python_version < '3.9'",
    "opentelemetry-api~=1.34.1; python_version >= '3.9'",
    "opentelemetry-sdk~=1.33.1; python_version < '3.9'",
    "opentelemetry-sdk~=1.34.1; python_version >= '3.9'",
    "opentelemetry-distro~=0.54b1;python_version < '3.9'",
    "opentelemetry-distro~=0.55b1;python_version >= '3.9'",
    "opentelemetry-instrumentation-wsgi~=0.54b1;python_version < '3.9'",
    "opentelemetry-instrumentation-wsgi~=0.55b1;python_version >= '3.9'",
    "opentelemetry-exporter-otlp-proto-http~=1.33.1; python_version < '3.9'",
    "opentelemetry-exporter-otlp-proto-http~=1.34.1; python_version >= '3.9'",
    "opentelemetry-test-utils>=0.55b1;python_version >= '3.9'",
    "opentelemetry-test-utils==0.54b1;python_version < '3.9'",
]

[project.optional-dependencies]
instruments = [
    "opentelemetry-instrumentation-requests~=0.54b1; python_version < '3.9'",
    "opentelemetry-instrumentation-requests~=0.55b1; python_version >= '3.9'",
    "opentelemetry-instrumentation-psycopg2~=0.54b1; python_version < '3.9'",
    "opentelemetry-instrumentation-psycopg2~=0.55b1; python_version >= '3.9'",
    "opentelemetry-instrumentation-system-metrics~=0.54b1;python_version < '3.9'",
    "opentelemetry-instrumentation-system-metrics~=0.55b1;python_version >= '3.9'",
]
proto-http = [

]
proto-grpc = [
  "opentelemetry-exporter-otlp-proto-grpc~=1.33.1; python_version < '3.9'",
  "opentelemetry-exporter-otlp-proto-grpc~=1.34.1; python_version >= '3.9'"
]
logfmt = [
    "logfmter~=0.0.8; python_version < '3.9'",
    "logfmter~=0.0.9; python_version >= '3.9'",
]


#[project.entry-points."opentelemetry_logs_exporter"]
#[project.entry-points."opentelemetry_metrics_exporter"]
#[project.entry-points."opentelemetry_traces_exporter"]

[project.entry-points."opentelemetry_traces_sampler"]
odoo = "opentelemetry_distro_odoo.trace.odoo:odoo_sampler_factory"

[project.entry-points."opentelemetry_resource_detector"]
odoo = "opentelemetry_distro_odoo.resource.odoo:OdooResourceDetector"
clevercloud = "opentelemetry_distro_odoo.resource.clevercloud:CleverCloudResourceDetector"
cc = "opentelemetry_distro_odoo.resource.clevercloud:CleverCloudResourceDetector"
clevercloud_service = "opentelemetry_distro_odoo.resource.clevercloud:CleverCloudServiceResourceDetector"
cc_service = "opentelemetry_distro_odoo.resource.clevercloud:CleverCloudServiceResourceDetector"

[project.entry-points."opentelemetry_pre_instrument"]
pre-system = "opentelemetry_distro_odoo.instrumentation.pre_otel_system:pre_instrument_system"

[project.entry-points."opentelemetry_instrumentor"]
odoo = "opentelemetry_distro_odoo.instrumentation.odoo:OdooInstrumentor"
odoo-system = "opentelemetry_distro_odoo.instrumentation.odoo_system:OdooSystemMetricsInstrumentor"

#[project.entry-points."opentelemetry_post_instrument"]

[tool.hatch.build.targets.sdist]
include = [
  "/src",
  "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["src/opentelemetry_distro_odoo", "src/odoo"]

[tool.hatch.version]
path = "src/opentelemetry_distro_odoo/version.py"

# https://docs.astral.sh/uv/reference/settings/
[tool.uv]
required-version = ">=0.6.0"

# https://docs.astral.sh/uv/reference/settings/#sources
[tool.uv.sources]
odoo = { path = "../odoo", editable = true }

[tool.ruff]
line-length = 120 # Allow lines to be as long as 120 characters
show-fixes = true # By default, always enumerate fixed violations
output-format = "full" # Always show source code snippets
target-version = "py38"
fix = true

[tool.ruff.format]
exclude = ["setup/*"]
docstring-code-format = true

[tool.ruff.lint]
extend-select = [
    "B",
    "C90",
    "E501", # line too long (default 88)
    "I", # isort
    "UP", # pyupgrade
    "PERF",
]
extend-safe-fixes = ["UP008"]
exclude = ["setup/*"]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "odoo", "odoo-addons", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
"odoo" = ["odoo"]
"odoo-addons" = ["odoo.addons"]

[tool.ruff.lint.mccabe]
max-complexity = 16

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "I001"]  # ignore unused and unsorted imports in __init__.py
"__manifest__.py" = ["B018"]  # useless expression
"*/tests/**/*.py" = [
    "ANN201", # Disable expected return type on test function
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[dependency-groups]
dev = [
    "manifestoo-core>=1.9",
    "pytest",
    "pytest-cov",
    "pytest-mock",
]
