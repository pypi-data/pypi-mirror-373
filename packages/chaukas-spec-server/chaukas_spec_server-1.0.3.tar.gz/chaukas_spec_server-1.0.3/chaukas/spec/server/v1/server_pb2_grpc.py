# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from chaukas.spec.server.v1 import server_pb2 as chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2


class ChaukasServerServiceStub(object):
    """Server-side Chaukas service for platform implementation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthz = channel.unary_unary(
                '/chaukas.spec.server.v1.ChaukasServerService/Healthz',
                request_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.HealthzRequest.SerializeToString,
                response_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.HealthzResponse.FromString,
                _registered_method=True)
        self.GetCapabilities = channel.unary_unary(
                '/chaukas.spec.server.v1.ChaukasServerService/GetCapabilities',
                request_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetCapabilitiesRequest.SerializeToString,
                response_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetCapabilitiesResponse.FromString,
                _registered_method=True)
        self.IngestEvent = channel.unary_unary(
                '/chaukas.spec.server.v1.ChaukasServerService/IngestEvent',
                request_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventRequest.SerializeToString,
                response_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventResponse.FromString,
                _registered_method=True)
        self.IngestEventBatch = channel.unary_unary(
                '/chaukas.spec.server.v1.ChaukasServerService/IngestEventBatch',
                request_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventBatchRequest.SerializeToString,
                response_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventBatchResponse.FromString,
                _registered_method=True)
        self.QueryEvents = channel.unary_unary(
                '/chaukas.spec.server.v1.ChaukasServerService/QueryEvents',
                request_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.QueryEventsRequest.SerializeToString,
                response_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.QueryEventsResponse.FromString,
                _registered_method=True)
        self.GetEventStats = channel.unary_unary(
                '/chaukas.spec.server.v1.ChaukasServerService/GetEventStats',
                request_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetEventStatsRequest.SerializeToString,
                response_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetEventStatsResponse.FromString,
                _registered_method=True)


class ChaukasServerServiceServicer(object):
    """Server-side Chaukas service for platform implementation
    """

    def Healthz(self, request, context):
        """Health check endpoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCapabilities(self, request, context):
        """Get supported capabilities
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestEvent(self, request, context):
        """Ingest a single event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestEventBatch(self, request, context):
        """Ingest a batch of events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryEvents(self, request, context):
        """Query events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventStats(self, request, context):
        """Server-specific: Get event statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChaukasServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthz': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthz,
                    request_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.HealthzRequest.FromString,
                    response_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.HealthzResponse.SerializeToString,
            ),
            'GetCapabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCapabilities,
                    request_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetCapabilitiesRequest.FromString,
                    response_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetCapabilitiesResponse.SerializeToString,
            ),
            'IngestEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestEvent,
                    request_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventRequest.FromString,
                    response_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventResponse.SerializeToString,
            ),
            'IngestEventBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestEventBatch,
                    request_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventBatchRequest.FromString,
                    response_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventBatchResponse.SerializeToString,
            ),
            'QueryEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryEvents,
                    request_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.QueryEventsRequest.FromString,
                    response_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.QueryEventsResponse.SerializeToString,
            ),
            'GetEventStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventStats,
                    request_deserializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetEventStatsRequest.FromString,
                    response_serializer=chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetEventStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chaukas.spec.server.v1.ChaukasServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chaukas.spec.server.v1.ChaukasServerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChaukasServerService(object):
    """Server-side Chaukas service for platform implementation
    """

    @staticmethod
    def Healthz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chaukas.spec.server.v1.ChaukasServerService/Healthz',
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.HealthzRequest.SerializeToString,
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.HealthzResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chaukas.spec.server.v1.ChaukasServerService/GetCapabilities',
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetCapabilitiesRequest.SerializeToString,
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetCapabilitiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chaukas.spec.server.v1.ChaukasServerService/IngestEvent',
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventRequest.SerializeToString,
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestEventBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chaukas.spec.server.v1.ChaukasServerService/IngestEventBatch',
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventBatchRequest.SerializeToString,
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.IngestEventBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chaukas.spec.server.v1.ChaukasServerService/QueryEvents',
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.QueryEventsRequest.SerializeToString,
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.QueryEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEventStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chaukas.spec.server.v1.ChaukasServerService/GetEventStats',
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetEventStatsRequest.SerializeToString,
            chaukas_dot_spec_dot_server_dot_v1_dot_server__pb2.GetEventStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
