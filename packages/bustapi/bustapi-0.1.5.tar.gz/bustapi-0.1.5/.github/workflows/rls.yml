name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g. v0.1.0)"
        required: true
        default: "v0.1.0"

jobs:
  build:
    name: Build with Maturin
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      # Ensure Python is installed
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Ensure Rust is installed
      - name: Install Rust
        run: |
          if ! command -v rustc &> /dev/null
          then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
          fi
          rustc --version
          cargo --version

      # Cache cargo dependencies
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Install Maturin into a venv and build wheel using the selected interpreter
      - name: Create venv and install maturin (Unix)
        if: runner.os != 'Windows'
        run: |
          python -m venv .venv
          VENV_PY=./.venv/bin/python
          $VENV_PY -m pip install --upgrade pip
          $VENV_PY -m pip install maturin
          echo "VENV_PY=$VENV_PY" >> $GITHUB_ENV

      - name: Create venv and install maturin (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m venv .venv
          $VENV = '.\\.venv\\Scripts\\python.exe'
          & $VENV -m pip install --upgrade pip
          & $VENV -m pip install maturin
          Write-Output "VENV_PY=$VENV" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Build wheel (Unix)
      - name: Build wheel
        if: runner.os != 'Windows'
        run: |
          $VENV_PY -m maturin build --release --out dist

      - name: Build wheel (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VENV = $env:VENV_PY
          & $VENV -m maturin build --release --out dist

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*

  android:
    name: Android build (maturin)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Ensure Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Ensure Rust
      - name: Install Rust
        run: |
          if ! command -v rustc &> /dev/null
          then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
          fi
          rustc --version
          cargo --version

      # Install Maturin into a venv
      - name: Create venv and install maturin (Android)
        run: |
          python -m venv .venv
          VENV_PY=./.venv/bin/python
          $VENV_PY -m pip install --upgrade pip
          $VENV_PY -m pip install maturin
          echo "VENV_PY=$VENV_PY" >> $GITHUB_ENV

      # Install Android NDK
      - name: Install Android NDK
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip wget
          wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip
          unzip -q android-ndk-r26d-linux.zip -d $HOME
          echo "ANDROID_NDK_HOME=$HOME/android-ndk-r26d" >> $GITHUB_ENV
          echo "$HOME/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # Build Android wheel
      - name: Build Android (aarch64)
        run: |
          $VENV_PY -m maturin build --release --target aarch64-linux-android --out dist

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-android
          path: dist/*

  release:
    name: Publish Release
    needs: [build, android]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: "BustAPI Release ${{ github.event.inputs.tag }}"
          draft: false
          prerelease: false
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
