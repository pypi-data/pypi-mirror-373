"use strict";(self.webpackChunkjupyterlab_quickopen=self.webpackChunkjupyterlab_quickopen||[]).push([[339],{339:(e,t,n)=>{n.r(t),n.d(t,{IQuickOpenProvider:()=>u,default:()=>_});var s=n(715),o=n(310),i=n(427),a=n(438),c=n(361),r=n(593),d=n(167);class p{constructor(e){this._contentsManager=e.contentsManager}async fetchContents(e){const{path:t,excludes:n,depth:s}=e,o=performance.now(),i={};try{const e=null!=s?s:1/0;await this._walkDirectory(t,n,i,e)}catch(e){console.warn("Error walking directory:",e)}return{contents:i,scanSeconds:(performance.now()-o)/1e3}}async _walkDirectory(e,t,n,s=1/0,i=0){if(!(i>=s))try{const a=await this._contentsManager.get(e,{content:!0,type:"directory"});if(!a.content)return;for(const c of a.content){const a=e?o.PathExt.join(e,c.name):c.name;if(!this._shouldExclude(c.name,a,t))if("directory"===c.type)await this._walkDirectory(a,t,n,s,i+1);else{const t=e||".";n[t]||(n[t]=[]),n[t].push(c.name)}}}catch(t){console.debug(`Skipping directory ${e}:`,t)}}_shouldExclude(e,t,n){for(const s of n)if(e.includes(s)||t.includes(s)||e.startsWith(".")&&".*"===s)return!0;return!1}}var l=n(269);class h{async fetchContents(e){const{path:t,excludes:n,depth:s}=e,i=n.map((e=>"excludes="+encodeURIComponent(e)));void 0!==s&&s!==1/0&&i.push("depth="+s);const a=i.join("&"),c=l.ServerConnection.makeSettings(),r=o.URLExt.join(c.baseUrl,"jupyterlab-quickopen","api","files")+"?"+a+"&path="+t,d=await l.ServerConnection.makeRequest(r,{method:"GET"},c);if(200!==d.status)throw new l.ServerConnection.ResponseError(d);return await d.json()}}const u=new(n(262).Token)("jupyterlab-quickopen:IQuickOpenProvider","A provider for quick open file contents");var m=n(602),g=n(256);class f extends g.CommandPalette{constructor(e,t,n,s){super(s),this._pathSelected=new m.Signal(this),this._disposables=[],this.id="jupyterlab-quickopen",this.title.iconClass="jp-SideBar-tabIcon jp-SearchIcon",this.title.caption="Quick Open",this._settings=t,this._fileBrowser=e,this._provider=n}get pathSelected(){return this._pathSelected}set settings(e){this._settings=e}dispose(){this.isDisposed||(this._disposables.forEach((e=>e.dispose())),this._disposables.length=0,super.dispose())}async onActivateRequest(e){super.onActivateRequest(e);const t=this._settings.relativeSearch?this._fileBrowser.model.path:"",n=this._settings.depth,s=await this._provider.fetchContents({path:t,excludes:this._settings.excludes,depth:n});this._disposables.forEach((e=>e.dispose())),this._disposables.length=0,this.clearItems();for(const e in s.contents)for(const t of s.contents[e]){const n=`${e}/${t}`;if(!this.commands.hasCommand(n)){const e=this.commands.addCommand(n,{label:t,execute:()=>{this._pathSelected.emit(n)}});this._disposables.push(e)}this.addItem({command:n,category:e})}}}const y={id:"jupyterlab-quickopen:plugin",description:"Provides a quick open file dialog",autoStart:!0,requires:[i.IDocumentManager,c.ISettingRegistry,a.IDefaultFileBrowser,u],optional:[s.ICommandPalette,r.ITranslator],activate:async(e,t,n,i,a,c,p)=>{const l=(null!=p?p:r.nullTranslator).load("jupyterlab-quickopen"),h=new d.CommandRegistry,u=await n.load(y.id),m=new f(i,u.composite,a,{commands:h});m.pathSelected.connect(((e,n)=>{t.openOrReveal(o.PathExt.normalize(n))})),u.changed.connect((e=>{m.settings=e.composite}));const g=new s.ModalCommandPalette({commandPalette:m});g.attach();const w="quickopen:activate";e.commands.addCommand(w,{label:l.__("Quick Open"),execute:()=>{g.activate()},describedBy:{args:{type:"object",properties:{}}}}),c&&c.addItem({command:w,category:"File Operations"})}},w={id:"jupyterlab-quickopen:provider",description:"Provides the quick open provider",autoStart:!0,provides:u,optional:[c.ISettingRegistry],activate:(e,t)=>{let n=new h;return t&&Promise.all([t.load(y.id),e.restored]).then((([t])=>{const s=()=>{const s=t.get("indexingMethod").composite;n="frontend"===s?new p({contentsManager:e.serviceManager.contents}):new h};s(),t.changed.connect(s)})),{fetchContents:e=>n.fetchContents(e)}}},_=[y,w]}}]);