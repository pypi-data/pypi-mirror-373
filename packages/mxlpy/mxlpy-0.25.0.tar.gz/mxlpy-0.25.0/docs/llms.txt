# MxlPy

MxlPy is a Python package for mechanistic learning (Mxl) - the combination of mechanistic modeling and machine learning to deliver explainable, data-informed solutions.

## Docs

- [overview](https://computational-biology-aachen.github.io/MxlPy/latest/index.html)
- [mxlpy quick start](https://computational-biology-aachen.github.io/MxlPy/latest/basics.html)
- [mechanistic learning](https://computational-biology-aachen.github.io/MxlPy/latest/mxl.html)
- [examples](https://computational-biology-aachen.github.io/MxlPy/latest/examples.html)

## Example models - linear chain

> Create a model of a linear chain of reactions with one variable

```python
from mxlpy import Model

def get_model() -> Model:
    return (
        Model()
        .add_variables({"x": 1.0})
        .add_parameters({"k_in": 1.0, "k_out": 1.0})
        .add_reaction(
            "v_in",
            constant,
            stoichiometry={"x": 1},
            args=["k_in"],
        )
        .add_reaction(
            "v_out",
            mass_action_1s,
            stoichiometry={"x": -1},
            args=["k_out", "x"],
        )
    )
```

> Create a model of a linear chain of reactions with two variables

```python
from mxlpy import Model

def get_model() -> Model:
    return (
        Model()
        .add_variables({"x": 1.0, "y": 1.0})
        .add_parameters({"k1": 1.0, "k2": 2.0, "k3": 1.0})
        .add_reaction("v1", constant, stoichiometry={"x": 1}, args=["k1"])
        .add_reaction(
            "v2",
            mass_action_1s,
            stoichiometry={"x": -1, "y": 1},
            args=["k2", "x"],
        )
        .add_reaction(
            "v3",
            mass_action_1s,
            stoichiometry={"y": -1},
            args=["k3", "y"],
        )
    )
```
