{
    "_type": "ripple_down_rules.rdr.GeneralRDR",
    "start_rules": {
        "contained_objects": {
            "_type": "ripple_down_rules.rdr.MultiClassRDR",
            "start_rule": {
                "_type": "ripple_down_rules.rules.MultiClassTopRule",
                "conditions": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def conditions_for_robot_contained_objects_of_type_physical_object(case: Robot) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for Robot.contained_objects  of type PhysicalObject.\"\"\"\n        return len(case.parts) > 0\n    return conditions_for_robot_contained_objects_of_type_physical_object(case)\n    ",
                    "conclusion_type": [
                        "builtins.bool"
                    ],
                    "scope": {
                        "Robot": "relational_model.Robot"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": false
                },
                "conclusion": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def robot_contained_objects_of_type_physical_object(case: Robot) -> List[PhysicalObject]:\n        \"\"\"Get possible value(s) for Robot.contained_objects  of type PhysicalObject.\"\"\"\n        contained_objects: List[PhysicalObject] = []\n        for part in case.parts:\n            contained_objects.extend(part.contained_objects)\n        return contained_objects\n    return robot_contained_objects_of_type_physical_object(case)\n    ",
                    "conclusion_type": [
                        "relational_model.PhysicalObject",
                        "builtins.set",
                        "builtins.list"
                    ],
                    "scope": {
                        "Robot": "relational_model.Robot",
                        "PhysicalObject": "relational_model.PhysicalObject",
                        "List": "typing.List"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": false
                },
                "parent": null,
                "conclusion_name": "contained_objects",
                "weight": "",
                "uid": "298609776593271728826836208156881692889",
                "refinement": null,
                "alternative": null
            },
            "generated_python_file_name": "robot_contained_objects_mcrdr",
            "name": "contained_objects",
            "case_type": "relational_model.Robot",
            "case_name": "Robot"
        }
    },
    "generated_python_file_name": "robot_rdr",
    "name": "contained_objects",
    "case_type": "relational_model.Robot",
    "case_name": "Robot"
}