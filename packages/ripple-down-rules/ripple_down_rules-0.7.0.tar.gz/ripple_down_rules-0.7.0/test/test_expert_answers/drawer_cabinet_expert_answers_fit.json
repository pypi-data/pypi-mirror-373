[
  "def get_value_for_world_views_of_type_drawer(case: World) -> Union[set, list, Drawer]:\n    \"\"\"Get possible value(s) for World.views of types list/set of Drawer\"\"\"\n    return [Drawer(fc.child, fc.parent) for fc in case.connections if isinstance(fc, FixedConnection)\n            and isinstance(fc.parent, Container) and isinstance(fc.child, Handle)]\nreturn get_value_for_world_views_of_type_drawer(case)",
  "def get_conditions_for_world_views_of_type_drawer(case: World) -> bool:\n    \"\"\"Get conditions on whether it's possible to conclude a value for World.views of types list/set of Drawer\"\"\"\n    has_bodies = len(case.bodies) > 0\n    has_connections = len(case.connections) > 0\n    return has_bodies and has_connections\nreturn get_conditions_for_world_views_of_type_drawer(case)",
  "def get_value_for_world_views_of_type_cabinet(case: World) -> Union[set, list, Cabinet]:\n    \"\"\"Get possible value(s) for World.views of types list/set of Cabinet\"\"\"\n    drawers = [v for v in case.views if isinstance(v, Drawer)]\n    prismatic_connections = [conn for conn in case.connections if type(conn) is PrismaticConnection]\n    cabinets = []\n    for pc in prismatic_connections:\n        for drawer in drawers:\n            if isinstance(pc.parent, Container) and pc.child.name == drawer.container.name:\n                current_cabinets_containers = [v.container.name for v in case.views if isinstance(v, Cabinet)]\n                if pc.parent.name not in current_cabinets_containers:\n                    cabinets.append(Cabinet(pc.parent, [drawer]))\n                else:\n                    existing_cabinet = \\\n                        [v for v in case.views if isinstance(v, Cabinet) and v.container.name == pc.parent.name][0]\n                    if drawer not in existing_cabinet.drawers:\n                        existing_cabinet.drawers.append(drawer)\n\n    return cabinets\nreturn get_value_for_world_views_of_type_cabinet(case)",
  "def get_conditions_for_world_views_of_type_cabinet(case: World) -> bool:\n    \"\"\"Get conditions on whether it's possible to conclude a value for World.views of types list/set of Cabinet\"\"\"\n    has_handles = len([h for h in case.bodies if type(h) is Handle]) > 0\n    has_containers = len([c for c in case.bodies if type(c) is Container]) > 0\n    has_fixed_connections = len([fc for fc in case.connections if type(fc) is FixedConnection]) > 0\n    has_prismatic_connections = len([pc for pc in case.connections if type(pc) is PrismaticConnection]) > 0\n    return has_handles and has_containers and has_fixed_connections and has_prismatic_connections\nreturn get_conditions_for_world_views_of_type_cabinet(case)"
]