[project]
name = "effectual"
version = "0.8.6"
description = "A python package/script bundler"
readme = "README.md"
license = "MIT"
authors = [
    { name = "jake", email = "jakewdr@proton.me" }
]
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
]

environments = [
    "implementation_name == 'cpython'"
]

dependencies = [
    "click>=8.1.7",
    "python-minifier>=2.11.3",
    "rtoml>=0.11.0",
    "termcolor>=2.4.0",
    "watchfiles>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/effectualpy/effectual"

[project.scripts]
efec = "effectual:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "hatch>=1.14.0",
    "mypy>=1.13.0",
    "ruff>=0.8.1",
]

[tool.hatch.build]
reproducible = true

[tool.hatch.build.targets.wheel]
exclude = ["ruff"]

[tool.hatch.build.targets.sdist]
exclude = [
    "ruff",
    "*.md"
]

[tool.ruff]

include = ["pyproject.toml", "src/**/*.py"]
fix = true
cache-dir = ".ruff_cache/"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F", "I", "TC", "ANN", "TYP", "PLE", "PERF", "PYI026", "PYI055", "NPY001"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]

# Use Google-style docstrings.
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]

disable_error_code = "name-defined"

warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

strict_equality = true

check_untyped_defs = true

disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true

disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
