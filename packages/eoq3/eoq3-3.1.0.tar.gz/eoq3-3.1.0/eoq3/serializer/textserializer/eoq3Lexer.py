# Generated from ../eoq3.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,266,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
        8,1,8,5,8,99,8,8,10,8,12,8,102,9,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,3,13,119,8,13,1,13,1,13,
        1,14,4,14,124,8,14,11,14,12,14,125,1,15,5,15,129,8,15,10,15,12,15,
        132,9,15,1,15,1,15,1,16,1,16,1,16,5,16,139,8,16,10,16,12,16,142,
        9,16,1,17,4,17,145,8,17,11,17,12,17,146,1,17,5,17,150,8,17,10,17,
        12,17,153,9,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,3,26,180,8,26,1,26,1,26,3,26,184,8,26,1,26,3,26,187,8,
        26,1,27,1,27,1,28,1,28,1,29,3,29,194,8,29,1,29,4,29,197,8,29,11,
        29,12,29,198,1,29,1,29,4,29,203,8,29,11,29,12,29,204,3,29,207,8,
        29,1,29,1,29,4,29,211,8,29,11,29,12,29,212,3,29,215,8,29,1,30,4,
        30,218,8,30,11,30,12,30,219,1,31,3,31,223,8,31,1,31,4,31,226,8,31,
        11,31,12,31,227,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,0,57,0,59,0,61,0,63,0,65,0,67,0,
        69,0,71,0,73,0,1,0,12,1,0,39,39,11,0,33,35,37,37,47,47,58,58,60,
        64,92,92,94,96,123,124,126,126,176,176,180,180,2,0,10,10,13,13,6,
        0,42,43,45,45,48,57,65,90,95,95,97,122,5,0,42,43,45,46,65,90,95,
        95,97,122,5,0,42,42,46,46,65,90,95,95,97,122,14,0,42,43,45,45,65,
        67,69,90,95,95,97,97,99,99,101,101,103,104,106,107,109,109,111,116,
        118,120,122,122,6,0,42,43,45,46,48,57,65,90,95,95,97,122,1,0,48,
        49,1,0,48,57,2,0,43,43,45,45,1,0,65,90,275,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        1,75,1,0,0,0,3,77,1,0,0,0,5,82,1,0,0,0,7,84,1,0,0,0,9,86,1,0,0,0,
        11,88,1,0,0,0,13,90,1,0,0,0,15,92,1,0,0,0,17,94,1,0,0,0,19,105,1,
        0,0,0,21,108,1,0,0,0,23,110,1,0,0,0,25,112,1,0,0,0,27,118,1,0,0,
        0,29,123,1,0,0,0,31,130,1,0,0,0,33,135,1,0,0,0,35,144,1,0,0,0,37,
        154,1,0,0,0,39,157,1,0,0,0,41,160,1,0,0,0,43,163,1,0,0,0,45,166,
        1,0,0,0,47,169,1,0,0,0,49,172,1,0,0,0,51,175,1,0,0,0,53,179,1,0,
        0,0,55,188,1,0,0,0,57,190,1,0,0,0,59,193,1,0,0,0,61,217,1,0,0,0,
        63,222,1,0,0,0,65,229,1,0,0,0,67,233,1,0,0,0,69,245,1,0,0,0,71,255,
        1,0,0,0,73,258,1,0,0,0,75,76,5,32,0,0,76,2,1,0,0,0,77,78,5,32,0,
        0,78,79,5,45,0,0,79,80,5,62,0,0,80,81,5,32,0,0,81,4,1,0,0,0,82,83,
        5,91,0,0,83,6,1,0,0,0,84,85,5,44,0,0,85,8,1,0,0,0,86,87,5,93,0,0,
        87,10,1,0,0,0,88,89,5,40,0,0,89,12,1,0,0,0,90,91,5,41,0,0,91,14,
        1,0,0,0,92,93,5,59,0,0,93,16,1,0,0,0,94,100,5,39,0,0,95,96,5,92,
        0,0,96,99,5,39,0,0,97,99,8,0,0,0,98,95,1,0,0,0,98,97,1,0,0,0,99,
        102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,100,
        1,0,0,0,103,104,5,39,0,0,104,18,1,0,0,0,105,106,5,38,0,0,106,107,
        3,65,32,0,107,20,1,0,0,0,108,109,5,36,0,0,109,22,1,0,0,0,110,111,
        7,1,0,0,111,24,1,0,0,0,112,113,5,32,0,0,113,114,5,32,0,0,114,115,
        5,32,0,0,115,116,5,32,0,0,116,26,1,0,0,0,117,119,5,45,0,0,118,117,
        1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,121,3,65,32,0,121,28,
        1,0,0,0,122,124,7,2,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,
        1,0,0,0,125,126,1,0,0,0,126,30,1,0,0,0,127,129,7,3,0,0,128,127,1,
        0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,133,1,
        0,0,0,132,130,1,0,0,0,133,134,7,4,0,0,134,32,1,0,0,0,135,136,7,3,
        0,0,136,140,7,5,0,0,137,139,7,3,0,0,138,137,1,0,0,0,139,142,1,0,
        0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,34,1,0,0,0,142,140,1,0,0,
        0,143,145,7,6,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,
        0,146,147,1,0,0,0,147,151,1,0,0,0,148,150,7,7,0,0,149,148,1,0,0,
        0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,36,1,0,0,0,
        153,151,1,0,0,0,154,155,5,110,0,0,155,156,5,48,0,0,156,38,1,0,0,
        0,157,158,5,98,0,0,158,159,7,8,0,0,159,40,1,0,0,0,160,161,5,117,
        0,0,161,162,3,61,30,0,162,42,1,0,0,0,163,164,5,121,0,0,164,165,3,
        61,30,0,165,44,1,0,0,0,166,167,5,105,0,0,167,168,3,63,31,0,168,46,
        1,0,0,0,169,170,5,108,0,0,170,171,3,63,31,0,171,48,1,0,0,0,172,173,
        5,102,0,0,173,174,3,59,29,0,174,50,1,0,0,0,175,176,5,100,0,0,176,
        177,3,59,29,0,177,52,1,0,0,0,178,180,3,67,33,0,179,178,1,0,0,0,179,
        180,1,0,0,0,180,181,1,0,0,0,181,183,3,69,34,0,182,184,3,71,35,0,
        183,182,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,187,3,73,36,
        0,186,185,1,0,0,0,186,187,1,0,0,0,187,54,1,0,0,0,188,189,7,9,0,0,
        189,56,1,0,0,0,190,191,7,10,0,0,191,58,1,0,0,0,192,194,3,57,28,0,
        193,192,1,0,0,0,193,194,1,0,0,0,194,214,1,0,0,0,195,197,3,55,27,
        0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,
        0,199,206,1,0,0,0,200,202,5,46,0,0,201,203,3,55,27,0,202,201,1,0,
        0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,207,1,0,
        0,0,206,200,1,0,0,0,206,207,1,0,0,0,207,215,1,0,0,0,208,210,5,46,
        0,0,209,211,3,55,27,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,
        0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,196,1,0,0,0,214,208,1,
        0,0,0,215,60,1,0,0,0,216,218,3,55,27,0,217,216,1,0,0,0,218,219,1,
        0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,62,1,0,0,0,221,223,3,57,
        28,0,222,221,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,226,3,55,
        27,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,
        0,0,228,64,1,0,0,0,229,230,7,11,0,0,230,231,7,11,0,0,231,232,7,11,
        0,0,232,66,1,0,0,0,233,234,5,68,0,0,234,235,3,55,27,0,235,236,3,
        55,27,0,236,237,3,55,27,0,237,238,3,55,27,0,238,239,5,45,0,0,239,
        240,3,55,27,0,240,241,3,55,27,0,241,242,5,45,0,0,242,243,3,55,27,
        0,243,244,3,55,27,0,244,68,1,0,0,0,245,246,5,84,0,0,246,247,3,55,
        27,0,247,248,3,55,27,0,248,249,5,46,0,0,249,250,3,55,27,0,250,251,
        3,55,27,0,251,252,5,46,0,0,252,253,3,55,27,0,253,254,3,55,27,0,254,
        70,1,0,0,0,255,256,5,85,0,0,256,257,3,59,29,0,257,72,1,0,0,0,258,
        259,5,90,0,0,259,260,7,10,0,0,260,261,3,55,27,0,261,262,3,55,27,
        0,262,263,5,46,0,0,263,264,3,55,27,0,264,265,3,55,27,0,265,74,1,
        0,0,0,21,0,98,100,118,125,130,140,146,151,179,183,186,193,198,204,
        206,212,214,219,222,227,0
    ]

class eoq3Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    STR_QUOTE = 9
    QRY_FULL = 10
    QRY_SHORT_HIS = 11
    QRY_SHORT_OTH = 12
    CMD_INDENT = 13
    CMD_ID = 14
    CMD_SEP = 15
    STR_SIMPLE_1 = 16
    STR_SIMPLE_2 = 17
    STR_SIMPLE_3 = 18
    NONE = 19
    BOOL = 20
    UINT32 = 21
    UINT64 = 22
    INT32 = 23
    INT64 = 24
    FLOAT32 = 25
    FLOAT64 = 26
    DATETIME = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "' '", "' -> '", "'['", "','", "']'", "'('", "')'", "';'", "'$'", 
            "'    '", "'n0'" ]

    symbolicNames = [ "<INVALID>",
            "STR_QUOTE", "QRY_FULL", "QRY_SHORT_HIS", "QRY_SHORT_OTH", "CMD_INDENT", 
            "CMD_ID", "CMD_SEP", "STR_SIMPLE_1", "STR_SIMPLE_2", "STR_SIMPLE_3", 
            "NONE", "BOOL", "UINT32", "UINT64", "INT32", "INT64", "FLOAT32", 
            "FLOAT64", "DATETIME" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "STR_QUOTE", "QRY_FULL", "QRY_SHORT_HIS", "QRY_SHORT_OTH", 
                  "CMD_INDENT", "CMD_ID", "CMD_SEP", "STR_SIMPLE_1", "STR_SIMPLE_2", 
                  "STR_SIMPLE_3", "NONE", "BOOL", "UINT32", "UINT64", "INT32", 
                  "INT64", "FLOAT32", "FLOAT64", "DATETIME", "DIGIT", "SIGN", 
                  "REAL_NUMBER", "UINT_NUMBER", "INT_NUMBER", "THREE_CAPS", 
                  "DATE", "TIME", "USEC", "TIMEZONE" ]

    grammarFileName = "eoq3.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


