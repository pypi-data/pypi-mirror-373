[build-system]
requires = [ "setuptools"]
build-backend = "setuptools.build_meta"


[project]
name = "file-keeper"
version = "0.1.0a4"
description = "Abstraction level for object storages."
classifiers = [

]
keywords = [ "file management", "cloud", "filesystem", "DAL", "storage", "file" ]
requires-python = ">= 3.10"
dependencies = [ "typing_extensions", "pluggy", "python-magic" ]
authors = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
    {name = "Sergey Motornyuk", email = "sergey.motornyuk@linkdigital.com.au"},
]
maintainers = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
]

[project.license]
text = "AGPL-3.0"

[project.readme]
file = "README.md"
content-type = "text/markdown"


[project.urls]
Homepage = "https://github.com/DataShades/file-keeper"
Documentation = "https://datashades.github.io/file-keeper/"
Changelog = "https://datashades.github.io/file-keeper/changelog/"

[project.optional-dependencies]
test = [ "pytest-cov", "pytest-faker", "responses", "werkzeug", "faker" ]
docs = [ "mkdocs", "mkdocs-material", "pymdown-extensions", "mkdocstrings[python]",  ]
dev = [ "pytest-cov", "pytest-faker", "responses", "mkdocs", "mkdocs-material", "pymdown-extensions", "mkdocstrings[python]",]

user_config = ["platformdirs"]

azure = ["azure-storage-blob", "urllib3"]
gcs = [ "google-cloud-storage", "urllib3"]
libcloud = [ "apache-libcloud", "cryptography"]
opendal = [ "opendal",]
redis = [ "redis",]
s3 = [ "boto3", "boto3-stubs[essential]", "urllib3"]
sqlalchemy = ["sqlalchemy"]

# --8<-- [start:entrypoint]
[project.entry-points.file_keeper_ext]
file_keeper = "file_keeper.default"
# --8<-- [end:entrypoint]

[tool.ruff]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = [
       "ANN0", # type annotations for function arguments
       "B",  # likely bugs and design problems
       "BLE",  # do not catch blind exception
       "C4",  # better list/set/dict comprehensions
       "C90",  # check McCabe complexity
       "DTZ", # enforce timezone in date objects
       "E",  # pycodestyle error
       "W",  # pycodestyle warning
       "F",  # pyflakes
       "FA", # verify annotations from future
       "G",  # format strings for logging statements
       "N",  # naming conventions
       "I",  # isort
       "ICN", # import conventions
       "D",  # require doc
       "PL",  # pylint
       "PERF", # performance anti-patterns
       "PT",  # pytest style
       "PIE",  # misc lints
       "RET",  # improvements for return statements
       "RSE",  # improvements for rise statements
       "S",  # security testing
       "SIM",  # simplify code
       "T10",  # debugging statements
       "T20",  # print statements
       "TID",  # tidier imports
       "TRY",  # better exceptions
       "UP",  # upgrade syntax for newer versions of the language
]

ignore = [
       "RET503", # don't enforce return-None
       "D107", # undocumented __init__
       "D105", # undocumented magic methods
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "PL", "ANN", "D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
section-order = [
              "future",
              "standard-library",
              "first-party",
              "third-party",
              "self",
              "local-folder",
]

[tool.ruff.lint.isort.sections]
self = ["file_keeper"]

[tool.pytest.ini_options]
addopts = "-p no:ckan"
markers = [
        "fk_storage_option: modify storage configuration",
        "expect_storage_capability: test relies on given capability available in the storage fixture"
]

[tool.pyright]
pythonVersion = "3.10"
include = ["."]
exclude = [
    # "**/test*",
]
strict = []

strictParameterNoneValue = true
# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false
useLibraryCodeForTypes = true
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
reportUnusedParameter = false
reportExplicitAny = false
reportAny = false
reportUnannotatedClassAttribute = false

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.tox]
requires = ["tox>=4"]
env_list = ["3.15", "3.14", "3.13", "3.12", "3.11", "3.10"]

[tool.tox.env_run_base]
passenv = ["FILE_KEEPER_TEST_*"]
description = "run unit tests"
deps = [
    "pytest>=8",
    # "pytest-sugar",
]
commands = [["pytest", { replace = "posargs", default = ["tests"], extend = true }]]
extras = ["test", "redis", "opendal", "azure", "gcs", "libcloud", "s3", "sqlalchemy"]
