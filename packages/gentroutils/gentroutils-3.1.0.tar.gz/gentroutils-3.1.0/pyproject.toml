[project]
authors = [{ name = "Szymon Szyszkowski", email = "ss60@sanger.ac.uk" }]
name = "gentroutils"
version = "3.1.0"
description = "Open Targets python genetics utility CLI tools"
dependencies = [
    "aiohttp>=3.11.18",
    "aioftp>=0.25.1",
    "polars[fsspec]>=1.31.0",
    "pydantic>=2.10.6",
    "loguru>=0.7.3",
    "tqdm>=4.67.1",
    "opentargets-otter>=25.0.2",
    "google-cloud-storage>=3.1.1",
    "gcsfs>=2025.7.0",
]
readme = "README.md"
requires-python = ">=3.13"
license = "Apache-2.0"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: Apache Software License",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
gentroutils = "gentroutils:main"

[dependency-groups]
dev = [
    "ruff>=0.5.6",
    "pytest>=8.3.2",
    "deptry>=0.19.0",
    "pre-commit>=3.8.0",
    "interrogate>=1.7.0",
    "isort>=5.13.2",
    "mypy>=1.11.1",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
    "pytest-sugar>=1.0.0",
    "pydoclint>=0.5.6",
    "gcloud-storage-emulator>=0.5.0",
    "types-requests>=2.32.0.20240712",
    "pyftpdlib>=2.0.1",
    "python-semantic-release>=9.19.1",
    "pandas-stubs>=2.2.3.250308",
    "ipython>=8.36.0",
    "pytest-asyncio>=1.1.0",
    "scipy-stubs>=1.16.1.0",
    "types-pyyaml>=6.0.12.20250809",
    "types-pygments>=2.19.0.20250809",
    "types-cachetools>=6.1.0.20250717",
    "types-cffi>=1.17.0.20250809",
    "types-colorama>=0.4.15.20250801",
    "types-decorator>=5.2.0.20250324",
    "types-gevent>=25.4.0.20250812",
    "types-openpyxl>=3.1.5.20250809",
    "types-pexpect>=4.9.0.20250809",
    "types-pyopenssl>=24.1.0.20240722",
    "types-pyasn1>=0.6.0.20250516",
    "types-python-dateutil>=2.9.0.20250809",
    "tqdm-stubs>=0.2.1",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/gentroutils"]


# Ignore polars x GCS depencency not imported in code
[tool.deptry.per_rule_ignores]
DEP002 = ["gcsfs"]


# test configuration
[tool.pytest.ini_options]
markers = ["integration_test: Intergration tests", "unit_test: Unit tests"]
addopts = "-n0 --doctest-modules --cov=gentroutils --cov-report=xml -s -p no:warnings --cov-report term-missing --cov-fail-under=80"
pythonpath = ["src/"]
testpaths = ["tests/", "src/gentroutils"]


# add classifiers

[tool.ruff]
target-version = 'py312'
line-length = 120
preview = true

[tool.ruff.lint]
select = [
    "D",
    'E',      # pycodestyle
    'I',      # isort
    'F',      # pyflakes
    'N',      # pep8-naming
    'Q',      # flake8-quotes
    'RUF',    # ruff
    'PERF',   # perflint
    'UP',     # pyupgrade
    'W',      # pycodestyle
    'D',      # pydocstyle
    'PL',     # pylint
    'TRY',    # tryceratops
    'FURB',   # refurb
    'S',      # flake8-bandit
    'B',      # flake8-bugbear
    'A001',   # flake8-builtins
    'COM',    # flake8-commas
    'C4',     # flake8-comprehensions
    'T10',    # flake8-debugger
    'D212',   # flake8-docstrings
    'EXE',    # flake8-executable
    'INT',    # flake8-gettext
    'ISC',    # flake8-implicit-str-concat
    'ICN001', # flake8-import-conventions
    'LOG',    # flake8-logging
    'G',      # flake8-logging-format
    'PIE',    # flake8-pie
    'PT',     # flake8-pytest-style
    'RSE',    # flake8-raise
    'RET504', # flake8-return
    'SIM',    # flake8-simplify
    'TID',    # flake8-tidy-imports
    'T20',    # flake8-todo
]

ignore = [
    'B011',    # we don't run python with `-O` (also see S101)
    'B904',    # possibly useful but too noisy
    'COM812',  # trailing commas on multiline lists are nice, but we have 2.5k violations
    'D1',      # allow lax documentation
    "D101",    # missing docstring in public class
    "D107",    # Ignore missing docstring in __init__
    'D213',    # we prefer D212
    'E226',    # allow omitting whitespace around arithmetic operators
    "E501",    # allow long lines for now
    'E731',    # allow assigning lambdas (it's useful for single-line functions defined inside other functions)
    'FURB113', # less readable
    'FURB140', # less readable and actually slower in 3.12+
    'G004',    # we don't care about logging format
    "PLC0208", # Use a sequence type instead of a `set` when iterating over values
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    'RUF012',  # ultra-noisy and dicts in classvars are very common
    'RUF015',  # not always more readable
    'S101',    # we use asserts outside tests, and do not run python with `-O` (also see B011)
    'S311',    # false positives, it does not care about the context
    'S324',    # all our md5/sha1 usages are for non-security purposes
    'S404',    # useless, triggers on *all* subprocess imports
    'S403',    # there's already a warning on using pickle, no need to have one for the import
    'S405',    # we don't use lxml in unsafe ways
    'S603',    # useless, triggers on *all* subprocess calls: https://github.com/astral-sh/ruff/issues/4045
    'S607',    # we trust the PATH to be sane
    'PERF203', # noisy, false positives, and not applicable for 3.11+
    'PIE807',  # `lambda: []` is much clearer for `load_default` in schemas
    'PLC0415', # local imports are there for a reason
    'PLC2701', # some private imports are needed
    'PLR09',   # too-many-<whatever> is just noisy
    'PLR0913', # very noisy
    'PLR2004', # extremely noisy and generally annoying
    'PLR6201', # sets are faster (by a factor of 10!) but it's noisy and we're in nanoseconds territory
    'PLR6301', # extremely noisy and generally annoying
    'PLW0108', # a lambda often makes it more clear what you actually want
    'PLW1510', # we often do not care about the status code of commands
    'PLW1514', # we expect UTF8 environments everywhere
    'PLW1641', # false positives with SA comparator classes
    'PLW2901', # noisy and reassigning to the loop var is usually intentional
    'PT011',   # very noisy
    'PT015',   # nice for tests but not so nice elsewhere
    'PT018',   # ^ likewise
    'S301',    # we trust our pickled data
    'SIM102',  # sometimes nested ifs are more readable
    'SIM103',  # sometimes this is more readable (especially when checking multiple conditions)
    'SIM105',  # try-except-pass is faster and people are used to it
    'SIM108',  # noisy ternary
    'SIM114',  # sometimes separate ifs are more readable (especially if they just return a bool)
    'SIM117',  # nested context managers may be more readable
    'TRY002',  # super noisy, and those exceptions are pretty exceptional anyway
    'TRY003',  # super noisy
    'TRY300',  # kind of strange in many cases
    'TRY301',  # sometimes doing that is actually useful
    'TRY400',  # not all exceptions need exception logging
    "UP006",   # keep type annotation style as is
    "UP007",   # keep type annotation style as is
    'UP038',   # it looks kind of weird and it slower than a tuple
]

extend-safe-fixes = [
    'C4',      # they seem pretty safe
    'D200',    # ^ likewise
    'D400',    # ^ likewise
    'PERF102', # ^ likewise
    'PT014',   # duplicate test case parametrizations are never intentional
    'RET504',  # looks pretty safe
    'RSE102',  # we do not use `raise func()` (with `func` returning the exception instance)
    'RUF005',  # we typically don't deal with objects overriding `__add__` or `__radd__`
    'SIM110',  # looks pretty safe
    'UP008',   # ^ likewise
]

[tool.ruff.lint.flake8-quotes]
multiline-quotes = 'double'
docstring-quotes = 'double'
avoid-escape = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = 'tuple'
parametrize-values-type = 'list'
parametrize-values-row-type = 'tuple'

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"path/to/file.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]


[tool.pydoclint]
style = 'google'
exclude = '\.git|\.venv|__init__.py|tests|docs'
require-return-section-when-returning-nothing = false
check-return-types = true
allow-init-docstring = true
arg-type-hints-in-docstring = true
skip-checking-short-docstrings = true
check-class-attributes = false

[tool.interrogate]
fail-under = 95
color = true
exclude = ["dist"]
ignore-init-method = true
generate-badge = "."
badge-format = "svg"


# type checking configuration
[tool.mypy]
disallow_any_generics = true
disallow_incomplete_defs = true
no_implicit_optional = true
no_implicit_reexport = true
warn_no_return = false
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true
# plugins = ["returns.contrib.mypy.returns_plugin"]

[[tool.mypy.overrides]]
module = [
    "google.cloud",
    "pyfiglet",
    "click",
    "google.cloud.storage",
    "great_expectations",
]
ignore_missing_imports = true


[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = true
tag_format = "v{version}"


[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.dev]
match = "dev"
prerelease_token = "dev"
prerelease = true

[tool.semantic-release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "docs", "style", "test", "ci"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
