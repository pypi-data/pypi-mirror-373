name: Build and test

on:
  push:
  pull_request:
  schedule:
    # Run once per week to ensure that the pipeline is okay.
    - cron: "37 10 * * 0"

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v5

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-daemon-system libvirt-clients qemu-utils ovmf libvirt-dev

      - name: Set up Rye
        uses: eifinger/setup-rye@v4
        with:
          version: "0.43.0"

      - name: Install dependencies
        run: |
          rye sync --no-lock

      - name: Check formatting
        run: |
          rye fmt --check

      - name: Check types
        run: |
          rye run mypy --strict .

      - name: Run the linter
        run: |
          rye lint

      - name: Run unit tests
        run: |
          rye test

      - name: Build
        run: |
          rye build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          if-no-files-found: error

      - name: Check the documentation
        run: |
          source .venv/bin/activate
          pushd docs
          sphinx-lint
          popd

      - name: Build documentation
        run: |
          source .venv/bin/activate
          pushd docs
          make -e SPHINXOPTS="--fail-on-warning --keep-going" html
          popd

      - name: Upload HTML documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path: docs/_build/html
          if-no-files-found: error

  check:
    name: Check
    needs:
      - build
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.13" ]
        libvirt-version: [ "9.0.0", "11.1.0" ]
    permissions:
      contents: read
      packages: read

    steps:
      - uses: actions/checkout@v5

      - name: Define TEST_MACHINES_HOME, DIST_HOME, LIBVIRT_DEFAULT_URI
        run: |
          echo "TEST_MACHINES_HOME=$(mktemp -d)" >> $GITHUB_ENV
          echo "DIST_HOME=$(mktemp -d)" >> $GITHUB_ENV
          echo "LIBVIRT_DEFAULT_URI=qemu:///system" >> $GITHUB_ENV

      - name: Download artifacts produced by build job
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: "${{ env.DIST_HOME }}"

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-daemon-system libvirt-clients qemu-utils ovmf libvirt-dev

      - name: Install oras
        run: |
          sudo snap install oras --classic

      - name: Install yq
        run: |
          sudo snap install yq

      - name: Download test machines
        run: |
          mkdir -p "${{ env.TEST_MACHINES_HOME }}"
          pushd "${{ env.TEST_MACHINES_HOME }}"
          oras login --username "${{ github.actor }}" --password "${{ secrets.GITHUB_TOKEN }}" ghcr.io
          oras pull ghcr.io/aahlenst/virtomate-test-machines:1
          popd

      - name: Configure firmware
        run: |
          cat "${{ env.TEST_MACHINES_HOME }}/51-edk2-ovmf-2m-raw-x64-nosb.json"
          sudo cp "${{ env.TEST_MACHINES_HOME }}/51-edk2-ovmf-2m-raw-x64-nosb.json" /usr/share/qemu/firmware/
          sudo cp "${{ env.TEST_MACHINES_HOME }}/OVMF_CODE.fd" /usr/share/OVMF/
          sudo cp "${{ env.TEST_MACHINES_HOME }}/OVMF_VARS.fd" /usr/share/OVMF/

      - name: Prepare libvirt storage pools
        run: |
          sudo virsh pool-define-as default dir --target /var/lib/libvirt/images
          sudo virsh pool-autostart default
          sudo virsh pool-build default
          sudo virsh pool-start default

          sudo virsh pool-define-as nvram dir --target /var/lib/libvirt/qemu/nvram
          sudo virsh pool-autostart nvram
          sudo virsh pool-build nvram
          sudo virsh pool-start nvram

      - name: Import virtual machine images
        run: |
          sudo ./prepare-pool.sh "${{ env.TEST_MACHINES_HOME }}"

      - name: Remove src folder to ensure that only the built package is used
        run: |
          rm -rf src

      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Initialise virtual environment
        run: |
          python -m venv .venv

      # Install desired versions and the built package with pip. This ensures that we validate what we have built.
      # Ideally, development dependencies would be extracted from pyproject.toml. But I could not get pip to do that.
      # There is no obvious way to do it with rye, either.
      - name: Install dependencies
        run: |
          source .venv/bin/activate
          pip install "libvirt-python==${{ matrix.libvirt-version }}"
          pip install "${{ env.DIST_HOME }}"/virtomate*.whl
          yq -p toml '.tool.rye.dev-dependencies[]' < pyproject.toml | xargs pip install

      # Necessary to detect a misconfigured pyproject.toml. That could cause a silent downgrade of libvirt-python.
      # We could do a `pip install --no-deps` but then we would not detect the misconfigured pyproject.toml.
      - name: Ensure libvirt-python ${{ matrix.libvirt-version }} has been installed
        run: |
          source .venv/bin/activate
          pip list --format freeze | grep "libvirt-python==${{ matrix.libvirt-version }}"

      # Tests have to be run as root to access qemu:///system because the current user is not a member of libvirt.
      # Manually adding the user to libvirt does not help because the session cannot be reloaded.
      # The GH Actions runners use ext4 as filesystem. Therefore, --linked tests have to be skipped.
      - name: Run tests
        run: |
          sudo -E bash -c "source .venv/bin/activate && pytest --cov virtomate --cov-report html tests/ --functional"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: "htmlcov-python-${{ matrix.python-version }}-libvirt-${{ matrix.libvirt-version }}"
          path: htmlcov/
          if-no-files-found: error

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    if: startsWith(github.ref, 'refs/tags/') && github.repository == 'aahlenst/virtomate'
    needs:
      - check
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/virtomate
    permissions:
      contents: read
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download artifacts produced by build job
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Publish release to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

  github-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/') && github.repository == 'aahlenst/virtomate'
    runs-on: ubuntu-24.04
    needs:
      - publish-to-pypi
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - uses: actions/checkout@v5

      - name: Define DIST_HOME
        run: |
          echo "DIST_HOME=$(mktemp -d)" >> $GITHUB_ENV

      - name: Download artifacts produced by build job
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: "${{ env.DIST_HOME }}"

      - name: Sign the artifacts with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.1
        with:
          inputs: |
            "${{ env.DIST_HOME }}"/*.tar.gz
            "${{ env.DIST_HOME }}"/*.whl

      - name: Extract release notes
        id: release_notes
        uses: ffurrer2/extract-release-notes@v2

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: "${{ env.DIST_HOME }}/*"
          fail_on_unmatched_files: true
