"""
function_call.py

Type definitions for function calling APIs used by LLM providers.
This file contains Pydantic models for use with OpenAI's chat-completion
and responses APIs. Adapted from argo-proxy.
"""

from typing import Any, Dict, List, Literal, Optional, TypeAlias, Union

from pydantic import BaseModel

# ======================================================================
# OPENAI TYPES (CHAT COMPLETION)
# ======================================================================

# ===========================
# Chat Completion API SECTION
# ===========================


# --------- API INPUT ---------
class FunctionDefinitionCore(BaseModel):
    name: str
    """The name of the function to be called.

    Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length
    of 64.
    """


class FunctionDefinition(FunctionDefinitionCore):
    description: Optional[str] = None
    """
    A description of what the function does, used by the model to choose when and
    how to call the function.
    """
    parameters: Optional[Dict[str, object]] = None
    """The parameters the functions accepts, described as a JSON Schema object.

    See the [guide](https://platform.openai.com/docs/guides/function-calling) for
    examples, and the
    [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
    documentation about the format.

    Omitting `parameters` defines a function with an empty parameter list.
    """
    strict: Optional[bool] = None
    """Whether to enable strict schema adherence when generating the function call.

    If set to true, the model will follow the exact schema defined in the
    `parameters` field. Only a subset of JSON Schema is supported when `strict` is
    `true`. Learn more about Structured Outputs in the
    [function calling guide](docs/guides/function-calling).
    """


# used in `tools`
class ChatCompletionToolParam(BaseModel):
    function: FunctionDefinition
    type: Literal["function"] = "function"
    """The type of the tool. Currently, only `function` is supported."""


# used in `tool_choice`
class ChatCompletionNamedToolChoiceParam(BaseModel):
    function: FunctionDefinitionCore
    type: Literal["function"] = "function"
    """The type of the tool. Currently, only `function` is supported."""


ChatCompletionToolChoiceOptionParam: TypeAlias = Union[
    Literal["none", "auto", "required"], ChatCompletionNamedToolChoiceParam
]


# --------- LLM OUTPUT ---------
class Function(BaseModel):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """
    name: str
    """The name of the function to call."""


# elements in `tool_calls`
class ChatCompletionMessageToolCall(BaseModel):
    id: str
    """The ID of the tool call."""
    function: Function
    """The function that the model called."""
    type: Literal["function"] = "function"
    """The type of the tool. Currently, only `function` is supported."""


# function definition in stream deltas
class ChoiceDeltaToolCallFunction(BaseModel):
    arguments: Optional[str] = None
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """
    name: Optional[str] = None
    """The name of the function to call."""


# used in `tool_calls` in stream deltas
class ChoiceDeltaToolCall(BaseModel):
    index: int

    id: Optional[str] = None
    """The ID of the tool call."""

    function: Optional[ChoiceDeltaToolCallFunction] = None

    type: Optional[Literal["function"]] = None
    """The type of the tool. Currently, only `function` is supported."""