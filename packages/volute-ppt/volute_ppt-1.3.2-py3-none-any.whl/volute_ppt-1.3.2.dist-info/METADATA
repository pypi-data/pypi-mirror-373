Metadata-Version: 2.4
Name: volute-ppt
Version: 1.3.2
Summary: MCP server for PowerPoint analysis and multimodal AI integration - comprehensive metadata extraction and slide image capture for agents
Home-page: https://gitlab.com/coritan/volute-ppt
Author: Coritan
Author-email: Coritan <your-email@example.com>
License: MIT
Project-URL: Homepage, https://gitlab.com/coritan/volute-ppt
Project-URL: Repository, https://gitlab.com/coritan/volute-ppt.git
Project-URL: Issues, https://gitlab.com/coritan/volute-ppt/-/issues
Project-URL: Documentation, https://gitlab.com/coritan/volute-ppt/-/blob/main/DEVELOPER_GUIDE.md
Keywords: mcp,powerpoint,ai,agents,desktop,automation,com,multimodal,vision,slides,image-capture
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Office/Business :: Office Suites
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: fastmcp>=2.0.0
Requires-Dist: httpx>=0.25.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: python-pptx>=0.6.21
Requires-Dist: Pillow>=9.0.0
Requires-Dist: pywin32>=306; platform_system == "Windows"
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: build>=0.10.0; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# Volute-PPT Server

A FastMCP 2.0-based Model Context Protocol (MCP) server providing various tools, resources, and prompts for AI model interaction with **multimodal AI capabilities** including PowerPoint slide image capture.

## Features

- üîß **Tools**: Mathematical calculations, text processing, JSON manipulation, hashing, encoding/decoding
- üìä **PowerPoint Tools**: Comprehensive PowerPoint analysis, metadata extraction, and content processing
- üñºÔ∏è **Multimodal AI**: Slide image capture with base64-encoded PNG data URLs for vision-based AI analysis
- üìÅ **Resources**: System status, user data, configuration sections, simulated logs
- üìù **Prompts**: Data analysis prompts, code review templates
- üåê **HTTP Endpoints**: Health checks and server information
- üè∑Ô∏è **Tag-based Filtering**: Organize components with flexible tag system
- ‚öôÔ∏è **Configuration**: Environment-based configuration with Pydantic models

## üöÄ Quick Start

### **Option 1: Cloud Integration (Recommended for Most Developers)**

Perfect for cloud-deployed AI agents, serverless functions, and web applications:

```bash
# Install from PyPI
pip install volute-ppt

# Use in your cloud AI agent
from volute_ppt.sdk import VoluteMCPCloudClient

volute = VoluteMCPCloudClient()
result = await volute.calculate("2 + 3 * 4")
print(result)  # 14.0
```

### **Option 2: Local Development Setup**

For local development and PowerPoint COM integration:

```bash
# Clone the project
git clone https://gitlab.com/coritan/volute-ppt.git
cd volute-ppt

# Create and activate virtual environment
python -m venv venv
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

### 2. Configure Environment

```bash
# Copy environment template
cp .env.example .env

# Edit .env with your settings
# SERVER_NAME=VoluteMCP
# SERVER_HOST=127.0.0.1
# SERVER_PORT=8000
```

### 3. Run the Server

#### HTTP Transport (Web Service)
```bash
python server.py
```
Server will be available at: http://127.0.0.1:8000

#### STDIO Transport (Local Tool)
```bash
python server.py stdio
```

## Server Components

### Tools

| Tool | Description | Tags |
|------|-------------|------|
| `echo` | Echo back messages for testing | utility, public |
| `calculate` | Safely evaluate math expressions | math, utility |
| `get_server_info` | Get server environment info | system, info |
| `format_text` | Format text (upper, lower, title, reverse) | utility, text |
| `process_json` | Process JSON (pretty, minify, keys, validate) | data, json |
| `get_timestamp` | Get timestamps in various formats | system, time |
| `list_operations` | Perform operations on string lists | data, list |
| `hash_text` | Generate text hashes (SHA256, SHA1, MD5) | security, hash |
| `encode_decode` | Encode/decode text (base64, URL, hex) | development, base64 |

### PowerPoint Tools

Advanced PowerPoint analysis and processing capabilities with **multimodal AI support**:
|| Tool | Description |
|------|-------------|
| `extract_powerpoint_metadata` | Extract comprehensive metadata from PowerPoint presentations |
| `analyze_powerpoint_content` | Analyze content of specific slides or entire presentations |
| `get_powerpoint_summary` | Get high-level summary of a PowerPoint presentation |
| `validate_powerpoint_file` | Validate PowerPoint files and check for common issues |
| `manage_presentation_slides` | **NEW**: Add, delete, move, and duplicate slides using DSL commands |
| `capture_powerpoint_slides` | **NEW**: Capture slide images as base64 PNG data URLs for multimodal AI analysis |

#### PowerPoint Features

- **Comprehensive Metadata Extraction**: Core properties, slide dimensions, layout information
- **Shape Analysis**: Position, size, formatting, and content of all shapes
- **Text Content**: Fonts, colors, alignment, paragraph and run-level formatting
- **Multimedia Elements**: Images with crop information, tables with cell data
- **Formatting Details**: Fill, line, shadow formatting for all objects
- **Slide Structure**: Master slides, layouts, notes, and comments
- **Content Summarization**: Automatic extraction of slide titles and content
- **File Validation**: Format checking, corruption detection, structural integrity
- **üÜï Multimodal AI Integration**: Slide image capture as base64 PNG data URLs for vision-capable LLMs
- **üÜï Visual Content Analysis**: Export slides as images for AI-powered visual understanding

### Resources

#### Static Resources
- `config://server` - Server configuration
- `data://environment` - Environment information  
- `system://status` - System status
- `data://sample-users` - Sample user data
- `config://features` - Available features

#### Resource Templates
- `users://{user_id}` - Get user by ID
- `config://{section}` - Get config section
- `data://{data_type}/summary` - Get data summaries
- `logs://{log_level}` - Get simulated logs
- `file://{file_path}` - Read file contents (with safety checks)

### Prompts

- `analyze_data` - Generate data analysis prompts
- `code_review_prompt` - Generate code review prompts

### Custom HTTP Routes

- `GET /health` - Health check endpoint
- `GET /info` - Server information

## üîß Integration Approaches

VoluteMCP offers flexible integration options for different use cases:

### **üåê Cloud Integration (Serverless/Web Apps)**

**Best for**: AWS Lambda, Vercel, Netlify, cloud-deployed AI agents

```python
# Ultra-simple SDK integration
from volute_ppt.sdk import VoluteMCPCloudClient

class MyAIAgent:
    def __init__(self):
        self.volute = VoluteMCPCloudClient()
    
    async def process_calculation(self, expression):
        return await self.volute.calculate(expression)

# Works in FastAPI, Flask, Express.js, Next.js, etc.
```

### **üñ•Ô∏è Local MCP Integration (Desktop Apps)**

**Best for**: Claude Desktop, local AI applications, PowerPoint integration, multimodal AI workflows

```json
{
  "volutemcp-local": {
    "command": "python",
    "args": ["-m", "volute_ppt.server_local", "stdio"],
    "env": {},
    "working_directory": "/path/to/volutemcp"
  }
}
```

### **üîÑ Hybrid Architecture (Best of Both)**

**Best for**: Comprehensive AI systems needing both cloud and local capabilities, multimodal AI workflows

```python
# Use both cloud and local servers
from volute_ppt.sdk import VoluteMCPCloudClient

class HybridAIAgent:
    def __init__(self):
        self.cloud = VoluteMCPCloudClient()  # For general tools
        # Local MCP for PowerPoint (via separate config)
    
    async def process_request(self, user_input):
        # Use cloud for calculations
        if "calculate" in user_input:
            return await self.cloud.calculate("2 + 3")
        # Use local for PowerPoint (via MCP client)
        # ...
```

## üìö Documentation

- **[Installation Guide](INSTALLATION_GUIDE.md)** - Multiple installation methods
- **[Cloud Integration](CLOUD_INTEGRATION.md)** - SDK usage for cloud deployments
- **[Developer Guide](DEVELOPER_GUIDE.md)** - Comprehensive integration examples
- **[Hybrid Architecture](HYBRID_ARCHITECTURE.md)** - Cloud + local setup
- **[Deployment Guide](DEPLOYMENT.md)** - Production deployment options

## Usage Examples

### Using with MCP Clients

The server can be used with any MCP-compatible client. Here are some examples:

#### Call a Tool
```python
# Using an MCP client library
result = client.call_tool("calculate", {"expression": "2 + 3 * 4"})
print(result)  # 14.0
```

#### Access a Resource
```python
# Get server config
config = client.read_resource("config://server")
print(config)

# Get specific user
user = client.read_resource("users://1")
print(user)
```

#### Use a Prompt
```python
# Generate analysis prompt
prompt = client.get_prompt("analyze_data", {
    "data_description": "Sales data for Q1 2024",
    "analysis_type": "trends"
})
```

#### PowerPoint Analysis
```python
# Extract comprehensive metadata from a presentation
result = client.call_tool("extract_powerpoint_metadata", {
    "presentation_path": "./presentation.pptx",
    "include_slide_content": True,
    "output_format": "json"
})

# Get a quick summary of the presentation
summary = client.call_tool("get_powerpoint_summary", {
    "presentation_path": "./presentation.pptx"
})

# Analyze specific slides only
content = client.call_tool("analyze_powerpoint_content", {
    "presentation_path": "./presentation.pptx",
    "slide_numbers": [1, 3, 5],
    "extract_text_only": True
})

# Validate a PowerPoint file
validation = client.call_tool("validate_powerpoint_file", {
    "presentation_path": "./presentation.pptx"
})

# üÜï Capture slide images for multimodal AI analysis
slide_images = client.call_tool("capture_powerpoint_slides", {
    "presentation_path": "./presentation.pptx",
    "slide_numbers": [1, 3, 5],  # Specific slides or omit for all
    "max_slides": 10,           # Safety limit
    "image_width": 1024,        # Optional: control image size
    "image_height": 768
})
# Returns base64 PNG data URLs perfect for vision-capable AI models

# üÜï Manage presentation slides with DSL commands
manage_result = client.call_tool("manage_presentation_slides", {
    "presentation_path": "./presentation.pptx",
    "dsl_operations": "add_slide: position=1, layout=\"Title Slide\" | move_slide: from=3, to=5 | duplicate_slide: source=2, position=end"
})
# Supports: add_slide, delete_slide, move_slide, duplicate_slide with pipe-separated operations
```

## Testing

The project includes a comprehensive test suite to validate all functionality:

### Running Tests

```bash
# Run all tests using the test runner
python run_tests.py

# Or run tests directly
python tests/test_powerpoint_tools.py

# Using pytest (if installed)
pytest tests/
```

### Test Coverage

The test suite validates:
- ‚úÖ All module imports work correctly
- ‚úÖ Pydantic data models function properly
- ‚úÖ PowerPoint tools register and integrate correctly
- ‚úÖ Server startup and configuration
- ‚úÖ Error handling for edge cases
- ‚úÖ FastMCP 2.0 async/await patterns

### Test Results

- **5 PowerPoint tools** properly registered (including multimodal slide capture)
- **12 total tools** available (including core tools)
- **3 resources** configured
- **100% test pass rate**

## Development

### Project Structure

```
volutemcp/
‚îú‚îÄ‚îÄ server.py                    # Main server entry point
‚îú‚îÄ‚îÄ server_modular.py           # Modular server implementation
‚îú‚îÄ‚îÄ config.py                   # Configuration management
‚îú‚îÄ‚îÄ tools.py                    # Core tool implementations
‚îú‚îÄ‚îÄ resources.py                # Resource implementations
‚îú‚îÄ‚îÄ powerpoint_metadata.py      # PowerPoint metadata extraction
‚îú‚îÄ‚îÄ powerpoint_tools.py         # PowerPoint tool implementations
‚îú‚îÄ‚îÄ powerpoint_image_capture.py # üÜï Multimodal slide image capture
‚îú‚îÄ‚îÄ tests/                      # Test directory
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py            # Test package initialization
‚îÇ   ‚îú‚îÄ‚îÄ test_powerpoint_tools.py # PowerPoint tools test suite
‚îÇ   ‚îî‚îÄ‚îÄ README.md              # Test documentation
‚îú‚îÄ‚îÄ run_tests.py               # Test runner script
‚îú‚îÄ‚îÄ pytest.ini                # Pytest configuration
‚îú‚îÄ‚îÄ requirements.txt           # Python dependencies
‚îú‚îÄ‚îÄ .env.example              # Environment template
‚îú‚îÄ‚îÄ .gitignore               # Git ignore rules
‚îî‚îÄ‚îÄ README.md                # This file
```

### Adding New Components

#### Add a Tool
```python
# In tools.py
@mcp.tool(tags={"custom", "utility"})
def my_custom_tool(input_data: str) -> str:
    """My custom tool description."""
    return f"Processed: {input_data}"
```

#### Add a Resource
```python
# In resources.py
@mcp.resource("custom://my-data")
def my_custom_resource() -> dict:
    """My custom resource description."""
    return {"data": "value"}
```

#### Add a Resource Template
```python
# In resources.py
@mcp.resource("items://{item_id}")
def get_item(item_id: int) -> dict:
    """Get item by ID."""
    return {"id": item_id, "name": f"Item {item_id}"}
```

### Configuration

The server uses Pydantic for configuration management. Settings can be provided via:

1. Environment variables (prefixed with `VOLUTE_`)
2. `.env` file
3. Default values in `config.py`

#### Available Settings

| Setting | Default | Description |
|---------|---------|-------------|
| `VOLUTE_NAME` | VoluteMCP | Server name |
| `VOLUTE_HOST` | 127.0.0.1 | Server host |
| `VOLUTE_PORT` | 8000 | Server port |
| `VOLUTE_LOG_LEVEL` | INFO | Logging level |
| `VOLUTE_API_KEY` | None | Optional API key |

### Tag-Based Filtering

Filter components by tags when creating the server:

```python
# Only expose utility tools
mcp = FastMCP(include_tags={"utility"})

# Hide internal tools
mcp = FastMCP(exclude_tags={"internal"})

# Combine filters
mcp = FastMCP(include_tags={"public"}, exclude_tags={"deprecated"})
```

## Advanced Usage

### Server Composition

```python
from fastmcp import FastMCP
from tools import register_tools

# Create modular servers
tools_server = FastMCP("ToolsOnly")
register_tools(tools_server)

# Mount into main server
main_server = FastMCP("Main")
main_server.mount(tools_server, prefix="tools")
```

### Custom Serialization

```python
import yaml

def yaml_serializer(data):
    return yaml.dump(data, sort_keys=False)

mcp = FastMCP(tool_serializer=yaml_serializer)
```

## Deployment

### Docker

```dockerfile
FROM python:3.11-slim

WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 8000
CMD ["python", "server.py"]
```

### systemd Service

```ini
[Unit]
Description=VoluteMCP Server
After=network.target

[Service]
Type=simple
User=volute
WorkingDirectory=/opt/volutemcp
ExecStart=/opt/volutemcp/venv/bin/python server.py
Restart=always

[Install]
WantedBy=multi-user.target
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Add your changes with tests
4. Submit a pull request

## License

MIT License - see LICENSE file for details.

## üåê Live Deployments

- **Cloud Server**: https://volutemcp-server.onrender.com
- **PyPI Package**: https://pypi.org/project/volutemcp/
- **GitLab Repository**: https://gitlab.com/coritan/volutemcp
- **Health Check**: https://volutemcp-server.onrender.com/health

## üì¶ Package Information

```bash
# Installation
pip install volutemcp

# CLI Commands
volutemcp-local --help          # Local PowerPoint server
volutemcp-server --help         # Cloud server

# Python Module
python -m volute_ppt.server_local stdio
```

## Resources

- **[VoluteMCP on PyPI](https://pypi.org/project/volutemcp/)** - Official package
- **[FastMCP Documentation](https://github.com/jlowin/fastmcp)** - Framework docs
- **[Model Context Protocol](https://modelcontextprotocol.io)** - MCP standard
- **[MCP Specification](https://spec.modelcontextprotocol.io)** - Technical specs
- **[GitLab Issues](https://gitlab.com/coritan/volutemcp/-/issues)** - Bug reports & features
