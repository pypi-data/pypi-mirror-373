name: 🚀 Pipeline de Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, closed]

env:
  PYTHON_VERSION: '3.11'

jobs:
  qualidade:
    name: 🧪 Testes e Qualidade
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        
    steps:
    - name: 📥 Fazer checkout do código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install hatchling build twine
        pip install -e ".[dev]"
    
    - name: 🔍 Verificar formatação com Black
      run: |
        echo "🎨 Verificando formatação do código..."
        black --check mentorstec/ || (echo "❌ Código não está formatado. Execute: black mentorstec/" && exit 1)
    
    - name: ⚡ Análise de código com Ruff
      run: |
        echo "🔍 Analisando qualidade do código..."
        ruff check mentorstec/
    
    - name: 🏷️ Verificação de tipos com MyPy
      run: |
        echo "🏷️ Verificando anotações de tipo..."
        mypy mentorstec/ --ignore-missing-imports || echo "⚠️ Alguns tipos podem estar faltando"
    
    - name: 🧪 Executar testes
      run: |
        echo "🧪 Executando suite de testes..."
        pytest tests/ -v --cov=mentorstec --cov-report=xml --cov-report=term
    
    - name: 📊 Upload de cobertura para Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: mentorstec-coverage

  construir:
    name: 📦 Build do Pacote
    runs-on: ubuntu-latest
    needs: qualidade
    if: github.event.action != 'closed'
    
    steps:
    - name: 📥 Fazer checkout do código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Instalar ferramentas de build
      run: |
        python -m pip install --upgrade pip
        pip install hatchling build twine
    
    - name: 🏗️ Construir pacote
      run: |
        echo "🏗️ Construindo pacote Python..."
        python -m build
        echo "📄 Arquivos criados:"
        ls -la dist/
    
    - name: ✅ Validar pacote
      run: |
        echo "✅ Validando integridade do pacote..."
        twine check dist/*
    
    - name: 💾 Salvar artefatos
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  deploy-pypi:
    name: 🚀 Deploy para PyPI
    runs-on: ubuntu-latest
    needs: [qualidade, construir]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && 
       github.event.action == 'closed' && 
       github.event.pull_request.merged == true && 
       github.base_ref == 'main')
    
    environment:
      name: production
      url: https://pypi.org/project/mentorstec/
    
    steps:
    - name: 📥 Fazer checkout do código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Baixar artefatos
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/
    
    - name: 📦 Instalar twine
      run: |
        python -m pip install --upgrade pip twine
    
    - name: 🚀 Publicar no PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        echo "🚀 Fazendo deploy para PyPI..."
        twine upload dist/*
        echo "✅ Deploy realizado com sucesso!"
        echo "📦 Pacote disponível em: https://pypi.org/project/mentorstec/"

  deploy-test-pypi:
    name: 🧪 Deploy para TestPyPI
    runs-on: ubuntu-latest
    needs: [qualidade, construir]
    if: |
      github.event_name == 'pull_request' && 
      github.event.action != 'closed' &&
      github.base_ref == 'main'
    
    environment:
      name: test
      url: https://test.pypi.org/project/mentorstec/
    
    steps:
    - name: 📥 Fazer checkout do código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Baixar artefatos
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/
    
    - name: 📦 Instalar twine
      run: |
        python -m pip install --upgrade pip twine
    
    - name: 🧪 Publicar no TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        echo "🧪 Fazendo deploy para TestPyPI..."
        twine upload dist/*
        echo "✅ Deploy de teste realizado com sucesso!"
        echo "📦 Pacote de teste disponível em: https://test.pypi.org/project/mentorstec/"

  notificar:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: [deploy-pypi]
    if: always() && (needs.deploy-pypi.result == 'success' || needs.deploy-pypi.result == 'failure')
    
    steps:
    - name: 📢 Notificar sucesso
      if: needs.deploy-pypi.result == 'success'
      run: |
        echo "🎉 Deploy realizado com sucesso!"
        echo "📦 Nova versão disponível no PyPI"
        echo "💾 Instale com: pip install --upgrade mentorstec"
    
    - name: 📢 Notificar falha
      if: needs.deploy-pypi.result == 'failure'
      run: |
        echo "❌ Falha no deploy!"
        echo "🔍 Verifique os logs dos jobs anteriores"
        echo "🛠️ Corrija os problemas e tente novamente"