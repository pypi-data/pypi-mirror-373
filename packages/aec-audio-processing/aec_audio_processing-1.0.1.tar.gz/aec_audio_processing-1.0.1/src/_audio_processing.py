# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import __audio_processing
else:
    import __audio_processing

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class AudioProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, enable_aec=True, enable_ns=True, ns_level=2, enable_agc=True, agc_mode=1, enable_vad=True):
        __audio_processing.AudioProcessor_swiginit(self, __audio_processing.new_AudioProcessor(enable_aec, enable_ns, ns_level, enable_agc, agc_mode, enable_vad))

    def set_stream_format(self, sample_rate_in=32000, channel_count_in=1, sample_rate_out=-1, channel_count_out=-1):
        return __audio_processing.AudioProcessor_set_stream_format(self, sample_rate_in, channel_count_in, sample_rate_out, channel_count_out)

    def set_reverse_stream_format(self, sample_rate_in=32000, channel_count_in=1):
        return __audio_processing.AudioProcessor_set_reverse_stream_format(self, sample_rate_in, channel_count_in)

    def set_stream_delay(self, delay_ms):
        return __audio_processing.AudioProcessor_set_stream_delay(self, delay_ms)

    def set_vad_aggressiveness(self, aggressiveness):
        return __audio_processing.AudioProcessor_set_vad_aggressiveness(self, aggressiveness)

    def get_sample_rate_in(self):
        return __audio_processing.AudioProcessor_get_sample_rate_in(self)

    def get_sample_rate_out(self):
        return __audio_processing.AudioProcessor_get_sample_rate_out(self)

    def get_channel_count_in(self):
        return __audio_processing.AudioProcessor_get_channel_count_in(self)

    def get_channel_count_out(self):
        return __audio_processing.AudioProcessor_get_channel_count_out(self)

    def get_reverse_sample_rate_in(self):
        return __audio_processing.AudioProcessor_get_reverse_sample_rate_in(self)

    def get_reverse_channel_count_in(self):
        return __audio_processing.AudioProcessor_get_reverse_channel_count_in(self)

    def get_stream_delay(self):
        return __audio_processing.AudioProcessor_get_stream_delay(self)

    def aec_enabled(self):
        return __audio_processing.AudioProcessor_aec_enabled(self)

    def ns_enabled(self):
        return __audio_processing.AudioProcessor_ns_enabled(self)

    def agc_enabled(self):
        return __audio_processing.AudioProcessor_agc_enabled(self)

    def vad_enabled(self):
        return __audio_processing.AudioProcessor_vad_enabled(self)

    def process_stream(self, input):
        return __audio_processing.AudioProcessor_process_stream(self, input)

    def process_reverse_stream(self, input):
        return __audio_processing.AudioProcessor_process_reverse_stream(self, input)

    def has_voice(self):
        return __audio_processing.AudioProcessor_has_voice(self)

    def get_frame_size(self):
        return __audio_processing.AudioProcessor_get_frame_size(self)
    __swig_destroy__ = __audio_processing.delete_AudioProcessor

# Register AudioProcessor in __audio_processing:
__audio_processing.AudioProcessor_swigregister(AudioProcessor)

