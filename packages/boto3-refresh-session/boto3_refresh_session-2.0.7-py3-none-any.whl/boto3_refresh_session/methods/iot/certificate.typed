__all__ = ["IoTCertificateRefreshableSession"]

from pathlib import Path
from typing import Any

from ...exceptions import BRSError
from ...utils import PKCS11, TemporaryCredentials
from .core import BaseIoTRefreshableSession


class IoTCertificateRefreshableSession(
    BaseIoTRefreshableSession, registry_key="certificate"
):
    def __init__(
        self,
        endpoint: str,
        role_alias: str,
        thing_name: str,
        certificate: str | bytes,
        private_key: str | bytes | None = None,
        pkcs11: PKCS11 | None = None,
        ca: bytes | None = None,
        verify_peer: bool = True,
    ):
        self.endpoint = endpoint
        self.role_alias = role_alias
        self.thing_name = thing_name
        self.certificate = certificate
        self.private_key = private_key
        self.pkcs11 = pkcs11
        self.ca = ca
        self.verify_peer = verify_peer

        if self.certificate and isinstance(self.certificate, str):
            with open(Path(self.certificate), "rb") as cert_pem_file:
                self.certificate = cert_pem_file.read()

        if self.private_key is None and self.pkcs11 is None:
            raise BRSError(
                "Either 'private_key' or 'pkcs11' must be provided."
            )

        if self.private_key is not None and self.pkcs11 is not None:
            raise BRSError(
                "Only one of 'private_key' or 'pkcs11' can be provided."
            )

        if self.private_key and isinstance(self.private_key, str):
            with open(Path(self.private_key), "rb") as private_key_pem_file:
                self.private_key = private_key_pem_file.read()

    def _get_credentials(self) -> TemporaryCredentials: ...

    def get_identity(self) -> dict[str, Any]: ...
