[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyinj"
version = "1.0.0"
description = "Type-safe, production-ready dependency injection for Python 3.13+"
readme = "README.md"
requires-python = ">=3.13"
license = "MIT"
authors = [
    {name = "Qrius Global", email = "mishal@qrius.global"}
]
keywords = ["dependency-injection", "ioc", "di", "type-safe", "async", "python3.13"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]

[project.urls]
Documentation = "https://github.com/qrius/pyinj"
Repository = "https://github.com/qrius/pyinj"
Issues = "https://github.com/qrius/pyinj/issues"

[tool.uv]
package = true

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true

[tool.basedpyright]
pythonVersion = "3.13"
typeCheckingMode = "strict"
reportMissingTypeStubs = "error"
reportImportCycles = "error"
reportAny = "warning"
reportUnusedImport = "error"
reportUnusedClass = "error" 
reportUnusedFunction = "error"

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "C90",  # mccabe complexity
    "TID",  # flake8-tidy-imports
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501", # line too long (handled by formatter)
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # allow assert in tests

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
show_missing = true
fail_under = 95

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=95",
]
markers = [
    "slow: marks tests as slow",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]