"""
    EMIL ProductSyncService

    The EMIL ProductSyncService API description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: kontakt@emil.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from eis.product-sync.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from eis.product-sync.exceptions import ApiAttributeError



class TaskClass(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('task_type',): {
            'EXPORT': "EXPORT",
            'COMPARE': "COMPARE",
            'SYNC': "SYNC",
            'COPY': "COPY",
        },
        ('status',): {
            'CREATED': "CREATED",
            'STARTED': "STARTED",
            'IN_PROGRESS': "IN_PROGRESS",
            'COMPLETED': "COMPLETED",
            'STOPPING': "STOPPING",
            'STOPPED': "STOPPED",
            'FAILED': "FAILED",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'id': (float,),  # noqa: E501
            'code': (str,),  # noqa: E501
            'task_uid': (str,),  # noqa: E501
            'source_env': (str, none_type,),  # noqa: E501
            'source_env_desc': (str, none_type,),  # noqa: E501
            'source_product_slug': (str, none_type,),  # noqa: E501
            'source_product_name': (str, none_type,),  # noqa: E501
            'source_product_version_id': (float, none_type,),  # noqa: E501
            'target_env': (str, none_type,),  # noqa: E501
            'target_env_desc': (str, none_type,),  # noqa: E501
            'target_product_slug': (str, none_type,),  # noqa: E501
            'target_product_name': (str, none_type,),  # noqa: E501
            'target_product_version_id': (float, none_type,),  # noqa: E501
            'task_type': (str,),  # noqa: E501
            'details_json': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'compare_yaml': (str, none_type,),  # noqa: E501
            'initial_sync_log_yaml': (str, none_type,),  # noqa: E501
            'final_sync_log_yaml': (str, none_type,),  # noqa: E501
            'source_file_s3_url': (str, none_type,),  # noqa: E501
            'target_file_s3_url': (str, none_type,),  # noqa: E501
            'source_file_s3_signed_url': (str, none_type,),  # noqa: E501
            'target_file_s3_signed_url': (str, none_type,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'progress_pct': (float,),  # noqa: E501
            'error': (str, none_type,),  # noqa: E501
            'started_at': (datetime, none_type,),  # noqa: E501
            'been_stopped_at': (datetime, none_type,),  # noqa: E501
            'ended_at': (datetime, none_type,),  # noqa: E501
            'arn': (str, none_type,),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'updated_at': (datetime,),  # noqa: E501
            'created_by': (str,),  # noqa: E501
            'updated_by': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'code': 'code',  # noqa: E501
        'task_uid': 'taskUid',  # noqa: E501
        'source_env': 'sourceEnv',  # noqa: E501
        'source_env_desc': 'sourceEnvDesc',  # noqa: E501
        'source_product_slug': 'sourceProductSlug',  # noqa: E501
        'source_product_name': 'sourceProductName',  # noqa: E501
        'source_product_version_id': 'sourceProductVersionId',  # noqa: E501
        'target_env': 'targetEnv',  # noqa: E501
        'target_env_desc': 'targetEnvDesc',  # noqa: E501
        'target_product_slug': 'targetProductSlug',  # noqa: E501
        'target_product_name': 'targetProductName',  # noqa: E501
        'target_product_version_id': 'targetProductVersionId',  # noqa: E501
        'task_type': 'taskType',  # noqa: E501
        'details_json': 'detailsJson',  # noqa: E501
        'compare_yaml': 'compareYaml',  # noqa: E501
        'initial_sync_log_yaml': 'initialSyncLogYaml',  # noqa: E501
        'final_sync_log_yaml': 'finalSyncLogYaml',  # noqa: E501
        'source_file_s3_url': 'sourceFileS3Url',  # noqa: E501
        'target_file_s3_url': 'targetFileS3Url',  # noqa: E501
        'source_file_s3_signed_url': 'sourceFileS3SignedUrl',  # noqa: E501
        'target_file_s3_signed_url': 'targetFileS3SignedUrl',  # noqa: E501
        'status': 'status',  # noqa: E501
        'progress_pct': 'progressPct',  # noqa: E501
        'error': 'error',  # noqa: E501
        'started_at': 'startedAt',  # noqa: E501
        'been_stopped_at': 'beenStoppedAt',  # noqa: E501
        'ended_at': 'endedAt',  # noqa: E501
        'arn': 'arn',  # noqa: E501
        'created_at': 'createdAt',  # noqa: E501
        'updated_at': 'updatedAt',  # noqa: E501
        'created_by': 'createdBy',  # noqa: E501
        'updated_by': 'updatedBy',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, code, task_uid, source_env, source_env_desc, source_product_slug, source_product_name, source_product_version_id, target_env, target_env_desc, target_product_slug, target_product_name, target_product_version_id, task_type, details_json, compare_yaml, initial_sync_log_yaml, final_sync_log_yaml, source_file_s3_url, target_file_s3_url, source_file_s3_signed_url, target_file_s3_signed_url, status, progress_pct, error, started_at, been_stopped_at, ended_at, arn, created_at, updated_at, created_by, updated_by, *args, **kwargs):  # noqa: E501
        """TaskClass - a model defined in OpenAPI

        Args:
            id (float): Internal unique identifier for the object. You should not have to use this, use code instead.
            code (str): Unique identifier for the object.
            task_uid (str): Client-generated unique identifier of the task.
            source_env (str, none_type): Name of the environment the source product is in.
            source_env_desc (str, none_type): Description of the environment the source product is in.
            source_product_slug (str, none_type): Slug of the source product.
            source_product_name (str, none_type): Name of the source product.
            source_product_version_id (float, none_type): ID of the source product version.
            target_env (str, none_type): Name of the environment the target product is in.
            target_env_desc (str, none_type): Description of the environment the target product is in.
            target_product_slug (str, none_type): Slug of the target product.
            target_product_name (str, none_type): Name of the target product.
            target_product_version_id (float, none_type): ID of the target product version.
            task_type (str): Type of the task.
            details_json ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): JSON object with the custom task properties.
            compare_yaml (str, none_type): YAML object with the product comparision results.
            initial_sync_log_yaml (str, none_type): YAML object with the initial product synchronization results.
            final_sync_log_yaml (str, none_type): YAML object with the final product synchronization results.
            source_file_s3_url (str, none_type): S3 URL for the source product ZIP file.
            target_file_s3_url (str, none_type): S3 URL for the target product ZIP file.
            source_file_s3_signed_url (str, none_type): S3 URL for the source product ZIP file.
            target_file_s3_signed_url (str, none_type): S3 URL for the target product ZIP file.
            status (str): Status of the task.
            progress_pct (float): Percent of progress.
            error (str, none_type): Task error message.
            started_at (datetime, none_type): Date/time when the task was started.
            been_stopped_at (datetime, none_type): Date/time when the task has been stopped.
            ended_at (datetime, none_type): Date/time when the task ended.
            arn (str, none_type): ECS task ERN
            created_at (datetime): Time at which the object was created.
            updated_at (datetime): Time at which the object was updated.
            created_by (str): Identifier of the user who created the record.
            updated_by (str): Identifier of the user who last updated the record.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.code = code
        self.task_uid = task_uid
        self.source_env = source_env
        self.source_env_desc = source_env_desc
        self.source_product_slug = source_product_slug
        self.source_product_name = source_product_name
        self.source_product_version_id = source_product_version_id
        self.target_env = target_env
        self.target_env_desc = target_env_desc
        self.target_product_slug = target_product_slug
        self.target_product_name = target_product_name
        self.target_product_version_id = target_product_version_id
        self.task_type = task_type
        self.details_json = details_json
        self.compare_yaml = compare_yaml
        self.initial_sync_log_yaml = initial_sync_log_yaml
        self.final_sync_log_yaml = final_sync_log_yaml
        self.source_file_s3_url = source_file_s3_url
        self.target_file_s3_url = target_file_s3_url
        self.source_file_s3_signed_url = source_file_s3_signed_url
        self.target_file_s3_signed_url = target_file_s3_signed_url
        self.status = status
        self.progress_pct = progress_pct
        self.error = error
        self.started_at = started_at
        self.been_stopped_at = been_stopped_at
        self.ended_at = ended_at
        self.arn = arn
        self.created_at = created_at
        self.updated_at = updated_at
        self.created_by = created_by
        self.updated_by = updated_by
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, code, task_uid, source_env, source_env_desc, source_product_slug, source_product_name, source_product_version_id, target_env, target_env_desc, target_product_slug, target_product_name, target_product_version_id, task_type, details_json, compare_yaml, initial_sync_log_yaml, final_sync_log_yaml, source_file_s3_url, target_file_s3_url, source_file_s3_signed_url, target_file_s3_signed_url, status, progress_pct, error, started_at, been_stopped_at, ended_at, arn, created_at, updated_at, created_by, updated_by, *args, **kwargs):  # noqa: E501
        """TaskClass - a model defined in OpenAPI

        Args:
            id (float): Internal unique identifier for the object. You should not have to use this, use code instead.
            code (str): Unique identifier for the object.
            task_uid (str): Client-generated unique identifier of the task.
            source_env (str, none_type): Name of the environment the source product is in.
            source_env_desc (str, none_type): Description of the environment the source product is in.
            source_product_slug (str, none_type): Slug of the source product.
            source_product_name (str, none_type): Name of the source product.
            source_product_version_id (float, none_type): ID of the source product version.
            target_env (str, none_type): Name of the environment the target product is in.
            target_env_desc (str, none_type): Description of the environment the target product is in.
            target_product_slug (str, none_type): Slug of the target product.
            target_product_name (str, none_type): Name of the target product.
            target_product_version_id (float, none_type): ID of the target product version.
            task_type (str): Type of the task.
            details_json ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): JSON object with the custom task properties.
            compare_yaml (str, none_type): YAML object with the product comparision results.
            initial_sync_log_yaml (str, none_type): YAML object with the initial product synchronization results.
            final_sync_log_yaml (str, none_type): YAML object with the final product synchronization results.
            source_file_s3_url (str, none_type): S3 URL for the source product ZIP file.
            target_file_s3_url (str, none_type): S3 URL for the target product ZIP file.
            source_file_s3_signed_url (str, none_type): S3 URL for the source product ZIP file.
            target_file_s3_signed_url (str, none_type): S3 URL for the target product ZIP file.
            status (str): Status of the task.
            progress_pct (float): Percent of progress.
            error (str, none_type): Task error message.
            started_at (datetime, none_type): Date/time when the task was started.
            been_stopped_at (datetime, none_type): Date/time when the task has been stopped.
            ended_at (datetime, none_type): Date/time when the task ended.
            arn (str, none_type): ECS task ERN
            created_at (datetime): Time at which the object was created.
            updated_at (datetime): Time at which the object was updated.
            created_by (str): Identifier of the user who created the record.
            updated_by (str): Identifier of the user who last updated the record.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.code = code
        self.task_uid = task_uid
        self.source_env = source_env
        self.source_env_desc = source_env_desc
        self.source_product_slug = source_product_slug
        self.source_product_name = source_product_name
        self.source_product_version_id = source_product_version_id
        self.target_env = target_env
        self.target_env_desc = target_env_desc
        self.target_product_slug = target_product_slug
        self.target_product_name = target_product_name
        self.target_product_version_id = target_product_version_id
        self.task_type = task_type
        self.details_json = details_json
        self.compare_yaml = compare_yaml
        self.initial_sync_log_yaml = initial_sync_log_yaml
        self.final_sync_log_yaml = final_sync_log_yaml
        self.source_file_s3_url = source_file_s3_url
        self.target_file_s3_url = target_file_s3_url
        self.source_file_s3_signed_url = source_file_s3_signed_url
        self.target_file_s3_signed_url = target_file_s3_signed_url
        self.status = status
        self.progress_pct = progress_pct
        self.error = error
        self.started_at = started_at
        self.been_stopped_at = been_stopped_at
        self.ended_at = ended_at
        self.arn = arn
        self.created_at = created_at
        self.updated_at = updated_at
        self.created_by = created_by
        self.updated_by = updated_by
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
