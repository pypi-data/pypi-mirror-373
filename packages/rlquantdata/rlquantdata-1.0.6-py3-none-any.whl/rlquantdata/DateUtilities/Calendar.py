# -*- coding: utf-8 -*-

from rlquantdata.DateUtilities.Date_enum import TimeUnits, BizDayConventions, Months, Weekdays
from rlquantdata.DateUtilities.Date import Date
from rlquantdata.DateUtilities.Period import Period


class Calendar(object):
    def __init__(self, holCenter: str):
        holCenter = holCenter.lower()
        try:
            self._impl = _holDict[holCenter]()
        except KeyError:
            raise ValueError("{0} is not a valid description of a holiday center".format(holCenter))
        self.name = holCenter

    def isBizDay(self, d: Date):
        return self._impl.isBizDay(d)

    def isHoliday(self, d: Date):
        return not self._impl.isBizDay(d)

    def isWeekEnd(self, weekDay):
        return self._impl.isWeekEnd(weekDay)

    def isEndOfMonth(self, d: Date):
        return d.month() != self.adjustDate(d + 1).month()

    def endOfMonth(self, d: Date):
        return self.adjustDate(Date.endOfMonth(d), BizDayConventions.Preceding)

    def bizDaysBetween(self, fromDate: Date, toDate: Date, includeFirst: bool = True, includeLast: bool = False):
        wd = 0
        d: Date

        if fromDate != toDate:
            if fromDate < toDate:
                d = fromDate
                while d < toDate:
                    if self.isBizDay(d):
                        wd += 1
                    d += 1
                if self.isBizDay(toDate):
                    wd += 1
            elif fromDate > toDate:
                d = toDate
                while d < fromDate:
                    if self.isBizDay(d):
                        wd += 1
                    d += 1
                if self.isBizDay(fromDate):
                    wd += 1
            if self.isBizDay(fromDate) and not includeFirst:
                wd -= 1
            if self.isBizDay(toDate) and not includeLast:
                wd -= 1
        return wd

    def adjustDate(self, d: Date, c=BizDayConventions.Following):
        d1: Date
        d2: Date

        if c == BizDayConventions.Unadjusted:
            return d
        d1 = d

        if c == BizDayConventions.Following or c == BizDayConventions.ModifiedFollowing or \
                c == BizDayConventions.HalfMonthModifiedFollowing:
            while self.isHoliday(d1):
                d1 += 1
            if c == BizDayConventions.ModifiedFollowing or c == BizDayConventions.HalfMonthModifiedFollowing:
                if d1.month() != d.month():
                    return self.adjustDate(d, BizDayConventions.Preceding)
                if c == BizDayConventions.HalfMonthModifiedFollowing:
                    if d.dayOfMonth() <= 15 < d1.dayOfMonth():
                        return self.adjustDate(d, BizDayConventions.Preceding)
        elif c == BizDayConventions.Preceding or c == BizDayConventions.ModifiedPreceding:
            while self.isHoliday(d1):
                d1 -= 1
            if c == BizDayConventions.ModifiedPreceding and d1.month() != d.month():
                return self.adjustDate(d, BizDayConventions.Following)
        elif c == BizDayConventions.Nearest:
            d2 = d
            while self.isHoliday(d1) and self.isHoliday(d2):
                d1 += 1
                d2 -= 1

            if self.isHoliday(d1):
                return d2
            else:
                return d1
        else:
            raise ValueError("unknown business-day convention")
        return d1

    def advanceDate(self, d: Date, period: Period, c=BizDayConventions.Following, endOfMonth: bool = False):
        n: int
        units: int
        d: Date

        n = period.length()
        units = period.units()

        if n == 0:
            return self.adjustDate(d, c)
        elif units == TimeUnits.BDays:
            d1 = d
            if n > 0:
                while n > 0:
                    d1 += 1
                    while self.isHoliday(d1):
                        d1 += 1
                    n -= 1
            else:
                while n < 0:
                    d1 -= 1
                    while self.isHoliday(d1):
                        d1 -= 1
                    n += 1
            return d1
        elif units == TimeUnits.Days or units == TimeUnits.Weeks:
            d1 = d + period
            return self.adjustDate(d1, c)
        else:
            d1 = d + period
            if endOfMonth and self.isEndOfMonth(d):
                return self.endOfMonth(d1)
            return self.adjustDate(d1, c)

    def holDatesList(self, fromDate: Date, toDate: Date, includeWeekEnds: bool = True):
        result = []
        d: Date = fromDate

        while d <= toDate:
            if self.isHoliday(d) and (includeWeekEnds or not self.isWeekEnd(d.weekday())):
                result.append(d)
            d += 1
        return result

    def bizDatesList(self, fromDate: Date, toDate: Date):
        result = []
        d: Date = fromDate

        while d <= toDate:
            if self.isBizDay(d):
                result.append(d)
            d += 1
        return result

    def __richcmp__(self, right, op):
        if op == 2:
            return self._impl == right._impl

    def __deepcopy__(self, memo):
        return Calendar(self.name)

    def __reduce__(self):
        d = {}

        return Calendar, (self.name,), d

    def __setstate__(self, state):
        pass


class CalendarImpl(object):
    def isBizDay(self, date: Date):
        pass

    def isWeekEnd(self, weekday):
        pass


sse_holDays = {'2017-10-02', '2017-10-03', '1995-05-01', '2017-10-04', '2017-10-05', '2017-10-06', '2001-01-01',
               '2012-04-02', '2012-04-03', '2012-04-04', '2023-06-22', '2023-06-23', '2001-01-22', '2001-01-23',
               '2001-01-24', '2001-01-25', '2001-01-26', '2001-01-29', '2001-01-30', '2001-01-31', '2001-02-01',
               '2001-02-02', '2012-04-30', '2012-05-01', '2006-10-02', '2006-10-03', '2006-10-04', '2006-10-05',
               '2006-10-06', '2018-01-01', '2012-06-22', '2018-02-15', '2018-02-16', '2018-02-19', '2018-02-20',
               '2018-02-21', '2023-09-29', '2023-10-02', '2023-10-03', '2001-05-01', '2001-05-02', '2001-05-03',
               '2001-05-04', '2023-10-04', '2023-10-05', '2001-05-07', '2023-10-06', '1995-10-02', '1995-10-03',
               '2007-01-01', '2007-01-02', '2007-01-03', '2018-04-05', '2018-04-06', '2018-04-30', '2018-05-01',
               '2007-02-19', '2007-02-20', '2007-02-21', '2007-02-22', '2007-02-23', '2012-10-01', '2012-10-02',
               '2012-10-03', '2012-10-04', '2012-10-05', '1996-01-01', '2018-06-18', '2007-05-01', '2007-05-02',
               '2007-05-03', '2007-05-04', '2007-05-07', '1996-02-19', '1996-02-20', '1996-02-21', '2001-10-01',
               '2001-10-02', '1996-02-22', '1996-02-23', '1996-02-26', '1996-02-27', '1996-02-28', '1996-02-29',
               '1996-03-01', '2001-10-03', '2001-10-04', '2001-10-05', '2013-01-01', '2013-01-02', '2013-01-03',
               '2013-02-11', '2013-02-12', '2013-02-13', '2013-02-14', '2013-02-15', '2018-09-24', '2018-10-01',
               '2018-10-02', '2018-10-03', '2018-10-04', '1996-05-01', '2018-10-05', '2002-01-01', '2002-01-02',
               '2002-01-03', '2013-04-04', '2013-04-05', '2013-04-29', '2002-02-11', '2002-02-12', '2002-02-13',
               '2002-02-14', '2002-02-15', '2013-04-30', '2013-05-01', '2002-02-18', '2002-02-19', '2002-02-20',
               '2007-10-01', '2007-10-02', '2007-10-03', '2002-02-21', '2002-02-22', '2007-10-04', '2007-10-05',
               '2018-12-31', '2019-01-01', '1991-01-01', '2013-06-10', '2013-06-11', '2013-06-12', '2019-02-04',
               '2019-02-05', '2019-02-06', '2019-02-07', '2019-02-08', '2002-05-01', '2002-05-02', '2002-05-03',
               '1991-02-15', '2002-05-06', '1991-02-18', '2002-05-07', '1996-09-30', '1996-10-01', '1996-10-02',
               '2007-12-31', '2008-01-01', '2019-04-05', '2008-02-06', '2008-02-07', '2008-02-08', '2013-09-19',
               '2008-02-11', '2008-02-12', '2013-09-20', '2019-05-01', '2019-05-02', '2019-05-03', '2013-10-01',
               '2013-10-02', '2013-10-03', '1991-05-01', '2013-10-04', '2013-10-07', '1997-01-01', '2019-06-07',
               '2008-04-04', '1997-02-03', '1997-02-04', '1997-02-05', '1997-02-06', '1997-02-07', '1997-02-10',
               '1997-02-11', '1997-02-12', '1997-02-13', '1997-02-14', '2008-05-01', '2008-05-02', '2002-09-30',
               '2002-10-01', '2002-10-02', '2002-10-03', '2002-10-04', '2002-10-07', '2014-01-01', '2008-06-09',
               '2014-01-31', '2014-02-03', '2014-02-04', '2014-02-05', '2014-02-06', '2019-09-13', '2019-10-01',
               '2019-10-02', '2019-10-03', '2019-10-04', '1997-05-01', '1997-05-02', '2019-10-07', '1991-10-01',
               '1991-10-02', '2003-01-01', '2014-04-07', '2003-01-30', '2003-01-31', '2003-02-03', '2003-02-04',
               '2003-02-05', '2003-02-06', '1997-06-30', '1997-07-01', '2003-02-07', '2008-09-15', '2014-05-01',
               '2014-05-02', '2008-09-29', '2008-09-30', '2008-10-01', '2008-10-02', '2008-10-03', '2020-01-01',
               '2014-06-02', '1992-01-01', '2020-01-24', '2020-01-27', '2020-01-28', '2020-01-29', '2020-01-30',
               '2020-01-31', '1992-02-04', '1992-02-05', '1992-02-06', '2003-05-01', '2003-05-02', '2003-05-05',
               '2003-05-06', '2003-05-07', '2003-05-08', '2003-05-09', '1997-10-01', '1997-10-02', '1997-10-03',
               '2009-01-01', '2009-01-02', '2020-04-06', '2009-01-26', '2009-01-27', '2009-01-28', '2009-01-29',
               '2009-01-30', '2014-09-08', '2020-05-01', '2020-05-04', '2020-05-05', '2014-10-01', '2014-10-02',
               '2014-10-03', '1992-05-01', '2014-10-06', '2014-10-07', '1998-01-01', '1998-01-02', '2009-04-06',
               '2020-06-25', '2020-06-26', '1998-01-26', '1998-01-27', '1998-01-28', '1998-01-29', '1998-01-30',
               '1998-02-02', '1998-02-03', '1998-02-04', '1998-02-05', '1998-02-06', '2009-05-01', '2003-10-01',
               '2003-10-02', '2003-10-03', '2003-10-06', '2003-10-07', '2015-01-01', '2015-01-02', '2009-05-28',
               '2009-05-29', '2015-02-18', '2015-02-19', '2015-02-20', '2020-10-01', '2015-02-23', '2015-02-24',
               '1998-05-01', '2020-10-02', '2020-10-05', '2020-10-06', '2020-10-07', '2020-10-08', '1992-10-01',
               '1992-10-02', '2004-01-01', '2015-04-06', '2004-01-19', '2004-01-20', '2004-01-21', '2004-01-22',
               '2004-01-23', '2004-01-26', '2004-01-27', '2004-01-28', '2015-05-01', '2009-10-01', '2009-10-02',
               '2009-10-05', '2009-10-06', '2009-10-07', '2009-10-08', '2021-01-01', '1993-01-01', '2015-06-22',
               '1993-01-25', '1993-01-26', '2021-02-11', '2021-02-12', '2021-02-15', '2021-02-16', '2021-02-17',
               '2004-05-03', '2004-05-04', '2004-05-05', '2004-05-06', '2004-05-07', '1998-10-01', '1998-10-02',
               '2010-01-01', '2021-04-05', '2015-09-03', '2015-09-04', '2021-05-03', '2010-02-15', '2010-02-16',
               '2010-02-17', '2010-02-18', '2010-02-19', '2021-05-04', '2015-10-01', '2015-10-02', '2021-05-05',
               '2015-10-05', '2015-10-06', '2015-10-07', '1999-01-01', '2021-06-14', '2010-04-05', '1999-02-10',
               '1999-02-11', '1999-02-12', '2010-05-03', '1999-02-15', '1999-02-16', '1999-02-17', '1999-02-18',
               '1999-02-19', '1999-02-22', '1999-02-23', '1999-02-24', '1999-02-25', '1999-02-26', '2004-10-04',
               '2004-10-05', '2004-10-06', '2004-10-07', '2004-10-01', '2016-01-01', '2010-06-14', '2010-06-15',
               '2010-06-16', '2016-02-08', '2016-02-09', '2016-02-10', '2016-02-11', '2016-02-12', '2021-09-20',
               '2021-09-21', '2021-10-01', '2021-10-04', '2021-10-05', '1999-05-03', '2021-10-06', '2021-10-07',
               '1993-10-01', '2005-01-03', '2016-04-04', '2005-02-07', '2005-02-08', '2005-02-09', '2005-02-10',
               '2005-02-11', '2010-09-22', '2010-09-23', '2005-02-14', '2005-02-15', '2010-09-24', '2016-05-01',
               '2016-05-02', '2010-10-01', '2010-10-04', '2010-10-05', '2010-10-06', '2010-10-07', '2022-01-03',
               '2016-06-09', '2016-06-10', '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',
               '1994-02-07', '1994-02-08', '1994-02-09', '1994-02-10', '1994-02-11', '2005-05-02', '2005-05-03',
               '2005-05-04', '2005-05-05', '2005-05-06', '1999-10-01', '1999-10-04', '1999-10-05', '1999-10-06',
               '1999-10-07', '2011-01-03', '2022-04-04', '2022-04-05', '2011-02-02', '2011-02-03', '2011-02-04',
               '2016-09-15', '2011-02-07', '2011-02-08', '2016-09-16', '2022-05-02', '2022-05-03', '2022-05-04',
               '2016-10-03', '2016-10-04', '1994-05-02', '2016-10-05', '2016-10-06', '2016-10-07', '1999-12-20',
               '2022-06-03', '1999-12-31', '2000-01-03', '2011-04-04', '2011-04-05', '2000-01-31', '2000-02-01',
               '2000-02-02', '2000-02-03', '2000-02-04', '2000-02-07', '2000-02-08', '2000-02-09', '2000-02-10',
               '2000-02-11', '2011-05-02', '2005-10-03', '2005-10-04', '2005-10-05', '2005-10-06', '2005-10-07',
               '2017-01-02', '2011-06-06', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02',
               '2022-09-12', '2022-10-03', '2022-10-04', '2000-05-01', '2000-05-02', '2000-05-03', '2000-05-04',
               '2000-05-05', '2022-10-05', '2022-10-06', '2022-10-07', '1994-10-03', '1994-10-04', '2006-01-02',
               '2006-01-03', '2017-04-03', '2017-04-04', '2006-01-26', '2006-01-27', '2006-01-30', '2006-01-31',
               '2006-02-01', '2006-02-02', '2006-02-03', '2011-09-12', '2017-05-01', '2011-10-03', '2011-10-04',
               '2011-10-05', '2011-10-06', '2011-10-07', '2023-01-02', '2017-05-29', '2017-05-30', '1995-01-02',
               '2023-01-23', '2023-01-24', '2023-01-25', '2023-01-26', '2023-01-27', '1995-01-30', '1995-01-31',
               '1995-02-01', '1995-02-02', '1995-02-03', '2006-05-01', '2006-05-02', '2006-05-03', '2006-05-04',
               '2006-05-05', '2000-10-02', '2000-10-03', '2000-10-04', '2000-10-05', '2000-10-06', '2012-01-02',
               '2012-01-03', '2023-04-05', '2012-01-23', '2012-01-24', '2012-01-25', '2012-01-26', '2012-01-27',
               '2023-05-01', '2023-05-02', '2023-05-03', '2024-01-01', '2024-02-09', '2024-02-12', '2024-02-13',
               '2024-02-14', '2024-02-15', '2024-02-16', '2024-04-04', '2024-04-05', '2024-05-01', '2024-05-02',
               '2024-05-03', '2024-06-10', '2024-09-16', '2024-09-17', '2024-10-01', '2024-10-02', '2024-10-03',
               '2024-10-04', '2024-10-07'}
sse_working_weekends = {
    # 1992
    Date.westernStyle(4, Months.October, 1992)
}


class ChinaSseImpl(CalendarImpl):
    def __init__(self):
        pass

    def isBizDay(self, date: Date):
        w = date.weekday()
        if (self.isWeekEnd(w) or str(date) in sse_holDays) and date not in sse_working_weekends:
            return False
        return True

    def isWeekEnd(self, weekDay):
        return weekDay == Weekdays.Saturday or weekDay == Weekdays.Sunday

    def __richcmp__(self, right, op):
        if op == 2:
            return isinstance(right, ChinaSseImpl)


_sseImpl = ChinaSseImpl()

_holDict = {'china.sse': ChinaSseImpl}
