# coding: utf-8

"""
    QAnswer: Api Documentation

    APIs provided by QAnswer

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from qanswer-sdk.models.dataset_detail import DatasetDetail

class TestDatasetDetail(unittest.TestCase):
    """DatasetDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatasetDetail:
        """Test DatasetDetail
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetDetail`
        """
        model = DatasetDetail()
        if include_optional:
            return DatasetDetail(
                id = 56,
                dataset = '',
                username = '',
                name = '',
                description = '',
                access_type_open = 'LoggedIn',
                access_type_shared = 'SharedWrite',
                free_text_details = qanswer-sdk.models.dataset_schema.DatasetSchema(
                    id = 56, 
                    dataset = '', 
                    username = '', 
                    index_hash = '', 
                    do_ocr = True, 
                    language = '', 
                    is_updating = True, 
                    use_reader = True, 
                    use_ranker = True, 
                    use_fallback = True, 
                    top_k_retriever = 56, 
                    top_k_reader = 56, 
                    top_k_ranker = 56, 
                    return_no_ans = True, 
                    no_ans_boost = 1.337, 
                    max_seq_len = 56, 
                    doc_stride = 56, 
                    max_ans_len = 56, 
                    weight_title = 1.337, 
                    weight_text = 1.337, 
                    split_by = '', 
                    split_len = 56, 
                    split_overlap = 56, 
                    llm_choice = '', 
                    bot_name = '', 
                    bot_description = '', 
                    bot_mode = '', 
                    bot_knowledge = '', 
                    bot_answer_length = '', 
                    bot_seed = 56, 
                    bot_temperature = 1.337, 
                    prompt = '', 
                    number_of_references = 56, 
                    stream_speed = 1.337, 
                    initial_message = '', 
                    track_geo = True, 
                    creation_date = '', 
                    use_training = True, 
                    embedding_model = '', 
                    data_storage_preference = 'store_all', 
                    logs_visibility_policy = 'show_all', 
                    dataset_type = 'default', 
                    widget_configs = qanswer-sdk.models.widget_configs.WidgetConfigs(
                        init_msg = '', 
                        theme = '', 
                        open_default = True, 
                        font = '', 
                        color_primary = '', 
                        color_secondary = '', 
                        align = '', 
                        offset_x = 56, 
                        offset_y = 56, 
                        show_powered_by = True, ), 
                    n_tokens = 56, ),
                kg_details = qanswer-sdk.models.dataset_detail_kg.DatasetDetailKg(
                    id = 56, 
                    dataset = '', 
                    name = '', 
                    description = '', 
                    user = qanswer-sdk.models.user.User(
                        id = 56, 
                        username = '', 
                        name = '', ), 
                    uploaded = True, 
                    indexed = True, 
                    access = True, 
                    access_type = 'Owned', 
                    size = 56, 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    index_type = '', 
                    languages = [
                        ''
                        ], 
                    shared_teams = [
                        qanswer-sdk.models.shared_team_access.SharedTeamAccess(
                            id = 56, 
                            team_id = 56, 
                            shared_access_type = 'SharedWrite', 
                            ai_assistant = qanswer-sdk.models.user_dataset.UserDataset(
                                id = 56, 
                                dataset = '', 
                                name = '', 
                                description = '', 
                                uploaded = True, 
                                indexed = True, 
                                access = True, 
                                access_type = 'Owned', 
                                size = 56, 
                                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                index_type = '', 
                                shared_organizations = [
                                    qanswer-sdk.models.shared_organization_access.SharedOrganizationAccess(
                                        id = 56, 
                                        organization_id = 56, 
                                        shared_access_type = 'SharedWrite', )
                                    ], 
                                logo = qanswer-sdk.models.logo.Logo(
                                    id = 56, 
                                    data = 'YQ==', ), ), )
                        ], 
                    shared_organizations = [
                        qanswer-sdk.models.shared_organization_access.SharedOrganizationAccess(
                            id = 56, 
                            organization_id = 56, 
                            shared_access_type = 'SharedWrite', )
                        ], 
                    logo = qanswer-sdk.models.logo.Logo(
                        id = 56, 
                        data = 'YQ==', ), 
                    config = qanswer-sdk.models.dataset_config_request.DatasetConfigRequest(
                        dataset = '', 
                        properties = [
                            ''
                            ], 
                        type = [
                            ''
                            ], 
                        subclass = [
                            ''
                            ], 
                        lucene_only = True, 
                        username = '', 
                        lang = [
                            ''
                            ], 
                        stop_words = {
                            'key' : [
                                ''
                                ]
                            }, 
                        number_triples = 56, 
                        recursive_iteration = 56, 
                        feature_types = [
                            ''
                            ], 
                        visualization_order = [
                            'SIMPLE'
                            ], 
                        type_properties = [
                            ''
                            ], 
                        ui_mappings = qanswer-sdk.models.ui_mappings.UIMappings(
                            username = '', 
                            dataset = '', 
                            main_label = '', 
                            label = [
                                ''
                                ], 
                            description = [
                                ''
                                ], 
                            disambiguation = [
                                ''
                                ], 
                            image = [
                                ''
                                ], 
                            coordinate = [
                                ''
                                ], 
                            latitude = [
                                ''
                                ], 
                            longitude = [
                                ''
                                ], 
                            time = [
                                ''
                                ], 
                            time_series = [
                                ''
                                ], 
                            osm_relation = [
                                ''
                                ], 
                            youtube = [
                                ''
                                ], 
                            github = [
                                ''
                                ], 
                            twitter = [
                                ''
                                ], 
                            facebook = [
                                ''
                                ], 
                            instagram = [
                                ''
                                ], 
                            homepage = [
                                ''
                                ], 
                            orcid = [
                                ''
                                ], 
                            linkedin = [
                                ''
                                ], 
                            doi = [
                                ''
                                ], 
                            geometry = [
                                ''
                                ], 
                            wikipedia = [
                                ''
                                ], 
                            wikidata = [
                                ''
                                ], 
                            dbpedia = [
                                ''
                                ], 
                            optional = [
                                ''
                                ], 
                            ignore = [
                                ''
                                ], ), 
                        property_mappings = {
                            'key' : [
                                qanswer-sdk.models.uri_mapping.UriMapping(
                                    uri = '', 
                                    lexicalization = '', )
                                ]
                            }, 
                        instance_mappings = {
                            'key' : [
                                qanswer-sdk.models.uri_mapping.UriMapping(
                                    uri = '', 
                                    lexicalization = '', )
                                ]
                            }, 
                        properties_properties_expansion = {
                            'key' : ''
                            }, 
                        properties_modifiers_expansion = {
                            'key' : ''
                            }, 
                        ranker_config = qanswer-sdk.models.ranker_config.RankerConfig(
                            getn_trees = 56, 
                            getn_tree_leaves = 56, 
                            min_leaf_support = 56, 
                            learning_rate = 1.337, ), 
                        autocompletion_config = qanswer-sdk.models.autocompletion_config.AutocompletionConfig(
                            question_suggestion = True, 
                            graph_suggestion = True, 
                            data_suggestion = True, 
                            data_suggestion_type = '', ), 
                        index_config = qanswer-sdk.models.index_config.IndexConfig(
                            dataset = '', 
                            lucene_only = True, ), ), ),
                question_quota_available = True
            )
        else:
            return DatasetDetail(
        )
        """

    def testDatasetDetail(self):
        """Test DatasetDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
