# coding: utf-8

"""
    QAnswer: Api Documentation

    APIs provided by QAnswer

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from qanswer-sdk.models.dataset_config_request import DatasetConfigRequest

class TestDatasetConfigRequest(unittest.TestCase):
    """DatasetConfigRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatasetConfigRequest:
        """Test DatasetConfigRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetConfigRequest`
        """
        model = DatasetConfigRequest()
        if include_optional:
            return DatasetConfigRequest(
                dataset = '',
                properties = [
                    ''
                    ],
                type = [
                    ''
                    ],
                subclass = [
                    ''
                    ],
                lucene_only = True,
                username = '',
                lang = [
                    ''
                    ],
                stop_words = {
                    'key' : [
                        ''
                        ]
                    },
                number_triples = 56,
                recursive_iteration = 56,
                feature_types = [
                    ''
                    ],
                visualization_order = [
                    'SIMPLE'
                    ],
                type_properties = [
                    ''
                    ],
                ui_mappings = qanswer-sdk.models.ui_mappings.UIMappings(
                    username = '', 
                    dataset = '', 
                    main_label = '', 
                    label = [
                        ''
                        ], 
                    description = [
                        ''
                        ], 
                    disambiguation = [
                        ''
                        ], 
                    image = [
                        ''
                        ], 
                    coordinate = [
                        ''
                        ], 
                    latitude = [
                        ''
                        ], 
                    longitude = [
                        ''
                        ], 
                    time = [
                        ''
                        ], 
                    time_series = [
                        ''
                        ], 
                    osm_relation = [
                        ''
                        ], 
                    youtube = [
                        ''
                        ], 
                    github = [
                        ''
                        ], 
                    twitter = [
                        ''
                        ], 
                    facebook = [
                        ''
                        ], 
                    instagram = [
                        ''
                        ], 
                    homepage = [
                        ''
                        ], 
                    orcid = [
                        ''
                        ], 
                    linkedin = [
                        ''
                        ], 
                    doi = [
                        ''
                        ], 
                    geometry = [
                        ''
                        ], 
                    wikipedia = [
                        ''
                        ], 
                    wikidata = [
                        ''
                        ], 
                    dbpedia = [
                        ''
                        ], 
                    optional = [
                        ''
                        ], 
                    ignore = [
                        ''
                        ], ),
                property_mappings = {
                    'key' : [
                        qanswer-sdk.models.uri_mapping.UriMapping(
                            uri = '', 
                            lexicalization = '', )
                        ]
                    },
                instance_mappings = {
                    'key' : [
                        qanswer-sdk.models.uri_mapping.UriMapping(
                            uri = '', 
                            lexicalization = '', )
                        ]
                    },
                properties_properties_expansion = {
                    'key' : ''
                    },
                properties_modifiers_expansion = {
                    'key' : ''
                    },
                ranker_config = qanswer-sdk.models.ranker_config.RankerConfig(
                    getn_trees = 56, 
                    getn_tree_leaves = 56, 
                    min_leaf_support = 56, 
                    learning_rate = 1.337, ),
                autocompletion_config = qanswer-sdk.models.autocompletion_config.AutocompletionConfig(
                    question_suggestion = True, 
                    graph_suggestion = True, 
                    data_suggestion = True, 
                    data_suggestion_type = '', ),
                index_config = qanswer-sdk.models.index_config.IndexConfig(
                    dataset = '', 
                    properties = [
                        ''
                        ], 
                    type = [
                        ''
                        ], 
                    subclass = [
                        ''
                        ], 
                    lucene_only = True, )
            )
        else:
            return DatasetConfigRequest(
        )
        """

    def testDatasetConfigRequest(self):
        """Test DatasetConfigRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
