# coding: utf-8

"""
    QAnswer: Api Documentation

    APIs provided by QAnswer

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from qanswer-sdk.api.user_api import UserApi


class TestUserApi(unittest.TestCase):
    """UserApi unit test stubs"""

    def setUp(self) -> None:
        self.api = UserApi()

    def tearDown(self) -> None:
        pass

    def test_change_password(self) -> None:
        """Test case for change_password

        Change the password for a user using the key send by email
        """
        pass

    def test_change_password_when_logged_in(self) -> None:
        """Test case for change_password_when_logged_in

        Change the password for a user that is able to login
        """
        pass

    def test_check_email_availability(self) -> None:
        """Test case for check_email_availability

        Check if e-mail is available
        """
        pass

    def test_check_username_availability(self) -> None:
        """Test case for check_username_availability

        Check if username is available
        """
        pass

    def test_confirm_registration(self) -> None:
        """Test case for confirm_registration

        Confirm key of a user send by e-mail on registration
        """
        pass

    def test_create_api_key(self) -> None:
        """Test case for create_api_key

        Creates a new API key
        """
        pass

    def test_create_oauth_token(self) -> None:
        """Test case for create_oauth_token

        Create a new OAuth2 authorization token
        """
        pass

    def test_delete_api_key(self) -> None:
        """Test case for delete_api_key

        Deletes an API key
        """
        pass

    def test_get_api_keys(self) -> None:
        """Test case for get_api_keys

        Retrieves all API keys
        """
        pass

    def test_get_language(self) -> None:
        """Test case for get_language

        Current language used by the user
        """
        pass

    def test_get_logo(self) -> None:
        """Test case for get_logo

        Get the logo of the user
        """
        pass

    def test_get_oauth_token(self) -> None:
        """Test case for get_oauth_token

        Redirect to the OAuth2 authorization token
        """
        pass

    def test_list_available_o_auth_services(self) -> None:
        """Test case for list_available_o_auth_services

        Get the list of available OAuth2 services
        """
        pass

    def test_me(self) -> None:
        """Test case for me

        Information of a user
        """
        pass

    def test_ping(self) -> None:
        """Test case for ping

        Empty API that can be used to check if the token is still valid
        """
        pass

    def test_refresh_jwt_token(self) -> None:
        """Test case for refresh_jwt_token

        To get a new JWT bearer token as well as a new JWT refresh token. You need to use your existing refresh token
        """
        pass

    def test_remove1(self) -> None:
        """Test case for remove1

        Remove a user
        """
        pass

    def test_resend_mail(self) -> None:
        """Test case for resend_mail

        Resend confirmation mail after signup compleded and if user account was not activated yet.
        """
        pass

    def test_reset_logo(self) -> None:
        """Test case for reset_logo

        Resets the logo of the user.
        """
        pass

    def test_reset_password(self) -> None:
        """Test case for reset_password

        Ask to reset a password for a user
        """
        pass

    def test_set_language(self) -> None:
        """Test case for set_language

        Set language used by the user
        """
        pass

    def test_set_logo(self) -> None:
        """Test case for set_logo

        Set the logo of the user
        """
        pass

    def test_set_name(self) -> None:
        """Test case for set_name

        Set name used by the user
        """
        pass

    def test_signin(self) -> None:
        """Test case for signin

        User login
        """
        pass

    def test_signout(self) -> None:
        """Test case for signout

        User signout
        """
        pass

    def test_signup(self) -> None:
        """Test case for signup

        Create a new user
        """
        pass

    def test_verify_password(self) -> None:
        """Test case for verify_password

        To verify the password security when signing up a new user, changing the password or resetting it.
        """
        pass


if __name__ == '__main__':
    unittest.main()
