# coding: utf-8

"""
    QAnswer: Api Documentation

    APIs provided by QAnswer

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from qanswer-sdk.api.ai_assistant_api import AiAssistantApi


class TestAiAssistantApi(unittest.TestCase):
    """AiAssistantApi unit test stubs"""

    def setUp(self) -> None:
        self.api = AiAssistantApi()

    def tearDown(self) -> None:
        pass

    def test_available_quota_for_dataset(self) -> None:
        """Test case for available_quota_for_dataset

        How much quota is still available for a dataset
        """
        pass

    def test_create_dataset(self) -> None:
        """Test case for create_dataset

        Create a new dataset
        """
        pass

    def test_dataset_users_list(self) -> None:
        """Test case for dataset_users_list

        list all users that have access and accessed to the dataset
        """
        pass

    def test_exists(self) -> None:
        """Test case for exists

        Check if a dataset exists
        """
        pass

    def test_free_text_dataset_update(self) -> None:
        """Test case for free_text_dataset_update

        Changes and existing dataset
        """
        pass

    def test_get_default_ai_assistant_prompts(self) -> None:
        """Test case for get_default_ai_assistant_prompts

        list all the default prompt for all the tasks of the ai assitant
        """
        pass

    def test_get_description(self) -> None:
        """Test case for get_description

        To store the description of a dataset
        """
        pass

    def test_get_detail(self) -> None:
        """Test case for get_detail

        Dataset detail for one specific dataset
        """
        pass

    def test_get_list_all_datasets(self) -> None:
        """Test case for get_list_all_datasets

        Lists all ai assistants accessible by a user
        """
        pass

    def test_get_logo1(self) -> None:
        """Test case for get_logo1

        Get the logo of the ai assistant
        """
        pass

    def test_remove2(self) -> None:
        """Test case for remove2

        To remove a specific dataset
        """
        pass

    def test_reset_logo1(self) -> None:
        """Test case for reset_logo1

        Resets the logo of the ai assistant.
        """
        pass

    def test_set_description(self) -> None:
        """Test case for set_description

        To store the description of a dataset
        """
        pass

    def test_set_logo1(self) -> None:
        """Test case for set_logo1

        Set the logo of the ai assistant
        """
        pass

    def test_size_total(self) -> None:
        """Test case for size_total

        The size of the datasets
        """
        pass


if __name__ == '__main__':
    unittest.main()
