# coding: utf-8

"""
    QAnswer: Api Documentation

    APIs provided by QAnswer

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from qanswer-sdk.models.dataset_detail_kg import DatasetDetailKg

class TestDatasetDetailKg(unittest.TestCase):
    """DatasetDetailKg unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatasetDetailKg:
        """Test DatasetDetailKg
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetDetailKg`
        """
        model = DatasetDetailKg()
        if include_optional:
            return DatasetDetailKg(
                id = 56,
                dataset = '',
                name = '',
                description = '',
                user = qanswer-sdk.models.user.User(
                    id = 56, 
                    username = '', 
                    name = '', ),
                uploaded = True,
                indexed = True,
                access = True,
                access_type = 'Owned',
                size = 56,
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                index_type = '',
                languages = [
                    ''
                    ],
                shared_teams = [
                    qanswer-sdk.models.shared_team_access.SharedTeamAccess(
                        id = 56, 
                        team_id = 56, 
                        shared_access_type = 'SharedWrite', 
                        ai_assistant = qanswer-sdk.models.user_dataset.UserDataset(
                            id = 56, 
                            dataset = '', 
                            name = '', 
                            description = '', 
                            user = qanswer-sdk.models.user.User(
                                id = 56, 
                                username = '', 
                                name = '', ), 
                            uploaded = True, 
                            indexed = True, 
                            access = True, 
                            access_type = 'Owned', 
                            size = 56, 
                            created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            index_type = '', 
                            languages = [
                                ''
                                ], 
                            shared_organizations = [
                                qanswer-sdk.models.shared_organization_access.SharedOrganizationAccess(
                                    id = 56, 
                                    organization_id = 56, 
                                    shared_access_type = 'SharedWrite', )
                                ], 
                            logo = qanswer-sdk.models.logo.Logo(
                                id = 56, 
                                data = 'YQ==', ), ), )
                    ],
                shared_organizations = [
                    qanswer-sdk.models.shared_organization_access.SharedOrganizationAccess(
                        id = 56, 
                        organization_id = 56, 
                        shared_access_type = 'SharedWrite', 
                        ai_assistant = qanswer-sdk.models.user_dataset.UserDataset(
                            id = 56, 
                            dataset = '', 
                            name = '', 
                            description = '', 
                            user = qanswer-sdk.models.user.User(
                                id = 56, 
                                username = '', 
                                name = '', ), 
                            uploaded = True, 
                            indexed = True, 
                            access = True, 
                            access_type = 'Owned', 
                            size = 56, 
                            created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            index_type = '', 
                            languages = [
                                ''
                                ], 
                            logo = qanswer-sdk.models.logo.Logo(
                                id = 56, 
                                data = 'YQ==', ), ), )
                    ],
                logo = qanswer-sdk.models.logo.Logo(
                    id = 56, 
                    data = 'YQ==', ),
                config = qanswer-sdk.models.dataset_config_request.DatasetConfigRequest(
                    dataset = '', 
                    properties = [
                        ''
                        ], 
                    type = [
                        ''
                        ], 
                    subclass = [
                        ''
                        ], 
                    lucene_only = True, 
                    username = '', 
                    lang = [
                        ''
                        ], 
                    stop_words = {
                        'key' : [
                            ''
                            ]
                        }, 
                    number_triples = 56, 
                    recursive_iteration = 56, 
                    feature_types = [
                        ''
                        ], 
                    visualization_order = [
                        'SIMPLE'
                        ], 
                    type_properties = [
                        ''
                        ], 
                    ui_mappings = qanswer-sdk.models.ui_mappings.UIMappings(
                        username = '', 
                        dataset = '', 
                        main_label = '', 
                        label = [
                            ''
                            ], 
                        description = [
                            ''
                            ], 
                        disambiguation = [
                            ''
                            ], 
                        image = [
                            ''
                            ], 
                        coordinate = [
                            ''
                            ], 
                        latitude = [
                            ''
                            ], 
                        longitude = [
                            ''
                            ], 
                        time = [
                            ''
                            ], 
                        time_series = [
                            ''
                            ], 
                        osm_relation = [
                            ''
                            ], 
                        youtube = [
                            ''
                            ], 
                        github = [
                            ''
                            ], 
                        twitter = [
                            ''
                            ], 
                        facebook = [
                            ''
                            ], 
                        instagram = [
                            ''
                            ], 
                        homepage = [
                            ''
                            ], 
                        orcid = [
                            ''
                            ], 
                        linkedin = [
                            ''
                            ], 
                        doi = [
                            ''
                            ], 
                        geometry = [
                            ''
                            ], 
                        wikipedia = [
                            ''
                            ], 
                        wikidata = [
                            ''
                            ], 
                        dbpedia = [
                            ''
                            ], 
                        optional = [
                            ''
                            ], 
                        ignore = [
                            ''
                            ], ), 
                    property_mappings = {
                        'key' : [
                            qanswer-sdk.models.uri_mapping.UriMapping(
                                uri = '', 
                                lexicalization = '', )
                            ]
                        }, 
                    instance_mappings = {
                        'key' : [
                            qanswer-sdk.models.uri_mapping.UriMapping(
                                uri = '', 
                                lexicalization = '', )
                            ]
                        }, 
                    properties_properties_expansion = {
                        'key' : ''
                        }, 
                    properties_modifiers_expansion = {
                        'key' : ''
                        }, 
                    ranker_config = qanswer-sdk.models.ranker_config.RankerConfig(
                        getn_trees = 56, 
                        getn_tree_leaves = 56, 
                        min_leaf_support = 56, 
                        learning_rate = 1.337, ), 
                    autocompletion_config = qanswer-sdk.models.autocompletion_config.AutocompletionConfig(
                        question_suggestion = True, 
                        graph_suggestion = True, 
                        data_suggestion = True, 
                        data_suggestion_type = '', ), 
                    index_config = qanswer-sdk.models.index_config.IndexConfig(
                        dataset = '', 
                        lucene_only = True, ), )
            )
        else:
            return DatasetDetailKg(
        )
        """

    def testDatasetDetailKg(self):
        """Test DatasetDetailKg"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
