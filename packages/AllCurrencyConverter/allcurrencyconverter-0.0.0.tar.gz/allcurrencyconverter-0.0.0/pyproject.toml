[project]
name = "AllCurrencyConverter"
version = "0.0.0"
description = "PyPI package for converting a almost of currencies. Based on ExchangeRate-API (https://www.exchangerate-api.com)"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "uvloop"
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}


[project.optional-dependencies]
lint = [
    "ruff",
    "pyright"
]

test = [
    "pytest",
    "pytest-asyncio",
    "coverage[toml]",
]

profile = [
    "scalene",
]

audit = [
    "pip-audit",
]

dev = [
    "nox",
    "commitizen",
    "hatch"
]

all = [
    "AllCurrencyConverter[lint]",
    "AllCurrencyConverter[test]",
    "AllCurrencyConverter[profile]",
    "AllCurrencyConverter[audit]",
    "AllCurrencyConverter[dev]"
]


[tool.uv]
package = true

[tool.ruff]
line-length = 130
indent-width = 4
target-version = "py313"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "locustfile.py",
    ".nox",
    "tests"
]
src = ["src"]

[tool.ruff.lint]
select = [
    "E",                    # pycodestyle errors
    "F",                    # Pyflakes
    "W",                    # pycodestyle warnings
    "A",                    # flake8-builtins
    "B",                    # flake8-bugbear
    "C",                    # flake8-comprehensions
    "D",                    # pydocstyle
    "N",                    # pep8-naming
    "PL",                   # Pylint
    "UP",                   # pyupgrade
    "RUF",                  # Ruff-specific
]
ignore = [
    "E501",
    "D100",
    "D103",
    "PLR0913",
    "D404",
    "D107",
    "RUF002",
    "D415",
    "D400",
    "F841",
    "D101",
    "RUF003",
    "PLR2004",
    "D212",
    "D205",
    "UP043",
    "UP035",
    "D413",
    "UP007",
    "A002",
    "UP006",
    "D200",
    "D104",
    "D203",
    "D106",
    "RUF001",
    "E731",
    "C901",
    "D102",
    "N805",
    "UP036",
    "D401",
    "E402",
    "B010",
    "RUF022",
    "PLR0915",
    "RUF100",
    "RUF012",
    "UP045",
    "N801",
    "D105",
    "D202",
    "PLW0603",
    "N815",
    "N803",
    "UP017",
    "N807",
    "PLW0120",
    "B007",
    "PLW2901",
    "PLR0912",
    "F403",
    "F405",
    "C410"
]
fixable = ["ALL"]
unfixable = []
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.pyright]
pythonVersion = "3.13"
pythonPlatform = "Linux"
typeCheckingMode = "strict"

reportUntypedBaseClass = false
reportMissingImports = false
reportUntypedFunctionDecorator = false
reportMissingTypeStubs = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportInvalidTypeVarUse = true
reportUnnecessaryTypeIgnore = true
reportUnnecessaryCast = true
reportUnreachable = false
reportAttributeAccessIssue = false
reportUnknownLambdaType = false
reportArgumentType = false
reportUnnecessaryIsInstance = false
reportUntypedClassDecorator = false
reportOptionalMemberAccess = false
reportOptionalSubscript = false
reportRedeclaration = false
reportPrivateUsage = false
reportIncompatibleMethodOverride = false

reportImplicitOptional = true
disableBytesTypePromotions = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true

useLibraryCodeForTypes = true
include = ["src"]
exclude = [
    "build/**",
    "tests/**",
    "dist/**",
    "venv/**",
    ".venv/**",
    ".nox/**",
    "__pycache__/**",
]

executionEnvironments = [{ root = "src" }]

verboseOutput = true
reportGeneralTypeIssues = false
reportInvalidTypeForm = false
ignoreExternalImports = true
reportTypedDictNotRequiredAccess = true
reportPropertyTypeMismatch = true


[[tool.pyright.overrides]]
files = ["tests/**/*.py"]
reportMissingTypeStubs = false
typeCheckingMode = "basic"


[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
]
branch = true

[tool.coverage.report]
exclude_lines = []
skip_empty = true
show_missing = true

[tool.coverage.paths]
source = ["src"]


[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "-v -s"
norecursedirs = [".git", ".venv", "__pycache__", ".idea"]
log_cli = true
log_cli_level = "DEBUG"
asyncio_mode = "auto"


[tool.hypothesis]
deadline = 500
verbosity = "verbose"
max_examples = 100
derandomize = false
phases = ["explicit", "reuse", "generate", "shrink"]


[tool.scalene]
cpu = true
memory = true
gpu = false
profile-all = false

profile-interval = 0.05

cpu-percent-threshold = 2

outfile = "data/dev/scalene.html"
html = true
no-web = true


[tool.commitizen]
name = "cz_conventional_commits"

version = "0.0.0"
version_files = [
    "src/allcurrencyconverter/__init__.py:__version__",
    "pyproject.toml:version"
]

tag_format = "$version"

changelog_file = "CHANGELOG.md"
changelog_incremental = true
update_changelog_on_bump = true
major_version_zero = true

bump_message = "chore(release): bump version $current_version ‚Üí $new_version"

allow_breaking_change = ["refactor"]

change_type_map = {"feat" = "üöÄ Features", "fix" = "üêõ Bug Fixes", "perf" = "‚ö° Performance Improvements", "docs" = "üìù Documentation", "style" = "üíÑ Code Style", "refactor" = "‚ôªÔ∏è Code Refactoring", "test" = "‚úÖ Tests", "build" = "üë∑ Build System", "ci" = "üíö Continuous Integration", "chore" = "üîß Chores", "revert" = "‚è™ Reverts"}
