[project]
name = "mmar-utils"
version = "1.0.0"
description = "Utilities for multi-modal architectures team"
authors = [{name = "Eugene Tagin", email = "tagin@airi.net"}]
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.12"
keywords = []
# dynamic = ["version"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Documentation",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "pydantic~=2.9.2",
    "tqdm~=4.67.0",
    "types-tqdm~=4.67.0",
]

[build-system]
requires = ["uv_build>=0.8.14,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "mmar_utils"
source-exclude = [".ruff_cache"]

# [tool.uv_build.build]
# include = ["mmar_utils/**/*.py"]
# exclude = [
#     "mmar_utils/.ruff_cache",  # Explicitly exclude the ruff cache
#     "mmar_utils/__pycache__/*", # Include __pycache__ if needed (though it's often excluded too)
#     "**/__pycache__",          # Common exclusion for bytecode caches
#     "**/*.pyc",                # Common exclusion for compiled Python files
# ]

[project.urls]
Homepage = "https://.github.io/mmar-utils"
Documentation = "https://.github.io/mmar-utils"
Changelog = "https://.github.io/mmar-utils/changelog"
Repository = "https://github.com//mmar-utils"
Issues = "https://github.com//mmar-utils/issues"
Discussions = "https://github.com//mmar-utils/discussions"
Gitter = "https://gitter.im//mmar-utils"
Funding = "https://github.com/sponsors/evjava"

[project.scripts]
mmar-utils = "mmar_utils.cli:main"

[dependency-groups]
maintain = [
    "build>=1.2",
    "git-changelog>=2.5",
    "twine>=5.1",
    "yore>=0.3.3",
]
ci = [
    "duty>=1.6",
    "ruff>=0.4",
    "pytest>=8.2",
    "pytest-cov>=5.0",
    "pytest-randomly>=3.15",
    "pytest-asyncio>=1.0.0",
    "mypy>=1.10",
    "types-markdown>=3.6",
    "types-pyyaml>=6.0",
]
docs = [
    "markdown-callouts>=0.4",
    "markdown-exec>=1.8",
    "mkdocs>=1.6",
    "mkdocs-coverage>=1.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2",
    "mkdocs-llmstxt>=0.2",
    "mkdocs-material>=9.5",
    "mkdocs-minify-plugin>=0.8",
    "mkdocs-section-index>=0.3",
    "mkdocstrings[python]>=0.29",
]

[tool.uv]
default-groups = ["maintain", "ci", "docs"]

[tool.ruff]
line-length = 120

[tool.pytest.ini_options]
asyncio_mode = "auto"

[pytest]
python_files = [ "test_*.py" ]
addopts = [
  "--cov",
  "--cov-config config/coverage.ini",
]
testpaths = [ "tests" ]

# action:message_regex:warning_class:module_regex:line
filterwarnings = [ "error" ]

[mypy]
ignore_missing_imports = true
exclude = "tests/fixtures/"
warn_unused_ignores = true
show_error_codes = true
