from mignonFramework.utils.reader.XlsxReader import XlsxReader
from mignonFramework import *
from datetime import datetime

from mignonFramework.utils.reader.XlsxReader import XlsxReader
from mignonFramework import *

include_keys = [
    "cpc",
    "docdb_family_id",
    "number_of_docdb_family",
    "docdb_family",
    "dwpi_patentee_applicant",
    "dwpi_priority_number",
    "dwpi_priority_country",
    "dwpi_priority_country_earliest",
    "dwpi_advantage",
    "dwpi_classification",
    "dwpi_inventor",
    "dwpi_family_id",
    "dwpi_family_patent",
    "dwpi_family_country_region",
    "dwpi_manual_code",
    "dwpi_technical_points",
    "dwpi_novelty",
    "dwpi_title",
    "dwpi_biological_mechanism",
    "dwpi_bioactivity",
    "dwpi_use",
    "dwpi_detailed_description",
    "ec",
    "ep_designated_state",
    "f_term",
    "fi",
    "ipc",
    "main_ipc",
    "pct_international_publication_number",
    "pct_international_application_number",
    "pct_national_phase_entry_date",
    "pdf_link",
    "uc",
    "dual_application",
    "patent_life_months",
    "patent_validity",
    "patent_type",
    "chinese_applicant_district_county",
    "chinese_applicant_city",
    "number_of_dependent_claims",
    "other_citation_information",
    "number_of_other_citations",
    "agent",
    "agency",
    "priority_information",
    "priority_number",
    "priority_country",
    "priority_date",
    "protection_scope",
    "company_standard",
    "publication_country",
    "publication_type",
    "publication_announcement_number",
    "publication_announcement_date",
    "pledgor",
    "divisional_application",
    "plaintiff",
    "inventor_designer_other",
    "inventor_designer_address_other",
    "inventor",
    "inventor_country_region",
    "inventor_address_original",
    "number_of_inventors",
    "assignee",
    "assignee_address",
    "assignee_type",
    "hearing_date",
    "hexun_value",
    "family_country_region",
    "national_economic_classification",
    "main_national_economic_sector",
    "reexamination_decision_date",
    "reexamination_invalidation_decision",
    "reexamination_invalidation_decision_date",
    "legal_basis_for_reexamination_invalidation",
    "reexamination_requester",
    "reexamination_request_date",
    "expiration_date",
    "subject_classification",
    "substantive_examination_effective_date",
    "examiner",
    "examination_duration",
    "family_citation",
    "number_of_family_citations",
    "family_citing_applicant",
    "family_cited",
    "number_of_times_family_cited",
    "family_cited_applicant",
    "stock_code",
    "business_status",
    "business_company_type",
    "business_alias",
    "business_establishment_date",
    "business_registration_number",
    "business_registered_address",
    "unified_social_credit_code",
    "business_english_name",
    "cited_patent",
    "number_of_citations",
    "citing_applicant",
    "cited_scientific_literature",
    "current_patentee_address",
    "current_inventor_name",
    "current_right_holder",
    "current_right_holder_type",
    "current_legal_status",
    "current_licensee",
    "current_pledgee",
    "extended_family",
    "extended_family_id",
    "number_of_extended_family",
    "technical_advancement",
    "technical_effect",
    "technical_effect_level_1",
    "technical_effect_level_2",
    "technical_effect_level_3",
    "technical_effect_triz_parameter",
    "technical_effect_sentence",
    "technical_effect_phrase",
    "technical_stability",
    "grant_publication_number",
    "grant_publication_date",
    "abstract_chinese",
    "abstract_english",
    "abstract_original_language",
    "core_digital_economy_industry",
    "document_type_code",
    "number_of_pages",
    "main_emerging_industry",
    "emerging_industry_classification",
    "invalidation_decision_date",
    "invalidation_requester",
    "earliest_priority_date",
    "number_of_claims",
    "standardized_current_right_holder",
    "standardized_applicant",
    "standard_assignee",
    "standard_number",
    "standard_type",
    "standard_item",
    "title_chinese",
    "title_english",
    "title_original_language",
    "parent_case",
    "court",
    "legal_event",
    "legal_document_date",
    "legal_document_number",
    "legal_status",
    "locarno_classification",
    "customs_record",
    "clean_production_industry",
    "clean_energy_industry",
    "independent_claims",
    "number_of_independent_claims",
    "use",
    "applicant",
    "applicant_other",
    "applicant_translated",
    "applicant_country_region",
    "applicant_address",
    "applicant_address_other",
    "number_of_applicants",
    "applicant_province_city_code",
    "applicant_type",
    "ultimate_parent_company_chinese",
    "ultimate_parent_company_english",
    "application_number",
    "application_date",
    "knowledge_intensive_classification",
    "first_inventor",
    "first_applicant",
    "simple_family",
    "simple_family_id",
    "number_of_simple_family",
    "self_citation_information",
    "number_of_self_citations",
    "cited_by_other_information",
    "number_of_times_cited_by_others",
    "defendant",
    "citing_patent",
    "cited_country_forward",
    "number_of_times_cited",
    "cited_applicant",
    "cited_by_self_information",
    "number_of_times_cited_by_self",
    "licensee",
    "licensee_type",
    "licensor",
    "licensor_type",
    "license_contract_record_number",
    "license_contract_filing_date",
    "number_of_licenses",
    "license_type",
    "number_of_lawsuits",
    "lawsuit_type",
    "pledge_number",
    "number_of_pledges",
    "pledgee",
    "assignor",
    "assignor_address",
    "assignor_type",
    "assignment_execution_date",
    "number_of_assignments",
    "time_to_substantive_examination",
    "link_to_incopat",
    "estimated_expiration_date",
    "word_count_of_first_claim",
    "first_claim_translation",
    "first_publication_number",
    "first_publication_date",
    "first_claim"
]

# --- modifier_function ---
from mignonFramework import Rename


def modifier(data: dict) -> dict:
    """
    将指定的中文键名通过 Rename 类映射为英文蛇形命名 (snake_case)，
    并处理不同类型字段，将空字符串转换为 None。
    """
    def handle_date(value):
        return None if value == "" else value

    def handle_int(value):
        try:
            return int(value) if value != "" else None
        except (ValueError, TypeError):
            return None

    def handle_float(value):
        try:
            return float(value) if value != "" else None
        except (ValueError, TypeError):
            return None

    return {
        "cpc": Rename('cpc'),
        "DocDB同族ID": Rename('docdb_family_id'),
        "DocDB同族个数": (Rename('number_of_docdb_family'), handle_int(data.get("DocDB同族个数"))),
        "DocDB同族": Rename('docdb_family'),
        "DWPI专利权人/申请人": Rename('dwpi_patentee_applicant'),
        "DWPI优先权号": Rename('dwpi_priority_number'),
        "DWPI优先权国别": Rename('dwpi_priority_country'),
        "DWPI优先权国别-最早": Rename('dwpi_priority_country_earliest'),
        "DWPI优势": Rename('dwpi_advantage'),
        "DWPI分类号": Rename('dwpi_classification'),
        "DWPI发明人": Rename('dwpi_inventor'),
        "DWPI同族ID": Rename('dwpi_family_id'),
        "DWPI同族专利": Rename('dwpi_family_patent'),
        "DWPI同族国家/地区": Rename('dwpi_family_country_region'),
        "DWPI手工代码": Rename('dwpi_manual_code'),
        "DWPI技术要点": Rename('dwpi_technical_points'),
        "DWPI新颖性": Rename('dwpi_novelty'),
        "DWPI标题": Rename('dwpi_title'),
        "DWPI生物学机制": Rename('dwpi_biological_mechanism'),
        "DWPI生物活性": Rename('dwpi_bioactivity'),
        "DWPI用途": Rename('dwpi_use'),
        "DWPI详细描述": Rename('dwpi_detailed_description'),
        "ec": Rename('ec'),
        "EP指定生效国": Rename('ep_designated_state'),
        "F-term": Rename('f_term'),
        "FI": Rename('fi'),
        "IPC": Rename('ipc'),
        "IPC主分类": Rename('main_ipc'),
        "PCT国际公布号": Rename('pct_international_publication_number'),
        "PCT国际申请号": Rename('pct_international_application_number'),
        "PCT进入国家阶段日": (Rename('pct_national_phase_entry_date'), handle_date(data.get("PCT进入国家阶段日"))),
        "PDF链接": Rename('pdf_link'),
        "UC": Rename('uc'),
        "一案双申": Rename('dual_application'),
        "专利寿命（月）": (Rename('patent_life_months'), handle_int(data.get("专利寿命（月）"))),
        "专利有效性": Rename('patent_validity'),
        "专利类型": Rename('patent_type'),
        "中国申请人区县": Rename('chinese_applicant_district_county'),
        "中国申请人地市": Rename('chinese_applicant_city'),
        "从属权利要求数量": (Rename('number_of_dependent_claims'), handle_int(data.get("从属权利要求数量"))),
        "他引信息": Rename('other_citation_information'),
        "他引次数": (Rename('number_of_other_citations'), handle_int(data.get("他引次数"))),
        "代理人": Rename('agent'),
        "代理机构": Rename('agency'),
        "优先权信息": Rename('priority_information'),
        "优先权号": Rename('priority_number'),
        "优先权国别": Rename('priority_country'),
        "优先权日": (Rename('priority_date'), handle_date(data.get("优先权日"))),
        "保护范围": Rename('protection_scope'),
        "公司(标准)": Rename('company_standard'),
        "公开国别": Rename('publication_country'),
        "公开类型": Rename('publication_type'),
        "公开（公告）号": Rename('publication_announcement_number'),
        "公开（公告）日": (Rename('publication_announcement_date'), handle_date(data.get("公开（公告）日"))),
        "出质人": Rename('pledgor'),
        "分案": Rename('divisional_application'),
        "原告": Rename('plaintiff'),
        "发明(设计)人(其他)": Rename('inventor_designer_other'),
        "发明(设计)人地址（其他）": Rename('inventor_designer_address_other'),
        "发明人": Rename('inventor'),
        "发明人国家/地区": Rename('inventor_country_region'),
        "发明人地址（原始）": Rename('inventor_address_original'),
        "发明人数量": (Rename('number_of_inventors'), handle_int(data.get("发明人数量"))),
        "受让人": Rename('assignee'),
        "受让人地址": Rename('assignee_address'),
        "受让人类型": Rename('assignee_type'),
        "口审日期": (Rename('hearing_date'), handle_date(data.get("口审日期"))),
        "合享价值度": Rename('hexun_value'),
        "同族国家/地区": Rename('family_country_region'),
        "国民经济分类": Rename('national_economic_classification'),
        "国民经济行业(主)": Rename('main_national_economic_sector'),
        "复审决定日": (Rename('reexamination_decision_date'), handle_date(data.get("复审决定日"))),
        "复审无效决定": Rename('reexamination_invalidation_decision'),
        "复审无效决定日": (Rename('reexamination_invalidation_decision_date'), handle_date(data.get("复审无效决定日"))),
        "复审无效法律依据": Rename('legal_basis_for_reexamination_invalidation'),
        "复审请求人": Rename('reexamination_requester'),
        "复审请求日": (Rename('reexamination_request_date'), handle_date(data.get("复审请求日"))),
        "失效日": (Rename('expiration_date'), handle_date(data.get("失效日"))),
        "学科分类": Rename('subject_classification'),
        "实质审查生效日": (Rename('substantive_examination_effective_date'), handle_date(data.get("实质审查生效日"))),
        "审查员": Rename('examiner'),
        "审查时长": Rename('examination_duration'),
        "家族引证": Rename('family_citation'),
        "家族引证次数": (Rename('number_of_family_citations'), handle_int(data.get("家族引证次数"))),
        "家族被引证": Rename('family_cited'),
        "家族被引证次数": (Rename('number_of_times_family_cited'), handle_int(data.get("家族被引证次数"))),
        "家族被引证申请人": Rename('family_cited_applicant'),
        "工商上市代码": Rename('stock_code'),
        "工商企业状态": Rename('business_status'),
        "工商公司类型": Rename('business_company_type'),
        "工商别名": Rename('business_alias'),
        "工商成立日期": (Rename('business_establishment_date'), handle_date(data.get("工商成立日期"))),
        "工商注册号": Rename('business_registration_number'),
        "工商注册地址": Rename('business_registered_address'),
        "工商统一社会信用代码": Rename('unified_social_credit_code'),
        "工商英文名": Rename('business_english_name'),
        "引证专利": Rename('cited_patent'),
        "引证次数": (Rename('number_of_citations'), handle_int(data.get("引证次数"))),
        "引证申请人": Rename('citing_applicant'),
        "引证科技文献": Rename('cited_scientific_literature'),
        "当前专利权人地址": Rename('current_patentee_address'),
        "当前发明人名称": Rename('current_inventor_name'),
        "当前权利人": Rename('current_right_holder'),
        "当前权利人类型": Rename('current_right_holder_type'),
        "当前法律状态": Rename('current_legal_status'),
        "当前被许可人": Rename('current_licensee'),
        "当前质权人": Rename('current_pledgee'),
        "扩展同族": Rename('extended_family'),
        "扩展同族ID": Rename('extended_family_id'),
        "扩展同族个数": (Rename('number_of_extended_family'), handle_int(data.get("扩展同族个数"))),
        "技术先进性": Rename('technical_advancement'),
        "技术功效": Rename('technical_effect'),
        "技术功效1级": Rename('technical_effect_level_1'),
        "技术功效2级": Rename('technical_effect_level_2'),
        "技术功效3级": Rename('technical_effect_level_3'),
        "技术功效TRIZ参数": Rename('technical_effect_triz_parameter'),
        "技术功效句": Rename('technical_effect_sentence'),
        "技术功效短语": Rename('technical_effect_phrase'),
        "技术稳定性": Rename('technical_stability'),
        "授权公告号": Rename('grant_publication_number'),
        "授权公告日": (Rename('grant_publication_date'), handle_date(data.get("授权公告日"))),
        "摘要 (中文)": Rename('abstract_chinese'),
        "摘要 (英文)": Rename('abstract_english'),
        "摘要（小语种原文）": Rename('abstract_original_language'),
        "数字经济核心产业": Rename('core_digital_economy_industry'),
        "文献种类代码": Rename('document_type_code'),
        "文献页数": (Rename('number_of_pages'), handle_int(data.get("文献页数"))),
        "新兴产业(主)": Rename('main_emerging_industry'),
        "新兴产业分类": Rename('emerging_industry_classification'),
        "无效决定日": (Rename('invalidation_decision_date'), handle_date(data.get("无效决定日"))),
        "无效请求人": Rename('invalidation_requester'),
        "最早优先权日": (Rename('earliest_priority_date'), handle_date(data.get("最早优先权日"))),
        "权利要求数量": (Rename('number_of_claims'), handle_int(data.get("权利要求数量"))),
        "标准化当前权利人": Rename('standardized_current_right_holder'),
        "标准化申请人": Rename('standardized_applicant'),
        "标准受让人": Rename('standard_assignee'),
        "标准号": Rename('standard_number'),
        "标准类型": Rename('standard_type'),
        "标准项目": Rename('standard_item'),
        "标题 (中文)": Rename('title_chinese'),
        "标题 (英文)": Rename('title_english'),
        "标题（小语种原文）": Rename('title_original_language'),
        "母案": Rename('parent_case'),
        "法庭": Rename('court'),
        "法律事件": Rename('legal_event'),
        "法律文书日期": (Rename('legal_document_date'), handle_date(data.get("法律文书日期"))),
        "法律文书编号": Rename('legal_document_number'),
        "法律状态": Rename('legal_status'),
        "洛迦诺分类号": Rename('locarno_classification'),
        "海关备案": Rename('customs_record'),
        "清洁生产产业": Rename('clean_production_industry'),
        "清洁能源产业": Rename('clean_energy_industry'),
        "独立权利要求": Rename('independent_claims'),
        "独立权利要求数量": (Rename('number_of_independent_claims'), handle_int(data.get("独立权利要求数量"))),
        "用途": Rename('use'),
        "申请人": Rename('applicant'),
        "申请人(其他)": Rename('applicant_other'),
        "申请人(翻译)": Rename('applicant_translated'),
        "申请人国家/地区": Rename('applicant_country_region'),
        "申请人地址": Rename('applicant_address'),
        "申请人地址(其他)": Rename('applicant_address_other'),
        "申请人数量": (Rename('number_of_applicants'), handle_int(data.get("申请人数量"))),
        "申请人省市代码": Rename('applicant_province_city_code'),
        "申请人类型": Rename('applicant_type'),
        "申请人终属母公司(中文)": Rename('ultimate_parent_company_chinese'),
        "申请人终属母公司(英文)": Rename('ultimate_parent_company_english'),
        "申请号": Rename('application_number'),
        "申请日": (Rename('application_date'), handle_date(data.get("申请日"))),
        "知识密集型分类": Rename('knowledge_intensive_classification'),
        "第一发明人": Rename('first_inventor'),
        "第一申请人": Rename('first_applicant'),
        "简单同族": Rename('simple_family'),
        "简单同族ID": Rename('simple_family_id'),
        "简单同族个数": (Rename('number_of_simple_family'), handle_int(data.get("简单同族个数"))),
        "自引信息": Rename('self_citation_information'),
        "自引次数": (Rename('number_of_self_citations'), handle_int(data.get("自引次数"))),
        "被他引信息": Rename('cited_by_other_information'),
        "被他引次数": (Rename('number_of_times_cited_by_others'), handle_int(data.get("被他引次数"))),
        "被告": Rename('defendant'),
        "被引证专利": Rename('citing_patent'),
        "被引证国别(forward)": Rename('cited_country_forward'),
        "被引证次数": (Rename('number_of_times_cited'), handle_int(data.get("被引证次数"))),
        "被引证申请人": Rename('cited_applicant'),
        "被自引信息": Rename('cited_by_self_information'),
        "被自引次数": (Rename('number_of_times_cited_by_self'), handle_int(data.get("被自引次数"))),
        "被许可人": Rename('licensee'),
        "被许可人类型": Rename('licensee_type'),
        "许可人": Rename('licensor'),
        "许可人类型": Rename('licensor_type'),
        "许可合同备案号": Rename('license_contract_record_number'),
        "许可合同备案日期": (Rename('license_contract_filing_date'), handle_date(data.get("许可合同备案日期"))),
        "许可次数": (Rename('number_of_licenses'), handle_int(data.get("许可次数"))),
        "许可类型": Rename('license_type'),
        "诉讼次数": (Rename('number_of_lawsuits'), handle_int(data.get("诉讼次数"))),
        "诉讼类型": Rename('lawsuit_type'),
        "质押号": Rename('pledge_number'),
        "质押次数": (Rename('number_of_pledges'), handle_int(data.get("质押次数"))),
        "质权人": Rename('pledgee'),
        "转让人": Rename('assignor'),
        "转让人地址": Rename('assignor_address'),
        "转让人类型": Rename('assignor_type'),
        "转让执行日": (Rename('assignment_execution_date'), handle_date(data.get("转让执行日"))),
        "转让次数": (Rename('number_of_assignments'), handle_int(data.get("转让次数"))),
        "进入实质审查时长": Rename('time_to_substantive_examination'),
        "链接到incoPat": Rename('link_to_incopat'),
        "预估到期日": (Rename('estimated_expiration_date'), handle_date(data.get("预估到期日"))),
        "首权字数": (Rename('word_count_of_first_claim'), handle_int(data.get("首权字数"))),
        "首权翻译": Rename('first_claim_translation'),
        "首次公开号": Rename('first_publication_number'),
        "首次公开日": (Rename('first_publication_date'), handle_date(data.get("首次公开日"))),
        "首项权利要求": Rename('first_claim')
    }




xlsxReader: XlsxReader = XlsxReader(
    "D:/incopat/incopatZIP/2025-07-01_1354528522548（1-1000）/2025-07-01_1354528522548.xlsx")
InsertQuick("D:/incopat/incopatZIP/2025-07-01_1354528522548（1-1000）/2025-07-01_1354528522548.xlsx",
            include_keys=include_keys, modifier_function=modifier,
            reader=xlsxReader, auto_skip_error=True).run()
