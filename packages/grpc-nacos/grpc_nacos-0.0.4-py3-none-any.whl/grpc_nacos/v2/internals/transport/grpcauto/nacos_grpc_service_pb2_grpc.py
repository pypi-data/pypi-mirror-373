# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from .nacos_grpc_service_pb2 import Payload

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in nacos_grpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RequestStreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.requestStream = channel.unary_stream(
            '/RequestStream/requestStream',
            request_serializer=Payload.SerializeToString,
            response_deserializer=Payload.FromString,
            _registered_method=True)


class RequestStreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def requestStream(self, request, context):
        """build a streamRequest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RequestStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'requestStream': grpc.unary_stream_rpc_method_handler(
            servicer.requestStream,
            request_deserializer=Payload.FromString,
            response_serializer=Payload.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'RequestStream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RequestStream', rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class RequestStream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def requestStream(request,
                      target,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      insecure=False,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/RequestStream/requestStream',
            Payload.SerializeToString,
            Payload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RequestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.request = channel.unary_unary(
            '/Request/request',
            request_serializer=Payload.SerializeToString,
            response_deserializer=Payload.FromString,
            _registered_method=True)


class RequestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def request(self, request, context):
        """Sends a commonRequest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RequestServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'request': grpc.unary_unary_rpc_method_handler(
            servicer.request,
            request_deserializer=Payload.FromString,
            response_serializer=Payload.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Request', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Request', rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Request(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def request(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Request/request',
            Payload.SerializeToString,
            Payload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BiRequestStreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.requestBiStream = channel.stream_stream(
            '/BiRequestStream/requestBiStream',
            request_serializer=Payload.SerializeToString,
            response_deserializer=Payload.FromString,
            _registered_method=True)


class BiRequestStreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def requestBiStream(self, request_iterator, context):
        """Sends a commonRequest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BiRequestStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'requestBiStream': grpc.stream_stream_rpc_method_handler(
            servicer.requestBiStream,
            request_deserializer=Payload.FromString,
            response_serializer=Payload.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'BiRequestStream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('BiRequestStream', rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class BiRequestStream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def requestBiStream(request_iterator,
                        target,
                        options=(),
                        channel_credentials=None,
                        call_credentials=None,
                        insecure=False,
                        compression=None,
                        wait_for_ready=None,
                        timeout=None,
                        metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/BiRequestStream/requestBiStream',
            Payload.SerializeToString,
            Payload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
