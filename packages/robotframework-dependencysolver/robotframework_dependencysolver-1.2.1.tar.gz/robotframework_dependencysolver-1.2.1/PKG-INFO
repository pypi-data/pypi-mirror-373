Metadata-Version: 2.4
Name: robotframework-dependencysolver
Version: 1.2.1
Summary: A Robot Framework prerunmodifier for interdependent test cases execution.
Author-email: Joonas Kuisma <kuisma.joonas@gmail.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/joonaskuisma/robotframework-dependencysolver
Project-URL: Issues, https://github.com/joonaskuisma/robotframework-dependencysolver/issues
Project-URL: Download, https://pypi.org/project/robotframework-dependencysolver/
Keywords: robotframework,dependencysolver,dependencylibrary,prerunmodifier, testautomation
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Testing
Classifier: Framework :: Robot Framework :: Library
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: robotframework>=5.0
Requires-Dist: robotframework-dependencylibrary>=4.0
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: robotframework-pabot>=4.1; extra == "dev"
Provides-Extra: pabot
Requires-Dist: robotframework-pabot>=4.1; extra == "pabot"
Dynamic: license-file

# robotframework-dependencysolver

[![PyPI - Version](https://img.shields.io/pypi/v/robotframework-dependencysolver)](https://pypi.org/project/robotframework-dependencysolver/)
[![PyPI Downloads](https://static.pepy.tech/badge/robotframework-dependencysolver)](https://pepy.tech/projects/robotframework-dependencysolver)

## Table of Contents

- [Introduction](#introduction)
- [Versioning](#versioning)
- [Dependencies](#dependencies)
- [Installation](#installation)
- [How define dependencies with DependencyLibrary](#how-define-dependencies-with-dependencylibrary)
- [Using DependencySolver](#using-dependencysolver)
- [Using with Pabot](#using-with-pabot)
- [Contributing](#contributing)

## Introduction

A [Robot Framework](https://robotframework.org/) prerunmodifier for interdependent test cases execution.

Ideally tests are independent, but when tests depend on earlier tests,
[DependencyLibrary](https://github.com/mentalisttraceur/robotframework-dependencylibrary) makes it easy to explicitly declare these dependencies
and have tests that depend on each other do the right thing.

The **DependencyLibrary** provides two Robot Framework keywords: `Depends On Test`
and `Depends On Suite` for defining dependencies between tests and suites. 

This **DependencySolver** is a pre-run modifier for Robot Framework, designed to 
execute dependent test chains. For instance, if Test C depends on Test B, 
and Test B in turn depends on Test A, then all three tests must be run to 
ensure Test C can execute successfully. However, if you run Robot Framework with
the command `robot -t 'test C' <path_to_your_test_folder>`, Test C will fail 
because this command does not select Tests B and A.

For more details on using the **DependencySolver**, please refer to the section 
[Using DependencySolver](#using-dependencysolver).

If you want to run tests parallel with [Pabot](https://pabot.org/), please 
refer to section [Using With Pabot](#using-with-pabot).

## Versioning

This library\'s version numbers follow the [SemVer 2.0.0
specification](https://semver.org/spec/v2.0.0.html).

## Dependencies

To function correctly, **DependencySolver** requires the following versions:

- **Python** >= 3.10  
- **Robot Framework** >= 5.0  
- **robotframework-dependencylibrary** >= 4.0  

Additionally, for parallel test execution, you can optionally use:  

- **robotframework-pabot** >= 4.1  

## Installation

If you already have [Python](https://www.python.org/) with [pip](https://pip.pypa.io/en/stable/) installed, you can simply run:

```cmd
pip install robotframework-dependencysolver
```

This will install the latest version of **robotframework-dependencysolver**, along with latest (or sufficiently recent if already installed) versions of **robotframework** and **robotframework-dependencylibrary**.

Additionally, if you are using the **pabot** library, you can ensure that you have a sufficiently recent version of **robotframework-pabot** by running:

```cmd
pip install robotframework-dependencysolver[pabot]
```

After desired installation command, you can verify a successful installation with the following command:

```cmd
depsol --version
```

## How define dependencies with DependencyLibrary

First, include the [DependencyLibrary](https://github.com/mentalisttraceur/robotframework-dependencylibrary) in your tests:

``` robotframework
*** Settings ***
Library    DependencyLibrary
```

Typical usage:

``` robotframework
*** Test cases ***
Passing Test
    No operation

A Test that Depends on "Passing Test"
    Depends On Test    Passing Test
    Log    The rest of the keywords in this test will run as normal.
```
> [!NOTE]
> `DependencySolver` recognizes only `Depends On` keywords defined in `[Setup]`
sections, even though these keywords can technically be used in other parts of 
the test. Therefore, it is recommended to specify all dependencies under the 
`[Setup]` section, using the built-in keyword `Run Keywords` if needed. 
Dependencies, after all, are prerequisites for running a test.

When you need to declare multiple dependencies, just repeat the keyword:

``` robotframework
*** Test cases ***
Another Passing Test
    No operation

A Test that Depends on Both "Passing Test" and "Another Passing Test"
    [Setup]    Run Keywords    Depends On Test    Passing Test
    ...    AND    Depends On Test    Another Passing Test
    Log    The rest of the keywords in this test will run as normal.
```

You can also depend on the statuses of entire test suites:

``` robotframework
*** Test cases ***
A Test that Depends on an Entire Test Suite Passing
    [Setup]    Depends On Suite    Some Test Suite Name
    Log    The rest of the keywords will run if that whole suite passed.
```

Note that to depend on a suite or a test from another suite, you must
either run Robot Framework with `--listener DependencyLibrary`, or that
suite must also include `DependencyLibrary` in its `*** Settings ***`. 
Additionally, you can define `DependencyLibrary` in a common 
`some_name.resource` file that is accessible across all suites.

### Skipped Dependencies

If a dependency was skipped, the depending test is also skipped:

``` robotframework
*** Test cases ***
Skipped Test
    Skip    This test is skipped for some reason.

A Test that Depends on "Skipped Test"
    [Setup]    Depends On Test    Skipped Test
    Log    The rest of the keywords (including this log) will NOT run!
```

The skip message follows this format:

    Dependency not met: test case 'Skipped Test' was skipped.

### Failing Dependencies

If a dependency failed, the depending test is skipped instead of
redundantly failing as well:

``` robotframework
*** Test cases ***
Failing Test
    Fail    This test failed for some reason.

A Test that Depends on "Failing Test"
    [Setup]    Depends On Test    Failing Test
    Log    The rest of the keywords (including this log) will NOT run!
```

The skip message follows this format:

    Dependency not met: test case 'Failing Test' failed.

### Mistake Warnings

If you depend on a test or suite that does not exist or has not run yet,

``` robotframework
*** Test cases ***
A Test that Depends on "Missing Test"
    Depends On Test    Missing Test
```

the test will warn and the warning message follows this format:

    Dependency not met: test case 'Missing Test' not found.

If you make a test depend on itself or on the suite that contains it,

``` robotframework
*** Test cases ***
Depends on Self
    Depends On Test    Depends on Self
```

the test will warn and the warning message follows this format:

    Dependency not met: test case 'Depends on Self' mid-execution.

## Using DependencySolver

After you have defined the dependencies of each test in the `[Setup]` section by
using `Depends On Test` or `Depends On Suite` keywords, then pre-run modifier 
`DependencySolver` checks all `[Setup]` sections and solve dependencies before 
running tests. You could use `Depends On Test` or `Depends On Suite` keywords 
multiple times and/or together with other setup keywords by using build-in 
`Run Keywords` at first.

Write test setup as follows:

```RobotFramework
*** Settings ***
Library    DependencyLibrary


*** Test cases ***
Test A
    [Setup]    Do Test Setup...
    [Tags]    tagA
    Do Something...

Test B
    [Setup]    Run Keywords    Depends On Test    name=Test A
    ...    AND    Do Test Setup...
    [Tags]    tagB
    Do Something...

Test C
    [Setup]    Run Keywords    Depends On Test    name=Test B
    ...    AND    Do Test Setup...
    [Tags]    tagC
    Do Something...

```

> [!IMPORTANT]
> `DependencySolver` does not impact the execution order of tests but simply includes the necessary tests and excludes the unnecessary ones. Dependencies can form any tree structure; however, cyclic dependencies (e.g., A -> B and B -> A) will result in an error.

When you have written test dependencies in `[Setup]` sections like above, then 
by using `DependencySolver` as `prerunmodifier` you could run whole dependency 
chain C -> B -> A by command:

```cmd
robot --prerunmodifier DependencySolver.depsol:-t:"Test C" <other_robot_commands> <your_test_folder>
```

Additionally, you could use tags also (but only static, not dynamic tags):
```cmd
robot --prerunmodifier DependencySolver.depsol:-i:tagC <other_robot_commands> <your_test_folder>
```

You can also use shortcut `depsol` directly. This internally calls `robot` 
with `--prerunmodifier` option. When using this shortcut, all options 
recognized by `depsol` are passed to `--prerunmodifier` instead of `robot`.

```cmd
depsol -t "test C" <other_robot_commands> <your_test_folder>
```
Or
```cmd
depsol -i "tagC" <other_robot_commands> <your_test_folder>
```
These commands will have the same effect as the two commands mentioned above.

**Note:** If you call `robot` directly, `<other_robot_commands>` should not 
include the options `--test`, `--suite`, `--include` or `--exclude`, as they 
will be executed before `--prerunmodifier`. This will cause **depsol** to 
function incorrectly. Instead, pass these options to `--prerunmodifier`, 
using `:` as a separator instead of a space. If the test name contains spaces, 
enclose it in `""`.

For example:
```cmd
robot --prerunmodifier DependencySolver.depsol:-i:tagC:-t:"Test B" <your_test_folder>
```

You can launch the simple GUI of the Dependency Solver using the --ui parameter. 
This interface allows you to select tests for execution through a tree view and visualizes dependencies between tests using arrows.

**Note:** The UI is currently in Beta, so feedback and bug reports are very welcome. Its documentation will also improve over time.

For more options and help, please run

```cmd
depsol --help
```

`DependencySolver` generates the following two files in the current directory:

- **depsol.log**: An internal log showing the process of traversing and selecting dependencies.
- **depsol.pabot.txt**: A file for use with [Pabot](https://pabot.org/), detailing how the selected tests can be run in parallel while respecting dependencies.

## Using with Pabot

Please, read [Using DependencySolver](#using-dependencysolver) at first.

If you want to run tests with Pabot, you need at least version 4.1.0 of the 
[robotframework-pabot](https://pypi.org/project/robotframework-pabot/) library.
This version introduces the --pabotprerunmodifier feature, which functions 
similarly to prerunmodifier, but it is not passed down to subprocesses. 
Instead, it is executed only once in Pabot's main process.

Once the appropriate version is installed, using Pabot is quite 
straightforward. The simplest command is:

```cmd
pabot --testlevelsplit --pabotprerunmodifier DependencySolver.depsol:-i:tagC --ordering depsol.pabot.txt <other_pabot_commands> <your_test_folder>
```
Or you can use command:
```cmd
depsol --tool pabot -i tagC <other_pabot_commands> <your_test_folder>
```

However, note that since the example tests A, B, and C depend on each other, 
they are grouped together using the `--ordering` file so they are executed in 
the same process. The content of the `depsol.pabot.txt` file looks something 
like this:

```
{
--test Suite.Test A
--test Suite.Test B #DEPENDS Suite.Test A
--test Suite.Test C #DEPENDS Suite.Test B
}
```

## Contributing

If you would like to request a new feature or modification to existing 
functionality, or report a bug, you can open an issue on [GitHub](https://github.com/joonaskuisma/robotframework-dependencysolver/issues). 
For any issues, please create a bug report and reference the version in question. 

If you want to contribute and participate in the project, please read the 
[Developer Guide](README.dev.md) file first.
