#=============================================================================
# STORAGE CONFIGURATION
#=============================================================================

# Note that these paths are RELATIVE to where the code is ran. Please set these 
# to an absolute path as soon as possible

[SDS]
# Path to Seiscomp Data Structure miniseed archive
sds_path = {{ sds_path }}

[DATABASE]
# Path to the SQLite database
db_path = {{ db_path }}

#=============================================================================
# PROCESSING SETTINGS
#=============================================================================

[PROCESSING]
# Number of processes to use (0 = auto)
num_processes = {{ processing.num_processes }}

# Data gaps less than this are disregarded in the database
gap_tolerance = {{ processing.gap_tolerance }}

# Download type: 'continuous' or 'event'
download_type = {{ download_type }}

#=============================================================================
# AUTHENTICATION CREDENTIALS
#=============================================================================

{%- if auth is not none %}
[AUTH]
# Credentials for authenticated data sources
# As many as needed can be stored here
# Format: network_code = username:password
# or: network_code.station_code = username:password
#
# Examples:
# XX = bobbo:dG^3s99
# 1A.STAT01 = 1A:password123
{% for auth in auths %}
{{ auth.nslc_code }} = {{ auth.username }}:{{ auth.password }}
{% endfor %}
{%- else %}
[AUTH]
# Credentials for authenticated data sources
# As many as needed can be stored here
# Format: network_code = username:password
# or: network_code.station_code = username:password
#
# Examples:
# XX = bobbo:dG^3s99
# 1A.STAT01 = 1A:password123
{%- endif %}

#=============================================================================
# WAVEFORM DATA SETTINGS
#=============================================================================

[WAVEFORM]
# FDSN server for waveform data
client = {{ waveform.client }}

# Whether to force redownload of existing data
force_redownload = {{ waveform.force_redownload }}

# Number of days per request (you may have to lower this depending on how many simultaneous stations you're downloading)
days_per_request = {{ waveform.days_per_request }}

# Channel and location preferences (comma-separated, first match is used)
# Examples:
# channel_pref = HH?,BH1,BHN
# location_pref = 10,00,--
channel_pref = {{ waveform.channel_pref if waveform.channel_pref is not none else ''}}
location_pref = {{ waveform.location_pref if waveform.location_pref is not none else '' }}

#=============================================================================
# STATION METADATA SETTINGS
#=============================================================================

[STATION]
# Data provider
client = {{ station.client }}

# Local inventory file path (if specified, only stations in this file will be used)
local_inventory = {{ station.local_inventory if station.local_inventory is not none else ''}}

# Comma-separated list of stations to force-add (can include wildcards)
# Example: IU.NWAO.*.BH?,S1.AUANU
force_stations = {{ station.force_stations | join(',') }}

# Comma-separated list of stations to exclude
exclude_stations = {{ station.exclude_stations | join(',') }}

# Use highest sample rate available in inventory (WARNING: assumes the stationXML accurately reflects available waveform data!)
highest_samplerate_only = {{ station.highest_samplerate_only if station.highest_samplerate_only is not none else False }}

# Time window (YYYY-MM-DD HH:MM:SS format or any ObsPy-compatible format)
starttime = {{ station.starttime if station.starttime is not none else ''}}
endtime = {{ station.endtime if station.endtime is not none else '' }}
startbefore = {{ station.startbefore if station.startbefore is not none else '' }}
startafter = {{ station.startafter if station.startafter is not none else '' }}
endbefore = {{ station.endbefore if station.endbefore is not none else '' }}
endafter = {{ station.endafter if station.endafter is not none else '' }}

# Station selection criteria
network = {{ station.network if station.network is not none else ''}}
station = {{ station.station if station.station is not none else ''}}
location = {{ station.location if station.location is not none else ''}}
channel = {{ station.channel if station.channel is not none else ''}}

# Geographic constraints: 'circle', 'bounding', or leave empty for no constraints / global search
{%- if station.geo_constraint and station.geo_constraint[0] %}
geo_constraint = {{ station.geo_constraint[0].geo_type.value }}
{%- else %}
geo_constraint = circle
{%- endif %}

# Circle search parameters (used when geo_constraint = 'circle')
{%- if station.geo_constraint and station.geo_constraint[0] and station.geo_constraint[0].geo_type == 'circle' %}
latitude = {{ station.geo_constraint[0].coords.lat }}
longitude = {{ station.geo_constraint[0].coords.lon }}
minsearchradius = {{ station.geo_constraint[0].coords.min_radius }}
maxsearchradius = {{ station.geo_constraint[0].coords.max_radius }}
{%- else %}
latitude = 10.833306
longitude = 117.773438
minsearchradius = 0
maxsearchradius = 25.3
{%- endif %}

# Bounding box parameters (used when geo_constraint = 'bounding')
{%- if station.geo_constraint and station.geo_constraint[0] and station.geo_constraint[0].geo_type == 'bounding' %}
minlatitude = {{ station.geo_constraint[0].coords.min_lat }}
maxlatitude = {{ station.geo_constraint[0].coords.max_lat }}
minlongitude = {{ station.geo_constraint[0].coords.min_lon }}
maxlongitude = {{ station.geo_constraint[0].coords.max_lon }}
{%- else %}
minlatitude = -40
maxlatitude = -36
minlongitude = 120
maxlongitude = 124
{%- endif %}

# Whether to include restricted data (recommended to leave False unless specifically needed)
includerestricted = {{ station.includerestricted }}

# Metadata level: 'channel', or 'response'.
# SEED-vault requires 'channel' at bare minimum.
# Set to 'response' only if you plan to export fdsnXML or need to remove response in plotting, otherwise it's much slower
level = {{ station.level }}

{%- if event %}
#=============================================================================
# EVENT DATA SETTINGS
#=============================================================================

[EVENT]
# Data provider
client = {{ event.client }}

# Velocity model for phase calculations
model = {{ event.model }}

# Time window around P-phase arrival (seconds)
before_p_sec = {{ event.before_p_sec }}
after_p_sec = {{ event.after_p_sec }}

# Time window for events
starttime = {{ event.starttime }}
endtime = {{ event.endtime }}

# Depth constraints (km)
min_depth = {{ event.min_depth }}
max_depth = {{ event.max_depth }}

# Magnitude constraints
minmagnitude = {{ event.minmagnitude }}
maxmagnitude = {{ event.maxmagnitude }}

# Distance constraints (degrees)
minradius = {{ event.minradius }}
maxradius = {{ event.maxradius }}

# Local QuakeML catalog file path
local_catalog = {{ event.local_catalog if event.local_catalog is not none else ''}}

# Geographic constraints: 'circle', 'bounding', or leave empty for no constraints / global search
{%- if event.geo_constraint and event.geo_constraint[0] %}
geo_constraint = {{ event.geo_constraint[0].geo_type.value }}
{%- else %}
geo_constraint = circle
{%- endif %}

# Bounding box parameters (used when geo_constraint = 'bounding')
{%- if event.geo_constraint and event.geo_constraint[0] and event.geo_constraint[0].geo_type == 'bounding' %}
minlatitude = {{ event.geo_constraint[0].coords.min_lat }}
maxlatitude = {{ event.geo_constraint[0].coords.max_lat }}
minlongitude = {{ event.geo_constraint[0].coords.min_lon }}
maxlongitude = {{ event.geo_constraint[0].coords.max_lon }}
{%- else %}
minlatitude = -90
maxlatitude = 90
minlongitude = -180
maxlongitude = 180
{%- endif %}

# Circle search parameters (used when geo_constraint = 'circle')
{%- if event.geo_constraint and event.geo_constraint[0] and event.geo_constraint[0].geo_type == 'circle' %}
latitude = {{ event.geo_constraint[0].coords.lat }}
longitude = {{ event.geo_constraint[0].coords.lon }}
minsearchradius = {{ event.geo_constraint[0].coords.min_radius }}
maxsearchradius = {{ event.geo_constraint[0].coords.max_radius }}
{%- else %}
latitude = 0
longitude = 0
minsearchradius = 0.0
maxsearchradius = 180.0
{%- endif %}

# Additional metadata inclusion options
includeallorigins = {{ event.includeallorigins }}
includeallmagnitudes = {{ event.includeallmagnitudes }}
includearrivals = {{ event.includearrivals }}

# Additional search parameters
limit = {{ event.limit if event.limit is not none else '' }}
offset = {{ event.offset if event.offset is not none else '' }}
contributor = {{ event.contributor if event.contributor is not none else '' }}
updatedafter = {{ event.updatedafter if event.updatedafter is not none else '' }}
eventtype = {{ event.eventtype if event.eventtype is not none else '' }}
catalog = {{ event.catalog if event.catalog is not none else '' }}
{%- endif %}