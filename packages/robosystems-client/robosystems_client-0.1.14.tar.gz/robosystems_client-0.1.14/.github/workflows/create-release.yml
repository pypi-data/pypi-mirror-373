name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Type of version bump"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch

jobs:
  action:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(awk -F'"' '/^version = / {print $2}' pyproject.toml)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Could not find version in pyproject.toml"
            exit 1
          fi
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          VERSION_TYPE="${{ inputs.version_type }}"

          # Split version into major, minor, and patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment appropriate version component
          if [ "$VERSION_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else # patch
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          BRANCH_NAME="release/$NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "Branch name: $BRANCH_NAME"

      - name: Check if branch already exists
        id: check-branch
        run: |
          BRANCH_NAME="${{ steps.new-version.outputs.branch_name }}"

          # Check if branch exists locally or remotely
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME || git show-ref --verify --quiet refs/remotes/origin/$BRANCH_NAME; then
            echo "Branch $BRANCH_NAME already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Branch $BRANCH_NAME does not exist, proceeding..."
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch and update version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          BRANCH_NAME="${{ steps.new-version.outputs.branch_name }}"

          echo "Creating new branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"

          # Update version in pyproject.toml
          sed -i "s/^version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

          # Commit the changes
          git add pyproject.toml

          git commit -m "Bump version from $CURRENT_VERSION to $NEW_VERSION"

          # Push the branch
          git push origin "$BRANCH_NAME"

          echo "âœ… Version bumped: $CURRENT_VERSION â†’ $NEW_VERSION"
          echo "âœ… Branch created: $BRANCH_NAME" 
          echo "âœ… Changes committed and pushed successfully"

      - name: Create summary
        run: |
          echo "## ðŸš€ Release Branch Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.current-version.outputs.current_version }} â†’ ${{ steps.new-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ steps.new-version.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the changes in the release branch" >> $GITHUB_STEP_SUMMARY
          echo "2. Create a pull request to merge into main" >> $GITHUB_STEP_SUMMARY
          echo "3. After merge, the staging/prod workflows will handle deployment" >> $GITHUB_STEP_SUMMARY
