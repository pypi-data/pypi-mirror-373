Metadata-Version: 2.4
Name: skfobserver
Version: 0.1.2
Summary: A Python client library for easy integration with the SKF Observer API.
License: MIT License
        
        Copyright (c) 2025 SKF
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/your-github-org/skfobserver-python
Project-URL: Documentation, https://your-docs-url.readthedocs.io
Project-URL: Repository, https://github.com/your-github-org/skfobserver-python
Project-URL: Changelog, https://github.com/your-github-org/skfobserver-python/releases
Keywords: skf,observer,api,client,sdk,data,industrial
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.1
Dynamic: license-file

Markdown

# SKF Observer Python Library

A robust and easy-to-use Python client library designed to simplify integration with the SKF Observer API. This library handles authentication, token refreshing, and provides intuitive methods for reading data and interacting with your Observer application programmatically.

## Features

-   **Seamless Authentication:** Automatic handling of access and refresh tokens.
-   **Easy Data Access:** Simple Python functions to retrieve machine data, events, and other Observer resources.
-   **Error Handling:** Built-in error handling for common API responses.
-   **Structured Interface:** A clear, object-oriented approach to API interaction.

## Installation

You can install `skfobserver` using pip:

```bash
pip install skfobserver
```


USAGE 


```bash
from skfobserver import APIClient
from skfobserver.client import SKFObserverAPIError # For specific error handling
from datetime import datetime, timedelta

# Replace with your actual SKF Observer API credentials
USERNAME = "YOUR_API_USERNAME"
PASSWORD = "YOUR_API_PASSWORD"

try:
    # Initialize the client (authentication happens automatically here)
    client = APIClient(username=USERNAME, password=PASSWORD)

    # Example 1: Get a list of all machines
    print("Fetching machines...")
    machines = client.get_machines()
    for machine in machines:
        print(f"  Machine ID: {machine.get('id')}, Name: {machine.get('name')}")

    # Example 2: Get data for a specific machine over the last 24 hours
    if machines:
        target_machine_id = machines[0].get('id') # Use the first machine found
        print(f"\nFetching data for machine ID: {target_machine_id} (last 24 hours)...")
        end_time = datetime.now()
        start_time = end_time - timedelta(days=1)
        machine_data = client.get_machine_data(
            machine_id=target_machine_id,
            start_time=start_time,
            end_time=end_time
        )
        print(f"  Retrieved {len(machine_data)} data points for {target_machine_id}.")
        # print(f"  First data point: {machine_data[0]}") # Uncomment to see actual data

    # Example 3: Send an event to the API
    print("\nSending a test event...")
    event_payload = {
        "type": "MAINTENANCE_LOG",
        "machineId": "some_machine_id", # Replace with a valid machine ID for testing
        "timestamp": datetime.now().isoformat(),
        "description": "Routine check completed by automated script.",
        "severity": "INFO"
    }
    response_event = client.send_event(event_payload)
    print(f"  Event sent successfully. Response ID: {response_event.get('eventId')}")

except SKFObserverAuthError as e:
    print(f"Authentication Error: {e}")
    print("Please check your username and password, or if your refresh token has expired, re-initialize the client.")
except SKFObserverAPIError as e:
    print(f"API Error: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}") 


```
 

