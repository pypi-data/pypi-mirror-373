stages:
  - test
  - deploy

variables:
  NO_CONTRIB: "1"
  TARGET_BRANCH: master

el9:
  tags:
    - cvmfs
  except:
    - tags
  image: gitlab-registry.cern.ch/lhcb-docker/os-base/alma9-devel:latest
  variables:
    BINARY_TAG: x86_64_v2-el9-gcc12-opt
  script:
    - dnf install -y make bzip2 zip unzip gcc-c++ cmake ninja-build ccache python3-wheel
    - zip --version
    - python3 --version
    - python3 -m ensurepip
    - python3 -m pip install --upgrade pip
    - python3 -m pip install -e .[dev]
    # make sure we use the right cacert file in all cases
    - export SSL_CERT_FILE=$(python3 -m certifi)
    # Patch the cacert file with CERN certificates
    - cat cern_ca_bundle.crt >> $SSL_CERT_FILE
    - eval $(python3 -m LbEnv --sh -r /cvmfs/lhcb.cern.ch/lib)
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
    - pytest
  artifacts:
    when: always
    paths:
      - htmlcov
      - pytest.xml
      - coverage.xml
    reports:
      junit: pytest.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week

python:3.9:
  tags:
    - cvmfs
  except:
    - tags
  image: registry.cern.ch/docker.io/library/python:3.9
  variables:
    BINARY_TAG: x86_64_v2-dummy1-gcc99-opt
  script:
    - apt update && apt install -y make bzip2 zip unzip g++
    - python3 --version
    - pip install --index-url https://lhcb-repository.web.cern.ch/repository/pypi/simple -e .[dev]
    # make sure we use the right cacert file in all cases
    - export SSL_CERT_FILE=$(python3 -m certifi)
    # Patch the cacert file with CERN certificates
    - cat cern_ca_bundle.crt >> $SSL_CERT_FILE
    - eval $(python -m LbEnv --sh -r /cvmfs/lhcb.cern.ch/lib)
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
    - pytest
  artifacts:
    when: always
    paths:
      - htmlcov
      - pytest.xml
      - coverage.xml
    reports:
      junit: pytest.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week

pre-commit-checks:
  image: registry.cern.ch/docker.io/library/python:3.9
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
  before_script:
    - |
      python -m venv ${CI_PROJECT_DIR}/.cache/pre-commit-venv
      . ${CI_PROJECT_DIR}/.cache/pre-commit-venv/bin/activate
      pip install pre-commit
      git fetch origin $TARGET_BRANCH
      git config user.name "Gitlab CI"
      git config user.email "noreply@cern.ch"
  script:
    - |
      if ! pre-commit run --show-diff-on-failure --from-ref FETCH_HEAD --to-ref HEAD ; then
        echo ""
        echo "Generating patch file..."
        git commit -a -m "pre-commit fixes

      patch generated by ${CI_JOB_URL}" > /dev/null
        git format-patch HEAD~
        cat <<EOF
      =======================================
       You can apply these changes with:

          curl ${CI_JOB_URL}/artifacts/raw/0001-pre-commit-fixes.patch | git am

      =======================================
      EOF
        exit 1
      fi
  artifacts:
    paths:
      - 0001-pre-commit-fixes.patch
    when: on_failure
    expire_in: 1 week

build-packages:py3:
  stage: deploy
  image: gitlab-registry.cern.ch/lhcb-docker/python-deployment:python-3.9
  script:
    - python3 --version
    - pip install build
    - pip install --upgrade twine
    - python3 -m build
    - twine check dist/*
  artifacts:
    paths:
      - dist
    when: always
    expire_in: 1 week

deploy-packages:
  stage: deploy
  only:
    - tags
  needs: ["build-packages:py3"]
  image: gitlab-registry.cern.ch/lhcb-docker/python-deployment:python-3.9
  script:
    - if [ -z "$TWINE_PASSWORD" ] ; then echo "Set TWINE_PASSWORD in CI variables" ; exit 1 ; fi
    - pip install --upgrade twine
    - twine upload -u __token__ dist/*
  before_script: []
  after_script: []
