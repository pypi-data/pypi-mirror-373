[build-system]
requires = [
    "hatchling",
    "setuptools>=45", 
    "wheel>=0.36.0",
    "setuptools_scm>=6.0",
    "swig>=4.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "vbi"
version = "0.2.1"
description = "Virtual brain inference."
requires-python = ">=3.8"
license = "Apache-2.0"
authors = [
    { name = "Abolfazl Ziaeemehr", email = "a.ziaeemehr@gmail.com" },
    { name = "Meysam Hashemi", email = "meysam.hashemi@gmail.com" },
    { name = "Marmaduke Woodman", email = "marmaduke.woodman@gmail.com" }
]
readme = "README.md"
dependencies = [
    "wheel",
    "numpy",
    "scipy",
    "numba",
    "h5py",
    "pandas",
    "networkx",
    "nbconvert",
    "matplotlib",
    "setuptools-scm",
    "tqdm",
    "sbi",
    "torch",
    "parameterized",
    "scikit-learn",
    "pycatch22",
    "pytest",
    "swig",
    "rich"
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Information Analysis",
    # "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]

[project.urls]
homepage = "https://ziaeemehr.github.io/vbi_paper/"
repository = "https://github.com/Ziaeemehr/vbi_paper"

[tool.hatch.version]
path = "vbi/_version.py"

[tool.setuptools]
include-package-data = true
packages = ["vbi", "vbi.dataset", "vbi.feature_extraction", "vbi.models", "vbi.models.cpp", "vbi.models.cupy", "vbi.models.numba", "vbi.models.pytorch", "vbi.models.tvbk", "vbi.papers", "vbi.tests"]

[tool.setuptools.package-data]
vbi = [
    "models/pytorch/data/*", 
    "models/cpp/_src/*",
    "dataset/connectivity_84/*",
    "dataset/connectivity_88/*",
    "feature_extraction/*.json",
    "feature_extraction/*.jar",
]
"vbi.tests" = ["*"]  # Include all files in tests/

[project.optional-dependencies]
dev = []
docs = [
    "sphinx",
    "numpydoc",
    "nbformat",
    "nbsphinx",
    "cloud_sptheme",
    "sphinx_bootstrap_theme",
]
cu = ["cupy"]
all = [
    "pytest",
    "sphinx",
    "numpydoc",
    "nbformat",
    "nbsphinx",
    "cloud_sptheme",
    "sphinx_bootstrap_theme",
    "cupy",
]


# Added configurations for wheel building and compatibility
[tool.cibuildwheel]
# Configure manylinux platform
manylinux-x86_64-image = "manylinux2014"
# Skip PyPy builds
skip = "pp* *-musllinux*"
# Build for specific Python versions - modify as needed
build = "cp38-* cp39-* cp310-*"
# Environment variables for build
environment = { CFLAGS="-std=c99", CXXFLAGS="-std=c++14" }
# Test command to ensure wheels work
test-command = "pytest {package}/tests -v"
# Make sure required dependencies are installed
before-build = "pip install numpy swig setuptools_scm"
# Add repair command to ensure wheel compatibility
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.linux]
# Define repair tags for Linux
repair-wheel-command = "auditwheel repair --plat manylinux2014_x86_64 -w {dest_dir} {wheel}"
# Optional: libraries to exclude from checking
# If auditwheel is reporting issues with system libraries
# auditwheel-exclude-libs = ["libstdc++.so.6"]