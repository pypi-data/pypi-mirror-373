// Python ed25519 Zebra Bindings
//
// Copyright 2018-2022 Stichting Polkascan (Polkascan Foundation).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Python bindings for the ed25519-zebra RUST crate.
//!
//! py-ed25519-zebra-bindings provides bindings to the Rust create
//! [ed25519-zebra](https://crates.io/crates/ed25519-zebra), allowing for some limited
//! use and management of ed25519 elliptic keys.

use pyo3::prelude::*;
use pyo3::types::{PyBytes};
use pyo3::{wrap_pyfunction, exceptions};
use std::convert::TryFrom;
use ::ed25519_zebra::{SigningKey, VerificationKey, Signature};

#[derive(IntoPyObject, IntoPyObjectRef)]
pub struct PyKeypair([u8; 32], [u8; 32]);

#[derive(IntoPyObject, IntoPyObjectRef)]
pub struct PySignature([u8; 64]);

pub struct Pair {
	public: VerificationKey,
	secret: SigningKey,
}

pub const SEED_KEY_LENGTH: usize = 32;

/// Keypair helper function.
fn create_from_seed(seed: &[u8]) -> PyResult<Pair> {

	if seed.len() != SEED_KEY_LENGTH {
		return Err(exceptions::PyValueError::new_err(
			format!("Expected bytes of length {}, got {}", SEED_KEY_LENGTH, seed.len()))
		)
	}

	let secret = SigningKey::try_from(seed).map_err(|err| exceptions::PyValueError::new_err(format!("Invalid secret key: {}", err.to_string())))?;
	let public = VerificationKey::from(&secret);

	Ok(Pair { secret, public })
}

/// Returns a public and private key pair from the given 32-byte seed.
///
/// # Arguments
///
/// * `seed` - A 32 byte seed.
///
/// # Returns
///
/// A tuple containing the 32-byte secret key and 32-byte public key, in that order.
#[pyfunction]
pub fn ed_from_seed(seed: &[u8]) -> PyResult<PyKeypair> {

	let keypair = match create_from_seed(seed) {
		Ok(keypair) => keypair,
		Err(err) =>  return Err(err)
	};

	Ok(PyKeypair(keypair.secret.into(), keypair.public.into()))
}

/// Returns a public key for the given private key.
///
/// # Arguments
///
/// * `secret` - A 32 byte private key.
///
/// # Returns
///
/// 32-byte public key.
#[pyfunction]
pub fn ed_public_from_secret(secret: &[u8], py: Python) -> PyResult<Py<PyBytes>> {
	let secret = SigningKey::try_from(secret).map_err(|err| exceptions::PyValueError::new_err(format!("Invalid secret key: {}", err.to_string())))?;
	let public = VerificationKey::from(&secret);

	Ok(PyBytes::new(py, &public.as_ref()).into())
}

/// Signs a message with the given keypair, returning the resulting signature.
///
/// # Arguments
///
/// * `secret` - The ed25519 private key, as an array of 32 bytes
/// * `message` - The binary message to sign.
///
/// # Returns
///
/// A 64-byte signature.
#[pyfunction]
pub fn ed_sign(secret: &[u8], message: &[u8]) -> PyResult<PySignature> {
	let secret = SigningKey::try_from(secret).map_err(|err| exceptions::PyValueError::new_err(format!("Invalid secret key: {}", err.to_string())))?;
	Ok(PySignature(secret.sign(message).into()))
}

/// Verifies that a signature on a given message was generated by private key
/// corresponding to the specified public key.
///
/// # Arguments
///
/// * `signature` - The 64-byte ed25519 signature.
/// * `message` - The binary message on which to verify the signature.
/// * `public` - The ed25519 public key, as an array of 32 bytes
///
/// # Returns
///
/// True if the signature is valid, false otherwise.
#[pyfunction]
pub fn ed_verify(signature: &[u8], message: &[u8], public: &[u8]) -> bool {

	let public_key = match VerificationKey::try_from(public.as_ref()) {
		Ok(pk) => pk,
		Err(_) => return false,
	};

	let sig = match Signature::try_from(signature) {
		Ok(s) => s,
		Err(_) => return false,
	};

	public_key.verify(&sig, message.as_ref()).is_ok()
}


/// This module is a Python module implemented in Rust.
#[pymodule]
fn ed25519_zebra(m: &Bound<'_, PyModule>) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(ed_from_seed, m)?)?;
    m.add_function(wrap_pyfunction!(ed_sign, m)?)?;
    m.add_function(wrap_pyfunction!(ed_verify, m)?)?;
    m.add_function(wrap_pyfunction!(ed_public_from_secret, m)?)?;
    Ok(())
}
