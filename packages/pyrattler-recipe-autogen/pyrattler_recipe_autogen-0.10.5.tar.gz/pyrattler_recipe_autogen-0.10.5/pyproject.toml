[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pyrattler-recipe-autogen"
dynamic = ["version"]
description = "Generate Rattler-Build recipe.yaml from pyproject.toml"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "millsks"}
]
requires-python = ">=3.9"
dependencies = [
    "pyyaml",
    "toml",
    "tomli; python_version < '3.11'",
    "types-PyYAML",  # Type stubs for PyYAML
    "types-toml",    # Type stubs for toml
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Software Distribution",
]

[project.scripts]
pyrattler-recipe-autogen = "pyrattler_recipe_autogen.cli:main"

[project.urls]
homepage = "https://github.com/millsks/pyrattler-recipe-autogen"
repository = "https://github.com/millsks/pyrattler-recipe-autogen.git"
documentation = "https://github.com/millsks/pyrattler-recipe-autogen.git#README"
issues = "https://github.com/millsks/pyrattler-recipe-autogen/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/pyrattler_recipe_autogen"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.build.hooks.vcs]
version-file = "src/pyrattler_recipe_autogen/_version.py"

[tool.ruff]
line-length = 88
target-version = "py39"
exclude = [
    "src/pyrattler_recipe_autogen/_version.py",  # Auto-generated by hatch-vcs
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by formatter
]

[tool.ruff.lint.isort]
known-first-party = ["pyrattler_recipe_autogen"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "src/pyrattler_recipe_autogen/_version.py",  # Auto-generated by hatch-vcs
]

[[tool.mypy.overrides]]
module = ["setuptools_scm", "tomli", "tomllib", "toml"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pyrattler_recipe_autogen",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
omit = [
    "src/pyrattler_recipe_autogen/_version.py",  # Auto-generated by hatch-vcs
]

[tool.bandit]
# Security scanning configuration
exclude_dirs = ["tests"]
skips = [
    "B404",  # import subprocess - We need subprocess for version detection
    "B603",  # subprocess without shell=True - Our subprocess calls are safe (no shell=True, controlled arguments)
    "B607",  # partial executable path - Poetry executable is expected to be in PATH
]

[tool.pixi.project]
name = "pyrattler-recipe-autogen"
channels = ["conda-forge"]
platforms = ["osx-arm64", "osx-64", "linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
pyrattler-recipe-autogen = { path = ".", editable = true }

[tool.pixi.host-dependencies]
python = ">=3.9,<4.0"
pip = "*"
python-build = "*"
hatchling = "*"
hatch-vcs = "*"

[tool.pixi.feature.dev.dependencies]
pytest = "*"
pytest-cov = "*"
ruff = "*"
mypy = "*"
pre-commit = "*"
twine = "*"
safety = "*"
bandit = "*"
git-cliff = "*"
rattler-build = "*"
act = "*"
pixi-diff-to-markdown = "*"

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
types-toml = ">=0.10.8.20240310,<0.11"
toml = "*"
tomli = "*"
pyyaml = "*"

[tool.pixi.feature.lint.dependencies]
ruff = "*"
mypy = "*"
bandit = "*"
safety = ">=2.3.5,<3.0"
marshmallow = ">=3.0,<4.0"
actionlint = "*"

[tool.pixi.environments]
default = { features = ["dev"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
lint = { features = ["lint"], solve-group = "default" }

[tool.pixi.tasks]
# Main CLI command for testing
generate-recipe = "python -m pyrattler_recipe_autogen.cli"

# Demo functionality
demo = "python -m pyrattler_recipe_autogen.demo"
demo-simple = "python -m pyrattler_recipe_autogen.demo --type simple"
demo-scientific = "python -m pyrattler_recipe_autogen.demo --type scientific"
demo-webapp = "python -m pyrattler_recipe_autogen.demo --type webapp"
demo-current = "python -m pyrattler_recipe_autogen.demo --type current"
demo-full = "python -m pyrattler_recipe_autogen.demo --full"

# Version management
version = "python -c 'import pyrattler_recipe_autogen; print(pyrattler_recipe_autogen.__version__)'"

# Building
clean = "python -c 'import shutil, pathlib; [shutil.rmtree(p, ignore_errors=True) for p in [pathlib.Path(\"build\"), pathlib.Path(\"dist\")] + list(pathlib.Path(\".\").glob(\"*.egg-info\"))]'"
build = { cmd = "python -m build", depends-on = ["clean"] }
build-conda = "rattler-build build --experimental --recipe recipe --output-dir dist/conda"

# Pre-commit
pre-commit-install = "pre-commit install && pre-commit install --hook-type commit-msg"
pre-commit-run = "pre-commit run --all-files"

# Development workflow
dev-setup = { depends-on = ["pre-commit-install"] }

[tool.pixi.dependencies]
types-toml = ">=0.10.8.20240310,<0.11"
toml = "*"
tomli = "*"
pyyaml = "*"

[tool.pixi.feature.test.tasks]
test = "pytest tests/"
test-cov = "pytest --cov=pyrattler_recipe_autogen --cov-report=term-missing --cov-report=html --cov-report=xml --cov-report=json --cov-report=lcov tests/"

[tool.pixi.feature.lint.tasks]
format = "ruff check --fix --exit-non-zero-on-fix src/ tests/ && ruff format src/ tests/"
lint = "ruff check src/ tests/"
type-check = "mypy src/pyrattler_recipe_autogen/"
security-check = "bandit -r src/ -c pyproject.toml && safety check --json"
actionlint = "actionlint .github/workflows/*.yml"
check = { depends-on = ["lint", "type-check"] }
check-all = { depends-on = ["lint", "type-check", "security-check", "actionlint"] }

[tool.pixi.feature.dev.tasks]
ci = { depends-on = ["check-all", "test-cov", "build"] }
changelog = "git-cliff --output CHANGELOG.md"
changelog-unreleased = "git-cliff --unreleased --tag unreleased --output -"
changelog-latest = "git-cliff --latest --output -"
release-preview = "git-cliff --bump --unreleased --output -"
pixi-lock-update-diff = "pixi update --json | pixi exec pixi-diff-to-markdown > pixi-lock-update-diff.md"

# GitHub Actions local testing with act
act = "act"
act-list = "act -l"
act-release = "act workflow_dispatch -W .github/workflows/release.yml"
act-publish = "act release -W .github/workflows/publish.yml"
act-maintenance = "act schedule -W .github/workflows/maintenance.yml"
act-dryrun = "act --dryrun"
act-release-test = "act workflow_dispatch -W .github/workflows/release.yml --input version=0.99.0 --input test_mode=true"
act-setup = "echo 'Creating .actrc and .secrets files for act configuration...' && echo '-P ubuntu-latest=catthehacker/ubuntu:act-latest' > .actrc && echo '--secret-file .secrets' >> .actrc && echo 'GITHUB_TOKEN=dummy' > .secrets && echo 'RELEASE_PAT=dummy' >> .secrets && echo 'TEST_PYPI_API_TOKEN=dummy' >> .secrets && echo 'PYPI_API_TOKEN=dummy' >> .secrets && echo '✅ Act setup complete! Edit .secrets with real tokens if needed.'"

[tool.pixi-diff-to-markdown]
merge-dependencies = "split-explicit" # or "split-explicit" when there are three or more environments / platforms
hide-tables = "auto"
max-expanded-rows = 25
change-type-column = true
explicit-column = false
package-type-column = false
create-links-for-packages = true

# git-cliff configuration for changelog generation
[tool.git-cliff.changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{commit.scope}}**: {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "⭐ Features" },
  { message = "^fix", group = "🐛 Bug Fixes" },
  { message = "^doc", group = "📚 Documentation" },
  { message = "^perf", group = "⚡ Performance" },
  { message = "^refactor", group = "🚜 Refactor" },
  { message = "^style", group = "🎨 Styling" },
  { message = "^test", group = "🧪 Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "🔒 Security" },
  { message = "^revert", group = "◀️ Revert" },
  { message = "^Merge branch", skip = true },
  { message = "^Release v", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
# tag_pattern = "v[0-9].*"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
