// test_scope_feature.mdl - Demonstrating Variable Scoping with new <> syntax

pack "Test Scope Pack" "Testing variable scoping features" 15;

namespace "test_scope";

// Global variables (stored on mdl_server armor stand)
var num global_counter = 0;
var num global_timer = 0;

// Player-scoped variables (stored on each player)
var num player_score scope<@s> = 0;
var num player_level scope<@s> = 1;

// Team-scoped variables (stored on team members)
var num team_score scope<@a[team=red]> = 0;
var num team_bonus scope<@a[team=blue]> = 0;

// All-player scoped variables (stored on all players)
var num allPlayerCounter scope<@a> = 0;
var num playerKills scope<@a> = 0;

// World-scoped variables (stored on a specific armor stand)
var num world_timer scope<@e[type=armor_stand,tag=world_timer,limit=1]> = 0;

function "enabletimer" {
    global_timer = 1;
    player_score = player_score + 10;
    team_score = team_score + 5;
    world_timer = world_timer + 1;
}

function "disabletimer" {
    global_timer = 0;
}

function "load" {
    global_counter = 0;
    global_timer = 0;
}

function "tick" {
    if "score global_timer matches 1" {
        global_counter = global_counter + 1;
        player_score = player_score + 1;
        team_score = team_score + 1;
        world_timer = world_timer + 1;
    }
}

// Example: Reading @a scoped variables and messaging players
function "checkPlayerCounts" {
    // Method 1: Use execute to run commands for each player with the variable
    // This will run the command for each player that has the allPlayerCounter variable
    $!raw execute as @a if score @s allPlayerCounter matches 1.. run tellraw @s {"text":"You have a counter of 1 or more!","color":"green"}
    raw!$
    
    // Method 2: Use execute to run commands for players with specific values
    $!raw execute as @a if score @s allPlayerCounter matches 5.. run tellraw @s {"text":"You have 5+ counters!","color":"gold"}
    raw!$
    
    // Method 3: Count how many players have the variable set
    $!raw execute store result score temp_count mdl_server if entity @a[scores={allPlayerCounter=1..}]
    raw!$
    
    // Method 4: Message all players about the count
    $!raw execute if score temp_count mdl_server matches 1.. run tellraw @a {"text":"Some players have counters!","color":"blue"}
    raw!$
}

// Example: Working with player-specific variables
function "awardKills" {
    // Method 1: Use raw commands for explicit scope control
    // This correctly adds to only the executing player's kills
    $!raw scoreboard players add @s playerKills 1
    raw!$
    
    // Method 2: Check if player has reached a milestone (using raw for explicit scope)
    $!raw execute if score @s playerKills matches 10 run tellraw @s {"text":"Congratulations! You've reached 10 kills!","color":"gold"}
    raw!$
    
    // Method 3: Alternative - use raw commands to read the variable
    $!raw execute store result score temp_kills mdl_server run scoreboard players get @s playerKills
    raw!$
    $!raw execute if score temp_kills mdl_server matches 10 run tellraw @s {"text":"You have 10 kills!","color":"gold"}
    raw!$
    
    // Broadcast to all players about this player's achievement
    $!raw execute as @s run tellraw @a {"text":"","extra":[{"text":"Player ","color":"gray"},{"selector":"@s","color":"yellow"},{"text":" just got a kill!","color":"gray"}]}
    raw!$
}

// Example: Team-based messaging
function "announceTeamScores" {
    // Message red team about their score
    $!raw execute as @a[team=red] run tellraw @s {"text":"Red team score: ","color":"red","extra":[{"score":{"name":"@s","objective":"team_score"},"color":"white"}]}
    raw!$
    
    // Message blue team about their score
    $!raw execute as @a[team=blue] run tellraw @s {"text":"Blue team score: ","color":"blue","extra":[{"score":{"name":"@s","objective":"team_bonus"},"color":"white"}]}
    raw!$
}

on_load "test_scope:load";
on_tick "test_scope:tick";
