pack "comprehensive_control_test" "Comprehensive control structure testing" 82;
namespace "control_test";

// Variables for testing
var num counter = 0;
var num playerScore = 0;
var num playerHealth = 20;
var num globalTimer scope<global> = 0;
var num teamScore scope<@a[team=red]> = 0;
var num flag = 0;

// Test 1: Basic if statements
function "test_basic_if" {
    say "Testing basic if statements";
    
    if "$counter$ > 5" {
        say "Counter is high!";
    }
    
    if "$playerHealth$ < 10" {
        say "Health is low!";
    }
    
    if "$playerScore$ >= 100" {
        say "High score!";
    }
    
    say "Basic if statements complete";
}

// Test 2: If-else statements
function "test_if_else" {
    say "Testing if-else statements";
    
    if "$health$ < 10" {
        say "Health is low!";
    } else {
        say "Health is good";
    }
    
    if "$playerScore$ > 50" {
        say "Good score!";
    } else {
        say "Keep trying!";
    }
    
    if "$globalTimer$ > 100" {
        say "Timer is high!";
    } else {
        say "Timer is low";
    }
    
    say "If-else statements complete";
}

// Test 3: Complex if conditions
function "test_complex_if" {
    say "Testing complex if conditions";
    
    if "$playerScore$ > 100 && $playerHealth$ > 10" {
        say "Player is doing well!";
    }
    
    if "$teamScore$ > 50 || $globalTimer$ > 200" {
        say "Team is winning or time is up!";
    }
    
    if "$counter$ == 0 && $flag$ == 1" {
        say "Special condition met!";
    }
    
    if "$playerScore$ >= 100 && $playerHealth$ >= 15 && $globalTimer$ < 300" {
        say "Perfect conditions!";
    }
    
    say "Complex if conditions complete";
}

// Test 4: Nested if statements
function "test_nested_if" {
    say "Testing nested if statements";
    
    if "$playerScore$ > 50" {
        if "$playerHealth$ > 10" {
            if "$globalTimer$ < 100" {
                say "All conditions perfect!";
            } else {
                say "Timer is too high";
            }
        } else {
            say "Health is too low";
        }
    } else {
        say "Score is too low";
    }
    
    if "$counter$ > 0" {
        if "$flag$ == 1" {
            say "Counter and flag are set";
        } else {
            say "Only counter is set";
        }
    } else {
        if "$flag$ == 1" {
            say "Only flag is set";
        } else {
            say "Neither is set";
        }
    }
    
    say "Nested if statements complete";
}

// Test 5: Basic while loops
function "test_basic_while" {
    say "Testing basic while loops";
    
    counter = 0;
    while "$counter$ < 10" {
        counter = counter + 1;
        say "Counter: $counter$";
    }
    
    globalTimer = 0;
    while "$globalTimer$ < 5" {
        globalTimer = globalTimer + 1;
        say "Global timer: $globalTimer$";
    }
    
    say "Basic while loops complete";
}

// Test 6: Complex while loops
function "test_complex_while" {
    say "Testing complex while loops";
    
    counter = 0;
    playerScore = 0;
    while "$counter$ < 5 && $playerScore$ < 100" {
        counter = counter + 1;
        playerScore = playerScore + 25;
        say "Counter: $counter$, Score: $playerScore$";
    }
    
    globalTimer = 0;
    teamScore = 0;
    while "$globalTimer$ < 10 || $teamScore$ < 50" {
        globalTimer = globalTimer + 1;
        teamScore = teamScore + 10;
        say "Timer: $globalTimer$, Team Score: $teamScore$";
    }
    
    say "Complex while loops complete";
}

// Test 7: While loops with break conditions
function "test_while_break" {
    say "Testing while loops with break conditions";
    
    counter = 0;
    while "$counter$ < 20" {
        counter = counter + 1;
        if "$counter$ == 10" {
            say "Reached 10, continuing...";
            continue;
        }
        if "$counter$ == 15" {
            say "Reached 15, breaking...";
            break;
        }
        say "Counter: $counter$";
    }
    
    say "While loops with break conditions complete";
}

// Test 8: Control structures with variable assignments
function "test_control_with_assignments" {
    say "Testing control structures with assignments";
    
    if "$playerScore$ < 50" {
        playerScore = playerScore + 25;
        say "Score increased to: $playerScore$";
    }
    
    while "$counter$ < 5" {
        counter = counter + 1;
        playerHealth = playerHealth + 2;
        say "Counter: $counter$, Health: $playerHealth$";
    }
    
    if "$globalTimer$ > 100" {
        globalTimer = 0;
        say "Timer reset to: $globalTimer$";
    }
    
    say "Control with assignments complete";
}

// Test 9: Control structures with function calls
function "test_control_with_functions" {
    say "Testing control structures with function calls";
    
    if "$playerScore$ > 100" {
        function "control_test:test_basic_if";
    }
    
    while "$counter$ < 3" {
        counter = counter + 1;
        function "control_test:test_basic_if";
    }
    
    if "$flag$ == 0" {
        flag = 1;
        function "control_test:test_if_else";
    }
    
    say "Control with functions complete";
}

// Test 10: Control structures with raw blocks
function "test_control_with_raw" {
    say "Testing control structures with raw blocks";
    
    if "$playerScore$ > 50" {
        $!raw
        effect give @a minecraft:speed 10 1
        particle minecraft:firework ~ ~ ~ 0.5 0.5 0.5 0.1 100
        raw!$
        say "Raw effects applied!";
    }
    
    while "$counter$ < 3" {
        counter = counter + 1;
        $!raw
        scoreboard players add @s test_counter 1
        raw!$
        say "Raw counter incremented";
    }
    
    say "Control with raw blocks complete";
}

// Test 11: Control structures with tellraw
function "test_control_with_tellraw" {
    say "Testing control structures with tellraw";
    
    if "$playerScore$ > 100" {
        tellraw @a {"text":"High score achieved!","color":"gold"};
    } else {
        tellraw @a {"text":"Keep trying!","color":"red"};
    }
    
    while "$counter$ < 5" {
        counter = counter + 1;
        tellraw @a {"text":"Counter: $counter$","color":"blue"};
    }
    
    if "$playerHealth$ < 10" {
        tellraw @a {"text":"Low health warning!","color":"red"};
    }
    
    say "Control with tellraw complete";
}

// Test 12: Complex nested control structures
function "test_complex_nested_control" {
    say "Testing complex nested control structures";
    
    counter = 0;
    while "$counter$ < 5" {
        counter = counter + 1;
        
        if "$counter$ % 2 == 0" {
            say "Counter is even: $counter$";
            
            if "$counter$ == 4" {
                say "Counter is 4!";
                playerScore = playerScore + 50;
            }
        } else {
            say "Counter is odd: $counter$";
            
            if "$counter$ == 3" {
                say "Counter is 3!";
                playerHealth = playerHealth + 5;
            }
        }
        
        if "$playerScore$ > 100" {
            say "High score reached!";
            break;
        }
    }
    
    say "Complex nested control complete";
}

// Test 13: Control structures with different scopes
function "test_control_with_scopes" {
    say "Testing control structures with different scopes";
    
    // Player scope
    if "$playerScore$ > 50" {
        say "Player score is high";
        playerScore = playerScore + 10;
    }
    
    // Global scope
    if "$globalTimer$ > 100" {
        say "Global timer is high";
        globalTimer = globalTimer + 1;
    }
    
    // Team scope
    if "$teamScore$ > 25" {
        say "Team score is high";
        teamScore = teamScore + 5;
    }
    
    // Mixed scope conditions
    if "$playerScore$ > 100 && $globalTimer$ < 200" {
        say "Perfect conditions for player and global";
    }
    
    say "Control with scopes complete";
}

// Test 14: Control structures with variable substitution
function "test_control_variable_substitution" {
    say "Testing control structures with variable substitution";
    
    if "$counter$ > 5" {
        say "Counter $counter$ is greater than 5";
    }
    
    while "$playerScore$ < 100" {
        playerScore = playerScore + 10;
        say "Score increased to $playerScore$";
    }
    
    if "$playerHealth$ < 10" {
        say "Health $playerHealth$ is low!";
        playerHealth = playerHealth + 10;
        say "Health restored to $playerHealth$";
    }
    
    say "Control variable substitution complete";
}

// Test 15: Control structures with complex expressions
function "test_control_complex_expressions" {
    say "Testing control structures with complex expressions";
    
    if "($playerScore$ + $counter$) > 100" {
        say "Combined score and counter is high!";
    }
    
    while "($globalTimer$ * 2) < 50" {
        globalTimer = globalTimer + 1;
        say "Timer: $globalTimer$, Double: $globalTimer * 2$";
    }
    
    if "$playerScore$ > 50 && ($playerHealth$ + $counter$) > 25" {
        say "Complex condition met!";
    }
    
    say "Control complex expressions complete";
}

// Test 16: Control structures with scoped function calls
function "test_control_scoped_functions" {
    say "Testing control structures with scoped function calls";
    
    if "$playerScore$ > 100" {
        function "control_test:test_basic_if<@s>";
    }
    
    while "$counter$ < 3" {
        counter = counter + 1;
        function "control_test:test_if_else<@a>";
    }
    
    if "$teamScore$ > 50" {
        function "control_test:test_complex_if<@a[team=red]>";
    }
    
    say "Control scoped functions complete";
}

// Test 17: Control structures with error handling simulation
function "test_control_error_handling" {
    say "Testing control structures with error handling simulation";
    
    // Simulate error conditions
    if "$playerHealth$ <= 0" {
        say "Player is dead!";
        playerHealth = 20;
        say "Player respawned with health: $playerHealth$";
    }
    
    if "$globalTimer$ > 1000" {
        say "Timer overflow detected!";
        globalTimer = 0;
        say "Timer reset to: $globalTimer$";
    }
    
    while "$counter$ < 0" {
        say "Counter is negative, fixing...";
        counter = 0;
    }
    
    say "Control error handling complete";
}

// Test 18: Control structures with performance testing
function "test_control_performance" {
    say "Testing control structures with performance testing";
    
    // Test many iterations
    counter = 0;
    while "$counter$ < 100" {
        counter = counter + 1;
        
        if "$counter$ % 10 == 0" {
            say "Counter reached: $counter$";
        }
    }
    
    // Test nested loops
    globalTimer = 0;
    while "$globalTimer$ < 10" {
        globalTimer = globalTimer + 1;
        
        counter = 0;
        while "$counter$ < 5" {
            counter = counter + 1;
            playerScore = playerScore + 1;
        }
    }
    
    say "Control performance testing complete";
}

// Main test function that runs all control structure tests
function "run_all_control_tests" {
    say "Starting comprehensive control structure testing";
    
    // Initialize variables
    counter = 0;
    playerScore = 0;
    playerHealth = 20;
    globalTimer = 0;
    teamScore = 0;
    flag = 0;
    
    say "Variables initialized";
    
    // Run all tests
    function "control_test:test_basic_if";
    function "control_test:test_if_else";
    function "control_test:test_complex_if";
    function "control_test:test_nested_if";
    function "control_test:test_basic_while";
    function "control_test:test_complex_while";
    function "control_test:test_while_break";
    function "control_test:test_control_with_assignments";
    function "control_test:test_control_with_functions";
    function "control_test:test_control_with_raw";
    function "control_test:test_control_with_tellraw";
    function "control_test:test_complex_nested_control";
    function "control_test:test_control_with_scopes";
    function "control_test:test_control_variable_substitution";
    function "control_test:test_control_complex_expressions";
    function "control_test:test_control_scoped_functions";
    function "control_test:test_control_error_handling";
    function "control_test:test_control_performance";
    
    say "All control structure tests complete!";
}

// Hook to run tests on load
on_load "control_test:run_all_control_tests";
