{
  "Pack Declaration (Format 82+)": {
    "prefix": "pack82",
    "body": [
      "pack \"${1:Pack Name}\" description \"${2:Description}\" pack_format 82;"
    ],
    "description": "Pack declaration with format 82+ metadata"
  },
  "Pack Declaration (Legacy)": {
    "prefix": "pack48",
    "body": [
      "pack \"${1:Pack Name}\" description \"${2:Description}\" pack_format 48;"
    ],
    "description": "Pack declaration with legacy format 48"
  },
  "Namespace": {
    "prefix": "namespace",
    "body": [
      "namespace \"${1:namespace}\";"
    ],
    "description": "Namespace declaration"
  },
  "Function": {
    "prefix": "function",
    "body": [
      "function \"${1:function_name}\" {",
      "    ${2:command};",
      "}"
    ],
    "description": "Function declaration"
  },
  "Variable Declaration": {
    "prefix": "var",
    "body": [
      "var ${1:num|str|list} ${2:variable_name} = ${3:value};"
    ],
    "description": "Variable declaration"
  },
  "Number Variable": {
    "prefix": "varnum",
    "body": [
      "var num ${1:variable_name} = ${2:0};"
    ],
    "description": "Number variable declaration"
  },
  "String Variable": {
    "prefix": "varstr",
    "body": [
      "var str ${1:variable_name} = \"${2:value}\";"
    ],
    "description": "String variable declaration"
  },
  "List Variable": {
    "prefix": "varlist",
    "body": [
      "var list ${1:variable_name} = [${2:item1}, ${3:item2}];"
    ],
    "description": "List variable declaration"
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "while \"${1:condition}\" {",
      "    ${2:command};",
      "}"
    ],
    "description": "While loop"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for ${1:variable} in ${2:@e[tag=collection]} {",
      "    ${3:command};",
      "}"
    ],
    "description": "For loop"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if \"${1:condition}\" {",
      "    ${2:command};",
      "}"
    ],
    "description": "If statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if \"${1:condition}\" {",
      "    ${2:command};",
      "} else {",
      "    ${3:command};",
      "}"
    ],
    "description": "If-else statement"
  },
  "If-Else If-Else Statement": {
    "prefix": "ifelseif",
    "body": [
      "if \"${1:condition}\" {",
      "    ${2:command};",
      "} else if \"${3:condition}\" {",
      "    ${4:command};",
      "} else {",
      "    ${5:command};",
      "}"
    ],
    "description": "If-else if-else statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:expression}) {",
      "    case ${2:value}:",
      "        ${3:command};",
      "        break;",
      "    default:",
      "        ${4:command};",
      "        break;",
      "}"
    ],
    "description": "Switch statement"
  },
  "Try-Catch Block": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "    ${1:command};",
      "} catch (${2:error}) {",
      "    ${3:error_handling};",
      "}"
    ],
    "description": "Try-catch error handling"
  },
  "Throw Statement": {
    "prefix": "throw",
    "body": [
      "throw \"${1:error_message}\";"
    ],
    "description": "Throw error statement"
  },
  "Break Statement": {
    "prefix": "break",
    "body": [
      "break;"
    ],
    "description": "Break statement"
  },
  "Continue Statement": {
    "prefix": "continue",
    "body": [
      "continue;"
    ],
    "description": "Continue statement"
  },
  "Return Statement": {
    "prefix": "return",
    "body": [
      "return ${1:value};"
    ],
    "description": "Return statement"
  },
  "Import Statement": {
    "prefix": "import",
    "body": [
      "import ${1:module} from \"${2:path}\";"
    ],
    "description": "Import statement"
  },
  "Import As": {
    "prefix": "importas",
    "body": [
      "import ${1:module} as ${2:alias} from \"${3:path}\";"
    ],
    "description": "Import with alias"
  },
  "On Tick Hook": {
    "prefix": "ontick",
    "body": [
      "on_tick \"${1:namespace:function}\";"
    ],
    "description": "On tick hook"
  },
  "On Load Hook": {
    "prefix": "onload",
    "body": [
      "on_load \"${1:namespace:function}\";"
    ],
    "description": "On load hook"
  },
  "Tag Declaration": {
    "prefix": "tag",
    "body": [
      "tag ${1:function|item|block|entity_type|fluid|game_event} \"${2:namespace:tag_name}\" {",
      "    add \"${3:value}\";",
      "}"
    ],
    "description": "Tag declaration"
  },
  "Recipe Declaration": {
    "prefix": "recipe",
    "body": [
      "recipe \"${1:recipe_name}\" \"${2:recipes/recipe.json}\";"
    ],
    "description": "Recipe declaration with JSON file reference"
  },
  "Loot Table Declaration": {
    "prefix": "loot_table",
    "body": [
      "loot_table \"${1:loot_name}\" \"${2:loot_tables/loot.json}\";"
    ],
    "description": "Loot table declaration with JSON file reference"
  },
  "Advancement Declaration": {
    "prefix": "advancement",
    "body": [
      "advancement \"${1:advancement_name}\" \"${2:advancements/advancement.json}\";"
    ],
    "description": "Advancement declaration with JSON file reference"
  },
  "Predicate Declaration": {
    "prefix": "predicate",
    "body": [
      "predicate \"${1:predicate_name}\" \"${2:predicates/predicate.json}\";"
    ],
    "description": "Predicate declaration with JSON file reference"
  },
  "Item Modifier Declaration": {
    "prefix": "item_modifier",
    "body": [
      "item_modifier \"${1:modifier_name}\" \"${2:item_modifiers/modifier.json}\";"
    ],
    "description": "Item modifier declaration with JSON file reference"
  },
  "Structure Declaration": {
    "prefix": "structure",
    "body": [
      "structure \"${1:structure_name}\" \"${2:structures/structure.json}\";"
    ],
    "description": "Structure declaration with JSON file reference"
  },
  "Execute Command": {
    "prefix": "execute",
    "body": [
      "execute ${1:if|unless} ${2:condition} run ${3:command};"
    ],
    "description": "Execute command"
  },
  "Say Command": {
    "prefix": "say",
    "body": [
      "say ${1:message};"
    ],
    "description": "Say command"
  },
  "Tellraw Command": {
    "prefix": "tellraw",
    "body": [
      "tellraw @a {\"text\":\"${1:message}\",\"color\":\"${2:white}\"};"
    ],
    "description": "Tellraw command"
  },
  "Effect Command": {
    "prefix": "effect",
    "body": [
      "effect give @a minecraft:${1:effect} ${2:duration} ${3:amplifier};"
    ],
    "description": "Effect command"
  },
  "Particle Command": {
    "prefix": "particle",
    "body": [
      "particle minecraft:${1:particle} ~ ~ ~ ${2:dx} ${3:dy} ${4:dz} ${5:speed} ${6:count};"
    ],
    "description": "Particle command"
  },
  "Scoreboard Command": {
    "prefix": "scoreboard",
    "body": [
      "scoreboard players ${1:set|add|remove} @s ${2:objective} ${3:value};"
    ],
    "description": "Scoreboard command"
  },
  "Function Call": {
    "prefix": "function",
    "body": [
      "function ${1:namespace:function};"
    ],
    "description": "Function call"
  },
  "Comment Block": {
    "prefix": "comment",
    "body": [
      "/*",
      " * ${1:comment}",
      " */"
    ],
    "description": "Comment block"
  },
  "Single Line Comment": {
    "prefix": "//",
    "body": [
      "// ${1:comment}"
    ],
    "description": "Single line comment"
  },
  "Complete Example": {
    "prefix": "example",
    "body": [
      "pack \"${1:Example Pack}\" description \"${2:Example description}\" pack_format 82;",
      "",
      "namespace \"${3:example}\";",
      "",
      "// Global variables",
      "var num global_counter = 0;",
      "var str global_message = \"Hello World\";",
      "",
      "function \"init\" {",
      "    say Initializing...;",
      "    global_counter = 0;",
      "    global_message = \"Initialized\";",
      "}",
      "",
      "function \"tick\" {",
      "    global_counter = global_counter + 1;",
      "    ",
      "    if \"score @s ${3:global_counter} matches 10\" {",
      "        say Counter reached 10!;",
      "        global_counter = 0;",
      "    }",
      "    ",
      "    for player in @a {",
      "        effect give @s minecraft:speed 1 0;",
      "    }",
      "}",
      "",
      "// Registry types",
      "recipe \"custom_sword\" \"recipes/custom_sword.json\";",
      "loot_table \"custom_block\" \"loot_tables/custom_block.json\";",
      "advancement \"craft_sword\" \"advancements/craft_sword.json\";",
      "predicate \"has_sword\" \"predicates/has_sword.json\";",
      "item_modifier \"sword_nbt\" \"item_modifiers/sword_nbt.json\";",
      "structure \"custom_house\" \"structures/custom_house.json\";",
      "",
      "// Tags",
      "tag function \"minecraft:load\" {",
      "    add \"${3:init}\";",
      "}",
      "",
      "tag item \"${3:swords}\" {",
      "    add \"minecraft:diamond_sword\";",
      "}",
      "",
      "// Lifecycle hooks",
      "on_load \"${3:init}\";",
      "on_tick \"${3:tick}\";"
    ],
    "description": "Complete MDL example with all features including registry types"
  }
}
