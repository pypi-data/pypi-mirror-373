pack "comprehensive_scope_test" "Comprehensive variable scope testing" 82;
namespace "scope_test";

// Test 1: Player-specific scope (default)
var num playerScore = 0;  // Defaults to player-specific scope
var num playerHealth = 20;  // Defaults to player-specific scope
var num playerLevel = 1;  // Defaults to player-specific scope

// Test 2: Global scope variables
var num globalTimer scope<global> = 0;
var num globalPhase scope<global> = 1;
var num globalCounter scope<global> = 0;

// Test 3: All players scope
var num allPlayersScore scope<@a> = 0;
var num allPlayersHealth scope<@a> = 20;

// Test 4: Team-specific scope
var num redTeamScore scope<@a[team=red]> = 0;
var num blueTeamScore scope<@a[team=blue]> = 0;
var num greenTeamScore scope<@a[team=green]> = 0;

// Test 5: Custom entity scope
var num entityCounter scope<@e[type=armor_stand,tag=something,limit=1]> = 0;
var num serverData scope<@e[type=armor_stand,tag=mdl_server,limit=1]> = 0;

// Test 6: Complex selector scope
var num adminData scope<@a[tag=admin,team=red]> = 0;
var num vipData scope<@a[tag=vip,team=blue]> = 0;

// Function to test player-specific scope
function "test_player_scope" {
    say "Testing player-specific scope";
    
    // These should affect the current player only
    playerScore = 100;
    playerHealth = 15;
    playerLevel = 5;
    
    say "Player score: $playerScore$";
    say "Player health: $playerHealth$";
    say "Player level: $playerLevel$";
    
    say "Player scope test complete";
}

// Function to test global scope
function "test_global_scope" {
    say "Testing global scope";
    
    // These should affect the server globally
    globalTimer = globalTimer + 1;
    globalPhase = 2;
    globalCounter = globalCounter + 10;
    
    say "Global timer: $globalTimer$";
    say "Global phase: $globalPhase$";
    say "Global counter: $globalCounter$";
    
    say "Global scope test complete";
}

// Function to test all players scope
function "test_all_players_scope" {
    say "Testing all players scope";
    
    // These should affect all players
    allPlayersScore = allPlayersScore + 50;
    allPlayersHealth = 25;
    
    say "All players score: $allPlayersScore$";
    say "All players health: $allPlayersHealth$";
    
    say "All players scope test complete";
}

// Function to test team-specific scope
function "test_team_scope" {
    say "Testing team-specific scope";
    
    // These should affect specific teams
    redTeamScore = redTeamScore + 25;
    blueTeamScore = blueTeamScore + 30;
    greenTeamScore = greenTeamScore + 35;
    
    say "Red team score: $redTeamScore$";
    say "Blue team score: $blueTeamScore$";
    say "Green team score: $greenTeamScore$";
    
    say "Team scope test complete";
}

// Function to test entity scope
function "test_entity_scope" {
    say "Testing entity scope";
    
    // These should affect specific entities
    entityCounter = entityCounter + 1;
    serverData = serverData + 100;
    
    say "Entity counter: $entityCounter$";
    say "Server data: $serverData$";
    
    say "Entity scope test complete";
}

// Function to test complex selector scope
function "test_complex_selector_scope" {
    say "Testing complex selector scope";
    
    // These should affect specific complex selectors
    adminData = adminData + 200;
    vipData = vipData + 150;
    
    say "Admin data: $adminData$";
    say "VIP data: $vipData$";
    
    say "Complex selector scope test complete";
}

// Function to test scoped function calls
function "test_scoped_function_calls" {
    say "Testing scoped function calls";
    
    // Call functions with different scopes
    function "scope_test:test_player_scope<@s>";  // Current player
    function "scope_test:test_global_scope<@a>";  // All players
    function "scope_test:test_team_scope<@a[team=red]>";  // Red team
    function "scope_test:test_entity_scope<@e[type=armor_stand,limit=1]>";  // Specific entity
    
    say "Scoped function calls test complete";
}

// Function to test variable interactions between scopes
function "test_scope_interactions" {
    say "Testing scope interactions";
    
    // Test interactions between different scopes
    if "$playerScore$ > 50" {
        globalCounter = globalCounter + 1;
        say "Player score is high, incrementing global counter";
    }
    
    if "$globalPhase$ == 2" {
        playerLevel = playerLevel + 1;
        say "Global phase is 2, leveling up player";
    }
    
    if "$redTeamScore$ > 100" {
        allPlayersScore = allPlayersScore + 10;
        say "Red team is winning, giving bonus to all players";
    }
    
    say "Scope interactions test complete";
}

// Function to test conditional logic with different scopes
function "test_scope_conditionals" {
    say "Testing scope conditionals";
    
    // Test conditionals with different scopes
    if "$playerHealth$ < 10" {
        say "Player health is low!";
        playerHealth = playerHealth + 10;
    }
    
    if "$globalTimer$ > 100" {
        say "Global timer is high!";
        globalPhase = globalPhase + 1;
    }
    
    if "$redTeamScore$ > $blueTeamScore$" {
        say "Red team is winning!";
        redTeamScore = redTeamScore + 5;
    }
    
    while "$playerLevel$ < 10" {
        playerLevel = playerLevel + 1;
        say "Player leveled up to: $playerLevel$";
    }
    
    while "$globalCounter$ < 50" {
        globalCounter = globalCounter + 5;
        say "Global counter: $globalCounter$";
    }
    
    say "Scope conditionals test complete";
}

// Function to test tellraw with different scopes
function "test_scope_tellraw" {
    say "Testing scope tellraw";
    
    // Test tellraw with different scope variables
    tellraw @a {"text":"Player Score: ","color":"green"};
    tellraw @a {"text":"$playerScore$","color":"yellow"};
    
    tellraw @a {"text":"Global Timer: ","color":"blue"};
    tellraw @a {"text":"$globalTimer$","color":"cyan"};
    
    tellraw @a {"text":"Red Team Score: ","color":"red"};
    tellraw @a {"text":"$redTeamScore$","color":"gold"};
    
    tellraw @a {"text":"All Players Score: ","color":"purple"};
    tellraw @a {"text":"$allPlayersScore$","color":"light_purple"};
    
    say "Scope tellraw test complete";
}

// Function to test raw blocks with scope context
function "test_raw_with_scope_context" {
    say "Testing raw blocks with scope context";
    
    // Use MDL variables in raw blocks
    $!raw
    scoreboard players set @s mdl_player_score 100
    scoreboard players set @e[type=armor_stand,tag=mdl_server,limit=1] mdl_global_timer 0
    scoreboard players set @a[team=red] mdl_red_team_score 50
    raw!$
    
    say "Raw with scope context test complete";
}

// Function to test complex scope scenarios
function "test_complex_scope_scenarios" {
    say "Testing complex scope scenarios";
    
    // Scenario 1: Player progression affects global state
    if "$playerLevel$ >= 10" {
        globalPhase = globalPhase + 1;
        say "Player reached level 10, advancing global phase";
    }
    
    // Scenario 2: Team competition affects all players
    if "$redTeamScore$ > 200 && $blueTeamScore$ > 200" {
        allPlayersScore = allPlayersScore + 25;
        say "Both teams are strong, bonus for all players";
    }
    
    // Scenario 3: Global events affect individual players
    if "$globalPhase$ == 3" {
        playerHealth = playerHealth + 5;
        playerScore = playerScore + 20;
        say "Global phase 3 active, player buffs applied";
    }
    
    // Scenario 4: Entity state affects player state
    if "$entityCounter$ > 5" {
        playerLevel = playerLevel + 1;
        say "Many entities detected, player level increased";
    }
    
    say "Complex scope scenarios test complete";
}

// Main test function that runs all scope tests
function "run_all_scope_tests" {
    say "Starting comprehensive scope testing";
    
    // Initialize all variables
    playerScore = 0;
    playerHealth = 20;
    playerLevel = 1;
    globalTimer = 0;
    globalPhase = 1;
    globalCounter = 0;
    allPlayersScore = 0;
    allPlayersHealth = 20;
    redTeamScore = 0;
    blueTeamScore = 0;
    greenTeamScore = 0;
    entityCounter = 0;
    serverData = 0;
    adminData = 0;
    vipData = 0;
    
    say "Variables initialized";
    
    // Run all scope tests
    function "scope_test:test_player_scope";
    function "scope_test:test_global_scope";
    function "scope_test:test_all_players_scope";
    function "scope_test:test_team_scope";
    function "scope_test:test_entity_scope";
    function "scope_test:test_complex_selector_scope";
    function "scope_test:test_scoped_function_calls";
    function "scope_test:test_scope_interactions";
    function "scope_test:test_scope_conditionals";
    function "scope_test:test_scope_tellraw";
    function "scope_test:test_raw_with_scope_context";
    function "scope_test:test_complex_scope_scenarios";
    
    say "All scope tests complete!";
}

// Hook to run tests on load
on_load "scope_test:run_all_scope_tests";
