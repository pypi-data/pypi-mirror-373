[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm>=8.0", "numpy"]
build-backend = "setuptools.build_meta"
# build-backend = "pypibuild"
# backend-path = ["."]


[tool.setuptools_scm]

[project]
name = "onepower"
description = "Python package for computing power spectra and one-point statistics using the halo model framework."
readme = "README.md"
authors = [
    {name="Andrej Dvornik", email="andrej.dvornik@me.com"},
    {name="Maria Cristina Fortuna", email="maricri.fortuna@gmail.com"},
    {name="Marika Asgari", email="marika.asgari@newcastle.ac.uk"},
]
license = "MIT"
license-files = ["LICEN[CS]E*"]

requires-python = ">=3.10, <3.13"
classifiers = [
    "Development Status :: 6 - Mature",
    "Intended Audience :: Science/Research",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Natural Language :: English",
	"Topic :: Scientific/Engineering :: Physics",
	"Topic :: Scientific/Engineering :: Astronomy",
]
dependencies = [
    #"hmf @ git+https://github.com/andrejdvornik/hmf.git@main",
    #"halomod @ git+https://github.com/andrejdvornik/halomod.git@main",
    "numpy>=2.0",
    "astropy>=6.0.0",
    "dark_emulator==1.1.2",
    "scipy<1.14.0",
    "camb>=1.4.0",
    "numexpr>=2.8.7",
    "colossus>=1.3.5",
    "hankel>=1.2.2",
    "click",
    "toml>=0.10.1",
    "rich",
    "pre-commit",
]
#dynamic = ["version"]
version = "0.1.5"

[project.optional-dependencies]
docs = [
	"sphinx>=6.1.3",
	"numpydoc>=0.8.0",
	"nbsphinx",
    "ipython",
    "pandoc",
    "sphinx_rtd_theme",
    "pydata-sphinx-theme",
    "importlib_metadata",
    "ipykernel",
    "docutils>=0.19",
]
tests = [
	"coverage>=4.5.1",
	"pytest>=3.5.1",
	"pytest-cov>=2.5.1",
	"pytest-plt",
    "pytest-runner",
    "PyYAML",
	"mpmath>=1.0.0",
	"numba",
]
dev = [
    "onepower[docs,tests]"
]
all = [
    "onepower[dev]"
]


[tool.pytest.ini_options]
addopts = "--cov onepower --cov-report term-missing --verbose"
norecursedirs = [
	"dist",
	"build",
	".tox",
]
testpaths = "tests"


[tool.coverage.run]
source = ["onepower"]
omit = [
    "tests/*",
    "*site-packages/*",
    "*hmf/*",
    "*halomod/*"
]

[tool.coverage.report]
omit = [
    "tests/*",
    "*site-packages*",
    "*hmf/*",
    "*halomod/*"
]


[tool.ruff]
# Line length
line-length = 88

include = ["*.pyi", "*.py"]

# Exclude files/directories
exclude = [
    "docs/*",
    "legacy_input_files/*",
    "benchmarks/*",
    "cosmosis_modules/example_ini_files/*",
    "cosmosis_modules/legacy/*",
    "cosmosis_modules/pk_to_real/*",
    "cosmosis_modules/defaults_dictionary.txt",
    "cosmosis_modules/module.yaml",
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "T001", "T201", "B018"]
"docs/conf.py" = ["D", "A"]
"**/__init__.py" = ["F401"]
"cosmosis_modules/onepower_interface.py" = ["C901"]


[tool.ruff.format]
# Equivalent to Black's skip-string-normalization
quote-style = "single"
line-ending = "lf"

[tool.ruff.lint.pydocstyle]
convention = 'numpy'

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint]
extend-select = [
    "E",    # pycodestyle
    "W",    # pycodestyle warning
    "UP",   # pyupgrade
    "C90",  # mccabe complexity
    "B",    # bugbear
    "A",    # builtins
    "C4",   # comprehensions
    "DTZ",  # datetime
    "FA",   # future annotations
    "PIE",  # flake8-pie
    "T",    # print statements
    "SIM",  # simplify
    "PTH",  # use Pathlib
    "NPY",  # numpy-specific rules
    "PERF", # performance
]

# Ignore rules equivalent to flake8's ignore list
ignore = [
    "E203",   # No space before colon
    "D107",   # Missing docstring in __init__
    "D401",   # First line should be in imperative mood
    "A003",   # Class attribute is shadowing a Python builtin
    "D102",   # Missing docstring in public method
    "D200",   # One-line docstring should fit on one line with quotes
    "D400",   # First line should end with a period
    "E501",   # Line too long
    "D105",   # Missing docstring in magic method
    "D204",   # 1 blank line required after class docstring
    "D202",   # No blank lines allowed after function docstring
    "D205",   # 1 blank line required between summary line and description
    "G004",   # Logging statement uses f-string
    "B028",   # No explicit stacklevel keyword argument in warn calls
    "D100",   # Missing docstring in public module
    "F401",   # Unused import
    "F841",   # Unused variable
    "E731",   # Do not assign a lambda expression, use a def
    "B008",   # Do not perform function calls in argument defaults
    "B009",   # Do not call getattr with a constant attribute value
    "B023",   # Function definition does not bind loop variable
]

# Import organization (Ruff's import sorting is enabled by default)
[tool.ruff.lint.isort]
known-first-party = ["onepower"]

# Import sections (Ruff uses a similar section order)
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

# Default section for imports (same as isort's default_section)
default-section = "first-party"

# Multi-line output style (3 = "Vertical Hanging Indent")
combine-as-imports = true
lines-after-imports = 2
