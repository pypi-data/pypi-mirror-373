[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "django-resurrected"
version = "0.3.0"
description = "Soft-delete functionality for Django projects with relationship-aware deletion and restoration."
readme = "README.md"
keywords = [
  "recovery",
  "restore",
  "resurrect",
  "retention",
  "soft-delete",
  "softdelete",
  "trash",
  "undelete",
]
license = "MIT"
license-files = [ "LICEN[CS]E.*" ]
authors = [
  { name = "Krzysztof Czopkiewicz", email = "krzysiek951@gmail.com" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Django",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Framework :: Django :: 5.1",
  "Framework :: Django :: 5.2",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "django>=4.2",
]

urls.Repository = "https://github.com/krzysiek951/django-resurrected"

[dependency-groups]
dev = [
  "coverage>=7.6.1",
  "freezegun>=1.5.3",
  "model-bakery>=1.20.5",
  "pre-commit>=3.5",
  "pytest>=8.3.5",
  "pytest-django>=4.11.1",
  "pytz>=2025.2",
  "ruff>=0.12.5",
  "tox>=4.2",
  "tox-uv>=0.1",
]

[tool.ruff]
extend-exclude = [
  "*/migrations/*",
]

lint.select = [
  "A",     # flake8-builtins
  "ASYNC", # https://docs.astral.sh/ruff/rules/#flake8-async-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # unnecessary comprehensions, map()
  "COM",   # flake8-commas
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle
  "ERA",   # No commented out code
  "EXE",   # flake8-executable
  "F",     # pyflakes
  "FLY",   # flynt
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # https://github.com/joaopalmeiro/flake8-import-conventions
  "ISC",   # https://pypi.org/project/flake8-implicit-str-concat/
  "LOG",   # flake8-logging
  "PERF",  # perflint
  "PIE",   # https://pypi.org/project/flake8-pie/
  "PLC",   # Pylint conventions
  "PLE",   # Pylint error
  "PLW",   # Pylint warnings
  "PT",    # https://pypi.org/project/flake8-pytest-style/
  "PTH",   # flake8 use pathlib
  "RET",   # https://pypi.org/project/flake8-return/
  "RUF",   # Ruff rules
  "S",     # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
  "SIM",   # https://pypi.org/project/flake8-simplify/
  "T",     # flake8-debugger
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # pycodestyle
]
lint.ignore = [ "COM812" ]
lint.per-file-ignores."tests/**/*.py" = [
  "S101", # Allow using 'assert' in tests.
]
lint.isort.force-single-line = true
lint.mccabe.max-complexity = 10

[tool.pytest.ini_options]
pythonpath = [ "src", "examples/test_project" ]
addopts = [ "--import-mode=importlib" ]
DJANGO_SETTINGS_MODULE = "test_project.settings"
python_files = [ "test_*.py", "*_test.py", "testing/python/*.py" ]

[tool.coverage.run]
branch = true
parallel = true
source = [
  "src",
  "tests",
]

[tool.coverage.paths]
source = [
  "src",
  ".tox/**/site-packages",
]

[tool.coverage.report]
show_missing = true
exclude_also = [
  "if TYPE_CHECKING:",
]
