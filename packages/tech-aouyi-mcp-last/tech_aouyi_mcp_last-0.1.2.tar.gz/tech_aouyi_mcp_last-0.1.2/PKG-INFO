Metadata-Version: 2.3
Name: tech-aouyi-mcp-last
Version: 0.1.2
Summary: Add your description here
Requires-Dist: mcp[cli]>=1.13.1
Requires-Python: >=3.13
Description-Content-Type: text/markdown

# 智能代码分析 MCP 服务器 - 蓝耘杯决赛版

🏆 **蓝耘杯 MCP 挑战赛决赛作品** - 代码质量分析和安全检查平台

## 🎯 核心价值与竞争优势

### 💼 应用价值 (40%)
- **解决实际问题**: 代码安全风险管理、质量控制自动化
- **市场需求**: 满足 DevSecOps 流程中的安全检查需求
- **实际效益**: 提升代码审查效率，自动化安全风险检测

### 🚀 技术先进性 (30%)
- **防恶意代码执行**: 沙箱化分析环境，多层路径验证
- **权限控制**: 企业级访问控制和安全边界防护
- **错误处理**: 健壮的异常处理和超时保护机制
- **可扩展性**: 支持 9+ 种编程语言，模块化架构设计

### 🔍 核心功能特色

#### 🛡️ 安全检查
- **多维度安全扫描**: 多种安全模式识别
- **智能风险评估**: 量化风险分数和等级分类
- **合规性检查**: 自动判断是否需要人工审核

#### 📊 代码质量评估
- **综合质量分数**: 基于多个维度的量化评估
- **最佳实践检查**: 语言特定的编码规范验证
- **智能建议**: 针对性的代码改进建议

#### 🛠️ 智能工具集
- **JSON 安全验证**: 防 JSON 炸弹攻击，敏感信息检测
- **文件智能浏览**: 快速安全扫描和统计分析
- **项目健康度**: 综合项目结构和质量评估

## 🚀 快速部署

### 环境要求
- Python >= 3.13
- mcp[cli] >= 1.13.0

### 一键启动
```bash
# 安装依赖
pip install mcp[cli]

# 启动服务
cd d:\mcp-last
python main.py

# 验证运行
echo "🚀 智能代码分析服务已启动"
```

## 📖 使用示例

### 代码分析
```
分析main.py文件的代码质量
```
**返回**: 文件信息 + 质量评分 + 安全检查 + 改进建议

### JSON格式化
```
格式化这个JSON: {"name":"test","data":[1,2,3]}
```
**返回**: 格式化的JSON + 安全验证 + 压缩率统计

### 文件浏览
```
列出当前目录的代码文件
```
**返回**: 文件列表 + 类型统计 + 安全提醒

## 📊 支持的技术栈

### 编程语言 (9+)
- **主流语言**: Python, JavaScript, TypeScript, Java
- **系统语言**: Go, Rust, C/C++
- **数据格式**: JSON, Markdown, Text

### 安全检查覆盖
- **凭据泄露**: 密码、API密钥、访问令牌
- **代码注入**: eval()、exec()、os.system()
- **XSS 风险**: innerHTML、document.write、dangerouslySetInnerHTML
- **反序列化**: pickle.loads 等不安全操作

## 🔒 安全特性

- **路径验证**: 防止访问系统敏感目录和路径遍历攻击
- **文件大小限制**: 最大5MB，防止资源耗尽
- **扩展名白名单**: 仅支持安全的文件类型
- **超时保护**: 30秒分析超时，防止无限循环
- **沙箱机制**: 隔离分析环境，防止恶意代码执行

## 🎯 专业特色

### 智能安全检查
- 硬编码密码检测
- API密钥泄露检测
- 危险函数使用检测
- XSS风险识别
- 量化风险评分

### 多语言代码分析
- **Python**: 导入、函数、类统计 + 最佳实践检查
- **JavaScript**: ES6特性检测 + 安全风险识别
- **JSON**: 有效性验证 + 安全内容检查

## 📋 MCP客户端配置

```json
{
  "mcpServers": {
    "code-analyzer": {
      "command": "python",
      "args": ["main.py"],
      "cwd": "d:\\mcp-last"
    }
  }
}
```

## 🧪 测试命令

```bash
# 代码分析测试
分析main.py文件

# JSON格式化测试  
格式化JSON: {"test": "data"}

# 文件浏览测试
列出当前目录文件

# 系统统计测试
获取系统运行统计
```

## 🏆 竞争优势与创新点

### 💼 应用价值创新
- **实用定位**: 面向 DevSecOps 和代码安全治理
- **量化效益**: 可量化的安全风险降低和效率提升
- **效率优化**: 提升代码审查效率，自动化安全检测

### 🚀 技术先进性
- **安全沙箱**: 多层防护，防止恶意代码执行
- **智能分析**: 风险识别和建议生成
- **实时监控**: 性能统计和健康度监控

### 🌐 平台结合度
- **MCP 协议优化**: 充分利用 MCP 的工具、资源、提示词能力
- **扩展性设计**: 模块化架构，易于集成和扩展
- **生态贡献**: 为 MCP 生态提供安全工具参考

## 📈 性能指标

- **分析速度**: < 2秒/文件 (平均)
- **安全检测**: 多种常见漏洞类型识别
- **准确性**: 精准匹配算法，低误报率
- **并发支持**: 多文件同时分析

## 📁 项目结构

```
mcp-last/
├── main.py                    # 核心MCP服务器
├── README.md                  # 项目说明文档
├── TEST_GUIDE.md             # 测试指南
├── SECURITY_TEST_MANUAL.md   # 安全测试手册
├── PROJECT_SUMMARY.md        # 项目总结
├── test_files/               # 测试文件目录
│   ├── test_python.py        # Python测试文件
│   ├── test_javascript.js    # JavaScript测试文件
│   ├── test_secure.json      # 安全JSON测试
│   ├── test_malicious.py     # 恶意代码测试
│   └── test_large.txt        # 大文件测试
├── docs/                     # 文档目录
│   ├── API_REFERENCE.md      # API参考文档
│   └── DEPLOYMENT_GUIDE.md   # 部署指南
└── package.json              # 项目配置
```

---

🏆 **蓝耘杯 MCP 挑战赛决赛作品**  
🎯 **定位**: 代码安全治理平台  
🚀 **特色**: 智能安全检查 + 量化风险评估 + 多层安全防护  
✨ **优势**: 高精度 + 低误报 + 强安全 + 易集成

## 许可证

MIT License