[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aisearchapi-client"
version = "1.0.7"
description = "Python client library for AI Search API - search and retrieve intelligent responses with context awareness"
readme = "README-pypi.md"
license = {file = "LICENSE"}
authors = [
    {name = "AI Search API", email = "admin@aisearchapi.io"}
]
maintainers = [
    {name = "AI Search API", email = "admin@aisearchapi.io"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed"
]
keywords = [
  "langchain",
  "langchain-integration",
  "langchain-extension",
  "langchain-tools",
  "aisearchapi",
  "ai search api",
  "semantic search",
  "web search api",
  "search api",
  "summarization api",
  "summary api",
  "contextual ai",
  "contextual search",
  "ai agents",
  "intelligent agents",
  "llm",
  "large language models",
  "chat models",
  "ai chatbot",
  "nlp",
  "research chain",
  "fact checking",
  "question answering",
  "automation",
  "python ai"
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.25.0",
    "typing-extensions>=4.0.0; python_version<'3.10'"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "types-requests>=2.25.0"
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0"
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-asyncio>=0.18.0",
    "responses>=0.18.0"
]

[project.urls]
Homepage = "https://github.com/aisearchapi/aisearchapi-python"
Documentation = "https://aisearchapi.readthedocs.io/"
Repository = "https://github.com/aisearchapi/aisearchapi-python"
Issues = "https://github.com/aisearchapi/aisearchapi-python/issues"
Changelog = "https://github.com/aisearchapi/aisearchapi-python/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
aisearchapi = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=aisearchapi",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]