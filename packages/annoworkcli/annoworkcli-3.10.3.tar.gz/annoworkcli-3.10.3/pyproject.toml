[project]
name = "annoworkcli"
dynamic = ["version"]
description = "AnnoworkのCLI(Command Line Interface)"
authors = [{ name = "Kurusugawa Computer Inc." }]
requires-python = ">=3.10"
readme = "README.md"
license = "MIT"
keywords = [
    "annowork",
    "cli",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Environment :: Console",
    "Topic :: Utilities",
    "Operating System :: OS Independent",
]
dependencies = [
    "pyyaml",
    "annoworkapi>=3.2.1,<4",
    "annofabapi>=1,<2",
    "more-itertools",
    "pandas",
    "isodate",
    "annofabcli>=1.90",
]

[project.urls]
Repository = "https://github.com/kurusugawa-computer/annowork-cli"

[project.scripts]
annoworkcli = "annoworkcli.__main__:main"

[dependency-groups]
test = [
    "pytest>=8,<9",
    "pytest-xdist",
    "pytest-cov",
]
linter = [
    "mypy>=1; python_version >= '3.12'",
    "pylint>=3 ; python_version >= '3.12'",
    "ruff>=0.12; python_version >= '3.12'",
    "types-requests",
    "types-python-dateutil",
    "types-PyYAML",
]
documentation = [
    "sphinx>=8,<9 ; python_version >= '3.12'",
    "pydata-sphinx-theme>=0.13 ; python_version >= '3.12'",
    "sphinx-last-updated-by-git ; python_version >= '3.12'",
    "sphinx-argparse ; python_version >= '3.12'",
]
dev = ["ipython"]


[tool.uv]
default-groups = ["dev", "test", "linter", "documentation"]
package = true




[tool.mypy]
ignore_missing_imports = true

check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true

show_column_numbers = true
warn_unused_configs = true



[tool.ruff]
target-version = "py310"
line-length = 150

[tool.ruff.lint]
ignore = [
    "G004", # `logging-f-string` : loggingでf-stringを使いたいので無視する
    "PD901", #すでに`df`という変数をいろんなところで使っているため
    "PD002", #すでにpandasで`inplace=True`はいろんなところで使っているため
    "RUF001", # 全角記号など`ambiguous unicode character`も使いたいため
    "RUF002",# 全角記号など`ambiguous unicode character`も使いたいため
    "RUF003",# 全角記号など`ambiguous unicode character`も使いたいため
    "PLC1901", # compare-to-empty-string : `if a == "`のように空文字列で直接比較したいときがあるため
    "PLR2004", # magic-value-comparison: listのサイズで判定するときがよくあるため
    "ERA", # : 役立つこともあるが、コメントアウトしていないコードも警告されるので無視する
    "PERF203", # try-except-in-loop: ループ内でtry-exceptを使うこともあるため無視する。
    "FIX", # TODOやFIXMEを使うため無視する
    "TD", # TODOコメントの書き方に気にしていないので無視する

    # 以下のルールはコードに合っていないので無効化した
    "RSE", # flake8-raise
    "D", # pydocstyle, Docstringを中途半端にしか書いていないので、除外する
    "C90", # mccabe
    "SLF", #  flake8-self
    "BLE", # flake8-blind-except
    "TRY", # tryceratops
    "COM", # flake8-commas
    "S", # flake8-bandit
    "EM",#flake8-errmsg
    "EXE", # flake8-executable
    "ICN", # flake8-import-conventions
    "RET",#flake8-return
    "SIM",#flake8-simplify
    "TCH", # flake8-type-checking
    "ISC", #flake8-implicit-str-concat
    "PT", # flake8-pytest-style
]

select = [
    "ALL"
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.per-file-ignores]
# テストコードはチェックを緩和する
"tests/**.py" = [
    "PGH",  # pygrep-hooks
    "DTZ",  # flake8-datetimez
    "ANN",  # flake8-annotations
    "E501",  # line-too-long
    "RUF100",  # unused-noqa
    "N", # pep8-naming
    "PLC2401", # non-ascii-name
    "PTH", # テストコードはpathlibを使わないこともあるため
]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"


[tool.hatch.version]
source = "uv-dynamic-versioning"


