import ENDFtk
import pyPapillonNDL as pndl
from scarabee import *
from .ir_lambda import generate_U238_U235_ir_lambda
import subprocess
import os
import numpy as np
from typing import Optional

# Global variables initialized for computing IR parameters
_U235_ace_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "U235_600.txt")
_U238_ace_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "U238_600.txt")

if not os.path.exists(_U235_ace_path):
    orig_dir = os.getcwd()
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    subprocess.run(["frendy", "process_U235.txt"])
    os.chdir(orig_dir)

if not os.path.exists(_U238_ace_path):
    orig_dir = os.getcwd()
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    subprocess.run(["frendy", "process_U238.txt"])
    os.chdir(orig_dir)

_ace = pndl.ACE(_U235_ace_path)
_U238 = pndl.STNeutron(_ace)

_ace = pndl.ACE(_U238_ace_path)
_U235 = pndl.STNeutron(_ace)


def validate_condensation_scheme(condensation_scheme, NG):
    for G in range(len(condensation_scheme)):
        if len(condensation_scheme[G]) != 2:
            raise ValueError(
                f"Macrogroup index {G} does not have two microgroup indices."
            )

        if condensation_scheme[G][0] > condensation_scheme[G][1]:
            raise ValueError(f"The microgroups in macrogroup index {G} are not ordered")

        if G < len(condensation_scheme) - 1:
            # Ensure the macrogroups are ordered
            if condensation_scheme[G][1] != condensation_scheme[G + 1][0] - 1:
                raise ValueError(f"The macrogroups {G} and {G+1} are not continuous.")

    if condensation_scheme[-1][-1] != NG - 1:
        raise ValueError("The condensation scheme does not include all microgroups.")


class GroupStructure:
    def __init__(
        self,
        name: str,
        id: Optional[str],
        first_res_grp,
        last_res_grp,
        condensation_scheme,
        cmfd_condensation_scheme,
        bounds,
    ):
        self.name = name
        self.id = id
        self.bounds = bounds
        self.condensation_scheme = condensation_scheme
        self.cmfd_condensation_scheme = cmfd_condensation_scheme
        self.first_res_grp = first_res_grp
        self.last_res_grp = last_res_grp

        # Make sure things are coherent
        assert isinstance(self.bounds, np.ndarray), "bounds must be a NumPy array"
        assert isinstance(
            self.condensation_scheme, np.ndarray
        ), "condensation_scheme must be a NumPy array"
        assert self.bounds.ndim == 1, "bounds must be a 1D NumPy array"
        assert self.bounds.size > 10, "Must have at least 10 energy groups"

        # Make sure condensation scheme is okay
        validate_condensation_scheme(self.condensation_scheme, self.ngroups)

        # Make sure CMFD condensation scheme is okay
        validate_condensation_scheme(self.cmfd_condensation_scheme, self.ngroups)

    @property
    def ngroups(self):
        return self.bounds.size - 1


_GROUP_STRUCTURES = {
    # Lower resonant group bound from upper limit of URR in U238. Higher resonant group based on table in Stamm'ler and Abbate
    "WIMS-69": GroupStructure(
        "WIMS-69",
        "epri-69",
        8,
        26,
        np.array([[0, 44], [45, 68]]),
        np.array(
            [
                [0, 4],
                [5, 14],
                [15, 26],
                [27, 31],
                [32, 32],
                [33, 34],
                [35, 37],
                [38, 39],
                [40, 42],
                [43, 44],
                [45, 47],
                [48, 50],
                [51, 54],
                [55, 58],
                [59, 62],
                [63, 68],
            ]
        ),
        np.array(
            [
                1.00000e01,
                6.06550e00,
                3.67900e00,
                2.23100e00,
                1.35300e00,
                8.21000e-01,
                5.00000e-01,
                3.02500e-01,
                1.83000e-01,
                1.11000e-01,
                6.73400e-02,
                4.08500e-02,
                2.47800e-02,
                1.50300e-02,
                9.11800e-03,
                5.53000e-03,
                3.51910e-03,
                2.23945e-03,
                1.42510e-03,
                9.06899e-04,
                3.67263e-04,
                1.48729e-04,
                7.55014e-05,
                4.80520e-05,
                2.77000e-05,
                1.59680e-05,
                9.87700e-06,
                4.00000e-06,
                3.30000e-06,
                2.60000e-06,
                2.10000e-06,
                1.50000e-06,
                1.30000e-06,
                1.15000e-06,
                1.12300e-06,
                1.09700e-06,
                1.07100e-06,
                1.04500e-06,
                1.02000e-06,
                9.96000e-07,
                9.72000e-07,
                9.50000e-07,
                9.10000e-07,
                8.50000e-07,
                7.80000e-07,
                6.25000e-07,
                5.00000e-07,
                4.00000e-07,
                3.50000e-07,
                3.20000e-07,
                3.00000e-07,
                2.80000e-07,
                2.50000e-07,
                2.20000e-07,
                1.80000e-07,
                1.40000e-07,
                1.00000e-07,
                8.00000e-08,
                6.70000e-08,
                5.80000e-08,
                5.00000e-08,
                4.20000e-08,
                3.50000e-08,
                3.00000e-08,
                2.50000e-08,
                2.00000e-08,
                1.50000e-08,
                1.00000e-08,
                5.00000e-09,
                1.00000e-11,
            ]
        )
        * 1.0e6,
    ),
    "SCARABEE-125": GroupStructure(
        "SCARABEE-125",
        None,
        21,
        82,
        np.array([[0, 100], [101, 124]]),
        np.array(
            [
                [0, 13],
                [14, 27],
                [28, 82],
                [83, 87],
                [88, 88],
                [89, 90],
                [91, 93],
                [94, 95],
                [96, 98],
                [99, 100],
                [101, 103],
                [104, 106],
                [107, 110],
                [111, 114],
                [115, 118],
                [119, 124],
            ]
        ),
        np.array(
            [
                1.00000e01,
                6.06550e00,
                4.06600e00,
                3.32900e00,
                2.72500e00,
                2.23100e00,
                1.90100e00,
                1.63700e00,
                1.40600e00,
                1.35300e00,
                1.28700e00,
                1.16200e00,
                1.05100e00,
                9.51100e-01,
                8.60000e-01,
                7.06500e-01,
                5.00000e-01,
                4.56000e-01,
                4.12500e-01,
                3.83900e-01,
                3.02500e-01,
                1.83000e-01,
                1.11000e-01,
                6.73400e-02,
                4.08500e-02,
                2.47800e-02,
                1.50300e-02,
                9.11800e-03,
                5.53000e-03,
                3.51910e-03,
                2.23945e-03,
                1.42510e-03,
                9.06899e-04,
                3.67263e-04,
                1.48729e-04,
                7.55014e-05,
                4.80520e-05,
                4.01700e-05,
                3.37200e-05,
                2.77000e-05,
                2.45900e-05,
                2.23800e-05,
                2.17000e-05,
                2.13400e-05,
                2.11400e-05,
                2.10600e-05,
                2.06800e-05,
                2.06000e-05,
                2.04200e-05,
                2.00700e-05,
                1.96000e-05,
                1.93900e-05,
                1.92000e-05,
                1.90800e-05,
                1.59680e-05,
                1.26000e-05,
                1.24700e-05,
                1.23100e-05,
                1.21300e-05,
                1.18200e-05,
                1.17100e-05,
                1.15900e-05,
                9.87700e-06,
                8.98000e-06,
                8.80000e-06,
                8.67400e-06,
                8.52400e-06,
                7.74000e-06,
                7.14000e-06,
                6.99400e-06,
                6.91800e-06,
                6.83500e-06,
                6.77600e-06,
                6.74200e-06,
                6.60600e-06,
                6.55600e-06,
                6.48200e-06,
                6.36000e-06,
                6.16000e-06,
                5.80000e-06,
                5.48800e-06,
                4.93300e-06,
                4.76800e-06,
                4.00000e-06,
                3.30000e-06,
                2.60000e-06,
                2.10000e-06,
                1.50000e-06,
                1.30000e-06,
                1.15000e-06,
                1.12300e-06,
                1.09700e-06,
                1.07100e-06,
                1.04500e-06,
                1.02000e-06,
                9.96000e-07,
                9.72000e-07,
                9.50000e-07,
                9.10000e-07,
                8.50000e-07,
                7.80000e-07,
                6.25000e-07,
                5.00000e-07,
                4.00000e-07,
                3.50000e-07,
                3.20000e-07,
                3.00000e-07,
                2.80000e-07,
                2.50000e-07,
                2.20000e-07,
                1.80000e-07,
                1.40000e-07,
                1.00000e-07,
                8.00000e-08,
                6.70000e-08,
                5.80000e-08,
                5.00000e-08,
                4.20000e-08,
                3.50000e-08,
                3.00000e-08,
                2.50000e-08,
                2.00000e-08,
                1.50000e-08,
                1.00000e-08,
                5.00000e-09,
                1.00000e-11,
            ]
        )
        * 1.0e6,
    ),
    "SCARABEE-213": GroupStructure(
        "SCARABEE-213",
        None,
        23,
        39,
        np.array([[0, 188], [189, 212]]),
        np.array(
            [
                [0, 13],
                [14, 29],
                [30, 142],
                [143, 172],
                [173, 176],
                [177, 178],
                [179, 181],
                [182, 183],
                [184, 186],
                [187, 188],
                [189, 191],
                [192, 194],
                [195, 198],
                [199, 202],
                [203, 206],
                [207, 212],
            ]
        ),
        np.array(
            [
                1.000000e07,
                6.065500e06,
                3.679000e06,
                3.328707e06,
                2.725314e06,
                2.231299e06,
                1.901387e06,
                1.636539e06,
                1.405768e06,
                1.336941e06,
                1.286961e06,
                1.162048e06,
                1.051149e06,
                9.511189e05,
                8.600058e05,
                7.065112e05,
                5.784425e05,
                4.940018e05,
                4.560211e05,
                4.125012e05,
                3.838835e05,
                3.206464e05,
                3.025000e05,
                1.830000e05,
                1.110000e05,
                6.734000e04,
                4.085000e04,
                2.478000e04,
                1.503000e04,
                9.118000e03,
                5.530000e03,
                3.519100e03,
                2.239450e03,
                1.425100e03,
                9.068990e02,
                3.672630e02,
                1.487290e02,
                7.550140e01,
                4.805200e01,
                2.770000e01,
                2.253556e01,
                2.237836e01,
                2.215569e01,
                2.200114e01,
                2.170178e01,
                2.148585e01,
                2.133597e01,
                2.122956e01,
                2.114481e01,
                2.106040e01,
                2.097632e01,
                2.076761e01,
                2.068470e01,
                2.060213e01,
                2.051988e01,
                2.041754e01,
                2.027512e01,
                2.007338e01,
                1.959735e01,
                1.939265e01,
                1.919969e01,
                1.908484e01,
                1.795905e01,
                1.775903e01,
                1.756476e01,
                1.744572e01,
                1.683053e01,
                1.655014e01,
                1.604977e01,
                1.577923e01,
                1.486626e01,
                1.473012e01,
                1.459522e01,
                1.447024e01,
                1.425053e01,
                1.404961e01,
                1.354604e01,
                1.332970e01,
                1.259997e01,
                1.247210e01,
                1.230855e01,
                1.213015e01,
                1.197947e01,
                1.181529e01,
                1.170943e01,
                1.158944e01,
                1.126944e01,
                1.105292e01,
                1.080376e01,
                1.057925e01,
                9.500024e00,
                9.140311e00,
                8.979950e00,
                8.800375e00,
                8.673690e00,
                8.524074e00,
                8.300322e00,
                8.130272e00,
                7.970079e00,
                7.839651e00,
                7.739943e00,
                7.600350e00,
                7.380153e00,
                7.139869e00,
                6.994292e00,
                6.917776e00,
                6.870208e00,
                6.835259e00,
                6.810696e00,
                6.791653e00,
                6.776050e00,
                6.759807e00,
                6.742254e00,
                6.716683e00,
                6.631257e00,
                6.606106e00,
                6.588293e00,
                6.571843e00,
                6.556090e00,
                6.539066e00,
                6.514916e00,
                6.481775e00,
                6.432057e00,
                6.359784e00,
                6.280153e00,
                6.160108e00,
                6.059906e00,
                5.960142e00,
                5.800211e00,
                5.720146e00,
                5.619790e00,
                5.530036e00,
                5.488167e00,
                5.410245e00,
                5.380032e00,
                5.320112e00,
                5.210076e00,
                5.109974e00,
                4.933232e00,
                4.767845e00,
                4.419800e00,
                4.309812e00,
                4.219828e00,
                4.000000e00,
                3.882170e00,
                3.712087e00,
                3.543073e00,
                3.142109e00,
                2.884047e00,
                2.775121e00,
                2.740922e00,
                2.719898e00,
                2.700115e00,
                2.640041e00,
                2.620053e00,
                2.590094e00,
                2.550003e00,
                2.469941e00,
                2.330061e00,
                2.272986e00,
                2.217087e00,
                2.156948e00,
                2.070095e00,
                1.989920e00,
                1.900077e00,
                1.779966e00,
                1.668949e00,
                1.588030e00,
                1.519976e00,
                1.443967e00,
                1.410007e00,
                1.380981e00,
                1.330952e00,
                1.293038e00,
                1.250939e00,
                1.213968e00,
                1.169989e00,
                1.147969e00,
                1.123000e00,
                1.097000e00,
                1.071000e00,
                1.045000e00,
                1.020000e00,
                9.960000e-01,
                9.720000e-01,
                9.500000e-01,
                9.100000e-01,
                8.500000e-01,
                7.800000e-01,
                6.250000e-01,
                5.000000e-01,
                4.000000e-01,
                3.500000e-01,
                3.200000e-01,
                3.000000e-01,
                2.800000e-01,
                2.500000e-01,
                2.200000e-01,
                1.800000e-01,
                1.400000e-01,
                1.000000e-01,
                8.000000e-02,
                6.700000e-02,
                5.800000e-02,
                5.000000e-02,
                4.200000e-02,
                3.500000e-02,
                3.000000e-02,
                2.500000e-02,
                2.000000e-02,
                1.500000e-02,
                1.000000e-02,
                5.000000e-03,
                1.000000e-05,
            ]
        ),
    ),
    # Lower resonant group bound from upper limit of URR in U238. Higher resonant group bound from IR-lambda tool on U238
    "APOLLO-99": GroupStructure(
        "APOLLO-99",
        None,
        16,
        48,
        np.array([[0, 74], [75, 98]]),
        np.array(
            [
                [0, 11],
                [12, 24],
                [25, 49],
                [50, 63],
                [64, 65],
                [66, 66],
                [67, 68],
                [69, 69],
                [70, 71],
                [72, 74],
                [75, 79],
                [80, 81],
                [82, 86],
                [87, 90],
                [91, 92],
                [93, 98],
            ]
        ),
        np.array(
            [
                1.00000000e07,
                8.18730800e06,
                6.70320100e06,
                5.48811700e06,
                4.49329000e06,
                3.67879400e06,
                3.01194300e06,
                2.46597100e06,
                2.01896600e06,
                1.65299000e06,
                1.35335300e06,
                1.10803200e06,
                9.07179875e05,
                6.08101125e05,
                4.07622094e05,
                2.73237406e05,
                1.83156406e05,
                1.22773500e05,
                8.22975312e04,
                5.51656602e04,
                3.69786602e04,
                2.47875195e04,
                1.66155801e04,
                1.11377598e04,
                7.46585889e03,
                5.00451709e03,
                3.35462598e03,
                2.24867407e03,
                1.50733203e03,
                1.01039398e03,
                6.77287720e02,
                4.53999298e02,
                3.04325012e02,
                2.03995193e02,
                1.36742004e02,
                9.16609268e01,
                6.79040833e01,
                5.55951691e01,
                4.55174789e01,
                3.72665291e01,
                3.05112591e01,
                2.49805107e01,
                2.04523201e01,
                1.67449493e01,
                1.37095900e01,
                1.12244701e01,
                9.18981743e00,
                7.52398682e00,
                6.16012096e00,
                5.04347706e00,
                4.12925005e00,
                3.38074493e00,
                2.76792002e00,
                2.35999990e00,
                2.13000011e00,
                2.01999998e00,
                1.92999995e00,
                1.84000003e00,
                1.75500000e00,
                1.66999996e00,
                1.59000003e00,
                1.50999999e00,
                1.44000006e00,
                1.37000000e00,
                1.30499995e00,
                1.23500001e00,
                1.16999996e00,
                1.11000001e00,
                1.07000005e00,
                1.03499997e00,
                9.86000121e-01,
                9.30000007e-01,
                8.60000014e-01,
                7.90000021e-01,
                7.04999983e-01,
                6.25000000e-01,
                5.40000021e-01,
                4.85000014e-01,
                4.32999998e-01,
                3.91000003e-01,
                3.51999998e-01,
                3.14500004e-01,
                2.82499999e-01,
                2.47999996e-01,
                2.19999999e-01,
                1.88999996e-01,
                1.59999996e-01,
                1.34000003e-01,
                1.15000002e-01,
                9.49999988e-02,
                7.69999996e-02,
                5.90000004e-02,
                4.30000015e-02,
                2.99999993e-02,
                1.99999996e-02,
                1.49999997e-02,
                9.99999978e-03,
                5.49999997e-03,
                3.00000003e-03,
                1.10000001e-04,
            ]
        ),
    ),
    # Lower resonant group bound from upper limit of URR in U238. Higher resonant group bound from IR-lambda tool on U238 and Pu240
    "XMAS-172": GroupStructure(
        "XMAS-172",
        "xmas-nea-lanl-172",
        32,
        90,
        np.array([[0, 134], [135, 171]]),
        np.array(
            [
                [0, 21],
                [22, 46],
                [47, 91],
                [92, 112],
                [113, 115],
                [116, 118],
                [119, 122],
                [123, 125],
                [126, 130],
                [131, 134],
                [135, 141],
                [142, 145],
                [146, 151],
                [152, 159],
                [160, 163],
                [164, 171],
            ]
        ),
        np.array(
            [
                1.96403e01,
                1.73325e01,
                1.49182e01,
                1.38403e01,
                1.16183e01,
                1.00000e01,
                8.18731e00,
                6.70320e00,
                6.06531e00,
                5.48812e00,
                4.49329e00,
                3.67879e00,
                3.01194e00,
                2.46597e00,
                2.23130e00,
                2.01897e00,
                1.65299e00,
                1.35335e00,
                1.22456e00,
                1.10803e00,
                1.00259e00,
                9.07180e-01,
                8.20850e-01,
                6.08101e-01,
                5.50232e-01,
                4.97871e-01,
                4.50492e-01,
                4.07622e-01,
                3.01974e-01,
                2.73237e-01,
                2.47235e-01,
                1.83156e-01,
                1.22773e-01,
                1.11090e-01,
                8.22975e-02,
                6.73795e-02,
                5.51656e-02,
                4.08677e-02,
                3.69786e-02,
                2.92830e-02,
                2.73944e-02,
                2.47875e-02,
                1.66156e-02,
                1.50344e-02,
                1.11378e-02,
                9.11882e-03,
                7.46586e-03,
                5.53084e-03,
                5.00451e-03,
                3.52662e-03,
                3.35463e-03,
                2.24867e-03,
                2.03468e-03,
                1.50733e-03,
                1.43382e-03,
                1.23410e-03,
                1.01039e-03,
                9.14242e-04,
                7.48518e-04,
                6.77287e-04,
                4.53999e-04,
                3.71703e-04,
                3.04325e-04,
                2.03995e-04,
                1.48625e-04,
                1.36742e-04,
                9.16609e-05,
                7.56736e-05,
                6.79041e-05,
                5.55951e-05,
                5.15780e-05,
                4.82516e-05,
                4.55174e-05,
                4.01690e-05,
                3.72665e-05,
                3.37201e-05,
                3.05113e-05,
                2.76077e-05,
                2.49805e-05,
                2.26033e-05,
                1.94548e-05,
                1.59283e-05,
                1.37096e-05,
                1.12245e-05,
                9.90555e-06,
                9.18981e-06,
                8.31529e-06,
                7.52398e-06,
                6.16012e-06,
                5.34643e-06,
                5.04348e-06,
                4.12925e-06,
                4.00000e-06,
                3.38075e-06,
                3.30000e-06,
                2.76792e-06,
                2.72000e-06,
                2.60000e-06,
                2.55000e-06,
                2.36000e-06,
                2.13000e-06,
                2.10000e-06,
                2.02000e-06,
                1.93000e-06,
                1.84000e-06,
                1.75500e-06,
                1.67000e-06,
                1.59000e-06,
                1.50000e-06,
                1.47500e-06,
                1.44498e-06,
                1.37000e-06,
                1.33750e-06,
                1.30000e-06,
                1.23500e-06,
                1.17000e-06,
                1.15000e-06,
                1.12535e-06,
                1.11000e-06,
                1.09700e-06,
                1.07100e-06,
                1.04500e-06,
                1.03500e-06,
                1.02000e-06,
                9.96000e-07,
                9.86000e-07,
                9.72000e-07,
                9.50000e-07,
                9.30000e-07,
                9.10000e-07,
                8.60000e-07,
                8.50000e-07,
                7.90000e-07,
                7.80000e-07,
                7.05000e-07,
                6.25000e-07,
                5.40000e-07,
                5.00000e-07,
                4.85000e-07,
                4.33000e-07,
                4.00000e-07,
                3.91000e-07,
                3.50000e-07,
                3.20000e-07,
                3.14500e-07,
                3.00000e-07,
                2.80000e-07,
                2.48000e-07,
                2.20000e-07,
                1.89000e-07,
                1.80000e-07,
                1.60000e-07,
                1.40000e-07,
                1.34000e-07,
                1.15000e-07,
                1.00001e-07,
                9.50000e-08,
                8.00000e-08,
                7.70000e-08,
                6.70000e-08,
                5.80000e-08,
                5.00000e-08,
                4.20000e-08,
                3.50000e-08,
                3.00000e-08,
                2.50000e-08,
                2.00000e-08,
                1.50000e-08,
                1.00000e-08,
                6.90000e-09,
                5.00000e-09,
                3.00000e-09,
                1.00001e-11,
            ]
        )
        * 1.0e6,
    ),
    # Resonant groups based on upper limit of URR in U238 and 22.5 eV cuttoff for SHEM
    "SHEM-281": GroupStructure(
        "SHEM-281",
        "shem-cea-281",
        34,
        92,
        np.array([[0, 246], [247, 280]]),
        np.array(
            [
                [0, 22],
                [23, 58],
                [59, 195],
                [196, 225],
                [226, 229],
                [230, 233],
                [234, 236],
                [237, 240],
                [241, 244],
                [245, 246],
                [247, 253],
                [254, 256],
                [257, 262],
                [263, 268],
                [269, 272],
                [273, 280],
            ]
        ),
        np.array(
            [
                1.964030e07,
                1.491823e07,
                1.384029e07,
                1.161833e07,
                9.999987e06,
                9.048363e06,
                8.187297e06,
                7.408173e06,
                6.703192e06,
                6.065299e06,
                4.965847e06,
                4.065691e06,
                3.328707e06,
                2.725314e06,
                2.231299e06,
                1.901387e06,
                1.636539e06,
                1.405768e06,
                1.336941e06,
                1.286961e06,
                1.162048e06,
                1.051149e06,
                9.511189e05,
                8.600058e05,
                7.065112e05,
                5.784425e05,
                4.940018e05,
                4.560211e05,
                4.125012e05,
                3.838835e05,
                3.206464e05,
                2.678264e05,
                2.300137e05,
                1.950077e05,
                1.649989e05,
                1.399995e05,
                1.227732e05,
                1.156235e05,
                9.466450e04,
                8.229736e04,
                6.737938e04,
                5.516557e04,
                4.991587e04,
                4.086766e04,
                3.697859e04,
                3.345961e04,
                2.928101e04,
                2.739441e04,
                2.610010e04,
                2.499908e04,
                2.269941e04,
                1.858471e04,
                1.620045e04,
                1.489967e04,
                1.360366e04,
                1.113774e04,
                9.118808e03,
                7.465848e03,
                6.112520e03,
                5.004508e03,
                4.097345e03,
                3.481068e03,
                2.996183e03,
                2.578838e03,
                2.219627e03,
                1.910451e03,
                1.614038e03,
                1.345061e03,
                1.135007e03,
                1.064962e03,
                9.075007e02,
                7.485173e02,
                6.128342e02,
                5.017462e02,
                4.107950e02,
                3.535746e02,
                3.199275e02,
                2.837502e02,
                2.417960e02,
                1.979658e02,
                1.620807e02,
                1.327005e02,
                1.086459e02,
                8.895177e01,
                7.504548e01,
                6.144204e01,
                5.267255e01,
                4.579131e01,
                4.399581e01,
                4.016895e01,
                3.372011e01,
                2.760769e01,
                2.460856e01,
                2.253556e01,
                2.237836e01,
                2.215569e01,
                2.200114e01,
                2.170178e01,
                2.148585e01,
                2.133597e01,
                2.122956e01,
                2.114481e01,
                2.106040e01,
                2.097632e01,
                2.076761e01,
                2.068470e01,
                2.060213e01,
                2.051988e01,
                2.041754e01,
                2.027512e01,
                2.007338e01,
                1.959735e01,
                1.939265e01,
                1.919969e01,
                1.908484e01,
                1.795905e01,
                1.775903e01,
                1.756476e01,
                1.744572e01,
                1.683053e01,
                1.655014e01,
                1.604977e01,
                1.577923e01,
                1.486626e01,
                1.473012e01,
                1.459522e01,
                1.447024e01,
                1.425053e01,
                1.404961e01,
                1.354604e01,
                1.332970e01,
                1.259997e01,
                1.247210e01,
                1.230855e01,
                1.213015e01,
                1.197947e01,
                1.181529e01,
                1.170943e01,
                1.158944e01,
                1.126944e01,
                1.105292e01,
                1.080376e01,
                1.057925e01,
                9.500024e00,
                9.140311e00,
                8.979950e00,
                8.800375e00,
                8.673690e00,
                8.524074e00,
                8.300322e00,
                8.130272e00,
                7.970079e00,
                7.839651e00,
                7.739943e00,
                7.600350e00,
                7.380153e00,
                7.139869e00,
                6.994292e00,
                6.917776e00,
                6.870208e00,
                6.835259e00,
                6.810696e00,
                6.791653e00,
                6.776050e00,
                6.759807e00,
                6.742254e00,
                6.716683e00,
                6.631257e00,
                6.606106e00,
                6.588293e00,
                6.571843e00,
                6.556090e00,
                6.539066e00,
                6.514916e00,
                6.481775e00,
                6.432057e00,
                6.359784e00,
                6.280153e00,
                6.160108e00,
                6.059906e00,
                5.960142e00,
                5.800211e00,
                5.720146e00,
                5.619790e00,
                5.530036e00,
                5.488167e00,
                5.410245e00,
                5.380032e00,
                5.320112e00,
                5.210076e00,
                5.109974e00,
                4.933232e00,
                4.767845e00,
                4.419800e00,
                4.309812e00,
                4.219828e00,
                4.000000e00,
                3.882170e00,
                3.712087e00,
                3.543073e00,
                3.142109e00,
                2.884047e00,
                2.775121e00,
                2.740922e00,
                2.719898e00,
                2.700115e00,
                2.640041e00,
                2.620053e00,
                2.590094e00,
                2.550003e00,
                2.469941e00,
                2.330061e00,
                2.272986e00,
                2.217087e00,
                2.156948e00,
                2.070095e00,
                1.989920e00,
                1.900077e00,
                1.779966e00,
                1.668949e00,
                1.588030e00,
                1.519976e00,
                1.443967e00,
                1.410007e00,
                1.380981e00,
                1.330952e00,
                1.293038e00,
                1.250939e00,
                1.213968e00,
                1.169989e00,
                1.147969e00,
                1.129974e00,
                1.116049e00,
                1.103950e00,
                1.091982e00,
                1.077986e00,
                1.034993e00,
                1.021012e00,
                1.009035e00,
                9.965005e-01,
                9.819591e-01,
                9.639598e-01,
                9.440222e-01,
                9.199779e-01,
                8.800244e-01,
                8.200371e-01,
                7.199989e-01,
                6.249987e-01,
                5.949930e-01,
                5.549897e-01,
                5.200108e-01,
                4.750165e-01,
                4.315786e-01,
                3.900011e-01,
                3.529935e-01,
                3.250079e-01,
                3.050115e-01,
                2.799888e-01,
                2.549965e-01,
                2.311923e-01,
                2.096102e-01,
                1.900049e-01,
                1.618953e-01,
                1.379994e-01,
                1.199949e-01,
                1.042977e-01,
                8.979683e-02,
                7.649686e-02,
                6.519936e-02,
                5.549815e-02,
                4.730186e-02,
                4.029993e-02,
                3.439976e-02,
                2.929889e-02,
                2.493942e-02,
                2.001035e-02,
                1.482996e-02,
                1.045050e-02,
                7.145263e-03,
                4.556021e-03,
                2.499897e-03,
                1.100027e-04,
            ]
        ),
    ),
    # Resonant groups based on upper limit of URR in U238 and 22.5 eV cuttoff for SHEM
    "SHEM-361": GroupStructure(
        "SHEM-361",
        "shem-cea-epm-361",
        34,
        172,
        np.array([[0, 326], [327, 360]]),
        np.array(
            [
                [0, 22],
                [23, 58],
                [59, 275],
                [276, 305],
                [306, 309],
                [310, 313],
                [314, 316],
                [317, 320],
                [321, 324],
                [325, 326],
                [327, 333],
                [334, 336],
                [337, 342],
                [343, 348],
                [349, 352],
                [353, 360],
            ]
        ),
        np.array(
            [
                1.964030e07,
                1.491823e07,
                1.384029e07,
                1.161833e07,
                9.999987e06,
                9.048363e06,
                8.187297e06,
                7.408173e06,
                6.703192e06,
                6.065299e06,
                4.965847e06,
                4.065691e06,
                3.328707e06,
                2.725314e06,
                2.231299e06,
                1.901387e06,
                1.636539e06,
                1.405768e06,
                1.336941e06,
                1.286961e06,
                1.162048e06,
                1.051149e06,
                9.511189e05,
                8.600058e05,
                7.065112e05,
                5.784425e05,
                4.940018e05,
                4.560211e05,
                4.125012e05,
                3.838835e05,
                3.206464e05,
                2.678264e05,
                2.300598e05,
                1.950662e05,
                1.650650e05,
                1.400976e05,
                1.227732e05,
                1.156235e05,
                9.466450e04,
                8.229736e04,
                6.737938e04,
                5.516557e04,
                4.991587e04,
                4.086766e04,
                3.697859e04,
                3.345961e04,
                2.928101e04,
                2.739441e04,
                2.610010e04,
                2.499908e04,
                2.269941e04,
                1.858471e04,
                1.620045e04,
                1.489967e04,
                1.360366e04,
                1.113774e04,
                9.118808e03,
                7.465848e03,
                6.112520e03,
                5.004508e03,
                4.097345e03,
                3.481068e03,
                2.996183e03,
                2.700236e03,
                2.397290e03,
                2.084104e03,
                1.811833e03,
                1.586197e03,
                1.343582e03,
                1.134667e03,
                1.064323e03,
                9.824941e02,
                9.096813e02,
                8.322179e02,
                7.485173e02,
                6.772865e02,
                6.468370e02,
                6.128342e02,
                6.000988e02,
                5.929407e02,
                5.771455e02,
                5.392042e02,
                5.017462e02,
                4.539987e02,
                4.190936e02,
                3.907603e02,
                3.717027e02,
                3.535746e02,
                3.353230e02,
                3.199275e02,
                2.959215e02,
                2.883267e02,
                2.848875e02,
                2.764678e02,
                2.682969e02,
                2.567478e02,
                2.417960e02,
                2.355903e02,
                2.243247e02,
                2.121077e02,
                2.009577e02,
                1.959960e02,
                1.930780e02,
                1.902035e02,
                1.888767e02,
                1.875592e02,
                1.862508e02,
                1.849516e02,
                1.832945e02,
                1.752291e02,
                1.675186e02,
                1.630561e02,
                1.541759e02,
                1.466567e02,
                1.395042e02,
                1.327005e02,
                1.262286e02,
                1.205536e02,
                1.175771e02,
                1.165237e02,
                1.154797e02,
                1.128539e02,
                1.102879e02,
                1.056461e02,
                1.030376e02,
                1.021145e02,
                1.016052e02,
                1.010984e02,
                1.005942e02,
                9.732874e01,
                9.332559e01,
                8.877405e01,
                8.393934e01,
                7.936793e01,
                7.633216e01,
                7.355948e01,
                7.188692e01,
                6.906820e01,
                6.682614e01,
                6.649285e01,
                6.616121e01,
                6.583123e01,
                6.550290e01,
                6.504598e01,
                6.459225e01,
                6.363059e01,
                6.230828e01,
                5.992503e01,
                5.705949e01,
                5.405999e01,
                5.298953e01,
                5.178468e01,
                4.925911e01,
                4.751732e01,
                4.620529e01,
                4.529037e01,
                4.417214e01,
                4.312463e01,
                4.214409e01,
                4.122704e01,
                3.972951e01,
                3.878736e01,
                3.779188e01,
                3.730377e01,
                3.685880e01,
                3.641914e01,
                3.605676e01,
                3.569799e01,
                3.453918e01,
                3.308547e01,
                3.169295e01,
                2.788515e01,
                2.465783e01,
                2.253556e01,
                2.237836e01,
                2.215569e01,
                2.200114e01,
                2.170178e01,
                2.148585e01,
                2.133597e01,
                2.122956e01,
                2.114481e01,
                2.106040e01,
                2.097632e01,
                2.076761e01,
                2.068470e01,
                2.060213e01,
                2.051988e01,
                2.041754e01,
                2.027512e01,
                2.007338e01,
                1.959735e01,
                1.939265e01,
                1.919969e01,
                1.908484e01,
                1.795905e01,
                1.775903e01,
                1.756476e01,
                1.744572e01,
                1.683053e01,
                1.655014e01,
                1.604977e01,
                1.577923e01,
                1.486626e01,
                1.473012e01,
                1.459522e01,
                1.447024e01,
                1.425053e01,
                1.404961e01,
                1.354604e01,
                1.332970e01,
                1.259997e01,
                1.247210e01,
                1.230855e01,
                1.213015e01,
                1.197947e01,
                1.181529e01,
                1.170943e01,
                1.158944e01,
                1.126944e01,
                1.105292e01,
                1.080376e01,
                1.057925e01,
                9.500024e00,
                9.140311e00,
                8.979950e00,
                8.800375e00,
                8.673690e00,
                8.524074e00,
                8.300322e00,
                8.130272e00,
                7.970079e00,
                7.839651e00,
                7.739943e00,
                7.600350e00,
                7.380153e00,
                7.139869e00,
                6.994292e00,
                6.917776e00,
                6.870208e00,
                6.835259e00,
                6.810696e00,
                6.791653e00,
                6.776050e00,
                6.759807e00,
                6.742254e00,
                6.716683e00,
                6.631257e00,
                6.606106e00,
                6.588293e00,
                6.571843e00,
                6.556090e00,
                6.539066e00,
                6.514916e00,
                6.481775e00,
                6.432057e00,
                6.359784e00,
                6.280153e00,
                6.160108e00,
                6.059906e00,
                5.960142e00,
                5.800211e00,
                5.720146e00,
                5.619790e00,
                5.530036e00,
                5.488167e00,
                5.410245e00,
                5.380032e00,
                5.320112e00,
                5.210076e00,
                5.109974e00,
                4.933232e00,
                4.767845e00,
                4.419800e00,
                4.309812e00,
                4.219828e00,
                4.000000e00,
                3.882170e00,
                3.712087e00,
                3.543073e00,
                3.142109e00,
                2.884047e00,
                2.775121e00,
                2.740922e00,
                2.719898e00,
                2.700115e00,
                2.640041e00,
                2.620053e00,
                2.590094e00,
                2.550003e00,
                2.469941e00,
                2.330061e00,
                2.272986e00,
                2.217087e00,
                2.156948e00,
                2.070095e00,
                1.989920e00,
                1.900077e00,
                1.779966e00,
                1.668949e00,
                1.588030e00,
                1.519976e00,
                1.443967e00,
                1.410007e00,
                1.380981e00,
                1.330952e00,
                1.293038e00,
                1.250939e00,
                1.213968e00,
                1.169989e00,
                1.147969e00,
                1.129974e00,
                1.116049e00,
                1.103950e00,
                1.091982e00,
                1.077986e00,
                1.034993e00,
                1.021012e00,
                1.009035e00,
                9.965005e-01,
                9.819591e-01,
                9.639598e-01,
                9.440222e-01,
                9.199779e-01,
                8.800244e-01,
                8.200371e-01,
                7.199989e-01,
                6.249987e-01,
                5.949930e-01,
                5.549897e-01,
                5.200108e-01,
                4.750165e-01,
                4.315786e-01,
                3.900011e-01,
                3.529935e-01,
                3.250079e-01,
                3.050115e-01,
                2.799888e-01,
                2.549965e-01,
                2.311923e-01,
                2.096102e-01,
                1.900049e-01,
                1.618953e-01,
                1.379994e-01,
                1.199949e-01,
                1.042977e-01,
                8.979683e-02,
                7.649686e-02,
                6.519936e-02,
                5.549815e-02,
                4.730186e-02,
                4.029993e-02,
                3.439976e-02,
                2.929889e-02,
                2.493942e-02,
                2.001035e-02,
                1.482996e-02,
                1.045050e-02,
                7.145263e-03,
                4.556021e-03,
                2.499897e-03,
                1.100027e-04,
            ]
        ),
    ),
}

_DEFAULT_GROUP_STRUCTURE = "SCARABEE-125"
_DEFAULT_MAX_LEGENDRE_MOMENT = 3


def set_default_group_structure(name):
    global _DEFAULT_GROUP_STRUCTURE
    if name not in _GROUP_STRUCTURES:
        raise RuntimeError('Uknown group structure "{}".'.format(name))
    _DEFAULT_GROUP_STRUCTURE = name


def set_default_max_legendre_moments(l):
    global _DEFAULT_MAX_LEGENDRE_MOMENT
    if l >= 0 and l <= 3:
        _DEFAULT_MAX_LEGENDRE_MOMENT = l
    else:
        raise RuntimeError("Default max legendre moment must be in range [0, 3].")


def get_default_max_legendre_moments():
    return _DEFAULT_MAX_LEGENDRE_MOMENT


def get_default_group_structure():
    return _GROUP_STRUCTURES[_DEFAULT_GROUP_STRUCTURE]


class KRAMXS:
    def __init__(self):
        self.Et = None
        self.Ea = None
        self.Es = None
        self.Es1 = None
        self.Es2 = None
        self.Es3 = None
        self.Ef = None
        self.nu = None
        self.chi = None

    @property
    def ngroups(self):
        if self.Et is None:
            return 0
        return len(self.Et)

    def __read_line(fl):
        line = fl.readline()
        line = line.strip().split()
        for i in range(len(line)):
            line[i] = float(line[i])
        line = np.array(line)
        return line

    def from_file(fname, max_l):
        fl = open(fname, "r")
        fl.readline()  # Skip the XSN 1 header

        # Read scattering matrix first
        Es = []
        ngroups = 100  # This is a guess to start
        line_num = 0
        while line_num < ngroups:
            line_num += 1
            Es.append(KRAMXS.__read_line(fl))
            ngroups = len(Es[-1])
        Es = np.array(Es)
        Es = np.copy(np.swapaxes(Es, 0, 1))

        # Read vEf
        vEf = KRAMXS.__read_line(fl)

        # Read Ea
        Ea = KRAMXS.__read_line(fl)

        # Read Et
        Et = KRAMXS.__read_line(fl)

        # Read Ef
        Ef = KRAMXS.__read_line(fl)

        # Skip FSP 1 line
        fl.readline()

        # Read chi
        chi = KRAMXS.__read_line(fl)

        # Skip ASC 1 line and 1 line
        fl.readline()
        fl.readline()

        # Read P1-scattering matrix
        Es1 = None
        if max_l >= 1:
            Es1 = []
            line_num = 0
            while line_num < ngroups:
                line_num += 1
                Es1.append(KRAMXS.__read_line(fl))
            Es1 = np.array(Es1)
            Es1 = np.copy(np.swapaxes(Es1, 0, 1))

        # Read P2-scattering matrix
        Es2 = None
        if max_l >= 2:
            Es2 = []
            line_num = 0
            while line_num < ngroups:
                line_num += 1
                Es2.append(KRAMXS.__read_line(fl))
            Es2 = np.array(Es2)
            Es2 = np.copy(np.swapaxes(Es2, 0, 1))

        # Read P3-scattering matrix
        Es3 = None
        if max_l >= 3:
            Es3 = []
            line_num = 0
            while line_num < ngroups:
                line_num += 1
                Es3.append(KRAMXS.__read_line(fl))
            Es3 = np.array(Es3)
            Es3 = np.copy(np.swapaxes(Es3, 0, 1))

        fl.close()

        # Create and return instance
        xs = KRAMXS()
        xs.Et = Et
        xs.Ea = Ea
        xs.Es = Es

        if Es1 is not None:
            xs.Es1 = Es1
        if Es2 is not None:
            xs.Es2 = Es2
        if Es3 is not None:
            xs.Es3 = Es3

        xs.Ef = Ef
        xs.nu = np.divide(vEf, Ef, out=np.zeros_like(vEf), where=Ef != 0.0)
        xs.chi = chi
        return xs


class FrendyMG:
    def __init__(self, group_strucutre: Optional[str] = None):
        self.temps = [293.6]
        self.dilutions = None
        self.pot_xs = None
        self.endf_file = None
        self.tsl_file = None
        self.tsl_type = None
        self.label = ""
        self.name = ""
        if group_strucutre is not None:
            if group_strucutre not in _GROUP_STRUCTURES:
                raise RuntimeError(
                    'Unknown group structure "{}".'.format(group_strucutre)
                )
            self.group_strucutre = _GROUP_STRUCTURES[group_strucutre]
        else:
            self.group_strucutre = _GROUP_STRUCTURES[_DEFAULT_GROUP_STRUCTURE]
        self.ngroups = self.group_strucutre.ngroups
        self.initialized = False
        self.processed = False
        self.resonant = False
        self.delete_files = True
        self.max_legendre_moment = _DEFAULT_MAX_LEGENDRE_MOMENT

        if self.max_legendre_moment > 3:
            raise RuntimeError("Only legendre moments up to L=3 are supported.")

    def initialize(self):
        if self.dilutions is not None:
            self.dilutions.sort()
            if len(self.dilutions) == 0 or self.dilutions[-1] < 1.0e10:
                self.dilutions.append(1.0e10)

        self._get_endf_info()

        self._allocate_arrays()

        self.initialized = True

    def _allocate_arrays(self):
        if self.dilutions is None:
            return

        if len(self.dilutions) > 1:
            self.resonant = True

        self.Dtr = np.zeros((len(self.temps), len(self.dilutions), self.ngroups))
        self.Ea = np.zeros((len(self.temps), len(self.dilutions), self.ngroups))
        self.Es = np.zeros(
            (len(self.temps), len(self.dilutions), self.ngroups, self.ngroups)
        )
        if self.fissile:
            self.Ef = np.zeros((len(self.temps), len(self.dilutions), self.ngroups))

            # Nu and chi are only very weakly dependent on temp and dilution.
            # Because of this, we don't tabulate them on temp or dilution.
            self.nu = np.zeros((self.ngroups))
            self.chi = np.zeros((self.ngroups))
        else:
            self.Ef = None
            self.nu = None
            self.chi = None

        if self.max_legendre_moment >= 1:
            self.Es1 = np.zeros(
                (len(self.temps), len(self.dilutions), self.ngroups, self.ngroups)
            )
        else:
            self.Es1 = None

        if self.max_legendre_moment >= 2:
            self.Es2 = np.zeros(
                (len(self.temps), len(self.dilutions), self.ngroups, self.ngroups)
            )
        else:
            self.Es2 = None

        if self.max_legendre_moment >= 3:
            self.Es3 = np.zeros(
                (len(self.temps), len(self.dilutions), self.ngroups, self.ngroups)
            )
        else:
            self.Es3 = None

        # Depletion related reactions
        self.Egamma = None
        self.En2n = None
        self.En3n = None
        self.Enp = None
        self.Ena = None

    def _get_fission_energy(self, acefname: str) -> float:
        # Get the ACE
        ace = pndl.ACE(acefname, pndl.ACEType.ASCII)
        nuc = pndl.STNeutron(ace)

        # Get the fission reaction
        fiss = None
        if nuc.has_reaction(18):
            fiss = nuc.reaction(18)
        elif nuc.has_reaction(19):
            fiss = nuc.reaction(19)
        elif nuc.has_reaction(20):
            fiss = nuc.reaction(20)
        elif nuc.has_reaction(21):
            fiss = nuc.reaction(21)
        elif nuc.has_reaction(38):
            fiss = nuc.reaction(38)
        else:
            raise RuntimeError(
                "Could not find fission reaction for {:}".format(self.name)
            )

        # Get energy release (in MeV)
        return fiss.q()

    def process(self, h5=None, chi=None):
        if not self.initialized:
            self.initialize()

        # Make sure we have all tsl info
        if (self.tsl_file is not None and self.tsl_type is None) or (
            self.tsl_file is None and self.tsl_type is not None
        ):
            raise RuntimeError("For TSL, must provide both tsl_file and tsl_type.")

        for i in range(len(self.temps)):
            gen_ir = False
            if i == 0:
                gen_ir = True
            self._process_temp(i, generate_ir_lambda=gen_ir)

        self.processed = True

        # Truncate threshold reactions to remove zeros
        self._remove_zeros()

        if chi is not None:
            self.apply_inflow_transport_correction(chi)
        else:
            self.apply_outflow_transport_correction()

        # Apply compression after computing the transport correction !
        self._get_compressed_scatter_layout()
        self._compress_scatter_matrices()

        if h5 is not None:
            self.add_to_hdf5(h5)

    def apply_inflow_transport_correction(self, chi):
        if not self.processed:
            raise RuntimeError("Cannot apply transport corretion to unprocessed data.")

        for iT in range(len(self.temps)):
            for id in range(len(self.dilutions)):
                # Create a temporary xs set with the provided fission spectrum
                Et = self.Ea[iT, id, :] + np.sum(self.Es[iT, id, :, :], axis=1)
                Es = np.array([self.Es[iT, id, :, :], self.Es1[iT, id, :, :]])
                if self.fissile:
                    TempXS = CrossSection(
                        Et,
                        self.Dtr[iT, id, :],
                        self.Ea[iT, id, :],
                        Es,
                        self.Ef[iT, id, :],
                        self.nu[iT, id, :] * self.Ef[iT, id, :],
                        chi,
                    )
                else:
                    TempXS = CrossSection(
                        Et,
                        self.Dtr[iT, id, :],
                        self.Ea[iT, id, :],
                        Es,
                        np.zeros(self.ngroups),
                        np.zeros(self.ngroups),
                        chi,
                    )

                # We now perform a P1 leakage calculation
                P1_spectrum = P1CriticalitySpectrum(TempXS, 0.0001)

                # We now have diffusion coefficients
                D = P1_spectrum.diff_coeff

                # Compute transport xs
                Etr = 1.0 / (3.0 * D)

                # Calculate the delta xs for the transport correction
                self.Dtr[iT, id, :] = Et - Etr

    def apply_outflow_transport_correction(self):
        if not self.processed:
            raise RuntimeError("Cannot apply transport corretion to unprocessed data.")

        if self.Es1 is not None:
            for iT in range(len(self.temps)):
                for id in range(len(self.dilutions)):
                    # Calculate the delta xs for the transport correction
                    for g in range(self.ngroups):
                        self.Dtr[iT, id, g] = np.sum(self.Es1[iT, id, g, :])

    def _get_compressed_scatter_layout(self):
        self.low_grps = []
        self.high_grps = []
        self.data_starts = []

        for g in range(self.ngroups):
            # Find the first outgoing group which isn't 0
            g_low = 0
            for gg in range(self.ngroups):
                not_all_zeros = np.any(self.Es[:, :, g, : gg + 1])
                if not_all_zeros:
                    g_low = gg
                    break

            # Find the last outgoing group which isn't 0
            g_hi = 0
            for gg in range(self.ngroups):
                all_zeros = not np.any(self.Es[:, :, g, gg:])
                if all_zeros:
                    g_hi = gg - 1
                    break
            if g_hi == 0:
                g_hi = self.ngroups - 1

            self.low_grps.append(g_low)
            self.high_grps.append(g_hi)

            if g == 0:
                self.data_starts.append(0)
            else:
                self.data_starts.append(
                    self.data_starts[-1] + (self.high_grps[-2] - self.low_grps[-2]) + 1
                )

        self.len_scatter_matrix_data = (
            self.data_starts[-1] + (self.high_grps[-1] - self.low_grps[-1]) + 1
        )

    def _compress_scatter_matrices(self):
        Es = np.zeros(
            (len(self.temps), len(self.dilutions), self.len_scatter_matrix_data)
        )
        if self.Es1 is not None:
            Es1 = np.zeros(
                (len(self.temps), len(self.dilutions), self.len_scatter_matrix_data)
            )
        if self.Es2 is not None:
            Es2 = np.zeros(
                (len(self.temps), len(self.dilutions), self.len_scatter_matrix_data)
            )
        if self.Es3 is not None:
            Es3 = np.zeros(
                (len(self.temps), len(self.dilutions), self.len_scatter_matrix_data)
            )

        i = 0
        for g in range(self.ngroups):
            g_low = self.low_grps[g]
            g_hi = self.high_grps[g]
            l = g_hi - g_low + 1

            Es[:, :, i : i + l] = self.Es[:, :, g, g_low : g_hi + 1]

            if self.Es1 is not None:
                Es1[:, :, i : i + l] = self.Es1[:, :, g, g_low : g_hi + 1]
            if self.Es2 is not None:
                Es2[:, :, i : i + l] = self.Es2[:, :, g, g_low : g_hi + 1]
            if self.Es3 is not None:
                Es3[:, :, i : i + l] = self.Es3[:, :, g, g_low : g_hi + 1]

            i += l

        self.Es = Es
        if self.Es1 is not None:
            self.Es1 = Es1
        if self.Es2 is not None:
            self.Es2 = Es2
        if self.Es3 is not None:
            self.Es3 = Es3

    def _remove_zeros(self):
        self.Egamma = self._cull_array(self.Egamma)
        self.En2n = self._cull_array(self.En2n)
        self.En3n = self._cull_array(self.En3n)
        self.Enp = self._cull_array(self.Enp)
        self.Ena = self._cull_array(self.Ena)

    def _cull_array(self, a):
        if a is not None:
            gmax = self.ngroups - 1
            for g in range(self.ngroups - 1, -1, -1):
                # Check if group is all zeros
                not_all_zeros = np.any(a[:, :, g])
                if not_all_zeros:
                    gmax = g
                    break
            if gmax != self.ngroups - 1:
                return a[:, :, : gmax + 1]
            else:
                return a

    def add_to_hdf5(self, h5):
        grp = h5.create_group(self.name)

        # Save attributes
        grp.attrs["name"] = self.name
        grp.attrs["fissile"] = self.fissile
        grp.attrs["resonant"] = self.resonant
        grp.attrs["awr"] = self.awr
        grp.attrs["ZA"] = self.ZA
        grp.attrs["label"] = self.label
        grp.attrs["potential-xs"] = self.pot_xs
        grp.attrs["temperatures"] = self.temps
        grp.attrs["dilutions"] = self.dilutions
        if self.fission_energy is not None:
            grp.attrs["fission-energy"] = self.fission_energy
        if self.ir_lambda is not None:
            grp.attrs["ir-lambda"] = self.ir_lambda

        packing = np.zeros((self.ngroups, 3), dtype=np.uint32)
        for g in range(self.ngroups):
            packing[g, 0] = self.data_starts[g]
            packing[g, 1] = self.low_grps[g]
            packing[g, 2] = self.high_grps[g]
        grp.create_dataset("matrix-compression", data=packing)

        # Save the infinite diution cross section data
        grp.create_dataset("inf-transport-correction", data=self.Dtr[:, -1, :])
        grp.create_dataset("inf-absorption", data=self.Ea[:, -1, :])
        grp.create_dataset("inf-scatter", data=self.Es[:, -1, :])
        if self.Es1 is not None:
            grp.create_dataset("inf-p1-scatter", data=self.Es1[:, -1, :])
        if self.Es2 is not None:
            grp.create_dataset("inf-p2-scatter", data=self.Es2[:, -1, :])
        if self.Es3 is not None:
            grp.create_dataset("inf-p3-scatter", data=self.Es3[:, -1, :])
        if self.fissile:
            grp.create_dataset("inf-fission", data=self.Ef[:, -1, :])
            grp.create_dataset("nu", data=self.nu)
            grp.create_dataset("chi", data=self.chi)

        # Depletion data
        if self.Egamma is not None:
            grp.create_dataset("inf-(n,gamma)", data=self.Egamma[:, -1, :])
        if self.En2n is not None:
            grp.create_dataset("inf-(n,2n)", data=self.En2n[:, -1, :])
        if self.En3n is not None:
            grp.create_dataset("inf-(n,3n)", data=self.En3n[:, -1, :])
        if self.Enp is not None:
            grp.create_dataset("inf-(n,p)", data=self.Enp[:, -1, :])
        if self.Ena is not None:
            grp.create_dataset("inf-(n,a)", data=self.Ena[:, -1, :])

        if self.resonant:
            # Get indices for scatterinig matrices
            glow = self.group_strucutre.first_res_grp
            ghi = self.group_strucutre.last_res_grp
            ilow = self.data_starts[glow]
            ihi = self.data_starts[ghi + 1]

            grp.create_dataset(
                "res-transport-correction", data=self.Dtr[:, :, glow : ghi + 1]
            )
            grp.create_dataset("res-absorption", data=self.Ea[:, :, glow : ghi + 1])
            grp.create_dataset("res-scatter", data=self.Es[:, :, ilow:ihi])
            if self.Es1 is not None:
                grp.create_dataset("res-p1-scatter", data=self.Es1[:, :, ilow:ihi])
            if self.Es2 is not None:
                grp.create_dataset("res-p2-scatter", data=self.Es2[:, :, ilow:ihi])
            if self.Es3 is not None:
                grp.create_dataset("res-p3-scatter", data=self.Es3[:, :, ilow:ihi])
            if self.fissile:
                grp.create_dataset("res-fission", data=self.Ef[:, :, glow : ghi + 1])
            if self.Egamma is not None:
                grp.create_dataset(
                    "res-(n,gamma)", data=self.Egamma[:, :, glow : ghi + 1]
                )

    def _get_endf_info(self):
        # First, get MAT
        tape = ENDFtk.tree.Tape.from_file(self.endf_file)
        self.mat = tape.material_numbers[0]

        # Read AWR and ZA from MF1 MT 451
        mf1mt451 = tape.MAT(self.mat).MF(1).MT(451).parse()
        self.awr = mf1mt451.AWR
        self.ZA = mf1mt451.ZA
        self.isomeric_state = mf1mt451.LISO
        self.ZAM = self.ZA
        if self.isomeric_state > 0:
            self.ZAM += 300 + (self.isomeric_state * 100)
        self.fissile = mf1mt451.is_fissile
        self.fission_energy = (
            None  # Will be filled later from an ACE file. Not trivial to get from ENDF.
        )
        self.ir_lambda = None

        # Get potential scattering xs
        mf2mt151 = tape.MAT(self.mat).MF(2).MT(151).parse().isotopes[0]
        rrr = mf2mt151.resonance_ranges[0]
        if rrr.energy_dependent_scattering_radius:
            raise RuntimeError("HELP ENERGY DEPENDENT SCATTERING RADIUS")
        rrr_params = rrr.parameters
        AP = rrr_params.AP
        if AP == 0.0:
            # Try getting from the l-values
            AP = rrr_params.l_values[0].APL

        if self.pot_xs is None:
            self.pot_xs = 4.0 * np.pi * AP * AP

    def _frendy_input(self, temp):
        # Will write (n,2n), (n,3n), (n,gamma), (n,p), and (n,alpha)
        out = "mg_neutron_mode\n"
        out += "mg_edit_option ( KRAMXS MGFlux 1DXS 16, 17, 102, 103, 107 )\n"
        out += "nucl_file_name ({endf})\n".format(endf=self.endf_file)
        if self.tsl_file is not None:
            out += "nucl_file_name_tsl ({tsl})\n".format(tsl=self.tsl_file)
            out += "mg_tsl_data_type {tsl_type}\n".format(tsl_type=self.tsl_type)
        if self.pot_xs is not None:
            out += "potential_scat_xs {pot_xs}\n".format(pot_xs=self.pot_xs)
        out += "mg_file_name {mgfname}\n".format(mgfname=self.name)
        out += "temperature {temp}\n".format(temp=temp)
        out += "legendre_order {max_l}\n".format(max_l=self.max_legendre_moment)
        if self.group_strucutre.id is not None:
            out += "mg_structure ( {id} )\n".format(id=self.group_strucutre.id)
        else:
            ebnd_frmt = len(self.group_strucutre.bounds) * "{:.7E}  "
            out += (
                "mg_structure ( "
                + ebnd_frmt.format(*np.flip(self.group_strucutre.bounds))
                + " )\n"
            )
        out += "mg_weighting_spectrum ( fission+1/e+maxwell  )\n"
        out += "process_gas_xs off\n"
        if self.dilutions is None:
            out += "sigma_zero_data ( auto 0.005 100 1.E-10 rr linear )"
        else:
            dil_frmt = len(self.dilutions) * "{:.2E} "
            out += "sigma_zero_data ( " + dil_frmt.format(*self.dilutions) + " )\n"
        return out

    def _process_temp(self, itemp, generate_ir_lambda=False):
        self._get_endf_info()

        temp = self.temps[itemp]
        frendy_input = self._frendy_input(temp)
        with open("frendy_input", "w") as fl:
            fl.write(frendy_input)

        subprocess.run(["frendy", "frendy_input"])

        if itemp == 0 and self.dilutions is None:
            self._get_dilutions()

        self._read_temp(itemp)

        if generate_ir_lambda:
            self.ir_lambda = generate_U238_U235_ir_lambda(
                _U238,
                _U235,
                awr=self.awr,
                sig_pot=self.pot_xs,
                mg_energy_bounds=self.group_strucutre.bounds,
            )

        if self.fissile and self.fission_energy is None:
            self.fission_energy = self._get_fission_energy(
                os.path.basename(self.endf_file) + ".ace"
            )

        if self.delete_files:
            try:
                os.remove("frendy_input")
                os.remove("FMAlternateInputData.txt")
                os.remove(os.path.basename(self.endf_file) + ".ace")
                os.remove(os.path.basename(self.endf_file) + ".ace.dir")

                if self.tsl_file is not None:
                    os.remove(os.path.basename(self.tsl_file) + ".ace")
                    os.remove(os.path.basename(self.tsl_file) + ".ace.dir")
            except:
                pass

            for fl in os.listdir():
                if self.name + "_" in fl:
                    try:
                        os.remove(fl)
                    except:
                        pass

    def _get_dilutions(self):
        fname = self.name + "_MGFlux.mg"
        fl = open(fname, "r")
        fl.readline()
        line = fl.readline()
        fl.close()
        line = line.strip().split()
        line = line[2:]
        for i in range(len(line)):
            line[i] = float(line[i])
        line.sort()
        self.dilutions = line
        self._allocate_arrays()

    def _read_temp(self, itemp):
        # For each dilution, we need to read the KRAMXS file
        for d in range(len(self.dilutions)):
            # Read xs file
            fname = self.name + "_KRAMXS_MACRO_bg" + str(d) + ".mg"
            xs = KRAMXS.from_file(fname, self.max_legendre_moment)

            # Save values. FRENDY order dilutions from high to low, hence the index
            # shift on d to add them backwards
            self.Ea[itemp, -(d + 1), :] = xs.Ea
            self.Es[itemp, -(d + 1), :, :] = xs.Es
            if xs.Es1 is not None:
                self.Es1[itemp, -(d + 1), :, :] = xs.Es1
            if xs.Es2 is not None:
                self.Es2[itemp, -(d + 1), :, :] = xs.Es2
            if xs.Es3 is not None:
                self.Es3[itemp, -(d + 1), :, :] = xs.Es3
            if self.fissile:
                self.Ef[itemp, -(d + 1), :] = xs.Ef
                if itemp == 0 and d == 0:
                    self.nu = xs.nu
                    self.chi = xs.chi

        fls = os.listdir()

        # read in (n,gamma) data
        fname = self.name + "_1DXS_" + str(self.ZAM) + ".00c_MT102.mg"
        if fname in fls:
            if itemp == 0:
                self.Egamma = np.zeros(
                    (len(self.temps), len(self.dilutions), self.ngroups)
                )
            ngamma = read_1dxs(fname, 3)
            self.Egamma[itemp, :, :] = ngamma

        # Check for (n,2n) data
        fname = self.name + "_1DXS_" + str(self.ZAM) + ".00c_MT16.mg"
        if fname in fls:
            if itemp == 0:
                self.En2n = np.zeros(
                    (len(self.temps), len(self.dilutions), self.ngroups)
                )
            n2n = read_1dxs(fname, 3)
            self.En2n[itemp, :, :] = n2n

        # Check for (n,3n) data
        fname = self.name + "_1DXS_" + str(self.ZAM) + ".00c_MT17.mg"
        if fname in fls:
            if itemp == 0:
                self.En3n = np.zeros(
                    (len(self.temps), len(self.dilutions), self.ngroups)
                )
            n3n = read_1dxs(fname, 3)
            self.En3n[itemp, :, :] = n3n

        # Check for (n,p) data
        fname = self.name + "_1DXS_" + str(self.ZAM) + ".00c_MT103.mg"
        if fname in fls:
            if itemp == 0:
                self.Enp = np.zeros(
                    (len(self.temps), len(self.dilutions), self.ngroups)
                )
            nprt = read_1dxs(fname, 3)
            self.Enp[itemp, :, :] = nprt

        # Check for (n,a) data
        fname = self.name + "_1DXS_" + str(self.ZAM) + ".00c_MT107.mg"
        if fname in fls:
            if itemp == 0:
                self.Ena = np.zeros(
                    (len(self.temps), len(self.dilutions), self.ngroups)
                )
            na = read_1dxs(fname, 3)
            self.Ena[itemp, :, :] = na


def read_1dxs(fname, nskip):
    fl = open(fname, "r")

    # Skip first lines that have headers / dilutions / temperatures
    for i in range(nskip):
        fl.readline()

    array = []

    for line in fl:
        line = line.strip()
        if len(line) == 0:
            continue

        line = line.split()[4:]
        line.reverse()  # Reverse line for dilutions to go from low to high
        for i in range(len(line)):
            line[i] = float(line[i])
        array.append(line)
    fl.close()

    array = np.array(array, dtype=np.float32)
    array = np.copy(np.swapaxes(array, 0, 1))

    # First index on dilution, second on group
    return array
