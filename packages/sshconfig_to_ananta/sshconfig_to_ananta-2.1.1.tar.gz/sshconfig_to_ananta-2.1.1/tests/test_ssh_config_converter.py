#!/usr/bin/env python3
# pyright: strict

import tempfile
import unittest
from pathlib import Path

from sshconfig_to_ananta.ssh_config_converter import (
    _host_disabled,
    _parse_valid_line,
    _process_proxy_warning,
    _valid_host,
    convert_to_ananta_hosts,
)


class TestSSHConfigConverter(unittest.TestCase):
    def test_parse_valid_line(self):
        self.assertEqual(_parse_valid_line("Host myserver"), ("host", "myserver"))
        self.assertIsNone(_parse_valid_line("# Comment line"))
        self.assertIsNone(_parse_valid_line("   "))
        self.assertEqual(
            _parse_valid_line("   #tags dev,prod # comment"),
            ("ananta-tags", "dev,prod"),
        )
        self.assertIsNone(_parse_valid_line("        ##tags home,debian"))

    def test_valid_host(self):
        self.assertTrue(_valid_host("myserver"))
        self.assertFalse(_valid_host("*.example.com"))
        self.assertFalse(_valid_host(""))

    def test_host_disabled(self):
        self.assertTrue(_host_disabled(["!ananta-disabled"]))
        self.assertFalse(_host_disabled(["dev", "prod"]))

    def test_process_proxy_warning(self):
        alias = "myserver"
        self.assertEqual(_process_proxy_warning(alias), "myserver-needs-proxy")

    def test_convert_to_ananta_hosts(self):
        temp_ssh_config = tempfile.NamedTemporaryFile(mode="w+")
        temp_ssh_config.write("""
Host minimum_config
    HostName 192.168.1.100

# autogenerated by step @ 2023-12-17T10:39:11Z
Host *
    Include "/root/.step/ssh/includes"
# end

Host EdgeCase-1
    HostName example.com # domain, instead of ip address
    Port 65535 # maximum port number
    User VeryLongUsername-TheQuickBrownFoxJumpsOverTheLazyDog
    IdentityFile ~/.ssh/Filename_With_UpperCase-VeryLongUsername-TheQuickBrownFoxJumpsOverTheLazyDog.pem
    #tags dev,prod

Host Enabled-Host
    HostName 5.6.7.8
    ##tags dummy,!ananta

Host Proxy-Host
    HostName 9.10.11.12
    ProxyCommand ssh jump-host nc %h %p

Host Disabled-Host--Must-at-Last
    HostName 1.2.3.4
    Port 1
    User nonroot
    #tags dummy,!ananta,test
""")

        temp_ssh_config.flush()
        hosts = convert_to_ananta_hosts(Path(temp_ssh_config.name), None)
        temp_ssh_config.close()
        self.assertEqual(len(hosts), 4)

        minimum_config = [host for host in hosts if host.alias == "minimum_config"]
        self.assertEqual(len(minimum_config), 1)
        self.assertEqual(minimum_config[0].ip, "192.168.1.100")
        self.assertEqual(minimum_config[0].port, 22)
        self.assertEqual(minimum_config[0].username, "root")
        self.assertEqual(minimum_config[0].key_path, "#")
        self.assertEqual(minimum_config[0].tags, [])

        edge_case = [host for host in hosts if host.alias == "EdgeCase-1"]
        self.assertEqual(len(edge_case), 1)
        self.assertEqual(edge_case[0].ip, "example.com")
        self.assertEqual(edge_case[0].port, 65535)
        self.assertEqual(
            edge_case[0].username,
            "VeryLongUsername-TheQuickBrownFoxJumpsOverTheLazyDog",
        )
        self.assertEqual(
            edge_case[0].key_path,
            "~/.ssh/Filename_With_UpperCase-VeryLongUsername-TheQuickBrownFoxJumpsOverTheLazyDog.pem",
        )
        edge_case_tags = edge_case[0].tags
        self.assertIn("dev", edge_case_tags)
        self.assertIn("prod", edge_case_tags)

        enabled_host = [host for host in hosts if host.alias == "Enabled-Host"]
        self.assertEqual(len(enabled_host), 1)
        self.assertEqual(enabled_host[0].ip, "5.6.7.8")
        self.assertEqual(enabled_host[0].port, 22)
        self.assertEqual(enabled_host[0].username, "root")
        self.assertEqual(enabled_host[0].key_path, "#")
        self.assertEqual(enabled_host[0].tags, [])

        proxy_hosts = [host for host in hosts if host.alias.endswith("-needs-proxy")]
        self.assertEqual(len(proxy_hosts), 1)
        self.assertEqual(proxy_hosts[0].alias, "Proxy-Host-needs-proxy")
        self.assertEqual(proxy_hosts[0].ip, "9.10.11.12")

        disabled_host = [
            host for host in hosts if host.alias == "Disabled-Host--Must-at-Last"
        ]
        self.assertEqual(len(disabled_host), 0)


if __name__ == "__main__":
    unittest.main()
