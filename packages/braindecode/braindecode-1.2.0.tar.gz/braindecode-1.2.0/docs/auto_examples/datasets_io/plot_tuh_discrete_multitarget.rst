
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/datasets_io/plot_tuh_discrete_multitarget.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_datasets_io_plot_tuh_discrete_multitarget.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_datasets_io_plot_tuh_discrete_multitarget.py:

.. _multiple-discrete-targets-TUH:

Multiple discrete targets with the TUH EEG Corpus
=================================================

Welcome to this tutorial where we demonstrate how to work with multiple discrete
targets for each recording in the TUH EEG Corpus. We'll guide you through the
process step by step.

.. GENERATED FROM PYTHON SOURCE LINES 11-37

.. code-block:: Python


    # Author: Lukas Gemein <l.gemein@gmail.com>
    #
    # License: BSD (3-clause)

    import mne
    import torch
    from torch.utils.data import DataLoader

    from braindecode.datasets import TUH
    from braindecode.preprocessing import create_fixed_length_windows
    from braindecode.util import set_random_seeds

    # Setting Logging Level
    # ----------------------
    #
    # We'll set the logging level to 'ERROR' to avoid excessive messages when
    # extracting windows:

    mne.set_log_level("ERROR")  # avoid messages every time a window is extracted

    cuda = torch.cuda.is_available()
    seed = 20240205
    set_random_seeds(seed=seed, cuda=cuda)



.. GENERATED FROM PYTHON SOURCE LINES 38-41

If you want to try this code with the actual data, please delete the next
section. We are required to mock some dataset functionality, since the data
is not available at creation time of this example.

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: Python

    from braindecode.datasets.tuh import _TUHMock as TUH  # noqa F811



.. GENERATED FROM PYTHON SOURCE LINES 45-51

Creating Temple University Hospital (TUH) EEG Corpus Dataset
------------------------------------------------------------

We start by creating a TUH dataset. Instead of just a `str`, we give it
multiple strings as target names. Each of the strings has to exist as a
column in the description DataFrame.

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: Python


    TUH_PATH = "please insert actual path to data here"
    tuh = TUH(
        path=TUH_PATH,
        recording_ids=None,
        target_name=("age", "gender"),  # use both age and gender as decoding target
        preload=False,
        add_physician_reports=False,
    )
    print(tuh.description)


.. GENERATED FROM PYTHON SOURCE LINES 63-71

Exploring Data
--------------

Iterating through the dataset gives ``x`` as an ndarray with shape
``(n_channels x 1)`` and ``y`` as a list containing ``[age of the subject, gender
of the subject]``.
Let's look at the last example as it has more interesting age/gender labels
(compare to the last row of the dataframe above).

.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: Python

    x, y = tuh[-1]

    print(f"{x=}\n{y=}")



.. GENERATED FROM PYTHON SOURCE LINES 77-84

Creating Windows
----------------

We will skip preprocessing steps for now, since it is not the aim of this
example. Instead, we will directly create compute windows. We specify a
mapping from genders 'M' and 'F' to integers, since this is required for
decoding.

.. GENERATED FROM PYTHON SOURCE LINES 84-98

.. code-block:: Python


    tuh_windows = create_fixed_length_windows(
        tuh,
        start_offset_samples=0,
        stop_offset_samples=None,
        window_size_samples=1000,
        window_stride_samples=1000,
        drop_last_window=False,
        mapping={"M": 0, "F": 1},  # map non-digit targets
    )
    # store the number of windows required for loading later on
    tuh_windows.set_description({"n_windows": [len(d) for d in tuh_windows.datasets]})



.. GENERATED FROM PYTHON SOURCE LINES 99-105

Exploring Windows
-----------------

Iterating through the dataset gives ``x`` as an ndarray with shape
``(n_channels x 1000)``, ``y`` as ``[age, gender]``, and ``ind``.
Let's look at the last example again.

.. GENERATED FROM PYTHON SOURCE LINES 105-109

.. code-block:: Python

    x, y, ind = tuh_windows[-1]
    print(f"{x=}\n{y=}\n{ind=}")



.. GENERATED FROM PYTHON SOURCE LINES 110-115

DataLoader for Model Training
-----------------------------

We give the dataset to a pytorch DataLoader, such that it can be used for
model training.

.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: Python

    dl = DataLoader(
        dataset=tuh_windows,
        batch_size=4,
    )



.. GENERATED FROM PYTHON SOURCE LINES 122-129

Exploring DataLoader
--------------------

When iterating through the DataLoader, we get ``batch_X`` as a tensor with shape
``(4 x n_channels x 1000)``, ``batch_y`` as ``[tensor([4 x age of subject]),
tensor([4 x gender of subject])]``, and ``batch_ind``. To view the last example,
simply iterate through the DataLoader:

.. GENERATED FROM PYTHON SOURCE LINES 129-134

.. code-block:: Python


    for batch_X, batch_y, batch_ind in dl:
        pass

    print(f"{batch_X=}\n{batch_y=}\n{batch_ind=}")

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_datasets_io_plot_tuh_discrete_multitarget.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_tuh_discrete_multitarget.ipynb <plot_tuh_discrete_multitarget.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_tuh_discrete_multitarget.py <plot_tuh_discrete_multitarget.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_tuh_discrete_multitarget.zip <plot_tuh_discrete_multitarget.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
