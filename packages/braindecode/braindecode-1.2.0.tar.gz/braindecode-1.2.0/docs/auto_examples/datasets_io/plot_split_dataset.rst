
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/datasets_io/plot_split_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_datasets_io_plot_split_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_datasets_io_plot_split_dataset.py:

.. _split-dataset-example:

Split Dataset Example
=====================

In this example, we aim to show multiple ways of how you can split your datasets for
training, testing, and evaluating your models.

.. contents:: This example covers:
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 14-22

.. code-block:: Python


    # Authors: Lukas Gemein <l.gemein@gmail.com>
    #
    # License: BSD (3-clause)

    from braindecode.datasets import MOABBDataset
    from braindecode.preprocessing import create_windows_from_events


.. GENERATED FROM PYTHON SOURCE LINES 23-30

Loading the dataset
-------------------------------------

Firstly, we create a dataset using the braindecode
:class:`MOABBDataset <braindecode.datasets.MOABBDataset>` to load
it fetched from MOABB. In this example, we're using Dataset 2a from BCI
Competition IV.

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: Python


    dataset = MOABBDataset(dataset_name="BNCI2014001", subject_ids=[1])


.. GENERATED FROM PYTHON SOURCE LINES 34-44

Splitting
-------------------------------------

By description information
~~~~~~~~~~~~~~~~~~~~~~~~~~

The class :class:`MOABBDataset <braindecode.datasets.MOABBDataset>` has a pandas
DataFrame containing additional description of its internal datasets,
which can be used to help splitting the data
based on recording information, such as subject, session, and run of each trial.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: Python


    dataset.description


.. GENERATED FROM PYTHON SOURCE LINES 48-51

Here, we're splitting the data based on different runs. The method split returns
a dictionary with string keys corresponding to unique entries in the description
DataFrame column.

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: Python


    splits = dataset.split("run")
    print(splits)
    splits["4"].description


.. GENERATED FROM PYTHON SOURCE LINES 57-63

By row index
~~~~~~~~~~~~~

Another way we can split the dataset is based on a list of integers corresponding to
rows in the description. In this case, the returned dictionary will have
'0' as the only key.

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python


    splits = dataset.split([0, 1, 5])
    print(splits)
    splits["0"].description


.. GENERATED FROM PYTHON SOURCE LINES 69-73

However, if we want multiple splits based on indices, we can also define a list
containing lists of integers. In this case, the dictionary will have string keys
representing the index of the dataset split in the order of the given list of
integers.

.. GENERATED FROM PYTHON SOURCE LINES 73-78

.. code-block:: Python


    splits = dataset.split([[0, 1, 5], [2, 3, 4], [6, 7, 8, 9, 10, 11]])
    print(splits)
    splits["2"].description


.. GENERATED FROM PYTHON SOURCE LINES 79-81

You can also name each split in the output dictionary by specifying the keys
of each list of indexes in the input dictionary:

.. GENERATED FROM PYTHON SOURCE LINES 81-88

.. code-block:: Python


    splits = dataset.split(
        {"train": [0, 1, 5], "valid": [2, 3, 4], "test": [6, 7, 8, 9, 10, 11]}
    )
    print(splits)
    splits["test"].description


.. GENERATED FROM PYTHON SOURCE LINES 89-93

Observation
-------------------------------------

Similarly, we can split datasets after creating windows using the same methods.

.. GENERATED FROM PYTHON SOURCE LINES 93-98

.. code-block:: Python


    windows = create_windows_from_events(
        dataset, trial_start_offset_samples=0, trial_stop_offset_samples=0
    )


.. GENERATED FROM PYTHON SOURCE LINES 99-121

.. code-block:: Python


    # Splitting by different runs
    print("Using description info")
    splits = windows.split("run")
    print(splits)
    print()

    # Splitting by row index
    print("Splitting by row index")
    splits = windows.split([4, 8])
    print(splits)
    print()

    print("Multiple row index split")
    splits = windows.split([[4, 8], [5, 9, 11]])
    print(splits)
    print()

    # Specifying output's keys
    print("Specifying keys")
    splits = windows.split(dict(train=[4, 8], test=[5, 9, 11]))
    print(splits)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_datasets_io_plot_split_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_split_dataset.ipynb <plot_split_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_split_dataset.py <plot_split_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_split_dataset.zip <plot_split_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
