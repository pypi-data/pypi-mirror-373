
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_building/plot_basic_training_epochs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_building_plot_basic_training_epochs.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_building_plot_basic_training_epochs.py:

.. _basic-training-epochs:

Simple training on MNE epochs
=============================

The braindecode library gives you access to a large number of neural network
architectures that were developed for EEG data decoding. This tutorial will
show you how you can easily use any of these models to decode your own data.
In particular, we assume that have your data in an MNE format and want to
train one of the Braindecode models on it.

.. contents:: This example covers:
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: Python


    # Authors: Pierre Guetschel <pierre.guetschel@gmail.com>
    #
    # License: BSD (3-clause)


.. GENERATED FROM PYTHON SOURCE LINES 23-40

Finding the model you want
--------------------------

Exploring the braindecode online documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's suppose you recently stumbled upon the Schirrmeister 2017 article [1]_.
In this article, the authors mention that their novel architecture ShallowConvNet
is performing well on the BCI Competition IV 2a dataset and you would like to use
it on your own data. Fortunately, the authors also mentioned they published their
architecture on Braindecode!

In order to use this architecture, you first need to find what is its exact
name in Braindecode. To do so, you can visit Braindecode's Models Page
page for information on which are the available models.

Alternatively, the :doc:`API </api>` also provide a dictionary with all available models:

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python


    from braindecode.models.util import models_dict

    print(f"All the Braindecode models:\n{list(models_dict.keys())}")


.. GENERATED FROM PYTHON SOURCE LINES 46-48

After your investigation, you found out that the model you are looking for is
``ShallowFBCSPNet``. You can now import it from Braindecode:

.. GENERATED FROM PYTHON SOURCE LINES 48-54

.. code-block:: Python


    import torch

    from braindecode.models import ShallowFBCSPNet
    from braindecode.util import set_random_seeds


.. GENERATED FROM PYTHON SOURCE LINES 55-61

Examining the model
~~~~~~~~~~~~~~~~~~~

Now that you found your model, you must check which parameters it expects.
You can find this information either in the online documentation here:
:class:`braindecode.models.ShallowFBCSPNet` or directly in the module's docstring:

.. GENERATED FROM PYTHON SOURCE LINES 61-69

.. code-block:: Python


    print(ShallowFBCSPNet.__doc__)

    # Set random seed to ensure reproducible initialization below
    seed = 20240205
    cuda = torch.cuda.is_available()
    set_random_seeds(seed=seed, cuda=cuda)


.. GENERATED FROM PYTHON SOURCE LINES 70-74

Additionally, you might be interested in visualizing the model's architecture.
This can be done by initializing the model and calling its ``__str__()`` method.
To initialize it, we need to specify some parameters that we set at random
values for now:

.. GENERATED FROM PYTHON SOURCE LINES 74-83

.. code-block:: Python


    model = ShallowFBCSPNet(
        n_chans=32,
        n_times=1000,
        n_outputs=2,
        final_conv_length="auto",
    )
    print(model)


.. GENERATED FROM PYTHON SOURCE LINES 84-97

Loading your own data with MNE
------------------------------

In this tutorial, we demonstrate how to train the model on MNE data.
MNE is quite a popular library for EEG data analysis as it provides methods
to load data from many different file formats and a large collection of algorithms
to preprocess it.
However, Braindecode is not limited to MNE and can be used with numpy arrays or
PyTorch tensors/datasets.

For this example, we generate some random data containing 100 examples with each
3 channels and 1024 time points. We also generate some random labels for our data
that simulate a 4-class classification problem.

.. GENERATED FROM PYTHON SOURCE LINES 97-107

.. code-block:: Python


    import mne
    import numpy as np

    info = mne.create_info(ch_names=["C3", "C4", "Cz"], sfreq=256.0, ch_types="eeg")
    X = np.random.randn(100, 3, 1024)  # 100 epochs, 3 channels, 4 seconds (@256Hz)
    epochs = mne.EpochsArray(X, info=info)
    y = np.random.randint(0, 4, size=100)  # 4 classes
    print(epochs)


.. GENERATED FROM PYTHON SOURCE LINES 108-131

Training your model (scikit-learn compatible)
---------------------------------------------

Now that you know which model you want to use, you know how to instantiate it,
and that we have some fake data, it is time to train the model!

.. note::
   `<skorch_>`_  is a library that allows you to wrap
   any PyTorch module into a scikit-learn-compatible classifier or regressor.
   Braindecode provides wrappers that inherit form the original Skorch ones and simply
   implement a few additional features that facilitate the use of Braindecode models.

To train a Braindecode model, the easiest way is by using braindecode's
Skorch wrappers. These wrappers are :class:`braindecode.classifier.EEGClassifier` and
:class:`braindecode.regressor.EEGRegressor`. As our fake data is a classification task,
we will use the former.

The wrapper :class:`braindecode.classifier.EEGClassifier` expects a model class as its first argument but
to facilitate the usage, you can also simply pass the name of any braindecode model as a string.
The wrapper automatically finds and instantiates the model for you.
If you want to pass parameters to your model, you can give them to the wrapper
with the prefix ``module__``.


.. GENERATED FROM PYTHON SOURCE LINES 131-142

.. code-block:: Python

    from skorch.dataset import ValidSplit

    from braindecode import EEGClassifier

    net = EEGClassifier(
        "ShallowFBCSPNet",
        module__final_conv_length="auto",
        train_split=ValidSplit(0.2),
        # To train a neural network you need validation split, here, we use 20%.
    )


.. GENERATED FROM PYTHON SOURCE LINES 143-153

In this example, we passed one additional parameter to the wrapper: ``module__final_conv_length``
that will be forwarded to the model (without the prefix ``module__``).

We also note that the parameters ``n_chans``, ``n_times`` and ``n_outputs`` were not specified
even if :class:`braindecode.models.ShallowFBCSPNet` needs them to be initialized. This is because the
wrapper will automatically infer them, along with some other signal-related parameters,
from the input data at training time.

Now that we have our model wrapped in a scikit-learn-compatible classifier,
we can train it by simply calling the ``fit`` method:

.. GENERATED FROM PYTHON SOURCE LINES 153-156

.. code-block:: Python


    net.fit(epochs, y)


.. GENERATED FROM PYTHON SOURCE LINES 157-158

The pre-trained model is accessible via the ``module_`` attribute:

.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: Python


    print(net.module_)


.. GENERATED FROM PYTHON SOURCE LINES 162-164

And we can see that all the following parameters were automatically inferred
from the training data:

.. GENERATED FROM PYTHON SOURCE LINES 164-170

.. code-block:: Python


    print(
        f"{net.module_.n_chans=}\n{net.module_.n_times=}\n{net.module_.n_outputs=}"
        f"\n{net.module_.input_window_seconds=}\n{net.module_.sfreq=}\n{net.module_.chs_info=}"
    )


.. GENERATED FROM PYTHON SOURCE LINES 171-178

Depending on the type of data used for training, some parameters might not be
possible to infer. For example if you pass a numpy array or a
:class:`braindecode.datasets.WindowsDataset` with ``targets_from="metadata"``,
then only ``n_chans``, ``n_times`` and ``n_outputs`` will be inferred.
And if you pass other types of datasets, only ``n_chans`` and ``n_times`` will be inferred.
In these case, you will have to pass the missing parameters manually
(with the prefix ``module__``).

.. GENERATED FROM PYTHON SOURCE LINES 180-190

References
----------

.. [1] Schirrmeister, R.T., Springenberg, J.T., Fiederer, L.D.J., Glasstetter,
       M., Eggensperger, K., Tangermann, M., Hutter, F. & Ball, T.(2017).
       Deep learning with convolutional neural networks for EEG decoding and visualization.
       Human Brain Mapping, Aug. 2017.
       Online: http://dx.doi.org/10.1002/hbm.23730

.. include:: /links.inc

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_model_building_plot_basic_training_epochs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_basic_training_epochs.ipynb <plot_basic_training_epochs.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_basic_training_epochs.py <plot_basic_training_epochs.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_basic_training_epochs.zip <plot_basic_training_epochs.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
