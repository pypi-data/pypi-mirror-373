[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "reasoning-kernel"
dynamic = ["version"]
description = "SK-native MSA Architecture for Advanced Reasoning"
readme = "README.md"
requires-python = ">=3.10,<3.14"
license = {text = "MIT"}
keywords = ["semantic-kernel", "msa", "reasoning", "probabilistic-programming", "ai"]
authors = [
  { name = "Qredence Team", email = "contact@qredence.ai" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  # Core SK dependencies
  "semantic-kernel>=1.36.0,<2.0.0",
  "pydantic>=2.0.0,<3.0.0",
  "pydantic-settings>=2.0.0,<3.0.0",
  
  # Redis for caching and storage
  "redis>=5.0.0,<6.0.0",
  "aioredis>=2.0.0,<3.0.0",
  
  # Probabilistic programming frameworks
  "numpyro>=0.15.0",
  "pyro-ppl>=1.8.0",
  "tensorflow-probability>=0.24.0",
  
  # Scientific computing
  "numpy>=1.24.0",
  "scipy>=1.11.0",
  "pandas>=2.0.0",
  
  # HTTP and async support
  "aiohttp>=3.9.0",
  "httpx>=0.27.0",
  
  # API framework (keep existing FastAPI if needed)
  "fastapi>=0.104.0,<1.0.0",
  "uvicorn[standard]>=0.24.0,<1.0.0",
  
  # Utilities
  "python-dotenv>=1.0.0",
  "typing-extensions>=4.8.0",
  "click>=8.1.0",
  "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=4.0.0",
  "mypy>=1.8.0",
  "ruff>=0.1.0",
  "pre-commit>=3.6.0",
]
test = [
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-mock>=3.12.0",
  "pytest-benchmark>=4.0.0",
]
docs = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.5.0",
  "mkdocstrings[python]>=0.24.0",
]
all = [
  "reasoning-kernel[dev,test,docs]",
]

[project.urls]
Documentation = "https://github.com/qredence/reasoning-kernel#readme"
Issues = "https://github.com/qredence/reasoning-kernel/issues"
Source = "https://github.com/qredence/reasoning-kernel"

[project.scripts]
reasoning-kernel = "reasoning_kernel.main:main"

[tool.hatch.version]
path = "reasoning_kernel/__version__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/tests",
  "/benchmarks",
  "/docs",
  "/examples",
  "/.pre-commit-config.yaml",
  "/simple_test.py",
  "/test_sk_native.py",
]

[tool.hatch.build.targets.wheel]
packages = ["reasoning_kernel"]

# UV-specific configuration
[tool.uv]
dev-dependencies = [
  "reasoning-kernel[dev,test]",
]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--disable-warnings",
  "-ra",
]
asyncio_mode = "auto"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]

# Linting with Ruff
[tool.ruff]
target-version = "py310"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
  "ARG", # flake8-unused-arguments
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
]
ignore = [
  "E501",  # line too long, handled by formatter
  "B008",  # do not perform function calls in argument defaults
  "B904",  # raise from e
  "C901",  # too complex
  "ARG002", # unused method argument
  "SIM108", # ternary operator
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*.py" = ["ARG", "S101", "SIM"]

[tool.ruff.lint.isort]
known-first-party = ["reasoning_kernel"]

# Type checking with mypy
[tool.mypy]
python_version = "3.10"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
  "numpyro.*",
  "pyro.*", 
  "tensorflow_probability.*",
  "redis.*",
  "aioredis.*",
]
ignore_missing_imports = true

# Coverage
[tool.coverage.run]
source = ["reasoning_kernel"]
branch = true
omit = [
  "*/tests/*",
  "/benchmarks/*", 
  "/examples/*",
]

[tool.coverage.report]
precision = 1
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
