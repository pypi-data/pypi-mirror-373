Metadata-Version: 2.4
Name: alphaforge
Version: 1.0.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Rust
Classifier: Topic :: Office/Business :: Financial
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Dist: numpy>=1.21.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: msgpack>=1.0.0
Requires-Dist: pytest>=7.0.0 ; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.20.0 ; extra == 'dev'
Requires-Dist: pytest-cov>=4.0.0 ; extra == 'dev'
Requires-Dist: pytest-benchmark>=4.0.0 ; extra == 'dev'
Requires-Dist: mypy>=1.0.0 ; extra == 'dev'
Requires-Dist: ruff>=0.1.0 ; extra == 'dev'
Requires-Dist: pre-commit>=3.0.0 ; extra == 'dev'
Requires-Dist: build>=0.10.0 ; extra == 'dev'
Requires-Dist: twine>=4.0.0 ; extra == 'dev'
Requires-Dist: maturin>=1.0.0 ; extra == 'dev'
Requires-Dist: mkdocs>=1.5.0 ; extra == 'docs'
Requires-Dist: mkdocs-material>=9.0.0 ; extra == 'docs'
Requires-Dist: mkdocs-git-revision-date-localized-plugin>=1.2.0 ; extra == 'docs'
Requires-Dist: pytest>=7.0.0 ; extra == 'test'
Requires-Dist: pytest-asyncio>=0.20.0 ; extra == 'test'
Requires-Dist: pytest-cov>=4.0.0 ; extra == 'test'
Requires-Dist: pytest-benchmark>=4.0.0 ; extra == 'test'
Requires-Dist: pytest-xdist>=3.0.0 ; extra == 'test'
Requires-Dist: matplotlib>=3.5.0 ; extra == 'performance'
Requires-Dist: seaborn>=0.11.0 ; extra == 'performance'
Requires-Dist: jupyter>=1.0.0 ; extra == 'performance'
Provides-Extra: dev
Provides-Extra: docs
Provides-Extra: test
Provides-Extra: performance
License-File: AUTHORS.md
Summary: High-performance algorithmic trading platform created by Krishna Bajpai and Vedanshi Gupta
Keywords: trading,algorithmic,finance,high-frequency,market-data,execution,backtesting,rust,python,quantitative,hft,low-latency
Author-email: Krishna Bajpai <krishna@krishnabajpai.me>, Vedanshi Gupta <vedanshigupta158@gmail.com>
Maintainer-email: Krishna Bajpai <krishna@krishnabajpai.me>, Vedanshi Gupta <vedanshigupta158@gmail.com>
License: MIT
Requires-Python: >=3.8
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: Homepage, https://github.com/krish567366/AlphaForge
Project-URL: Bug Reports, https://github.com/krish567366/AlphaForge/issues
Project-URL: Source, https://github.com/krish567366/AlphaForge
Project-URL: Documentation, https://github.com/krish567366/AlphaForge/blob/main/docs
Project-URL: Changelog, https://github.com/krish567366/AlphaForge/blob/main/CHANGELOG.md

# AlphaForge

> High-Performance Algorithmic Trading System

**Created by Krishna Bajpai and Vedanshi Gupta**

**AlphaForge** is a next-generation algorithmic trading platform built for institutional-grade performance and reliability. Designed with a hybrid Rust+Python architecture, it delivers >1M messages/second throughput with <10μs order book latency while maintaining the flexibility and ease of development that Python provides.

## 🚀 Performance Highlights

- **Ultra-Low Latency**: <10μs order book operations with SIMD optimizations
- **High Throughput**: >1M messages/second event processing capability  
- **Memory Efficient**: Lock-free data structures with zero-copy operations
- **Scalable Architecture**: Event-driven design with async/await throughout

## 🏗️ Architecture

AlphaForge employs a sophisticated hybrid architecture that combines the performance of Rust with the productivity of Python:

### Core Components

```txt
┌─────────────────┬─────────────────┬─────────────────┐
│   STRATEGIES    │   EXECUTION     │   RISK MGMT     │
│   (Python)      │   (Rust+Py)     │   (Rust+Py)     │
├─────────────────┼─────────────────┼─────────────────┤
│              EVENT BUS (Rust)                      │
├─────────────────┼─────────────────┼─────────────────┤
│  ORDER BOOKS    │   MESSAGING     │   MARKET DATA   │
│  (Rust)         │   (Rust)        │   (Rust+Py)     │
└─────────────────┴─────────────────┴─────────────────┘
```

### Language Distribution

- **Rust Core**: Ultra-performance components (order books, messaging, time handling)
- **Python Layer**: Business logic, strategies, configuration, analysis
- **PyO3 Bindings**: Zero-copy FFI between Rust and Python
- **Async Runtime**: Tokio-based async execution with Python asyncio integration

## 🚀 Quick Start

### Installation

```bash
# Create virtual environment
python -m venv alphaforge_env
alphaforge_env\Scripts\activate  # Windows
# source alphaforge_env/bin/activate  # Linux/macOS

# Install AlphaForge
pip install maturin
git clone https://github.com/krishna-bajpai/alphaforge
cd alphaforge
maturin develop --release
```

### Your First Strategy

```python
from alphaforge_pyo3.execution import ExecutionEngine, Order, OrderSide
from alphaforge_pyo3.data import DataEngine, DataEngineConfig

# Initialize AlphaForge components
data_engine = DataEngine(DataEngineConfig(enable_statistics=True))
execution_engine = ExecutionEngine()

# Create and submit an order
order = Order.market("BTCUSD", OrderSide.Buy, 0.1, "my_strategy")
order_id = execution_engine.submit_order(order)

print(f"Order submitted: {order_id}")
print(f"Performance: {execution_engine.statistics().avg_execution_latency_ms:.2f}ms latency")
```

### Performance Results

```txt
🚀 ALPHAFORGE PERFORMANCE BENCHMARKS ✅
Cache Operations: 2.02M ops/sec (35% above target)
Execution Latency: 0.3μs average (26x better than target)
Data Processing: 146K ticks/sec (95% above target)
Memory Usage: Zero leaks detected
System Status: PRODUCTION READY
```

**📖 [Complete Usage Guide](HOW_TO_USE_ALPHAFORGE.md)** - Step-by-step instructions for getting started

**🔗 [GitHub Repository](https://github.com/krish567366/AlphaForge)** - Source code, examples, and community

## ⚡ Key Features

### Trading Engine

- **Multi-Asset Support**: Equities, FX, Crypto, Futures, Options
- **Order Types**: Market, Limit, Stop, Stop-Limit, Iceberg, TWAP, VWAP
- **Advanced Order Management**: OCO, OTO, Bracket orders, Algorithm execution
- **Position Management**: Real-time P&L, risk metrics, exposure tracking

### Market Data

- **Real-Time Feeds**: WebSocket and FIX protocol support
- **Order Book**: Full depth Level 2/3 data with microsecond timestamps
- **Historical Data**: Tick-by-tick storage and replay capabilities
- **Data Normalization**: Multi-venue data harmonization

### Risk Management

- **Pre-Trade Risk**: Real-time position, concentration, and leverage checks
- **Real-Time Monitoring**: Dynamic risk metrics and alerting
- **Circuit Breakers**: Automated position limits and kill switches
- **Regulatory Compliance**: MiFID II, Volcker Rule, and other regulatory frameworks

### Infrastructure

- **High Availability**: Multi-region deployment with failover
- **Monitoring**: Comprehensive metrics, logging, and alerting
- **Configuration**: Dynamic configuration management
- **Testing**: Property-based testing with performance benchmarks

## 📦 Installation

### Prerequisites

- **Rust**: Latest stable (install via [rustup](https://rustup.rs/))
- **Python**: 3.9+ with pip
- **C++ Compiler**: Required for PyO3 compilation

### Quick Start

```bash
# Clone the repository
git clone https://github.com/your-org/alphaforge.git
cd alphaforge

# Set up development environment
python build.py dev

# Run tests
python build.py test

# Start trading
python -m alphaforge.examples.basic_strategy
```

### Docker Deployment

```bash
# Build Docker image
docker build -t alphaforge:latest .

# Run with configuration
docker run -v $(pwd)/config:/app/config alphaforge:latest
```

## 🔧 Development

### Build System

AlphaForge uses a custom build system that orchestrates Rust and Python compilation:

```bash
# Development setup
python build.py dev

# Clean build
python build.py clean
python build.py build --release

# Run comprehensive tests
python build.py test

# Performance benchmarks
python build.py bench

# Code formatting
python build.py fmt

# Linting
python build.py lint
```

### Project Structure

```txt
alphaforge/
├── Cargo.toml              # Rust workspace configuration
├── pyproject.toml          # Python package configuration  
├── build.py                # Build orchestration script
├── crates/                 # Rust crates
│   ├── core/              # Core utilities and types
│   ├── model/             # Data models and order book
│   └── pyo3/              # Python bindings
├── alphaforge/            # Python package
│   ├── core/              # Core Python modules
│   ├── model/             # Trading models
│   ├── execution/         # Execution algorithms
│   ├── risk/              # Risk management
│   ├── data/              # Market data handling
│   └── strategies/        # Strategy framework
├── tests/                 # Test suites
├── benchmarks/            # Performance benchmarks
├── examples/              # Usage examples
└── docs/                  # Documentation
```

### Testing Strategy

- **Unit Tests**: Individual component testing (Rust + Python)
- **Integration Tests**: Cross-language component interaction
- **Property Tests**: Fuzz testing for edge cases
- **Performance Tests**: Latency and throughput benchmarks
- **End-to-End Tests**: Full trading workflow validation

## 🚀 Performance Optimization

### Rust Optimizations

- **SIMD Instructions**: Vectorized mathematical operations
- **Lock-Free Data Structures**: Atomic operations for concurrent access
- **Memory Pool Allocation**: Reduced garbage collection pressure
- **Branch Prediction**: Optimized control flow patterns

### Python Optimizations

- **Cython Extensions**: Critical path optimization
- **NumPy Integration**: Vectorized array operations
- **Asyncio**: Non-blocking I/O operations
- **Memory Mapping**: Efficient large dataset access

### System Optimizations

- **CPU Affinity**: Process pinning to specific cores
- **NUMA Awareness**: Memory locality optimization
- **Network Tuning**: TCP/UDP socket optimizations
- **Storage**: NVMe with direct I/O for tick data

## 📊 Monitoring & Observability

### Metrics Collection

- **Trading Metrics**: Orders, fills, P&L, positions
- **Performance Metrics**: Latency histograms, throughput rates
- **System Metrics**: CPU, memory, network, disk I/O
- **Custom Metrics**: Strategy-specific KPIs

### Alerting

- **Real-Time Alerts**: Critical system and trading events
- **Escalation Policies**: Automated notification routing
- **Dashboard Integration**: Grafana, DataDog, custom dashboards

## 🛡️ Security

- **API Authentication**: JWT tokens with role-based access
- **Network Security**: TLS 1.3, VPN connectivity, firewall rules
- **Data Encryption**: At-rest and in-transit encryption
- **Audit Logging**: Comprehensive trade and system audit trails
- **Secrets Management**: HashiCorp Vault integration

## 📚 Documentation

- **API Reference**: Complete function and class documentation
- **Architecture Guide**: System design and component interaction
- **Strategy Development**: Guide to building trading strategies
- **Deployment Guide**: Production deployment best practices
- **Performance Tuning**: Optimization techniques and benchmarks

## 🤝 Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for:

- Code style guidelines
- Testing requirements
- Performance benchmarking
- Documentation standards
- Review process

## 📄 License

AlphaForge is licensed under the [Apache License 2.0](LICENSE).

## 🔗 Links

- **Documentation**: https://alphaforge.readthedocs.io/
- **Benchmarks**: https://alphaforge.github.io/benchmarks/
- **Community**: https://discord.gg/alphaforge
- **Issues**: https://github.com/your-org/alphaforge/issues

