Metadata-Version: 2.4
Name: snp-nw
Version: 0.1.2
Summary: Stepwise Noise Peeling (SNP) for Nadarayaâ€“Watson Regression
Author: Bistoon Hosseini
License: MIT License
        
        Copyright (c) 2025 Bistoon Hosseini
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.21
Dynamic: license-file

# SNP-Python: Stepwise Noise Peeling for Nadarayaâ€“Watson Regression

The **SNP-Python** package implements the Stepwise Noise Peeling algorithm for efficient bandwidth selection in Nadarayaâ€“Watson regression with Gaussian kernels. SNP provides a scalable alternative to Direct Generalized Cross-Validation (DGCV) by converting continuous bandwidth optimization into discrete iteration selection.

## Installation

Install from PyPI (recommended):

```bash
pip install snp-nw
```

Or install the latest development version from GitHub:

```bash
pip install git+https://github.com/bistoonh/SNP-Python.git
```

## Quick Start

```python
import numpy as np
import matplotlib.pyplot as plt
from snp import SNP, DGCV

# Generate sample data
np.random.seed(123)
n = 2000
x = np.sort(np.random.rand(n))
y = np.sin(2*np.pi*x) + np.random.normal(0, 0.1, size=n)

# Apply SNP smoothing
snp_result = SNP(x, y)

# Compare with DGCV
dgcv_result = DGCV(x, y)

# Print performance comparison
print("SNP:  h_start=%.4f, k_opt=%d, time=%.4fs" %
      (snp_result["h_start"], snp_result["k_opt"], snp_result["time_elapsed"]))
print("DGCV: h_opt=%.4f, time=%.4fs" %
      (dgcv_result["h_opt_gcv"], dgcv_result["time_elapsed"]))

# Plot results
plt.scatter(x, y, s=8, c="gray", label="Data")
plt.plot(x, snp_result["y_k_opt"], c="red", lw=2, label="SNP")
plt.plot(x, dgcv_result["y_h_opt"], c="blue", lw=2, label="DGCV")
plt.legend()
plt.title("SNP vs DGCV Comparison")
plt.show()
```

## Key Features

- âš¡ **Fast**: Orders of magnitude faster than DGCV for large datasets  
- ðŸ“Š **Accurate**: Statistically equivalent results to DGCV  
- ðŸŽ¯ **Adaptive**: Automatically adjusts bandwidth through iterative process  
- ðŸ”§ **Robust**: Handles edge cases and various data sizes  
- ðŸ“– **Well-documented**: Comprehensive help files and examples  

## License

This project is licensed under the MIT License â€“ see the [LICENSE](LICENSE) file for details.

## Issues

Found a bug? Have a feature request? Please [open an issue](https://github.com/bistoonh/SNP-Python/issues) on GitHub.
