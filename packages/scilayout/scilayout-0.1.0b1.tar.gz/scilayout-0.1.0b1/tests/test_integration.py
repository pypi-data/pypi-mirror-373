"""Test scilayout figure using SVG data.

"""
import unittest
import os
import matplotlib.pyplot as plt
from xml.etree import ElementTree as ET

from tests import utils
utils.add_parent_dir_to_sys_path()

import scilayout

class TestSVGExport(unittest.TestCase):
    """Test scilayout figure using SVG data.
    The axes generated by scilayout in cm will have px values in the SVG file.
    """
    @classmethod
    def setUp(self):
        # Create a directory for test outputs if it doesn't exist
        if not os.path.exists('test_outputs'):
            os.makedirs('test_outputs')
        
        self.fig = scilayout.classes.SciFigure()
    
    @classmethod
    def tearDown(self):
        plt.close(self.fig)
        for file in os.listdir('test_outputs'):
            print(f"Removing {file}")
            os.remove(os.path.join('test_outputs', file))

    
    def test_svg_export(self):
        # Generate the SVG file using your module's functionality
        fig = self.fig
        fig.set_size_cm(10, 10)
        ax = fig.add_panel((2, 2, 7, 6))

        
        # Save the figure as an SVG
        output_path = 'test_outputs/test_output.svg'
        fig.savefig(output_path)
        plt.close(fig)
        
        
        # Parse the SVG and check the coordinates
        tree = ET.parse(output_path)
        root = tree.getroot()

         # Find the specific <g> element with id="axes_1"
        namespace = {'svg': 'http://www.w3.org/2000/svg'}
        axes_group = root.find('.//svg:g[@id="axes_1"]', namespaces=namespace)
        self.assertIsNotNone(axes_group, "Group with id='axes_1' not found in SVG.")

        # Find the first <path> within this group
        path = axes_group.find('.//svg:path', namespaces=namespace)
        self.assertIsNotNone(path, "Path not found in the axes group.")

        # Extract and parse the 'd' attribute from the path
        path_data = path.attrib['d']
        # For example, M 28.346457 85.03937 L 141.732283 85.03937 L 141.732283 56.692913 L 28.346457 56.692913 z
        coords = path_data.split()
        x0 = float(coords[1])
        y0 = float(coords[2])
        x1 = float(coords[4])
        y1 = float(coords[7])

        # Expected coordinates (convert from cm to px or use your expected values)
        expected_x0 = 56.692913  # Example
        expected_y0 = 170.07874  # Example
        expected_x1 = 198.425197  # Example
        expected_y1 = 198.425197  # Example

        # Assert coordinates are as expected (with some tolerance if needed)
        self.assertAlmostEqual(x0, expected_x0, places=2)
        self.assertAlmostEqual(y0, expected_y0, places=2)
        self.assertAlmostEqual(x1, expected_x1, places=2)
        self.assertAlmostEqual(y1, expected_y1, places=2)
        

if __name__ == '__main__':
    unittest.main()