# ------------------------------------------------ #
# --- Setup file for gridmarthe python package --- #
# ------------------------------------------------ #
[build-system]
requires = [
    "setuptools",
    "wheel",
    "cibuildwheel",
    "charset_normalizer",
    "spin",
    "numpy",
    "meson",
    "meson-python",
    "ninja"
]
# build-backend = "setuptools.build_meta"
build-backend = "mesonpy"

[project]
name = "gridmarthe"
dynamic = ["version"]
authors = [
    {name = "Adrien Manlay", email = "a.manlay@brgm.fr"},
    {name = "Jean-Pierre Vergnes", email = "jp.vergnes@brgm.fr"},
]

description = "python package to read/write/manage Marthe Grids"
readme = {file = "README.md", content-type = "text/markdown"}   
license = {file = "COPYING"}

classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Fortran",
    "Operating System :: Unix",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Topic :: Software Development",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Development Status :: 4 - Beta",
]

keywords = ["hydrology", "groundwater", "modelling"]

requires-python = ">=3.10"
dependencies = [
    "numpy",
    "pandas",
    "h5netcdf",
    "xarray",
    "pyproj",
    "shapely",
    "matplotlib",
    "geopandas",
]

[project.optional-dependencies]
# install with `pip install gridmarthe[gis]`
gis = ["rioxarray", "rasterio"]
doc = ['sphinx', 'pydata_sphinx_theme', 'sphinx-copybutton', 'sphinx_design', 'sphinxcontrib-bibtex', 'myst_nb']

[project.scripts]
ncmart = "gridmarthe:scripts.ncmart.main"
cleanmgrid = "gridmarthe:scripts.cleanmgrid.main"
martshp = "gridmarthe:scripts.martshp.main"


[project.urls]
Homepage = "https://gitlab.com/brgm/hydrogeological-modelling/marthe-tools/gridmarthe"
Issues = "https://gitlab.com/brgm/hydrogeological-modelling/marthe-tools/gridmarthe/-/issues"
Changelog = "https://gitlab.com/brgm/hydrogeological-modelling/marthe-tools/gridmarthe/-/blob/main/changelog.rst"
Documentation = "https://gridmarthe.readthedocs.io/en/latest/"


[tool.setuptools.dynamic]
version = {attr = "gridmarthe.__version__"}

[tool.setuptools]
include-package-data = true

# [tool.setuptools.packages.find]
# where = ["src"] # not necessary, with toml, by default, src and flat layout are automatically discovered

[tool.setuptools.package-data]
"*" = ["*.pyd", "*.dll", "*.so"] # works like a charm


# [tool.meson-python.args]
# https://mesonbuild.com/meson-python/reference/pyproject-settings.html
# https://mesonbuild.com/meson-python/how-to-guides/meson-args.html
# setup = ['--default-library=static']
# setup = ['--build-dir=build']


[tool.cibuildwheel]
skip = "cp36-* cp37-* cp-38* pp* *musl* *_i686 *_ppc64le *_s390x *_universal2"
# skip = ["pp*", "*musl*"]
# test-requires = "pytest"
# test-command = "pytest {project}/tests"

[tool.cibuildwheel.linux]
archs = ["x86_64"]
# repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.windows]
archs = ["AMD64"]
repair-wheel-command = "delvewheel repair -v -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = ["arm64"]
# repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"


[tool.spin]
package = 'gridmarthe'
[tool.spin.commands]
Build = [
    'spin.cmds.pip.install',
]
