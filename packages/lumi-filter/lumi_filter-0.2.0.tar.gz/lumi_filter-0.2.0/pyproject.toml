[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lumi-filter"
version = "0.2.0"
description = "A powerful and flexible data filtering library with unified interface for multiple data sources"
readme = "README.md"
requires-python = ">=3.12"
dependencies = ["peewee>=3.18.2", "pydantic>=2.11.7"]
authors = [{ name = "chaleaoch", email = "chaleaoch@gmail.com" }]
maintainers = [{ name = "chaleaoch", email = "chaleaoch@gmail.com" }]
keywords = ["filter", "peewee", "pydantic", "flask"]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
]

[project.urls]
Homepage = "https://github.com/chaleaoch/lumi_filter"
Documentation = "https://github.com/chaleaoch/lumi_filter"
Repository = "https://github.com/chaleaoch/lumi_filter"
"Bug Tracker" = "https://github.com/chaleaoch/lumi_filter/issues"

[dependency-groups]
dev = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.18",
    "mkdocstrings[python]>=0.30.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]

[tool.pyright]
reportAttributeAccessIssue = "none"
reportIncompatibleMethodOverride = "none"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# output configuration
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--color=yes",
    "--cov=lumi_filter",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["lumi_filter"]
omit = ["*/tests/*", "*/__pycache__/*", "*/venv/*", "*/site-packages/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.coverage.html]
directory = "htmlcov"
