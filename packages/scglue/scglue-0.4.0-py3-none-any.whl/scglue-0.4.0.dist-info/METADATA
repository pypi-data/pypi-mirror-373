Metadata-Version: 2.4
Name: scglue
Version: 0.4.0
Summary: Graph-linked unified embedding for unpaired single-cell multi-omics data integration
Keywords: bioinformatics,deep-learning,single-cell,single-cell-multiomics
Author-email: Zhi-Jie Cao <caozj@mail.cbi.pku.edu.cn>, Xin-Ming Tu <xinmingtu@pku.edu.cn>
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
License-File: LICENSE
Requires-Dist: numpy>=1.19
Requires-Dist: scipy>=1.3
Requires-Dist: pandas>=1.1
Requires-Dist: matplotlib>=3.1.2
Requires-Dist: seaborn>=0.9
Requires-Dist: dill>=0.2.3
Requires-Dist: tqdm>=4.27
Requires-Dist: scikit-learn>=0.21.2
Requires-Dist: statsmodels>=0.10
Requires-Dist: parse>=1.3.2
Requires-Dist: networkx>=2
Requires-Dist: pynvml>=8.0.1
Requires-Dist: torch>=1.8
Requires-Dist: pytorch-ignite>=0.4.1
Requires-Dist: pyro-ppl>=1.0
Requires-Dist: tensorboardX>=1.4
Requires-Dist: anndata>=0.7
Requires-Dist: scanpy>=1.5
Requires-Dist: pybedtools>=0.8.1
Requires-Dist: h5py>=2.10
Requires-Dist: sparse>=0.3.1
Requires-Dist: packaging>=16.8
Requires-Dist: leidenalg>=0.7
Requires-Dist: muon>=0.1.5
Requires-Dist: sphinx<7 ; extra == "doc"
Requires-Dist: sphinx-autodoc-typehints ; extra == "doc"
Requires-Dist: sphinx-copybutton ; extra == "doc"
Requires-Dist: sphinx-intl ; extra == "doc"
Requires-Dist: nbsphinx ; extra == "doc"
Requires-Dist: sphinx-rtd-theme ; extra == "doc"
Requires-Dist: ipython ; extra == "doc"
Requires-Dist: jinja2 ; extra == "doc"
Requires-Dist: plotly ; extra == "test"
Requires-Dist: pytest ; extra == "test"
Requires-Dist: pytest-cov ; extra == "test"
Project-URL: Github, https://github.com/gao-lab/GLUE
Provides-Extra: doc
Provides-Extra: test

# GLUE (Graph-Linked Unified Embedding)

[![stars-badge](https://img.shields.io/github/stars/gao-lab/GLUE?logo=GitHub&color=yellow)](https://github.com/gao-lab/GLUE/stargazers)
[![pypi-badge](https://img.shields.io/pypi/v/scglue)](https://pypi.org/project/scglue)
[![conda-badge](https://anaconda.org/bioconda/scglue/badges/version.svg)](https://anaconda.org/bioconda/scglue)
[![docs-badge](https://readthedocs.org/projects/scglue/badge/?version=latest)](https://scglue.readthedocs.io/en/latest/?badge=latest)
[![build-badge](https://github.com/gao-lab/GLUE/actions/workflows/build.yml/badge.svg)](https://github.com/gao-lab/GLUE/actions/workflows/build.yml)
[![codecov-badge](https://codecov.io/gh/gao-lab/GLUE/graph/badge.svg?token=49YVG6XHSG)](https://codecov.io/gh/gao-lab/GLUE)
[![style-badge](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)
[![license-badge](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Graph-linked unified embedding for single-cell multi-omics data integration

![Model architecture](docs/_static/architecture.svg)

For more details, please check out our [publication](https://doi.org/10.1038/s41587-022-01284-4).

## Directory structure

```
.
├── scglue                  # Main Python package
├── data                    # Data files
├── evaluation              # Method evaluation pipelines
├── experiments             # Experiments and case studies
├── tests                   # Unit tests for the Python package
├── docs                    # Documentation files
├── custom                  # Customized third-party packages
├── packrat                 # Reproducible R environment via packrat
├── env.yaml                # Reproducible Python environment via conda
├── pyproject.toml          # Python package metadata
├── LICENSE
└── README.md
```

## Installation

The `scglue` package can be installed via conda using one of the following commands:

```sh
conda install -c conda-forge -c bioconda scglue  # CPU only
conda install -c conda-forge -c bioconda scglue pytorch-gpu  # With GPU support
```

Or, it can also be installed via pip:

```sh
pip install scglue
```

> Installing within a
> [conda environment](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html)
> is recommended.

## Usage

Please checkout the documentations and tutorials at
[scglue.readthedocs.io](https://scglue.readthedocs.io).

A Chinese version is also available [here](https://scglue.readthedocs.io/zh_CN/latest/).

## Development

Install scglue in editable form via flit (first install flit via conda or pip
if not installed already):

```sh
flit install -s
```

Run unit tests:

```sh
pytest --cov="scglue" --cov-report="term-missing" tests [--cpu-only]
```

Build documentation:

```sh
sphinx-build -b gettext docs docs/_build/gettext
sphinx-intl update -p docs/_build/gettext -l zh_CN -d docs/locale
sphinx-build -b html -D language=en docs docs/_build/html/en  # English version
sphinx-build -b html -D language=zh_CN docs docs/_build/html/zh_CN  # Chinese version
```

## Reproduce results

1. Checkout the repository to v0.2.0:

   ```sh
   git checkout tags/v0.2.0
   ```

2. Create a local conda environment using the `env.yaml` file,
and then install scglue:

   ```sh
   conda env create -p conda -f env.yaml && conda activate ./conda
   flit install -s
   ```

3. Set up a project-specific R environment:

   ```R
   packrat::restore()  # Packrat should be automatically installed if not available.
   install.packages("data/download/Saunders-2018/DropSeq.util_2.0.tar.gz", repos = NULL)
   install.packages("custom/Seurat_4.0.2.tar.gz", lib = "packrat/custom", repos = NULL)
   ```

   > R 4.0.2 was used during the project, but any version above 4.0.0 should be compatible.

4. Follow instructions in `data` to prepare the necessary data.
5. Follow instructions in `evaluation` for method evaluation.
6. Follow instructions in `experiments` for case studies.

