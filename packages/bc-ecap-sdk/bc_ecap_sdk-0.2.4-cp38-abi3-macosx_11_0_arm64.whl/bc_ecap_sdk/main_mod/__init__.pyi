# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import bc_ecap_sdk.main_mod.ecap as ecap
import builtins
import typing
from . import ble
from . import ecap
from enum import Enum

class BLEDeviceInfo:
    manufacturer: builtins.str
    model: builtins.str
    serial: builtins.str
    hardware: builtins.str
    firmware: builtins.str

class BandPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    d3: builtins.float
    d4: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    w3: builtins.float
    w4: builtins.float
    def __new__(cls, fs:builtins.float, fl:builtins.float, fu:builtins.float) -> BandPassFilter: ...
    def filter(self, iter:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...

class BandStopFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    d3: builtins.float
    d4: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    w3: builtins.float
    w4: builtins.float
    r: builtins.float
    s: builtins.float
    def __new__(cls, fs:builtins.float, fl:builtins.float, fu:builtins.float) -> BandStopFilter: ...
    def filter(self, iter:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...

class HighPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    def __new__(cls, fs:builtins.float, fu:builtins.float) -> HighPassFilter: ...
    def filter(self, iter:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...

class LowPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    def __new__(cls, fs:builtins.float, fl:builtins.float) -> LowPassFilter: ...
    def filter(self, iter:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...

class MdnsScanResult:
    fullname: builtins.str
    hostname: builtins.str
    addr: builtins.str
    port: builtins.int
    sn: builtins.str
    model: builtins.str

class MessageParser:
    def __new__(cls, device_id:builtins.str, msg_type:ecap.MsgType) -> MessageParser: ...
    def receive_data(self, data:typing.Sequence[builtins.int]) -> None: ...

class NotchFilter:
    def __new__(cls, f0:builtins.float, fs:builtins.float, quality:builtins.float) -> NotchFilter: ...
    def apply(self, signal:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...

class PyTcpClient:
    def __new__(cls, addr:builtins.str, port:builtins.int) -> PyTcpClient: ...
    def start_data_stream(self, py_parser:MessageParser) -> typing.Any: ...
    def send_command(self, msg_id:builtins.int, data:typing.Sequence[builtins.int]) -> typing.Any: ...

class PyTcpStream:
    def __aiter__(self) -> PyTcpStream: ...
    def __anext__(self) -> typing.Any: ...

class PyTcpStream:
    def __aiter__(self) -> PyTcpStream: ...
    def __anext__(self) -> typing.Any: ...

class ScanResult:
    id: builtins.str
    name: builtins.str
    rssi: builtins.int
    is_in_pairing_mode: builtins.bool
    battery_level: builtins.int

class SosFilter:
    @staticmethod
    def create_low_pass(order:builtins.int, fs:builtins.float, lowcut:builtins.float) -> SosFilter: ...
    @staticmethod
    def create_high_pass(order:builtins.int, fs:builtins.float, highcut:builtins.float) -> SosFilter: ...
    @staticmethod
    def create_band_pass(order:builtins.int, fs:builtins.float, lowcut:builtins.float, highcut:builtins.float) -> SosFilter: ...
    @staticmethod
    def create_band_stop(order:builtins.int, fs:builtins.float, lowcut:builtins.float, highcut:builtins.float) -> SosFilter: ...
    def apply(self, signal:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...

class LogLevel(Enum):
    Error = ...
    Warn = ...
    Info = ...
    Debug = ...
    Trace = ...

def set_eeg_data_callback(func:typing.Any) -> None: ...

def set_imp_data_callback(func:typing.Any) -> None: ...

def set_imu_data_callback(func:typing.Any) -> None: ...

def set_msg_resp_callback(func:typing.Any) -> None: ...

